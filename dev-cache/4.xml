<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zverok&apos;s space</title>
    <description>I don&apos;t build systems. I imagine them, then write them.</description>
    <link>https://zverok.space/</link>
    <atom:link href="https://zverok.space/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 21 Oct 2024 08:55:11 +0000</pubDate>
    <lastBuildDate>Mon, 21 Oct 2024 08:55:11 +0000</lastBuildDate>
    <generator>Jekyll v3.10.0</generator>
    
      <item>
        <title>There is no such thing as a global method (in Ruby)</title>
        <description>&lt;p&gt;&lt;strong&gt;What Ruby’s top-level methods actually are, who they belong to and how they are namespaced.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A few days ago, a curious question &lt;a href=&quot;https://www.reddit.com/r/ruby/comments/1g5ma34/question_about_kernelrand/&quot;&gt;was asked&lt;/a&gt; on /r/ruby, which can be boiled down to this: &lt;strong&gt;How are the methods of the &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Kernel.html&quot;&gt;Kernel&lt;/a&gt; module available in the top-level scope?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The question was dedicated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rand&lt;/code&gt; method, but (as the author correctly suggests) it also applies to many seemingly “top-level” methods documented as belonging to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; module, even as base as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts&lt;/code&gt; (print a string), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require&lt;/code&gt; (load code from another file), or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raise&lt;/code&gt; (an exception).&lt;/p&gt;

&lt;p&gt;We know that in Ruby, all methods belong to some objects and are defined in their classes or modules. The documentation suggests that all of those “global” methods are coming from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; module, yet you typically call them without referring to any module, object, or any other ceremonies (like loading some namespace or adding it to the current scope). So, &lt;strong&gt;how to understand this working?&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;it-is-always-a-method-of-self&quot;&gt;It is always a method of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;In Ruby (unlike most other OO languages), the bare lowercase identifier &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; always refers to either a local variable or (if there is no such variable in the current scope) &lt;em&gt;the method of the current object&lt;/em&gt; (the one that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt; refers to in the current scope).&lt;/p&gt;

&lt;p&gt;So,&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;is always&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; the same as&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt; in the top-level scope? It is a special object, which is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; (though you can’t access it by this identifier, so “main” is just a representation thing):&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; main&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Object&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ancestors&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [Object, Kernel, BasicObject]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, we can see that it is just an instance of the generic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt;, available as a top-level scope, and as such, it includes the module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; and all methods from it, therefore making &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts&lt;/code&gt; available:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; #&amp;lt;Method: Object(Kernel)#puts(*)&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;owner&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Kernel -- who defined it&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receiver&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; main -- object which will receive the call&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But… What’s the deal with this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; module anyway?&lt;/p&gt;

&lt;h3 id=&quot;confusing-legacy-quirk-kernel-vs-object&quot;&gt;Confusing legacy quirk: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; vs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Ideologically&lt;/em&gt;, it was intended for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; module to be a storage for those “global” methods, available everywhere. All of them are private&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, i.e., available only to call on the current object from inside this object, thus making them look global:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;private_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Something&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# NoMethodError: private method `puts&apos; called for main:Object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the same time, methods defined in a base &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Object.html&quot;&gt;Object&lt;/a&gt; class, the common ancestor of all other classes&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, are &lt;em&gt;public&lt;/em&gt; methods that are available on every object for other objects, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#inspect&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#to_s&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#respond_to?(method)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#is_a?(some_class)&lt;/code&gt;, and so on.&lt;/p&gt;

&lt;p&gt;But that’s how it was &lt;em&gt;meant to be&lt;/em&gt;. In fact, &lt;em&gt;most&lt;/em&gt; of the above public methods are also defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;, which is easy to check:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; #&amp;lt;UnboundMethod: Kernel#is_a?(_)&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Kernel&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_methods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_methods&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [:!, :equal?, :__id__, :__send__, :==, :!=, :instance_eval, :instance_exec]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see, a very small batch of what is “ideologically” public methods of every object are actually defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt;, looking at the &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Object.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt;’s docs&lt;/a&gt;, you’ll see much more of them. This is literally a hack in RDoc (Ruby’s documentation system) to make it &lt;em&gt;look&lt;/em&gt; like it is meant to be.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt;, this hack is old and unaware of core methods being defined with Ruby (not C) code, and some of the public (ideologically &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt;’s) methods “slip” back into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;, like &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Kernel.html#method-i-then&quot;&gt;#then&lt;/a&gt; or even &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Kernel.html#method-i-class&quot;&gt;#class&lt;/a&gt; (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;obj.class&lt;/code&gt;). There is a &lt;a href=&quot;https://bugs.ruby-lang.org/issues/19304&quot;&gt;long discussion&lt;/a&gt; about handling it in a saner way (which includes some explanation for how it happened), but it hasn’t moved much yet.&lt;/p&gt;

&lt;h2 id=&quot;when-you-puts-inside-an-object&quot;&gt;When you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts&lt;/code&gt; inside an object&lt;/h2&gt;

&lt;p&gt;So, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts&lt;/code&gt; is actually not a “global” method, but a private method which is included from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; in every object, then… When you call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts&lt;/code&gt; from inside some other class’ method, &lt;em&gt;whose&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts&lt;/code&gt; is this?&lt;/p&gt;

&lt;p&gt;Of the object that calls it!&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; #&amp;lt;Method: A(Kernel)#puts(*)&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#                                      ^ who owns the method actually&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receiver&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; #&amp;lt;A:0x00...&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is &lt;em&gt;different&lt;/em&gt; from most other languages (and, therefore, probably, from the default intuition of many developers), where “global” methods really do belong to some “global” scope and not to the current object.&lt;/p&gt;

&lt;p&gt;This might be considered just an esoteric internal quirk, but understanding this fact may be useful sometimes. Say, in testing some Text UI class, one might want to write test code that checks that some class prints elements of the UI on a method call. (There are special &lt;a href=&quot;https://rspec.info/features/3-13/rspec-expectations/built-in-matchers/output/&quot;&gt;RSpec matchers&lt;/a&gt; to check that, but let’s use this example for simplicity; there are many other Kernel methods that one might want to stub/expect in tests):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyUI&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;header&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-----&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyUI&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;#header&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;outputs header (would fail)&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# No, that `puts` from inside the class wouldn’t call Kernel.puts&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;-----&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;header&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;outputs header (correct way)&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# because it owns its `puts`!&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;-----&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;header&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;one-ukrainian-thing&quot;&gt;
  &lt;h3&gt;A postcard from 🇺🇦&lt;/h3&gt;

  &lt;p&gt;&lt;em&gt;&lt;strong&gt;Please stop here for a moment.&lt;/strong&gt; This is your regular mid-text reminder that I am a living person from Ukraine, with the Russian invasion still ongoing. Please read it.&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One news item.&lt;/strong&gt; There are reliable reports that soldiers from North Korea (as many as 12000) &lt;a href=&quot;https://x.com/KhaterDiana/status/1847253931203670365&quot;&gt;are currently training in Russia to participate in the war in Ukraine&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One piece of context.&lt;/strong&gt; A year ago, on Oct 21, 2023, my best friend from the army training camp was killed in the front line. I wrote a bit about him in a mid-text “postcard” &lt;a href=&quot;https://zverok.space/blog/2023-11-03-syntax-sugar2-pattern-matching-fin.html&quot;&gt;here&lt;/a&gt;. Here is a small &lt;a href=&quot;https://x.com/zverok/status/1848284613048729777&quot;&gt;memorial Twitter thread&lt;/a&gt; about him.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One fundraiser.&lt;/strong&gt; Please help &lt;a href=&quot;https://x.com/zverok/status/1845118020110139857&quot;&gt;raise money&lt;/a&gt; for a volunteer, Olena Samoilenko, who helps the elderly, disabled, and other disadvantaged inhabitants of the Kherson region.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;what-about-custom-top-level-methods&quot;&gt;What about custom top-level methods?&lt;/h2&gt;

&lt;p&gt;So, if all that looks like “standard global methods” are actually methods of the current object (included from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;), what about &lt;em&gt;user-defined global methods&lt;/em&gt;?&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_method&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;who am i? &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The situation is almost exactly the same: such methods become &lt;em&gt;private instance methods&lt;/em&gt; of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt; class, and as such, &lt;em&gt;they are available in every object&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:my_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; #&amp;lt;Method: Object#my_method() test.rb:1&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;my_method&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# called in the context of the main object&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# prints: &quot;who am i? main&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_method&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:my_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; #&amp;lt;Method: A(Object)#my_method() test.rb:1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# invokes my_method that belongs to A&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# prints: who am i? #&amp;lt;A:0x0...&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, once again: &lt;strong&gt;all top-level methods are actually present in every object&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is a clear and consistent system… Which might sometimes lead to extremely weird quirks with the metaprogramming code, which checks for some method’s presence by name and changes the behavior depending on it.&lt;/p&gt;

&lt;p&gt;We actually caught one just last week: deep in Rails insides, there was serialization code that relied on whether the current object &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;respond_to?(:avatar_url)&lt;/code&gt;—and in some completely unrelated place, a helper module was included into the global scope, which made &lt;em&gt;all&lt;/em&gt; objects to have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;avatar_url&lt;/code&gt; method… But not the one that would be expected there in the serialization code. Extremely funny to debug!&lt;/p&gt;

&lt;p&gt;The outtake is: &lt;em&gt;keep your top-level scope clean of random methods, especially those with generic names, and including those that might come from included modules.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;How others do it:&lt;/strong&gt; To the best of my knowledge, there is no other languages (at least amongst relatively mainstream ones) with such an approach to “global” methods. Most of the OO languages either fully prohibit those (Java/C#, you only can have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SomeClass.static_method&lt;/code&gt;); or there is no object context (no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt;) in those methods (Kotlin, Python, PHP), or the methods are truly global, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt; in them consistently refers to some global object (JS with its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;globalThis&lt;/code&gt;, Scala). But I might miss something!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;is-the-main-scope-special&quot;&gt;Is the main scope special?&lt;/h2&gt;

&lt;p&gt;The “main scope is special, everything there goes directly into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt; class” is a good enough heuristic to remember, but one might be interested to observe that the top-level code behaves like &lt;em&gt;any method body&lt;/em&gt;: as if it is all performed in a method of an instance of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt; class. In Ruby, you can have nested method definitions, but they don’t define local methods and instead go to the parent class:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;outer&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# See, we are defining helper inner method!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iteration &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;outer&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# prints &quot;iteration 0&quot;, &quot;iteration 1&quot;, etc.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# prints &quot;iteration 1000&quot; -- the method is now defined in a!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...and moreover&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# prints &quot;iteration 2000&quot; -- it belongs to the A class&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Like many things in Ruby, it is “unlike most of other languages, but self-consistent.”&lt;/p&gt;

&lt;p&gt;With this knowledge, we can model &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; method and its definitions behavior this way:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;my_main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;my_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;implicit_top_level&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# that&apos;s where all your top-level code go&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;other_method&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;OK!&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;my_main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;implicit_top_level&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# `my_main` is an instance of object,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# so `other_method` is now defined in object&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Let’s check:&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;other_method&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# prints &quot;OK!&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# And as everything, including the top-level scope, inherits from Object,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# we have it here:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;other_method&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# prints &quot;OK!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is Ruby for you, keeping on its “slightly peculiar yet consistent” side for most of the time.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This equivalence breaks when we talk about constants. All constants (including classes and modules) in the main scope are nested into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt;, too; but it wouldn’t work in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main_scope_method&lt;/code&gt;. So… It is a bit special thing, after all! Or, rather, it behaves consistently with a method body for everything other than constants; and consistently with class/module body for constants.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;summarizing-it&quot;&gt;Summarizing it&lt;/h2&gt;

&lt;p&gt;Just to reiterate:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In Ruby, there is no such thing as a top-level/global method; the method without an explicit receiver (the core one or user-defined one) is always a &lt;strong&gt;method of the current object&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;Methods defined on the top level become &lt;strong&gt;instance methods of every object&lt;/strong&gt;; modules &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt;d into the top-level scope, are included into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;This distinction—that methods are never really “global”—can be mostly ignored, but it is useful to have an accurate mental model when using metaprogramming or debugging large codebases;&lt;/li&gt;
  &lt;li&gt;Everything is inspectable and should be inspected;&lt;/li&gt;
  &lt;li&gt;Many things are peculiar yet self-consistent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope this helps :)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading. Please support Ukraine with your donations and lobbying for military and humanitarian help. &lt;a href=&quot;https://war.ukraine.ua/&quot;&gt;Here&lt;/a&gt;, you’ll find a comprehensive information source and many links to state and private funds accepting donations.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you don’t have time to process it all, donating to &lt;a href=&quot;https://savelife.in.ua/en/&quot;&gt;Come Back Alive&lt;/a&gt; foundation is always a good choice.&lt;/strong&gt;&lt;/p&gt;

&lt;iframe src=&quot;https://zverok.substack.com/embed&quot; width=&quot;480&quot; height=&quot;320&quot; style=&quot;border:1px solid #EEE; background:white;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;As we’ll see below, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts&lt;/code&gt; is a &lt;em&gt;private&lt;/em&gt; method, and in older versions of Ruby, you couldn’t call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.private_method&lt;/code&gt;, only as a bare word (as a part of the general rule “no explicit receiver for private methods”); since Ruby 2.7, the requirement was relaxed to allow explicit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.private_method&lt;/code&gt; (but only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self&lt;/code&gt;), see the Ruby Changes &lt;a href=&quot;https://rubyreferences.github.io/rubychanges/2.7.html#selfprivate_method&quot;&gt;entry on it&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;In Ruby, &lt;em&gt;unlike other languages&lt;/em&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; methods are available to the children of the class who defined them, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protected&lt;/code&gt; is used to mark what some other languages might call “friend”: methods that are available to the current object and &lt;em&gt;other objects of the same class&lt;/em&gt;. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;In some contexts, one needs a very lean class without any extra conveniences defined, and for that, the class might be explicitly inherited from &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/BasicObject.html&quot;&gt;BasicObject&lt;/a&gt;. But without this special approach, any class will inherit from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object&lt;/code&gt;. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 21 Oct 2024 00:00:00 +0000</pubDate>
        <link>https://zverok.space/blog/2024-10-21-global_functions.html</link>
        <guid isPermaLink="true">https://zverok.space/blog/2024-10-21-global_functions.html</guid>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>On programming and poetry (not Python’s tool)</title>
        <description>&lt;p&gt;&lt;strong&gt;Some thoughts on how programming’s unlikely relations to poetry, and some implications of those relations&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I don’t have much time recently to work on articles about programming (especially considering my typical article length); but I have some previously written content to share. This article was drafted as a &lt;a href=&quot;https://x.com/zverok/status/1493212494583713794&quot;&gt;Twitter thread&lt;/a&gt; on my 39th birthday: a day when I published my new site, and announced “I’ll be writing more here soon!” It was Feb 14, 2022, ten days before the full-scale Russian invasion started. Two and a half years later, I finally go to making it into a standalone text with clearer arguments, some links and conclusions. Anyway.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You don’t see poetry (as in writing and reading poems, not the Python tool) mentioned besides programming frequently. And when it is, it is usually in one of two ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;to contrast “soulful” humanitarian activity to the “boring” engineering one or&lt;/li&gt;
  &lt;li&gt;to use “poetry” as an informal synonym for “beauty,” to say that some code “reads like poetry” is to say it is nice, or expressive, or in some other way pleases the author of the statement.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But I believe there could be deeper insights in looking at them together. Here are some assorted thoughts on it.&lt;/p&gt;

&lt;h2 id=&quot;am-i-qualified-to-write-about-the-topic&quot;&gt;Am I qualified to write about the topic?&lt;/h2&gt;

&lt;p&gt;Judge yourself.&lt;/p&gt;

&lt;p&gt;From the software development side: I am a software architect, writing code for 25+ years, a Ruby programming language committer, author of some open source libraries, many texts, and some documentation projects; in former days, I did a lot of Ruby mentoring, including teaching people who had no prior knowledge about Ruby/programming whatsoever.&lt;/p&gt;

&lt;p&gt;From the poetry/writing side: I have been writing prose and poetry for as long as I can remember myself; my first novel just had been published recently.&lt;/p&gt;

&lt;p&gt;I considered myself primarily a poet for at least a decade between my mid-20s and mid-30s. I didn’t achieve much more than occasional magazine publication or festival participation (almost got my first book published, but then the publisher went bankrupt). Nevertheless, I had enough community validation to at least believe I understand &lt;em&gt;some&lt;/em&gt; things about it (even if not excel myself).&lt;/p&gt;

&lt;p&gt;I stopped writing poetry a few years ago (and switched to prose, that’s a different story). Some of my recent texts can be &lt;a href=&quot;https://zverok.space/writing/old/&quot;&gt;here&lt;/a&gt; (mostly in Russian, which I don’t use anymore, obviously).&lt;/p&gt;

&lt;p&gt;I also organized a notable online poetry festival in 2017, before it was cool! (The site is down currently, and the remains of the festival are scrubbed from the internet for reasons too complicated to explain. However, I was exposed to a large number of authors from all over Western Europe who wrote in several Slavic languages—Serbian, Croatian, Bulgarian, Slovak, Polish, etc.—which was an educative experience in itself.)&lt;/p&gt;

&lt;p&gt;I still read a lot of poetry and ON poetry and try to understand the broad context; this year, I started the &lt;a href=&quot;https://7uapoems.substack.com/&quot;&gt;7uapoems&lt;/a&gt; project, dedicated to the translation of modern Ukrainian poetry written by those who are currently in the army.&lt;/p&gt;

&lt;p&gt;With that being said, I am not really strong on literary theory, so all attempts to define things in the text below are my own. For those well-versed (pun intended) in theoretical matters, it would probably be irritating or laughable.&lt;/p&gt;

&lt;p&gt;I don’t also try to go into precise theoretical terms on the software development point of view. This, I could’ve done, but my way of thinking and talking about things is usually “in layman’s terms,” for better or worse.&lt;/p&gt;

&lt;h2 id=&quot;why-do-we-write-and-read-literature&quot;&gt;Why do we write and read literature&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A loose attempt to define some things&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Why do we write and read literature, any literature?&lt;/p&gt;

&lt;p&gt;Mostly to &lt;em&gt;share an experience&lt;/em&gt;. An experience of going somewhere, living through some events, feeling some emotions, understanding some things. The experience we probably can’t access directly. (Yes, there is also room for a variety of literature, which just helps to relive familiar experiences, but let’s not complicate it further.)&lt;/p&gt;

&lt;p&gt;In the scope of this definition, &lt;em&gt;poetry&lt;/em&gt;, in a nutshell, is a more efficient way of sharing an experience that is hard to express rationally. It relies on some “leap” of understanding, where a carefully crafted phrase is as efficient as five dense pages of explanations. (“Oversimplification” is my middle name!)&lt;/p&gt;

&lt;p&gt;That has actually nothing to do with “beauty,” which is just one of the &lt;em&gt;poetic tools&lt;/em&gt; that can be used, rejected, or subverted; in bad poetry, “beautifully crafted” lines can mask the triviality of the meanings conveyed/experiences shared.&lt;/p&gt;

&lt;p&gt;While I stopped writing poetry, I still believe that the “poetic” way of passing the experience is the most efficient in many cases. And, to the best of my perception, I have never stopped doing &lt;em&gt;poetic work&lt;/em&gt; while writing prose. There are “prosaic” writing tools: structuring the plot, taking care of worldbuilding, and inventing compelling motivations for characters, and there are “poetic” tools: choosing the tone, rhythmand imagery that would immerse the reader—and both kinds of tools are likely to be present in any forms of writing, in different amounts.&lt;/p&gt;

&lt;p&gt;Conversely, if you don’t like to read poetry (or even don’t understand why one would do it), it might mean you might not have met the kind that communicates to you and your experience, or your temperament doesn’t require this particular form of writing. This is just a personal characteristic, and it doesn’t mean that you are never exposed to poetic tools of writing in other texts. And hopefully, this also doesn’t mean that there is nothing you can take from my comparisons.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2024-10-06/izyum.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A fragment from Artur Dron’s poem, “Izyum communion”. &lt;a href=&quot;https://7uapoems.substack.com/p/seven-poems-a-week-week-2-artur-dron&quot;&gt;The translation&lt;/a&gt; is mine.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-is-programming-related&quot;&gt;How is programming related?&lt;/h2&gt;

&lt;p&gt;In the casual “engineering vs art” framework of thought, programming seems to oppose poetry.
And yet, in former years, every time I shyly mentioned at a programming conference “…and also a poet”, there were people around—frequently, distinguished engineers—to say “me too!”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2024-10-06/quote.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A quote via &lt;a href=&quot;https://x.com/alexbilz/status/1839860232593223983&quot;&gt;Alex Bilzerian&lt;/a&gt;, shown to me by my friend &lt;a href=&quot;https://adworse.codes/&quot;&gt;Dima Ermilov&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I am thinking and writing a lot about perceiving code as text and intuitions/approaches/expectations it brings. &lt;a href=&quot;https://zverok.space/blog/2015-09-22-three-kinds.html&quot;&gt;One of the first&lt;/a&gt; articles on this blog (nine years ago, huh) was about Ruby’s suitability for “writer” kind of programmers; my recent &lt;a href=&quot;https://2024.euruko.org/speakers/victor_shepelev&quot;&gt;EuRuKo talk&lt;/a&gt; also had “writing stories in code” as one of the key themes.&lt;/p&gt;

&lt;p&gt;Taking the definition of writing from earlier, &lt;strong&gt;we can say that writing code is &lt;em&gt;sharing the experience&lt;/em&gt; of understanding the requirements/implementation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Looking from this point, we can clearly see room for &lt;em&gt;poetic&lt;/em&gt; work here: it is frequently useful—at least with some mindsets—to start solving the task with the several “phrases” that make the leap over the whole implementation domain.&lt;/p&gt;

&lt;p&gt;The topic is quite divisive: to the extent when &lt;em&gt;any&lt;/em&gt; attempt to compress meaning with modern language features is frowned upon—especially sad to observe in the Ruby community, where the discrepancy between language’s intent and community practices seems to only grow with time.&lt;/p&gt;

&lt;p&gt;The “poetic” approaches get ghettoized in the languages more friendly to leaps of understanding but less readable as everyday prose, like Perl and APL. (Aside note: the original thread was partially triggered by the first episode of &lt;a href=&quot;https://www.arraycast.com/&quot;&gt;The Array Cast podcast&lt;/a&gt;, explicitly mentioning poetry in regards to APL and related languages. But even there, if I remember correctly, it was mentioned rather as a generic synonym for “something beautiful/pleasant to read,” though the users of terse languages might be, indeed, closer to agreeing with the value of “pass the experience in an intuitive way via carefully crafted line of text.”)&lt;/p&gt;

&lt;p&gt;The thing is, I believe that &lt;strong&gt;poetic work is a valid and useful tool.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sometimes, “poetic” code is useful in the drafting stage, and then it is expanded—fully or partially—into a more verbose “prose,” all the modules and services and concerns.&lt;/p&gt;

&lt;p&gt;Sometimes, the succinct, “intuitive” expression is the best, and it is acknowledged as such by most of the readers—the same way some lines of poems become proverbs. We frequently call these “idioms” in coding (I have my concerns with this term, but that’s for another time).&lt;/p&gt;

&lt;p&gt;It might be an uncommon opinion, but the amount of code solving the same task &lt;em&gt;might&lt;/em&gt; differ strikingly (talk orders of magnitude) if the “stop, think, write one verse” approach (instead of “write 20 pages of your usual”) matches the task.&lt;/p&gt;

&lt;p&gt;And maintaining five lines of code—even one that leans on intuitions—is, in any case, cheaper than maintaining 20 files of it. A big part of the industry at some point stopped believing that, so the “don’t write smart code” argument is usually argued as “2 lines of ‘simple’ code against 1 line of ‘smart’.”&lt;/p&gt;

&lt;div class=&quot;one-ukrainian-thing&quot;&gt;
  &lt;h3&gt;A postcard from 🇺🇦&lt;/h3&gt;

  &lt;p&gt;&lt;em&gt;&lt;strong&gt;Please stop here for a moment.&lt;/strong&gt; This is your regular mid-text reminder that I am a living person from Ukraine, with the Russian invasion still ongoing. Please read it.&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One news item.&lt;/strong&gt; &lt;a href=&quot;https://united24media.com/latest-news/russian-forces-executed-16-ukrainian-prisoners-of-war-in-pokrovske-direction-2729&quot;&gt;Russian forces executed 16 Ukrainian prisoners of war in the Pokrovsk direction.&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One piece of context.&lt;/strong&gt; &lt;a href=&quot;https://x.com/With__Ukraine/status/1842330762231599109&quot;&gt;How exactly Russia violates the Genocide Convention&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One fundraiser.&lt;/strong&gt; Please help to &lt;a href=&quot;https://x.com/WayToUkraine/status/1842364786144903273&quot;&gt;raise fund&lt;/a&gt; to buy a logistics truck! “Way To Ukraine” is a reliable fundraising organization with full transparency and a real understanding of what our military needs.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;so-what&quot;&gt;So what?&lt;/h2&gt;

&lt;p&gt;Whether you sold on my comparison or not, you might wonder about its &lt;em&gt;utility&lt;/em&gt;. Like, OK, programming, or some kinds of it, might or might not bear some resemblance to “poetic work,” but where does it lead us?&lt;/p&gt;

&lt;p&gt;The thing is, I would like to see more people treating code on the level of phrases and “paragraphs” (methods or groups of statements) with the mindset of how the literature is treated. And I mean it not as just another way of saying, “let’s write bEAuTifuL code and be free as butterflies!”&lt;/p&gt;

&lt;p&gt;I am talking about the kind of perspective from which we can analyze, discuss (and maybe teach ourselves) to think in terms of the effect on the potential reader (both human and compiler/interpreter) in terms of “how meanings of expression, in this case, convey the idea behind the code; whether it could be expressed in a different way to emphasize a different aspect.” It is a conversation that is less rigid than autoformatting and style guides and more nuanced than abstract “readability” or “smart/simple code.”&lt;/p&gt;

&lt;p&gt;But time and again, when I have this conversation with people (colleagues or just participants of online discussions), it is a two-stop track: first, “it is all subjective, and just depends on who likes what,” and when presented with less-subjective analysis/explanation about how the text/code might be perceived, the second and final stop is “maybe, but I don’t understand why you pay so much attention to this, it is all nitpicking.”&lt;/p&gt;

&lt;p&gt;But I still believe this is a conversation worth having. I would like to see, for example, some “literary” criticism of new releases of a popular library, along the lines of “this is a stylistic approach this author usually takes, which works this way, and is perfect for tasks like A, yet in situation B it leads to those possible misunderstandings…”—but we can’t have that, without being labeled as “subjective” or “nitpicking,” because “well, it works, what else do you need?”&lt;/p&gt;

&lt;p&gt;We also need to recognize and cherish wild experimenting with form and style, the “poet’s poet” notion: code that, as it is, you’ll hardly use in production and in a team, but which helps to investigate the possibilities of the expressive power of your language, and master them to use appropriately.&lt;/p&gt;

&lt;p&gt;The end goal here, again, is not some abstract “beauty” or “engineering excellence” but pragmatic values we all share: maintainability, openness to change—things that are affected with clarity of understanding, which, in turn, depends on how the things are &lt;em&gt;expressed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That’s why I return to the topic of code and text constantly and from different angles. Not for the last time, probably!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;See also: “&lt;a href=&quot;https://olano.dev/blog/do-programmers-dream-of-electronic-poems/&quot;&gt;Do programmers dream of electric poems?&lt;/a&gt;”&lt;/strong&gt;, an article by &lt;a href=&quot;https://olano.dev/&quot;&gt;Facundo Olano&lt;/a&gt; which investigates similar topics with somewhat different argumentation.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading. Please support Ukraine with your donations and lobbying for military and humanitarian help. &lt;a href=&quot;https://war.ukraine.ua/&quot;&gt;Here&lt;/a&gt;, you’ll find a comprehensive information source and many links to state and private funds accepting donations.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you don’t have time to process it all, donating to &lt;a href=&quot;https://savelife.in.ua/en/&quot;&gt;Come Back Alive&lt;/a&gt; foundation is always a good choice.&lt;/strong&gt;&lt;/p&gt;

&lt;iframe src=&quot;https://zverok.substack.com/embed&quot; width=&quot;480&quot; height=&quot;320&quot; style=&quot;border:1px solid #EEE; background:white;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Sun, 06 Oct 2024 00:00:00 +0000</pubDate>
        <link>https://zverok.space/blog/2024-10-06-poetry.html</link>
        <guid isPermaLink="true">https://zverok.space/blog/2024-10-06-poetry.html</guid>
        
        
        <category>philosophy</category>
        
      </item>
    
      <item>
        <title>“Gilded Rose” refactoring kata in Ruby — as if it is 2024</title>
        <description>&lt;p&gt;&lt;strong&gt;A “stories-first” approach to refactor a small yet complicated piece of business code&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recently, I didn’t have time or resource for serious writing. I had plans for several long articles for the summer that gone, but unfortunately not many have came of that. But last night I have stumbled upon famous (so it seems, though I have never seen it before) refactoring kata, and had an impulse for trying my hands on that, writing down some thoughts on my ways of writing code along the way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-kata&quot;&gt;The kata&lt;/h2&gt;

&lt;p&gt;“&lt;a href=&quot;https://github.com/emilybache/GildedRose-Refactoring-Kata&quot;&gt;Gilded Rose&lt;/a&gt;” is a famous refactoring kata that is available in many languages. It &lt;a href=&quot;https://github.com/emilybache/GildedRose-Refactoring-Kata/blob/main/GildedRoseRequirements.md&quot;&gt;goes like this&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;First an introduction to our system:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;All &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;items&lt;/code&gt; have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SellIn&lt;/code&gt; value which denotes the number of days we have to sell the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;items&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;All &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;items&lt;/code&gt; have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Quality&lt;/code&gt; value which denotes how valuable the item is&lt;/li&gt;
    &lt;li&gt;At the end of each day our system lowers both values for every item&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;Pretty simple, right? Well this is where it gets interesting:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Once the sell by date has passed, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Quality&lt;/code&gt; degrades twice as fast&lt;/li&gt;
    &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Quality&lt;/code&gt; of an item is never negative&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;“Aged Brie”&lt;/strong&gt; actually increases in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Quality&lt;/code&gt; the older it gets&lt;/li&gt;
    &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Quality&lt;/code&gt; of an item is never more than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;50&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;“Sulfuras”&lt;/strong&gt;, being a legendary item, never has to be sold or decreases in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Quality&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;“Backstage passes”&lt;/strong&gt;, like aged brie, increases in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Quality&lt;/code&gt; as its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SellIn&lt;/code&gt; value approaches;
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Quality&lt;/code&gt; increases by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; when there are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10&lt;/code&gt; days or less and by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt; when there are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt; days or less but&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Quality&lt;/code&gt; drops to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; after the concert&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;We have recently signed a supplier of conjured items. This requires an update to our system:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;“Conjured”&lt;/strong&gt; items degrade in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Quality&lt;/code&gt; twice as fast as normal items&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;Feel free to make any changes to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UpdateQuality&lt;/code&gt; method and add any new code as long as everything still works correctly. However, do not alter the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item&lt;/code&gt; class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/emilybache/GildedRose-Refactoring-Kata/blob/main/ruby/gilded_rose.rb#L7-L54&quot;&gt;initial Ruby implementation&lt;/a&gt; provided by the kata maintainer is some scary 45-line method, all made of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;s with many levels of nesting; it is a direct translation of the initial &lt;a href=&quot;https://github.com/emilybache/GildedRose-Refactoring-Kata/blob/main/csharp.NUnit/GildedRose/GildedRose.cs#L14&quot;&gt;C# implementation&lt;/a&gt;. The suggested exercise is to refactor it in any way one sees suitable.&lt;/p&gt;

&lt;p&gt;Several Ruby solutions to the kata can be found throughout the internet. Mostly, they take on the usual path of having a class per every item kind and frequently divide all the logic into five-word-name, one-line-body methods for each action in every class: that’s a style significant part of the community prefers lately.&lt;/p&gt;

&lt;p&gt;My approaches to writing in Ruby are somewhat different, and I thought that I might just show how I’d solve a task like that.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“But isn’t it just a useless toy task?” No parallelism, no SQL tinkering, no sub-microsecond benchmarking… In all honesty, surprising amounts of business code written in many modern codebases are solving simple yet convoluted tasks like that; and too frequently poor expression of thoughts on &lt;em&gt;this&lt;/em&gt; “negligible” level is what really affects velocity, stability and the design of the whole system. That’s why I am frequently talking about “phrase-level” expressiveness and method-size solutions, being principal developer and all.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;adding-unit-tests&quot;&gt;Adding unit tests&lt;/h2&gt;

&lt;p&gt;The code has “integrational” tests: a &lt;a href=&quot;https://github.com/emilybache/GildedRose-Refactoring-Kata/blob/main/ruby/texttest_fixture.rb&quot;&gt;script&lt;/a&gt; that prints the 30-day output for some items and an &lt;a href=&quot;https://github.com/emilybache/GildedRose-Refactoring-Kata/blob/main/texttests/ThirtyDays/stdout.gr&quot;&gt;expected output&lt;/a&gt; file (which the original kata suggested to check via the specialized tool, but in a scripting language, it is easy to make the &lt;a href=&quot;https://github.com/zverok/gilded_rose_kata/blob/main/texttest.rb&quot;&gt;checking script from scratch&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;It lacks more atomic tests, though, and that’s what we start with.&lt;/p&gt;

&lt;p&gt;My approach to tests is simple:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I like TDD/BDD (in the loose understanding of “write the tests before changing the code”);&lt;/li&gt;
  &lt;li&gt;I treat my tests the way I treat my code: I want them to be easy to write and read, leveraging my language’s expressiveness to have the code as close to “clearly express the intention, and nothing else” as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The latter is a surprisingly contrarian opinion in the latter years, at least in the Ruby community. I dedicated quite an &lt;a href=&quot;https://zverok.space/blog/2017-11-07-on-culture-of-bdd.html&quot;&gt;emotional article&lt;/a&gt; article to the matter once, and I wouldn’t repeat my arguments here. I’ll just say that in my experience and experience of my colleagues, these approaches work, and I am not planning to change them anytime soon.&lt;/p&gt;

&lt;p&gt;So, on the “clearly expresses the intention” topic. What I’d “theoretically” want to write in tests for this algorithm is something to the meaning:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;for an item like &lt;em&gt;this&lt;/em&gt;:
    &lt;ul&gt;
      &lt;li&gt;in N days, we should have these values&lt;/li&gt;
      &lt;li&gt;in M days, we should have those values&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;for another item:
    &lt;ul&gt;
      &lt;li&gt;in N days, we should…&lt;/li&gt;
      &lt;li&gt;…and so on.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s how I am &lt;a href=&quot;https://github.com/zverok/gilded_rose_kata/blob/main/gilded_rose_spec.rb&quot;&gt;doing it&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;gilded_rose&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;saharspec&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;saharspec/its/with&apos;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GildedRose&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gilded_rose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_quality&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:gilded_rose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GildedRose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;alias_matcher&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:have_attributes&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;standard item&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;+5 Dexterity Vest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sell_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;days: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sell_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quality: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;days: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sell_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quality: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;days: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sell_in: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quality: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;days: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sell_in: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quality: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;aged brie&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Aged Brie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sell_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;days: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sell_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quality: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;days: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sell_in: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quality: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# ...and so on&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This code uses &lt;a href=&quot;https://github.com/zverok/saharspec&quot;&gt;saharspec&lt;/a&gt;, my RSpec extensions library (which tries to be ideologically compatible with RSpec, just taking its ideas further), namely its recent &lt;a href=&quot;https://github.com/zverok/saharspec/tree/experimental&quot;&gt;experimental&lt;/a&gt; branch where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it_with&lt;/code&gt; method is implemented.&lt;/p&gt;

&lt;p&gt;This method is just a shortcut for what RSpec already has. This code:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;it_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;days: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sell_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quality: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;..corresponds to this vanilla RSpec code:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;when it is day 1&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sell_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quality: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;…and is indispensable when you need to write a lot of tests for the same piece of logic, specifying the correspondence of various parameters to expected values.&lt;/p&gt;

&lt;p&gt;The rest, like implicit testing of the subject (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it { is_expected.to&lt;/code&gt; implicitly applied to what is declared as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subject&lt;/code&gt; above), and expressive matcher is what RSpec already provides. Though again, using many of these tools isn’t that fashionable lately.&lt;/p&gt;

&lt;p&gt;This is not the only way to make a concise test for input/output pairs. Other options are truth tables, something along the lines of:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sell_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quality: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sell_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quality: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sell_in: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quality: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when it is day &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gilded_rose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_quality&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Or, using RSpec’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shared_examples&lt;/code&gt; feature:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;shared_examples&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;change by day&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when it is day &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gilded_rose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update_quality&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;it_behaves_like&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;change by day&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;sell_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quality: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;it_behaves_like&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;change by day&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;sell_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quality: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both of these options have their merits, but I preferred &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it_with&lt;/code&gt; approach here because it doesn’t have any indirections (like, a pair of input/output in one place, and how they are related is in the other), so when something fails, it shows exactly the line that failed. If I deliberately break one of the tests, RSpec will clearly point to the line it is broken (I am deliberately changing one of the tests to be failing to showcase this):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2024-09-19/red.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the last line is exactly the command you need to restart only the failing test for quick debugging (which is harder with truth tables/shared examples).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note also pretty informative test and error description produced without any additional text written by the developer. It is not very grammatical, but pretty clear.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-implementation&quot;&gt;The implementation&lt;/h2&gt;

&lt;p&gt;With tests properly passing, now to implementation.&lt;/p&gt;

&lt;p&gt;When rereading the requirements, we might notice that &lt;strong&gt;all conditions can be described as a simple dependency &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(name, sell_in) =&amp;gt; change of quality&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The most natural representation of this in the modern Ruby would be pattern matching. So, quite quickly (with a few failing tests and numbers tinkering), I’ve come up with this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GildedRose&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_quality&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Sulfuras, Hand of Ragnaros&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sell_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Aged Brie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Aged Brie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Backstage passes to a TAFKAL80ETC concert&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;quality&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Backstage passes to a TAFKAL80ETC concert&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Backstage passes to a TAFKAL80ETC concert&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Backstage passes to a TAFKAL80ETC concert&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sell_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;quality&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;quality&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There aren’t many moving parts here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;quick guard clause for “legendary item” that basically doesn’t require any processing;&lt;/li&gt;
  &lt;li&gt;almost literal rewriting of requirements into simple correspondences “with this name &amp;amp; range of values of how many days left: that change in quality”&lt;/li&gt;
  &lt;li&gt;the requirement “quality never goes below 0 and above 50” straightforwardly translates into &lt;a href=&quot;https://docs.ruby-lang.org/en/master/Comparable.html#method-i-clamp&quot;&gt;Comparable#clamp&lt;/a&gt;; this allows decoupling of &lt;em&gt;change&lt;/em&gt; of the value from the &lt;em&gt;range control&lt;/em&gt; (instead of the &lt;a href=&quot;https://github.com/emilybache/GildedRose-Refactoring-Kata/blob/main/ruby/gilded_rose.rb#L20-L21&quot;&gt;naive initial&lt;/a&gt; “if it is inside limits, do the operation”).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For further clarity, let’s walk through a part of it, with comments (shortened the name of the item so the code will take less place horizontally):&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sell_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# we match pair of (name, days to sell)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Backstage passes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# if it matches (backstage pass, anything &amp;lt;=0)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;quality&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# remove the rest of the quality&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Backstage passes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# otherwise, (backstage pass, anything &amp;lt;= 5)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;# +3 points: I used (optional) + to underline the meaning&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Backstage passes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# ...and so on...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Backstage passes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# if name still matches, and ANY other days to sell&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;# the fallback value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that inside pattern matching, Ruby uses &lt;a href=&quot;https://docs.ruby-lang.org/en/master/Object.html#method-i-3D-3D-3D&quot;&gt;#===&lt;/a&gt; matching method for every value in an array, and beginless range (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..0&lt;/code&gt;: range from -infinity to 0, including it) has its &lt;a href=&quot;https://docs.ruby-lang.org/en/master/Range.html#method-i-3D-3D-3D&quot;&gt;===&lt;/a&gt; defined so that it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; for a number inside the range.&lt;/p&gt;

&lt;p&gt;That’s, kinda, it! The core method is 25 lines now (including blank ones); at the same time, it is only four simple expressions and only one level of condition/nesting.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Random fun fact: Ruby linter/style checker Rubocop with default settings would complain that:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Cyclomatic complexity for update_item is too high. (10/7)&lt;/li&gt;
    &lt;li&gt;Method has too many lines. (22/10)&lt;/li&gt;
    &lt;li&gt;Perceived complexity for update_item is too high. (10/8)&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;Judge yourself whether the complexity and length of the code in front of your eyes is that criminal! (In my opinion, our obsession with “small simple methods with very descriptive names” went too far many years ago.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One more notice: the original kata’s text suggests “not to re-write the code from scratch, but rather to practice taking small steps, running the tests often, and incrementally improving the design.” What I did, though, demonstrates one of the things I’ve learned to trust through my career: when meeting with really problematic code, it is frequently easier to rewrite [parts of] it from scratch, at least on a small scale. Iterative improvements might never converge to something that clearly says what the original intention was!&lt;/p&gt;

&lt;p&gt;If I hadn’t been provided with the requirements when meeting the code like that, I’d probably move for some time with iterating improvements till the original requirements would become clear—first and foremost, trying to make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; linear (even at the price of repeating conditions) to see how many branches are there &lt;em&gt;really&lt;/em&gt;; and then considered whether there is a better way to implement those requirements. (I tried to demonstrate that in a series of commits to a separate branch, but early on in the attempt, I understood I was not doing an honest job. I couldn’t shake away the knowledge about the requirements, so I was too quickly shortcutting to “oh, anyway, I know why this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt; 50&lt;/code&gt; repeats in many branches”. If I stumbled upon the kata again, it would be fun to try to honestly restore the requirements from the code without reading them first. But it is what it is.)&lt;/p&gt;

&lt;h2 id=&quot;what-it-would-take-to-implement-a-new-requirement&quot;&gt;What it would take to implement a new requirement&lt;/h2&gt;

&lt;p&gt;Let’s remember that the whole kata’s goal was to make updating the code easier. So, back to that newly emerged requirement:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We have recently signed a supplier of conjured items. This requires an update to our system:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;“Conjured”&lt;/strong&gt; items degrade in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Quality&lt;/code&gt; twice as fast as normal items&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Specifying that will require adding this tests block:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;conjured item&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Conjured Mana Cake&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sell_in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;days: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sell_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quality: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;days: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sell_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quality: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;days: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sell_in: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quality: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;days: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sell_in: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quality: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…and this to the main &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt; of the implementation:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Conjured/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Conjured/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(As explained above, pattern matching uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;===&lt;/code&gt; to check individual values, and &lt;a href=&quot;https://docs.ruby-lang.org/en/master/Regexp.html#method-i-3D-3D-3D&quot;&gt;Regexp#===&lt;/a&gt; can be utilized here to handle “any string that starts with”. Random fun fact: many nice refactorings suddenly break on the necessity to handle string inclusion instead of constant strings to identify the necessary case.)&lt;/p&gt;

&lt;p&gt;So, an eight-line change &lt;a href=&quot;https://github.com/zverok/gilded_rose_kata/commit/2eed8bec23289bc289c88b60b5bfa66b27f9d790&quot;&gt;in total, including blank lines&lt;/a&gt; (the commit is somewhat bigger as it also updates the integrational test).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2024-09-19/allgreen.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, seems not that bad, actually…&lt;/p&gt;

&lt;div class=&quot;one-ukrainian-thing&quot;&gt;
  &lt;h3&gt;A postcard from 🇺🇦&lt;/h3&gt;

  &lt;p&gt;&lt;em&gt;&lt;strong&gt;Please stop here for a moment.&lt;/strong&gt; This is your regular mid-text reminder that I am a living person from Ukraine, with the Russian invasion still ongoing. Please read it.&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One news item.&lt;/strong&gt; Photos emerged on social media showing &lt;a href=&quot;https://x.com/Lyla_lilas/status/1835999466844725474&quot;&gt;russians executed an unarmed captive Ukrainian soldier with a sword.&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One piece of context.&lt;/strong&gt; Many international festivals decided to screen the “Russians at War” movie by “Canadian” director Anastasia Trofimova. It is claimed to be a documentary, but it is &lt;a href=&quot;https://x.com/United24media/status/1832126831585083428&quot;&gt;actually a propaganda piece by a person employed by RT Russian propaganda channel&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One fundraiser.&lt;/strong&gt; &lt;a href=&quot;https://x.com/zemlnk/status/1836274619944153198&quot;&gt;The PayPal fundraiser&lt;/a&gt; for the most critical Pokrovsk frontline direction.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;is-that-really-it&quot;&gt;Is that really it?..&lt;/h2&gt;

&lt;p&gt;So, an honest question one might have: if it was real application code, would I really leave it like that, in one method with many conditions?&lt;/p&gt;

&lt;p&gt;With this amount and uncertainty of requirements, honestly: yes!&lt;/p&gt;

&lt;p&gt;One thing I am not happy about here, though, is the repetition of the name check in the pattern-matching solution. The possible alternative, which is kinda “DRYer”, is using ole good &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when&lt;/code&gt; instead:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Aged Brie&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sell_in&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Backstage passes to a TAFKAL80ETC concert&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sell_in&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;quality&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sell_in&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The solution has its pros and cons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pro: no duplication on name check; more visible logical blocks per item group;&lt;/li&gt;
  &lt;li&gt;con: duplication of the condition &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case item.sell_in&lt;/code&gt;—which is somewhat harder to notice (that all the checks are by the same parameter) and somewhat easier to break (i.e., introduce another part of the logic that makes the decision by another variable and start losing the whole picture).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In real application, I might’ve chosen one of the two (or switch between them during development), depending on what feels better at the moment!&lt;/p&gt;

&lt;p&gt;With the growth of the cases number (or if I’d felt extra-architector-y), I might’ve also considered a data-based approach: construct a constant hash of conditions like…&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;Aged Brie&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;Backstage passes to a TAFKAL80ETC concert&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:nullify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# a special value &quot;drop it to zero&quot;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...and so on&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;…and then a code that chooses the change based on that.&lt;/p&gt;

&lt;p&gt;But only after understanding I have &lt;strong&gt;enough cases to decide&lt;/strong&gt; what is the exhaustive structure for such a constant (and if we really have one).&lt;/p&gt;

&lt;p&gt;Which leads us to the following question…&lt;/p&gt;

&lt;h2 id=&quot;but-what-about-asbstrakshunz&quot;&gt;But what about asbstrakshunz?&lt;/h2&gt;

&lt;p&gt;Apparently, the first intuitive reaction of many Rubyists (and not only them) to a task like that is thinking about representing each of the cases as a class that implements the corresponding piece of logic. It is so widespread that I have a term for it: knee-jerk OOP.&lt;/p&gt;

&lt;p&gt;I was like that, too. But with years, I learned to keep my OOP reflexes at bay—as well as &lt;em&gt;any&lt;/em&gt; early “let’s abstract it!” urge (like the aforementioned “constant extraction” idea).&lt;/p&gt;

&lt;p&gt;While the amount of code implementing some algorithm is no more than one screen, roughly, it is frequently beneficial to keep it all together to see the whole story at once. This way, when we don’t need to navigate through many classes/small methods, we can clearly see what variables change non-trivially (only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quality&lt;/code&gt;, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sell_in&lt;/code&gt; being absolutely trivial), and variants of behavior we have (constant increase, constant decrease, nullify), and it is immediately obvious that we don’t (yet?) have cases like “quality halves every day” or “it depends on the weather”.&lt;/p&gt;

&lt;p&gt;I call it the “stories-first approach” (a slide from my recent &lt;a href=&quot;https://2024.euruko.org/speakers/victor_shepelev&quot;&gt;EuRuKo talk&lt;/a&gt;, I hope the video will be published soon):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2024-09-19/stories.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once there is more code (as the amount of conditions in the kata requirements is, of course, toy-ish), we might begin to see the appropriate structure for it, which might be quite different from the knee-jerk one! Would there be more “legendary” items, and would this mean the same thing every time (“just a constant quality and no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sell_in&lt;/code&gt; change”) or a &lt;em&gt;new&lt;/em&gt; thing every time? What types of quality changes might be there, other than “increase/decrease/nullify”? Which types of the “change by” value changes are common, and which are accidental?&lt;/p&gt;

&lt;p&gt;Only having more than one screen of possible cases might we need to try finding things to extract. And quite frequently, the things extracted might happen to be small utilities, new “words” in the language the “story” is written in, instead of splitting one story into many independent ones!&lt;/p&gt;

&lt;p&gt;That’s it for now. Hope it was an interesting journey into another person’s thinking process, even if you disagree with some (or all) of the conclusions.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading. Please support Ukraine with your donations and lobbying for military and humanitarian help. &lt;a href=&quot;https://war.ukraine.ua/&quot;&gt;Here&lt;/a&gt;, you’ll find a comprehensive information source and many links to state and private funds accepting donations.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you don’t have time to process it all, donating to &lt;a href=&quot;https://savelife.in.ua/en/&quot;&gt;Come Back Alive&lt;/a&gt; foundation is always a good choice.&lt;/strong&gt;&lt;/p&gt;

&lt;iframe src=&quot;https://zverok.substack.com/embed&quot; width=&quot;480&quot; height=&quot;320&quot; style=&quot;border:1px solid #EEE; background:white;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Thu, 19 Sep 2024 00:00:00 +0000</pubDate>
        <link>https://zverok.space/blog/2024-09-19-gilded_rose.html</link>
        <guid isPermaLink="true">https://zverok.space/blog/2024-09-19-gilded_rose.html</guid>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>BuyMeACoffee silently dropped support for many countries, and nobody cares</title>
        <description>&lt;p&gt;&lt;strong&gt;Silent changes in payment methods on big creator funding platforms raise some unpleasant questions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPD Aug 13, 2024:&lt;/strong&gt; The kind-of-official reply from BuyMeACoffee, and &lt;a href=&quot;#upd-aug-13-2024&quot;&gt;my response to it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPD Aug 14, 2024:&lt;/strong&gt; A support email to one of the users gives BuyMeACoffee’s reasons, and also they &lt;a href=&quot;#upd-aug-14-2024&quot;&gt;blocked me on X (Twitter)&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-happened&quot;&gt;What happened&lt;/h2&gt;

&lt;p&gt;Recently, many Ukrainian creators have reported problems with payouts from &lt;a href=&quot;https://buymeacoffee.com/&quot;&gt;BuyMeACoffee&lt;/a&gt;, a creator funding/crowdfunding platform.&lt;/p&gt;

&lt;p&gt;At first, the reported support answers were typical corporative “we are sorry that we don’t care,” citing “compliance” and “policy updates.”&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot;&gt;&lt;p lang=&quot;uk&quot; dir=&quot;ltr&quot;&gt;В оригіналі, щоб вестерни читали які там є нікчеми &lt;a href=&quot;https://t.co/JxoGgamYLq&quot;&gt;pic.twitter.com/JxoGgamYLq&lt;/a&gt;&lt;/p&gt;&amp;mdash; Karå ꑭ🇺🇦 (@BzickOff) &lt;a href=&quot;https://twitter.com/BzickOff/status/1819341225024983310?ref_src=twsrc%5Etfw&quot;&gt;August 2, 2024&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Those reports were widely shared, and our predominantly feeling was “shocked but not surprised”: it is not the first time when a big platform has decided that they are too busy to try to distinguish non-occupied parts of a large country with a 30+m population from occupied parts, and decided they don’t care. Just recently, for example, the Mercury payment system &lt;strong&gt;&lt;a href=&quot;https://x.com/United24media/status/1815707715307479244&quot;&gt;just blacklisted the entirety of Ukraine&lt;/a&gt;&lt;/strong&gt; alongside Iran and North Korea.&lt;/p&gt;

&lt;p&gt;But in a few days, it turned out (again, from support messages shared on Twitter) that BuyMeACoffee &lt;strong&gt;just dropped support for Payoneer&lt;/strong&gt; (which works in Ukraine), leaving Stripe (which doesn’t) as the &lt;strong&gt;only payout method&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot;&gt;&lt;p lang=&quot;uk&quot; dir=&quot;ltr&quot;&gt;4. Бо бай мі кохве мала в гузно своїх споживачів та закрила можливість виводити кошти напряму на карту через Wise, а також через Payoneer. Єдино можливий метод виводу стає сервіс Stripe який не доступний в Україні та до 14 серпня всі автори зможуть ввостаннє вивести свої кошти. &lt;a href=&quot;https://t.co/XIQdNHVllu&quot;&gt;pic.twitter.com/XIQdNHVllu&lt;/a&gt;&lt;/p&gt;&amp;mdash; AdrianZP (@AdrianZPcity) &lt;a href=&quot;https://twitter.com/AdrianZPcity/status/1821252119875436595?ref_src=twsrc%5Etfw&quot;&gt;August 7, 2024&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;did-they-though&quot;&gt;Did they, though?&lt;/h2&gt;

&lt;p&gt;Currently BuyMeACoffee’s &lt;a href=&quot;https://help.buymeacoffee.com/en/articles/6258038-supported-countries-for-payouts-on-buy-me-a-coffee&quot;&gt;support page&lt;/a&gt; simply states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Buy Me a Coffee supports payouts to creators in several countries, facilitated through our payment provider, Stripe.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to the Internet Archive, in &lt;a href=&quot;https://web.archive.org/web/20240229183241/https://help.buymeacoffee.com/en/collections/1907909-payments&quot;&gt;February&lt;/a&gt;, there was another link to a &lt;a href=&quot;https://web.archive.org/web/20231028113814/https://help.buymeacoffee.com/en/articles/6258038-payment-supported-countries&quot;&gt;page&lt;/a&gt; that listed Stripe and Payoneer, while &lt;a href=&quot;https://web.archive.org/web/20240521195730/https://help.buymeacoffee.com/en/collections/1907909-payments&quot;&gt;May’s snapshot&lt;/a&gt; already has only Stripe-related links.&lt;/p&gt;

&lt;p&gt;So, the change &lt;em&gt;in the documentation&lt;/em&gt; happened somewhere between February (that’s when I personally used it for the last time) and May: Internet Archive doesn’t provide other snapshots between those two dates.&lt;/p&gt;

&lt;p&gt;So, at least the support’s private answers were aligned with the documentation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At the same time, there are a couple of funny facts about this deprecation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First,&lt;/strong&gt;  I know for a fact that some Ukrainian creators were receiving payouts via Payoneer somewhere around ~1 month ago; I even saw a credible claim about last week! (I just sent mine, which trickled from a moderately popular blog, will see whether it will come through; it is funny if it will. At least my configured Payoneer payout method is currently active in the BMaC dashboard.)&lt;/p&gt;

&lt;p&gt;But more importantly, &lt;strong&gt;there was NO communication about the change&lt;/strong&gt;. You wouldn’t find anything on &lt;a href=&quot;https://x.com/buymeacoffee&quot;&gt;their Twitter&lt;/a&gt; or in the &lt;a href=&quot;https://building.buymeacoffee.com/changelog/&quot;&gt;public changelog&lt;/a&gt; (screenshotted at 2024-08-08 11:05:30 GMT+0300—just in case something will magically appear there retroactively):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2024-08-08-bmac/image00.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/img/2024-08-08-bmac/image01.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/img/2024-08-08-bmac/image02.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/img/2024-08-08-bmac/image03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, &lt;strong&gt;there is nothing about payout updates&lt;/strong&gt; after the &lt;a href=&quot;https://building.buymeacoffee.com/changelog/improved-payout-experience&quot;&gt;Nov’23 post&lt;/a&gt;, which mentioned Payoneer and Wise as available options alongside Stripe.&lt;/p&gt;

&lt;p&gt;I assure you that &lt;strong&gt;there was no email communication to the creators either&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-bad-is-this&quot;&gt;How bad is this?&lt;/h2&gt;

&lt;p&gt;The difference is public lists of supported countries between &lt;a href=&quot;https://www.payoneer.com/resources/global-payment-capabilities/&quot;&gt;Payoneer&lt;/a&gt; and &lt;a href=&quot;https://help.buymeacoffee.com/en/articles/6258038-supported-countries-for-payouts-on-buy-me-a-coffee&quot;&gt;Stripe&lt;/a&gt; are &lt;strong&gt;95 (ninety-five)&lt;/strong&gt; countries and territories. I am not sure that all 95 of those don’t have working Stripe (say, maybe the Faroe Islands just listed on Payoneer separately while being actually served by Stripe via Danish banks?), but it seems to be &lt;em&gt;a lot&lt;/em&gt; anyway.&lt;/p&gt;

&lt;p&gt;I’d like to know what the experience of BMaC users from those countries is like. But what I know for sure is that in Ukraine, a lot of people use the platform as a source of income (sometimes even a primary one). My subscriptions, for example, include but are not limited to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A singer-songwriter turned paramedic who uses BMaC donations to record her songs on short vacations between duties;&lt;/li&gt;
  &lt;li&gt;A writer and culturology scholar turned soldier who funds his studies about Ukrainian culture and history;&lt;/li&gt;
  &lt;li&gt;A girl whose two brothers have fallen on the frontlines, and she funds her absolutely unique book club to connect to people and share reading experience with them;&lt;/li&gt;
  &lt;li&gt;A small business owner from Kharkiv who uses a “build in public” approach for a small coffee shop (and recently got mobilized into Armed Forces);&lt;/li&gt;
  &lt;li&gt;…and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;None of them have BMaC as their primary income, and still, it is a sign of support from their peers and the possibility to continue doing what’s important to them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There is no way for any of us to receive the money accumulated on BMaC&lt;/strong&gt; anymore. What looks like “technical” change for some American is realistically &lt;strong&gt;prohibitive&lt;/strong&gt; for those not privileged enough to live in Stripe-supported countries. The money is still “there”, so probably no lawyer can say BMaC has “stolen them”—you just can’t neither receive “your” money nor, at least, give them back to those who sent them.&lt;/p&gt;

&lt;p&gt;Note that some BMaC accounts have a lot of supporters, and many of those use “yearly” payments as a sign of their support—and all of it is currently in some technological limbo.&lt;/p&gt;

&lt;p&gt;Now, I am just a mere developer, and I don’t know much about payout regulations and legal facts. I &lt;em&gt;might&lt;/em&gt; charitably assume there was a good reason for dropping Payoneer support (maybe a business one, or maybe it is actually related to some government regulations). The fact itself is extremely distressing for many, but hey, that’s their business, what do we know.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But the way this policy was implemented—no prior notice, no choice, no explicit communication of the reasons and possibilities—is absolutely fascinating, to say the least.&lt;/strong&gt; And, honestly, support’s evasive behavior (and inconsistent reports about “some Payoneer payouts might still work”) just adds insult to injury.&lt;/p&gt;

&lt;p&gt;I am not sure that any service that handles people’s money as their &lt;em&gt;primary&lt;/em&gt; activity, and that does it this way, can be ever trusted. Just sayin’.&lt;/p&gt;

&lt;p&gt;Have a good day, and have a screenshot of the latest message from BuyMeACoffee’s ever-positive Twitter!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2024-08-08-bmac/image04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Such a nice vibe! &lt;em&gt;(Neither their primary account nor &lt;a href=&quot;https://x.com/jijosunny&quot;&gt;the founder’s personal one&lt;/a&gt;, which both have a history of replying to all relevant tweets, are currently giving any signs they are aware of the situation.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;PS: As a side note, &lt;a href=&quot;https://en.ain.ua/2023/04/10/what-is-wrong-with-patreon-and-why-ukrainians-urge-canceling-it/&quot;&gt;here is a story&lt;/a&gt; about why Patreon is not an option for Ukrainians. And &lt;a href=&quot;https://www.patreon.com/wargonzoo&quot;&gt;here&lt;/a&gt; is russian war correspondent’s Patreon account, mentioned in the story, still proudly present on the platform (though seemingly dormant).&lt;/p&gt;

&lt;h2 id=&quot;upd-aug-13-2024&quot;&gt;UPD: Aug 13, 2024&lt;/h2&gt;

&lt;p&gt;So, folks! After a week of poking, we have a kind-of-official answer from &lt;a href=&quot;https://x.com/buymeacoffee&quot;&gt;@buymeacoffee&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Let’s unpack it!&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;This is simply not true. Let us clarify:&lt;br /&gt;&lt;br /&gt;1. We never hold funds. If for some reason we cannot payout (potential fraud, bank account issues), the amount is refunded.&lt;br /&gt;&lt;br /&gt;2. Not one Ukrainian creator&amp;#39;s payout is held. We paid out to thousands of Ukrainian creators this week. Please…&lt;/p&gt;&amp;mdash; Buy Me a Coffee (@buymeacoffee) &lt;a href=&quot;https://twitter.com/buymeacoffee/status/1823085434605605055?ref_src=twsrc%5Etfw&quot;&gt;August 12, 2024&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;0.&lt;/strong&gt; For some reason, this answer is a reply to one of those repeatedly asked them. Not even a standalone X post, nor a blog/changelog entry, nor a newsletter to creators.&lt;/p&gt;

&lt;p&gt;So, if you aren’t a creator who constantly buggers them on X-formerly-Twitter (or follows all the discussions), you might still be unaware of the policy change or the existence of some answers.&lt;/p&gt;

&lt;p&gt;The official feeds are still clear of the topic.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;We never hold funds. If […] we cannot payout […] the amount is refunded.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;I believe this &lt;strong&gt;intention&lt;/strong&gt; (well, anything less would be a legal suicide), but I would still like to hear:
a. How the “cannot payout” decided and whether “the creator doesn’t have payout method we like, they should try another one” qualifies
b. A success story of real refunding (say, $5 to thousands of people) and whether it really works or just a claim.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Not one Ukrainian creator’s payout is held. […] Please reply with the creator @ if you know of any.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;I &lt;strong&gt;want to believe&lt;/strong&gt; that. In my original thread, and many other threads and discussions, I saw a LOT of people with negative experience of interaction with support.&lt;/p&gt;

&lt;p&gt;Hopefully, &lt;strong&gt;ALL&lt;/strong&gt; of Ukrainian creators who reported payout problems and unhelpful support responses are paid now? (And &lt;strong&gt;hopefully&lt;/strong&gt;, it is not by means of “just find an EU friend who will agree to receive a payment for you”?.. Because I saw stories like that).&lt;/p&gt;

&lt;p&gt;Also, dear BuyMeACoffee, “please @-us if you know a creator who has problems” would be &lt;strong&gt;a lot more persuasive&lt;/strong&gt; if it wasn’t in the effing &lt;em&gt;replies under just one tweet&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Just sayin’&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Almost all of our creators use our standard payout method powered by Stripe.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah, the so-called “First World”. But I get it. I do.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We’ve decided to focus on this for […] reasons which are important for the sustainability of the business.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s your business, and that’s your right to do so. As inconvenient as it might be for us, we have no say here. But the way it was communicated…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;we’re planning to continue offering an alternative payout method […] for countries that are not supported. As we figure this out, we can confirm that it is business as usual for creators from Ukraine&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It would be such a nice message if communicated clearly &amp;amp; timely 🙏&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We’d appreciate it if you stop spamming our socials, spreading misinformation about us such as “we blocked withdrawals to Ukraine”. We’ll have no option but to block you and move on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You know what?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’d appreciate&lt;/strong&gt; if you would be clear, honest, and public about the changes you make.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’d appreciate&lt;/strong&gt; your support not changing the story from the initial “it’s compliance standards”, to further “your payout method is not supported, it is your problem” to final (after the public outrage) “oh of course we would help everyone 🙏”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’d appreciate&lt;/strong&gt; the public communication of the situation (and no, the reply in one thread in X that ends with passive aggression is not it, thank you very much!)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’d appreciate&lt;/strong&gt; having this convo, like, a couple of weeks ago.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In conclusion&lt;/strong&gt;, I don’t believe BMaC being malicious or scammy in this situation (and I &lt;em&gt;do want&lt;/em&gt; to believe they are looking for a solution that will work for us, too). But the amount of neglect and disregard that was displayed in the way the change was implemented and communicated, and in the interactions with support, makes it almost a textbook case of &lt;strong&gt;bad communication&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;upd-aug-14-2024&quot;&gt;UPD: Aug 14, 2024&lt;/h2&gt;

&lt;p&gt;One of the Ukrainian creators received an unusually honest explanation of the reasons behind dropping support for Payoneer and Wise: “Incompatible with our upcoming features.” So, like, a bit more convenience for the First World users, at a price of excluding those not that privileged. (Note also that in this communication there is no sign of that promise of that “planning to continue offering an alternative payout method […] for countries that are not supported” which was sweetening their &lt;strong&gt;public&lt;/strong&gt; communication.)&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I am disabling &lt;a href=&quot;https://twitter.com/buymeacoffee?ref_src=twsrc%5Etfw&quot;&gt;@buymeacoffee&lt;/a&gt; account tomorrow.&lt;br /&gt;&lt;br /&gt;The company is irresponsibly punches its Ukrainian clients in the guts by disabling Wise and making payouts impossible.&lt;br /&gt;&lt;br /&gt;This isn’t just about switching platforms; each Ukrainian creator will lose their entire subscriber base. This… &lt;a href=&quot;https://t.co/BPnuAgcutk&quot;&gt;pic.twitter.com/BPnuAgcutk&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kate from Kharkiv (@BohuslavskaKate) &lt;a href=&quot;https://twitter.com/BohuslavskaKate/status/1823303795322822679?ref_src=twsrc%5Etfw&quot;&gt;August 13, 2024&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;And another update:&lt;/strong&gt; After several days of persistent, yet polite, poking their public X account, asking for public statement (more public than a reply in a thread), BuyMeACoffee &lt;a href=&quot;https://x.com/zverok/status/1823757570240340466&quot;&gt;just blocked me&lt;/a&gt;, reportedly “for spreading misinformation”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2024-08-08-bmac/image05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note there is new, previously never stated, pieces of information: about Payoneer working till Nov.1—not “do your last payout in August,” as it was previously; and about Wise which they will “continue to offer” (currently, to the best of my understanding, they aren’t).&lt;/p&gt;

</description>
        <pubDate>Thu, 08 Aug 2024 00:00:00 +0000</pubDate>
        <link>https://zverok.space/blog/2024-08-08-bmac-snafu.html</link>
        <guid isPermaLink="true">https://zverok.space/blog/2024-08-08-bmac-snafu.html</guid>
        
        
        <category>war</category>
        
        <category>rant</category>
        
      </item>
    
      <item>
        <title>How it became like this? Ruby Range class</title>
        <description>&lt;p&gt;&lt;strong&gt;Understanding the core class design and usage via its evolution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Years ago, my studies into the &lt;a href=&quot;https://rubyreferences.github.io/rubychanges/&quot;&gt;Ruby Evolution&lt;/a&gt; started with the persuasion that mastering the programming language to express one’s intentions clearly and efficiently may grow significantly by understanding how it evolved and what intentions were put behind its various elements.&lt;/p&gt;

&lt;p&gt;Moving back through the history of a change of some element of the language exposes a thinking and consensus process that led to API design. It allows one to internalize its functioning, as opposed to just memorizing the cheatsheets.&lt;/p&gt;

&lt;p&gt;To illustrate that, let’s look into one of Ruby’s core classes: &lt;a href=&quot;https://docs.ruby-lang.org/en/master/Range.html&quot;&gt;Range&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;whats-a-range&quot;&gt;What’s a Range?&lt;/h2&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cover?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Prints 1, 2, 3, 4, 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Range is a type/data structure that is defined by two range boundaries (&lt;strong&gt;beginning&lt;/strong&gt; and &lt;strong&gt;end&lt;/strong&gt;) and designates the space of values before them.&lt;/p&gt;

&lt;p&gt;It is somewhat less ubiquitous in programming languages than array/list or dictionary/map, but still pretty widespread. Two main meanings of the range are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a &lt;em&gt;discrete sequence&lt;/em&gt; of values between its boundaries and&lt;/li&gt;
  &lt;li&gt;a &lt;em&gt;continuous space&lt;/em&gt; of values between its boundaries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main usages are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iteration (kinds of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; loops over the specified sequence);&lt;/li&gt;
  &lt;li&gt;testing values for being inside some interval;&lt;/li&gt;
  &lt;li&gt;collections slicing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not all programming languages that have ranges and range-like objects provide both kinds (discrete and continuous); not all of them use ranges for all three cases listed above.&lt;/p&gt;

&lt;p&gt;For example, in Python, there is a &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#range&quot;&gt;range&lt;/a&gt; type for iteration and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;obj in range&lt;/code&gt; testing, and a separate &lt;a href=&quot;https://docs.python.org/3/library/functions.html#slice&quot;&gt;slice&lt;/a&gt; type for collection slicing (that doesn’t have any further semantics other than knowing its start, stop, and step), while in C#, the class called &lt;a href=&quot;https://learn.microsoft.com/ru-ru/dotnet/api/system.range?view=net-8.0&quot;&gt;Range&lt;/a&gt; has &lt;em&gt;only&lt;/em&gt; this functionality (slicing collections). At the same time, Rust, Kotlin, and Scala use their ranges for all listed cases, and Zig, as far as I can understand, has a range-like syntax for &lt;a href=&quot;https://ziglang.org/documentation/master/#Slices&quot;&gt;slicing&lt;/a&gt;, &lt;a href=&quot;https://ziglang.org/documentation/master/#for&quot;&gt;iteration&lt;/a&gt;, and &lt;a href=&quot;https://ziglang.org/documentation/master/#switch&quot;&gt;matching&lt;/a&gt;, but this syntax doesn’t produce a value and can’t be used outside of those constructs.&lt;/p&gt;

&lt;p&gt;So…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What has been happening with Range through Ruby’s history? And, indirectly, another question: is there a big design/change space there? Turns out there is some!&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some milestones in Ruby’s history, to put it in perspective:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Ruby 3.0 (2020) is the current major version, with each 3.x released once a year being significantly advanced over the previous one, the current one is 3.3 (with 3.4 coming December’24);&lt;/li&gt;
    &lt;li&gt;Ruby 2.0 was released in 2013, and it introduced that “new release every year”, and lived through it till 2.7;&lt;/li&gt;
    &lt;li&gt;Ruby 1.9 (since 2007) was a big preparatory branch before 2.0, with each of 1.9.1, 1.9.2, and 1.9.3 introducing many changes;&lt;/li&gt;
    &lt;li&gt;Ruby 1.8 (since 2003), again, introduced many changes in each “patch” release (the last notable one was 1.8.7); it is probably the version that was first to gain a lot of notoriety due to Rails (first version released in 2004) and widely popular “Pickaxe” (Programming Ruby from Pragmatic Programmers, 2nd edition) book;&lt;/li&gt;
    &lt;li&gt;Ruby 1.6 (since 2000) was probably the first version known to English-language programmers, the first edition of Pickaxe was dedicated to it and eventually was donated to Ruby community as an &lt;a href=&quot;https://ruby-doc.com/docs/ProgrammingRuby/&quot;&gt;online reference&lt;/a&gt; to the language;&lt;/li&gt;
    &lt;li&gt;I can’t say much about versions before that, but Ruby went from v. 1.0 in 1996 (the first public release) to 1.4 in 1999, through very active development.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;But let’s get back to our questions.&lt;/p&gt;

&lt;h2 id=&quot;is-this-value-in-a-range-and-what-does-it-mean&quot;&gt;Is this value in a range? And what does it mean?&lt;/h2&gt;

&lt;p&gt;Given a range from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; (beginning) to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt; (end), and value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt; of the compatible type, how to check that value “belongs” to the range, and what’s the semantics of this “belonging”?&lt;/p&gt;

&lt;p&gt;In Ruby, Range has two methods to answer the question:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Range.html#method-i-include-3F&quot;&gt;#include?&lt;/a&gt; (also aliased as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#member?&lt;/code&gt;) to check if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt; is a part of the sequence from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt;, and&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Range.html#method-i-cover-3F&quot;&gt;#cover?&lt;/a&gt; to check if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt; is in the continuous value space between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To demonstrate the difference on strings:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;e&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true, it is a part of sequence&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;e&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cover?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true too&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;e&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;bat&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; false, sequence from &apos;a&apos; to &apos;e&apos; doesn&apos;t include value &apos;bat&apos;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;e&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cover?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;bat&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is a third method, &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Range.html#method-i-3D-3D-3D&quot;&gt;#===&lt;/a&gt; (three equal signs), which is rarely used explicitly, but implicitly invoked in pattern-like matching contexts&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2005&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# implicitly calls (2000..2005) === year&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# implicitly calls `0..18 === item` for each item of the collection,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# returns those matched; there is also grep_v&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;grep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# implicitly calls `0.8..1.0 === item` for each item of the collection,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# returns if any of them returned true; there are also all? and none?&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;any?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;strong&gt;Ruby 2.6&lt;/strong&gt;, I &lt;a href=&quot;https://bugs.ruby-lang.org/issues/14575&quot;&gt;persuaded&lt;/a&gt; the core team to change the implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#===&lt;/code&gt; for &lt;em&gt;generic ranges&lt;/em&gt; to always use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#cover?&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include?&lt;/code&gt;, so, for example, this code started to work:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;date&apos;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2004&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;still summer!&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The range of dates obviously &lt;em&gt;covers&lt;/em&gt; the time between them but doesn’t &lt;em&gt;include&lt;/em&gt; it in the sequence from the beginning to the end. My winning argument in making this change was that it &lt;strong&gt;always worked this way for numbers&lt;/strong&gt;, creating a surprising inconsistency:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.3&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;1.8&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;1.9&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;1.8.7&apos;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; false, even though comparison-wise it is in between&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This inconsistency was probably rarely noticed before: the most widespread ranges are still numeric ones (many other languages have them as the &lt;em&gt;only&lt;/em&gt; kind of ranges), and if somebody has tried it with other values and received a “somewhat weird” result, they probably just decided “that’s how it is.”&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Though, before that, people have noticed that using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt; statements might be convenient, and it just didn’t work (as time is not a discrete type, there is no “sequence” between two time points, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#===&lt;/code&gt; was trying to invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include?&lt;/code&gt;, which tried to produce a sequence and raised an error).&lt;/p&gt;

&lt;p&gt;So, in &lt;strong&gt;Ruby 2.3&lt;/strong&gt;, it was solved by introducing the (internal, not exposed to the user code) concept of “linear” objects. It was &lt;a href=&quot;https://github.com/ruby/ruby/blob/v2_3_0/range.c#L323-L335&quot;&gt;hardcoded&lt;/a&gt;&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; to be real numbers and core class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time&lt;/code&gt; (but not standard library’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime&lt;/code&gt;). For such “linear” objects, the behavior of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include?&lt;/code&gt; was made like that of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#cover?&lt;/code&gt; (comparison with range ends).&lt;/p&gt;

&lt;p&gt;But this discrepancy does not always exist in the language!&lt;/p&gt;

&lt;p&gt;Long before that, when &lt;strong&gt;Ruby 1.9.1&lt;/strong&gt; introduced the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#cover?&lt;/code&gt; method, its intention was probably to have a name clearly representing the concept of the element being between the boundaries of the range. That version also changed the implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include?&lt;/code&gt; (to mean “sequence inclusion” for everything other than numbers), but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#===&lt;/code&gt; stayed to be implemented via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include?&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Because before that, when &lt;strong&gt;Ruby 1.8&lt;/strong&gt; introduced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include?&lt;/code&gt;, there were two methods: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#member?&lt;/code&gt; to check for sequence inclusion and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include?&lt;/code&gt; itself, to check whether some value is between the range’s boundaries (and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#===&lt;/code&gt; worked through it).&lt;/p&gt;

&lt;p&gt;Interestingly, the git history of Ruby also can show us the doubts around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#member?&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include?&lt;/code&gt; behavior:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In Ruby 1.8.0, when the pair was introduced, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#member?&lt;/code&gt; was consistently checking sequence inclusion &lt;em&gt;even for numbers&lt;/em&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include?&lt;/code&gt; checked covering;&lt;/li&gt;
  &lt;li&gt;Very soon, in 1.8.2, they were changed to have the same implementation (only covering);&lt;/li&gt;
  &lt;li&gt;And then in 1.9.1, the method—now having both names &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#member?&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include?&lt;/code&gt;—was sophisticated to check covering for numbers and ASCII-only strings and delegate to generic collection &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include?&lt;/code&gt; otherwise (back to checking sequence);&lt;/li&gt;
  &lt;li&gt;…which slowly migrated to the situation we had by 2.6.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But, getting back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#===&lt;/code&gt; and covering problem, before Ruby 1.9.1 and after Ruby 2.6/2.7, there was the same behavior:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;1.8.7&apos;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;1.6.1&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;1.8.1&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;1.8.7&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;1.9.1&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;grep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [&apos;1.8.1&apos;, &apos;1.8.7&apos;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…while the versions between them had this weird(ish) discrepancy! Also, only in the short span of Ruby 1.8.0-1.8.2, and never since, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#member?&lt;/code&gt; worked as “checking it is in a sequence” for numbers:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;member?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;member?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; false on Ruby 1.8.0-2, true ever since!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;…but probably the case for checking “this number is a part of the specified sequence of integer numbers” is too esoteric to be requested to have a method that supports it.&lt;/p&gt;

&lt;p&gt;Finally, &lt;strong&gt;before Ruby 1.8&lt;/strong&gt; (and since the very early versions of Ruby), there was only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Range#===&lt;/code&gt; (to use both implicitly in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt;-like situations, and explicitly, when checking values), and its only behavior was like modern &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#cover?&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;How others do it:&lt;/strong&gt; In Rust and Kotlin, there is only one contains method (&lt;a href=&quot;https://doc.rust-lang.org/std/ops/struct.Range.html#method.contains&quot;&gt;Rust&lt;/a&gt;, &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/-closed-range/contains.html&quot;&gt;Kotlin&lt;/a&gt;), which behaves like Ruby’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cover?&lt;/code&gt;; in Python and Scala, only integer ranges are allowed, and, consequently, only integer values are included in ranges. Rust, Kotlin, and Zig (with its range-like, but not value-producing syntax) allow ranges in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt;-like constructs, while Python and Scala do not.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;So, that’s it about the Range inclusion turbulent story. But there are other stories!&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;one-ukrainian-thing&quot;&gt;
  &lt;h3&gt;A postcard from 🇺🇦&lt;/h3&gt;

  &lt;p&gt;&lt;em&gt;&lt;strong&gt;Please stop here for a moment.&lt;/strong&gt; This is your regular mid-text reminder that I am a living person from Ukraine, with the Russian invasion still ongoing. Please read it.&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One news item.&lt;/strong&gt; On July 24, Russian ballistic missiles &lt;a href=&quot;https://x.com/NatalieZubar/status/1815988487780208791&quot;&gt;hit my home city, Kharkiv&lt;/a&gt;, destroying the office and cars of a humanitarian demining fund. (Russians immediately claimed it was a “lair of foreign mercenaries.”)&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One piece of context.&lt;/strong&gt; &lt;a href=&quot;https://x.com/GicAriana/status/1809064164377117146&quot;&gt;97% of Russian missiles, drones, bombs hit civilian infrastructure, destroying “private &amp;amp; commercial buildings, hotels, schools, churches, hospitals, &amp;amp; numerous infrastructure facilities” in Ukraine. Only 3% strike military targets.&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One fundraiser.&lt;/strong&gt; &lt;a href=&quot;https://x.com/sternenko/status/1816403956299428172&quot;&gt;The PayPal fundraiser&lt;/a&gt; from prominent and competent Ukrainian volunteer for drone-fighting drones. Russian (and Russian-Iranian) drones are a huge threat to our cities and to our frontlines, and there is a new perspective development in the industry that might change that.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;what-values-can-be-range-boundaries&quot;&gt;What values can be range boundaries?&lt;/h2&gt;

&lt;p&gt;…And, by extension, what values and types ranges can support, in general?&lt;/p&gt;

&lt;p&gt;In Ruby, the Range can be made of boundaries of any type if they are &lt;em&gt;comparable&lt;/em&gt;: namely, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;begin &amp;lt;=&amp;gt; end&lt;/code&gt; returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Valid ranges&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;13:30&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;14:30&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Invalid ranges&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;3&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# bad value for range (ArgumentError)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# bad value for range (ArgumentError) -- complex numbers aren&apos;t linear&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Order of boundaries is not enforced, though: range like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(0..-5)&lt;/code&gt; is valid. One of the reasons is probably using it for array slicing:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 5 -- &quot;the last item&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [3, 4, 5] -- from third to the last one&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;strong&gt;Ruby 2.6&lt;/strong&gt;, the “endless” ranges were introduced:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# from 1 to infinity&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; nil&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Explicit nil works too:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Initially, they were meant just as a small syntax sugar for array slicing “till the last item”—as writing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ary[2..]&lt;/code&gt; seemed nicer than mathematically awkward &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ary[2..-1]&lt;/code&gt;  or too wordy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ary[2...ary.length]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At that point, “it is mostly for array slicing” was a counter-argument against symmetrical ranges without beginning. But at &lt;strong&gt;Ruby 2.7&lt;/strong&gt;, I &lt;a href=&quot;https://bugs.ruby-lang.org/issues/14799&quot;&gt;managed to find&lt;/a&gt; persuasive enough arguments for them to be introduced, emphasizing usage as a pattern and as a constant in DSL:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;release_date&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ancient&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;months&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;old&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;months&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;today&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;recent&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;upcoming&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Celsius degrees&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;WORK_RANGES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;..-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:energy_saving&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cooling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:off&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;…enforced by &lt;a href=&quot;https://bugs.ruby-lang.org/issues/14784&quot;&gt;proposing&lt;/a&gt; the usage of ranges in the &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Comparable.html#method-i-clamp&quot;&gt;Comparable#clamp&lt;/a&gt; method (limit the value)&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# #clamp before Ruby 2.7: two separate values for boundaries:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 20&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 100&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# #clamp since Ruby 2.7: can use range&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...which allows to use one-sided ranges when necessary:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The existence of endless and beginless ranges raised a question of the possibility of a range without either boundary. It is made possible, though there is no specialized literal for it:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# or&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# or&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;…but just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(..)&lt;/code&gt;, while theoretically nice, is too rarely necessary to complicate the parser.&lt;/p&gt;

&lt;p&gt;The “infinite range” might seem just a curiosity, but it might be useful for consistency when produced dynamically (when some code conditionally decides whether some value should be limited from the top and from the bottom) or as a “catch-all” default pattern in some DSLs.&lt;/p&gt;

&lt;p&gt;The existence of those new kinds of ranges, again, raises a question of covering/inclusion. The answers are mostly coming naturally, though there were a few edge cases to fix.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# natural behavior:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cover?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true -- it is more than the beginning&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Using the “linear object” behavior described above, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include?&lt;/code&gt; works like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#cover?&lt;/code&gt; with real numbers (and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But only in &lt;strong&gt;Ruby 3.2&lt;/strong&gt; trying to check &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include?&lt;/code&gt; on the endless range for objects other than linear was fixed to raise an error immediately:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;bat&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# cannot determine inclusion in beginless/endless ranges (TypeError)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before that, it just hung indefinitely (trying to iterate the “entire” sequence and never stopping if the element is not in it).&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;Ruby 3.3&lt;/strong&gt;, one more clarification was made: fully infinite range started to return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; for linear objects:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 3.3: =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 3.2: cannot determine inclusion in beginless/endless ranges (TypeError)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So it was deducing the range’s type by its begin/end and switching to a default behavior of “trying to iterate” as it wasn’t number/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time&lt;/code&gt;. Now it is considered that if the only “defined” value in this statement is number, then we are in a numbers (linear) space, where both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt;s are representing infinities in this space.&lt;/p&gt;

&lt;p&gt;By the way, before the introduction of beginless/endless ranges literals, it was common to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Float::INFINITY&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Float::INFINITY&lt;/code&gt; to designate a semi-endless range, but this, of course, worked only for numbers (and, accidentally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt;, because it is &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Date.html#method-i-3C-3D-3E&quot;&gt;historically comparable&lt;/a&gt; with numbers, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time&lt;/code&gt; is not)&lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That’s where the &lt;em&gt;modern&lt;/em&gt; history of range’s ends ends.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But long before that, even before Rails 1.0 and the first edition of “Programming Ruby”, &lt;strong&gt;Ruby 1.4&lt;/strong&gt; introduced ranges with &lt;em&gt;exclusive ends&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cover?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true -- the range includes its end&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cover?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; false -- the range excludes its end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Only the first kind existed initially, unlike many other languages which have an exclusive-end range as their older and more basic form.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curiously, I can’t remember the idea of ranges that exclude their beginning to be proposed—maybe I am missing something, or maybe nobody was able to come up with good syntax or compelling use cases. And neither of other mainstream languages seem to have them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That &lt;strong&gt;1.4&lt;/strong&gt; release also introduced names/aliases &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;begin&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end&lt;/code&gt; for its boundaries. This change could be considered “prehistoric”, but still interesting how the thought flew! The initial names of the boundaries were &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;last&lt;/code&gt;, and they preserve this meaning as synonyms for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;begin&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end&lt;/code&gt;, sometimes confusingly:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 5, it would not be the last element of range as a sequence!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...and also inconsistent with &quot;several last elements&quot; call:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [3, 4]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# an empty range:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; []&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# still has &quot;first&quot; and &quot;last&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There was &lt;a href=&quot;https://bugs.ruby-lang.org/issues/8739&quot;&gt;once an attempt&lt;/a&gt; to fix the inconsistency, at least for the first described case (exclusive range with integer bounds), but it exposed too much broken code/incompatibility, so it stayed that way.&lt;/p&gt;

&lt;p&gt;To increase (or decrease!) confusion, the synonyms behavior isn’t maintained for beginless/endless ranges:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# cannot get the last element of endless range (RangeError)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;How others do it:&lt;/strong&gt; Rust has all the &lt;em&gt;range&lt;/em&gt; of ranges that Ruby does: with only one boundary, inclusive and exclusive ends: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1..3&lt;/code&gt; (exclusive), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1..=3&lt;/code&gt; (inclusive), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1..&lt;/code&gt;, and even &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..&lt;/code&gt;; Kotlin and Scala have inclusive/exclusive pairs (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1..3&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1..&amp;lt;3&lt;/code&gt; in Kotlin, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 to 3&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 until 3&lt;/code&gt; in Scala), but no syntax/notion of ranges without a boundary. Python’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;range(1, 3)&lt;/code&gt; is always exclusive, and no boundary can be omitted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;And that’s what can be said about range ends! But… Not the end of the design space travel!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;range-and-iterations-through-the-sequence&quot;&gt;Range and iterations through the sequence&lt;/h2&gt;

&lt;p&gt;Usage of range for iteration is one of the most common (even Go, typically reluctant for this kind of abstraction, &lt;a href=&quot;https://tip.golang.org/doc/go1.22&quot;&gt;has introduced&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;range 10&lt;/code&gt; recently—whilst before this change, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;range&lt;/code&gt; keyword was used to mean “range of keys in this collection”).&lt;/p&gt;

&lt;p&gt;In Ruby, Range implements conventional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#each&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# prints 1, 2, 3, 4, 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Range includes &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Enumerable.html&quot;&gt;Enumerable&lt;/a&gt; module, so all of its idioms are readily available:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [1, 2, 3]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;d&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:upcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:monday?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; #&amp;lt;Date: 2024-07-29&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Actually, even the default implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#include?&lt;/code&gt; (when it is not specialized for “linear” values) is &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Enumerable.html#method-i-include-3F&quot;&gt;provided&lt;/a&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To be iterable, the range’s beginning value should implement only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#succ&lt;/code&gt; method (returning the next successive value); internally, such types are called “discrete”. The type might be linear but not discrete (say, fractional numbers):&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; `each&apos;: can&apos;t iterate from Float (TypeError)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#step&lt;/code&gt; method to explain to Ruby how to iterate:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [1.5, 2.0, 2.5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the upcoming &lt;strong&gt;Ruby 3.4&lt;/strong&gt; (hopefully: the change is &lt;a href=&quot;https://bugs.ruby-lang.org/issues/18368&quot;&gt;approved by Matz but not yet merged&lt;/a&gt;), I am trying to make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#step&lt;/code&gt; more powerful for non-numeric values, so this would be possible:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [2024-07-24 20:22:12, 2024-07-24 21:22:12, 2024-07-24 22:22:12]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…because when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#step&lt;/code&gt; was introduced—much later than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Range&lt;/code&gt;’s infancy, in &lt;strong&gt;Ruby 1.8&lt;/strong&gt;, at the same time when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;member?&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include?&lt;/code&gt; story started—it received two different implementations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;for numbers, it works with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#+&lt;/code&gt; (each next value is produced by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prev_value + step&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;for everything else, it only accepts integers and means “just call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#succ&lt;/code&gt; several times”:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [&quot;a&quot;, &quot;c&quot;, &quot;e&quot;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# can&apos;t iterate from Time (TypeError)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This seems less useful behavior and not consistent with how it is for numbers (which, for me, represents the “default” intuition), so I hope the change will happen!&lt;/p&gt;

&lt;p&gt;This “numbers are special” is a repeated motive, as one could’ve probably noticed! Another example is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#reverse_each&lt;/code&gt;’s specialized behavior, introduced as recently as &lt;strong&gt;3.3&lt;/strong&gt;. The default reverse iteration method is provided by &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Enumerable.html#method-i-reverse_each&quot;&gt;Enumerable&lt;/a&gt;, with the only way it is possible for a generic case: iterating through the entire sequence till the end, memoizing the result, and then iterating it backward. Obviously, for numbers it can be specialized to just use math—and even work with beginless ranges!&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [4, 3, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is not possible for any other type.&lt;/p&gt;

&lt;p&gt;And another “numbers are (were) special” example, a somewhat comical one: the “second kind of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#step&lt;/code&gt;” (that which just repeats &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#succ&lt;/code&gt;) was always raising on an attempt to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; step (which would just repeat the beginning value), while it was allowed for numbers:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;c&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# step can&apos;t be 0 (ArgumentError)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [1, 1, 1]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unlike other cases, when the generic behavior was eventually made closer to the one numbers have, &lt;strong&gt;Ruby 3.0&lt;/strong&gt; decided that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; step isn’t semantically meaningful, and prohibited it from numbers, too:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# step can&apos;t be 0 (ArgumentError)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;…even though there were some doubts about edge cases when the previous semantic might be useful.&lt;/p&gt;

&lt;p&gt;But other than this curiosity, “steps over numbers” (and number ranges in general) remains the most powerful construct. Confirming this, Ruby &lt;strong&gt;2.6&lt;/strong&gt; introduced a new type, &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Enumerator/ArithmeticSequence.html&quot;&gt;Enumerator::ArithmeticSequence&lt;/a&gt;, and an additional operator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt; to produce it:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; (1..10).step(2), an object of class ArithmeticSequence&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# same, maybe more expressive in some contexts:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# say, this:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; each second element in the array&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;z&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; still just Enumerator&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The ArithmeticSequence object can be used for iteration as a regular enumerator (which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt; returned before the change), it just exposes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#step&lt;/code&gt; as an attribute, allowing to pass around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(begin, end, step)&lt;/code&gt; set of values, and use it for, say, custom collection slicing. (The change was requested by the Scientific Ruby community for this purpose; only by Ruby &lt;strong&gt;3.0&lt;/strong&gt; I’ve &lt;a href=&quot;https://bugs.ruby-lang.org/issues/16812&quot;&gt;pushed&lt;/a&gt; for adding this to the &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Array.html#method-i-5B-5D&quot;&gt;standard Array&lt;/a&gt;, too.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;How others do it:&lt;/strong&gt; All of the languages I am listing above that have ranges (Python, Rust, Kotlin, Scala), have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt; in them, too—though always only integer one—even languages that have not only integer ranges (Rust and Kotlin). E.g. in Kotlin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;a&apos;..&apos;z&apos; step 2&lt;/code&gt; is “each second item” in the sequence. Neither language even makes an exception for “float steps between numbers,” so the idea of step being “something else,” a custom iteration through the values space, seems less natural there.&lt;/p&gt;

  &lt;p&gt;In Python, Kotlin, and Scala, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt; is an attribute of Range (so they are more like Ruby’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArithmeticSequence&lt;/code&gt;), while in Rust &lt;a href=&quot;https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.step_by&quot;&gt;Range::step_by&lt;/a&gt; is just a specification of a generic &lt;a href=&quot;https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.step_by&quot;&gt;Iterator::step_by&lt;/a&gt;—and, consequently, can’t be used to slice arrays.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;and-other-usages&quot;&gt;…and other usages?&lt;/h2&gt;

&lt;p&gt;The changes/questions above mostly cover the Range design, though there are two more areas of improvement/usage worth a brief mention for completeness.&lt;/p&gt;

&lt;p&gt;One is math-like operations between ranges: in Ruby &lt;strong&gt;2.6&lt;/strong&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Range#cover?&lt;/code&gt; was changed to also accept another range (and check if the operand is fully inside), and in &lt;strong&gt;3.3&lt;/strong&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#overlap?&lt;/code&gt; method was added. One might imagine a lot of other “interval math” methods to be &lt;em&gt;theoretically useful&lt;/em&gt;, yet as usual, the Ruby core team expects persuasive use cases and clear semantic definitions for those future possible methods (here is one &lt;a href=&quot;https://bugs.ruby-lang.org/issues/16757&quot;&gt;ongoing discussion&lt;/a&gt;, not very active, though).&lt;/p&gt;

&lt;p&gt;Another interesting topic is adopting Range for &lt;em&gt;other&lt;/em&gt; APIs where it is semantically sound. Besides &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Comparable#clamp&lt;/code&gt; already mentioned above, notable examples are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;checks like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numbers.any?(3..5)&lt;/code&gt; since Ruby &lt;strong&gt;2.5&lt;/strong&gt; (not directly range-related, just methods &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Enumerable.html#method-i-any-3F&quot;&gt;Enumerable#any?&lt;/a&gt;, &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Enumerable.html#method-i-all-3F&quot;&gt;#all?&lt;/a&gt;, &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Enumerable.html#method-i-none-3F&quot;&gt;#none?&lt;/a&gt;, &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Enumerable.html#method-i-one-3F&quot;&gt;#one?&lt;/a&gt; started to accept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#===&lt;/code&gt;-matching patterns);&lt;/li&gt;
  &lt;li&gt;introduction in &lt;strong&gt;1.9.3&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rand(begin..end)&lt;/code&gt; API to generate a number in a given range;&lt;/li&gt;
  &lt;li&gt;and representation of the standard library’s IPAddr as a range, which was introduced in &lt;strong&gt;1.8&lt;/strong&gt; (apparently, a Big Version for ranges):
    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;IPAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.0.0/16&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_range&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; #&amp;lt;IPAddr: IPv4:192.168.0.0/255.255.0.0&amp;gt;..#&amp;lt;IPAddr: IPv4:192.168.255.255/255.255.0.0&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;This concludes the story of Range’s evolution.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I hope I was able to share that feeling of a language being a living, breathing being, making its decisions and missteps, clarifying its behaviors, bearing the weight of legacies and habits, and still moving forward.&lt;/p&gt;

&lt;p&gt;There hopefully would be more.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading. Please support Ukraine with your donations and lobbying for military and humanitarian help. &lt;a href=&quot;https://war.ukraine.ua/&quot;&gt;Here&lt;/a&gt;, you’ll find a comprehensive information source and many links to state and private funds accepting donations.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you don’t have time to process it all, donating to &lt;a href=&quot;https://savelife.in.ua/en/&quot;&gt;Come Back Alive&lt;/a&gt; foundation is always a good choice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you’ve found the post (or some of my previous work) useful, I have a &lt;a href=&quot;https://www.buymeacoffee.com/zverok&quot;&gt;Buy Me A Coffee account&lt;/a&gt; now—including subscription options with secret posts! Till the end of the war, 100% of payments to it (if any) would be spent on my or my brothers’ necessary equipment or sent to one of the funds above.&lt;/strong&gt;&lt;/p&gt;

&lt;iframe src=&quot;https://zverok.substack.com/embed&quot; width=&quot;480&quot; height=&quot;320&quot; style=&quot;border:1px solid #EEE; background:white;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Ruby has had structural pattern-matching &lt;a href=&quot;https://rubyreferences.github.io/rubychanges/evolution.html#pattern-matching&quot;&gt;since Ruby 2.7&lt;/a&gt;, but here we are talking about a simpler and more widely used feature, mostly implemented by various objects having redefined &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#===&lt;/code&gt; method. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;At the time of the change, the string behavior was left untouched (so the example above still returned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; in Ruby 2.6), but it was &lt;a href=&quot;https://rubyreferences.github.io/rubychanges/2.7.html#-for-string&quot;&gt;fixed in 2.7&lt;/a&gt;. The reason for caution was breaking the old code; but once &lt;em&gt;other&lt;/em&gt; ranges started to check values continuously, the string’s inconsistency was sticking out like a bug. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Ruby typically uses duck typing (presence of some method) to check whether some object corresponds to some “interface”, but this is impossible for the concept of “linear” objects: their basic definition is “for every two values of the type, the order is defined,” which is represented by method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;=&amp;gt;&lt;/code&gt; returning -1, 0, or 1, but the &lt;em&gt;presence&lt;/em&gt; of this method does not tell anything useful (almost every object has it, it just returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; for not comparable values). &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Object.html#method-i-3C-3D-3E&quot;&gt;Object#&amp;lt;=&amp;gt;&lt;/a&gt; is the main generic comparison method that is used in ranges, sorting, and similar situations; types with a defined order of values redefine it. When the linear order of two values is undefined (string and number or two complex numbers), it just returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt;. &lt;a href=&quot;https://docs.ruby-lang.org/en/3.3/Comparable.html&quot;&gt;Comparable&lt;/a&gt; is a convenient mixin that can be included in class that defines this method and will provide all other comparison methods based on it (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;=&lt;/code&gt;), and they would behave reasonably (say, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt; implemented via Comparable returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; for incomparable objects, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; raise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArgumentError&lt;/code&gt;). &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I wonder how the history might’ve gone if Ruby had some literal or at least a constant name for infinity, which would be more pleasant to type and read than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Float::INFINITY&lt;/code&gt;. I remember one pre-Ruby 2.6 codebase where we just defined our own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INF = Float::INFINITY&lt;/code&gt; because we had a ton of semi-infinite ranges in various patterns. &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://zverok.space/blog/2024-07-26-range-evolution.html</link>
        <guid isPermaLink="true">https://zverok.space/blog/2024-07-26-range-evolution.html</guid>
        
        
        <category>ruby</category>
        
        <category>evolution</category>
        
      </item>
    
      <item>
        <title>Vignettes on language evolution: discovering an old syntax feature history</title>
        <description>&lt;p&gt;&lt;strong&gt;One Ruby thing I never noticed before.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While working on Ruby Evolution-themed &lt;a href=&quot;https://zverok.space/blog/2024-06-14-method-evolution.html&quot;&gt;articles&lt;/a&gt; (and looking for a shape for the future book), I am starting to look deeper and deeper into the history of the language—and into other languages, too, trying to understand when some solutions became common in the industry, or, vice versa, when something has fallen out of fashion.&lt;/p&gt;

&lt;p&gt;With Ruby, I spend a couple of hours now and then looking through the &lt;a href=&quot;https://github.com/ruby/ruby/tree/master/doc/NEWS&quot;&gt;NEWS&lt;/a&gt;/&lt;a href=&quot;https://github.com/ruby/ruby/tree/master/doc/ChangeLog&quot;&gt;Changelog&lt;/a&gt; files, making my own structured lists of when something changed, and frequently making some (mostly minuscule) discoveries. Mostly, those “discoveries” are along the lines of “Ah, that’s when it was introduced” or “Wait, it wasn’t always like this.” The latter is sometimes more exciting because I spent a long time with Ruby—since 2004, versions 1.6/1.8. Suddenly remembering that a syntax that I am now taking for granted and feeling “natural” wasn’t that way sometimes feels like clarifying your childhood memories.&lt;/p&gt;

&lt;p&gt;It is rare that I notice something introduced a long time ago that I was not aware of, even more rare with core syntax features and not some convenient yet rarely needed method.&lt;/p&gt;

&lt;p&gt;But recently, just that happened.&lt;/p&gt;

&lt;h2 id=&quot;the-feature&quot;&gt;The feature&lt;/h2&gt;

&lt;p&gt;In the &lt;a href=&quot;https://github.com/ruby/ruby/blob/master/doc/NEWS/NEWS-1.9.1#language-core-changes-&quot;&gt;NEWS file for Ruby 1.9.1&lt;/a&gt;&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, there is a concise note:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Mandatory arguments after optional arguments allowed&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wait, does it mean what I think it means?&lt;/p&gt;

&lt;p&gt;I don’t remember this being possible. So, I try it:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mandatory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mandatory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; {:optional=&amp;gt;1, :mandatory=&amp;gt;2}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; {:optional=&amp;gt;-100, :mandatory=&amp;gt;1}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yup, this works.&lt;/p&gt;

&lt;p&gt;And works in a reasonable way (that is, if one would consider this order of optional/mandatory arguments reasonable, but we’ll get to it): depending on the count of arguments passed, the language decides when the optional argument should use its default value.&lt;/p&gt;

&lt;p&gt;A mandatory argument can even follow several optional ones:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mandatory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mandatory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; {:optional1=&amp;gt;-100, :optional2=&amp;gt;-200, :mandatory=&amp;gt;1}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; {:optional1=&amp;gt;1, :optional2=&amp;gt;-200, :mandatory=&amp;gt;2}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; {:optional1=&amp;gt;1, :optional2=&amp;gt;2, :mandatory=&amp;gt;3}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;…but the mandatory-after-optional construct might happen only once in the method definition:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mandatory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#                                              ^ syntax error, unexpected &apos;=&apos;, expecting &apos;)&apos;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OK, so the behavior is simple and predictable, and still, its existence has surprised me. Unlike many other things in Ruby, I never discovered this by myself (even though Ruby has been my primary language for 20 years, and “how to use it to write clean and expressive code” is my main topic of thinking) because the thought that this might be possible never came to me.&lt;/p&gt;

&lt;p&gt;Of course, the reason might be that my previous experience with other languages and CS education taught me that “optional arguments in the end” is the only possible choice&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;But on the other hand, I can’t, from the top of my head, think of an API that would require this order of arguments. I &lt;em&gt;vaguely&lt;/em&gt; remember defining such methods once or twice or seeing them in others’ code, which did something like…&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# So one can use &quot;natural&quot; order of&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   post(&apos;/foo&apos;, {&apos;Content-Type&apos;: &apos;JSON&apos;}, &apos;data&apos;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   post(&apos;/foo&apos;, &apos;data&apos;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...but I didn&apos;t know I could just&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…but honestly struggle to remember when that was and whether it was used.&lt;/p&gt;

&lt;p&gt;So, I wanted to know, when this feature was introduced, how was it justified?&lt;/p&gt;

&lt;div class=&quot;one-ukrainian-thing&quot;&gt;
  &lt;h3&gt;A postcard from 🇺🇦&lt;/h3&gt;

  &lt;p&gt;&lt;em&gt;&lt;strong&gt;Please stop here for a moment.&lt;/strong&gt; This is your regular mid-text reminder that I am a living person from Ukraine, with the Russian invasion still ongoing. Please read it.&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One news item.&lt;/strong&gt; Just when I was finishing this article, Russia &lt;a href=&quot;https://x.com/United24media/status/1807449120681943269&quot;&gt;bombed a postal company terminal&lt;/a&gt; in my home city Kharkiv (as they frequently do, in attempts to cripple civilian logistics and make life in the cities closer to the frontlines unbearable).&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One piece of context.&lt;/strong&gt; &lt;a href=&quot;https://x.com/Biz_Ukraine_Mag/status/1807129810147115167&quot;&gt;Almost all Ukrainian POWs return from Russian captivity in shocking condition, having been subjected to starvation and torture. This is clearly Kremlin policy.&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One fundraiser.&lt;/strong&gt; Over 25% of UA territory is contaminated with the explosive objects because of RU invasion. &lt;a href=&quot;https://x.com/nastasiaKlimash/status/1807370509685760129&quot;&gt;Please, help us demine UA.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;why-the-investigation&quot;&gt;Why? The investigation&lt;/h2&gt;

&lt;p&gt;I have maintained “&lt;a href=&quot;https://rubyreferences.github.io/rubychanges/&quot;&gt;Ruby Changes&lt;/a&gt;” for many years and always try to provide the &lt;em&gt;reason and thinking&lt;/em&gt; behind each language change (&lt;a href=&quot;https://rubyreferences.github.io/rubychanges/3.0.html#endless-method-definition&quot;&gt;example&lt;/a&gt;). I don’t rely only on my own reasoning and language intuitions and always check the original bug tracker discussion (or several, sometimes spanning years) that led to the change.&lt;/p&gt;

&lt;p&gt;The problem is, deeper down in history, Ruby’s NEWS/Changelog files become more and more concise, eventually losing links to discussion tickets—and actually, before some point in the past, most of the discussions happened on mailing lists and not on the tracker.&lt;/p&gt;

&lt;p&gt;So, the only source we can rely upon is, well, the source (code)!&lt;/p&gt;

&lt;p&gt;As the feature of allowing mandatory arguments after optional requires support from the parser, the reasonable place to look for the answers is in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse.y&lt;/code&gt;: the YACC/Bison definition of the Ruby grammar. Looking at &lt;a href=&quot;https://github.com/ruby/ruby/blob/v1_9_1_preview1/parse.y&quot;&gt;its state at 1.9.1&lt;/a&gt; and squinting hard enough around all the C code embedded into the grammar definition, we can relatively quickly find &lt;a href=&quot;https://github.com/ruby/ruby/blob/v1_9_1_preview1/parse.y#L4191&quot;&gt;the necessary fragment&lt;/a&gt;: the definition of a method arguments node (I skip here all the C code that was embedded into grammar):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;f_args    : f_arg &apos;,&apos; f_optarg &apos;,&apos; f_rest_arg opt_f_block_arg
            | f_arg &apos;,&apos; f_optarg &apos;,&apos; f_rest_arg &apos;,&apos; f_arg opt_f_block_arg
            | f_arg &apos;,&apos; f_optarg opt_f_block_arg
            | f_arg &apos;,&apos; f_optarg &apos;,&apos; f_arg opt_f_block_arg
            | f_arg &apos;,&apos; f_rest_arg opt_f_block_arg
            | f_arg &apos;,&apos; f_rest_arg &apos;,&apos; f_arg opt_f_block_arg
            | f_arg opt_f_block_arg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This reads: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_args&lt;/code&gt; node is a sequence of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_arg&lt;/code&gt; (defined below as a list of mandatory arguments, just names), then a literal comma, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_optarg&lt;/code&gt; (optional arguments with default values), comma, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_restarg&lt;/code&gt; (the “rest” arguments &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*rest&lt;/code&gt;), then optional block argument; or, mandatory arguments, comma, optional, comma, rest, comma, mandatory again, block; or… and so on, you get the idea.&lt;/p&gt;

&lt;p&gt;We are interested in the lines when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_arg&lt;/code&gt; (mandatory arguments) are after the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_optarg&lt;/code&gt; (optional arguments/arguments with defaults); and via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git blame&lt;/code&gt; we can find the commit where it was introduced: &lt;a href=&quot;https://github.com/ruby/ruby/commit/ead9b197be96f9eacf462b5539f71c43422495d0&quot;&gt;this one&lt;/a&gt;. Fortunately, it even has an identifier for the mailing list discussion (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ruby-dev:29014]&lt;/code&gt;), which is easy to find in an &lt;a href=&quot;https://public-inbox.org/ruby-dev/87mzbghkrm.fsf@fsij.org/T/#m1b2d41e34a698d03b43d8462af9ac4b6869972a2&quot;&gt;online mirror&lt;/a&gt;. Well, it is an old &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby-dev&lt;/code&gt; Japanese-language mailing list, but we are blessed with Google Translate, so here is the conversation starter:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Suddenly, in 1.9, you can omit the first argument (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCPServer#initialize&lt;/code&gt;). Isn’t it possible to define an optional method as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def m(a=nil, b)&lt;/code&gt;? I thought about it and tried it, but it doesn’t seem to work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, the API mentioned as one of the possible usages is &lt;a href=&quot;https://docs.ruby-lang.org/en/master/TCPServer.html#method-c-new&quot;&gt;TCPServer#initialize&lt;/a&gt; of the language standard library, which indeed has a protocol &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new([hostname,] port)&lt;/code&gt; (the &lt;em&gt;first&lt;/em&gt; argument is optional, the the second is mandatory).&lt;/p&gt;

&lt;p&gt;In the ensuing discussion, Matz is initially reluctant to introduce what he considers a questionable possibility but eventually implements it himself. It was not because somebody provided many specific usages for this particular syntax but because the question turned out to be an edge case of the more general change in Ruby 1.9: the possibility of having a singular argument (mandatory or optional) after a &lt;em&gt;variable number of arguments&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Was a syntax error in Ruby 1.8&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# API like:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   handle_files &apos;*.rb&apos;, &apos;.*js&apos;, Compiler&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#                ^              ^&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#        any number of args   mandatory last&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# A usual idiom in Ruby of those days: the last argument is&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# an options dictionary:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# usage:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;handle_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;README.md&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;script.rb&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;remove: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#                                      ^^^^^^^^^^^^&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# The last part would be treated as `options` dictionary&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The change was introduced in a &lt;a href=&quot;https://github.com/ruby/ruby/commit/9b383bd6cf96e1fe21c41528dec1f3ed508f335b&quot;&gt;large commit&lt;/a&gt;, which doesn’t have a link to some discussion. Nevertheless, it seems to be less inexplicable than the “optional argument before the mandatory.” The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;options&lt;/code&gt; dictionary after the variable list of arguments might’ve been the main driver (confirmed in Matz’s &lt;a href=&quot;https://matz.rubyist.net/20060601.html#p03&quot;&gt;old blog post&lt;/a&gt;), but there are other usages even today, when real keyword arguments replaced the options hash. &lt;em&gt;I was able to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt; such occurrences in our production app codebase, in &lt;a href=&quot;https://github.com/rails/rails/blob/v7.1.3.4/actionview/lib/action_view/template/handlers.rb#L31&quot;&gt;Rails&lt;/a&gt;, in &lt;a href=&quot;https://github.com/rubocop/rubocop/blob/v1.64.1/spec/support/multiline_literal_brace_helper.rb#L25&quot;&gt;Rubocop&lt;/a&gt; — though in very moderate quantities in all of them.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But, if this is possible (and Ruby can properly “understand” that the only argument goes into the last one):&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mandatory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mandatory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# {:optional=&amp;gt;[], :mandatory=&amp;gt;1}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# {:optional=&amp;gt;[1], :mandatory=&amp;gt;2}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;…then, if just for consistency’s sake, another way to define a method with a variable number of arguments &lt;em&gt;before the last one&lt;/em&gt; should be possible, too.  Just in the case of optional arguments, the “variable number” is 0 or 1 (or, more precisely, from 0 to the number of optional arguments defined before the mandatory ones). And so, it happened.&lt;/p&gt;

&lt;h2 id=&quot;is-this-useful&quot;&gt;Is this useful?&lt;/h2&gt;

&lt;p&gt;As I’ve said earlier, I fail to remember many APIs that I would’ve liked to implement with an optional argument before mandatory (if I’d remembered it existed). The Ruby core API/standard library has, if I am not missing something, two such examples (they might be implemented in C, but the principal existence of such signatures shows when they might be useful): the aforementioned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCPServer#initialize([hostname,] port)&lt;/code&gt;, and &lt;a href=&quot;https://docs.ruby-lang.org/en/master/Kernel.html#method-i-exec&quot;&gt;exec&lt;/a&gt; method to run external commands, that has a signature &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec([env, ] command_line, options = {})&lt;/code&gt;—i.e., allows to provide &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENV&lt;/code&gt; for the subprocess. The order here is probably intended to imitate how we do this in the shell:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;VERBOZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 ruby run_script.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to provide the “natural” order in Ruby:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;VERBOSE&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;ruby run_script.rb&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As with my “theoretical” &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post(endpoint, headers = nil, body)&lt;/code&gt; example above, all of those examples seem to solve the conflict between what is perceived as natural for some API: natural ordering vs. what’s natural to omit.&lt;/p&gt;

&lt;p&gt;But if we look wider—at the general “mandatory argument after a variable number of other arguments”—it seems to find its usages, as the examples above show. And in the spirit of symmetry that I talked about in the &lt;a href=&quot;https://zverok.space/blog/2024-06-14-method-evolution.html&quot;&gt;previous article&lt;/a&gt;, making this available in method &lt;em&gt;definitions&lt;/em&gt; meant that the same syntax became available, say, in variable assignment, so you can just…&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;folders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/home/zverok/blog/_posts/optional-args.md&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;folders&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [&quot;&quot;, &quot;home&quot;, &quot;zverok&quot;, &quot;blog&quot;, &quot;_posts&quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;optional-args.md&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is another interesting API, though, which maybe not a lot of Rubyists frequently implement, but which is still a part of the language’s abilities, and which makes “last mandatory argument” make sense. It is a redefinition of the indexed assignment operator, where the last argument of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]=&lt;/code&gt; method is the assigned value, and all before it are parts of the key:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# With unpacking&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Multidimensional&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;[]=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Multidimensional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# {:key=&amp;gt;[1, 2, 3], :value=&amp;gt;4}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Or with optional in the middle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Matrix&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;[]=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Assigning [&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;] = &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Assigning [1:2] = 3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Assigning [1:all] = [4, 5, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;how-others-do-it&quot;&gt;How others do it&lt;/h2&gt;

&lt;p&gt;There are very few languages that allow to define methods/functions with optional arguments before (positional) mandatory ones. PHP had this, but rather as a design flaw (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo(1)&lt;/code&gt; for a function with optional-then-mandatory arguments would still consider the value for the first one is passed, and the second is missing), finally &lt;a href=&quot;https://php.watch/versions/8.0/deprecate-required-param-after-optional&quot;&gt;deprecating&lt;/a&gt; it in PHP 8.&lt;/p&gt;

&lt;p&gt;JS has this, but requires passing an explicit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; to use the optional value:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mandatory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mandatory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// {optional: 2, mandatory: undefined}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {optional: 1, mandatory: 2}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Python, Kotlin, and Scala all allow other mandatory arguments defined after optional or unpacking ones, but then they can be passed only by name:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo($i1, $i2, $v)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Type mismatch: inferred type is String but Int was expected&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Kotlin can&apos;t guess we intend to omit i2&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Works:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// foo(1, 0, &quot;foo&quot;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we look at how other languages handle cases like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCPServer([host,] port)&lt;/code&gt; from above—we might find different solutions, like, &lt;a href=&quot;https://docs.python.org/3/library/socket.html#socket.create_connection&quot;&gt;in Python&lt;/a&gt; it is passing a &lt;em&gt;tuple&lt;/em&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(host, port)&lt;/code&gt; as one argument, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;host&lt;/code&gt; can be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&apos;&apos;&lt;/code&gt;; while, say, NodeJS &lt;a href=&quot;https://nodejs.org/api/net.html#serverlistenport-host-backlog-callback&quot;&gt;just inverts&lt;/a&gt; the order to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(port [, host])&lt;/code&gt;. Anyway, the direct need for such APIs seems to be rare enough to not be too bothered.&lt;/p&gt;

&lt;p&gt;It is interesting to note here that newer languages strive to avoid the question altogether: Rust, Zig, Nim, and Go all made a choice of not allowing optional arguments at all, instead asking their users to use param structs (maybe with default initializers for some fields—here is &lt;a href=&quot;https://github.com/ziglang/zig/issues/485#issuecomment-440489525&quot;&gt;Zig’s version&lt;/a&gt;). This, and other approaches to pass named arguments to indicate their meaning rather than using positional ones, seem to become the most widespread solution for defining APIs with many parameters with non-trivial defaults and order.&lt;/p&gt;

&lt;p&gt;In other cases (like in Java’s &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/net/ServerSocket.html&quot;&gt;ServerSocket&lt;/a&gt;), a possibility to have several definitions for the same method might be used instead, just defining several versions of the method to be chosen based on the actual arguments provided instead of one with many optional arguments.&lt;/p&gt;

&lt;p&gt;The one last case I was curious about is how other languages handle the “indexed assignment” operator redefinition. Here, Python just gathers the entire key in one tuple, thus removing the question of defaults and unpackings (or, rather, moving it into an imperative logic inside the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if len(key) ...&lt;/code&gt; and so on):&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Multidimensional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__setitem__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Multidimensional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# key=(1, 2, 3, 4), value=5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…while Kotlin actually does a “trick”:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Multidimensional&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;set[$i1, $i2] = $v&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Multidimensional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Works, doesn&apos;t require an explicit name for v!&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// set[1, 0] = &quot;foo&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;so-what&quot;&gt;So what?&lt;/h2&gt;

&lt;p&gt;Unlike the “&lt;a href=&quot;https://zverok.space/blog/2024-01-23-syntax-sugar-fin.html&quot;&gt;Useless Ruby Sugar&lt;/a&gt;” series, this text is dedicated to a syntax feature that is neither new nor overwhelmingly expressive. I think it might have its usages (in the upcoming months, I’ll try to reflect more on code I write to understand where it might be appropriate), and a bigger feature of allowing a singular argument after unpacked one definitely has some.&lt;/p&gt;

&lt;p&gt;What I was trying to do here is rather show how the design emerges, what choices are made, and how they might be different for similar programming languages, and how uncovering those choices many years after might be similar to a mystery investigation.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading. Please support Ukraine with your donations and lobbying for military and humanitarian help. &lt;a href=&quot;https://war.ukraine.ua/&quot;&gt;Here&lt;/a&gt;, you’ll find a comprehensive information source and many links to state and private funds accepting donations.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you don’t have time to process it all, donating to &lt;a href=&quot;https://savelife.in.ua/en/&quot;&gt;Come Back Alive&lt;/a&gt; foundation is always a good choice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you’ve found the post (or some of my previous work) useful, I have a &lt;a href=&quot;https://www.buymeacoffee.com/zverok&quot;&gt;Buy Me A Coffee account&lt;/a&gt; now—including subscription options with secret posts! Till the end of the war, 100% of payments to it (if any) would be spent on my or my brothers’ necessary equipment or sent to one of the funds above.&lt;/strong&gt;&lt;/p&gt;

&lt;iframe src=&quot;https://zverok.substack.com/embed&quot; width=&quot;480&quot; height=&quot;320&quot; style=&quot;border:1px solid #EEE; background:white;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The version history before Ruby 2.0 is quite complicated. Commonly used were versions 1.6, then 1.8 (with odd minor versions, like 1.7, considered experimental), but then “patch versions” 1.8.* were introducing a lot of new features, and 1.9.* were several big leaps forward preparing for 2.0, with 1.9.1 being the first stable 1.9 release, and subsequent 1.9.2 and 1.9.3 changing a lot upon it. Since 2.0, version number adjustment is more predictable: each notable version changes minor number, and is released on Christmas each year. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;For positional arguments, I mean. But at the time and in the languages I learned to program, all arguments were positional. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://zverok.space/blog/2024-07-01-optional-args.html</link>
        <guid isPermaLink="true">https://zverok.space/blog/2024-07-01-optional-args.html</guid>
        
        
        <category>ruby</category>
        
        <category>evolution</category>
        
      </item>
    
      <item>
        <title>The design decisions and evolution of a method definition - Ruby case study</title>
        <description>&lt;p&gt;&lt;strong&gt;This is the first part of what’ll hopefully become a new series and potentially even a book. It is dedicated to studying various elements of Ruby programming language design decisions, how they evolved with time, and how they look in a wider context.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This part is dedicated to &lt;strong&gt;method definitions&lt;/strong&gt;—their general shape and ways to specify arguments. While the topic might seem relatively small, it allows us to take a clearly visible path through a vast design space and see how the language spirit and its initial design decisions shape further evolution.&lt;/p&gt;

&lt;p&gt;Also, it might seem weird to choose methods as a starting point to talk about an object-oriented language’s design, but in Ruby’s case, it is fitting. I hope you’ll see why.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: In Ruby, all functions are &lt;em&gt;methods&lt;/em&gt;, in a sense that they are always belong to some object, even if it is not obvious from the first sight. (We’ll look into this matter in the next part of the series, hopefully.) Nevertheless, most of design questions discussed in this chapter are generic enough to be considered in the scope of languages with no notion of objects whatsoever.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;baseline-and-whats-behind-the-baseline&quot;&gt;Baseline, and what’s behind the baseline&lt;/h2&gt;

&lt;p&gt;To see the possible design choices in method definition, let’s start with a very simple one as a baseline:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# some body, maybe just printing to console&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is familiar to any user of a mainstream programming language. Save for punctuation, the base is the same in all of them—but even punctuation is usually this in the mainstream: keyword, name, parentheses, argument names, and commas as separators. It is mundane even. It can be said that, despite its reputation as “weird and whimsical” on the foundational syntax level, Ruby follows the principle of being a &lt;em&gt;non-esoteric language&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This common baseline, though, opens many questions and design decisions that every mainstream language needs to do—with an eye to neighbors, competitors and predecessors, but by its own internal logic (or whim of the maintainers).&lt;/p&gt;

&lt;p&gt;Some questions to be asked might be: How would you designate optional arguments? How would you declare default values for not provided optional arguments? (And are those concepts related or not? What’s the default value of an optional argument otherwise? Or maybe—like in classic scripting languages—all of the arguments are optional?) How would the types be defined (in statically or gradually typed languages)? What other annotations are possible (like lifetimes, pass-by-value/pass-by-reference, mutability)?&lt;/p&gt;

&lt;p&gt;Every answer might have a long-lasting effect on the language’s syntax and semantics—and this list of the questions is by no means exhaustive; note also that those are only questions about argument signatures, not even touching other function/method traits.&lt;/p&gt;

&lt;p&gt;How would one approach answering those questions when a young language just starts to take shape?&lt;/p&gt;

&lt;p&gt;If the language’s ergonomics is the focus of the designer’s mind, all of the decisions should obviously be considered in the context of how the method calls would look and behave. Would it be pleasant to write and easy to read? Would it require to specify too many unnecessary and obvious details? Would it be suggestive (in writing and reading) for the possible meaning and usage of arguments? Would it be hard to make a mistake, and would reporting on typos and misuses be clear and helpful?&lt;/p&gt;

&lt;p&gt;“Classic scripting languages” (like Bash, Perl, or JavaScript) initially tended to prefer succinctness and relaxed treating of input at a price of lesser possibility to spot and understand mistakes. It was an acceptable trade-off when “scripting” languages were used to write, well, “scripts”: short and frequently disposable pieces of glue code.&lt;/p&gt;

&lt;p&gt;Ruby can be seen as the offspring of this culture, but its “relaxed” design led to interesting consequences.&lt;/p&gt;

&lt;div class=&quot;one-ukrainian-thing&quot;&gt;
  &lt;h3&gt;A postcard from 🇺🇦&lt;/h3&gt;

  &lt;p&gt;&lt;em&gt;&lt;strong&gt;Please stop here for a moment.&lt;/strong&gt; This is your regular mid-text reminder that I am a living person from Ukraine, with the Russian invasion still ongoing. Please read it.&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One news item.&lt;/strong&gt; On June 12, Russia shelled a residential area of Kryvyi Rih, &lt;a href=&quot;https://x.com/United24media/status/1800973511118422153&quot;&gt;killing nine people and injuring 29&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One piece of context.&lt;/strong&gt; A year ago, on June 6, 2023, Russia blew up a large Kakhovka dam, which led to death, destruction, and ecocide. Please read &lt;a href=&quot;https://united24media.com/war-in-ukraine/a-year-ago-russia-destroyed-the-kakhovka-hydroelectric-power-plant-today-people-still-feel-the-consequences-612&quot;&gt;this text about the consequences&lt;/a&gt;, a year after.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One fundraiser.&lt;/strong&gt; Polubotok Treasury has a &lt;a href=&quot;https://x.com/krides/status/1800386625823793625&quot;&gt;small, urgent fundraiser&lt;/a&gt; for a necessary equipment for several Ukrainian army unit.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;on-syntax-pliability-lets-talk-about-parentheses&quot;&gt;On syntax pliability: let’s talk about parentheses&lt;/h2&gt;

&lt;p&gt;The seemingly small decision of method call syntax might have a deep effect on the overall language’s design.&lt;/p&gt;

&lt;p&gt;In Ruby, parentheses in method calls are optional, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log(&quot;text&quot;)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log &quot;text&quot;&lt;/code&gt; are exactly the same—and, in particular, bare name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; is the same as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo()&lt;/code&gt;&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;This might seem like a &lt;strong&gt;decorative decision (and a questionable one at that), but the actual effect is a  compact and &lt;em&gt;pliable&lt;/em&gt; language core.&lt;/strong&gt; Almost every language construct is actually a method call:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_private_method&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code, which looks very conventional for any mainstream language user, has much fewer atomic language constructs than it might seem because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attr&lt;/code&gt; is just a method (of the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class&lt;/code&gt;), a shortcut to create instance methods looking like attributes;&lt;/li&gt;
  &lt;li&gt;so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.bar&lt;/code&gt; is also a method call (Ruby doesn’t have a separate “object attribute” concept, only opaque objects and their methods—which is the opposite of, say, JS/Python’s “object is a dictionary, some of its attributes are callable”);&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; is just a method, making all of the methods declared below it private;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foo.new&lt;/code&gt; is just a call of the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt; which every class has.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Not all of the keywords are “actually methods” — &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; are core keywords, not following the method calls syntax; again, Ruby prefers being &lt;em&gt;non-esoteric&lt;/em&gt; to possible conceptual purity. But, say, math or indexing operators &lt;em&gt;are&lt;/em&gt; methods, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a + b&lt;/code&gt; is actually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.+(b)&lt;/code&gt;—and yes, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; is an acceptable method name in Ruby, and you just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def +(arguments)&lt;/code&gt; in your custom class if you want custom operator implementation.)&lt;/p&gt;

&lt;p&gt;Therefore, the syntax built on the decision that “everything is methods and parentheses shouldn’t stay in the way” already makes Ruby feel pliable almost at the level of Lisp: any user-defined method feels native to the language and looks like a deeply integrated syntax. Say, Rails’ well-known “model macros”&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActivRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;validates_presence_of&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…don’t require any additional syntax or rules to be defined: they are just normal methods of the object &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActivRecord::Base&lt;/code&gt;, called like methods in Ruby are usually called.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Another big “caller side” syntax decision Ruby makes is a concept of “code block” attached to the method, which makes iterators like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array.each { |item| ...&lt;/code&gt; or context managers like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File.open(&quot;README.txt&quot;) do |file| ...&lt;/code&gt; also “just method calls.” But Ruby’s blocks are huge topic, and I plan to cover its design decision and evolution separately.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;argument-labels-and-one-more-type-of-brackets&quot;&gt;Argument labels and one more type of brackets&lt;/h2&gt;

&lt;p&gt;Getting back to “convenience for caller” and how method definitions might be affected by that: many languages sooner or later meet the need to associate arguments on call not by order but by name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo(param1 = value1, param2 = value2)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are several reasons such or similar syntax might be desired: to omit some parameters “in the middle” of the parameter list that have reasonable defaults; to avoid memorizing particular parameter order when there are no good unambiguous mnemonics, but parameter &lt;em&gt;names&lt;/em&gt; are easy to remember; to make parameter meaning more obvious on the call site (if they meaning is not immediately apparent just from value, especially for boolean ones).&lt;/p&gt;

&lt;p&gt;In early versions of Ruby (since as early as Ruby 0.95, which, &lt;a href=&quot;https://en.wikipedia.org/wiki/Ruby_(programming_language)#Early_releases&quot;&gt;according to Wikipedia&lt;/a&gt;, is the first public release), the quest for labeled parameters was solved by simply &lt;strong&gt;allowing to omit one more kind of brackets: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt; around the dictionary literal.&lt;/strong&gt; So, the method call could look like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;log.txt&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:encoding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;UTF-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;…which was actually just a syntax sugar for&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;log.txt&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:encoding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;UTF-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open&lt;/code&gt; method’s signature is just this:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(For those not too familiar with Ruby, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:mode&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:encoding&lt;/code&gt; are Ruby’s &lt;a href=&quot;https://docs.ruby-lang.org/en/master/Symbol.html&quot;&gt;Symbols&lt;/a&gt;: immutable string-like type used to represent internal identifiers. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{key =&amp;gt; value}&lt;/code&gt; is dictionary literal—though for historical reasons, dictionaries are called Hash in Ruby; I am mostly using the industry common name in the text, but “hash” might slip!)&lt;/p&gt;

&lt;p&gt;Depending on your taste, one might enjoy the conceptual minimalism of the approach (this was my sentiment back then when I had just learned the language) or be irritated by “things that pretend to look like other things”: a dictionary literal that “just pretends” to be several independent parameters.&lt;/p&gt;

&lt;p&gt;Anyway, it worked quite nicely to inspire many APIs and was further improved when Ruby 1.9 (2007) introduced a syntax sugar for dictionary literals with Symbols keys: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sym: &quot;value&quot;&lt;/code&gt;, so the call would now look more succinct, with nothing but names and values:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;log.txt&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;mode: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;encoding: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;UTF-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Interestingly enough, this was one of the decisions that was met with extremely mixed community response: while definitely nicer to write, it “broke” the conceptual clarity of having any dictionary, regardless of key and value types, written as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key =&amp;gt; value&lt;/code&gt;. To this day, there are Rubyists who prefer to avoid this “sugar.”&lt;/p&gt;

&lt;p&gt;But it seems like &lt;strong&gt;the sugar’s perception opened the way for further evolution&lt;/strong&gt;, which I describe below.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Another interesting observation here is that Ruby’s new syntax reminded not only of JS, but also of Smalltalk, where keywords-with-colons is the &lt;em&gt;only&lt;/em&gt; way to describe method’s arguments in the signature. In Smalltalk’s syntax (without referring to any particular dialect), the method call above would look this way:&lt;/p&gt;

  &lt;div class=&quot;language-smalltalk highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;log.txt&apos;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mode:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;r&apos;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encoding:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;UTF-8&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;…where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open:&lt;/code&gt; is both the name of a method and, on call, the name that designates the first argument. Ruby didn’t try to inherit this part of the Smalltalk’s API too hard, though: while many core methods initially have Smalltalk-borrowed names (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collect&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inject&lt;/code&gt; instead of industry-common &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt;), there is not much core or standard library APIs in early versions that heavily relied on “option dictionaries.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, Ruby is not the only language that repurposed the key-value collection type for quasi-named arguments (but, to my knowledge, the only one—at least in the mainstream—which made its “sugary” bracket omission a foundation for the perception of this approach). Obvious other example is JS, and, maybe less commonly known, Lua (which documents this in an official &lt;a href=&quot;https://www.lua.org/pil/5.3.html&quot;&gt;Named Arguments&lt;/a&gt; chapter of the language book). Some languages, like Zig, use similar solutions with &lt;a href=&quot;https://ziglang.org/documentation/0.6.0/#Anonymous-Struct-Literals&quot;&gt;anonymous struct literals&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most of the other (mainstream) languages, though—like Python, C#, Scala—made a choice to leave the decision to the caller site:&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# the definition: just the list of args
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# the call: all are correct, any could be named:
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;log.txt&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;UTF-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;log.txt&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;UTF-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;UTF-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;log.txt&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Can’t help myself but put another aside note here, on &lt;em&gt;symmetry&lt;/em&gt; (remember this word for later). While some languages (Python, Scala, Kotlin) prefer the assignment sign to bind names to values in method calls (&lt;em&gt;symmetrical&lt;/em&gt; to name binding in variable assignment, and default values in method definitions), some, like C# (since version 4.0, released in 2010) and PHP (8.0, in 2020) preferred &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name: value&lt;/code&gt; syntax—probably, in a bow to ubiquitous by then JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JS’s and Ruby’s conceptually &lt;strong&gt;minimalistic approach was probably a child of its place in the timeline of the dynamic languages&lt;/strong&gt;. They were, back then, tools for thinking in quick sketches. Such a tool should be expressive yet low-concept, and “sketch/thinking” meant that error handling and robustness were less prioritized.&lt;/p&gt;

&lt;p&gt;But, well, times have changed, and dynamic languages have started to be used for writing big systems, perpetuating the argument between those valuing their pliability and freedom of trying things and those who prefer the steel-like reliability of static typing and compilation. (The argument I am absolutely unwilling to participate in. I just observe how &lt;em&gt;one of the languages&lt;/em&gt; evolved, with a curious eye on close and distant neighbors.)&lt;/p&gt;

&lt;p&gt;So, the demands and challenges changed. Or, rather, stayed the same—quickly and flexibly think in code—just the code now was different.&lt;/p&gt;

&lt;h2 id=&quot;it-is-pliable-but-it-shouldnt-fall-apart&quot;&gt;It is pliable, but it shouldn’t fall apart&lt;/h2&gt;

&lt;p&gt;It was so easy and convenient as it was in Ruby to make methods with those &lt;em&gt;quasi-named arguments&lt;/em&gt; that libraries and application code used it almost inevitably, especially with the ascension of Rails and structured web apps in dynamic languages in general.&lt;/p&gt;

&lt;p&gt;The math is simple: reusable, long-living pieces of code with complex structure find themselves in much greater need of large argument lists and clear marking of arguments than one-off scripts and small experimental libraries (previous scripting languages domain).&lt;/p&gt;

&lt;p&gt;However the drawback of the conceptual simplicity is that while it helps the method’s callers to express their thoughts freely, it puts a lot of burden on the method’s authors.&lt;/p&gt;

&lt;p&gt;Assume (just as an example) that in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File.open&lt;/code&gt; method above, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mode:&lt;/code&gt; is semantically mandatory, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;encoding:&lt;/code&gt; has a reasonable default of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;UTF-8&quot;&lt;/code&gt;. To implement this fully, the method’s author will need to write something akin to&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mode is required&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;UTF-8&apos;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(Even those checks aren’t exhaustive: they don’t ensure that options hash have only allowed keys, so it is easy to miss a typo by sending &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enocding:&lt;/code&gt; option, or try to send an option that is not recognized at all.)&lt;/p&gt;

&lt;p&gt;Implementing all the necessary checks and defaults properly frequently stalls the thought and feels like an unnecessary ceremony before you can start to write interesting stuff—and consequently, it is always a temptation to “skip it for now,” especially for smaller methods where such checks might take more than the essence of the method body.&lt;/p&gt;

&lt;p&gt;Also, with one last dictionary argument for all the options, how would the person using the method know which options are available and which are mandatory? It requires extra effort either from the method’s author (add documentation comments and very clear error messages) or from the method’s consumer (to read through the code).&lt;/p&gt;

&lt;p&gt;JS eventually went with introducing destructuring syntax in function definition—and that only in 2015, and only answers part of the challenges:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encoding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;UTF-8&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// `mode` and `encoding` are available as local variables&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;test.txt&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The call above makes an available set of options visible and sets the default value for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;encoding&lt;/code&gt; variable, but will leave &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mode&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, not complaining it wasn’t provided.&lt;/p&gt;

&lt;p&gt;Ruby’s choice in solving the problem was guided by the fact that bracket omission made labeled arguments look real and separate entities—one might say that &lt;strong&gt;this big design decision was made possible by syntax sugar!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It was a logical step (and pretty small—if not in implementation complexity, then at least in the programmer’s mental model adjustment) that was made in Ruby 2.0 (February 2013) with the introduction of the “real” keyword arguments:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# if this is how the call looks:&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;test.txt&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;mode: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;encoding: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;UTF-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ...then can the definition just use the same syntax?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;mode: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;encoding: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;UTF-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# `mode` and `encoding` are available as separate local variables&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# in the body&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There was no semantic trick here; in the method definition, the new syntax was &lt;strong&gt;not a sugar&lt;/strong&gt; for “it is actually just a dictionary,” but a wholly new concept—just &lt;em&gt;looking&lt;/em&gt; familiar and consistent with old habits. (Which didn’t save from some community pushback on losing the conceptual minimalism.)&lt;/p&gt;

&lt;p&gt;At that first introduction, all “keyword arguments” (that’s how they were named officially in Ruby) should’ve had defaults, so the syntax always looked very similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key: &quot;value&quot;&lt;/code&gt; habit of dictionaries.&lt;/p&gt;

&lt;p&gt;Mandatory keyword arguments were introduced one version later, in Ruby 2.1 (December 2013)—and again, the syntax decision was made naturally: if an argument with a default looks like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name: default_value&lt;/code&gt;, then how would argument &lt;em&gt;without a default&lt;/em&gt; look?&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;encoding: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;UTF-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;A note on symmetry&lt;/em&gt;. Since introduction of mandatory keyword arguments, the “syntax symmetry” between call and definition site became incomplete: what was a correct syntax in definition (a name without a value), was a syntax error in method call. The symmetry got back only many years later, in Ruby 3.1 (2021), with a feature called &lt;a href=&quot;https://rubyreferences.github.io/rubychanges/3.1.html#values-in-hash-literals-and-keyword-arguments-can-be-omitted&quot;&gt;argument value omission&lt;/a&gt;:&lt;/p&gt;

  &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# If you have a local variable named `mode`, which the code already&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# calculated...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Then instead of this:&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;test.txt&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;mode: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# This can be written:&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;test.txt&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# meaning the same: use `mode` as a value for a parameter&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# with the same name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;(Interestingly enough, there was a &lt;em&gt;huge&lt;/em&gt; pushback that time, with the main argument for the new syntax “looking like incomplete code.”)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Overall, this development path—while still staying in the spirit of the language and looking “reasonable” for the uninitiated—has put Ruby in a smaller bin of a languages that split positional and named arguments in function definitions. Other languages that made such decisions are, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ocaml.org/manual/5.2/lablexamples.html&quot;&gt;OCaml&lt;/a&gt; — since its &lt;a href=&quot;https://caml.inria.fr/pub/old_caml_site/caml-list/2694.html&quot;&gt;v3.0, released in 2000&lt;/a&gt;, so one of the oldest and probably the most esoteric syntax for mainstream developers;&lt;/li&gt;
  &lt;li&gt;much more mainstream-y Swift (2014) — has &lt;em&gt;all&lt;/em&gt; arguments named by default and a &lt;a href=&quot;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions/#Omitting-Argument-Labels&quot;&gt;special syntax&lt;/a&gt; to mark &lt;em&gt;some&lt;/em&gt; as positional;&lt;/li&gt;
  &lt;li&gt;…and &lt;a href=&quot;https://dart.dev/language/functions#named-parameters&quot;&gt;Dart&lt;/a&gt; (2011) uses an interesting syntactical decision to just wrap all the named arguments in brackets without changing the rest of their syntax; some funny antithesis to Ruby’s “just remove brackets” initial design;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.raku.org/language/signatures#Positional_vs._named_arguments&quot;&gt;Raku&lt;/a&gt;, the fascinating offspring of Perl that feels at times like a design lab for new syntax ideas and notably has &lt;a href=&quot;https://docs.raku.org/language/functions#Arguments&quot;&gt;many syntaxes&lt;/a&gt; for calling functions with named arguments, so one can create APIs of many flavors with it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;evolution-is-painful-to-unpack-or-not-to-unpack&quot;&gt;Evolution is painful: To unpack or not to unpack?&lt;/h2&gt;

&lt;p&gt;An important concept in dynamic languages—especially those as concerned with metaprogramming and general expressiveness as Ruby—is an ability to &lt;strong&gt;accept argument lists with contents known only dynamically and to pass such lists into methods&lt;/strong&gt; known as “unpacking” of argument lists.&lt;/p&gt;

&lt;p&gt;The concept in some form is present in many modern static languages, too, but, as far as I am aware, has much less importance—mainly for special cases like “formatted debug print” (or as a dynamic list of arguments &lt;a href=&quot;https://kotlinlang.org/docs/functions.html#variable-number-of-arguments-varargs&quot;&gt;of the same type&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In dynamic languages, though, there are many cases when either the arguments list is gathered dynamically (and then needs to be sent into a method with a defined arguments list), or the method accepts a dynamic, frequently heterogeneous list of arguments to process them uniformly or pass to the next method in some middleware chain; or just drop extra arguments to conform to some generic interface.&lt;/p&gt;

&lt;p&gt;In Ruby, like in several other languages, the syntax for “splatting” (unpacking) arguments is implemented via asterisk:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# The most frequent case: accept “whetever necessary”&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logged_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Opening the file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...and pass the argument into other method, again “whatever it accepts”&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# The syntax is actually pretty flexible, so it can be used in the middle&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# of argument list:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logged_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# also a _symmetrical_ syntax exists for variable assignment:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_list&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# The unpacking syntax even allows to handle nested sequences&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left_rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right_rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# left_first = 1, left_rest = [2, 3]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# right_first = 4, right_rest = [5, 6]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Keyword arguments required a new kind of unpacking: to gather all named arguments into a dictionary, or, vice versa, to pass the contents of a dictionary as separate named arguments.&lt;/p&gt;

&lt;p&gt;A double-splat operator was introduced (probably borrowed from Python) to designate this concept:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Again: accept any number of _keyword_ arguments...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrap_file_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...and pass the further&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# captures {mode: &apos;r&apos;} into `kwargs` dictionary, and unpacks it back&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# as separate keyword arguments when passing to `File.open`&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wrap_file_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;test.txt&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;log_message: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;opening it!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;mode: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;The new operator, though, wasn’t as symmetrical and powerful as “old” splat. There was no support of the same syntax to unpack parts of the hash into local variables, and no nested unpacking is possible. (This changed with introduction of the pattern matching in Ruby, but it is a separate topic, unrelated—in Ruby—to method definitions.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the same time, the code that just accepted a keyword-looking dictionary as a last argument, i.e., the code in pre-keyword arguments style (either old or deliberately written this way), continued to work seamlessly, providing good backward compatibility:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;old_file_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# still implicitly treated as a dictionary last argument&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;old_file_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;test.txt&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;mode: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;r&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ruby initially also supported the compatibility between two styles (i.e. auto-unpacking the last hash passed into a method with keyword arguments), which worked “magically” but turned out to be &lt;em&gt;bad magic&lt;/em&gt;: a lot of weird edge cases happened when “magical unpacking” happened in an unexpected way (say, mixing default positional arguments with keyword ones, or hashes with symbol and other types of keys frequently led to a confusion). Allowing to mix styles freely also meant that there was less incentive in the community to adopt the new style fully, and there were a lot of codebases where two neighbor files written by two different developers were using different styles (or, neighbor &lt;em&gt;methods&lt;/em&gt; in the same class).&lt;/p&gt;

&lt;p&gt;Only Ruby 3.0 decisively broke the cursed circle by the so-called “&lt;a href=&quot;https://www.ruby-lang.org/en/news/2019/12/12/separation-of-positional-and-keyword-arguments-in-ruby-3-0/&quot;&gt;full separation of positional and keyword arguments&lt;/a&gt;.” Basically, the auto-unpacking of hashes into keyword arguments (and vice versa, forced repacking of keyword arguments into dictionaries) was dropped.&lt;/p&gt;

&lt;p&gt;It was the year 2020, the year of the &lt;del&gt;Tokyo Olympics&lt;/del&gt; COVID, seven years and one big version after the introduction of the keyword argument concept. The amount of code that grew during this long co-existence required a long and painful migration process that started in the last version before 3.0 with some deprecations, and some residual edge cases continue to be solved in Ruby 3.1-3.3 (and at least one has been taken care of &lt;a href=&quot;https://bugs.ruby-lang.org/issues/20218&quot;&gt;as recently as&lt;/a&gt; an &lt;em&gt;upcoming&lt;/em&gt; Ruby version—and the logic of this solution is still questioned).&lt;/p&gt;

&lt;p&gt;Both approaches to named argument—the “sugar for a dictionary” and “real” keyword arguments—continue to work, just never to be mixed. There also was a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;**nil&lt;/code&gt; construct—somewhat clumsy, but a useful way to say the method doesn’t accept keyword arguments and, to avoid confusion, doesn’t allow passing hashes without brackets.&lt;/p&gt;

&lt;p&gt;Finally, considering how frequently “pass everything to the next method” is used in Ruby (middleware, delegation to implementations, metaprogrammed wrapper methods), there was a new way to mark “all arguments regardless of their kind”:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# some additional code&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…but only to pass them further: you can’t give such “catch-everything” a name.&lt;/p&gt;

&lt;h2 id=&quot;is-that-all&quot;&gt;Is that all?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;We just followed a pretty narrow trail through a design space of a language: a story only concerned with method arguments definition and only to properly support named/labeled arguments and keep the language pliable and convenient.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The path of changes and decisions described was happening over the span of decades and several major versions (and that’s considering that Ruby’s “fractional” versions are frequently a big step in the evolution of the language).&lt;/p&gt;

&lt;p&gt;Some sacrifices were made, and some tensions were created in the community, with each new syntax adjustment meeting its share of accusations of “overcomplicating the language for no reason” and “useless sugar.”&lt;/p&gt;

&lt;p&gt;For me, the point of this story is not even whether the changes were “good” or “bad” (significant or minuscule, justified or unnecessary). Rather, I am trying to tell a story of how the shape of the possible design space is probed from the point of view of the initial language’s intentions and by the real needs and habits of its users: a story of evolution, both technical and humane.&lt;/p&gt;

&lt;p&gt;To wrap it up, I’d like to briefly mention a few side trails—big and small—that were abandoned on the path, still making many people sour.&lt;/p&gt;

&lt;p&gt;The most obvious one is a &lt;strong&gt;syntax for type declarations&lt;/strong&gt;. The story of the discussions and possibilities of introducing types in the language is quite complicated; I tried to tell it a year ago in &lt;a href=&quot;https://zverok.space/blog/2023-05-05-ruby-types.html&quot;&gt;this article&lt;/a&gt;; but one part of it is that (besides other reasons) with Ruby’s already rich syntax and omnipresent metaprogramming (in the way that relies on methods pliability), it is extremely hard to come with a way to add types to method definitions so it would &lt;em&gt;look good&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Another topic for dreams and discussions in method definitions is &lt;strong&gt;pattern matching&lt;/strong&gt;. While proper structural pattern matching &lt;a href=&quot;https://rubyreferences.github.io/rubychanges/2.7.html#pattern-matching&quot;&gt;was introduced&lt;/a&gt; in the same time span (around Ruby 3.0) when “the great keyword separation” happened, it stayed a separate kind of statement, and there wasn’t any way invented to merge it with an “old-style” deconstruction, which is less powerful but more deeply integrated into the language—including the deconstruction in the method arguments. I touched this topic a bit &lt;a href=&quot;https://zverok.space/blog/2023-05-05-ruby-types.html#bonus-multiple-dispatch-and-pattern-matching&quot;&gt;by the end&lt;/a&gt; of that typing article.&lt;/p&gt;

&lt;p&gt;A couple of smaller ideas related to method definitions are discussed from time to time on Ruby’s tracker. One is to allow not only binding to method-local variables but also to instance variables of the object (which in Ruby is marked with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt; prefix) by simply allowing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def foo(@a, @b)&lt;/code&gt; syntax—the idea mostly useful for object constructors and therefore not truly generic— which is maybe why it is &lt;a href=&quot;https://bugs.ruby-lang.org/issues/5825&quot;&gt;constantly rejected&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another one is to allow binding argument values to local variables whose names are different from the name of the argument:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# So, imagine we have a method that can be called this way:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;send_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;on: :monday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;if: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This method would be defined this way:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;if: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# inside the method, we need to use `on` local variable:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...which is here not as obvious as in method call&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# And we can’t use `if` variable because it is a keyword, so the only way is&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# a verbose:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;local_variable_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;if&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# So, what if we could’ve write this (not valid Ruby!)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# meaning the value of `on:` argument is available in `wday` local variable,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# and the value of `if:` argument is available as `condition`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Swift, for example, &lt;a href=&quot;https://docs.swift.org/swift-book/documentation/the-swift-programming-language/functions/#Specifying-Argument-Labels&quot;&gt;has&lt;/a&gt; such a feature; in Ruby, it was discussed several times (&lt;a href=&quot;https://bugs.ruby-lang.org/issues/16460&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://bugs.ruby-lang.org/issues/18402&quot;&gt;2&lt;/a&gt;) but to no conclusion (yet?).&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;In this text, we’ve covered only a small part of the language design—method arguments definitions. Nevertheless, it helped to establish a methodology for writing about the language elements’ evolution and to define some base language characteristics to expand in future chapters.&lt;/p&gt;

&lt;p&gt;Some elements of what can be considered part of the method definition—like visibility, ownership, decoration, redefining existing method—will be covered in the next chapter(s), the nearest one tentatively named “What happens when the method is defined?”&lt;/p&gt;

&lt;p&gt;Stay tuned.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading. Please support Ukraine with your donations and lobbying for military and humanitarian help. &lt;a href=&quot;https://war.ukraine.ua/&quot;&gt;Here&lt;/a&gt;, you’ll find a comprehensive information source and many links to state and private funds accepting donations.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you don’t have time to process it all, donating to &lt;a href=&quot;https://savelife.in.ua/en/&quot;&gt;Come Back Alive&lt;/a&gt; foundation is always a good choice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you’ve found the post (or some of my previous work) useful, I have a &lt;a href=&quot;https://www.buymeacoffee.com/zverok&quot;&gt;Buy Me A Coffee account&lt;/a&gt; now—including subscription options with secret posts! Till the end of the war, 100% of payments to it (if any) would be spent on my or my brothers’ necessary equipment or sent to one of the funds above.&lt;/strong&gt;&lt;/p&gt;

&lt;iframe src=&quot;https://zverok.substack.com/embed&quot; width=&quot;480&quot; height=&quot;320&quot; style=&quot;border:1px solid #EEE; background:white;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;When the identifier has an explicit receiver it is applied to (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;obj.foo&lt;/code&gt;), it is definitely a method. If it is just a bare identifier (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt;), it might refer to a method or a local variable, whichever is present in the current scope—if both are present, the local variable “wins”. This might sound like something that might induce confusion, but it is actually a useful design tool, which allows to switch from the name of some value being a method to being a current method’s argument to being a locally-calculated variable without changing the code that depends on it. The technique is called “bareword”—a term &lt;a href=&quot;https://graceful.dev/courses/the-freebies/modules/ruby-language/topic/episode-004-barewords/&quot;&gt;introduced&lt;/a&gt; by a prominent Rubyist and teacher Avdi Grimm. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;A note for fellow Rubyists: Of course, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#fetch&lt;/code&gt; might’ve been used here (both to ensure the presence of a mandatory key and to provide a reasonable default for an optional one), but I am trying to make my examples readable for a wider audience, and using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash#fetch&lt;/code&gt; wouldn’t change the general principle of what I am talking about. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 14 Jun 2024 00:00:00 +0000</pubDate>
        <link>https://zverok.space/blog/2024-06-14-method-evolution.html</link>
        <guid isPermaLink="true">https://zverok.space/blog/2024-06-14-method-evolution.html</guid>
        
        
        <category>ruby</category>
        
        <category>evoluiton</category>
        
      </item>
    
      <item>
        <title>The things I haven&apos;t wrote, and the things I want to write (back to Ruby)</title>
        <description>&lt;p&gt;For three months already, I haven’t published anything on my blog/Substack. In truth, I have a few drafts/half-written posts/unfinished projects to share, but neither of them felt like being worth completing. The amount of duties my service requires has changed recently, too, leaving me much less spare time to write. But if I am being honest with myself, that’s not the primary reason for the silence.&lt;/p&gt;

&lt;p&gt;This text is written as some sort of personal reflection on what and why I want to write. It also serves as a public commitment for future texts (and a way to break writer’s block!).&lt;/p&gt;

&lt;p&gt;In the upcoming weeks/months, &lt;strong&gt;I intend to write a series of posts on various aspects of Ruby’s evolution&lt;/strong&gt; and the programming language’s design decisions that can be seen in it. More on this upcoming series by the end of this post; before that, I want to talk about some other things.&lt;/p&gt;

&lt;h2 id=&quot;before-everything-else-the-war&quot;&gt;Before everything else: The war&lt;/h2&gt;

&lt;p&gt;The Russian invasion of Ukraine continues, but many of you probably haven’t heard/thought of it in a while. Like, “yeah, some region where some unpleasant things happen, but there are many of those.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please read this attentively before you proceed. And please don’t proceed if you don’t read or don’t want to concern yourself.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Foreign news outlets don’t even make big stories anymore of what happens here. Like &lt;a href=&quot;https://twitter.com/zverok/status/1772696730863108254&quot;&gt;deliberate targeting&lt;/a&gt; of the entire huge city’s electric grid in one strike (that’s what happened to my home city where my family still lives) or &lt;a href=&quot;https://twitter.com/den_kazansky/status/1785236572515738087&quot;&gt;usage of cluster munitions&lt;/a&gt; to strike the sea-side city far from the frontlines, or full obliterating of smaller towns, turning them into unlivable rubble. Or shooting prisoners of war, or stealing, renaming, and re-educating children on occupied territories, or all of those other things that russians do daily.&lt;/p&gt;

&lt;p&gt;There is a &lt;a href=&quot;https://twitter.com/United24media/status/1786741268313207028&quot;&gt;genocide happening&lt;/a&gt; right now. And just waiting to expand, not to “stalemate and be somehow settled, let’s move on.” Most Western countries are complicit—save for very few that show unwavering support. Others seem to still believe in half-measures, appeasement, and “waiting it out,” sending only so many weapons so Ukraine wouldn’t lose too quickly (and so that russians have time to adapt to them), or not sending any; blocking Ukraine’s borders under transparently false pretenses; continuing to &lt;a href=&quot;https://twitter.com/robin_j_brooks/status/1787879237120086510&quot;&gt;trade with Russia&lt;/a&gt; or with its trade proxies, pretending it doesn’t happen; and so on, and so forth.&lt;/p&gt;

&lt;p&gt;Yes, in the last few weeks, it looks &lt;em&gt;a bit&lt;/em&gt; like the world started to wake up with all the sudden initiatives to buy ammo for Ukraine and the US Senate finally voting for the Ukraine help bill. The same bill that was blocked for six months for no good reason—which led to the loss of numerous lives, Avdiivka fortress, and strategic initiative—and now Russians are advancing. Which would be held against us (already is, say, by your shitty king Elon): “As we predicted, Russia is unstoppable, so let’s abandon Ukraine and not prolong the agony.”&lt;/p&gt;

&lt;p&gt;Just a few days ago, russia started a new offense in my home region; we don’t know yet what the next day will bring. That’s the price of our “allies” slacking!&lt;/p&gt;

&lt;p&gt;It is honestly hard to maintain a technical writing streak instead of constant screaming in the face of the world (which, I am afraid, my formerly technical Twitter eventually turned into).&lt;/p&gt;

&lt;p&gt;So, I’ll be open here: one of my important reasons to write is to be heard as Ukrainian. That’s also, probably, the main reason I am trying to get back on track of regular writing instead of taking some hiatus “till the better times.”&lt;/p&gt;

&lt;p&gt;But I promise my technical writing will not be some half-assed random musings for the sake of “publishing something by Ukrainian.” Never was able to write texts just to fill the space in the schedule. (One might guess so by the irregularity of my posting through years!) I always needed deeper reasons.&lt;/p&gt;

&lt;h2 id=&quot;how-i-write-and-what-i-write&quot;&gt;How I write and what I write&lt;/h2&gt;

&lt;p&gt;One of the problems I was always struggling with was not enough attention and will to write small and regular “what I thought about today”/”that thing that I know and suddenly wanted to share” entries aka the classic blog posts.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Though, lately, I am planning to develop a habit of writing down quick insights for my &lt;a href=&quot;https://buymeacoffee.com/zverok&quot;&gt;Buy Me A Coffee&lt;/a&gt;. Not sure how it will go, but I intend to give it a try.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I did some standalone small-ish posts in &lt;a href=&quot;https://zverok.space/writing/&quot;&gt;my blog&lt;/a&gt; over the years; did a lot of “blogpost”-sized Twitter threads or Reddit answers. But in general, every time I really wanted to write something to share publicly, I felt like I should have a steady perspective and try to provide a lot of value: dig for unexpected insight, for new optics, for a system of thinking about larger problems.&lt;/p&gt;

&lt;p&gt;With blogging/mailing list, this writing habit turns almost any attempt into either a multi-page, baroquely-structured, “too many ideas in one text” monster; or into a series (which, as we know, tend to grow during writing).&lt;/p&gt;

&lt;p&gt;Even for the current one—which was planned as just a quick status update/clean slate restart—I now find myself moving around concepts, inventing sub-headers, throwing away faulty paragraphs, and whatnot. (And, truth be told, the initial date in the header was somewhere at the beginning of April.)&lt;/p&gt;

&lt;p&gt;This was the same with my literature writing: for the last decade of the time I considered myself a poet, I always worked in big “cycles,” and now, with prose, it always novels with an intricate structure.&lt;/p&gt;

&lt;p&gt;That’s… not the most efficient way of wooing the audience. Sometimes, it succeeds; most of the time, the impact and response are minuscule (if not negative) compared to the amount of work put into the text.&lt;/p&gt;

&lt;p&gt;But that’s how I am.&lt;/p&gt;

&lt;p&gt;So, when, a few years ago, I created a &lt;a href=&quot;https://zverok.substack.com/&quot;&gt;mailing list&lt;/a&gt; and tried to commit myself to regular writing, I was thinking about &lt;strong&gt;two big topics&lt;/strong&gt; to go through: the programmable access to common sense knowledge and the programming/coding itself—as a kindred activity to writing texts.&lt;/p&gt;

&lt;p&gt;The former, I eventually got unstuck from. The latter, I continue to think about.&lt;/p&gt;

&lt;h2 id=&quot;the-abandoned-track-common-sense-knowledge&quot;&gt;The abandoned track: Common-sense knowledge&lt;/h2&gt;

&lt;p&gt;I’ve already told the story of &lt;a href=&quot;https://zverok.space/blog/2024-02-09-gpt.html&quot;&gt;“Reality” and related projects&lt;/a&gt; multiple times, but to reiterate: it was a &lt;a href=&quot;https://github.com/molybdenum-99&quot;&gt;bunch of efforts&lt;/a&gt; to see if there could be a generic approach to the world’s data (represented by Wikipedia, Wikidata, OpenStreetMap, and others) to create a “natural” API so that trivial knowledge can be fetched programmatically in any necessary context.&lt;/p&gt;

&lt;p&gt;I would call it my “naive period”: That was a pre-LLM passion of mine, and what I looked for there was some feeling of &lt;strong&gt;understanding the world via modeling it.&lt;/strong&gt; Not “a class per object” modeling (though probably developers of my generation still feel their inner child yearning for something like that), but looking for a minimal and solid set of core concepts via wrapping known services— I don’t know, something in this idea gave me a thrill.&lt;/p&gt;

&lt;p&gt;I learned a lot (mostly in not-really-transferable knowledge, like a deep and intimate acquaintance with MediaWiki quirks) and had a lot of fun; while eventually, I stopped digging this hole, I contemplated reflecting upon this period and experience in some entertaining post, or a couple (maximum!).&lt;/p&gt;

&lt;p&gt;But, as it happens, what was planned as a quick farewell article eventually grew into a &lt;a href=&quot;https://zverok.space/blog/2024-02-09-gpt.html&quot;&gt;potential start&lt;/a&gt; of new series; and that start alone was so naively sounding that it caused a torrent of patronizing and condescending comments on Reddit— And also made me re-evaluate the story I was trying to tell.&lt;/p&gt;

&lt;p&gt;I probably won’t pursue that anymore. The experience says that it mostly falls into the “doomed from the beginning” category of texts: those who didn’t spend a lot thinking about similar problems aren’t that interested; those who did frown at naivete/shallowness.&lt;/p&gt;

&lt;h2 id=&quot;the-abandoned-track-text-handling-libraries&quot;&gt;The abandoned track: text-handling libraries&lt;/h2&gt;

&lt;p&gt;A less naive branch on this track of thinking was the class of “classic” natural text processing libraries/software that had—for me—that vibe of “common knowledge locked into some code and custom data formats.”&lt;/p&gt;

&lt;p&gt;There was a feeling—again!—of some fundamental “models” being concealed there, and by understanding these codebases and formats, to share them with others as code and explanatory texts, I could’ve—again—extract some valuable insights.&lt;/p&gt;

&lt;p&gt;There were several attempts of “understanding through rewriting” projects I underwent for some of the most popular and commonly used ones, eventually stopping at various stages of those projects for the same reason.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The spellchecker.&lt;/strong&gt; Looking into &lt;a href=&quot;https://hunspell.github.io/&quot;&gt;Hunspell&lt;/a&gt;, I stopped only after the &lt;a href=&quot;https://github.com/zverok/spylls&quot;&gt;full working&lt;/a&gt; port of it into Python (that took a year) and a &lt;a href=&quot;https://zverok.space/spellchecker.html&quot;&gt;series&lt;/a&gt; of explanatory articles (another six months). At the beginning of the project, I imagined it to become a long-term commitment: once &lt;em&gt;one&lt;/em&gt; of the most used spellcheckers is ported into a high-level self-explanatory code, others (like aspell, voikko, morfologik) should be added too, and some common repository of “spellchecker wisdom” written with same high-level abstractions might bring new fruits.&lt;/p&gt;

&lt;p&gt;Eventually, by the end of the project, I understood that there was no interesting, coherent “model” I’d uncovered but a sequence of elaborate heuristics (&lt;a href=&quot;https://zverok.space/blog/2021-05-06-how-to-spellcheck.html&quot;&gt;the final article&lt;/a&gt; of the series explains this in great detail).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The grammar checker.&lt;/strong&gt; For a long time, I was toying with the idea of an exploratory rewrite of the &lt;a href=&quot;https://github.com/languagetool-org/languagetool&quot;&gt;LanguageTool&lt;/a&gt;—an open-source grammar checker that powers, say, Open/LibreOffice. (At some point, I even &lt;a href=&quot;https://github.com/molybdenum-99/mormor&quot;&gt;ported&lt;/a&gt; the dictionary/word analysis library they use, &lt;a href=&quot;https://github.com/morfologik/morfologik-stemming&quot;&gt;morfologik&lt;/a&gt;, into Ruby—that was even before my Hunspell study—it was quite educational!)&lt;/p&gt;

&lt;p&gt;This tool is written in Java and heuristics-based, too (it is more or less evident from the codebase of a particular language implementation, consisting of many XML-encoded &lt;a href=&quot;https://github.com/languagetool-org/languagetool/blob/master/languagetool-language-modules/en/src/main/resources/org/languagetool/rules/en/grammar.xml&quot;&gt;rules&lt;/a&gt; and small amounts of code with &lt;a href=&quot;https://github.com/languagetool-org/languagetool/blob/master/languagetool-language-modules/en/src/main/java/org/languagetool/language/English.java&quot;&gt;boilerplate/hand-coded rules&lt;/a&gt;). I felt like it might be a fine exercise in using Ruby’s expressiveness powers to model this heuristic analysis in a way that would make it easy to understand and port into any other language—potentially, bringing the power of a mature grammar-checking ruleset into any ecosystem that would want it.&lt;/p&gt;

&lt;p&gt;Eventually, two reasons made me abandon the project: first, current LanguageTool maintainers seem to try  supporting further work on it by monetization (judging by the current state of the project’s &lt;a href=&quot;https://languagetool.org/en&quot;&gt;public site&lt;/a&gt;), and I felt like an attempt to port it “away” from their control, while legally possible, might be morally murky. The second and more global one is that every time I returned to the idea and tried to test LanguageTool’s grammar-checking prowess, it felt sorrily short of Grammarly&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and, recently, ChatGPT. I was basically afraid that by the time I had something to show, nobody would be interested in the inner workings of the “old generation” of tools, those relying on hand-coded heuristics.&lt;/p&gt;

&lt;p&gt;I don’t want to say LanguageTool is useless, and all of the development ingenuity spent on it is in vain. What I am saying is that trying to understand those tools doesn’t satisfy the urge to “understand some domain through modeling it,” and the heuristic approach to solving complicated problems today gives a strong vibe of belonging to bygone times. All in all, it is just the same databases of statistically gathered experience that ML models are based on; just in the case of those “older” projects, the experience was gathered and encoded manually.&lt;/p&gt;

&lt;p&gt;Porting heuristics and ways to interpret them is fun (the “rewrite LanguageTool in Ruby” is &lt;em&gt;still&lt;/em&gt; tempting despite everything said above! I almost literally slap my hands from the involvement in this old dream), but currently it rather feels like a dead-end project&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stemmer.&lt;/strong&gt; A small last attempt to dig into something of the classics was me toying with the &lt;a href=&quot;https://snowballstem.org/&quot;&gt;Snowball&lt;/a&gt;. You might or might not have heard of it, but it is the default stemming solution in many open-source systems that need a reliable search, like &lt;a href=&quot;https://www.postgresql.org/docs/current/textsearch-dictionaries.html#TEXTSEARCH-SNOWBALL-DICTIONARY&quot;&gt;PostgreSQL&lt;/a&gt; or &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/stemming.html&quot;&gt;ElasticSearch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last months of winter, I tried to give its due to that long-term hobby of mine and try understanding (again, via debugging/porting/rewriting) the Snowball’s peculiar &lt;a href=&quot;https://snowballstem.org/compiler/snowman.html&quot;&gt;specialized programming language&lt;/a&gt;. &lt;a href=&quot;https://github.com/zverok/stempunk&quot;&gt;Here is the tombstone&lt;/a&gt; of this failed attempt: while I managed to become fluent in this weird language and manually rewrite a couple of stemmers in Ruby, I quickly (by my standards, that is—after a few weeks’ evenings spent on the project) understood there would be no interesting story to tell about it.&lt;/p&gt;

&lt;p&gt;Again, there was no deep linguistic knowledge hidden in those quirky &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sbl&lt;/code&gt; files: just a bunch of heuristics deduced on large corpora, and no lesson to learn other than “well, there was a bunch of heuristics written in a peculiar way; I invented another way (probably as peculiar) to do so.”&lt;/p&gt;

&lt;p&gt;So, what I am saying&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;—&lt;/p&gt;

&lt;p&gt;For a long time, I was fascinated by the prospects of analytically modelling some of the human knowledge. I recognize now that most of useful achievements in this area seem to be reached (at least at the current state of our knowledge) rather by a statistical modeling.&lt;/p&gt;

&lt;p&gt;And my interests are staying in the “humane” part of the software developments, of what we can write ourselves, and how we do it; what is achieved by writing (code and texts) for humans.&lt;/p&gt;

&lt;p&gt;So, I renamed &lt;a href=&quot;https://zverok.substack.com/&quot;&gt;my Substack&lt;/a&gt; (it was “On lucid code and open data” initially) to shorter and humbler version. That’s what I am writing about, after all.&lt;/p&gt;

&lt;h3 id=&quot;the-main-focus&quot;&gt;The main focus&lt;/h3&gt;

&lt;p&gt;My “maybe to write, some time” list has many entries.&lt;/p&gt;

&lt;p&gt;Some are sitting in the list for years (and I still feel them deserving my attention), some are pretty recent “what if we talk about that.” Some are vague “generic directions to look into,” some are pretty well-formed topics, many are stray ideas for separate articles of moderate size (though, knowing myself, they aren’t safe from growing into series uncontrollably).&lt;/p&gt;

&lt;p&gt;To get a glimpse, here are some things that I’d probably cover if I had a few free months just to write:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Some thoughts concise code writing approaches, and on balance between “can be seen in one glance” vs. “doesn’t require years of training to interpret” (a lot of thoughts here are inspired by studying less mainstream approaches to coding, like APL—here is an old &lt;a href=&quot;https://twitter.com/zverok/status/1395444520116969476&quot;&gt;Twitter thread&lt;/a&gt; about it);&lt;/li&gt;
  &lt;li&gt;Many insightful ways of thinking about the code as we think about texts, applying rules, approaches, and intuitions: what we might find out about code layout, review/editing, reading, and structuring while looking at it as a “text for humans.” There are many angles here, from very pragmatic linters/formatters reassessment to topics as humanitarian as an intersection of our outlooks on &lt;a href=&quot;https://twitter.com/zverok/status/1493211236783251463&quot;&gt;programming and poetry&lt;/a&gt;—still might lead to interesting changes in outlook;&lt;/li&gt;
  &lt;li&gt;My approach to testing, “behavior/test driven development,” tools and DSLs for it, and why I consider that a common truth about “tests should be dumb” is not always applicable (and how I successfully help maintain huge codebases using my points of view);&lt;/li&gt;
  &lt;li&gt;A ubiquitous “framework fallacy” we are all susceptible to (both on the coding level and thinking level), and what might be the alternatives;&lt;/li&gt;
  &lt;li&gt;A comparative analysis of many small design decisions made throughout the programming languages and their libraries, and how approaches to those decisions differ in different communities, and even in the same one: on many ways to design an HTTP client or generic date/time utilities, or a testing library; on ways to document and compare design spaces and design decisions across the industry which we frequently lack;&lt;/li&gt;
  &lt;li&gt;And, of course, many angles of looking at Ruby, its roots, possibilities, and ways of writing code in it—from (one more) text on what I consider a suitable application of “functional” ideas in the language to a (healthy) comparison with Python to understand how the deep internal differences of two languages (similarly-looking and considered “close relatives” by many in the industry) lead to divergence in programming approaches;&lt;/li&gt;
  &lt;li&gt;…and… I can continue for a long time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This might seem eclectic (and before not so long ago, I would be first to think that: what is this I am so interested in if my mind wonders on topics only tangentially related to each other and my day job).&lt;/p&gt;

&lt;p&gt;However, there is a common theme here: the ways of writing code for humans to emphasize understanding and pass &lt;em&gt;insights&lt;/em&gt; about the problem at hand. I called this approach—not really an approach, a way of looking at coding—“lucid code,” meaning the quality of it that exposes intents, goals, and views. (Another fitting name would be “humane code,” but it is kinda &lt;a href=&quot;https://brightdigit.com/articles/humane-code/&quot;&gt;taken&lt;/a&gt;—though it is used to speak of similar ideas.)&lt;/p&gt;

&lt;p&gt;The Ruby language—which I cherish, and frequently write about, and very frequently write &lt;em&gt;in&lt;/em&gt;—is important but not the center of this effort. It is rather a tool of thinking, including “meta-level thinking”: not only “how to write something in particular” but also how we approach writing and reading code. And what languages we create and how we use them.&lt;/p&gt;

&lt;p&gt;From this perspective, the evolution and design decisions of a particular programming language is an incredibly interesting topic. The way it changed with years, what was exposed as an unmovable core and what became legacy; the way it adapts to the new challenges or opposes them.&lt;/p&gt;

&lt;p&gt;Coincidentally, it is also a theme by which I am most well-known in the Ruby community: the “&lt;a href=&quot;https://rubyreferences.github.io/rubychanges/&quot;&gt;Ruby Changes&lt;/a&gt;” project that I have maintained for five years already, and that attempts to cover the reasoning and consequences behind each language version changes.&lt;/p&gt;

&lt;p&gt;Hence my choice of the next track of writing.&lt;/p&gt;

&lt;h3 id=&quot;the-series-and-the-future-book-hopefully&quot;&gt;The series and the future book (hopefully)&lt;/h3&gt;

&lt;p&gt;So what I want to do now is to create a series of texts on (you guessed it!) Ruby evolution.&lt;/p&gt;

&lt;p&gt;Unlike the site linked above, I want to try a depth-first approach: take core elements of the language one by one—methods, objects, classes, base data types, collections, etc., etc.—and see how they were changing through time; what needs stood behind each change, and what consequences it brought (which sometimes becomes evident only many versions later).&lt;/p&gt;

&lt;p&gt;In other words, I am planning to follow the overall structure of the current “&lt;a href=&quot;https://rubyreferences.github.io/rubychanges/evolution.html&quot;&gt;Ruby Evolution&lt;/a&gt;” page on the Ruby Changes site; but cover every significant element of the language with a thoughtful look into how it all happened, not just a matter-of-factly description of the change. Somewhat like my autumn series on “&lt;a href=&quot;https://zverok.space/blog/2023-10-02-syntax-sugar.html&quot;&gt;useless Ruby sugar&lt;/a&gt;” but with a more historical perspective. (I actually toyed with the idea of the “Ruby Evolution” book by the end of &lt;a href=&quot;https://zverok.space/blog/2024-01-23-syntax-sugar-fin.html#ps-what-about-a-book&quot;&gt;those series&lt;/a&gt; and received a bunch of encouraging responses, so here we are!)&lt;/p&gt;

&lt;p&gt;I really believe/hope that such a walkthrough of the language history might be interesting for Rubyists and will bring some new perspective on what we have and how it is better to use it. I also really hope that looking into this history of one “system of writing” evolved might be entertaining for users of other languages, and allow them to reflect deeper on the design decisions and tradeoffs of their tool of choice.&lt;/p&gt;

&lt;p&gt;That’s the plan, anyway. At this point, I can imagine many possible obstacles, both internal and external (well, there is still a war, you know), in the way of this plan. But as far as human planning goes, I intend to write a “chapter” every two-three weeks, and I estimate the series/book to be around ten chapters (maybe more, maybe less, we’ll see how it goes).&lt;/p&gt;

&lt;p&gt;See you next time, hopefully, earlier than in three months!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading. Please support Ukraine with your donations and lobbying for military and humanitarian help. &lt;a href=&quot;https://war.ukraine.ua/&quot;&gt;Here&lt;/a&gt;, you’ll find a comprehensive information source and many links to state and private funds accepting donations.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you don’t have time to process it all, donating to &lt;a href=&quot;https://savelife.in.ua/en/&quot;&gt;Come Back Alive&lt;/a&gt; foundation is always a good choice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you’ve found the post (or some of my previous work) useful, I have a &lt;a href=&quot;https://www.buymeacoffee.com/zverok&quot;&gt;Buy Me A Coffee account&lt;/a&gt; now. Till the end of the war, 100% of payments to it (if any) would be spent on my or my brothers’ necessary equipment or sent to one of the funds above.&lt;/strong&gt;&lt;/p&gt;

&lt;iframe src=&quot;https://zverok.substack.com/embed&quot; width=&quot;480&quot; height=&quot;320&quot; style=&quot;border:1px solid #EEE; background:white;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I am not sure which algorithm Grammarly uses. &lt;em&gt;Rumors&lt;/em&gt; from “people who once worked with people who…” said it is part heuristics, part machine learning, with heuristics being much more efficient; but those rumors are several years old, and I basically assume that the role of machine learning is significant in their product. Or they have very, very good machine linguists to maintain their heuristics. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The LanguageTool main page currently dubs it an “AI-based spelling, style, and grammar checker.” To the best of my understanding, all of the grammar checking is still performed with those heuristic rules, while a separate “paraphrase” LLM (?)-based tool is experimented with to catch up with the trends. Anyway, the open source part that I was interested in seems to not have changed much over the years I was contemplating the idea. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I am sorry this section takes so long… It was initially planned as a standalone article (or series?.. You never know) to the general meaning of “what I know about the classic common tools of natural text processing,” but then I couldn’t decide who would be the target audience— so, I just tried to integrate it into this “history of my interests” narrative. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 12 May 2024 00:00:00 +0000</pubDate>
        <link>https://zverok.space/blog/2024-05-12-updates.html</link>
        <guid isPermaLink="true">https://zverok.space/blog/2024-05-12-updates.html</guid>
        
        
        <category>ruby</category>
        
        <category>personal</category>
        
      </item>
    
      <item>
        <title>ChatGPT have killed my passion project and I am fine</title>
        <description>&lt;h2 id=&quot;part-1-welcome-to-reality&quot;&gt;Part 1: Welcome to reality&lt;/h2&gt;

&lt;p&gt;…so, the story goes like this:&lt;/p&gt;

&lt;p&gt;Just a few months after ChatGPT became an Internet darling, I suddenly understood that it (and LLMs in general) rendered my biggest personal project irrelevant.&lt;/p&gt;

&lt;p&gt;One might ask: so what? In the ever-changing industry, nobody has a steady ground underneath their feet. A lot of software projects probably find themselves superseded or bypassed by a sudden new technology, and not only modest “personal” ones but somebody’s billion-dollar hopes!&lt;/p&gt;

&lt;p&gt;I hear you. Yet, for me, the thing was pretty big. It wasn’t some weekend experiment but a large tree of projects and ideas I climbed for almost ten years. A project of passion that I almost expected to remain lifelong.&lt;/p&gt;

&lt;p&gt;And yet, suddenly, it was all done and gone. What might one feel at that moment? What would they think?&lt;/p&gt;

&lt;p&gt;Many different things! But first, what was the project?&lt;/p&gt;

&lt;h2 id=&quot;the-dream-of-reality&quot;&gt;The dream of reality&lt;/h2&gt;

&lt;p&gt;I’ve already &lt;a href=&quot;https://zverok.space/blog/2021-10-19-wikipedia.html&quot;&gt;told&lt;/a&gt; the story of my Big Project (while still attempting to do one more iteration of it), but to recap it briefly:&lt;/p&gt;

&lt;p&gt;I was inspired by the Wolfram language’s idea of having &lt;a href=&quot;https://www.wolfram.com/knowledgebase/&quot;&gt;“common sense” data about the world&lt;/a&gt; as a part of the language/library&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. And I wanted to reproduce it in Ruby (in which I think) and, of course, using open technologies and open data.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A bit of “TMI”: I half-seriously believe that this project might’ve cured me of something akin to midlife crisis, at least a professional one.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I consider myself a writer, first and foremost—a writer who mostly writes in programming languages&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. And while I can enjoy writing code for “regular” projects (small and medium-sized pragmatic product companies are my usual employers), at some point in life, at the beginning of my 30th&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, I started to lose interest.&lt;/p&gt;

&lt;p&gt;Writing, for me, is all about looking at things closely, having some insights about them, and sharing them with others: for them to have and share their own insights, and that’s how the entire human culture is built if you’ll excuse my pathos. For a passionate programmer of my type, just building useful products is never enough; trying to uncover something new and exciting to share with other programmers was what I missed.&lt;/p&gt;

&lt;p&gt;So, the problem I dedicated myself to was the idea that &lt;strong&gt;all the common knowledge should be accessible programmatically&lt;/strong&gt; through some universal API.&lt;/p&gt;

&lt;p&gt;Naive as I was, I believed that I saw a clear (if a very long) path to the goal:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;start from Wikipedia (which is obviously a “table of contents” of human knowledge);&lt;/li&gt;
  &lt;li&gt;develop a way to extract data from it;&lt;/li&gt;
  &lt;li&gt;then, think of a nice Ruby API to represent all kinds of data generically (without, of course, introducing  concrete classes like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cat&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;City&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Molecule&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;then, add other open data sources (OpenStreetMap, weather, currencies, animal species, …) and gradually add API for them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Very sketchy, yes, but, on the other hand, there is no need for a more detailed plan for a solo developer looking for a passion project: you see your first step and &lt;em&gt;possible&lt;/em&gt; future, so—&lt;/p&gt;

&lt;p&gt;The first step—digging into Wikipedia—took a lot of work. But on the bright side, I believed that by-products of moving towards my distant goal should be useful by themselves.&lt;/p&gt;

&lt;p&gt;Sooner or later (much later than it was estimated… like, years later), I developed a stack of libraries that I was quite proud of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/molybdenum-99/mediawiktory&quot;&gt;MediaWiktory&lt;/a&gt;: a low-level client for MediaWiki’s peculiar API, which allowed to use all of it in the exact terms it was meant to be used;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/molybdenum-99/infoboxer&quot;&gt;Infoboxer&lt;/a&gt;: a semantic client for Wikipedia (and any similar MediaWiki), with a full-strength MediaWiki markup parser, a parse tree for any page’s content, and an XPath-like query language for this tree;&lt;/li&gt;
  &lt;li&gt;a few “side-quests,” not directly related to the main direction, but ones that I wanted to have at some point: &lt;a href=&quot;https://github.com/molybdenum-99/tz_offset&quot;&gt;TZOffset&lt;/a&gt; and &lt;a href=&quot;https://github.com/zverok/geo_coord&quot;&gt;Geo::Coord&lt;/a&gt; data types and &lt;a href=&quot;https://github.com/molybdenum-99/tlaw&quot;&gt;tlaw&lt;/a&gt; (aka “The Last API Wrapper,” a declarative HTTP API client description framework);&lt;/li&gt;
  &lt;li&gt;and &lt;strong&gt;a “crown jewel” of the effort, the project/library named &lt;a href=&quot;https://github.com/molybdenum-99/reality&quot;&gt;Reality&lt;/a&gt;&lt;/strong&gt; — a (forever) early draft of what I really wanted to achieve.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I went through several iterations, moving from “cool on demo, breaks on any non-trivial case”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2024-02-09/image00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;…and towards more formal (and less demo-friendly until you are fully sold on the entire “describe the world” project):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2024-02-09/image01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2024-02-09/image02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you might distinguish from screenshots, those last demos already demonstrated the ideas of interaction with many open data sources in what felt like a clear and extendable way. I hoped to cover more with each next iteration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The project brought me several hundreds of GitHub stars, a lot of experience, several moderately successful conference talks— And not much more.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For “some reason” (hehe), nobody in the community seemed to care about using my precious libraries—neither more pragmatic Wikipedia clients (though I sought to put nice and practical examples in README and various documentation) nor the Reality™ itself.&lt;/p&gt;

&lt;p&gt;Given that it was an early prototype—and still, I had some hopes (or, rather, dreams) of a vibrant community emerging around the idea. Maybe even attracting people from other languages to look at Ruby (which gave me the ability to build a nice API and do it efficiently!) in the new light.&lt;/p&gt;

&lt;p&gt;There was some initial spark of enthusiasm and several people trying to contribute—but not for long. One of the reasons was the inherent complexity of the task at hand. The API was looking nice and easy (and that was attractive, at least to some), and it solved a task that is &lt;em&gt;easy for a human&lt;/em&gt;, so the contributors came in the hope that adjusting or adding something would be as simple as it intuitively should— and were met with a need to understand many domains, APIs, and concepts that powered it all.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;That’s one of the constant and important pitfalls I have with my passion projects. It is frequently said that the most popular projects are those that make easy the thing that felt complicated. My projects tend to make simple what “intuitively” looks simple, but is complicated inside.&lt;/p&gt;

  &lt;p&gt;So a lot of those who look at those projects are disinterested because they don’t believe there was a significant problem to solve (after several months of work on Infoboxer, one of the first comments after it publishing was along the lines “it is just a glorified HTTP client, nothing one can’t do in a few hours”). Others know that the problem is complicated and work on its part for years— And they aren’t interested in solutions that designed to be appealing for the common public.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But that was not the only reason for the project staying in a forever “curious demo” stage.&lt;/p&gt;

&lt;h2 id=&quot;the-reality-check&quot;&gt;The reality check&lt;/h2&gt;

&lt;p&gt;After a few-years-long marathon (the &lt;a href=&quot;https://github.com/molybdenum-99/infoboxer/commits/master/?after=779c688c493d9ccde27f992e986399da7e269bf9+314&quot;&gt;first commits&lt;/a&gt; of the Infoboxer were in May 2015, and the last attempt to revive Reality was a release and talk prepared for &lt;a href=&quot;https://zverok.space/talks/#when-the-whole-world-is-your-database&quot;&gt;RubyConf India’18&lt;/a&gt;), I was somewhat out of steam and wanted to reevaluate my options and the way to move forward.&lt;/p&gt;

&lt;p&gt;I was still fond of the general idea, yet I am not of the kind who would polish their magnum opus in the ivory tower for decades. Like a normal writer, I want to get published—not for fame or money, but because ideas and texts are worth crap unless they are circulated, perceived by others, and produce other ideas. In the area of open source, this means not only putting a thing on GitHub but also seeing people using this thing and trying to adjust it to their own needs.&lt;/p&gt;

&lt;p&gt;So, I identified some problems that, in my opinion, led to the fact that my “cool” projects haven’t received as much attention as they “deserved.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The first problem was societal:&lt;/strong&gt; at that point in time, it was obvious that the Ruby community was mostly entrenched in the “web development” domain, where access to rich open data was not that important. Especially the kind of access that is not super-robust or performant: theoretically, one can use Reality/Infoboxer to, say, populate a database of TV show episodes (while developing a new show-tracking service), yet various irregularities in data and formatting would urge one to look for a &lt;em&gt;specialized&lt;/em&gt; data source.&lt;/p&gt;

&lt;p&gt;The “you can fetch a lot of various data kinds, yet not always robustly” seems more appealing for an environment with a lot of experimentation, data-driven research, one-off demos of interesting visualizations, and such. The obvious choice was to court the Python/data science community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The second problem (which I wasn’t sure even switching the language/community would solve) was that I did not have many &lt;em&gt;pragmatic examples&lt;/em&gt;&lt;/strong&gt; in mind to quickly demonstrate how having access to “all common sense data” in a homogeneous API would be useful. My various go-to demos (like “distances between cities” or “discographies of artists”), arguably, are better solved with specialized APIs/datasets. I still believed that “it should be done,” yet struggled to explain &lt;em&gt;why&lt;/em&gt;. Which always felt weird!&lt;/p&gt;

&lt;p&gt;(There was also a third problem, purely technical: however fond I was of my powerful markup parser, it turned out to be a dead-end. But I &lt;a href=&quot;https://zverok.space/blog/2021-10-19-wikipedia.html&quot;&gt;already discussed that&lt;/a&gt; in the article which was a start of the project that hoped to solve it.)&lt;/p&gt;

&lt;p&gt;So, once on vacation at sea with my family, I had an idea that, at the moment, looked like moving forward in the chosen direction AND being more pragmatic.&lt;/p&gt;

&lt;div class=&quot;one-ukrainian-thing&quot;&gt;
  &lt;h3&gt;A postcard from Ukraine&lt;/h3&gt;

  &lt;p&gt;&lt;em&gt;&lt;strong&gt;Please stop here for a moment.&lt;/strong&gt; This is your regular mid-text reminder that I am a living person from Ukraine, and a bit of useful related information.&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One news item.&lt;/strong&gt; &lt;a href=&quot;https://twitter.com/United24media/status/1754771399988678689&quot;&gt;Rescuers have recovered the body of a two-month-old boy from under the rubble of a hotel in Kharkiv region. 3 women were hospitalized, including the mother of the killed child. Russia attacked the region with two S-300 missiles at night.&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One plea.&lt;/strong&gt; If you are in the US, please call your representative! The bill to provide help to Ukraine will be &lt;a href=&quot;https://twitter.com/OstapYarysh/status/1755653397275980241&quot;&gt;discussed in the Senate&lt;/a&gt; soon.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One fundraiser.&lt;/strong&gt; &lt;a href=&quot;https://twitter.com/ambulances4UA/status/1755648918698819692&quot;&gt;Ambulances for UA&lt;/a&gt;: “Fundraiser for the 6th vehicle has begun: the target is 15000€ and we already have 590€ in the bank!”&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;scaling-to-the-human-size&quot;&gt;Scaling to the human size&lt;/h2&gt;

&lt;p&gt;So, once on vacation at the sea with my family, I had an idea.&lt;/p&gt;

&lt;p&gt;That day, I looked at the weather forecast, saw a notification about a “4-ball storm,” and understood that I didn’t have a clue about whether it was big or small and what I could compare it to.&lt;/p&gt;

&lt;p&gt;And so the idea was born.&lt;/p&gt;

&lt;p&gt;I called it “humanescale.” The gist was just a library/code/tool that would be able to interpret numbers—any numbers—in a context that made them clearer for humans.&lt;/p&gt;

&lt;p&gt;Like, you tell it “4-ball storm,” and it provides you with an explanation. You tell it “6 feet,” and it tells you (a European not fluent in Imperial measures) how much it is in centimeters, but also that it is the height of a reasonably tall male and between two and three adult steps. You tell it “3 km,” and it explains that it is half an hour walk, and even tells (having enough information) “that’s approximately from your city’s center to that park.” You tell it, “no, 3 km &lt;em&gt;height&lt;/em&gt;,” and it helps to imagine that.&lt;/p&gt;

&lt;p&gt;And so on, not limited to distances (they were just for starters): it should’ve allowed you to imagine whether “5 tons of grain” would take a lot of space, or how long you could travel in a car having 100 liters of petrol, or even complex things like “was 100 yen in 1980’s Japan a lot of money or not” or “is 29 Celsius in March hot in Barcelona.”&lt;/p&gt;

&lt;p&gt;That was again about the “common sense knowledge” and “understanding the world.” I believed that having such a tool/API would be helpful in many situations, from reading books to understanding news, from planning travels to learning various professions.&lt;/p&gt;

&lt;p&gt;And, of course, I believed that I knew how to do it! (Well, again, “first steps and then vague direction,” but still.) Wikipedia, while properly crawled, would’ve been a perfect source of numbers from various domains; then, again, more specialized services could’ve been added (like OpenStreetMap to provide distance and area comparisons, WorldBank API to answer economic questions etc., etc.). Then, parsing a text of simple queries to understand which domain it belongs to seemed a relatively simple (and curious) task; and then, choosing good answers for the domain could be found— well, “somehow, we’ll see when we have more data.”&lt;/p&gt;

&lt;p&gt;For that “data” step, the former “reality” (in its new, smaller, and Python-based incarnation) would’ve been an underlying mechanism, but the “showcase” would be pragmatic. In my usual delusion of grandeur, I could’ve imagined it as a popular library, paid API service (“I smell startup!”—because everybody should have one), a mobile app, maybe an embedded service for prominent media—&lt;/p&gt;

&lt;p&gt;So, I, again, started with a parser for Wikipedia (because, of course, no Python parser was good enough for my goals!). This time, I used an HTML representation of wikipages with a quick hack I named &lt;a href=&quot;https://github.com/zverok/wikipedia_ql&quot;&gt;WikipediaQL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The initial release (of a draft hacked in 2 or 3 days!) suddenly drew substantial attention on GitHub and HackerNews. It kinda derailed the whole quest: I dived into developing that query language/library and writing about it. That year, I decided to write more in a blog, and “writing while building something” is a known strategy to entertain readers, and WikipediaQL provided a lot of immediate challenges, both head-scratching and solvable.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;At the same time, my meek attempts to use WikipediaQL for prototyping humanescale produced quite underwhelming results:&lt;/p&gt;

  &lt;p&gt;&lt;img src=&quot;/img/2024-02-09/image03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;That (unpublished) prototype used the data &lt;em&gt;effortlesly extracted&lt;/em&gt; from the “&lt;a href=&quot;https://en.wikipedia.org/wiki/Orders_of_magnitude_(length)&quot;&gt;Orders of magnitude (length)&lt;/a&gt;” page to “explain” some lengths in human terms. Wikipedia has a &lt;a href=&quot;https://en.wikipedia.org/wiki/Order_of_magnitude#See_also&quot;&gt;whole lot&lt;/a&gt; of such pages for different measures, so I had high initial hopes to solve a big part of the task in a uniform way!&lt;/p&gt;

  &lt;p&gt;I mean, it kind of “worked”, but the result were neither &lt;em&gt;interesting&lt;/em&gt; nor &lt;em&gt;helpful&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, putting humanescale aside “for now,” I proceeded with WikipediaQL for a few months (on and off) with a few releases and a few blog posts (&lt;a href=&quot;https://zverok.space/blog/2021-10-19-wikipedia.html&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://zverok.space/blog/2021-11-30-irregular1.html&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;https://zverok.space/blog/2022-01-27-wikipedia_ql-phrases.html&quot;&gt;3&lt;/a&gt;, &lt;a href=&quot;https://zverok.space/blog/2022-02-17-infoboxes-fail.html&quot;&gt;4&lt;/a&gt;). Truth be told, while I saw a positive effect of the “develop in public” approach on my thinking and design decisions (some things become apparent when you are trying to explain them and put in a clear narrative!), I never enjoyed much attention to the library or the posts after that initial outburst of stars and likes.&lt;/p&gt;

&lt;p&gt;It seemed—again—that I found the idea that was entertaining on the first demo, and then— nobody knew where to use it or even cared to consider. Even following somebody else’s journey (which I honestly tried to make entertaining) of solving some real-world problems (which I honestly believed were interesting) didn’t draw much of an audience.&lt;/p&gt;

&lt;p&gt;Anyway, I never learned whether following this path long enough (at least to robust version 1.0) would bring me to an interesting place in terms of the product or collaboration because, you know—&lt;/p&gt;

&lt;p&gt;Between my last published WikipediaQL article and the next time I was able to write into my blog, &lt;em&gt;something&lt;/em&gt; have happened:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2024-02-09/image04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Many months later, when I started to have a bit of free time at night to pursue my pre-invasion interests (or, one might say: “a bit of time I needed to occupy with something other than doomscrolling”), I was involved back in Ruby development, but that’s not the reason why I never returned to WikipediaQL or humanescale.&lt;/p&gt;

&lt;p&gt;The reason is that, of course, the whole approach was wrong.&lt;/p&gt;

&lt;h2 id=&quot;so-close-so-far&quot;&gt;So close, so far&lt;/h2&gt;

&lt;p&gt;In hindsight, I fell prey to the obvious fallacy: try to model an open domain with some classes and modules, hoping to “Pareto” my way into it.&lt;/p&gt;

&lt;p&gt;Of course, in my fourth decade of life and second decade of professional software development, I was not naive enough to try an “OOP 101” approach of creating a class per real-world entity and an attribute per its characteristic. I still believe some generic entity-modeling ideas from the latest versions of Reality to be worthwhile.&lt;/p&gt;

&lt;p&gt;On the other hand, I &lt;em&gt;was&lt;/em&gt; naive enough to believe that at least some approaches to generic real-world data &lt;em&gt;could&lt;/em&gt; be formalized. To that data, which broke every eleventh example after ten of them worked perfectly. To that messy, live, diverse, inconsistent, excessive, ever-changing data that has its best description in various “&lt;a href=&quot;https://github.com/kdeldycke/awesome-falsehood&quot;&gt;Falsehoods programmers believe about&lt;/a&gt;” lists.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I understand that many readers might be confused about how the grown-up man and supposedly a professional programmer even &lt;em&gt;started&lt;/em&gt; these megalomaniac projects in the way I describe it (and not the &lt;em&gt;proper&lt;/em&gt; way, which we are getting to).&lt;/p&gt;

&lt;p&gt;In my defense, I always focused rather on some pragmatic, or at least &lt;em&gt;shareable&lt;/em&gt; steps and ideas that would lead me somewhere in the general direction of the goal.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I actually still think that both &lt;a href=&quot;https://github.com/molybdenum-99/mediawiktory&quot;&gt;MediaWiktory&lt;/a&gt;-&lt;a href=&quot;https://github.com/molybdenum-99/infoboxer&quot;&gt;Infoboxer&lt;/a&gt; projects pair, and &lt;a href=&quot;https://github.com/zverok/wikipedia_ql&quot;&gt;WikipediaQL&lt;/a&gt; had some interesting solutions and usages. I even used some later prototypes of Reality for some moderately realistic tasks, like cleaning up data for some poetry festival and consulting Wikipedia to place the poets on map (and developed a &lt;a href=&quot;https://github.com/molybdenum-99/whatis&quot;&gt;fun small tool tool&lt;/a&gt; on the way).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even if neither of the projects is heavily used currently (and I seriously doubt it will change), it was years well spent. I developed an understanding of a lot of things about APIs, libraries, development practices— and the world I was trying to put into the API.&lt;/p&gt;

&lt;p&gt;I also gathered some deeper (if still shallow) understanding on the scale and scope of the problem of the “common sense data,” gathering it and making conclusions amout it. After years of hacking into APIs and parsing, I had a &lt;em&gt;very strong hunch&lt;/em&gt; that it should—and once would—be solved differently.&lt;/p&gt;

&lt;p&gt;And, of course, it was.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2024-02-09/image05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Soon after everybody started talking about ChatGPT and other LLMs (and even before I had a chance to play with it myself—I wasn’t too eager, to be honest, yet I followed the theory and examples as a curious bystander), I had a consistent internal explanation of why &lt;em&gt;this thingy&lt;/em&gt; was the right way to the goal that I looked for years (and all in the wrong direction).&lt;/p&gt;

&lt;p&gt;I want to share some of my layperson understanding of the matter (and the optics that allowed me to make peace with the whole machine learning domain, which I was extremely skeptical about some decades ago).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As it &lt;em&gt;happens to me all the freaking time&lt;/em&gt;, what was intended to be a moderately long blog post, once I start, turns into a series. So— Till the next part!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;…Which would still not give the final “revelations” (or rather musings of a man behind his middle age and still in love with all things programming), but will get closer to it by describing another area of interest I pursued for several years.&lt;/p&gt;

&lt;p&gt;In parallel with the “reality” mirage, I managed to lure myself into another “project of a lifetime” (yeah, there were two of them) related to natural language processing. And that, probably, was the big turning point for developing my current understanding of machine learning and its relationships with “classic” software development.&lt;/p&gt;

&lt;p&gt;You can subscribe to my &lt;a href=&quot;https://zverok.substack.com/&quot;&gt;Substack&lt;/a&gt; to catch the next part or follow me on &lt;a href=&quot;https://twitter.com/zverok&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading. Please support Ukraine with your donations and lobbying for military and humanitarian help. &lt;a href=&quot;https://war.ukraine.ua/&quot;&gt;Here&lt;/a&gt;, you’ll find a comprehensive information source and many links to state and private funds accepting donations.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you don’t have time to process it all, donating to &lt;a href=&quot;https://savelife.in.ua/en/&quot;&gt;Come Back Alive&lt;/a&gt; foundation is always a good choice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you’ve found the post (or some of my previous work) useful, I have a &lt;a href=&quot;https://www.buymeacoffee.com/zverok&quot;&gt;Buy Me A Coffee account&lt;/a&gt; now. Till the end of the war, 100% of payments to it (if any) would be spent on my or my brothers’ necessary equipment or sent to one of the funds above.&lt;/strong&gt;&lt;/p&gt;

&lt;iframe src=&quot;https://zverok.substack.com/embed&quot; width=&quot;480&quot; height=&quot;320&quot; style=&quot;border:1px solid #EEE; background:white;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;As far as I can remember, &lt;a href=&quot;https://blog.wolfram.com/2014/03/25/injecting-computation-everywhere-a-sxsw-update/&quot;&gt;this long article&lt;/a&gt; with many demonstrations of the idea was what struck me first. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;After some Reddit comments I understood that this phrase (which in its previous version also had an ironic “&lt;em&gt;occasionally&lt;/em&gt; writes in programming languages”) is not clear enough, making an impression of a person who writes books and sometimes codes. I am a professional developer with a PhD in CS and 20+ years of the full-time software development experience, which mostly writes code, yet &lt;em&gt;perceives&lt;/em&gt; coding as writing. (I do write fiction/poetry sometimes, but it is a side activity in which I am not that successful.) &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Maybe a bit early for a mid-life crisis by today’s standards, but I always was an early bloomer! &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 09 Feb 2024 00:00:00 +0000</pubDate>
        <link>https://zverok.space/blog/2024-02-09-gpt.html</link>
        <guid isPermaLink="true">https://zverok.space/blog/2024-02-09-gpt.html</guid>
        
        
        <category>philosophy</category>
        
        <category>ai</category>
        
        <category>ruby</category>
        
        <category>python</category>
        
        <category>reality</category>
        
      </item>
    
      <item>
        <title>The end of “Useless Ruby sugar”: On intuitions and evolutions</title>
        <description>&lt;p&gt;At the end of September, I returned to— more peaceful parts of Ukraine, let’s say. And a Reddit discussion inspired me to start writing what I expected to be a short blog post.&lt;/p&gt;

&lt;p&gt;The discussion was about new Ruby syntax elements from recent versions, and, as usual, a fair share of participants expressed some variety of displeasure. I don’t care much for “I like it”/”I don’t like it” kind of discussion, yet I frequently find myself hooked by “I don’t see any explanation why this might be a good idea” or “This is absolutely against everything I love in Ruby.”&lt;/p&gt;

&lt;p&gt;While this kind of statement can be—and frequently is—just another way to say “I don’t like it,” my mind perceives it as a challenge: can the reasoning behind the change be understood and explained? What was the design space of solving the problem?&lt;/p&gt;

&lt;p&gt;That’s how the “Useless Ruby sugar” was born: as an attempt to look for a consistent explanation of the changes in the syntax and to analyze whether the changes have deep consequences.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Syntax sugar” is another liberally used term to mark elements of syntax in a derogatory way, implying that its only effect is saving a few keystrokes at a cost of complicating the language’s logic. The named was chosen as a sign of irony, but I should regretfully acknowledge that some readers took it at a face value (sometimes cheering to “finally saying the truth,” sometimes arguing).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;are-you-done-yet&quot;&gt;Are you done yet?&lt;/h2&gt;

&lt;p&gt;When I started to write “That useless Ruby sugar,” I imagined it as a short blog post made of concise sections (a paragraph or two each), dedicated to several latest language changes and investigating where they came from, how they were designed, and how they change the perception of the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The intention was not to “defend” some particular feature or the language as a whole.&lt;/strong&gt; I wanted to honestly share my &lt;em&gt;optics&lt;/em&gt;, my way of looking at means of expression and integrating them into my mental model.&lt;/p&gt;

&lt;p&gt;I decided that each of the chosen syntax features (anonymous block parameters, pattern matching, argument forwarding, and so on) can be covered from the same angles, from reasons of its introduction to consequences and changes in code style, and compared to similar designs in other programming languages.&lt;/p&gt;

&lt;p&gt;A “small post” grew into “a very large post,” then into a series of posts published over two months (one of the topics—pattern matching—fractally grew into &lt;a href=&quot;https://zverok.space/blog/2023-10-20-syntax-sugar2-pattern-matching.html&quot;&gt;three&lt;/a&gt; &lt;a href=&quot;https://zverok.space/blog/2023-10-27-syntax-sugar2-pattern-matching-cont.html&quot;&gt;consecutive&lt;/a&gt; &lt;a href=&quot;https://zverok.space/blog/2023-11-03-syntax-sugar2-pattern-matching-fin.html&quot;&gt;posts&lt;/a&gt; on itself— and, trust me, I am praying that the current text wouldn’t turn out too long for a singular final article!)&lt;/p&gt;

&lt;p&gt;&lt;big&gt;Anyway, the series is now finished. The &lt;strong&gt;&lt;a href=&quot;https://zverok.space/blog/2023-10-02-syntax-sugar.html&quot;&gt;introductory post&lt;/a&gt;&lt;/strong&gt; explains the thinking behind the project in more detail and ends with a table of contents for the entire series.&lt;/big&gt;&lt;/p&gt;

&lt;h2 id=&quot;so-what&quot;&gt;So what?&lt;/h2&gt;

&lt;p&gt;Despite the appalling underestimation of the amount of writing which cost me some two months of weekly posts, I kinda enjoyed doing it. And it seems to have found its share of grateful and attentive readers (thank you!). For me, it turned out not to be about particular language features. And, to some extent, not even about the particular language (which, though, became a load-bearing pillar of the argument).&lt;/p&gt;

&lt;p&gt;I started with a slightly expanded version of “rules of thumb” for understanding, guessing, and memorizing language behaviors I frequently share with colleagues. Eventually, the texts grew into some &lt;strong&gt;“thought framework”: the way of looking at the inevitable change of a living language&lt;/strong&gt;—its cause and the design space of possible implementations, its consequences, and effects.&lt;/p&gt;

&lt;p&gt;The essential property of this framework is considering the programming language as a tool for writing and reading first and foremost. I always attempt to see the driving forces behind its evolution as an intention to formulate the intention better.&lt;/p&gt;

&lt;p&gt;It is obviously not the only way of looking at programming languages, but it seems to be interesting and insightful enough for the series to have some modest success and a healthy dose of comments. The individual articles frequently caused interesting cross-language discussions, where most participants were not native to Ruby&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;While amounting to a small book already, the series has a pretty narrow premise: just one way of looking at just a few changes of just one language in a vast universe of them. Still, I think two of the main “driving forces” are important and relevant not only for Ruby.&lt;/p&gt;

&lt;p&gt;The first, which I think is common for many mainstream languages and styles, is the &lt;strong&gt;tectonic shift from the “classic OO” style&lt;/strong&gt; of structuring programs (and envisioning them!) to the “small immutable objects + functional algorithms” style. Obviously it is not the most breaking news (entire languages of Go and Rust that can already be considered mainstream are built on foundations that are quite far from the “classic OO”); it is still interesting to see how the established languages adapt.&lt;/p&gt;

&lt;p&gt;The second force of the change is more perpetual: it is a &lt;strong&gt;natural expansion of language’s—any language’s—thesaurus&lt;/strong&gt; in response to more and more things previously non-trivial and complicated becoming everyday ones. Concepts that used to require explanation and education become something that you understand from a single mention and want to be expressed in one word. Some decades ago, not every programming language could handle strings properly (Unicode strings, even less so). Today, things like lambdas, sum types, or pattern matching are almost must-haves for expressing everyday thoughts. The baseline shifts constantly.&lt;/p&gt;

&lt;p&gt;A lot of changes I discussed in the context of Ruby are more universal: most widely used languages continue to adjust as thinking tools to the changing landscape of &lt;em&gt;what we are thinking about&lt;/em&gt;. It seems as universal as a pushback from some part of every language’s community: a pushback from those whose thought process is performed at other layers and who believe that the fabric of the language should stay stable to not “distract” from the materialization of already formed thoughts with the new features.&lt;/p&gt;

&lt;p&gt;And every language’s evolution is probably a compromise between those two forces.&lt;/p&gt;

&lt;h2 id=&quot;but-what-about-ruby&quot;&gt;But what about Ruby?&lt;/h2&gt;

&lt;p&gt;While I hope that some of my observations and conclusions in the series were curious for a broader audience, I am still thinking and writing in and about Ruby.&lt;/p&gt;

&lt;p&gt;One may say that Ruby is my “lens” for looking at problems, both on the pragmatic layers (writing code to understand something) and on the meta-/philosophical layer of looking at how the language adjusts to the changing world to understand the world better.&lt;/p&gt;

&lt;p&gt;The important thing about Ruby, which is its curse and blessing, is &lt;strong&gt;it isn’t an interesting language&lt;/strong&gt;. There is no particular “shtick” or wittily-named concept everybody tries to imitate in other languages (well, I think it was part of Ruby’s doing to introduce the functional iterators like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; in the mainstream, but they weren’t invented here).&lt;/p&gt;

&lt;p&gt;I believe the premise of the language is something along the lines of “take the modern ideas and put them together with a reasonably minimal number of base concepts, as clearly and expressively as possible without becoming esoteric.”&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And I think the reputation of being “weird and whimsical” that the language earned in the 2000s, both amongst its fans and haters, tells more about the state of the industry at that point. An industry where the desire to write in one line what “should’ve” required a class and a package and several methods and initializations and type definitions— when that desire alone made a developer look “unserious.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In many aspects, Ruby (with its Smalltalk-inspired internal “almost everything is just objects exchanging messages”) achieved remarkable clarity and consistency from a very small set of core concepts—yet not as small to become a “language constructor” instead of a language.&lt;/p&gt;

&lt;p&gt;Through the years, it managed to continue staying &lt;em&gt;reasonably modern&lt;/em&gt; without losing the internal consistency and discoverability (though, of course, some Rubyists would have strong dissenting opinions: I think one of the commentators of the series said something along the lines of “I love Ruby but nothing good happened since 2.0”—with 2.0 being ten years old).&lt;/p&gt;

&lt;p&gt;Of course, not all of the language’s initial design decisions and accumulated weight is “optimal” or provably best.&lt;/p&gt;

&lt;p&gt;I can list a lot of things I am personally not a big fan of. An early draft of this article had a planned section for some of them— But I recently developed an irrational fear of fractally expanding articles! Though, to name a few:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;textual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require&lt;/code&gt;s and module system could’ve been much cleaner; as an indirect result, the Ruby community eventually adopted the “autoloading” concept, and while the &lt;a href=&quot;https://github.com/fxn/zeitwerk&quot;&gt;current autoloading solution&lt;/a&gt; is a very well-engineered one, I personally don’t believe in the approach;&lt;/li&gt;
  &lt;li&gt;while “code blocks” aka &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Proc&lt;/code&gt; were a witty way to introduce higher-level functions, the current situation with “callable objects” in Ruby (non-fist-class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Method&lt;/code&gt; objects, semi-convention of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; method handling) makes it less powerful than it might’ve been;&lt;/li&gt;
  &lt;li&gt;the uneven and confusingly supported standard library (my favorite example is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time&lt;/code&gt; types situation, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time&lt;/code&gt; being a core object, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt; being part of the standard library mostly dedicated to scientific calculations and many small discrepancies between them);&lt;/li&gt;
  &lt;li&gt;(I can continue).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best things are still a reasonably small core of concepts, with the development team working hard to “factorize” any new feature into those concepts, and the flexible syntax that is instrumental for making the core small (like an ability to call a method without parentheses makes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.bar&lt;/code&gt; attribute-like syntax possible and removing a need to have separate “method” and “property”/”getter” concepts).&lt;/p&gt;

&lt;p&gt;Those characteristics make Ruby—still—an incredible fit for developing &lt;em&gt;domain-specific thesauri&lt;/em&gt;: new, task-specific parts of the language that would integrate naturally with its rest and would make “thinking in the domain” much easier. I’d distinguish that from a concept of a “domain-specific language,” which frequently implies a &lt;em&gt;new&lt;/em&gt; system of expression, with its logic not necessarily aligned with the implementation language.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I think Rails was/is a great demonstration of how natural Ruby is in development of that “domain-specific thesaurus.” I just wish sometimes that it would be taken as an example/inspiration for development of many others. Instead, Rails became &lt;em&gt;the&lt;/em&gt; Ruby shtick, and its popularity at some point put Ruby in the domain of “development of support of big systems,” with its reputation and evolution being severely affected by those new circumstances.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Still, for me, Ruby stays a great &lt;em&gt;modeling clay&lt;/em&gt; for experimenting with things and investigating new ideas.&lt;/p&gt;

&lt;div class=&quot;one-ukrainian-thing&quot;&gt;
  &lt;h3&gt;A postcard from Ukraine&lt;/h3&gt;

  &lt;p&gt;&lt;em&gt;&lt;strong&gt;Please stop here for a moment.&lt;/strong&gt; This is your regular mid-text reminder that I am a living person from Ukraine, and a bit of useful related information.&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;On the news.&lt;/strong&gt; Usually, I put “one news item” here. Yet, honestly. It is hard to choose one that happened since my &lt;a href=&quot;https://zverok.space/blog/2023-12-28-advent-of-changelog-fin.html&quot;&gt;last post&lt;/a&gt;. We had a lot happening. A prominent young poet &lt;a href=&quot;https://twitter.com/PenUkraine/status/1744075793855029721&quot;&gt;was killed&lt;/a&gt; on the front line (&lt;a href=&quot;https://twitter.com/zverok/status/1744416917392179531&quot;&gt;here, I translated&lt;/a&gt; some of his poems).  Massive missile/drone &lt;a href=&quot;https://twitter.com/United24media/status/1742224719011594673&quot;&gt;bombardment&lt;/a&gt; around the New Year, including in my home city (which has continued to be regularly shelled since; say, last week, a missile &lt;a href=&quot;https://twitter.com/FeministsUa/status/1747695174602420381&quot;&gt;hit&lt;/a&gt; a private gynecological clinic, and the week before that—a &lt;a href=&quot;https://twitter.com/United24media/status/1745340529699696643&quot;&gt;hotel&lt;/a&gt; with foreign journalists). That’s not &lt;a href=&quot;https://twitter.com/den_kazansky/status/1743684511320133876&quot;&gt;even&lt;/a&gt; &lt;a href=&quot;https://twitter.com/United24media/status/1747896573990781438&quot;&gt;mentioning&lt;/a&gt; &lt;a href=&quot;https://twitter.com/United24media/status/1748633966255686091&quot;&gt;everyday&lt;/a&gt; &lt;a href=&quot;https://twitter.com/United24media/status/1748680827620270192&quot;&gt;attacks&lt;/a&gt; on civilians in the smaller cities nearer to the front lines. I wonder how much of this gets in the mainstream media of my reader’s countries.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One piece of context.&lt;/strong&gt; Today (Jan 20, the day I am finishing this post) is &lt;a href=&quot;https://twitter.com/DefenceU/status/1748647821803245895&quot;&gt;Memorial Day of Defenders of Donetsk Airport&lt;/a&gt;. For 242 days, they defended the airport, which disrupted Russia’s plan to transfer forces through it and prevented more Ukrainian territory from being lost in 2014-2015. Yeah, Russia was waging its war then, already.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One plea.&lt;/strong&gt; If you are in the US, please call your representative! In DC, you can also join the &lt;a href=&quot;https://twitter.com/ukrainerallydc&quot;&gt;Ukraine Rally&lt;/a&gt;, even if for a small amount of time.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;One fundraiser.&lt;/strong&gt; You can donate to the &lt;a href=&quot;https://www.ambulanssi.org/en&quot;&gt;Ambulances for UA&lt;/a&gt; initiative, which buys ambulance vehicles to serve on evacuation missions near the front lines.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;there-is-always-more&quot;&gt;There is always more&lt;/h2&gt;

&lt;p&gt;While the series, as it was invented, is finished, there are a lot of interesting things that are left to think about, at least for me. Maybe some of those things would turn into future articles!&lt;/p&gt;

&lt;p&gt;One thinking direction is diving deeper into the “code as readable text” consequences: I think I have some interesting angles on the (arguably aged and trivial) comparison—from the “software project as a magazine” metaphor (slightly touched in the &lt;a href=&quot;https://zverok.space/blog/2023-12-01-syntax-sugar5-endless-methods.html&quot;&gt;last&lt;/a&gt; post) to what does it mean to think about a “page of code” (repeated motive of the series), or what would be a modern take on the old idea of “literate programming” with our current knowledge.&lt;/p&gt;

&lt;p&gt;Another promising direction is juxtaposing design decisions made by several different programming languages in the same area: after doing it for those few syntax features I covered, I now believe it is a powerful tool for understanding some programming concepts, their design space, and the choices and sacrifices some particular language makes to adopt them.&lt;/p&gt;

&lt;p&gt;And in general, I think a lot about the concept of “language intuitions” and other semi-conscious forces that make us consider some code “good” or “bad,” choose approaches and methods of solving problems, and change our views over time. Trying to find out why we have those intuitions and persuasions, as well as expose, challenge, and formalize them, seems like an interesting topic. (Though, arguably, less “marketable” than “just write software my way and you’ll be good, period.”)&lt;/p&gt;

&lt;p&gt;After all, it is not a language study; it is the study of how we think and write. Or at least that’s what my poet’s mind tells me.&lt;/p&gt;

&lt;h2 id=&quot;ps-what-about-a-book&quot;&gt;P.S.: What about a book?&lt;/h2&gt;

&lt;p&gt;“Intuition” is an important word for me in the context of programming language understanding (as if somebody hasn’t noticed yet!). As I stated in the intro article of the series:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I believe a well-designed, consistent language imposes a lot of implicit &lt;em&gt;intuitive&lt;/em&gt; knowledge about “how things are typically done, what this combination of elements might mean, what this particular name is related to,” and alike. Acquiring those intuitions creates &lt;em&gt;fluency&lt;/em&gt; in reading and writing the code that follows them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Naturally, “Ruby Intuitions” became the name of the book I planned to write in 2022.&lt;/p&gt;

&lt;p&gt;Writing the book on the language that tries to expose this implicit knowledge of Ruby and reflect upon it seemed like a good idea. Still seems, actually. Yet the idea of the book became something akin to my “big white whale”: something that I need a lot of luck, time, focus, and experience to work on, and well— it looks like the time for it hasn’t come yet!&lt;/p&gt;

&lt;p&gt;But, while working on the series of articles, I had an idea for another, simpler (hopefully!) book, which would allow me to gather into one text years of my work on understanding the language, documenting it, and observing its change.&lt;/p&gt;

&lt;p&gt;The title I came up with was just “Ruby Evolution,” and currently, in my head, it looks like a reasonable cross-over between my &lt;a href=&quot;https://rubyreferences.github.io/rubychanges/&quot;&gt;Ruby Changes&lt;/a&gt; site and essays like this “Ruby Sugar” series, taken over the span of Ruby’s lifetime: an orderly discussion of the most notable changes by versions/topics, the reasons behind them, and a reflection on how it changed the language.&lt;/p&gt;

&lt;p&gt;I have a hope that a book like this might be of interest both for Rubyists and for those from other language communities, in a general “history of ideas” context.&lt;/p&gt;

&lt;p&gt;Currently, I am in the early stages of playing with the idea and drafting a table of contents. But I wonder if there would be some interest in such a book?&lt;/p&gt;

&lt;p&gt;In the meantime, I’ll be writing on other topics that will catch my curiosity, more or less related to Ruby, or at least writing software in general.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;You can subscribe to my &lt;a href=&quot;https://zverok.substack.com/&quot;&gt;Substack&lt;/a&gt;, or follow me on &lt;a href=&quot;https://twitter.com/zverok&quot;&gt;Twitter&lt;/a&gt;.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading. Please support Ukraine with your donations and lobbying for military and humanitarian help. &lt;a href=&quot;https://war.ukraine.ua/&quot;&gt;Here&lt;/a&gt;, you’ll find a comprehensive information source and many links to state and private funds accepting donations.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you don’t have time to process it all, donating to &lt;a href=&quot;https://savelife.in.ua/en/&quot;&gt;Come Back Alive&lt;/a&gt; foundation is always a good choice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you’ve found the post (or some of my previous work) useful, I have a &lt;a href=&quot;https://www.buymeacoffee.com/zverok&quot;&gt;Buy Me A Coffee account&lt;/a&gt; now. Till the end of the war, 100% of payments to it (if any) would be spent on my or my brothers’ necessary equipment or sent to one of the funds above.&lt;/strong&gt;&lt;/p&gt;

&lt;iframe src=&quot;https://zverok.substack.com/embed&quot; width=&quot;480&quot; height=&quot;320&quot; style=&quot;border:1px solid #EEE; background:white;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;In all honesty, not all of the discussion was healthy. Well, talking about the way of thinking and expressing thought is probably destined for some absolutely hateful comments about Ruby (from outside the community) or particular new features (from inside of it). Probably, causing strong emotions is better than causing none—though, I can’t say I really enjoyed the experience (but, well, as a Ukrainian, I can take a lot). My own strong emotions were more triggered by people responding to their idea of the article (or its title) while completely ignoring the actual reasoning it presented. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
        <link>https://zverok.space/blog/2024-01-23-syntax-sugar-fin.html</link>
        <guid isPermaLink="true">https://zverok.space/blog/2024-01-23-syntax-sugar-fin.html</guid>
        
        
        <category>ruby</category>
        
        <category>philosophy</category>
        
      </item>
    
  </channel>
</rss>
