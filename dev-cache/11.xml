<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-1777990983847811806</id><updated>2024-11-03T15:12:51.770-08:00</updated><title type='text'>Haskell for all</title><subtitle type='html'></subtitle><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='https://www.haskellforall.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/'/><link rel='hub' href='http://pubsubhubbub.appspot.com/'/><link rel='next' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default?start-index=26&amp;max-results=25'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>187</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-6277361455932329681</id><published>2024-08-29T06:27:00.000-07:00</published><updated>2024-08-29T06:49:51.048-07:00</updated><title type='text'>Firewall rules: not as secure as you think</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;Firewall rules: not as secure as you think&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;A post outlining tricks for firewall privilege escalation&quot; /&gt;
  &lt;title&gt;Firewall rules: not as secure as you think&lt;/title&gt;
  &lt;style&gt;
    html {
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 12px;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      html {
        background-color: white;
      }
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    svg {
      height: auto;
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, Consolas, &#39;Lucida Console&#39;, monospace;
      font-size: 85%;
      margin: 0;
      hyphens: manual;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    /* The extra [class] is a hack that increases specificity enough to
       override a similar rule in reveal.js */
    ul.task-list[class]{list-style: none;}
    ul.task-list li input[type=&quot;checkbox&quot;] {
      font-size: inherit;
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
    /* CSS for syntax highlighting */
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { color: #008000; } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { color: #008000; font-weight: bold; } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;This post introduces some tricks for jailbreaking hosts behind
“secure” enterprise firewalls in order to enable arbitrary inbound and
outbound requests over any protocol. You’ll probably find the tricks
outlined in the post useful if you need to deploy software in a hostile
networking environment.&lt;/p&gt;
&lt;p&gt;The motivation for these tricks is that you might be a vendor that
sells software that runs in a customer’s datacenter (a.k.a. &lt;a
href=&quot;https://en.wikipedia.org/wiki/On-premises_software&quot;&gt;on-premises
software&lt;/a&gt;), so your software has to run inside of a restricted
network environment. You (the vendor) can ask the customer to open their
firewall for your software to communicate with the outside world
(e.g. your own datacenter or third party services), but customers will
usually be reluctant to open their firewall more than necessary.&lt;/p&gt;
&lt;p&gt;For example, you might want to &lt;code&gt;ssh&lt;/code&gt; into your host so
that you can service, maintain, or upgrade the host, but if you ask the
customer to open their firewall to let you &lt;code&gt;ssh&lt;/code&gt; in they’ll
usually push back on or outright reject the request. Moreover, this
isn’t one of those situations where you can just ask for forgiveness
instead of permission because you can’t begin to do anything without
explicitly requesting &lt;em&gt;some&lt;/em&gt; sort of firewall change on their
part.&lt;/p&gt;
&lt;p&gt;So I’m about to teach you a bunch of tricks for efficiently tunneling
whatever you want over seemingly innocuous openings in a customer’s
firewall. These tricks will culminate with the most cursed trick of all,
which is tunneling &lt;strong&gt;inbound SSH&lt;/strong&gt; connections inside of
&lt;strong&gt;outbound HTTPS&lt;/strong&gt; requests. This will grant you full
command-line access to your on-premises hosts using the most benign
firewall permission that a customer can grant. Moreover, this post is
accompanied by a &lt;a
href=&quot;https://github.com/Gabriella439/holepunch&quot;&gt;repository named
&lt;code&gt;holepunch&lt;/code&gt; containing NixOS modules automating this ultimate
trick&lt;/a&gt; which you can either use directly or consult as a working
proof-of-concept for how the trick works.&lt;/p&gt;
&lt;h4 id=&quot;overview&quot;&gt;Overview&lt;/h4&gt;
&lt;p&gt;Most of the tricks outlined in this post assume that you control the
hosts on both ends of the network request. In other words, we’re going
to assume that there is some external host in your datacenter and some
internal host in the customer’s datacenter and you control the software
running on both hosts.&lt;/p&gt;
&lt;p&gt;There are four tricks in our arsenal that we’re going to use to
jailbreak internal hosts behind a restrictive customer firewall:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Proxy_server&quot;&gt;forward
proxies&lt;/a&gt; (e.g. &lt;code&gt;squid&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a
href=&quot;https://en.wikipedia.org/wiki/TLS_termination_proxy&quot;&gt;TLS-terminating
reverse proxies&lt;/a&gt; (e.g. &lt;code&gt;nginx&lt;/code&gt; or
&lt;code&gt;stunnel&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Reverse_connection&quot;&gt;reverse
tunnels&lt;/a&gt; (e.g. &lt;code&gt;ssh -R&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a
href=&quot;https://github.com/bryanpkc/corkscrew&quot;&gt;&lt;code&gt;corkscrew&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you master these four tools you will typically be able to do
basically anything you want using the slimmest of firewall
permissions.&lt;/p&gt;
&lt;p&gt;You might also want to read another post of mine: &lt;a
href=&quot;https://www.haskellforall.com/2021/09/forward-and-reverse-proxies-explained.html&quot;&gt;Forward
and reverse proxies explained&lt;/a&gt;. It’s not required reading for this
post, but you might find it helpful or interesting if you like this
post.&lt;/p&gt;
&lt;h4 id=&quot;proxies&quot;&gt;Proxies&lt;/h4&gt;
&lt;p&gt;We’re going to start with proxies since that’s the easiest thing to
explain which requires no other conceptual dependencies.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;proxy&lt;/strong&gt; is a host that can connect to other hosts on
a client’s behalf (instead of the client making a direct connection to
those other hosts). We will call these other hosts “upstream hosts”.&lt;/p&gt;
&lt;p&gt;One of the most common tricks when jailbreaking an internal host (in
the customer’s datacenter) is to create an external host (in your
datacenter) that is a &lt;strong&gt;proxy&lt;/strong&gt;. This is really effective
because &lt;em&gt;the customer has no control over traffic between the proxy
and upstream hosts&lt;/em&gt;. The customer’s firewall can only see, manage,
and intercept traffic between the internal host and the proxy, but
everything else is invisible to them.&lt;/p&gt;
&lt;p&gt;There are two types of proxies, though: forward proxies and reverse
proxies. Both types of proxies are going to come in handy for
jailbreaking our internal host.&lt;/p&gt;
&lt;h4 id=&quot;forward-proxy&quot;&gt;Forward proxy&lt;/h4&gt;
&lt;p&gt;A &lt;strong&gt;forward proxy&lt;/strong&gt; is a proxy that lets the client
decide which upstream host to connect to. In our case, the “client” is
the internal host that resides in the customer datacenter that is trying
to bypass the firewall.&lt;/p&gt;
&lt;p&gt;Forward proxies come in handy when the customer restricts which hosts
that you’re allowed to connect to. For example, suppose that your
external host’s address is &lt;code&gt;external.example.com&lt;/code&gt; and your
internal hosts’s address is &lt;code&gt;internal.example.com&lt;/code&gt;. Your
customer might have a firewall rule that prevents
&lt;code&gt;internal.example.com&lt;/code&gt; from connecting to any host other than
&lt;code&gt;external.example.com&lt;/code&gt;. The intention here is to prevent your
machine from connecting to other (potentially malicious) machines.
However, this firewall rule is quite easy for a vendor to subvert.&lt;/p&gt;
&lt;p&gt;All you have to do is host a forward proxy at
&lt;code&gt;external.example.com&lt;/code&gt; and then any time
&lt;code&gt;internal.example.com&lt;/code&gt; wants to connect to any other domain
(e.g. &lt;code&gt;google.com&lt;/code&gt;) it can just route the request through the
forward proxy hosted at &lt;code&gt;external.example.com&lt;/code&gt;. For example,
&lt;code&gt;squid&lt;/code&gt; is one example of a forward proxy that you can use
for this purpose, and you could configure it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl internal src ${SUBNET OF YOUR INTERNAL SERVER(S)}

http_access allow internal
http_access deny all&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… and then &lt;code&gt;squid&lt;/code&gt; will let any program on
&lt;code&gt;internal.example.com&lt;/code&gt; connect to any host reachable from
&lt;code&gt;external.example.com&lt;/code&gt; so long as the program configured
&lt;code&gt;http://external.example.com:3128&lt;/code&gt; as the forward proxy. For
example, you’d be able to run this command on
&lt;code&gt;internal.example.com&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; curl &lt;span class=&quot;at&quot;&gt;--proxy&lt;/span&gt; http://external.example.com:3128 https://google.com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and the request would succeed despite the firewall because from the
customer’s point of view they can’t tell that you’re using a forward
proxy. Or can they?&lt;/p&gt;
&lt;h4 id=&quot;reverse-proxy&quot;&gt;Reverse proxy&lt;/h4&gt;
&lt;p&gt;Well, actually the customer &lt;em&gt;can&lt;/em&gt; tell that you’re doing
something suspicious. The connection to &lt;code&gt;squid&lt;/code&gt; isn’t
encrypted (note that the scheme for our forward proxy URI is
&lt;code&gt;http&lt;/code&gt; and not &lt;code&gt;https&lt;/code&gt;), and most modern firewalls
will be smart enough to monitor unencrypted traffic and notice that
you’re trying to evade the firewall by using a forward proxy (and they
will typically block your connection if you try this). Oops!&lt;/p&gt;
&lt;p&gt;Fortunately, there’s a very easy way to evade this: encrypt the
traffic to the proxy! There are quite a few ways to do this, but the
most common approach is to put a “TLS-terminating reverse proxy” in
front of any service that needs to be encrypted.&lt;/p&gt;
&lt;p&gt;So what’s a “reverse proxy”? A &lt;strong&gt;reverse proxy&lt;/strong&gt; is a
proxy where the proxy decides which upstream host to connect to (instead
of the client deciding). A &lt;strong&gt;TLS-terminating&lt;/strong&gt; reverse
proxy is one whose sole purpose is to provide an encrypted endpoint that
clients can connect to and then it forwards unencrypted traffic to some
(fixed) upstream endpoint (e.g. &lt;code&gt;squid&lt;/code&gt; running on
&lt;code&gt;external.example.com:3128&lt;/code&gt; in this example).&lt;/p&gt;
&lt;p&gt;There are quite a few services created for doing this sort of thing,
but the three I’ve personally used the most throughout my career
are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nginx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;haproxy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stunnel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this particular case, I actually will be using
&lt;code&gt;stunnel&lt;/code&gt; to keep things as simple as possible
(&lt;code&gt;nginx&lt;/code&gt; and &lt;code&gt;haproxy&lt;/code&gt; require a bit more
configuration to get working for this).&lt;/p&gt;
&lt;p&gt;You would run &lt;code&gt;stunnel&lt;/code&gt; on
&lt;code&gt;external.example.com&lt;/code&gt; with a configuration that would look
something like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre
class=&quot;sourceCode toml&quot;&gt;&lt;code class=&quot;sourceCode toml&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;[default]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;accept&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;443&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;er&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;3128&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;cert&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;er&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;er&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;er&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;your-certificate.pem&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and now connections to &lt;code&gt;https://external.example.com&lt;/code&gt;
are encrypted and handled by &lt;code&gt;stunnel&lt;/code&gt;, which will decrypt
the traffic and route those requests to &lt;code&gt;squid&lt;/code&gt; running on
port &lt;code&gt;3128&lt;/code&gt; of the same machine.&lt;/p&gt;
&lt;p&gt;In order for this to work you’re going to need a valid certificate
for &lt;code&gt;external.example.com&lt;/code&gt;, which you can obtain for free
using &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt;. Then you
staple the certificate public key and private key to generate the final
PEM file that you reference in the above &lt;code&gt;stunnel&lt;/code&gt;
configuration.&lt;/p&gt;
&lt;p&gt;So if you’ve gotten this far your server can now access any publicly
reachable address despite the customer’s firewall restriction. Moreover,
the customer can no longer detect that anything is amiss because all of
your connections to the outside world will appear to the customer’s
firewall as encrypted HTTPS connections to
&lt;code&gt;external.example.com:443&lt;/code&gt;, which is an extremely innocuous
type of of connection.&lt;/p&gt;
&lt;h4 id=&quot;reverse-tunnel&quot;&gt;Reverse tunnel&lt;/h4&gt;
&lt;p&gt;We’re only getting started, though! By this point we can make
whatever outbound connections we want, but &lt;em&gt;WHAT ABOUT INBOUND
CONNECTIONS&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;As it turns out, there is a trick known as a &lt;strong&gt;reverse
tunnel&lt;/strong&gt; which lets you tunnel inbound connections over outbound
connections. Most reverse tunnels exploit two properties of TCP
connections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP connections may be long-lived (sometimes very long-lived)&lt;/li&gt;
&lt;li&gt;TCP connections must necessarily support network traffic in both
directions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, in the common case a lot of TCP connections are short-lived. For
example, when you open https://google.com in your browser that is an
HTTPS request which is layered on top of a TCP connection. The HTTP
request message is data sent in one direction over the TCP connection
and the HTTP response message is data sent in the other direction over
the TCP connection and then the TCP connection is closed.&lt;/p&gt;
&lt;p&gt;But TCP is much more powerful than that and reverse tunnels exploit
that latent protocol power. To illustrate how that works I’ll use the
most widely known type of reverse tunnel: the SSH reverse tunnel.&lt;/p&gt;
&lt;p&gt;You typically create an SSH reverse tunnel by running a command like
this from the internal machine
(e.g. &lt;code&gt;internal.example.com&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; ssh &lt;span class=&quot;at&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${EXTERNAL_PORT}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;:localhost:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${INTERNAL_PORT}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;-N&lt;/span&gt; external.example.com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In an SSH reverse tunnel, the internal machine
(e.g. &lt;code&gt;internal.example.com&lt;/code&gt;) initiates an outbound TCP
request to the SSH daemon (&lt;code&gt;sshd&lt;/code&gt;) listening on the external
machine (e.g. &lt;code&gt;external.example.com&lt;/code&gt;). When &lt;code&gt;sshd&lt;/code&gt;
receives this TCP request it &lt;em&gt;keeps the TCP connection alive&lt;/em&gt; and
then listens for inbound requests on &lt;code&gt;EXTERNAL_PORT&lt;/code&gt; of the
external machine. &lt;code&gt;sshd&lt;/code&gt; forward all requests received on
that port through the still-alive TCP connection back to the
&lt;code&gt;INTERNAL_PORT&lt;/code&gt; on the internal machine. This works fine
because TCP connections permit arbitrary data flow both ways and the
protocol does not care if the usual request/response flow is suddenly
reversed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In fact, an SSH reverse tunnel doesn’t just let you make inbound
connections to the internal machine; it lets you make inbound
connections to &lt;strong&gt;any machine reachable from the internal
machine&lt;/strong&gt; (e.g. other machines inside the customer’s datacenter).
However, those kinds of connections to other internal hosts can be
noticed and blocked by the customer’s firewall.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From the point of view of the customer’s firewall, our internal
machine has just made a single long-lived &lt;strong&gt;outbound&lt;/strong&gt;
connection to &lt;code&gt;external.example.com&lt;/code&gt; and they cannot easily
tell that the &lt;em&gt;real&lt;/em&gt; requests are coming in the other direction
(&lt;strong&gt;inbound&lt;/strong&gt;) because those requests are being tunneled
inside of the outbound request.&lt;/p&gt;
&lt;p&gt;However, this is not foolproof, for two reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A customer’s firewall can notice (and ban) a long-lived
connection&lt;/p&gt;
&lt;p&gt;I believe it is possible to disguise a long-lived connection as a
series of shorter-lived connections, but I’ve never personally done that
before so I’m not equipped to explain how to do that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A customer’s firewall &lt;em&gt;will&lt;/em&gt; notice that you’re making an
SSH connection of some sort&lt;/p&gt;
&lt;p&gt;Even when the SSH connection is encrypted it is still possible for a
firewall to detect that the SSH protocol is being used. A lot of
firewalls will be configured to ban SSH traffic by default unless
explicitly approved.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, there is a great solution to that latter problem, which is
…&lt;/p&gt;
&lt;h4 id=&quot;corkscrew&quot;&gt;&lt;code&gt;corkscrew&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;corkscrew&lt;/code&gt; is an extremely simple tool that wraps an SSH
connection in an HTTP connection. This lets us disguise SSH traffic as
HTTP traffic (which we can then further disguise as HTTPS traffic by
encrypting the connection using &lt;code&gt;stunnel&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Normally, the only thing we’d need to do is to extend our
&lt;code&gt;ssh -R&lt;/code&gt; command to add this option:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;ssh&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;ProxyCommand /path/to/corkscrew external.example.com 443 %h %p` …&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… but this doesn’t work because &lt;code&gt;corkscrew&lt;/code&gt; doesn’t
support HTTPS connections (it’s an extremely simple program written in
just a couple hundred lines of C code). So in order to work around that
we’re going to use &lt;code&gt;stunnel&lt;/code&gt; again, but this time we’re going
to run &lt;code&gt;stunnel&lt;/code&gt; in “client mode” on
&lt;code&gt;internal.example.com&lt;/code&gt; so that it can handle the HTTPS logic
on behalf of &lt;code&gt;corkscrew&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre
class=&quot;sourceCode toml&quot;&gt;&lt;code class=&quot;sourceCode toml&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;[default]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;accept&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3128&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;external.example.com&lt;/span&gt;&lt;span class=&quot;er&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;443&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and then the correct &lt;code&gt;ssh&lt;/code&gt; command is:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; ssh &lt;span class=&quot;at&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;ProxyCommand /path/to/corkscrew localhost 3128 %h %p` …&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and now you are able to disguise an outbound SSH request as an
outbound HTTPS request.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MOREOVER,&lt;/strong&gt; you can use that disguised outbound SSH
request to create an SSH reverse tunnel which you can use to forward
inbound traffic from &lt;code&gt;external.example.com&lt;/code&gt; to any
&lt;code&gt;INTERNAL_PORT&lt;/code&gt; on &lt;code&gt;internal.example.com&lt;/code&gt;. Can you
guess what &lt;code&gt;INTERNAL_PORT&lt;/code&gt; we’re going to pick?&lt;/p&gt;
&lt;p&gt;That’s right, we’re going to forward inbound traffic to port 22:
&lt;code&gt;sshd&lt;/code&gt;. Also, we’re going to arbitrarily set
&lt;code&gt;EXTERNAL_PORT&lt;/code&gt; to 17705:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; ssh &lt;span class=&quot;at&quot;&gt;-R&lt;/span&gt; 17705:localhost:22 &lt;span class=&quot;at&quot;&gt;-N&lt;/span&gt; external.example.com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, (separately from the above command) we can &lt;code&gt;ssh&lt;/code&gt; into
our internal server via our external server like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; ssh &lt;span class=&quot;at&quot;&gt;-p&lt;/span&gt; 17705 external.example.com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and we have complete command-line access to our internal server and
the customer is none the wiser.&lt;/p&gt;
&lt;p&gt;From the customer’s perspective, we just ask them for an
innocent-seeming firewall rule permitting outbound HTTPS traffic from
&lt;code&gt;internal.example.com&lt;/code&gt; to &lt;code&gt;external.example.com&lt;/code&gt;.
That is the most innocuous firewall change we can possibly request
(short of not opening the firewall at all).&lt;/p&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;I don’t think all firewall rules are ineffective or bad, but if the
same person or organization controls both ends of a connection then
typically anything short of completely disabling internet access can be
jailbroken in some way with off-the-shelf open source tools. It does
require some work, but as you can see with the &lt;a
href=&quot;https://github.com/Gabriella439/holepunch&quot;&gt;associated
&lt;code&gt;holepunch&lt;/code&gt; repository&lt;/a&gt; even moderately sophisticated
firewall escape hatches can be neatly packaged for others to reuse.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/6277361455932329681/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2024/08/firewall-rules-not-as-secure-as-you.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/6277361455932329681'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/6277361455932329681'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2024/08/firewall-rules-not-as-secure-as-you.html' title='Firewall rules: not as secure as you think'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-621781023520691476</id><published>2024-07-23T07:10:00.000-07:00</published><updated>2024-07-23T07:10:23.728-07:00</updated><title type='text'>Software engineers are not (and should not be) technicians</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;
  &lt;meta name=&quot;twitter:author&quot; content=&quot;@GabriellaG439&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;Software engineers are not (and should not be) technicians&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;Why predictable development work is a red flag&quot; /&gt;
  &lt;title&gt;Software engineers are not (and should not be) technicians&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;I don’t actually think predictability is a good thing in software
engineering. This will probably come as a surprise to some people
(especially managers), but I’ll explain what I mean.&lt;/p&gt;
&lt;p&gt;In my view, a great software engineer is one who automates
repetitive/manual labor. You would think that this is a pretty low bar
to clear, right? Isn’t automation of repetitive tasks … like …
programming 101? Wouldn’t most software engineers be great engineers
according to my criterion?&lt;/p&gt;
&lt;p&gt;No.&lt;/p&gt;
&lt;p&gt;I would argue that &lt;strong&gt;most large software engineering
organizations incentivize anti-automation&lt;/strong&gt; and it’s primarily
because of their penchant for predictability, especially predictable
estimates and predictable work. The reason this happens is that
&lt;strong&gt;predictable work is work that could have been automated but was
not automated&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&quot;example&quot;&gt;Example&lt;/h4&gt;
&lt;p&gt;I’ll give a concrete example of predictable work from my last job.
Early on we had a dedicated developer for maintaining our web API. Every
time some other team added a new gRPC API endpoint to an internal
service this developer was tasked with exposing that same information
via an HTTP API. This was a fairly routine job but it still required
time and thought on their part.&lt;/p&gt;
&lt;p&gt;Initially managers liked the fact that this developer could estimate
reliably (because the work was well-understood) and this developer liked
the fact that they didn’t have to leave their comfort zone. &lt;strong&gt;But
it wasn’t great for the business!&lt;/strong&gt; This person frequently became
a bottleneck for releasing new features because they had inserted their
own manual labor as a necessary step in the development pipeline. They
made the case that management should hire &lt;em&gt;more&lt;/em&gt; such developers
like themselves to handle increased demand for their work.&lt;/p&gt;
&lt;p&gt;Our team pushed back on this because we recognized that this
developer’s work was so predictable that it could be completely
automated. We made the case to management that rather than hiring
another person to do the same work we should be automating more and it’s
a good thing we did; that developer soon left the company and instead of
hiring to replace them we automated away their job instead. We wrote
some code to automatically generate an HTTP API from the corresponding
gRPC API&lt;a href=&quot;#fn1&quot; class=&quot;footnote-ref&quot; id=&quot;fnref1&quot;
role=&quot;doc-noteref&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and that generated much more value
for the business than hiring a new developer.&lt;/p&gt;
&lt;h4 id=&quot;technicians-vs-engineers&quot;&gt;Technicians vs Engineers&lt;/h4&gt;
&lt;p&gt;I like to use the term “technician” to describe a developer who (A)
does work that is well-understood and (B) doesn’t need to leave their
comfort zone very often. Obviously there is not a bright line dividing
engineers from technicians, but generally speaking the more predictable
and routine a developer’s job the more they tend to slide into becoming
a technician. In the above example, I viewed the developer maintaining
the web API as more of a technician than an engineer.&lt;/p&gt;
&lt;p&gt;In contrast, the more someone leans into being an engineer the more
unpredictable their work gets (along with their estimates). If you’re
consistently automating things then all of the predictable work slowly
dries up and all that’s left is unpredictable work. The nature of a
software engineer’s job is that they are tackling increasingly
challenging and ambitious tasks as they progressively automate more.&lt;/p&gt;
&lt;p&gt;I believe that most tech companies should not bias towards
predictability and should avoid hiring/cultivating technicians. The
reason that tech companies command outsized valuations is because of
automation. Leaning into predictability and well-understood work
inadvertently incentivizes manual labor instead of automation. This
isn’t obvious to a lot of tech companies because they assume any work
involving code is necessarily automation but that’s not always the
case&lt;a href=&quot;#fn2&quot; class=&quot;footnote-ref&quot; id=&quot;fnref2&quot;
role=&quot;doc-noteref&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;. Tech companies that fail to
recognize this end up over-hiring and wondering why less work is getting
done with more people.&lt;/p&gt;
&lt;p&gt;Or to put it another way: I actually view it as a red flag if an
engineer or team gets into a predictable “flow” because it means that
there is a promising opportunity for automation they’re ignoring.&lt;/p&gt;
&lt;section class=&quot;footnotes footnotes-end-of-document&quot;
role=&quot;doc-endnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;Nowadays there are off-the-shelf
tools to do this like &lt;a
href=&quot;https://github.com/grpc-ecosystem/grpc-gateway&quot;&gt;&lt;code&gt;grpc-gateway&lt;/code&gt;&lt;/a&gt;
but this wasn’t available to us at the time.&lt;a href=&quot;#fnref1&quot;
class=&quot;footnote-back&quot; role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;… or even usually the case; I’m
personally very cynical about the engineering effectiveness of most tech
companies.&lt;a href=&quot;#fnref2&quot; class=&quot;footnote-back&quot;
role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;/body&gt;
&lt;/html&gt;
</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/621781023520691476/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2024/07/software-engineers-are-not-and-should.html#comment-form' title='8 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/621781023520691476'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/621781023520691476'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2024/07/software-engineers-are-not-and-should.html' title='Software engineers are not (and should not be) technicians'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>8</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-2153060849283107379</id><published>2024-07-03T06:05:00.000-07:00</published><updated>2024-07-03T06:12:26.019-07:00</updated><title type='text'>Quality and productivity are not necessarily mutually exclusive</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;Quality and productivity are not necessarily mutually exclusive&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;A focus can quality can sometimes immediately boost productivity&quot; /&gt;
  &lt;title&gt;Quality and productivity are not necessarily mutually exclusive&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;One of my pet peeves is when people pit quality and
productivity against each other in engineering management discussions
because I don’t always view them as competing priorities.&lt;/p&gt;
&lt;p&gt;And I don’t just mean that quality improves productivity in the long
run by avoiding tech debt. I’m actually saying that a focus on quality
can &lt;strong&gt;immediately boost delivery speed for the task at
hand&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In my experience there are two primary ways that attention to quality
&lt;em&gt;helps&lt;/em&gt; engineers ship and deliver more features on shorter
timescales:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mindfulness of quality counteracts tunnel vision&lt;/p&gt;
&lt;p&gt;By “tunnel vision” I mean the tendency of engineers to focus too much
on their initial approach to solving a problem, to the point where they
miss other (drastically) simpler solutions to the same problem. When an
engineer periodically steps back and holistically evaluates the quality
of what they’re building they’re more likely to notice a simpler
solution to the same problem.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prioritizing quality improves morale&lt;/p&gt;
&lt;p&gt;Many engineers deeply desire being masters at their craft, and the
morale boost of doing a quality job can sharply increase their
productivity, too. Conversely, if you pressure an engineer to cut
corners and ship at all costs you might decrease the scope of the
project but you also might tank their productivity &lt;em&gt;even more&lt;/em&gt;
and wipe out any gains from cutting scope.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;HOWEVER,&lt;/strong&gt; (and this is a big caveat) the above points
do not always apply, which is why I say that a focus on quality only
&lt;em&gt;sometimes&lt;/em&gt; improves productivity. In other words, part of the
art/intuition of being a manager is recognizing the situations where
quality supports productivity.&lt;/p&gt;
&lt;p&gt;For example, not every engineer cares about doing a quality job or
honing their craft (for some people it’s just a job) and if you ask
these kinds of engineers to prioritize quality they’re not going to get
the morale/productivity boost that a more passionate engineer might get.
Like, it could still be the right decision to prioritize quality, but
now it’s no longer an obvious decision.&lt;/p&gt;
&lt;p&gt;Similarly, not every engineer will benefit from stepping back and
thinking longer about the problem at hand because some engineers are
enamored with complexity and aren&#39;t as good at identifying radically
simpler solutions (although I will say that valuing simplicity is a great
thing to cultivate in all of your engineers even if they’re not good at it
initially). As a manager you have to
recognize which engineers will move faster when given this extra breathing room and
which ones won’t.&lt;/p&gt;
&lt;p&gt;Anyway, the reason I’m writing this post is to counteract the mindset
that quality and productivity are competing priorities because this
mentality causes people to turn off their brains and miss the numerous
opportunities where quality actually supports productivity (even in the
very short term).&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/2153060849283107379/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2024/07/quality-and-productivity-are-not.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/2153060849283107379'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/2153060849283107379'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2024/07/quality-and-productivity-are-not.html' title='Quality and productivity are not necessarily mutually exclusive'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-2582751532149252995</id><published>2024-06-25T07:23:00.000-07:00</published><updated>2024-06-25T07:23:32.651-07:00</updated><title type='text'>My spiciest take on tech hiring</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;
  &lt;meta name=&quot;twitter:author&quot; content=&quot;@GabriellaG439&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;My spiciest take on tech hiring&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;Why streamlined interview processes are better&quot; /&gt;
  &lt;title&gt;My spiciest take on tech hiring&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;… is that you only need to administer &lt;strong&gt;one&lt;/strong&gt; technical
interview and &lt;strong&gt;one&lt;/strong&gt; non-technical interview (each no more
than an hour long).&lt;/p&gt;
&lt;p&gt;In my opinion, any interview process longer than that is not only
unnecessary but counterproductive.&lt;/p&gt;
&lt;p&gt;Obviously, this streamlined interview process is easier and less
time-consuming to administer, but there are other benefits that might
not be obvious.&lt;/p&gt;
&lt;h4 id=&quot;more-effective-interviews&quot;&gt;More effective interviews&lt;/h4&gt;
&lt;p&gt;&lt;a
href=&quot;https://en.wikipedia.org/wiki/Diffusion_of_responsibility&quot;&gt;“When
everyone is responsible, no one is responsible.”&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Interviewers are much more careful to ask the right questions when
they understand that nobody else will be administering a similar
interview. They have to make their questions count because they can’t
fall back on someone else to fill the gap if they fail to gather enough
information to make a decision on the candidate.&lt;/p&gt;
&lt;p&gt;Adding more technical or non-technical interviews makes you
&lt;em&gt;less&lt;/em&gt; likely to gather the information you need because
&lt;em&gt;nobody&lt;/em&gt; bears ultimate responsibility for gathering decisive
information.&lt;/p&gt;
&lt;h4 id=&quot;better-senior-applicants&quot;&gt;Better senior applicants&lt;/h4&gt;
&lt;p&gt;When hiring for very senior roles the best applicants have a
&lt;em&gt;lower&lt;/em&gt; tolerance for long and drawn-out interview processes. A
heavyweight interview process is a turnoff for the most sought-after
candidates (that can be more selective about where they apply).&lt;/p&gt;
&lt;p&gt;A lot of companies think that dragging out the interview process
helps improve candidate quality, but what they’re actually doing is
inadvertently selecting for more desperate candidates that have a higher
tolerance for bullshit and process. Is that the kind of engineer that
you want to attract as you grow your organization?&lt;/p&gt;
&lt;h4 id=&quot;priors-and-bias&quot;&gt;Priors and bias&lt;/h4&gt;
&lt;p&gt;In my experience, people tend to make up their minds on candidates
fairly early on in the interview process (or even before the interview
process begins). The shorter interview process formalizes the
existence of that informal phenomenon.&lt;/p&gt;
&lt;p&gt;Especially at larger tech companies, the hiring manager already has a
strong prior on a few applicants (either the applicant is someone they
or a team member referred or has a strong portfolio) and they have a
strong bias to hire those applicants they already knew about before the
interviewing process began. Drawing out the interview process is a
thinly veiled attempt to launder this bias with a “neutral” process that
they will likely disregard/overrule if it contradicts their personal
preference.&lt;/p&gt;
&lt;p&gt;That doesn’t mean that I think this sort of interviewing bias is
&lt;em&gt;good&lt;/em&gt; or &lt;em&gt;acceptable&lt;/em&gt;, but I also don’t think drawing out
the interviewing process corrects for this bias either. If anything,
extending the interview process makes it &lt;em&gt;more biased&lt;/em&gt; because
you are selecting for candidates that can take significant time off from
their normal schedule to participate in an extended interview panel
(which are typically candidates from privileged backgrounds).&lt;/p&gt;
&lt;h4 id=&quot;background&quot;&gt;Background&lt;/h4&gt;
&lt;p&gt;The inspiration for this take is my experience as a hiring manager at
my former job. We started out with a longer interview process for
full-time applicants and a much shorter interview process for interns
(one technical interview and one non-technical interview). The original
rationale behind this was that interns were considered lower stakes
“hires” so the interview process for them didn’t need to be as
“rigorous”.&lt;/p&gt;
&lt;p&gt;However, we found that the interview process for interns was actually
selecting for exceptional candidates despite what seemed to be “lower
standards”, so we thought: why not try this out for all hires and not
just interns?&lt;/p&gt;
&lt;p&gt;We didn’t make the transition all at once. We gradually eased into it
by slowly shaving off one interview from our interview panel with each
new opening until we got it down to one technical and one non-technical
interview (just like for interns). In the process of doing so we
realized with each simplification that we didn’t actually need these
extra interviews after all.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/2582751532149252995/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2024/06/my-spiciest-take-on-tech-hiring.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/2582751532149252995'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/2582751532149252995'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2024/06/my-spiciest-take-on-tech-hiring.html' title='My spiciest take on tech hiring'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-3665462927847135979</id><published>2024-05-20T09:35:00.000-07:00</published><updated>2024-05-20T09:35:26.421-07:00</updated><title type='text'>Prefer do notation over Applicative operators when assembling records</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;Prefer do notation over Applicative operators when assembling records&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;A post explaining the advantages of do notation and RecordWildCards over Applicative operators&quot; /&gt;
  &lt;title&gt;Prefer do notation over Applicative operators when assembling records&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;This is a short post explaining why you should prefer &lt;code&gt;do&lt;/code&gt;
notation when assembling a record, instead of using &lt;a
href=&quot;https://hackage.haskell.org/package/base/docs/Control-Applicative.html#t:Applicative&quot;&gt;&lt;code&gt;Applicative&lt;/code&gt;&lt;/a&gt;
operators (i.e. &lt;a
href=&quot;https://hackage.haskell.org/package/base/docs/Prelude.html#v:-60--36--62-&quot;&gt;&lt;code&gt;(&amp;lt;$&amp;gt;)&lt;/code&gt;&lt;/a&gt;/&lt;a
href=&quot;https://hackage.haskell.org/package/base/docs/Prelude.html#v:-60--42--62-&quot;&gt;&lt;code&gt;(&amp;lt;*&amp;gt;)&lt;/code&gt;&lt;/a&gt;).
This advice applies both for type constructors that implement &lt;a
href=&quot;https://hackage.haskell.org/package/base/docs/Control-Monad.html#t:Monad&quot;&gt;&lt;code&gt;Monad&lt;/code&gt;&lt;/a&gt;
(e.g. &lt;a
href=&quot;https://hackage.haskell.org/package/base/docs/System-IO.html#t:IO_&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt;)
and also for type constructors that implement &lt;a
href=&quot;https://hackage.haskell.org/package/base/docs/Control-Applicative.html#t:Applicative&quot;&gt;&lt;code&gt;Applicative&lt;/code&gt;&lt;/a&gt;
but not &lt;a
href=&quot;https://hackage.haskell.org/package/base/docs/Control-Monad.html#t:Monad&quot;&gt;&lt;code&gt;Monad&lt;/code&gt;&lt;/a&gt;
(e.g. &lt;a
href=&quot;https://hackage.haskell.org/package/optparse-applicative/docs/Options-Applicative.html#t:Parser&quot;&gt;the
&lt;code&gt;Parser&lt;/code&gt; type constructor&lt;/a&gt; from &lt;a
href=&quot;https://hackage.haskell.org/package/optparse-applicative&quot;&gt;the
&lt;code&gt;optparse-applicative&lt;/code&gt; package&lt;/a&gt;). The only difference is
that in the latter case you would need to enable &lt;a
href=&quot;https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/applicative_do.html&quot;&gt;the
&lt;code&gt;ApplicativeDo&lt;/code&gt; language extension&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The guidance is pretty simple. Instead of doing this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    {&lt;span class=&quot;ot&quot;&gt; firstName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    ,&lt;span class=&quot;ot&quot;&gt; lastName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;getPerson ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;getPerson &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getLine&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getLine&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… you should do this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE RecordWildCards #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# OPTIONS_GHC -Werror=missing-fields #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    {&lt;span class=&quot;ot&quot;&gt; firstName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    ,&lt;span class=&quot;ot&quot;&gt; lastName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;getPerson ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;getPerson &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    firstName &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getLine&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;#cb2-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    lastName &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getLine&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-14&quot;&gt;&lt;a href=&quot;#cb2-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{&lt;span class=&quot;op&quot;&gt;..&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why is the latter version better? There are a few reasons.&lt;/p&gt;
&lt;h4 id=&quot;ergonomics&quot;&gt;Ergonomics&lt;/h4&gt;
&lt;p&gt;It’s more ergonomic to assemble a record using &lt;code&gt;do&lt;/code&gt;
notation because you’re less pressured to try to cram all the logic into
a single expression.&lt;/p&gt;
&lt;p&gt;For example, suppose we wanted to explicitly prompt the user to enter
their first and last name. The typical way people would do extend the
former example using &lt;a
href=&quot;https://hackage.haskell.org/package/base/docs/Control-Applicative.html#t:Applicative&quot;&gt;&lt;code&gt;Applicative&lt;/code&gt;&lt;/a&gt;
operators would be something like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;getPerson ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;getPerson &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Enter your first name:&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getLine&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Enter your last name:&amp;quot;&lt;/span&gt;  &lt;span class=&quot;op&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getLine&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The expression gets so large that you end up having to split it over
multiple lines, but if we’re already splitting it over multiple lines
then why not use &lt;code&gt;do&lt;/code&gt; notation?&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;getPerson ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;getPerson &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Enter your first name:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    firstName &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getLine&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Enter your last name:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-7&quot;&gt;&lt;a href=&quot;#cb4-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    lastName &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getLine&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-8&quot;&gt;&lt;a href=&quot;#cb4-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-9&quot;&gt;&lt;a href=&quot;#cb4-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{&lt;span class=&quot;op&quot;&gt;..&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wow, much clearer! Also, the version using &lt;code&gt;do&lt;/code&gt; notation
doesn’t require that the reader is familiar with all of the &lt;a
href=&quot;https://hackage.haskell.org/package/base/docs/Control-Applicative.html#t:Applicative&quot;&gt;&lt;code&gt;Applicative&lt;/code&gt;&lt;/a&gt;
operators, so it’s more approachable to Haskell beginners.&lt;/p&gt;
&lt;h4 id=&quot;order-insensitivity&quot;&gt;Order insensitivity&lt;/h4&gt;
&lt;p&gt;Suppose we take that last example and then change the
&lt;code&gt;Person&lt;/code&gt; type to reorder the two fields:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    {&lt;span class=&quot;ot&quot;&gt; lastName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    ,&lt;span class=&quot;ot&quot;&gt; firstName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… then the former version using &lt;a
href=&quot;https://hackage.haskell.org/package/base/docs/Control-Applicative.html#t:Applicative&quot;&gt;&lt;code&gt;Applicative&lt;/code&gt;&lt;/a&gt;
operators would silently break: the first name and last name would now
be read in the wrong order. The latter version (using &lt;code&gt;do&lt;/code&gt;
notation) is unaffected.&lt;/p&gt;
&lt;p&gt;More generally, the approach using &lt;code&gt;do&lt;/code&gt; notation never
breaks or changes its behavior if you reorder the fields in the datatype
definition. It’s completely order-insensitive.&lt;/p&gt;
&lt;h4 id=&quot;better-error-messages&quot;&gt;Better error messages&lt;/h4&gt;
&lt;p&gt;If you add a new argument to the &lt;code&gt;Person&lt;/code&gt; constructor,
like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    {&lt;span class=&quot;ot&quot;&gt; alive ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    ,&lt;span class=&quot;ot&quot;&gt; firstName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    ,&lt;span class=&quot;ot&quot;&gt; lastName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;#cb6-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and you don’t make any other changes to the code then the former
version will produce two error messages, neither of which is great:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Example.hs:
    • Couldn&amp;#39;t match type ‘String -&amp;gt; Person’ with ‘Person’
      Expected: Bool -&amp;gt; String -&amp;gt; Person
        Actual: Bool -&amp;gt; String -&amp;gt; String -&amp;gt; Person
    • Probable cause: ‘Person’ is applied to too few arguments
      In the first argument of ‘(&amp;lt;$&amp;gt;)’, namely ‘Person’
      In the first argument of ‘(&amp;lt;*&amp;gt;)’, namely ‘Person &amp;lt;$&amp;gt; getLine’
      In the expression: Person &amp;lt;$&amp;gt; getLine &amp;lt;*&amp;gt; getLine
  |
  | getPerson = Person &amp;lt;$&amp;gt; getLine &amp;lt;*&amp;gt; getLine
  |             ^^^^^^

Example.hs:
    • Couldn&amp;#39;t match type ‘[Char]’ with ‘Bool’
      Expected: IO Bool
        Actual: IO String
    • In the second argument of ‘(&amp;lt;$&amp;gt;)’, namely ‘getLine’
      In the first argument of ‘(&amp;lt;*&amp;gt;)’, namely ‘Person &amp;lt;$&amp;gt; getLine’
      In the expression: Person &amp;lt;$&amp;gt; getLine &amp;lt;*&amp;gt; getLine
  |
  | getPerson = Person &amp;lt;$&amp;gt; getLine &amp;lt;*&amp;gt; getLine
  |                        ^^^^^^^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… whereas the latter version produces a much more direct error
message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Example.hs:…
    • Fields of ‘Person’ not initialised:
        alive :: Bool
    • In the first argument of ‘return’, namely ‘Person {..}’
      In a stmt of a &amp;#39;do&amp;#39; block: return Person {..}
      In the expression:
        do putStrLn &amp;quot;Enter your first name: &amp;quot;
           firstName &amp;lt;- getLine
           putStrLn &amp;quot;Enter your last name: &amp;quot;
           lastName &amp;lt;- getLine
           ....
   |
   |     return Person{..}
   |            ^^^^^^^^^^
 ^^^^^^^^^^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… and that error message more clearly suggests to the developer what
needs to be fixed: the &lt;code&gt;alive&lt;/code&gt; field needs to be initialized.
The developer doesn’t have to understand or reason about curried
function types to fix things.&lt;/p&gt;
&lt;h4 id=&quot;caveats&quot;&gt;Caveats&lt;/h4&gt;
&lt;p&gt;This advice obviously only applies for datatypes that are defined
using record syntax. The approach I’m advocating here doesn’t work at
all for datatypes with positional arguments (or arbitrary
functions).&lt;/p&gt;
&lt;p&gt;However, this advice &lt;em&gt;does&lt;/em&gt; still apply for type constructors
that are &lt;a
href=&quot;https://hackage.haskell.org/package/base/docs/Control-Applicative.html#t:Applicative&quot;&gt;&lt;code&gt;Applicative&lt;/code&gt;&lt;/a&gt;s
and not &lt;a
href=&quot;https://hackage.haskell.org/package/base/docs/Control-Monad.html#t:Monad&quot;&gt;&lt;code&gt;Monad&lt;/code&gt;&lt;/a&gt;s;
you just need to enable &lt;a
href=&quot;https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/applicative_do.html&quot;&gt;the
&lt;code&gt;ApplicativeDo&lt;/code&gt; language extension&lt;/a&gt;. For example, this
means that you can use this same trick for defining command-line &lt;a
href=&quot;https://hackage.haskell.org/package/optparse-applicative/docs/Options-Applicative.html#t:Parser&quot;&gt;&lt;code&gt;Parser&lt;/code&gt;&lt;/a&gt;s
from &lt;a
href=&quot;https://hackage.haskell.org/package/optparse-applicative&quot;&gt;the
&lt;code&gt;optparse-applicative&lt;/code&gt; package&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE ApplicativeDo #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE RecordWildCards #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;#cb9-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-4&quot;&gt;&lt;a href=&quot;#cb9-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# OPTIONS_GHC -Werror=missing-fields #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-5&quot;&gt;&lt;a href=&quot;#cb9-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-6&quot;&gt;&lt;a href=&quot;#cb9-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Options.Applicative&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Parser&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;ParserInfo&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb9-7&quot;&gt;&lt;a href=&quot;#cb9-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-8&quot;&gt;&lt;a href=&quot;#cb9-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Options.Applicative&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Options&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-9&quot;&gt;&lt;a href=&quot;#cb9-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-10&quot;&gt;&lt;a href=&quot;#cb9-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-11&quot;&gt;&lt;a href=&quot;#cb9-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    {&lt;span class=&quot;ot&quot;&gt; firstName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-12&quot;&gt;&lt;a href=&quot;#cb9-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    ,&lt;span class=&quot;ot&quot;&gt; lastName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-13&quot;&gt;&lt;a href=&quot;#cb9-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    } &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb9-14&quot;&gt;&lt;a href=&quot;#cb9-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-15&quot;&gt;&lt;a href=&quot;#cb9-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;parsePerson ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-16&quot;&gt;&lt;a href=&quot;#cb9-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;parsePerson &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-17&quot;&gt;&lt;a href=&quot;#cb9-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    firstName &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; Options.strOption&lt;/span&gt;
&lt;span id=&quot;cb9-18&quot;&gt;&lt;a href=&quot;#cb9-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        (   Options.long &lt;span class=&quot;st&quot;&gt;&amp;quot;first-name&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-19&quot;&gt;&lt;a href=&quot;#cb9-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  Options.help &lt;span class=&quot;st&quot;&gt;&amp;quot;Your first name&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-20&quot;&gt;&lt;a href=&quot;#cb9-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  Options.metavar &lt;span class=&quot;st&quot;&gt;&amp;quot;NAME&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-21&quot;&gt;&lt;a href=&quot;#cb9-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&quot;cb9-22&quot;&gt;&lt;a href=&quot;#cb9-22&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-23&quot;&gt;&lt;a href=&quot;#cb9-23&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    lastName &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; Options.strOption&lt;/span&gt;
&lt;span id=&quot;cb9-24&quot;&gt;&lt;a href=&quot;#cb9-24&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        (   Options.long &lt;span class=&quot;st&quot;&gt;&amp;quot;last-name&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-25&quot;&gt;&lt;a href=&quot;#cb9-25&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  Options.help &lt;span class=&quot;st&quot;&gt;&amp;quot;Your last name&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-26&quot;&gt;&lt;a href=&quot;#cb9-26&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  Options.metavar &lt;span class=&quot;st&quot;&gt;&amp;quot;NAME&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-27&quot;&gt;&lt;a href=&quot;#cb9-27&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&quot;cb9-28&quot;&gt;&lt;a href=&quot;#cb9-28&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-29&quot;&gt;&lt;a href=&quot;#cb9-29&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{&lt;span class=&quot;op&quot;&gt;..&lt;/span&gt;}&lt;/span&gt;
&lt;span id=&quot;cb9-30&quot;&gt;&lt;a href=&quot;#cb9-30&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-31&quot;&gt;&lt;a href=&quot;#cb9-31&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;parserInfo ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ParserInfo&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-32&quot;&gt;&lt;a href=&quot;#cb9-32&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;parserInfo &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-33&quot;&gt;&lt;a href=&quot;#cb9-33&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    Options.info parsePerson&lt;/span&gt;
&lt;span id=&quot;cb9-34&quot;&gt;&lt;a href=&quot;#cb9-34&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        (Options.progDesc &lt;span class=&quot;st&quot;&gt;&amp;quot;Parse and display a person&amp;#39;s first and last name&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb9-35&quot;&gt;&lt;a href=&quot;#cb9-35&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-36&quot;&gt;&lt;a href=&quot;#cb9-36&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;main ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&quot;cb9-37&quot;&gt;&lt;a href=&quot;#cb9-37&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;main &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-38&quot;&gt;&lt;a href=&quot;#cb9-38&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    person &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; Options.execParser parserInfo&lt;/span&gt;
&lt;span id=&quot;cb9-39&quot;&gt;&lt;a href=&quot;#cb9-39&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-40&quot;&gt;&lt;a href=&quot;#cb9-40&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt; person&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/3665462927847135979/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2024/05/prefer-do-notation-over-applicative.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/3665462927847135979'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/3665462927847135979'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2024/05/prefer-do-notation-over-applicative.html' title='Prefer do notation over Applicative operators when assembling records'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-3393769290033840387</id><published>2024-05-08T08:06:00.000-07:00</published><updated>2024-05-08T08:06:42.117-07:00</updated><title type='text'>All error messages are necessarily bad to some degree</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;All error messages are necessarily bad to some degree&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;An explanation of the selection bias that leads to poor error messages&quot; /&gt;
  &lt;title&gt;All error messages are necessarily bad to some degree&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;This is something I feel like enough people don’t appreciate. One of
the ways I like to explain this is by &lt;a
href=&quot;https://twitter.com/GabriellaG439/status/1145355462537166849&quot;&gt;this
old tweet of mine&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The evolution of an error message:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No error message&lt;/li&gt;
&lt;li&gt;A one-line message&lt;/li&gt;
&lt;li&gt;“Expected: … / Actual: …”&lt;/li&gt;
&lt;li&gt;“Here’s what went wrong: …”&lt;/li&gt;
&lt;li&gt;“Here’s what you should do: …”&lt;/li&gt;
&lt;li&gt;I automated away what you should do&lt;/li&gt;
&lt;li&gt;The invalid state is no longer representable&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of the common gripes I will hear about error messages is that
they don’t tell the user what to do, but if you stop to think about it:
if the error message knew exactly what you were supposed to do instead
then your tool could &lt;strong&gt;just fix it for you&lt;/strong&gt; (by
automatically doing the right thing instead).&lt;/p&gt;
&lt;p&gt;“&lt;em&gt;But wait!&lt;/em&gt;”, you might say, “&lt;em&gt;sometimes an error message
can’t automatically fix the problem for you because there’s not
necessarily a right or obvious way to fix the problem or the user’s
intent is not clear.&lt;/em&gt;” Yes, exactly, which brings us back to the
original point:&lt;/p&gt;
&lt;p&gt;Error messages are necessarily bad because they cannot anticipate
what you should have done instead. If an error message could read your
mind then they’d eventually evolve into something better than an error
message. This creates a selection bias where the only remaining error
messages are the ones that can’t read your mind.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/3393769290033840387/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2024/05/all-error-messages-are-necessarily-bad.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/3393769290033840387'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/3393769290033840387'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2024/05/all-error-messages-are-necessarily-bad.html' title='All error messages are necessarily bad to some degree'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-5312345068616031555</id><published>2024-02-29T04:47:00.000-08:00</published><updated>2024-02-29T04:47:45.811-08:00</updated><title type='text'>The siren song of domain-specific languages</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;The siren song of domain-specific languages&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;The pitfalls software engineers encounter when creating domain-specific languages for less technical users&quot; /&gt;
  &lt;title&gt;The siren song of domain-specific languages&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;I’ve seen a lot of engineering teams mistakenly believe that they can
author domain-specific languages for less technical users on a budget.
In particular they seem to believe that if they create this
domain-specific language then the less technical users will be able to
thoughtlessly churn out a bunch of code in that language and there won’t
be any problem and they can then move onto the next project. This rarely
works out in the way that people hope it will.&lt;/p&gt;
&lt;p&gt;In the &lt;em&gt;best case scenario&lt;/em&gt;, your less technical users will
churn out a large amount of code using your domain-specific language
(which is exactly the outcome you hoped for!) and that corpus of code
will push the boundaries of what your language is capable of (like
performance, compilation speed, features, or supporting integrations).
The larger your userbase the greater the demand will be to improve your
language in a myriad of ways.&lt;/p&gt;
&lt;p&gt;In the worst case scenario your users will find increasingly inane
ways to do things wrong with your language despite your best efforts and
you will be expected to clean up their mess because you sold the project
on the premise of “our users are not going to have to think”.&lt;/p&gt;
&lt;p&gt;… and in either case this process will never end; the project will
never be in a “done state” and require permanent staffing. Hell, even if
you staff an entire team to support this language it’s still often a
struggle to keep up with the needs of less technical users.&lt;/p&gt;
&lt;p&gt;This tradeoff can still tempt businesses because it’s appealing to
replace skilled labor with unskilled labor. The reasoning goes that a
small investment of more skilled labor (the authors of the
domain-specific language) can enable a larger pool of less skilled labor
(the less technical users) to do most of the work. However, what you
will often find in practice is that this larger group of less technical
users is frequently blocked without continuous assistance from the
engineers who created the language.&lt;/p&gt;
&lt;p&gt;So in practice you’re not actually replacing skilled labor with
unskilled labor. Rather, you’re merely “laundering” skilled labor as
unskilled labor and creating more work for your engineers to make them
seem more replaceable than they actually are.&lt;/p&gt;
&lt;p&gt;I do think there are situations where domain-specific languages make
sense, but typically not on the scale of a software engineering
organization or even a small product. I personally think this sort of
division of labor tends to only work on the scale of an open source
ecosystem where you get a large enough economy of scale.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/5312345068616031555/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2024/02/the-siren-song-of-domain-specific.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/5312345068616031555'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/5312345068616031555'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2024/02/the-siren-song-of-domain-specific.html' title='The siren song of domain-specific languages'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-4027560103846030065</id><published>2024-02-22T05:42:00.000-08:00</published><updated>2024-02-22T08:04:36.645-08:00</updated><title type='text'>Unification-free (&quot;keyword&quot;) type checking</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;
  &lt;meta name=&quot;twitter:author&quot; content=&quot;@GabriellaG439&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;Unification-free (&amp;quot;keyword&amp;quot;) type checking&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;A type checking proposal that doesn&#39;t employ unification variables.&quot; /&gt;
  &lt;title&gt;Unification-free (&quot;keyword&quot;) type checking&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;From my perspective, one of the biggest open problems in implementing
programming languages is how to add a type system to the language
without significantly complicating the implementation.&lt;/p&gt;
&lt;p&gt;For example, in my tutorial &lt;a
href=&quot;https://github.com/Gabriella439/grace&quot;&gt;Fall-from-Grace&lt;/a&gt;
implementation the type checker logic accounts for over half of the
code. In the following lines of code report I’ve highlighted the modules
responsible for type-checking with a &lt;code&gt;‡&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; cloc &lt;span class=&quot;at&quot;&gt;--by-file&lt;/span&gt; src/Grace/&lt;span class=&quot;pp&quot;&gt;*&lt;/span&gt;.hs       &lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;…&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;--------------------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;File&lt;/span&gt;                                    blank        comment           code&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;--------------------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/Infer.hs&lt;/span&gt;        ‡               499            334           1696&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/Type.hs&lt;/span&gt;         ‡                96             91            633&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/Syntax.hs&lt;/span&gt;                        61            163            543&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/Parser.hs&lt;/span&gt;                       166             15            477&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/Lexer.hs&lt;/span&gt;                         69             25            412&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/Normalize.hs&lt;/span&gt;                     47             48            409&lt;/span&gt;
&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/Context.hs&lt;/span&gt;      ‡                72            165            249&lt;/span&gt;
&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/Import.hs&lt;/span&gt;                        38              5            161&lt;/span&gt;
&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/REPL.hs&lt;/span&gt;                          56              4            148&lt;/span&gt;
&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/Interpret.hs&lt;/span&gt;                     30             28            114&lt;/span&gt;
&lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;#cb1-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/Pretty.hs&lt;/span&gt;                        25             25            108&lt;/span&gt;
&lt;span id=&quot;cb1-17&quot;&gt;&lt;a href=&quot;#cb1-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/Monotype.hs&lt;/span&gt;     ‡                11             48             61&lt;/span&gt;
&lt;span id=&quot;cb1-18&quot;&gt;&lt;a href=&quot;#cb1-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/Location.hs&lt;/span&gt;                      16             15             60&lt;/span&gt;
&lt;span id=&quot;cb1-19&quot;&gt;&lt;a href=&quot;#cb1-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/TH.hs&lt;/span&gt;                            23             32             53&lt;/span&gt;
&lt;span id=&quot;cb1-20&quot;&gt;&lt;a href=&quot;#cb1-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/Value.hs&lt;/span&gt;                         12             53             53&lt;/span&gt;
&lt;span id=&quot;cb1-21&quot;&gt;&lt;a href=&quot;#cb1-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/Input.hs&lt;/span&gt;                         10              8             43&lt;/span&gt;
&lt;span id=&quot;cb1-22&quot;&gt;&lt;a href=&quot;#cb1-22&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/Compat.hs&lt;/span&gt;                         9              2             32&lt;/span&gt;
&lt;span id=&quot;cb1-23&quot;&gt;&lt;a href=&quot;#cb1-23&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/Existential.hs&lt;/span&gt;  ‡                12             23             25&lt;/span&gt;
&lt;span id=&quot;cb1-24&quot;&gt;&lt;a href=&quot;#cb1-24&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;src/Grace/Domain.hs&lt;/span&gt;       ‡                 4              7             20&lt;/span&gt;
&lt;span id=&quot;cb1-25&quot;&gt;&lt;a href=&quot;#cb1-25&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;--------------------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-26&quot;&gt;&lt;a href=&quot;#cb1-26&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;SUM:&lt;/span&gt;                                     1256           1091           5297&lt;/span&gt;
&lt;span id=&quot;cb1-27&quot;&gt;&lt;a href=&quot;#cb1-27&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;--------------------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s 2684 lines of code (≈51%) just for type-checking (and believe
me: I tried very hard to simplify the type-checking code).&lt;/p&gt;
&lt;p&gt;This is the reason why programming language implementers will be
pretty keen to just not implement a type-checker for their language, and
that’s how we end up with a proliferation of untyped programming
languages (e.g. Godot or Nix), or ones that end up with a type system
bolted on long after the fact (e.g. TypeScript or Python). You can see
why someone would be pretty tempted to skip implementing a type system
for their language (especially given that it’s an optional language
feature) if it’s going to balloon the size of their codebase.&lt;/p&gt;
&lt;p&gt;So I’m extremely keen on implementing a “lean” type checker that has
a high power-to-weight ratio. I also believe that a compact type checker
is an important foundational step for functional programming to “go
viral” and displace imperative programming. This post outlines one
approach to this problem that I’ve been experimenting with&lt;a href=&quot;#fn1&quot;
class=&quot;footnote-ref&quot; id=&quot;fnref1&quot;
role=&quot;doc-noteref&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;unification&quot;&gt;Unification&lt;/h4&gt;
&lt;p&gt;The thing that bloats the size of most type-checking implementations
is the need to track unification variables. These variables are
placeholders for storing as-yet-unknown information about something’s
type.&lt;/p&gt;
&lt;p&gt;For example, when a functional programming language infers the type
of something like this Grace expression:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(λx → x) true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… the way it typically works is that it will infer the type of the
function (&lt;code&gt;λx → x&lt;/code&gt;) which will be:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;λx → x &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; α → α&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… where &lt;code&gt;α&lt;/code&gt; is a unification variable (an unsolved type).
So you can read the above type annotation as saying “the type of
&lt;code&gt;λx → x&lt;/code&gt; is a function from some unknown input type
(&lt;code&gt;α&lt;/code&gt;) to the same output type (&lt;code&gt;α&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Then the type checker will infer the type of the function’s input
argument (&lt;code&gt;true&lt;/code&gt;) which will be:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;true &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and finally the type checker will combine those two pieces of
information and reason about the final type like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the input to the function (&lt;code&gt;true&lt;/code&gt;) is a
&lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;therefore the function’s input type (&lt;code&gt;α&lt;/code&gt;) must also be
&lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;therefore the function’s output type (&lt;code&gt;α&lt;/code&gt;) must also be
&lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;therefore the entire expression’s type is &lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… which gives the following conclusion of type inference:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(λx → x) true &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, managing unification variables like &lt;code&gt;α&lt;/code&gt; is a lot
trickier than it sounds. There are multiple unification
algorithms/frameworks in the wild but the problem with all of them is
that you have to essentially implement a bespoke logic programming
language (with all of the complexity that entails). Like, geez, I’m
already implementing a programming language and I don’t want to have to
implement a logic programming language on top of that just to power my
type-checker.&lt;/p&gt;
&lt;p&gt;So there are a couple of ways I’ve been brainstorming how to address
this problem and one idea I had was: what if we could get rid of
unification variables altogether?&lt;/p&gt;
&lt;h4 id=&quot;deleting-unification&quot;&gt;Deleting unification&lt;/h4&gt;
&lt;p&gt;Alright, so this is the part of the post that requires some
familiarity/experience with implementing a type-checker. If you’re
somebody new to programming language theory then you can still keep
reading but this is where I have to assume some prior knowledge
otherwise this post will get way too long.&lt;/p&gt;
&lt;p&gt;The basic idea is that you start from &lt;a
href=&quot;https://www.cl.cam.ac.uk/~nk480/bidir.pdf&quot;&gt;the “Complete and Easy”
bidirectional type checking algorithm&lt;/a&gt; which is a type checking
algorithm that does use unification variables&lt;a href=&quot;#fn2&quot;
class=&quot;footnote-ref&quot; id=&quot;fnref2&quot; role=&quot;doc-noteref&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; but
is simpler than most type checking algorithms. The type checking rules
look like this (you can just gloss over them):&lt;/p&gt;
&lt;p&gt;&lt;img
src=&quot;https://staging.cohostcdn.org/attachment/54a5a565-0f21-4d1f-8156-af0f613bee6c/Bildschirmfoto%202024-02-19%20um%2010.14.01%E2%80%AFAM.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img
src=&quot;https://staging.cohostcdn.org/attachment/7513477e-79d8-4677-a24c-10d788bf57c0/Bildschirmfoto%202024-02-19%20um%2010.14.16%E2%80%AFAM.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now, delete all the rules involving unification variables. Yes, all
of them. That means that all of the type-checking judgments from Figures
9 and 10 are gone and also quite a few rules from Figure 11 disappear,
too.&lt;/p&gt;
&lt;p&gt;Surprisingly, you can still type check a lot of code with what’s
left, but you lose two important type inference features if you do
this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;you can no longer infer the types of lambda arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you can no longer automatically instantiate polymorphic
code&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… and I’ll dig into those two issues in more detail.&lt;/p&gt;
&lt;h4 id=&quot;inferring-lambda-argument-types&quot;&gt;Inferring lambda argument
types&lt;/h4&gt;
&lt;p&gt;You lose the ability to infer the type of a function like this one
when you drop support for unification variables:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;λx → x &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Normally, a type checker that supports unification can infer that the
above function has type &lt;code&gt;Bool → Bool&lt;/code&gt;, but (in general) a
type checker can no longer infer that when you drop unification
variables from the implementation.&lt;/p&gt;
&lt;p&gt;This loss is not &lt;em&gt;too&lt;/em&gt; bad (in fact, it’s a pretty common
trade-off proposed in the bidirectional type checking literature)
because you can make up for it in a few ways (all of which are easy and
efficient to implement in a type checker):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can allow the input type to be inferred if the lambda is
given an explicit type annotation, like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;λx → x &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; → &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More generally, you can allow the input type to be inferred if the
lambda is checked against an expected type (and a type annotation is one
case, but not the only case, where a lambda is checked against an
expected type).&lt;/p&gt;
&lt;p&gt;We’re going to lean on this pretty heavily because it’s pretty
reasonable to ask users to provide type annotations for function
definitions and also because there are many situations where we can
infer the expected type of a lambda expression from its immediate
context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can allow the user to explicitly supply the type of the
argument&lt;/p&gt;
&lt;p&gt;… like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;λ(x &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;) → x &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is how &lt;a href=&quot;https://dhall-lang.org/&quot;&gt;Dhall&lt;/a&gt; works,
although it’s not as ergonomic.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can allow the input type to be inferred if the lambda is
applied to an argument&lt;/p&gt;
&lt;p&gt;This is not that interesting, but I’m mentioning it for completeness.
The reason it’s not interesting is because you won’t often see
expressions of the form &lt;code&gt;(λx → e) y&lt;/code&gt; in the wild, because
they can more idiomatically be rewritten as
&lt;code&gt;let x = y in e&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;instantiating-polymorphic-code&quot;&gt;Instantiating polymorphic
code&lt;/h4&gt;
&lt;p&gt;The bigger issue with dropping support for unification variables is:
all user-defined polymorphic functions now require &lt;em&gt;explicit type
abstraction&lt;/em&gt; and &lt;em&gt;explicit type application&lt;/em&gt;, which is a
major regression in the type system’s user experience.&lt;/p&gt;
&lt;p&gt;For example, in a language with unification variables you can write
the polymorphic identity function as:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;λx → x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and use it like this&lt;a href=&quot;#fn3&quot; class=&quot;footnote-ref&quot; id=&quot;fnref3&quot;
role=&quot;doc-noteref&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; λx → x&lt;/span&gt;
&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  (&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; true, &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… but when you drop support for unification variables then you have
to do something like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; λ(a &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) → λ(x &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; a) → x&lt;/span&gt;
&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;#cb11-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  (&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; true, &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Most programmers do &lt;strong&gt;NOT&lt;/strong&gt; want to program in a
language where they have to explicitly manipulate type variables in this
way. In particular, they really hate explicit type application. For
example, nobody wants to write:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; { x &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;, … large record … } &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; (λr → r&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;x) rs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So we need to figure out some way to work around this limitation.&lt;/p&gt;
&lt;h4 id=&quot;the-trick&quot;&gt;The trick&lt;/h4&gt;
&lt;p&gt;However, there is a solution that I believe gives a high
power-to-weight ratio, which I will refer to as “keyword” type
checking:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;add a bunch of built-in functions&lt;/p&gt;
&lt;p&gt;Specifically, add enough built-in functions to cover most use cases
where users would need a polymorphic function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;add special type-checking rules for those built-in functions when
they’re fully saturated with all of their arguments&lt;/p&gt;
&lt;p&gt;These special-cased type-checking rules would not require unification
variables.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;still require explicit type abstraction when these built-in
functions are not fully saturated&lt;/p&gt;
&lt;p&gt;Alternatively, you can require that built-in polymorphic functions
are fully saturated with their arguments and make it a parsing error if
they’re not.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;still require explicit type abstraction and explicit type
application for all user-defined (i.e. non-builtin) polymorphic
functions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;optionally, turn these built-in functions into keywords or
language constructs&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ll give a concrete example: the &lt;code&gt;map&lt;/code&gt; function for
lists. In many functional programming languages this &lt;code&gt;map&lt;/code&gt;
function is not a built-in function; rather it’s defined within the host
language as a function of the following type:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ∀(a b &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) → (a → b) → &lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; a → &lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What I’m proposing is that the &lt;code&gt;map&lt;/code&gt; function would now
become a built-in function within the language and you would now apply a
special type-checking rule when the &lt;code&gt;map&lt;/code&gt; function is fully
saturated:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Γ ⊢ xs ⇒ List a   Γ ⊢ f ⇐ a → b
───────────────────────────────
Γ ⊢ map f xs ⇐ List b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In other words, we’re essentially treating the &lt;code&gt;map&lt;/code&gt;
built-in function like a “keyword” in our language (when it’s fully
saturated). Just like a keyword, it’s a built-in language feature that
has special type-checking rules. Hell, you could even make it an actual
keyword or language construct (e.g. a list comprehension) instead of a
function call.&lt;/p&gt;
&lt;p&gt;I would even argue that you should make each of these special-cased
builtin-functions a keyword or a language construct instead of a
function call (which is why I call this “keyword type checking” in the
first place). When viewed through this lens the restrictions that these
polymorphic built-in functions (A) are saturated with their arguments
and (B) have a special type checking judgment are no different than the
restrictions for ordinary keywords or language constructs (which also
must be saturated with their arguments and also require special type
checking judgments).&lt;/p&gt;
&lt;p&gt;To make an analogy, in many functional programming languages the
&lt;code&gt;if&lt;/code&gt;/&lt;code&gt;then&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; construct has this
same “keyword” status. You typically don’t implement it as a user-space
function of this type:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;#cb15-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;ifThenElse &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ∀(a &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) → &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; → a → a → a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Rather, you define &lt;code&gt;if&lt;/code&gt; as a language construct and you
also add a special type-checking rule for &lt;code&gt;if&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Γ ⊢ b ⇐ Bool   Γ ⊢ x ⇒ a   Γ ⊢ y ⇐ a
────────────────────────────────────
Γ ⊢ if b then x else y ⇒ a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… and what I’m proposing is essentially greatly exploding the number
of “keywords” in the implementation of the language by turning a whole
bunch of commonly-used polymorphic functions into built-in functions (or
keywords, or language constructs) that are given special type-checking
treatment.&lt;/p&gt;
&lt;p&gt;For example, suppose the user were to create a polymorphic function
like this one:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;#cb17-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; twice &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; λ(a &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) → λ(x &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; a) → [ x, x ]&lt;/span&gt;
&lt;span id=&quot;cb17-2&quot;&gt;&lt;a href=&quot;#cb17-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb17-3&quot;&gt;&lt;a href=&quot;#cb17-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  twice (&lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;) (twice &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; true)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s not very ergonomic to define and use, but we also can’t
reasonably expect our programming language to provide a
&lt;code&gt;twice&lt;/code&gt; built-in function. However, our language could
provide a generally useful &lt;code&gt;replicate&lt;/code&gt; builtin function (like
&lt;a
href=&quot;https://hackage.haskell.org/package/base-4.19.0.0/docs/Data-List.html#v:replicate&quot;&gt;Haskell’s
&lt;code&gt;replicate&lt;/code&gt; function&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;#cb18-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; ∀(a &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) → &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; → a → &lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… with the following type-checking judgment:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Γ ⊢ n ⇐ Natural   Γ ⊢ x ⇒ a
───────────────────────────
Γ ⊢ replicate n x ⇒ List a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… and then you would tell the user to use &lt;code&gt;replicate&lt;/code&gt;
directly instead of defining their own &lt;code&gt;twice&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb20&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb20-1&quot;&gt;&lt;a href=&quot;#cb20-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; true)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and if the user were to ask you “How do I define a
&lt;code&gt;twice&lt;/code&gt; synonym for &lt;code&gt;replicate 2&lt;/code&gt;” you would just
tell them “Don’t do that. Use &lt;code&gt;replicate 2&lt;/code&gt; directly.”&lt;/p&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;This approach has the major upside that it’s much easier to implement
a large number of keywords than it is to implement a unification
algorithm, but there are &lt;em&gt;other&lt;/em&gt; benefits to doing this, too!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It discourages complexity and fragmentation in user-space
code&lt;/p&gt;
&lt;p&gt;Built-in polymorphic functions have an ergonomic advantage over
user-defined polymorphic functions because under this framework type
inference works better for built-in functions. This creates an ergonomic
incentive to stick to the “standard library” of built-in polymorphic
functions, which in turn promotes an opinionated coding style across all
code written in that language.&lt;/p&gt;
&lt;p&gt;You might notice that this approach is somewhat similar in spirit to
how Go handles polymorphism which is to say: it doesn’t handle
user-defined polymorphic code well. For example, Go provides a few
built-in language features that support polymorphism (e.g. the
&lt;code&gt;map&lt;/code&gt; data structure and for loops) but if users ask for any
sort of user-defined polymorphism then the maintainers tell them they’re
wrong for wanting that. The main difference here is that (unlike Go) we
do actually support user-defined polymorphism; it’s not forbidden, but
it is less ergonomic than sticking to the built-in utilities that
support polymorphism..&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It improves error messages&lt;/p&gt;
&lt;p&gt;When you special-case the type-checking logic you can also
special-case the error messages, too! With general-purpose unification
the error message can often be a bit divorced from the user’s intent,
but with “keyword type checking” the error message is not only more
local to the problem but it can also suggest highly-specific tips or
fixes appropriate for that built-in function (or keyword or language
construct).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It can in some cases more closely match the expectations of
imperative programmers&lt;/p&gt;
&lt;p&gt;What I mean is: most programmers coming from an imperative and typed
background are used to languages where (most of the time) polymorphism
is “supported” via built-in language constructs and keywords and
user-defined polymorphism might be supported but considered “fancy”.
Leaning on polymorphism via keywords and language constructs would
actually make them more comfortable using polymorphism instead of trying
to teach them how to produce and consume user-defined polymorphic
functions.&lt;/p&gt;
&lt;p&gt;For example, in a lot of imperative languages the idiomatic solution
for how to do anything with a list is “use a for loop” where you can
think of a for loop as a built-in keyword that supports polymorphic
code. The functional programming equivalent of “just use a for loop”
would be something like “just use a list comprehension” (where a list
comprehension is a “keyword” that supports polymorphic code that we can
give special type checking treatment).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That said, this approach is still more brittle than unification and
will require more type annotations in general. The goal here isn’t to
completely recover the full power of unification but rather to get
something that’s not too bad but &lt;em&gt;significantly&lt;/em&gt; easier to
implement.&lt;/p&gt;
&lt;p&gt;I think this “keyword type checking” can potentially occupy a “low
tech” point in the type checking design space for functional programming
languages that need to have efficient and compact implementations
(e.g. for ease of embedding). Also, this can potentially provide a
stop-gap solution for novice language implementers that want
&lt;em&gt;some&lt;/em&gt; sort of a type system but they’re not willing to commit to
implementing a unification-based type system.&lt;/p&gt;
&lt;p&gt;There’s also variation on this idea which Verity Scheel has been
exploring, which is to provide userland support for defining new
functions with special type-checking rules and there’s a post from her
outlining how to do that:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cofree.coffee/~verity/implicit_arguments.html&quot;&gt;User
Operators with Implicits &amp;amp; Overloads&lt;/a&gt;&lt;/p&gt;
&lt;section class=&quot;footnotes footnotes-end-of-document&quot;
role=&quot;doc-endnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;The other approach is to create
essentially an “ABNF for type checkers” that would let you write
type-checking judgments in a standard format that could generate the
corresponding type-checking code in multiple languages. That’s still a
work-in-progress, though.&lt;a href=&quot;#fnref1&quot; class=&quot;footnote-back&quot;
role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;I believe some people might take
issue with calling these unification variables because they consider
bidirectional type checking as a distinct framework from unification.
Moreover, in the original bidirectional type checking paper they’re
called “unsolved” variables rather than unification variables. However,
I feel that for the purpose of this post it’s still morally correct to
refer to these unsolved variables as unification variables since their
usage and complexity tradeoffs are essentially identical to unification
variables in traditional unification algorithms.&lt;a href=&quot;#fnref2&quot;
class=&quot;footnote-back&quot; role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn3&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;… assuming &lt;code&gt;let&lt;/code&gt;
expressions are generalized.&lt;a href=&quot;#fnref3&quot; class=&quot;footnote-back&quot;
role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;/body&gt;
&lt;/html&gt;
</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/4027560103846030065/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2024/02/unification-free-keyword-type-checking.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/4027560103846030065'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/4027560103846030065'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2024/02/unification-free-keyword-type-checking.html' title='Unification-free (&quot;keyword&quot;) type checking'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-5018344068429765373</id><published>2023-10-04T11:50:00.001-07:00</published><updated>2023-10-04T11:50:09.870-07:00</updated><title type='text'>A GHC plugin for OpenTelemetry build metrics</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;A GHC plugin for OpenTelemetry build metrics&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;An announcement post for the opentelemetry-plugin Haskell package&quot; /&gt;
  &lt;title&gt;A GHC plugin for OpenTelemetry build metrics&lt;/title&gt;
  &lt;style&gt;
    html {
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 12px;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      html {
        background-color: white;
      }
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    svg {
      height; auto;
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, Consolas, &#39;Lucida Console&#39;, monospace;
      font-size: 85%;
      margin: 0;
      hyphens: manual;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    /* The extra [class] is a hack that increases specificity enough to
       override a similar rule in reveal.js */
    ul.task-list[class]{list-style: none;}
    ul.task-list li input[type=&quot;checkbox&quot;] {
      font-size: inherit;
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;This post is about a new &lt;a
href=&quot;https://opentelemetry.io/&quot;&gt;OpenTelemetry&lt;/a&gt; plugin for GHC that
I’ve been building for &lt;a
href=&quot;https://github.com/MercuryTechnologies&quot;&gt;work&lt;/a&gt; that we’re open
sourcing because I think it might be broadly useful to others. If all
you want to do is use the plugin then you can find it &lt;a
href=&quot;https://hackage.haskell.org/package/opentelemetry-plugin&quot;&gt;on
Hackage&lt;/a&gt;, which includes more detailed usage instructions. This post
will focus more on the motivation and background behind the plugin’s
development.&lt;/p&gt;
&lt;h4 id=&quot;motivation&quot;&gt;Motivation&lt;/h4&gt;
&lt;p&gt;The context behind this work was that we use &lt;a
href=&quot;https://www.honeycomb.io/&quot;&gt;Honeycomb&lt;/a&gt; at work for collecting
metrics related to production and our team&lt;a href=&quot;#fn1&quot;
class=&quot;footnote-ref&quot; id=&quot;fnref1&quot; role=&quot;doc-noteref&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; has
begun to apply those same metrics to our builds. In particular, we
wanted to collect detailed (module-level) build metrics so that we could
begin to hunt down and fix expensive modules within our codebase. For
context: our codebase currently has almost 7000 modules, so these
expensive modules can easily fly under the radar.&lt;/p&gt;
&lt;p&gt;When we enable the plugin and export the results to Honeycomb we can
begin to see which modules are the most expensive to build:&lt;/p&gt;
&lt;figure&gt;
&lt;img
src=&quot;https://user-images.githubusercontent.com/1313787/272380453-2898e7d2-5372-4bfb-85f1-3773b2ba78b1.png&quot;
alt=&quot;Sample module build times&quot; /&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;Sample module build times&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;… and none of the modules are individually very expensive to build
(the worst offender is only about 5 seconds), so they’d easily get lost
within a sea of thousands of other modules.&lt;/p&gt;
&lt;p&gt;However, these sorts of insights have already proven useful. For
example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;one expensive modules was completely unused in our codebase&lt;/p&gt;
&lt;p&gt;The above list brought it to our attention so that we could delete
it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;other expensive modules were representative examples of larger
issues to fix&lt;/p&gt;
&lt;p&gt;For example, one expensive module consisted of 2000 invocations of an
internal function which is expensive to type-check and fixing this
function will improve compile speeds across our codebase and not just
that module.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;other expensive modules are indicative of architectural
anti-patterns&lt;/p&gt;
&lt;p&gt;Frequently “horizontally-organized” modules top the chart, and I view
them as anti-patterns for a few reasons (see: my post on &lt;a
href=&quot;https://www.haskellforall.com/2021/05/module-organization-guidelines-for.html&quot;&gt;Module
organization guidelines&lt;/a&gt;). These modules are not expensive &lt;em&gt;per
se&lt;/em&gt; (the code inside them has to be compiled &lt;em&gt;somewhere&lt;/em&gt;),
but they tend to be build chokepoints because they have a large number
of dependencies and reverse dependencies. Highlighting expensive modules
has a tendency to highlight these sorts of build chokepoints as a side
bonus.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In principle you can also browse a given build’s trace interactively,
like this:&lt;/p&gt;
&lt;p&gt;&lt;img
src=&quot;https://user-images.githubusercontent.com/1313787/272098736-1d1e4e7b-4122-45be-8f7b-e74f2ccddab0.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;However, for our codebase Honeycomb chokes on our giant build traces
and we can only produce visualizations like the above image if we filter
down the spans to a randomly sampled subset of modules. Honeycomb
doesn’t do a good job of handling traces with a few thousand spans or
more.&lt;/p&gt;
&lt;h4 id=&quot;workarounds&quot;&gt;Workarounds&lt;/h4&gt;
&lt;p&gt;This plugin was surprisingly difficult for me to implement because
GHC’s &lt;code&gt;Plugin&lt;/code&gt; interface is so constrained.&lt;/p&gt;
&lt;p&gt;For example, the &lt;code&gt;hs-opentelemetry-sdk&lt;/code&gt; package asks you
to finalize any &lt;code&gt;TracerProvider&lt;/code&gt; that you acquire, but
there’s no good way (that I know of&lt;a href=&quot;#fn2&quot; class=&quot;footnote-ref&quot;
id=&quot;fnref2&quot; role=&quot;doc-noteref&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;) to run finalization
logic at the end of a &lt;code&gt;ghc&lt;/code&gt; build using the
&lt;code&gt;Plugin&lt;/code&gt; interface. The purpose of this finalization logic is
to flush metrics that haven’t yet been exported.&lt;/p&gt;
&lt;p&gt;So what I did was to hack around this by detecting all modules that
are root modules of the build graph and flushing metrics after each of
those root modules is built (since one of them will be the last module
built). I tried a bunch of other alternative approaches (like installing
a &lt;a
href=&quot;https://hackage.haskell.org/package/ghc-9.6.3/docs/GHC-Driver-Pipeline-Phases.html#t:PhaseHook&quot;&gt;phase
hook&lt;/a&gt;), but this was the only approach I was able to get to work.&lt;/p&gt;
&lt;p&gt;And the OpenTelemetry plugin is full of workarounds like this. We
have vetted internally that the plugin works for normal builds,
&lt;code&gt;ghcid&lt;/code&gt; and &lt;code&gt;haskell-language-server&lt;/code&gt;, but
generally I expect there to be some trailing bugs that we’ll have to fix
as more people use it due to these various unsafe implementation
details.&lt;/p&gt;
&lt;p&gt;In fact, one limitation of the plugin is that the top-level span has
a duration of 0 (instead of reporting the duration of the build). This
is related to the same issue of the &lt;code&gt;Plugin&lt;/code&gt; interface
apparently not having a good way to run code exactly once after the
build completes (even using hacks). If somebody knows of a way to do
this that I missed I’d definitely welcome the tip!&lt;/p&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;What we do know from internal usage is that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the plugin definitely scales to very large codebases (thousands
of modules)&lt;/p&gt;
&lt;p&gt;… although honeycomb doesn’t scale to thousands of spans, but that’s
not our fault.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the plugin’s overhead is negligible (so it’s safe to always
enable)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the plugin works with &lt;code&gt;cabal&lt;/code&gt; commands,
&lt;code&gt;ghcid&lt;/code&gt;, and &lt;code&gt;haskell-language-server&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So it should be fine for most use cases, but please report any issues
that you run into.&lt;/p&gt;
&lt;aside id=&quot;footnotes&quot; class=&quot;footnotes footnotes-end-of-document&quot;
role=&quot;doc-endnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;the backend developer user experience team&lt;a
href=&quot;#fnref1&quot; class=&quot;footnote-back&quot; role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot;&gt;&lt;p&gt;I’d be really happy to be proven wrong, so if someone
knows the right way to do this please &lt;a
href=&quot;https://github.com/MercuryTechnologies/opentelemetry-plugin/issues&quot;&gt;open
an issue&lt;/a&gt; explaining this (and I can fix it myself) or submit a pull
request&lt;a href=&quot;#fnref2&quot; class=&quot;footnote-back&quot;
role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/aside&gt;
&lt;/body&gt;
&lt;/html&gt;
</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/5018344068429765373/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2023/10/a-ghc-plugin-for-opentelemetry-build.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/5018344068429765373'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/5018344068429765373'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2023/10/a-ghc-plugin-for-opentelemetry-build.html' title='A GHC plugin for OpenTelemetry build metrics'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-3230571842160075916</id><published>2023-10-02T10:36:00.002-07:00</published><updated>2023-10-02T10:36:08.404-07:00</updated><title type='text'>My views on NeoHaskell</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot;&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;My views on NeoHaskell&quot;&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;A rundown and critique of the NeoHaskell project&quot;&gt;
  &lt;title&gt;My views on NeoHaskell&lt;/title&gt;
  &lt;style&gt;
    html {
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 12px;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      html {
        background-color: white;
      }
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    svg {
      height; auto;
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, Consolas, &#39;Lucida Console&#39;, monospace;
      font-size: 85%;
      margin: 0;
      hyphens: manual;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    /* The extra [class] is a hack that increases specificity enough to
       override a similar rule in reveal.js */
    ul.task-list[class]{list-style: none;}
    ul.task-list li input[type=&quot;checkbox&quot;] {
      font-size: inherit;
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Recently &lt;a href=&quot;https://github.com/NickSeagull&quot;&gt;Nick Seagull&lt;/a&gt;
has &lt;a
href=&quot;https://dev.to/neohaskell/introducing-neohaskell-a-beacon-of-joy-in-a-greyed-tech-world-4f9b&quot;&gt;announced&lt;/a&gt;
a &lt;a href=&quot;https://neohaskell.org/&quot;&gt;NeoHaskell&lt;/a&gt; project which (I
believe) has generated some controversy. My first run-in with NeoHaskell
was &lt;a
href=&quot;https://cohost.org/ratherforky/post/2952574-utterly-overwhelmed&quot;&gt;this
post on cohost&lt;/a&gt; criticizing the NeoHaskell project and a few of my
friends within the Haskell community have expressed concern about the
NeoHaskell project. My gut reaction is also critical, but I wanted to do
a more thorough investigation before speaking publicly against
NeoHaskell so I figured I would dig into the project more first. Who
knows, maybe my gut reaction is wrong? 🤷🏻‍♀️&lt;/p&gt;
&lt;p&gt;Another reason NeoHaskell is relevant to me is that I think a lot
about marketing and product management for the Haskell community, and
even presented a talk on &lt;a
href=&quot;https://www.youtube.com/watch?v=fNpsgTIpODA&quot;&gt;How to market Haskell
mainstream programmers&lt;/a&gt; so I’m particularly keen to study NeoHaskell
through that lens to see if he is trying to approach things in a similar
way or not.&lt;/p&gt;
&lt;p&gt;I also have credentials to burnish in this regard. I have a lot of
experience with product management and technical product management for
open source projects via my work on Dhall. Not only did I author the
original implementation of Dhall but I singlehandedly built most of the
language ecosystem (including the language standard, documentation,
numerous language bindings, and the command-line tooling) and mentored
others to do the same.&lt;/p&gt;
&lt;p&gt;Anyway, with that out of the way, on to NeoHaskell:&lt;/p&gt;
&lt;h3 id=&quot;what-is-neohaskell&quot;&gt;What is NeoHaskell?&lt;/h3&gt;
&lt;p&gt;I feel like this is probably the most important question to answer
because unless there is a clear statement of purpose for a project
there’s nothing to judge; it’s “not even wrong” because there’s no
yardstick by which to measure it and nothing to challenge.&lt;/p&gt;
&lt;p&gt;So what &lt;em&gt;is&lt;/em&gt; NeoHaskell?&lt;/p&gt;
&lt;p&gt;I’ll break this into two parts: what NeoHaskell is &lt;em&gt;right now&lt;/em&gt;
and what NeoHaskell aspires to be.&lt;/p&gt;
&lt;p&gt;Based on what I’ve gathered, &lt;em&gt;right now&lt;/em&gt; NeoHaskell is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A set of user experience requirements&lt;/p&gt;
&lt;p&gt;… tracked as &lt;a
href=&quot;https://github.com/neohaskell/NeoHaskell/issues&quot;&gt;issues in this
GitHub repository&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A &lt;a href=&quot;https://neohaskell.org/&quot;&gt;website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;… which informally summarizes some of the headline requirements (such
as Python interop and mobile support)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An &lt;a
href=&quot;https://dev.to/neohaskell/introducing-neohaskell-a-beacon-of-joy-in-a-greyed-tech-world-4f9b&quot;&gt;announcement
post&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, it’s not clear what NeoHaskell aspires to be from studying
the website, the issue tracker, or announcement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Is this going to be a new programming language inspired by
Haskell?&lt;/p&gt;
&lt;p&gt;In other words, will this be a “clean room” implementation of a
language which is Haskell-like?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;… or this going to be a fork of Haskell (more specifically:
&lt;code&gt;ghc&lt;/code&gt;) to add the desired features?&lt;/p&gt;
&lt;p&gt;In other words, will the relationship of NeoHaskell to Haskell be
similar to the relationship between NeoVim and Vim? (The name seems to
suggest as much)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;… or this going to be changes to the command-line Haskell
tooling?&lt;/p&gt;
&lt;p&gt;In other words, will this be kind of like &lt;code&gt;stack&lt;/code&gt; and
promote a new suite of tools for doing Haskell development?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;… or this going to be improvements to the Haskell package
ecosystem?&lt;/p&gt;
&lt;p&gt;In other words, will this shore up and/or revive some existing
packages within the Haskell ecosystem?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s what I &lt;strong&gt;think&lt;/strong&gt; NeoHaskell aspires to be based
on carefully reading through the website and all of the issues in the
issue tracker and drawing (I believe) reasonable inferences:&lt;/p&gt;
&lt;p&gt;NeoHaskell is not going to be a fork of &lt;code&gt;ghc&lt;/code&gt; and is
instead proposing to implement the following things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new command-line tool (&lt;code&gt;neo&lt;/code&gt;) similar in spirit to
&lt;code&gt;stack&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;It is proposing some new features not present in &lt;code&gt;stack&lt;/code&gt;
but it reads to me as similar to &lt;code&gt;stack&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A GHC plugin that would add:
&lt;ul&gt;
&lt;li&gt;new language features (none proposed so far, but it aims to be a
Haskell dialect)&lt;/li&gt;
&lt;li&gt;improved error messages&lt;/li&gt;
&lt;li&gt;some improvements to the UX (e.g. automatic hole filling)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;An attempt to revive the work on a mobile (ARM) backend for
Haskell&lt;/li&gt;
&lt;li&gt;An overhaul of Haskell’s standard libraries similar in spirit to
&lt;code&gt;foundation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TemplateHaskell&lt;/code&gt; support for the &lt;code&gt;cpython&lt;/code&gt;
package for more ergonomic Python interop&lt;/li&gt;
&lt;li&gt;A set of documentation for the language and some parts of the
ecosystem&lt;/li&gt;
&lt;li&gt;An event sourcing framework
&lt;ul&gt;
&lt;li&gt;… and a set of template applications based on that framework&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And in addition to that concrete roadmap Nick Seagull is essentially
proposing the following governance model for the NeoHaskell project (and
possibly the broader Haskell ecosystem if NeoHaskell gains
traction):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Centralizing product management in himself as a benevolent
dictator&lt;/p&gt;
&lt;p&gt;I don’t believe I’m exaggerating this. Here is the relevant excerpt
from the announcement post, which explicitly references the BDFL
model:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I believe that in order for a product to be successful, the design
process &lt;strong&gt;must be centralized in a single person.&lt;/strong&gt; This
person must listen to the users, the other designers, and in general
must have an open mind to always cherry-pick all possible ideas in order
to improve the product. &lt;strong&gt;I don’t believe that a product should be
guided by democracy&lt;/strong&gt;, and neither it should implement all
suggestions by every user. In other words, I’ll be the one in charge of
generating and listening to discussions, and prioritizing the features
of the project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I understand that this comes with some risk&lt;/strong&gt;, but at
the same time I believe that all programming tools like Python and Ruby
that are very loved by their communities are like that because of the
BDFL model&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Organizing work via the NeoHaskell discord and NeoHaskell GitHub
issue tracker&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I feel like it should have been easier to gather this concrete
information about NeoHaskell’s aspirational goals, if only so that the
project is less about vibes and more a discussion on a concrete
roadmap.&lt;/p&gt;
&lt;p&gt;Alright, so now I’ll explain my general impression of this project.
I’ll start with the positive feedback followed by the negative feedback
and I’ll be a bit less reserved and more emotionally honest in my
feedback.&lt;/p&gt;
&lt;h3 id=&quot;positive-feedback&quot;&gt;Positive feedback&lt;/h3&gt;
&lt;h4 id=&quot;welcome-contributions&quot;&gt;Welcome contributions&lt;/h4&gt;
&lt;p&gt;I’m not the kind of person who will turn down someone willing to do
work to make things better as long as they don’t make things worse. A
new mobile backend for Haskell sounds great! Python interop using
&lt;code&gt;TemplateHaskell&lt;/code&gt; sounds nice! Documentation? Love it!&lt;/p&gt;
&lt;h4 id=&quot;a-ghc-plugin-is-a-good-approach&quot;&gt;A GHC plugin is a good
approach&lt;/h4&gt;
&lt;p&gt;I think the approach of implementing this as a GHC plugin is a much
better idea than forking &lt;code&gt;ghc&lt;/code&gt;. This sidesteps the ludicrous
amount of work that would be required to maintain a fork of
&lt;code&gt;ghc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Moreover, implementing any Haskell dialect as a GHC plugin actually
minimizes ecosystem fragmentation because (similar to an alternate
Prelude) it doesn’t “leak”. If one of your dependencies uses a GHC
plugin for the NeoHaskell dialect then your package doesn’t have to use
that same dialect (you can still build that dependency and code your
package in non-Neo Haskell). &lt;code&gt;cabal&lt;/code&gt; can handle that sort of
thing transparently.&lt;/p&gt;
&lt;h4 id=&quot;haskell-does-need-better-product-management&quot;&gt;Haskell does need
better product management&lt;/h4&gt;
&lt;p&gt;I think the &lt;a href=&quot;https://haskell.foundation/&quot;&gt;Haskell
foundation&lt;/a&gt; was supposed to be this (I could be wrong) but that
didn’t really seem to pan out.&lt;/p&gt;
&lt;p&gt;Either way, I think a lot of us know what good product management is
and it is strikingly absent from the ecosystem.&lt;/p&gt;
&lt;h3 id=&quot;negative-feedback&quot;&gt;Negative feedback&lt;/h3&gt;
&lt;h4 id=&quot;benevolent-dictator&quot;&gt;Benevolent dictator&lt;/h4&gt;
&lt;p&gt;I think it’s ridiculous that someone who hasn’t made significant
contributions to the Haskell ecosystem wants to become a benevolent
dictator for a project aspiring to make an outsized impact on the
Haskell ecosystem. I know that this is harsh and a personal attack on
Nick and I’m also mindful that there’s a real person behind the avatar.
&lt;strong&gt;HOWEVER,&lt;/strong&gt; when you propose to be a benevolent dictator
you are inherently &lt;em&gt;making things personal&lt;/em&gt;. A proposal to become
a benevolent dictator is essentially a referendum on you as a person.&lt;a
href=&quot;#fn1&quot; class=&quot;footnote-ref&quot; id=&quot;fnref1&quot;
role=&quot;doc-noteref&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And it’s not just a matter of fairness or whatever. Nick’s lack of
Haskell credentials directly impact his ability to actually meaningfully
improve upon prior art if he doesn’t understand the current state of the
art. Like, when Michael Snoyman created &lt;code&gt;stack&lt;/code&gt; it did lead
to a lot of fragmentation in the Haskell tooling but at least I felt
like he was justified in his attempt because he had an impressive track
record and a deep understanding of the Haskell ecosystem and
toolchain.&lt;/p&gt;
&lt;p&gt;I do not get anything remotely resembling that impression from Nick
Seagull. He strikes me as a dilettante in this area and not just due to
his lack of Haskell credentials but also due to some of his questionable
proposed changes. This brings me to:&lt;/p&gt;
&lt;h4 id=&quot;unwelcome-contributions&quot;&gt;Unwelcome contributions&lt;/h4&gt;
&lt;p&gt;Not all contributions benefit the ecosystem&lt;a href=&quot;#fn2&quot;
class=&quot;footnote-ref&quot; id=&quot;fnref2&quot; role=&quot;doc-noteref&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;. I
think proposing a new &lt;code&gt;neo&lt;/code&gt; build tool is likely to fragment
the tooling in a way similar to &lt;code&gt;stack&lt;/code&gt;. I have worked pretty
extensively with all three of &lt;code&gt;cabal&lt;/code&gt;, &lt;code&gt;stack&lt;/code&gt; and
Nix throughout my career and my intuition based on that experience is
that the only improvement to the Haskell command-line experience that is
viable and that will “win” in the long run is one that is directly
upstreamed into &lt;code&gt;cabal&lt;/code&gt;. It’s just that nobody wants to do
that because it’s not as glamorous as writing your own build tool.&lt;/p&gt;
&lt;p&gt;Similarly, I think his proposed vision of “event source all the
Haskell applications” (including &lt;a
href=&quot;https://github.com/neohaskell/NeoHaskell/issues/39&quot;&gt;command-line
scripts&lt;/a&gt;) is poorly thought out. I firmly subscribe to the &lt;a
href=&quot;https://en.wikipedia.org/wiki/Rule_of_least_power&quot;&gt;principle of
least power&lt;/a&gt; which says that you should use the simplest type or
abstraction available that gets the job done instead of trying to
shoehorn everything into the same “god type” or “god abstraction”. I
learned this the hard way when I tried to shoehorn everything into my &lt;a
href=&quot;https://hackage.haskell.org/package/pipes&quot;&gt;&lt;code&gt;pipes&lt;/code&gt;&lt;/a&gt;
package and realized that it was a huge mistake, so it’s not like I’m
innocent in this regard. Don’t make the same mistake I did.&lt;/p&gt;
&lt;p&gt;And it &lt;em&gt;matters&lt;/em&gt; that some of these proposed changes are
counterproductive because if he indeed plays a role as a benevolent
dictator you’re not going to get to pick and choose which changes to
keep and which changes to ignore. You’re getting the whole package, like
it or not.&lt;/p&gt;
&lt;h4 id=&quot;not-good-product-management&quot;&gt;Not good product management&lt;/h4&gt;
&lt;p&gt;I don’t believe NeoHaskell is the good product management we’re all
looking for. “Haskell dialect + python interop + event sourcing + mobile
backend” is not a product. It’s an odd bundle of features that don’t
have a clear market or vertical or use case to constrain the design and
navigate tradeoffs. The NeoHaskell roadmap comes across to me as a grab
bag of unrelated features which individually sound good but that is not
necessarily good product management.&lt;/p&gt;
&lt;p&gt;To make this concrete: what is the purpose of bundling both python
interop and a mobile backend into NeoHaskell’s roadmap? As far as I know
there is no product vertical that requires both of those things.&lt;/p&gt;
&lt;h4 id=&quot;the-overall-vibe-is-bad&quot;&gt;The overall vibe is bad&lt;/h4&gt;
&lt;p&gt;My initial impression of NeoHaskell was that it struck me as
bullshit. Carefully note that I’m not saying that Nick is a bullshitter,
but if he wants to be taken seriously then he needs to rethink how he
presents his ideas. Everything from the tone of the announcement post
(including the irrelevant AI-generated images), the complete absence of
any supporting code or mockups, and the wishy washy statement of purpose
all contributed to the non-serious vibes.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Anyway, I don’t hate Nick and I’m pretty sure I’d get along with him
great in person in other contexts. He also seems like a decently
accomplished guy in other respects. However, I think nominating himself
as a benevolent dictator for an ambitious ecosystem is a bit
irresponsible. However, we all make mistakes and can learn from
them.&lt;/p&gt;
&lt;p&gt;And I don’t endorse NeoHaskell. I don’t think it’s any more likely to
succeed than Haskell absent some better product management. “I like
simple Haskell tailored to blue collar engineers” is a nice vibe but
it’s not a product.&lt;/p&gt;
&lt;aside id=&quot;footnotes&quot; class=&quot;footnotes footnotes-end-of-document&quot;
role=&quot;doc-endnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;This is one of many reasons I never wanted to become
benevolent dictator of Dhall despite how often people try to make me
one. One of the first things I did when Dhall got adoption was to set up
an egalitarian governance structure.&lt;a href=&quot;#fnref1&quot;
class=&quot;footnote-back&quot; role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot;&gt;&lt;p&gt;I don’t think it’s bad for people to just publish open
source projects, but when they attempt to rally social support and
gather mindshare for their projects then in my view there is potential
for harm if they’re not thought through since social structures are
sticky.&lt;a href=&quot;#fnref2&quot; class=&quot;footnote-back&quot;
role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/aside&gt;
&lt;/body&gt;
&lt;/html&gt;
</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/3230571842160075916/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2023/10/my-views-on-neohaskell.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/3230571842160075916'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/3230571842160075916'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2023/10/my-views-on-neohaskell.html' title='My views on NeoHaskell'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-4546680616152210823</id><published>2023-09-08T07:57:00.003-07:00</published><updated>2023-09-19T14:16:37.321-07:00</updated><title type='text'>GHC plugin for HLint</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;GHC plugin for HLint&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;An announcement post for a maintained GHC plugin for HLint&quot; /&gt;
  &lt;title&gt;GHC plugin for HLint&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;At &lt;a href=&quot;https://github.com/MercuryTechnologies&quot;&gt;work&lt;/a&gt; I was
recently experimenting with running &lt;a
href=&quot;https://github.com/ndmitchell/hlint#hlint---&quot;&gt;&lt;code&gt;hlint&lt;/code&gt;&lt;/a&gt;
(the widely used Haskell linting program) as a &lt;a
href=&quot;https://downloads.haskell.org/ghc/latest/docs/users_guide/extending_ghc.html#compiler-plugins&quot;&gt;GHC
plugin&lt;/a&gt;. One reason why I was interested in this is because we have a
large (6000+ module) Haskell codebase at work, and I wanted to see if
this would make it cheaper to run &lt;code&gt;hlint&lt;/code&gt; on our codebase.
Ultimately it did not work out but I built something that we could open
source so I polished it up and released it in case other people find it
useful. You can find the plugin (named &lt;code&gt;hlint-plugin&lt;/code&gt;) on &lt;a
href=&quot;https://hackage.haskell.org/package/hlint-plugin&quot;&gt;Hackage&lt;/a&gt; and
on &lt;a
href=&quot;https://github.com/MercuryTechnologies/hlint-plugin&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post will explain the background and motivation behind this work
to explain why such a plugin might be potentially useful to other
Haskell users.&lt;/p&gt;
&lt;h4 id=&quot;introduction-to-hlint&quot;&gt;Introduction to &lt;code&gt;hlint&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;If you’ve never heard of &lt;code&gt;hlint&lt;/code&gt; before, it’s a Haskell
source code linting tool that is pretty widely used in the Haskell
ecosystem. For example, if you run &lt;code&gt;hlint&lt;/code&gt; on the following
Haskell file:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;main ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;main &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… then you’ll get the following &lt;code&gt;hlint&lt;/code&gt; error message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Main.hs:2:8-15: Warning: Redundant bracket
Found:
  (mempty)
Perhaps:
  mempty
  
1 hint&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… telling the user to remove the parentheses&lt;a href=&quot;#fn1&quot;
class=&quot;footnote-ref&quot; id=&quot;fnref1&quot; role=&quot;doc-noteref&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;
from around the &lt;code&gt;mempty&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;integrating-hlint&quot;&gt;Integrating &lt;code&gt;hlint&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;However, &lt;code&gt;hlint&lt;/code&gt; is a tool that is not integrated into the
compiler, meaning that you have to run it out of band from compilation
for it to catch errors. There are a few ways that one can fix this,
though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a script that builds your program and then runs
&lt;code&gt;hlint&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is the simplest possible thing that one can do, but it works and
some people do this. It’s the “low-tech” solution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;a
href=&quot;https://github.com/haskell/haskell-language-server&quot;&gt;&lt;code&gt;haskell-language-server&lt;/code&gt;&lt;/a&gt;
or some IDE that plugin that auto-runs &lt;code&gt;hlint&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is a bit nicer for developers because now they can get rapid
feedback (in their editor) as they are authoring the code. For example,
&lt;code&gt;haskell-language-server&lt;/code&gt; supports an &lt;a
href=&quot;https://github.com/haskell/haskell-language-server/tree/master/plugins/hls-hlint-plugin#hlint-plugin-for-the-haskell-language-server&quot;&gt;&lt;code&gt;hlint&lt;/code&gt;
plugin&lt;/a&gt;&lt;a href=&quot;#fn2&quot; class=&quot;footnote-ref&quot; id=&quot;fnref2&quot;
role=&quot;doc-noteref&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; for this purpose.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A GHC plugin (what this post is about)&lt;/p&gt;
&lt;p&gt;If you turn &lt;code&gt;hlint&lt;/code&gt; into a GHC plugin, then
&lt;strong&gt;ALL&lt;/strong&gt; GHC-based Haskell tools automatically incorporate
&lt;code&gt;hlint&lt;/code&gt; suggestions. For example, &lt;a
href=&quot;https://github.com/ndmitchell/ghcid&quot;&gt;&lt;code&gt;ghcid&lt;/code&gt;&lt;/a&gt; would
automatically include &lt;code&gt;hlint&lt;/code&gt; suggestions in its output,
something that doesn’t work with other approaches to integrate
&lt;code&gt;hlint&lt;/code&gt;. Similarly, all &lt;code&gt;cabal&lt;/code&gt; commands
(including &lt;code&gt;cabal build&lt;/code&gt; and &lt;code&gt;cabal repl&lt;/code&gt;) and all
&lt;code&gt;stack&lt;/code&gt; commands benefit from a GHC plugin.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h4&gt;
&lt;p&gt;I’m not the first person who had this idea of turning
&lt;code&gt;hlint&lt;/code&gt; into a GHC plugin. The first attempt to do this was
&lt;a
href=&quot;https://github.com/ocharles/hlint-source-plugin&quot;&gt;&lt;code&gt;hlint-source-plugin&lt;/code&gt;&lt;/a&gt;,
but that was a pretty low-tech solution; it basically ran
&lt;code&gt;hlint&lt;/code&gt; as an executable on the Haskell source file being
processed even though the GHC plugin already has access to the parsed
syntax tree.&lt;/p&gt;
&lt;p&gt;The second attempt was the &lt;a
href=&quot;https://github.com/tfausak/splint&quot;&gt;&lt;code&gt;splint&lt;/code&gt;&lt;/a&gt;
package. This GHC plugin was really well done (it’s basically exactly
how I envisioned this was supposed to work) and the corresponding &lt;a
href=&quot;https://taylor.fausak.me/2020/05/25/running-hlint-as-a-ghc-source-plugin/&quot;&gt;announcement
post&lt;/a&gt; does a great job of motivating why &lt;code&gt;hlint&lt;/code&gt; benefits
from being run as a GHC plugin.&lt;/p&gt;
&lt;p&gt;However, the problem is that the &lt;code&gt;splint&lt;/code&gt; package was
recently abandoned and the last version of GHC it supports is GHC 9.2.
Since we use GHC 9.6 at work I decided to essentially revive the
&lt;code&gt;splint&lt;/code&gt; package so I created the &lt;code&gt;hlint-plugin&lt;/code&gt;
package which is essentially the successor to &lt;code&gt;splint&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;improvements&quot;&gt;Improvements&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;hlint-plugin&lt;/code&gt; is not too different from what
&lt;code&gt;splint&lt;/code&gt; did, but the main improvements that
&lt;code&gt;hlint-plugin&lt;/code&gt; brings are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Support for newer versions of GHC&lt;/p&gt;
&lt;p&gt;&lt;code&gt;splint&lt;/code&gt; supports GHC versions 8.10, 9.0, and 9.2 whereas
&lt;code&gt;hlint-plugin&lt;/code&gt; supports GHC versions 9.0, 9.2, 9.4, and
9.6.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Known-good &lt;code&gt;cabal&lt;/code&gt;/&lt;code&gt;stack&lt;/code&gt;/&lt;code&gt;nix&lt;/code&gt;
builds for the plugin&lt;/p&gt;
&lt;p&gt;… see the next section for more details.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A test suite to verify that the plugin works&lt;/p&gt;
&lt;p&gt;&lt;a
href=&quot;https://github.com/MercuryTechnologies/hlint-plugin/blob/6dad879364a338748c53ef3a9f2b9742fb3cd054/flake.nix#L93-L126&quot;&gt;&lt;code&gt;hlint-plugin&lt;/code&gt;’s
CI&lt;/a&gt; actually checks that the plugin works for all supported versions
of GHC.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A simpler work-around to &lt;a
href=&quot;https://gitlab.haskell.org/ghc/ghc/issues/18261&quot;&gt;GHC issue
#18261&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Basically, I independently stumbled upon the exact same problem that
&lt;code&gt;splint&lt;/code&gt; encountered, but worked around it in a simpler way.
I won’t go into too much detail here other than to point out that you
can compare how &lt;a
href=&quot;https://github.com/tfausak/splint/blob/9028a8b631568dc5d16a74153b1a9b6e3cde0fe6/src/lib/Splint/Settings.hs&quot;&gt;&lt;code&gt;splint&lt;/code&gt;
works around this bug&lt;/a&gt; with how &lt;a
href=&quot;https://github.com/MercuryTechnologies/hlint-plugin/blob/main/src/HLint/Plugin/Settings.hs&quot;&gt;&lt;code&gt;hlint-plugin&lt;/code&gt;
works around the bug&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, when stress testing &lt;code&gt;hlint-plugin&lt;/code&gt; on our internal
codebase I discovered &lt;a
href=&quot;https://github.com/ndmitchell/hlint/pull/1538&quot;&gt;an
&lt;code&gt;hlint&lt;/code&gt; bug&lt;/a&gt; which affected some of our modules, and fixed
that, so the fix will be in the next release of &lt;code&gt;hlint&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;tricky-build-stuff&quot;&gt;Tricky build stuff&lt;/h4&gt;
&lt;p&gt;Unfortunately, both &lt;code&gt;splint&lt;/code&gt; and &lt;code&gt;hlint-plugin&lt;/code&gt;
are tricky to correctly install. Why? Because, by default
&lt;code&gt;hlint&lt;/code&gt; (and &lt;code&gt;ghc-lib-parser-ex&lt;/code&gt;) use the
&lt;code&gt;ghc-lib&lt;/code&gt; and &lt;code&gt;ghc-lib-parser&lt;/code&gt; packages by default
instead of the &lt;code&gt;ghc&lt;/code&gt; API. This is actually a pain in the ass
because a GHC plugin needs to be created using the &lt;code&gt;ghc&lt;/code&gt; API
(i.e. it needs to be a value of type
&lt;code&gt;ghc:GHC.Plugins.Plugin&lt;/code&gt;). Like, you can use
&lt;code&gt;hlint&lt;/code&gt; to create a &lt;code&gt;ghc-lib:GHC.Plugins.Plugin&lt;/code&gt;
and everything will type-check and build, but then when you try to
actually run the plugin it will fail.&lt;/p&gt;
&lt;p&gt;There is a way to get &lt;code&gt;hlint&lt;/code&gt; and
&lt;code&gt;ghc-lib-parser-ex&lt;/code&gt; to use the &lt;code&gt;ghc&lt;/code&gt; API, though!
However, you have to build them with non-default &lt;code&gt;cabal&lt;/code&gt;
configure flags. Specifically, you have to configure &lt;code&gt;hlint&lt;/code&gt;
with the &lt;code&gt;-f-ghc-lib&lt;/code&gt; option and configure
&lt;code&gt;ghc-lib-parser-ex&lt;/code&gt; with the &lt;code&gt;-fno-ghc-lib&lt;/code&gt;
option.&lt;/p&gt;
&lt;p&gt;To ease things for users I provided a &lt;code&gt;cabal.project&lt;/code&gt; file
and a &lt;code&gt;flake.nix&lt;/code&gt; file&lt;a href=&quot;#fn4&quot; class=&quot;footnote-ref&quot;
id=&quot;fnref4&quot; role=&quot;doc-noteref&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; with working builds for
&lt;code&gt;hlint-plugin&lt;/code&gt; that set all the correct configuration
options.&lt;/p&gt;
&lt;h4 id=&quot;performance&quot;&gt;Performance&lt;/h4&gt;
&lt;p&gt;I mentioned in the introduction that I was hoping for some
performance improvements from switching to a plugin but those
improvements didn’t materialize. I’ll talk a bit about what I
&lt;em&gt;thought&lt;/em&gt; would work and why it didn’t pan out for us (even
though it still might help for you).&lt;/p&gt;
&lt;p&gt;So there are up to three ways that &lt;code&gt;hlint&lt;/code&gt; could
potentially be faster as a GHC plugin:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Not having to re-lint modules that haven’t changed&lt;/p&gt;
&lt;p&gt;This is nice (especially when your codebase has 6000+ modules like
ours). When you turn &lt;code&gt;hlint&lt;/code&gt; into a GHC plugin you only run
it whenever GHC recompiles a module and you don’t have to run
&lt;code&gt;hlint&lt;/code&gt; over your entire codebase after every change.&lt;/p&gt;
&lt;p&gt;However, this was actually not a significant benefit to our company
because we already have some scripts which take care of only running
&lt;code&gt;hlint&lt;/code&gt; on the modules that have changed (according to
&lt;code&gt;git&lt;/code&gt;). However, it’s still a “nice to have” because it’s
architecturally simpler (no need to write that clever script if GHC can
take care of detecting changes for us).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not having to parse the Haskell code twice&lt;/p&gt;
&lt;p&gt;This is likely a minor performance improvement since parsing is (in
my experience) typically not the bottleneck for compiling Haskell
code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Running &lt;code&gt;hlint&lt;/code&gt; while GHC is compiling modules&lt;/p&gt;
&lt;p&gt;What I mean by this is that if &lt;code&gt;hlint&lt;/code&gt; is a GHC plugin
then it can begin running while the GHC build is ongoing! In large
builds (like ours) there are often a large number of cores that go
unused and the &lt;code&gt;hlint&lt;/code&gt; plugin could potentially exploit those
idle cores to do work before the build is done.&lt;/p&gt;
&lt;p&gt;However, in practice this benefit did &lt;em&gt;not&lt;/em&gt; pan out and our
build didn&#39;t really get faster when we enabled
&lt;code&gt;hlint-plugin&lt;/code&gt;. The time it took to build our codebase with
the plugin was essentially the same amount of time as running &lt;code&gt;hlint&lt;/code&gt;
in a separate step.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;future-directions&quot;&gt;Future directions&lt;/h4&gt;
&lt;p&gt;The &lt;a
href=&quot;https://github.com/ocharles/hlint-source-plugin#future-work&quot;&gt;&lt;code&gt;hlint-source-plugin&lt;/code&gt;
repository&lt;/a&gt; notes that if &lt;code&gt;hlint&lt;/code&gt; were implemented as a
GHC plugin (which it now is) then it would fix some of the hacks that
&lt;code&gt;hlint&lt;/code&gt; has to use:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Currently this plugin simply hooks into the parse stage and calls
HLint with a file path. This means HLint will re-parse all source code.
The next logical step is to use the actual parse tree, as given to us by
GHC, and HLint that. This means that HLint can lose the special logic to
run CPP, along with the hacky handling of fixity resolution (we get that
done correctly by GHC’s renaming phase).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;… because of this I sort of feel that &lt;code&gt;hlint&lt;/code&gt; really
should be a GHC plugin. It’s understandable why &lt;code&gt;hlint&lt;/code&gt; was
not initially implemented in this way (since I believe the GHC plugin
system didn’t exist back then), but now it sort of feels like a GHC
plugin is a much more natural way of integrating &lt;code&gt;hlint&lt;/code&gt;.&lt;/p&gt;
&lt;section class=&quot;footnotes footnotes-end-of-document&quot;
role=&quot;doc-endnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;I refuse to call parentheses
“brackets”.&lt;a href=&quot;#fnref1&quot; class=&quot;footnote-back&quot;
role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;Note that this is a plugin for
&lt;code&gt;haskell-language-server&lt;/code&gt;, which is a different type of
plugin than a GHC plugin. A &lt;code&gt;haskell-language-server&lt;/code&gt; plugin
only works with &lt;code&gt;haskell-language-server&lt;/code&gt; whereas a GHC
plugin works with anything that uses GHC. The two types of plugins are
also installed and set up in different ways.&lt;a href=&quot;#fnref2&quot;
class=&quot;footnote-back&quot; role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn3&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;Note that this is a plugin for
&lt;code&gt;haskell-language-server&lt;/code&gt;, which is a different type of
plugin than a GHC plugin. A &lt;code&gt;haskell-language-server&lt;/code&gt; plugin
only works with &lt;code&gt;haskell-language-server&lt;/code&gt; whereas a GHC
plugin works with anything that uses GHC. The two types of plugins are
also installed and set up in different ways.&lt;a href=&quot;#fnref3&quot;
class=&quot;footnote-back&quot; role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn4&quot; role=&quot;doc-endnote&quot;&gt;&lt;p&gt;I tried to create a working
&lt;code&gt;stack.yaml&lt;/code&gt; and failed to get it working, but I’d accept a
pull request adding a working &lt;code&gt;stack&lt;/code&gt; build if someone else
has better luck than I did.&lt;a href=&quot;#fnref4&quot; class=&quot;footnote-back&quot;
role=&quot;doc-backlink&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;/body&gt;
&lt;/html&gt;
</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/4546680616152210823/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2023/09/ghc-plugin-for-hlint.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/4546680616152210823'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/4546680616152210823'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2023/09/ghc-plugin-for-hlint.html' title='GHC plugin for HLint'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-836754983496104918</id><published>2023-04-03T07:19:00.002-07:00</published><updated>2023-04-03T07:33:20.990-07:00</updated><title type='text'>Ergonomic newtypes for Haskell strings and numbers</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot;&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;Ergonomic newtypes for Haskell strings and numbers&quot;&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;A trick to elide newtypes around Haskell strings and numbers&quot;&gt;
  &lt;title&gt;Ergonomic newtypes for Haskell strings and numbers&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;This blog post summarizes a very brief trick I commonly recommend
whenever I see something like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Text&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Numeric.Natural&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; getName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; getAge ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; name ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; age ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;#cb1-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;, age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;42&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… where the &lt;code&gt;newtype&lt;/code&gt;s are not opaque (i.e. the
&lt;code&gt;newtype&lt;/code&gt; constructors are exported), so the
&lt;code&gt;newtype&lt;/code&gt;s are more for documentation purposes rather than
type safety.&lt;/p&gt;
&lt;p&gt;The issue with the above code is that the &lt;code&gt;newtype&lt;/code&gt;s add
extra boilerplate for both creating and displaying those types. For
example, in order to create the &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Age&lt;/code&gt;
&lt;code&gt;newtype&lt;/code&gt;s you need to explicitly specify the
&lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Age&lt;/code&gt; constructors (like in the
definition for &lt;code&gt;example&lt;/code&gt; above) and they also show up when
displaying values for debugging purposes (e.g. in the REPL):&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; example&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; {name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; {getName &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;}, age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; {getAge &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;42&lt;/span&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fortunately, you can easily elide these noisy constructors if you
follow these rules of thumb:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Derive &lt;code&gt;IsString&lt;/code&gt; for &lt;code&gt;newtype&lt;/code&gt;s around
string-like types&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Derive &lt;code&gt;Num&lt;/code&gt; for &lt;code&gt;newtype&lt;/code&gt;s around numeric
types&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change the &lt;code&gt;Show&lt;/code&gt; instances to use the underlying
&lt;code&gt;Show&lt;/code&gt; for the wrapped type&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, I would suggest amending the original code like
this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE DerivingStrategies         #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE GeneralizedNewtypeDeriving #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE OverloadedStrings          #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Example1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Text&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.String&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;IsString&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-9&quot;&gt;&lt;a href=&quot;#cb3-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Numeric.Natural&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-10&quot;&gt;&lt;a href=&quot;#cb3-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-11&quot;&gt;&lt;a href=&quot;#cb3-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; getName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb3-12&quot;&gt;&lt;a href=&quot;#cb3-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;IsString&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-13&quot;&gt;&lt;a href=&quot;#cb3-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-14&quot;&gt;&lt;a href=&quot;#cb3-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; getAge ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb3-15&quot;&gt;&lt;a href=&quot;#cb3-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Num&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-16&quot;&gt;&lt;a href=&quot;#cb3-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-17&quot;&gt;&lt;a href=&quot;#cb3-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; name ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; age ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb3-18&quot;&gt;&lt;a href=&quot;#cb3-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; stock (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-19&quot;&gt;&lt;a href=&quot;#cb3-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-20&quot;&gt;&lt;a href=&quot;#cb3-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-21&quot;&gt;&lt;a href=&quot;#cb3-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;, age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;42&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and now the &lt;code&gt;Age&lt;/code&gt; and &lt;code&gt;Name&lt;/code&gt; constructors are
invisible, even when displaying these types (using their
&lt;code&gt;Show&lt;/code&gt; instances):&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; example&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; {name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;, age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;42&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is the entirety of the trick, but if you still don’t follow,
I’ll expand upon that below.&lt;/p&gt;
&lt;h4 id=&quot;explanation&quot;&gt;Explanation&lt;/h4&gt;
&lt;p&gt;Revisiting the starting code:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Text&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Numeric.Natural&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; getName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb5-7&quot;&gt;&lt;a href=&quot;#cb5-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb5-8&quot;&gt;&lt;a href=&quot;#cb5-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-9&quot;&gt;&lt;a href=&quot;#cb5-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; getAge ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb5-10&quot;&gt;&lt;a href=&quot;#cb5-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb5-11&quot;&gt;&lt;a href=&quot;#cb5-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-12&quot;&gt;&lt;a href=&quot;#cb5-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; name ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt;,&lt;span class=&quot;ot&quot;&gt; age ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb5-13&quot;&gt;&lt;a href=&quot;#cb5-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb5-14&quot;&gt;&lt;a href=&quot;#cb5-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-15&quot;&gt;&lt;a href=&quot;#cb5-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-16&quot;&gt;&lt;a href=&quot;#cb5-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;, age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;42&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… the first thing we’re going to do is to enable the
&lt;code&gt;DerivingStrategies&lt;/code&gt; language extension because I’m going to
lean pretty heavily on Haskell’s support for deriving typeclass
instances in this post and I want to be more explicit about how these
instances are being derived:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE DerivingStrategies #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; getName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; stock (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;#cb6-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-6&quot;&gt;&lt;a href=&quot;#cb6-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; getAge ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb6-7&quot;&gt;&lt;a href=&quot;#cb6-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; stock (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I’ve changed the code to explicitly specify that we’re
&lt;code&gt;deriving&lt;/code&gt; &lt;code&gt;Show&lt;/code&gt; using the “&lt;code&gt;stock&lt;/code&gt;”
deriving strategy, meaning that Haskell has built-in language support
for deriving &lt;code&gt;Show&lt;/code&gt; and we’re going to use that.&lt;/p&gt;
&lt;p&gt;The next step is that we’re going to add an &lt;code&gt;IsString&lt;/code&gt;
instance for &lt;code&gt;Name&lt;/code&gt; because it wraps a string-like type
(&lt;code&gt;Text&lt;/code&gt;). However, at first we’ll write out the instance by
hand:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.String&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;IsString&lt;/span&gt;(..))&lt;/span&gt;
&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IsString&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fromString string &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; (fromString string)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This &lt;code&gt;IsString&lt;/code&gt; instance works in conjunction with
Haskell’s &lt;code&gt;OverloadedStrings&lt;/code&gt; so that we can directly use a
string literal in place of a &lt;code&gt;Name&lt;/code&gt;, like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;, age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;42&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                      &lt;span class=&quot;co&quot;&gt;-- ↑&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb8-4&quot;&gt;&lt;a href=&quot;#cb8-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                      &lt;span class=&quot;co&quot;&gt;-- No more Name constructor required here&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and the reason that works is because the compiler implicitly
inserts &lt;code&gt;fromString&lt;/code&gt; around all string literals when you
enable &lt;code&gt;OverloadedStrings&lt;/code&gt;, as if we had written this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; fromString &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;, age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;42&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;IsString&lt;/code&gt; instance for &lt;code&gt;Name&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IsString&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fromString string &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; (fromString string)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… essentially defers to the &lt;code&gt;IsString&lt;/code&gt; instance for the
underlying wrapped type (&lt;code&gt;Text&lt;/code&gt;). In fact, this pattern of
deferring to the underlying instance is common enough that Haskell
provides a language extension for this purpose:
&lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt;. If we enable that language
extension, then we can simplify the &lt;code&gt;IsString&lt;/code&gt; instance to
this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE GeneralizedNewtypeDeriving #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;#cb11-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-3&quot;&gt;&lt;a href=&quot;#cb11-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; getName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb11-4&quot;&gt;&lt;a href=&quot;#cb11-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; stock (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb11-5&quot;&gt;&lt;a href=&quot;#cb11-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;IsString&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;deriving newtype&lt;/code&gt; indicates that we’re explicitly
using the &lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt; extension to derive
the implementation for the &lt;code&gt;IsString&lt;/code&gt; instance.&lt;/p&gt;
&lt;p&gt;In this particular case we don’t have to specify the deriving
strategy; we could have just said &lt;code&gt;deriving (IsString)&lt;/code&gt; and
it still would have worked because it wasn’t ambiguous; no other
deriving strategy would have worked in this case. However, as we’re
about to see there are cases where you want to explicitly disambiguate
between multiple possible deriving strategies.&lt;/p&gt;
&lt;p&gt;The next step is that we implement &lt;code&gt;Num&lt;/code&gt; for our
&lt;code&gt;Age&lt;/code&gt; type since it wraps a numeric type
(&lt;code&gt;Natural&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Num&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;#cb12-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; y &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; (x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; y)&lt;/span&gt;
&lt;span id=&quot;cb12-3&quot;&gt;&lt;a href=&quot;#cb12-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-4&quot;&gt;&lt;a href=&quot;#cb12-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; y &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; (x &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; y)&lt;/span&gt;
&lt;span id=&quot;cb12-5&quot;&gt;&lt;a href=&quot;#cb12-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-6&quot;&gt;&lt;a href=&quot;#cb12-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; y &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; (x &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; y)&lt;/span&gt;
&lt;span id=&quot;cb12-7&quot;&gt;&lt;a href=&quot;#cb12-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-8&quot;&gt;&lt;a href=&quot;#cb12-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;negate&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; x) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;negate&lt;/span&gt; x)&lt;/span&gt;
&lt;span id=&quot;cb12-9&quot;&gt;&lt;a href=&quot;#cb12-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-10&quot;&gt;&lt;a href=&quot;#cb12-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;abs&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; x) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;abs&lt;/span&gt; x)&lt;/span&gt;
&lt;span id=&quot;cb12-11&quot;&gt;&lt;a href=&quot;#cb12-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-12&quot;&gt;&lt;a href=&quot;#cb12-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;signum&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; x) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;signum&lt;/span&gt; x)&lt;/span&gt;
&lt;span id=&quot;cb12-13&quot;&gt;&lt;a href=&quot;#cb12-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-14&quot;&gt;&lt;a href=&quot;#cb12-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;fromInteger&lt;/span&gt; integer &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fromInteger&lt;/span&gt; integer)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bleh! That’s a lot of work to do when really we were most interested
in the &lt;code&gt;fromInteger&lt;/code&gt; method (so that we could use numeric
literals directly to create an &lt;code&gt;Age&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The reason we care about the &lt;code&gt;fromInteger&lt;/code&gt; method is
because Haskell lets you use integer literals for any type that
implements &lt;code&gt;Num&lt;/code&gt; (without any language extension; this is
part of the base language). So, for example, we can further simplify our
&lt;code&gt;example&lt;/code&gt; &lt;code&gt;Person&lt;/code&gt; to:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-2&quot;&gt;&lt;a href=&quot;#cb13-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;, age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;42&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb13-3&quot;&gt;&lt;a href=&quot;#cb13-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                                        &lt;span class=&quot;co&quot;&gt;-- ↑&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-4&quot;&gt;&lt;a href=&quot;#cb13-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                                        &lt;span class=&quot;co&quot;&gt;-- No more Age constructor required here&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and the reason that works is because the compiler implicitly
inserts &lt;code&gt;fromInteger&lt;/code&gt; around all integer literals, as if we
had written this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;example ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;#cb14-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;example &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt;{ name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;, age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fromInteger&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;42&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;It would be nice if Haskell had a dedicated class for just the
&lt;code&gt;fromInteger&lt;/code&gt; method (e.g. &lt;code&gt;IsInteger&lt;/code&gt;), but alas
if we want ergonomic support for numeric literals then we have to add
support for other numeric operations, too, even if they might not
necessarily make sense for our &lt;code&gt;newtype&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Like before, though, we can use the
&lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt; extension to derive
&lt;code&gt;Num&lt;/code&gt; instead:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;#cb15-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; getAge ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb15-2&quot;&gt;&lt;a href=&quot;#cb15-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; stock (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb15-3&quot;&gt;&lt;a href=&quot;#cb15-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Num&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Much better!&lt;/p&gt;
&lt;p&gt;However, we’re not done, yet, because at the moment these
&lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Age&lt;/code&gt; constructors still appear in the
debug output:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;#cb16-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; example&lt;/span&gt;
&lt;span id=&quot;cb16-2&quot;&gt;&lt;a href=&quot;#cb16-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; {name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; {getName &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;}, age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; {getAge &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;42&lt;/span&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yuck!&lt;/p&gt;
&lt;p&gt;Okay, so the final step is to change the &lt;code&gt;Show&lt;/code&gt; instances
for &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Age&lt;/code&gt; to defer to the
&lt;code&gt;Show&lt;/code&gt; instances for their underlying types:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;#cb17-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb17-2&quot;&gt;&lt;a href=&quot;#cb17-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;show&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; string) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;show&lt;/span&gt; string&lt;/span&gt;
&lt;span id=&quot;cb17-3&quot;&gt;&lt;a href=&quot;#cb17-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb17-4&quot;&gt;&lt;a href=&quot;#cb17-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb17-5&quot;&gt;&lt;a href=&quot;#cb17-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;show&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; natural) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;show&lt;/span&gt; natural&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These are still valid &lt;code&gt;Show&lt;/code&gt; instances! The
&lt;code&gt;Show&lt;/code&gt; class requires that the displayed representation
should be valid Haskell code for creating a value of that type, and in
both cases that’s what we get.&lt;/p&gt;
&lt;p&gt;For example, if you &lt;code&gt;show&lt;/code&gt; a value like
&lt;code&gt;Name &quot;John Doe&quot;&lt;/code&gt; you will get &lt;code&gt;&quot;John Doe&quot;&lt;/code&gt;, and
that’s valid Haskell code for creating a &lt;code&gt;Name&lt;/code&gt; if you enable
&lt;code&gt;OverloadedStrings&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: You might argue that this is not a valid &lt;code&gt;Show&lt;/code&gt;
instance because it requires the use of a language extension
(e.g. &lt;code&gt;OverloadedStrings&lt;/code&gt;) in order to be valid code.
However, this is no different than the &lt;code&gt;Show&lt;/code&gt; instance for
&lt;code&gt;Text&lt;/code&gt; (which is also only valid if you enable
&lt;code&gt;OverloadedStrings&lt;/code&gt;), and most people do not take issue with
that &lt;code&gt;Show&lt;/code&gt; instance for &lt;code&gt;Text&lt;/code&gt; either.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Similarly, if you &lt;code&gt;show&lt;/code&gt; a value like &lt;code&gt;Age 42&lt;/code&gt;
you will get &lt;code&gt;42&lt;/code&gt;, and that’s valid Haskell code for creating
an &lt;code&gt;Age&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So with those two new &lt;code&gt;Show&lt;/code&gt; instances our
&lt;code&gt;Person&lt;/code&gt; type now renders much more compactly:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;#cb18-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; example&lt;/span&gt;
&lt;span id=&quot;cb18-2&quot;&gt;&lt;a href=&quot;#cb18-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Person&lt;/span&gt; {name &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;, age &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;42&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… but we’re not done! The last part of the trick is to use
&lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt; to derive the &lt;code&gt;Show&lt;/code&gt;
instances, like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb19&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb19-1&quot;&gt;&lt;a href=&quot;#cb19-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; getName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb19-2&quot;&gt;&lt;a href=&quot;#cb19-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;IsString&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb19-3&quot;&gt;&lt;a href=&quot;#cb19-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb19-4&quot;&gt;&lt;a href=&quot;#cb19-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Age&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; getAge ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb19-5&quot;&gt;&lt;a href=&quot;#cb19-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Num&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and this is where the &lt;code&gt;DerivingStrategies&lt;/code&gt; language
extension really matters! Without that extension there would be no way
to tell the compiler to derive &lt;code&gt;Show&lt;/code&gt; by deferring to the
underlying type. By default, if you don’t specify the deriving strategy
then the compiler assumes that derived &lt;code&gt;Show&lt;/code&gt; instances use
the &lt;code&gt;stock&lt;/code&gt; deriving strategy.&lt;/p&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;There’s one last bonus to doing things in this way: you might now be
able to hide the &lt;code&gt;newtype&lt;/code&gt; constructor by not exporting it! I
think this is actually the most important benefit of all because a
&lt;code&gt;newtype&lt;/code&gt; with an exposed constructor doesn’t really improve
upon the type safety of the underlying type.&lt;/p&gt;
&lt;p&gt;When a &lt;code&gt;newtype&lt;/code&gt; like &lt;code&gt;Name&lt;/code&gt; or
&lt;code&gt;Age&lt;/code&gt; exposes the &lt;code&gt;newtype&lt;/code&gt; constructor then the
&lt;code&gt;newtype&lt;/code&gt; serves primarily as documentation and I’m not a big
fan of this “&lt;code&gt;newtype&lt;/code&gt;s as documentation” design pattern.
However, I’m not that strongly opposed to it either; I wouldn’t use it
in own code, but I also wouldn’t insist that others don’t use it.
Another post which takes a stronger stance on this is &lt;a
href=&quot;https://lexi-lambda.github.io/blog/2020/11/01/names-are-not-type-safety/&quot;&gt;Names
are not type safety&lt;/a&gt;, especially the section on “Newtypes as
tokens”.&lt;/p&gt;
&lt;p&gt;I’m personally okay with other people using &lt;code&gt;newtype&lt;/code&gt;s in
this way, but if you do use “&lt;code&gt;newtype&lt;/code&gt;s as documentation”
then please add &lt;code&gt;IsString&lt;/code&gt; / &lt;code&gt;Num&lt;/code&gt; /
&lt;code&gt;Show&lt;/code&gt; instances as described in this post so that they’re
more ergonomic for others to use.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/836754983496104918/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2023/04/ergonomic-newtypes-for-haskell-strings.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/836754983496104918'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/836754983496104918'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2023/04/ergonomic-newtypes-for-haskell-strings.html' title='Ergonomic newtypes for Haskell strings and numbers'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-2977431869960059379</id><published>2023-03-06T08:08:00.004-08:00</published><updated>2023-03-06T08:08:45.451-08:00</updated><title type='text'>The &quot;open source native&quot; principle for software design</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot;&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;The &amp;quot;open source native&amp;quot; principle for software design&quot;&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;Design proprietary software as if it were open source software&quot;&gt;
  &lt;title&gt;The &quot;open source native&quot; principle for software design&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;This post summarizes a software design principle I call the “open
source native” principle which I’ve invoked a few times as a technical
lead. I wanted to write this down so that I could easily reference this
post in the future.&lt;/p&gt;
&lt;p&gt;The “open source native” principle is simple to state:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Design proprietary software as if you intended to open source that
software, regardless of whether you will open source that software&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I call this the “open source native” principle because you design
your software as if it were a “native” member of the open source
ecosystem. In other words, your software is spiritually “born” open
source, aspirationally written from the beginning to be a good open
source citizen, even if you never actually end up open sourcing that
software.&lt;/p&gt;
&lt;p&gt;You can’t always adhere to this principle, but I still use this as a
general design guideline.&lt;/p&gt;
&lt;h4 id=&quot;example&quot;&gt;Example&lt;/h4&gt;
&lt;p&gt;It’s hard to give a detailed example of this principle since most of
the examples I’d like to use are … well … proprietary and wouldn’t make
sense outside of their respective organizations. However, I’ll try to
outline a hypothetical example (inspired by a true story) that hopefully
enough can people can relate to.&lt;/p&gt;
&lt;p&gt;Suppose that your organization provides a product with a
domain-specific programming language for customizing their product’s
behavior. Furthermore, suppose that you’re asked to design and implement
a package manager for this programming language.&lt;/p&gt;
&lt;p&gt;There are multiple data stores you could use for storing packages,
but to simplify this example suppose there are only two options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Store packages in a product-specific database&lt;/p&gt;
&lt;p&gt;Perhaps your product already uses a database for other reasons, so
you figure that you can reuse that existing database for storing
packages. That way you don’t need to set up any new infrastructure to
get going since the database team will handle that for you. Plus you get
the full powerful of a relational database so now you have powerful
tools for querying and/or modifying packages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store packages in &lt;code&gt;git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You might instead store your packages as flat files inside of a
&lt;code&gt;git&lt;/code&gt; repository.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These represent two extremes of the spectrum and in reality there
might be other options in between (like a standalone &lt;code&gt;sqlite&lt;/code&gt;
database), but this is a contrived example.&lt;/p&gt;
&lt;p&gt;According to the open source principle, you’d prefer to store
packages in &lt;code&gt;git&lt;/code&gt; because &lt;code&gt;git&lt;/code&gt; is a foundational
building block of the open source ecosystem that is already
battle-tested for this purpose. You’d be sacrificing some features
(you’d no longer have access to the full power of a relational
database), but your package manager would now be more “open-source
native”.&lt;/p&gt;
&lt;p&gt;You might wonder: why would one deliberately constrain themselves
like that? What’s the benefit of designing things in this way if they
might never be open sourced?&lt;/p&gt;
&lt;h4 id=&quot;motivation&quot;&gt;Motivation&lt;/h4&gt;
&lt;p&gt;There are several reasons I espouse this design principle:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;better testability&lt;/p&gt;
&lt;p&gt;If you design your component so that it’s easy to use outside of the
context of your product then it’s also easier to test in isolation. This
means that you don’t need to rely on heavyweight integration tests or
end-to-end tests to verify that your component works correctly.&lt;/p&gt;
&lt;p&gt;For example, a package manager based on &lt;code&gt;git&lt;/code&gt; is easier to
test than a package manager based on a database because a
&lt;code&gt;git&lt;/code&gt; repository is easier to set up.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;faster release cadence&lt;/p&gt;
&lt;p&gt;If your component can be tested in isolation then you don’t even need
to share continuous integration (CI) with the rest of your organization.
Your component can have its own CI and release on whatever frequency is
appropriate for that component instead of coupling its release cadence
to the rest of your product.&lt;/p&gt;
&lt;p&gt;That in turn typically means that you can &lt;a
href=&quot;https://www.haskellforall.com/2019/05/release-early-and-often.html&quot;&gt;release
earlier and more often&lt;/a&gt;, which is a virtue in its own right.&lt;/p&gt;
&lt;p&gt;Continuing the package manager example, you wouldn’t need to couple
releases of your package manager to the release cadence of the rest of
your product, so you’d be able to push out improvements or fixes more
quickly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;simpler documentation&lt;/p&gt;
&lt;p&gt;It’s much easier to write a tutorial for software that delivers value
in isolation since there’s less supporting infrastructure necessary to
follow along with the tutorial.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;well-chosen interfaces&lt;/p&gt;
&lt;p&gt;You have to carefully think through the correct logical boundaries
for your software when you design for a broader audience of users. It’s
also easier to enforce stronger boundaries and narrower scope for the
same reasons.&lt;/p&gt;
&lt;p&gt;For example, our hypothetical package manager is less likely to have
package metadata polluted with product-specific details if it is
designed to operate independently of the product.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;improved stability&lt;/p&gt;
&lt;p&gt;Open source software doesn’t just target a broader audience, but also
targets a broader time horizon. An open source mindset promotes thinking
beyond the needs of this financial quarter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you can open source your component! (duh)&lt;/p&gt;
&lt;p&gt;Needless to say, if you design your component to be open-source
native, it’s also easier to open source. Hooray! 🎉&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;You can think of this design principle as being similar to the &lt;a
href=&quot;https://en.wikipedia.org/wiki/Rule_of_least_power&quot;&gt;rule of least
power&lt;/a&gt;, where you’re making your software less powerful (by adding
the additional constraint that it can be open sourced), but in turn
improving ease of comprehension, maintainability, and distribution.&lt;/p&gt;
&lt;p&gt;Also, if you have any examples along these lines that you care to
share, feel free to drop them in the comments.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/2977431869960059379/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2023/03/the-open-source-native-principle-for.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/2977431869960059379'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/2977431869960059379'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2023/03/the-open-source-native-principle-for.html' title='The &quot;open source native&quot; principle for software design'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-7346981499694987160</id><published>2023-01-30T06:52:00.002-08:00</published><updated>2023-01-30T06:54:36.962-08:00</updated><title type='text'>terraform-nixos-ng: Modern terraform support for NixOS</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot;&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;terraform-nixos-ng: Modern terraform support for NixOS&quot;&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;Announcement post for improved terraform bindings for NixOS&quot;&gt;
  &lt;title&gt;terraform-nixos-ng: Modern terraform support for NixOS&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Recently I’ve been working on writing a &lt;a
href=&quot;https://leanpub.com/nixos-in-production&quot;&gt;“NixOS in Production”
book&lt;/a&gt; and one of the chapters I’m writing is on deploying NixOS using
&lt;code&gt;terraform&lt;/code&gt;. However, one of the issues I ran across was the
poor NixOS support for &lt;code&gt;terraform&lt;/code&gt;. I’ve already gone through
the &lt;a
href=&quot;https://nix.dev/tutorials/deploying-nixos-using-terraform&quot;&gt;&lt;code&gt;nix.dev&lt;/code&gt;
post&lt;/a&gt; explaining how to use the &lt;a
href=&quot;https://github.com/tweag/terraform-nixos&quot;&gt;&lt;code&gt;terraform-nixos&lt;/code&gt;&lt;/a&gt;
project but I ran into several issues trying to follow those
instructions (which I’ll explain below). That plus the fact that
&lt;code&gt;terraform-nixos&lt;/code&gt; &lt;a
href=&quot;https://github.com/tweag/terraform-nixos/issues/69&quot;&gt;seems to be
unmaintained&lt;/a&gt; pushed me over the edge to rewrite the project to
simplify and improve upon it.&lt;/p&gt;
&lt;p&gt;So this post is announcing my &lt;code&gt;terraform-nixos-ng&lt;/code&gt;
project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Gabriella439/terraform-nixos-ng&quot;&gt;GitHub
- &lt;code&gt;Gabriella439/terraform-nixos-ng&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… which is a rewrite of &lt;code&gt;terraform-nixos&lt;/code&gt; and I’ll use
this post to compare and contrast the two projects. If you’re only
interested in trying out the &lt;code&gt;terraform-nixos-ng&lt;/code&gt; project
then go straight to &lt;a
href=&quot;https://github.com/Gabriella439/terraform-nixos-ng/blob/main/README.md&quot;&gt;the
&lt;code&gt;README&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;using-nixos-rebuild&quot;&gt;Using &lt;code&gt;nixos-rebuild&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;One of the first things I noticed when kicking the tires on
&lt;code&gt;terraform-nixos&lt;/code&gt; was that it was essentially reinventing
what the &lt;code&gt;nixos-rebuild&lt;/code&gt; tool already does. In fact, I was so
surprised by this that I wrote a standalone post explaining how to use
&lt;code&gt;nixos-rebuild&lt;/code&gt; as a deployment tool:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a
href=&quot;https://www.haskellforall.com/2023/01/announcing-nixos-rebuild-new-deployment.html&quot;&gt;Haskell
for all - Announcing nixos-rebuild: a “new” deployment tool for
NixOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Simplifying that code using &lt;code&gt;nixos-rebuild&lt;/code&gt; fixed lots of
tiny papercuts I had with &lt;code&gt;terraform-nixos&lt;/code&gt;, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The deploy failing if you don’t have a new enough version of
&lt;code&gt;bash&lt;/code&gt; installed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The inability to turn off the use of the
&lt;code&gt;--use-substitutes&lt;/code&gt; flag&lt;/p&gt;
&lt;p&gt;That flag causes issues if you want to deploy to a machine that
disables outbound connections.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The dearth of useful options (compared to
&lt;code&gt;nixos-rebuild&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;… including the inability to fully customize &lt;code&gt;ssh&lt;/code&gt;
options&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The poor interop with flakes&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;terraform-nixos&lt;/code&gt; doesn’t respect the &lt;a
href=&quot;https://nixos.wiki/wiki/Flakes#Output_schema&quot;&gt;standard
&lt;code&gt;nixosConfigurations&lt;/code&gt; flake output hierarchy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, &lt;code&gt;terraform-nixos&lt;/code&gt; doesn’t use flakes natively (it
uses &lt;a
href=&quot;https://github.com/edolstra/flake-compat&quot;&gt;&lt;code&gt;flake-compat&lt;/code&gt;&lt;/a&gt;),
which breaks handling of the
&lt;code&gt;config.nix.binary{Caches,CachePublicKeys}&lt;/code&gt; flakes settings.
The Nix UX for flakes is supposed to ask the user to consent to those
settings (because they are potentially insecure to auto-enable for a
flake), but their workaround breaks that UX by automatically enabling
those settings without the user’s consent.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wanted to upstream this rewrite to use &lt;code&gt;nixos-rebuild&lt;/code&gt;
into &lt;code&gt;terraform-nixos&lt;/code&gt;, but I gave up on that idea when I saw
that no pull request since 2021 had been merged, including conservative
pull requests like &lt;a
href=&quot;https://github.com/tweag/terraform-nixos/pull/61/files&quot;&gt;this
one&lt;/a&gt; to just use the script included within the repository to update
the list of available AMIs.&lt;/p&gt;
&lt;p&gt;That brings me to the next improvement, which is:&lt;/p&gt;
&lt;h4 id=&quot;auto-generating-available-amis&quot;&gt;Auto-generating available
AMIs&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;terraform-nixos&lt;/code&gt; repository requires the AMI list to
be manually updated. The way you do this is to periodically run a script
to fetch the available AMIs from Nixpkgs and then create a PR to vendor
those changes. However, this shouldn’t be necessary because we could
easily program &lt;code&gt;terraform&lt;/code&gt; to generate the list of AMIs on
the fly.&lt;/p&gt;
&lt;p&gt;This is what the &lt;code&gt;terraform-nixos-ng&lt;/code&gt; project does, where
the &lt;code&gt;ami&lt;/code&gt; module creates a &lt;a
href=&quot;https://github.com/Gabriella439/terraform-nixos-ng/blob/2f25ef9284ad9d45e21a7c35402d9593e2b9a768/ami/main.tf#L79-L88&quot;&gt;data
source that runs an equivalent script&lt;/a&gt; to fetch the AMIs at
provisioning time.&lt;/p&gt;
&lt;p&gt;In the course of rewriting the AMI module, I made another small
improvement, which was:&lt;/p&gt;
&lt;h4 id=&quot;support-for-aarch64-amis&quot;&gt;Support for &lt;code&gt;aarch64&lt;/code&gt;
AMIs&lt;/h4&gt;
&lt;p&gt;Another gripe I had with &lt;code&gt;terraform-nixos-ng&lt;/code&gt; is that its
AMI module doesn’t support &lt;code&gt;aarch64-linux&lt;/code&gt; NixOS AMIs even
though these AMIs exist and &lt;a
href=&quot;https://github.com/NixOS/nixpkgs/blob/375d7f2ac02c2dee60d21aeda59f939cdd095d95/nixos/modules/virtualisation/amazon-ec2-amis.nix&quot;&gt;Nixpkgs
supports them&lt;/a&gt;. That was a small and easy fix, too.&lt;/p&gt;
&lt;h4 id=&quot;functionality-regressions&quot;&gt;Functionality regressions&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;terraform-nixos-ng&lt;/code&gt; is not a strict improvement over
&lt;code&gt;terraform-nixos&lt;/code&gt;, though. Specifically, the most notable
feature omissions are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Support for non-flake workflows&lt;/p&gt;
&lt;p&gt;&lt;code&gt;terraform-nixos-ng&lt;/code&gt; requires the use of flakes and
doesn’t provide support for non-flake-based workflows. I’m very much on
team “Nix flakes are good and shouldn’t be treated as experimental any
longer” so I made an opinionated choice to require users to use flakes
rather than support their absence.&lt;/p&gt;
&lt;p&gt;This choice also isn’t completely aesthetic, the use of flakes
improves interop with &lt;code&gt;nixos-rebuild&lt;/code&gt;, where flakes are the
most ergonomic way for &lt;code&gt;nixos-rebuild&lt;/code&gt; to select from one of
many deployments.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support for secrets management&lt;/p&gt;
&lt;p&gt;I felt that this should be handled by something like &lt;a
href=&quot;https://github.com/Mic92/sops-nix&quot;&gt;&lt;code&gt;sops-nix&lt;/code&gt;&lt;/a&gt;
rather than rolling yet another secrets management system that was
idiosyncratic to this deploy tool. In general, I wanted these
&lt;code&gt;terraform&lt;/code&gt; modules to be as lightweight as possible by
making more idiomatic use of the modern NixOS ecosystem.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support for Google Compute Engine images&lt;/p&gt;
&lt;p&gt;&lt;code&gt;terraform-nixos&lt;/code&gt; supports GCE images and the only reason
I didn’t add the same support is because I’ve never used Google Compute
Engine so I didn’t have enough context to do a good rewrite, nor did I
have the inclination to set up a GCE account just to test the rewrite.
However, I’d accept a pull request adding this support from someone
interested in this feature.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;There’s one last improvement over the &lt;code&gt;terraform-nixos&lt;/code&gt;
project, which is that I don’t leave projects in an abandoned state.
Anybody who has contributed to my open source projects knows that I’m
generous about handing out the commit bit and I’m also good about
relinquishing control if I don’t have time to maintain the project
myself.&lt;/p&gt;
&lt;p&gt;However, I don’t expect this to be a difficult project to maintain
anyway because I designed &lt;code&gt;terraform-nixos-ng&lt;/code&gt; to outsource
the work to existing tools as much as possible instead of reinventing
the wheel. This is why the implementation of
&lt;code&gt;terraform-nixos-ng&lt;/code&gt; is significantly smaller than
&lt;code&gt;terraform-nixos&lt;/code&gt;.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/7346981499694987160/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2023/01/terraform-nixos-ng-modern-terraform.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/7346981499694987160'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/7346981499694987160'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2023/01/terraform-nixos-ng-modern-terraform.html' title='terraform-nixos-ng: Modern terraform support for NixOS'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-6901917499943981869</id><published>2023-01-23T07:22:00.008-08:00</published><updated>2023-01-23T09:20:17.872-08:00</updated><title type='text'>Announcing nixos-rebuild: a &quot;new&quot; deployment tool for NixOS</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot;&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;Announcing nixos-rebuild: a &amp;quot;new&amp;quot; deployment tool for NixOS&quot;&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;A post explaining how nixos-rebuild is a cross-platform tool that can deploy remote NixOS systems&quot;&gt;
  &lt;title&gt;Announcing nixos-rebuild: a &amp;quot;new&amp;quot; deployment tool for NixOS&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;The title of this post is tongue-in-cheek; &lt;code&gt;nixos-rebuild&lt;/code&gt;
is a tool that has been around for a long time and there’s nothing new
about it. However, I believe that not enough people know how capable
this tool is for building and deploying &lt;strong&gt;remote&lt;/strong&gt; NixOS
systems. In other words, &lt;code&gt;nixos-rebuild&lt;/code&gt; is actually a decent
alternative to tools like &lt;a
href=&quot;https://github.com/DBCDK/morph&quot;&gt;&lt;code&gt;morph&lt;/code&gt;&lt;/a&gt; or &lt;a
href=&quot;https://github.com/zhaofengli/colmena&quot;&gt;&lt;code&gt;colmena&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Part of the reason why &lt;code&gt;nixos-rebuild&lt;/code&gt; flies under the
radar is because it’s more commonly used for upgrading the current NixOS
system, rather than deploying a remote NixOS system. However, it’s
actually fairly capable of managing another NixOS system.&lt;/p&gt;
&lt;p&gt;In fact, your local system (that initiates the deploy) doesn’t have
to be a NixOS system or even a Linux system. An even lesser known fact
is that you can initiate deploys from macOS using
&lt;code&gt;nixos-rebuild&lt;/code&gt;. In other words, &lt;code&gt;nixos-rebuild&lt;/code&gt;
is a cross-platform deploy tool!&lt;/p&gt;
&lt;h4 id=&quot;the-trick&quot;&gt;The trick&lt;/h4&gt;
&lt;p&gt;I’ll give a concrete example. Suppose that I have the following NixOS
configuration (for a blank EC2 machine) saved in
&lt;code&gt;configuration.nix&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;{ modulesPath, ... }:

{ imports = [ &amp;quot;${modulesPath}/virtualisation/amazon-image.nix&amp;quot; ];

  system.stateVersion = &amp;quot;22.11&amp;quot;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… which I’ve wrapped in the following flake (since I like Nix
flakes):&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;{ inputs.nixpkgs.url = &amp;quot;github:NixOS/nixpkgs/22.11&amp;quot;;

  outputs = { nixpkgs, ... }: {
    nixosConfigurations.default = nixpkgs.lib.nixosSystem {
      system = &amp;quot;x86_64-linux&amp;quot;;

      modules = [ ./configuration.nix ];
    };
  };
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Further suppose that I have an &lt;code&gt;x86_64-linux&lt;/code&gt; machine on
EC2 accessible via &lt;code&gt;ssh&lt;/code&gt; at &lt;code&gt;root@example.com&lt;/code&gt;. I
can deploy that configuration to the remote machine like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix shell nixpkgs#nixos-rebuild&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nixos-rebuild switch &lt;span class=&quot;at&quot;&gt;--fast&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--flake&lt;/span&gt; .#default &lt;span class=&quot;dt&quot;&gt;\&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;--target-host&lt;/span&gt; root@example.com &lt;span class=&quot;dt&quot;&gt;\&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;at&quot;&gt;--build-host&lt;/span&gt; root@example.com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and that will build and deploy the remote machine even if your
current machine is a completely different platform (e.g. macOS).&lt;/p&gt;
&lt;h4 id=&quot;why-this-works&quot;&gt;Why this works&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;--fast&lt;/code&gt; flag is the first adjustment that makes the
above command work on systems other NixOS. Without that flag
&lt;code&gt;nixos-rebuild&lt;/code&gt; will attempt to build itself for the target
platform and run that new executable with the same arguments, which will
fail if the target platform differs from your current platform.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;--build-host&lt;/code&gt; flag is also necessary if the source
and target platform don’t match. This instructs
&lt;code&gt;nixos-rebuild&lt;/code&gt; to build on the target machine so that the
deploy is insensitive to your current machine’s platform.&lt;/p&gt;
&lt;p&gt;The final thing that makes this work is that Nixpkgs makes the
&lt;code&gt;nixos-rebuild&lt;/code&gt; script available on all platforms, despite
the script living underneath the &lt;code&gt;pkgs/os-specific/linux&lt;/code&gt;
directory in Nixpkgs.&lt;/p&gt;
&lt;h4 id=&quot;flakes&quot;&gt;Flakes&lt;/h4&gt;
&lt;p&gt;There’s a reason why I suggest using flakes alongside
&lt;code&gt;nixos-rebuild&lt;/code&gt;: with flakes you can specify multiple NixOS
machines within the same file (just like we can other NixOS deployment
tools). That means that we can do something like this:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;{ inputs.nixpkgs.url = &amp;quot;github:NixOS/nixpkgs/22.11&amp;quot;;

  outputs = { nixpkgs, ... }: {
    nixosConfigurations = {
      machine1 = nixpkgs.lib.nixosSystem { … };

      machine2 = nixpkgs.lib.nixosSystem { … };

      …
    };
  };
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… and then we can select which system to build with the desired flake
URI (e.g. &lt;code&gt;.#machine1&lt;/code&gt; or &lt;code&gt;.#machine2&lt;/code&gt; in the
above example).&lt;/p&gt;
&lt;p&gt;Moreover, by virtue of using flakes we can obtain our NixOS
configuration from somewhere other than the current working directory.
For example, you can specify a flake URI like
&lt;code&gt;github:${OWNER}/${REPO}#${ATTRIBUTE}&lt;/code&gt; to deploy a NixOS
configuration hosted on GitHub without having to locally clone the
repository. Pretty neat!&lt;/p&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;I’m not the first person to suggest this trick. In fact, while
researching prior art I stumbled across &lt;a
href=&quot;https://discourse.nixos.org/t/morph-nix-based-deployment-tool/1276/2&quot;&gt;this
comment from Luke Clifton&lt;/a&gt; proposing the same idea of using
&lt;code&gt;nixos-rebuild&lt;/code&gt; as a deploy tool. However, other than that
stray comment I couldn’t find any other mentions of this so I figured it
was worth formalizing this trick in a blog post that people could more
easily share.&lt;/p&gt;
&lt;p&gt;This post supersedes a &lt;a
href=&quot;https://www.haskellforall.com/2018/08/nixos-in-production.html&quot;&gt;prior
post of mine&lt;/a&gt; where I explained how to deploy a NixOS system using
more low-level idioms (e.g. &lt;code&gt;nix build&lt;/code&gt;,
&lt;code&gt;nix copy&lt;/code&gt;). Now that &lt;code&gt;nixos-rebuild&lt;/code&gt; supports
both flakes and remote systems there’s no real reason to do it the
low-level way.&lt;/p&gt;
&lt;p&gt;Edit: An earlier version of this post suggested using
&lt;code&gt;_NIXOS_REBUILD_REEXEC=1&lt;/code&gt; to prevent
&lt;code&gt;nixos-rebuild&lt;/code&gt; for building itself for the target platform
but then &lt;a href=&quot;https://github.com/ncfavier&quot;&gt;Naïm Favier&lt;/a&gt; pointed
out that you can use the &lt;code&gt;--fast&lt;/code&gt; flag instead, which has the
same effect.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/6901917499943981869/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2023/01/announcing-nixos-rebuild-new-deployment.html#comment-form' title='9 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/6901917499943981869'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/6901917499943981869'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2023/01/announcing-nixos-rebuild-new-deployment.html' title='Announcing nixos-rebuild: a &quot;new&quot; deployment tool for NixOS'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>9</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-5572585643721177309</id><published>2022-12-30T06:32:00.005-08:00</published><updated>2022-12-30T06:47:36.165-08:00</updated><title type='text'>Nixpkgs support for Linux builders running on macOS</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;Nixpkgs support for Linux builders running on macOS&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;Blog post contextualizing recent work to upstream Linux builders for macOS.&quot; /&gt;
  &lt;title&gt;macos-builder&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;I recently upstreamed a derivation for a Linux builder into Nixpkgs
that’s easy to deploy on macOS. The significance of this work is that
you can now run the following command on macOS:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix run nixpkgs#darwin.builder&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and that will launch a Linux builder that you can delegate builds
to. For full details, read the &lt;a
href=&quot;https://nixos.org/manual/nixpkgs/unstable/#sec-darwin-builder&quot;&gt;corresponding
section of the Nixpkgs manual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post, I wanted to provide some of the background and
motivation for this work to help contextualize it.&lt;/p&gt;
&lt;h4 id=&quot;background---nixos-qemu-vms-on-macos&quot;&gt;Background - NixOS
&lt;code&gt;qemu&lt;/code&gt; VMs on MacOS&lt;/h4&gt;
&lt;p&gt;I wasn’t originally trying to create a Linux builder for macOS when I
began this project. I was actually working on making it as easy as
possible to experiment interactively with (non-builder) NixOS
&lt;code&gt;qemu&lt;/code&gt; VMs on macOS.&lt;/p&gt;
&lt;p&gt;While searching for prior art related to this I stumbled across the
following Nixpkgs issue requesting exactly this same feature: &lt;a
href=&quot;https://github.com/NixOS/nixpkgs/issues/108984&quot;&gt;Allowing NixOS
VM’s to be run on macOS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Even better, by the time I discovered that issue several people had
already done most of the work, culminating in the following repository
demonstrating how all of the features were supposed to fit together: &lt;a
href=&quot;https://github.com/YorikSar/nixos-vm-on-macos&quot;&gt;&lt;code&gt;YorikSar/nixos-vm-on-macos&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In fact, the flake for that repository also came with a binary cache,
so if you just ran:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix run github:YorikSar/nixos-vm-on-macos&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… then you could run the sample NixOS VM from that repository on
macOS without requiring access to an Linux builder because it would
download all the Linux build products from the matching cache. Pretty
neat!&lt;/p&gt;
&lt;p&gt;However, this still didn’t completely satisfy my use case for reasons
already &lt;a
href=&quot;https://github.com/NixOS/nixpkgs/issues/108984#issuecomment-1207474585&quot;&gt;noted
by someone else&lt;/a&gt;: it doesn’t work well if you want to run a NixOS VM
that differs even slightly from the included sample VM. Any difference
requires Linux build products to be rebuilt which requires access to a
Linux builder because those build products will not be cached ahead of
time.&lt;/p&gt;
&lt;h4 id=&quot;background---linuxkit-nix&quot;&gt;Background -
&lt;code&gt;linuxkit-nix&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The need for a Linux builder wasn’t a showstopper for me because
there was already prior art for bootstrapping a Linux builder on macOS,
which was the &lt;a
href=&quot;https://github.com/nix-community/linuxkit-nix&quot;&gt;&lt;code&gt;linuxkit-nix&lt;/code&gt;&lt;/a&gt;
project. So what I could have done was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Launch a (non-NixOS) &lt;code&gt;linuxkit&lt;/code&gt; VM on macOS for use as a
Linux builder&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;linuxkit&lt;/code&gt; builder to build the desired NixOS
&lt;code&gt;qemu&lt;/code&gt; VM&lt;/li&gt;
&lt;li&gt;Run that NixOS &lt;code&gt;qemu&lt;/code&gt; VM on macOS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, I was curious if I could use a NixOS VM for the first step,
too! In other words:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Launch a cached NixOS &lt;code&gt;qemu&lt;/code&gt; VM on macOS for use as a
Linux builder&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;qemu&lt;/code&gt; builder to build the desired (non-builder)
NixOS &lt;code&gt;qemu&lt;/code&gt; VM&lt;/li&gt;
&lt;li&gt;Run that NixOS &lt;code&gt;qemu&lt;/code&gt; VM on macOS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only difference between the two approaches is the first step:
instead of using &lt;code&gt;linuxkit&lt;/code&gt; to create the Linux builder we
use &lt;code&gt;qemu&lt;/code&gt; to create a NixOS builder. This works because the
&lt;code&gt;qemu&lt;/code&gt; builder’s NixOS configuration doesn’t need to change
so &lt;a href=&quot;https://hydra.nixos.org/&quot;&gt;hydra.nixos.org&lt;/a&gt; can build and
cache the NixOS &lt;code&gt;qemu&lt;/code&gt; builder ahead of time.&lt;/p&gt;
&lt;p&gt;There were a few reasons I took interest in this approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;linuxkit-nix&lt;/code&gt; appears to not work on
&lt;code&gt;aarch64-darwin&lt;/code&gt; (i.e. Apple Silicon)&lt;/p&gt;
&lt;p&gt;This seems like it is &lt;a
href=&quot;https://github.com/linuxkit/linuxkit/issues/3626&quot;&gt;potentially
fixable&lt;/a&gt;, but I wasn’t yet ready to volunteer to do that
work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s easier to customize a NixOS builder&lt;/p&gt;
&lt;p&gt;&lt;code&gt;linuxkit-nix&lt;/code&gt; doesn’t use NixOS for the builder and
instead &lt;a
href=&quot;https://github.com/nix-community/linuxkit-nix/blob/master/linuxkit-builder/default.nix&quot;&gt;creates
a bespoke builder&lt;/a&gt; for this purpose. This means that you can’t use
the NixOS module system to more easily customize the behavior of the
builder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;qemu&lt;/code&gt;-based solution is simpler than
&lt;code&gt;linuxkit-nix&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I think the easiest way to explain this is for me to link to the &lt;a
href=&quot;https://github.com/NixOS/nixpkgs/blob/master/nixos/modules/profiles/macos-builder.nix&quot;&gt;&lt;code&gt;macos-builder.nix&lt;/code&gt;
NixOS module&lt;/a&gt;, which has the entirety of the code that I contributed,
which is significantly simpler than &lt;code&gt;linuxkit-nix&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The main reason that the &lt;code&gt;qemu&lt;/code&gt;-based solution is simpler
than &lt;code&gt;linuxkit-nix&lt;/code&gt; is because it is reusing more
infrastructure that has already been upstreamed into Nixpkgs (most
notably, NixOS and &lt;code&gt;qemu&lt;/code&gt; VMs).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;linuxkit-nix&lt;/code&gt; appears to be unmaintained&lt;/p&gt;
&lt;p&gt;There was a nascent attempt to &lt;a
href=&quot;https://github.com/NixOS/nixpkgs/pull/29628&quot;&gt;upstream
&lt;code&gt;linuxkit-nix&lt;/code&gt; into Nixpkgs&lt;/a&gt;, but that stalled because it
seems like &lt;code&gt;linuxkit-nix&lt;/code&gt; appears to have been abandoned a
couple of years ago.&lt;/p&gt;
&lt;p&gt;I could have restored that effort, but personally I was fine with
using the simpler &lt;code&gt;qemu&lt;/code&gt;-based approach. I haven’t given up
on the idea of reviving &lt;code&gt;linuxkit-nix&lt;/code&gt;, but it’s not on my
immediate roadmap.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is one notable downside to using &lt;code&gt;qemu&lt;/code&gt; over
&lt;code&gt;linuxkit&lt;/code&gt;, which is that &lt;strong&gt;&lt;code&gt;qemu&lt;/code&gt; is
supposed to be slower than &lt;code&gt;linuxkit&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: I have not actually verified this claim since I can’t run
&lt;code&gt;linuxkit-nix&lt;/code&gt; on my M1 Mac, but this is purportedly the
reason that the authors of &lt;code&gt;linuxkit-nix&lt;/code&gt; did not opt to use
&lt;code&gt;qemu&lt;/code&gt; for their approach according to &lt;a
href=&quot;https://github.com/NixOS/nixpkgs/pull/29628&quot;&gt;this PR
description&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;qemu&lt;/code&gt; performance hasn’t been an issue for me (yet), but
that could change, especially if I try to make use of this at work,
where performance could potentially matter more.&lt;/p&gt;
&lt;h4 id=&quot;motivation&quot;&gt;Motivation&lt;/h4&gt;
&lt;p&gt;As I mentioned above, the long-term goal for all of this is to run
NixOS VMs on macOS. There are two main reasons I’m interested in
this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I’m working on a &lt;a
href=&quot;https://leanpub.com/nixos-in-production&quot;&gt;NixOS book&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;… and I wanted macOS users to be able to test-drive example NixOS
configurations on their local machine without requiring them to own and
operate a separate Linux machine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’m interested in running NixOS tests on macOS&lt;/p&gt;
&lt;p&gt;… primarily for work-related reasons. At work developers have to
install &lt;code&gt;postgres&lt;/code&gt; on their development machines for
integration testing, and it would be much nicer if we could restructure
our integration tests as &lt;a
href=&quot;https://nixos.org/manual/nixos/stable/index.html#sec-nixos-tests&quot;&gt;NixOS
tests&lt;/a&gt; (which run inside of &lt;code&gt;qemu&lt;/code&gt; VMs instead of running
on the host).&lt;/p&gt;
&lt;p&gt;However, at the time of this writing this would still require
additional work which is in progress on this &lt;a
href=&quot;https://github.com/NixOS/nixpkgs/pull/193336&quot;&gt;draft pull
request&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/5572585643721177309/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2022/12/nixpkgs-support-for-linux-builders.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/5572585643721177309'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/5572585643721177309'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2022/12/nixpkgs-support-for-linux-builders.html' title='Nixpkgs support for Linux builders running on macOS'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-4640035808060709351</id><published>2022-12-19T07:34:00.000-08:00</published><updated>2022-12-19T07:34:00.433-08:00</updated><title type='text'>Nixpkgs support for incremental Haskell builds</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot;&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;Nixpkgs support for incremental Haskell builds&quot;&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;A post explaining the design behind a new Nixpkgs feature for building Haskell packages incrementally&quot;&gt;
  &lt;title&gt;incremental&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;The context for this post is that at work I recently implemented Nix
ecosystem support for “incrementally” building Haskell packages. By
“incrementally” I mean that these Nix builds only need to build what
changed since the last full build of the package so that the package
doesn’t need to be built from scratch every time.&lt;/p&gt;
&lt;p&gt;The pull requests implementing this feature have not yet been
approved or merged at the time of this writing, but I figured that I
would explain the motivation, design, results, and limitations of this
work to hopefully persuade people that this work should be merged.&lt;/p&gt;
&lt;p&gt;If you’re not interested in the design then you can skip straight to
the &lt;a href=&quot;#demo&quot;&gt;Demo&lt;/a&gt; section below.&lt;/p&gt;
&lt;h4 id=&quot;background&quot;&gt;Background&lt;/h4&gt;
&lt;p&gt;I work on &lt;a href=&quot;https://mercury.com/&quot;&gt;Mercury&lt;/a&gt;’s Backend
Development User Experience team and we support developers contributing
to a large Haskell monolith consisting of 3000+ modules. That may seem
like a lot but the vast majority of these modules are small and the
whole codebase takes ~14 minutes to compile in CI if we disable
optimizations (although we still build with optimizations enabled for
deployment).&lt;/p&gt;
&lt;p&gt;In my experience, that’s pretty good for a Haskell project of this
size, thanks not only to the work of our team but also other teams who
also contribute to improving the development experience. In fact, the
pioneering work for this “incremental builds” feature actually
originated from two engineers outside our team.&lt;/p&gt;
&lt;p&gt;First, &lt;a href=&quot;https://github.com/hdgarrood&quot;&gt;Harry Garrood&lt;/a&gt;
improved GHC’s change detection algorithm so that GHC would use the hash
of the file to detect changes instead of using the timestamp. In &lt;a
href=&quot;https://harry.garrood.me/blog/easy-incremental-haskell-ci-builds-with-ghc-9.4/&quot;&gt;this
post&lt;/a&gt; he explains how you can make use of this to implement
incremental builds for traditional CI services (e.g. GitHub actions)
where each build reuses the intermediate build products from the prior
build instead of building from scratch.&lt;/p&gt;
&lt;p&gt;That alone would not be enough for us to use this at work since we
use Nix where this sort of build impurity doesn’t fly. However, Harry
and &lt;a href=&quot;https://github.com/lf-&quot;&gt;Jade Lovelace&lt;/a&gt; prototyped using
this feature in Nixpkgs so that Nix builds of Haskell packages could
also reuse intermediate build products from prior builds to save work.
You can &lt;a
href=&quot;https://github.com/hdgarrood/haskell-incremental-nix-example&quot;&gt;find
their prototype here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The basic idea behind the prototype Nixpkgs integration is that you
split a Haskell package build into two separate builds:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A “full build” that builds the Haskell package from scratch&lt;/p&gt;
&lt;p&gt;This full build exports its intermediate build products (i.e. the
&lt;code&gt;dist&lt;/code&gt; directory) which can then be reused by:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An “incremental build” that only builds what changed since the
full build&lt;/p&gt;
&lt;p&gt;This incremental build imports the intermediate build products from
the corresponding full build so that it doesn’t have to build the
package from scratch.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So you might wonder: if that was already implemented then what work
still remained for me to do?&lt;/p&gt;
&lt;h4 id=&quot;problem&quot;&gt;Problem&lt;/h4&gt;
&lt;p&gt;The main issue with the initial Nixpkgs integration is that it does
not provide any support for selecting which Git revision to use as the
basis for the full build. The existing solutions require some
out-of-band process to automatically select and lock the appropriate git
revision to use for the older (full) build.&lt;/p&gt;
&lt;h5 id=&quot;non-solution-0-rolling-rebuilds&quot;&gt;Non-solution #0: Rolling
rebuilds&lt;/h5&gt;
&lt;p&gt;The first non-solution is for each revision to always reuse the build
products from the previous revision. This doesn’t work well with Nix
because it would create an increasingly-long chain of dependent
derivations; in order to build the most recent revision you’d have to
build all preceding revisions.&lt;/p&gt;
&lt;p&gt;The dilemma here is that Nix is forcing us to confront something that
other build tools gloss over: if you’re always reusing build products
from the last build then you can’t accurately reproduce the most recent
build from scratch without reproducing all prior builds. You’ve
essentially “contaminated” the current build with all prior builds by
doing things in this way.&lt;/p&gt;
&lt;p&gt;So what we really want is something more like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Periodically do a full build from scratch and then make each
incremental build relative to the last full rebuild.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That’s much more compatible with Nix because then we only need to do
two builds of our project if we rebuild things from scratch, instead of
one build for every revision in our project’s history.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There’s also another issue with rolling rebuilds when you’re not
using Nix, which is that most naïve attempts to do this don’t ensure
that the starting build products came from the parent commit. You can
end up with contamination of build products across branches if you’re
not careful, which further complicates reproducibility.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;non-solution-1-lockfile&quot;&gt;Non-solution #1: Lockfile&lt;/h5&gt;
&lt;p&gt;Okay, so suppose you periodically do a full build of the project from
scratch and then each incremental build is relative to the last full
build. You would need to do a full rebuild frequently enough so that the
incremental builds stay quick. If you wait too long in between full
rebuilds then the project will evolve to the point where the incremental
builds can no longer reuse most of the build products from the last full
build and in the extreme case the incremental builds degenerate into
full builds if they can’t reuse any old build products.&lt;/p&gt;
&lt;p&gt;For example, at our work we currently do a full build of our large
package once a day, so we need some way to update the full build to
point to the last revision from the preceding day.&lt;/p&gt;
&lt;p&gt;&lt;a
href=&quot;https://felixspringer.xyz/homepage/blog/incrementalHaskellBuildsWithNix&quot;&gt;One
existing approach&lt;/a&gt; to solving this involved using Nix flakes to
manage the git revision for the older build. The idea is that you
periodically run &lt;code&gt;nix flake update&lt;/code&gt; to update the revision
used for the full build and you might even automate this process by
having some recurring &lt;code&gt;cron&lt;/code&gt; job generate a pull request or
commit to bump this revision on the main development branch. You don’t
have to use flakes for this purpose, but flakes are probably the most
ergonomic solution along these lines.&lt;/p&gt;
&lt;p&gt;However, there are a few issues with this approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It only works well for short-lived pull requests&lt;/p&gt;
&lt;p&gt;In other words, if you update the revision used for the full build
once a day then typically only pull requests that are less than a day
old will benefit from incremental builds.&lt;/p&gt;
&lt;p&gt;Specifically, what we’d really like is “branch-local” incremental
builds. In other words if a longer-lived development branch were to
deposit a few commits a day we’d like there to be a full rebuild once a
day on that branch so that incremental builds against the tip of that
development branch remain snappy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It pollutes the &lt;code&gt;git&lt;/code&gt; history&lt;/p&gt;
&lt;p&gt;If you bump the lockfile, say, once per day then that’s one junk
commit that you’ve added to your &lt;code&gt;git&lt;/code&gt; history every
day.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s difficult to open source any useful automation around
this&lt;/p&gt;
&lt;p&gt;If the solution requires out-of-band machinery (e.g. some recurring
&lt;code&gt;cron&lt;/code&gt; job) to bump the lockfile you can’t provide a great
user experience for open source projects. It only really works well for
proprietary projects that can tolerate that complexity.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That last point was the most important one for me. Generally, when I
design something (even something intended for internal, proprietary use)
I try to design it in such a way that it works well in an open source
context, too. In my experience, doing things in this way tends to
improve the design, quality, and user experience of software that I
build.&lt;/p&gt;
&lt;p&gt;In particular, I wanted a solution where all the automation could be
implemented entirely within the Nix language. However, this is not
possible in Nix’s present form!&lt;/p&gt;
&lt;h5 id=&quot;non-solution-2-rollback-derivation&quot;&gt;Non-solution #2: Rollback
derivation&lt;/h5&gt;
&lt;p&gt;So what I really wanted was a Nix function (which I will call
“&lt;code&gt;truncate&lt;/code&gt;”) that would take any &lt;code&gt;git&lt;/code&gt; repository
and roll it back in time to the last commit before some repeating time
boundary (where the time boundary might be, say, an hour, or day, or
week). For simplicity, let’s just say that the desired time interval is
one day so I want to roll back the repository to the last revision from
the day before.&lt;/p&gt;
&lt;p&gt;If I had such a &lt;code&gt;truncate&lt;/code&gt; function then it would be easy
to automatically select which revision to use for the full build. I
would:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;extract the source &lt;code&gt;git&lt;/code&gt; repository from the current
Haskell package build&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;truncate&lt;/code&gt; that &lt;code&gt;git&lt;/code&gt; repository to the
last revision from the day before&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use that “truncated” revision as the source for the full
build&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use that full build as the input to the current (incremental)
build&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then if I built multiple revisions for the same day they would all
share the same full build since they would all get “truncated” to the
same revision from the previous day.&lt;/p&gt;
&lt;p&gt;However, there isn’t a great way to implement this
&lt;code&gt;truncate&lt;/code&gt; function in Nix. To see why, consider the
following (wrong) solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;extract the source &lt;code&gt;git&lt;/code&gt; repository from the current
Haskell package build&lt;/p&gt;
&lt;p&gt;Let’s call the derivation for this &lt;code&gt;git&lt;/code&gt; repository
“&lt;code&gt;src&lt;/code&gt;”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;create a new Nix derivation (“&lt;code&gt;src2&lt;/code&gt;”) that rolls back
&lt;code&gt;src&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In other words, this would be a trivial Nix derivation that begins
from &lt;code&gt;src&lt;/code&gt; and runs something like:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; git checkout &lt;span class=&quot;va&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;git&lt;/span&gt; rev-list &lt;span class=&quot;at&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--before&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;1 day ago&amp;#39;&lt;/span&gt; HEAD&lt;span class=&quot;va&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and stores that as the result&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;src2&lt;/code&gt; as the input to the full build&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do you see the problem with that approach?&lt;/p&gt;
&lt;p&gt;The above wrong solution doesn’t allow multiple incremental builds
from the same day to share the same full build from the prior day. This
is because &lt;code&gt;src2&lt;/code&gt; depends on &lt;code&gt;src&lt;/code&gt; and since each
incremental build has a different &lt;code&gt;src&lt;/code&gt; repository then each
also have a different &lt;code&gt;src2&lt;/code&gt; derivation and therefore a
different full build. That in turn defeats the purpose of incremental
builds if we have to do a new full rebuild for each incremental
build.&lt;/p&gt;
&lt;p&gt;For this to work we would need a way to roll back a &lt;code&gt;git&lt;/code&gt;
repository to an older revision that less sensitive to the current
revision.&lt;/p&gt;
&lt;h5 id=&quot;non-solution-3-plain-fetchgit&quot;&gt;Non-solution #3: Plain
&lt;code&gt;fetchGit&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;builtins.fetchGit&lt;/code&gt; utility &lt;em&gt;almost&lt;/em&gt; does what
we want! This primitive function lets you fetch a &lt;code&gt;git&lt;/code&gt;
repository at evaluation time, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nix-repl&amp;gt; builtins.fetchGit { url = ~/proj/turtle; revision = &amp;quot;837f52d2101368bc075d382774460a717904d2ab&amp;quot;; }
{ lastModified = 1655501878; lastModifiedDate = &amp;quot;20220617213758&amp;quot;; narHash = &amp;quot;sha256-Ic4N2gzm0hYsPCynkzETJv7lpAWO1KM+FO+r3ov60y0=&amp;quot;; outPath = &amp;quot;/nix/store/ygznanxv6rmbxw5gkgk7axfxazhsa93z-source&amp;quot;; rev = &amp;quot;837f52d2101368bc075d382774460a717904d2ab&amp;quot;; revCount = 566; shortRev = &amp;quot;837f52d&amp;quot;; submodules = false; }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above result is the same no matter what revision I currently have
checked out at &lt;code&gt;~/proj/turtle&lt;/code&gt; because Nix’s
&lt;code&gt;fetchGit&lt;/code&gt; function produces a content-addressed derivation.
In other words, if two invocations of &lt;code&gt;fetchGit&lt;/code&gt; generate the
same final repository state then they share the same
&lt;code&gt;outPath&lt;/code&gt;. This is exactly the behavior we want: we need the
source repository for the full build to be content-addressed so that
multiple incremental builds can share the same full build.&lt;/p&gt;
&lt;p&gt;However, the problem is that I &lt;em&gt;don’t&lt;/em&gt; exactly know which
revision I want. What I &lt;em&gt;really&lt;/em&gt; want to be able to say is “get
me the last revision from the day before this other revision”.
&lt;code&gt;fetchGit&lt;/code&gt; does not expose any way to do something like
that.&lt;/p&gt;
&lt;p&gt;That brings us to the actual solution:&lt;/p&gt;
&lt;h5 id=&quot;solution&quot;&gt;Solution&lt;/h5&gt;
&lt;p&gt;The solution I went with was the following two pull requests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/NixOS/nix/pull/7362&quot;&gt;Add optional
&lt;code&gt;date&lt;/code&gt; argument to &lt;code&gt;builtins.fetchGit&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This amends &lt;code&gt;builtins.fetchGit&lt;/code&gt; to allow a date
specification, which can either be a relative date
(e.g. &lt;code&gt;1 day ago&lt;/code&gt;) or an absolute date (e.g.
&lt;code&gt;2020-01-01T00:00:00&lt;/code&gt; or a Unix timestamp like
&lt;code&gt;1671388622&lt;/code&gt;). Basically, this argument accepts anything
&lt;code&gt;git&lt;/code&gt; accepts as a date specification (which is a lot since
&lt;code&gt;git&lt;/code&gt; is pretty flexible in this regard).&lt;/p&gt;
&lt;p&gt;The cool thing about this change is that it doesn’t compromise the
purity of &lt;code&gt;builtins.fetchGit&lt;/code&gt;. If a given
&lt;code&gt;fetchGit&lt;/code&gt; specification was pure then adding a date
specification preserves that purity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/NixOS/nixpkgs/pull/204020&quot;&gt;Add
&lt;code&gt;haskell.lib.incremental&lt;/code&gt; utility&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This pull request actually does two separate things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This polishes and upstreams the prototype support for incremental
builds&lt;/p&gt;
&lt;p&gt;In other words, this upstreams Harry and Jade’s work to split a
Haskell build into two builds: a full build and incremental
build&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This uses the &lt;code&gt;fetchGit&lt;/code&gt; patch to automate the full
build selection&lt;/p&gt;
&lt;p&gt;There’s a new &lt;code&gt;pkgs.haskell.lib.incremental&lt;/code&gt; utility which
uses &lt;code&gt;builtins.fetchGit&lt;/code&gt; to automatically update the full
build for you and it has all the desired behaviors (including
branch-local incrementalism).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I could have split this into two separate pull request (and I still
might) but for internal testing purposes it was easier to do everything
on one branch. I’m waiting for a decision on the other pull request
before deciding whether or not to split up this branch.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;demo&quot;&gt;Demo&lt;/h4&gt;
&lt;p&gt;I’ll use my &lt;code&gt;turtle&lt;/code&gt; package as the running example for
the demo. If you clone the &lt;code&gt;gabriella/incremental&lt;/code&gt; branch of
my &lt;code&gt;turtle&lt;/code&gt; repository:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; git clone &lt;span class=&quot;at&quot;&gt;--branch&lt;/span&gt; gabriella/incremental &lt;span class=&quot;dt&quot;&gt;\&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    https://github.com/Gabriella439/turtle.git&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; cd turtle&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… you’ll find the following &lt;code&gt;default.nix&lt;/code&gt; file making use
of the Nixpkgs support for incremental Haskell builds:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;{ interval ? 24 * 60 * 60 }:

let
  nixpkgs = builtins.fetchTarball {
    url    = &amp;quot;https://github.com/MercuryTechnologies/nixpkgs/archive/696e0820b03e8ea7ad6a9ba21a00a79c91efc580.tar.gz&amp;quot;;
    sha256 = &amp;quot;1k3swii3absl154154lmk6zjw11vzzqx8skaiw1250armgfyv9v8&amp;quot;;
  };

  # We need GHC 9.4 or newer for this feature to work
  compiler =&amp;quot;ghc94&amp;quot;;

  overlay = self: super: {
    haskell = super.haskell // {
      packages = super.haskell.packages // {
        &amp;quot;${compiler}&amp;quot; =
          super.haskell.packages.&amp;quot;${compiler}&amp;quot;.override (old: {
            overrides =
              self.lib.fold
                self.lib.composeExtensions
                (old.overrides or (_: _: { }))
                [ (self.haskell.lib.packageSourceOverrides {
                    turtle = ./.;
                  })

                  (hself: hsuper: {
                    turtle-incremental =
                      self.haskell.lib.compose.incremental
                        { inherit interval;

                          makePreviousBuild =
                            truncate: (import (truncate ./.) { }).turtle;
                        }
                        hsuper.turtle;
                  })
                ];
          });
      };
    };
  };

  pkgs = import nixpkgs { config = { }; overlays = [ overlay ]; };

in
  { inherit (pkgs.haskell.packages.&amp;quot;${compiler}&amp;quot;)
      turtle
      turtle-incremental
    ;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, that alone is not enough to make use of incremental builds.
If you attempt to build that (at the time of this writing) you’ll get an
error message like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix build &lt;span class=&quot;at&quot;&gt;--file&lt;/span&gt; ./default.nix turtle-incremental&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;error:&lt;/span&gt; evaluation aborted with the following error message:&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;pkgs.haskell.lib.incremental requires Nix version 2.12.0pre20221128_32c182b or&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;newer&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;--show-trace&amp;#39;&lt;/span&gt; to show detailed location information&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Nixpkgs support for incremental builds depends on a matching
change to the Nix interpreter, so you actually have to run:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix run github:Gabriella439/nix/gabriella/fetchGit &lt;span class=&quot;at&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;\&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    build &lt;span class=&quot;at&quot;&gt;--file&lt;/span&gt; ./default.nix turtle-incremental&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… or if you don’t yet have flakes enabled, then use this pedantically
complete command:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix &lt;span class=&quot;at&quot;&gt;--option&lt;/span&gt; extra-experimental-features &lt;span class=&quot;st&quot;&gt;&amp;#39;nix-command flakes&amp;#39;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;\&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    run github:Gabriella439/nix/gabriella/fetchGit &lt;span class=&quot;at&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;\&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    build &lt;span class=&quot;at&quot;&gt;--file&lt;/span&gt; ./default.nix turtle-incremental&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and that will definitely work.&lt;/p&gt;
&lt;p&gt;Once the build is complete you can inspect the logs and you should
see something like the following &lt;code&gt;buildPhase&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix log ./result&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;…
@nix { &amp;quot;action&amp;quot;: &amp;quot;setPhase&amp;quot;, &amp;quot;phase&amp;quot;: &amp;quot;buildPhase&amp;quot; }
building
Preprocessing library for turtle-1.6.1..
Building library for turtle-1.6.1..
Preprocessing test suite &amp;#39;regression-broken-pipe&amp;#39; for turtle-1.6.1..
Building test suite &amp;#39;regression-broken-pipe&amp;#39; for turtle-1.6.1..
[2 of 2] Linking dist/build/regression-broken-pipe/regression-broken-pipe [Libr&amp;gt;
Preprocessing test suite &amp;#39;regression-masking-exception&amp;#39; for turtle-1.6.1..
Building test suite &amp;#39;regression-masking-exception&amp;#39; for turtle-1.6.1..
[2 of 2] Linking dist/build/regression-masking-exception/regression-masking-exc&amp;gt;
Preprocessing test suite &amp;#39;tests&amp;#39; for turtle-1.6.1..
Building test suite &amp;#39;tests&amp;#39; for turtle-1.6.1..
[2 of 2] Linking dist/build/tests/tests [Library changed]
Preprocessing test suite &amp;#39;system-filepath-tests&amp;#39; for turtle-1.6.1..
Building test suite &amp;#39;system-filepath-tests&amp;#39; for turtle-1.6.1..
[2 of 2] Linking dist/build/system-filepath-tests/system-filepath-tests [Librar&amp;gt;
Preprocessing test suite &amp;#39;cptree&amp;#39; for turtle-1.6.1..
Building test suite &amp;#39;cptree&amp;#39; for turtle-1.6.1..
[2 of 2] Linking dist/build/cptree/cptree [Library changed]
…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is shows that the incremental builds are indeed working. We
still have to re-link some executables (for reasons that are still not
clear to me), but none of the Haskell modules needed to be rebuilt since
nothing has changed (yet) since the last rebuild.&lt;/p&gt;
&lt;p&gt;Now let’s test that by making a small whitespace change to one of the
&lt;code&gt;Turtle&lt;/code&gt; modules:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; echo &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; src/Turtle/Prelude.hs &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then if we rebuild the package we’ll see the following build
phase:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix &lt;span class=&quot;at&quot;&gt;--option&lt;/span&gt; extra-experimental-features &lt;span class=&quot;st&quot;&gt;&amp;#39;nix-command flakes&amp;#39;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;\&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;#cb11-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    run github:Gabriella439/nix/gabriella/fetchGit &lt;span class=&quot;at&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;\&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-3&quot;&gt;&lt;a href=&quot;#cb11-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    build &lt;span class=&quot;at&quot;&gt;--file&lt;/span&gt; ./default.nix &lt;span class=&quot;at&quot;&gt;--print-build-logs&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;…
turtle&amp;gt; building
turtle&amp;gt; Preprocessing library for turtle-1.6.1..
turtle&amp;gt; Building library for turtle-1.6.1..
turtle&amp;gt; [ 7 of 10] Compiling Turtle.Prelude   ( src/Turtle/Prelude.hs, dist/build/Turtle/Prelude.o, dist/build/Turtle/Prelude.dyn_o ) [Source file changed]
turtle&amp;gt; src/Turtle/Prelude.hs:319:1: warning: [-Wunused-imports]
turtle&amp;gt;     The import of ‘Data.Monoid’ is redundant
turtle&amp;gt;       except perhaps to import instances from ‘Data.Monoid’
turtle&amp;gt;     To import instances alone, use: import Data.Monoid()
turtle&amp;gt;     |
turtle&amp;gt; 319 | import Data.Monoid ((&amp;lt;&amp;gt;))
turtle&amp;gt;     | ^^^^^^^^^^^^^^^^^^^^^^^^^
turtle&amp;gt; Preprocessing test suite &amp;#39;regression-broken-pipe&amp;#39; for turtle-1.6.1..
turtle&amp;gt; Building test suite &amp;#39;regression-broken-pipe&amp;#39; for turtle-1.6.1..
turtle&amp;gt; [2 of 2] Linking dist/build/regression-broken-pipe/regression-broken-pipe [Library changed]
turtle&amp;gt; Preprocessing test suite &amp;#39;regression-masking-exception&amp;#39; for turtle-1.6.1..
turtle&amp;gt; Building test suite &amp;#39;regression-masking-exception&amp;#39; for turtle-1.6.1..
turtle&amp;gt; [2 of 2] Linking dist/build/regression-masking-exception/regression-masking-exception [Library changed]
turtle&amp;gt; Preprocessing test suite &amp;#39;tests&amp;#39; for turtle-1.6.1..
turtle&amp;gt; Building test suite &amp;#39;tests&amp;#39; for turtle-1.6.1..
turtle&amp;gt; [2 of 2] Linking dist/build/tests/tests [Library changed]
turtle&amp;gt; Preprocessing test suite &amp;#39;system-filepath-tests&amp;#39; for turtle-1.6.1..
turtle&amp;gt; Building test suite &amp;#39;system-filepath-tests&amp;#39; for turtle-1.6.1..
turtle&amp;gt; [2 of 2] Linking dist/build/system-filepath-tests/system-filepath-tests [Library changed]
turtle&amp;gt; Preprocessing test suite &amp;#39;cptree&amp;#39; for turtle-1.6.1..
turtle&amp;gt; Building test suite &amp;#39;cptree&amp;#39; for turtle-1.6.1..
turtle&amp;gt; [2 of 2] Linking dist/build/cptree/cptree [Library changed]
…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our package only built the “diff” (the &lt;code&gt;Turtle.Prelude&lt;/code&gt;
module we just changed)!&lt;/p&gt;
&lt;h4 id=&quot;benchmarks&quot;&gt;Benchmarks&lt;/h4&gt;
&lt;p&gt;For the &lt;code&gt;turtle&lt;/code&gt; package the speed-up is not a huge deal
because the package doesn’t take long time to compile, but the benefit
for our main project at work is dramatic!&lt;/p&gt;
&lt;p&gt;As I mentioned in the introduction, our work project normally takes
~14 minutes to build and after this change builds can be as fast as ~3.5
minutes. In fact, they could even be faster except for the presence of a
&lt;code&gt;Paths_*&lt;/code&gt; module that is rebuilt each time and triggers a
large number of gratuitous downstream rebuilds (we’re working on fixing
that).&lt;/p&gt;
&lt;h4 id=&quot;limitations&quot;&gt;Limitations&lt;/h4&gt;
&lt;p&gt;There is one major issue with this work, which is that it &lt;em&gt;does
not work well with flakes&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Specifically, if you try to turn the above &lt;code&gt;default.nix&lt;/code&gt;
into the equivalent flake the build will fail because Nix’s flake
mechanism will copy the project into the &lt;code&gt;/nix/store&lt;/code&gt; but
without the &lt;code&gt;.git&lt;/code&gt; history, so &lt;code&gt;builtins.fetchGit&lt;/code&gt;
will fail to to fetch the current repository’s history necessary to
truncate the build to the previous day.&lt;/p&gt;
&lt;p&gt;I believe this can be fixed with a change to flakes to support
something like a &lt;code&gt;?shallow=false&lt;/code&gt; or
&lt;code&gt;?allRefs=true&lt;/code&gt; addendum to &lt;code&gt;git&lt;/code&gt; URLs, but I have
not implemented that, yet.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/4640035808060709351/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2022/12/nixpkgs-support-for-incremental-haskell.html#comment-form' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/4640035808060709351'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/4640035808060709351'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2022/12/nixpkgs-support-for-incremental-haskell.html' title='Nixpkgs support for incremental Haskell builds'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-7096293096571919933</id><published>2022-10-24T05:26:00.003-07:00</published><updated>2022-10-24T05:26:45.820-07:00</updated><title type='text'>How to correctly cache build-time dependencies using Nix</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;How to correctly cache build-time dependencies using Nix&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;A guide to uploading Nix dependencies to a cache efficiently and reliably&quot; /&gt;
  &lt;title&gt;caching&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Professional Nix users often create a shared cache of Nix build
products so that they can reuse build products created by continuous
integration (CI). For example, CI might build Nix products for each main
development branch of their project or even for every pull request and
it would be nice if those build products could be shared with all
developers via a cache.&lt;/p&gt;
&lt;p&gt;However, uploading build products to a cache is a little non-trivial
if you don’t already know the “best” solution, which is the subject of
this post.&lt;/p&gt;
&lt;p&gt;The solution described in this post is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Simple&lt;/p&gt;
&lt;p&gt;It only takes a few lines of Bash code because we use the Nix
command-line interface idiomatically&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Efficient&lt;/p&gt;
&lt;p&gt;It is very cheap to compute which build products to upload and
requires no additional builds nor an exorbitant amount of disk
space&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Accurate&lt;/p&gt;
&lt;p&gt;It uploads the build products that most people would intuitively want
to upload&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Throughout this post I will be using the newer Nix command-line
interface and flakes, which requires either adding this line to your
&lt;code&gt;nix.conf&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;extra-experimental-features = nix-command flakes&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… and restarting your Nix daemon (if you have a multi-user Nix
installation), or alternatively adding these flags to the beginning of
all &lt;code&gt;nix&lt;/code&gt; commands throughout this post:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix &lt;span class=&quot;at&quot;&gt;--option&lt;/span&gt; extra-experimental-features &lt;span class=&quot;st&quot;&gt;&amp;#39;nix-command flakes&amp;#39;&lt;/span&gt; …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;wrong-solution-0&quot;&gt;Wrong solution #0&lt;/h4&gt;
&lt;p&gt;As a running example, suppose that our CI builds a top-level build
product using a command like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix build .#example&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The naïve way to upload that to the cache would be:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix store sign &lt;span class=&quot;at&quot;&gt;--key-file&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${KEY_FILE}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--recursive&lt;/span&gt; .#example&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix copy &lt;span class=&quot;at&quot;&gt;--to&lt;/span&gt; s3://cache.example.com .#example&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: You will need to generate a &lt;code&gt;KEY_FILE&lt;/code&gt; using the
&lt;code&gt;nix-store --generate-binary-cache-key&lt;/code&gt; command if you
haven’t already. For more details, see the following documentation from
the manual:&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Click to expand to see the documentation
&lt;/summary&gt;
&lt;pre&gt;&lt;code&gt;Operation --generate-binary-cache-key
   Synopsis
       nix-store --generate-binary-cache-key key-name secret-key-file
       public-key-file

   Description
       This command generates an Ed25519 key pair (http://ed25519.cr.yp.to/)
       that can be used to create a signed binary cache. It takes three
       mandatory parameters:

       1.     A key name, such as cache.example.org-1, that is used to look up
              keys on the client when it verifies signatures. It can be
              anything, but it’s suggested to use the host name of your cache
              (e.g.  cache.example.org) with a suffix denoting the number of the
              key (to be incremented every time you need to revoke a key).

       2.     The file name where the secret key is to be stored.

       3.     The file name where the public key is to be stored.&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;/blockquote&gt;
&lt;p&gt;That seems like a perfectly reasonable thing to do, right? However,
the problem with that is that it is &lt;em&gt;incomplete&lt;/em&gt;, meaning that
the cache would still be missing several useful build products that
developers would expect to be there.&lt;/p&gt;
&lt;p&gt;Specifically, the above command only copies the “run-time”
dependencies of our build product whereas most developers expect the
cache to also include “build-time” dependencies, and I’ll explain the
distinction between the two.&lt;/p&gt;
&lt;h4 id=&quot;run-time-vs.-build-time&quot;&gt;Run-time vs. Build-time&lt;/h4&gt;
&lt;p&gt;Many paths in the &lt;code&gt;/nix/store&lt;/code&gt; are not “valid” in
isolation. They typically depend on other paths within the
&lt;code&gt;/nix/store&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, suppose that I build the GNU &lt;code&gt;hello&lt;/code&gt; package,
like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; nix build nixpkgs&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt;hello&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can query all of the other paths within the &lt;code&gt;/nix/store&lt;/code&gt;
that the &lt;code&gt;hello&lt;/code&gt; package transitively depends on &lt;em&gt;at
run-time&lt;/em&gt; using this command:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix-store &lt;span class=&quot;at&quot;&gt;--query&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--requisites&lt;/span&gt; ./result&lt;/span&gt;
&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/jzid7pfrhv6gpiwqbx6763v0g9c3bdzb-libobjc-11.0.0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/9rb5qaba71mkgfgd8wfqg03cmi46xarg-apple-framework-CoreFoundation-11.0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/akjp4x41jjx5hzgzrschwqzr8qfsdpys-hello-2.12.1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… or I can print the same information in tree form like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix-store &lt;span class=&quot;at&quot;&gt;--query&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--tree&lt;/span&gt; ./result&lt;/span&gt;
&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/akjp4x41jjx5hzgzrschwqzr8qfsdpys-hello-2.12.1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;└───/nix/store/9rb5qaba71mkgfgd8wfqg03cmi46xarg-apple-framework-CoreFoundation-11.0.0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb8-4&quot;&gt;&lt;a href=&quot;#cb8-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ex&quot;&gt;└───/nix/store/jzid7pfrhv6gpiwqbx6763v0g9c3bdzb-libobjc-11.0.0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On my macOS machine, it has two run-time dependencies (other than
itself) within the &lt;code&gt;/nix/store&lt;/code&gt;: &lt;code&gt;libobjc&lt;/code&gt; and
&lt;code&gt;apple-framework-CoreFoundation-11.0&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: there might be other run-time dependencies, because I believe
Nixpkgs support for macOS requires some impure system dependencies, but
I’m not an expert on this so I could be wrong.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These are called “run-time” dependencies because we cannot run our
&lt;code&gt;hello&lt;/code&gt; executable without them.&lt;/p&gt;
&lt;p&gt;Nix prevents us from getting into situations where a
&lt;code&gt;/nix/store&lt;/code&gt; path is missing its run-time dependencies. For
example, if I were to &lt;code&gt;nix copy&lt;/code&gt; the &lt;code&gt;hello&lt;/code&gt; build
product to any cache, then Nix would perform the following steps, in
order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Copy &lt;code&gt;libobjc&lt;/code&gt; to the cache&lt;/p&gt;
&lt;p&gt;… since that has no dependencies&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy &lt;code&gt;apple-framework-CoreFoundation&lt;/code&gt; to the cache&lt;/p&gt;
&lt;p&gt;… since its &lt;code&gt;libobjc&lt;/code&gt; dependency is now satisfied within
the cache&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy &lt;code&gt;hello&lt;/code&gt; to the cache&lt;/p&gt;
&lt;p&gt;… since its &lt;code&gt;apple-framework-CoreFoundation&lt;/code&gt; dependency is
now satisfied within the cache&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, Nix also has a separate notion of “build-time” dependencies,
which are dependencies that we need to in order to build the
&lt;code&gt;hello&lt;/code&gt; package.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The reason we’re interested in build-time dependencies for our
project is that we want developers to be able to rebuild the project if
they make any changes to the source code. If we were to only cache the
run-time dependencies of our project that wouldn’t cache the development
environment that developers need.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In order to query these dependencies I need to first get the
“derivation” (&lt;code&gt;.drv&lt;/code&gt; file) for &lt;code&gt;hello&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; DERIVATION=&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;nix&lt;/span&gt; path-info &lt;span class=&quot;at&quot;&gt;--derivation&lt;/span&gt; nixpkgs#hello&lt;span class=&quot;va&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;#cb9-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; declare &lt;span class=&quot;at&quot;&gt;-p&lt;/span&gt; DERIVATION&lt;/span&gt;
&lt;span id=&quot;cb9-4&quot;&gt;&lt;a href=&quot;#cb9-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;typeset&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;DERIVATION&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;/nix/store/4a78f0s4p5h2sbcrrzayl5xas2i7zq1m-hello-2.12.1.drv&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can think of a derivation file as a build recipe that contains
instructions for how to build the corresponding build product (the
&lt;code&gt;hello&lt;/code&gt; package in this case).&lt;/p&gt;
&lt;p&gt;I can query the direct dependencies of that derivation using this
command:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix-store &lt;span class=&quot;at&quot;&gt;--query&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--references&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${DERIVATION}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;#cb10-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/labgzlb16svs1z7z9a6f49b5zi8hb11s-bash-5.1-p16.drv&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-4&quot;&gt;&lt;a href=&quot;#cb10-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/cdk3pz11mvhqpphr0197wwmzhqppn7rl-stdenv-darwin.drv&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-5&quot;&gt;&lt;a href=&quot;#cb10-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/hwymznwkd1kgf5ldcldjl9bnc1wz2azb-hello-2.12.1.tar.gz.drv&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Many of these dependencies are themselves derivations
(&lt;code&gt;.drv&lt;/code&gt; files), meaning that they represent other packages
that Nix might have to build or fetch from a cache.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: the &lt;code&gt;.drv&lt;/code&gt; files are actually not the build-time
dependencies, but rather the instructions for building them. You can
convert any &lt;code&gt;.drv&lt;/code&gt; file to the matching product it is
supposed to build using the same &lt;code&gt;nix build&lt;/code&gt; command, like
this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix build /nix/store/labgzlb16svs1z7z9a6f49b5zi8hb11s-bash-5.1-p16.drv&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Does that mean that these build-time dependencies are on our machine
if we built &lt;code&gt;nixpkgs#hello&lt;/code&gt;? Not necessarily. In fact, in all
likelihood the &lt;code&gt;nixpkgs#hello&lt;/code&gt; build was cached, meaning that
&lt;code&gt;nix build nixpkgs#hello&lt;/code&gt; only downloaded &lt;code&gt;hello&lt;/code&gt;
and its run-time dependencies and no build-time dependencies were
required nor installed by Nix.&lt;/p&gt;
&lt;p&gt;However, I could in principle force Nix to build the
&lt;code&gt;hello&lt;/code&gt; package instead of downloading it from a cache, like
this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix build nixpkgs#hello &lt;span class=&quot;at&quot;&gt;--rebuild&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and that would download the direct build-time dependencies of the
&lt;code&gt;hello&lt;/code&gt; package in order to rebuild the package.&lt;/p&gt;
&lt;h4 id=&quot;wrong-solution-1&quot;&gt;Wrong solution #1&lt;/h4&gt;
&lt;p&gt;By this point you might suppose that you have enough information to
come up with a better set of &lt;code&gt;/nix/store&lt;/code&gt; paths to cache.
Your solution might look like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Get the derivation for the top-level build product&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get the direct build-time dependencies of that
derivation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build the top-level build product and its direct build-time
dependencies&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cache the top-level build product and its direct build-time
dependencies&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, something like this Nix code:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; DERIVATION=&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;nix&lt;/span&gt; path-info &lt;span class=&quot;at&quot;&gt;--derivation&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${BUILD}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-2&quot;&gt;&lt;a href=&quot;#cb13-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-3&quot;&gt;&lt;a href=&quot;#cb13-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; DEPENDENCIES=&lt;span class=&quot;er&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;nix-store&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--query&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--references&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${DERIVATION}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-4&quot;&gt;&lt;a href=&quot;#cb13-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-5&quot;&gt;&lt;a href=&quot;#cb13-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix build &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${BUILD}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${DEPENDENCIES&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-6&quot;&gt;&lt;a href=&quot;#cb13-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-7&quot;&gt;&lt;a href=&quot;#cb13-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix store sign &lt;span class=&quot;at&quot;&gt;--key-file&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${KEY_FILE}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--recursive&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${BUILD}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${DEPENDENCIES&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-8&quot;&gt;&lt;a href=&quot;#cb13-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-9&quot;&gt;&lt;a href=&quot;#cb13-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix copy &lt;span class=&quot;at&quot;&gt;--to&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${CACHE}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${BUILD}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${DEPENDENCIES&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is better, but still not good enough!&lt;/p&gt;
&lt;p&gt;The problem with this solution is that it only works well if your
dependencies never change and you only modify your top-level project. If
you upgrade or patch any of your direct build-time dependencies then you
need to have &lt;em&gt;their&lt;/em&gt; build-time dependencies cached so that you
can quickly rebuild them.&lt;/p&gt;
&lt;p&gt;In fact, going two layers deep is still not enough; in practice you
can’t easily anticipate in advance how deep in the build-time dependency
tree you might need to patch or upgrade things. For example, you might
need to patch or upgrade your compiler, which is really deep in your
build-time dependency tree.&lt;/p&gt;
&lt;h4 id=&quot;wrong-solution-2&quot;&gt;Wrong solution #2&lt;/h4&gt;
&lt;p&gt;Okay, so maybe we can try to build and cache &lt;em&gt;all&lt;/em&gt; of our
build-time dependencies?&lt;/p&gt;
&lt;p&gt;Wrong again. There are way too many of them. You can query them by
replacing &lt;code&gt;--references&lt;/code&gt; with &lt;code&gt;--requisites&lt;/code&gt; and
you’ll a giant list of results, even for “small” packages. For
example:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; DERIVATION=&lt;span class=&quot;va&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;nix&lt;/span&gt; path-info &lt;span class=&quot;at&quot;&gt;--derivation&lt;/span&gt; nixpkgs#hello&lt;span class=&quot;va&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;#cb14-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;#cb14-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix-store &lt;span class=&quot;at&quot;&gt;--query&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--requisites&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${DERIVATION}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-4&quot;&gt;&lt;a href=&quot;#cb14-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/8djp1rizc1dblv8svnb0mpa0c3lwvc17-drop-comments.patch&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-5&quot;&gt;&lt;a href=&quot;#cb14-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-6&quot;&gt;&lt;a href=&quot;#cb14-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/3glray2y14jpk1h6i599py7jdn3j2vns-mkdir.drv&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-7&quot;&gt;&lt;a href=&quot;#cb14-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/50ql5q0raqkcydmpi6wqvnhs9hpdgg5f-cpio.drv&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-8&quot;&gt;&lt;a href=&quot;#cb14-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/81xahsrhpn9mbaslgi5sz7gsqra747d4-unpack-bootstrap-tools-aarch64.sh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-9&quot;&gt;&lt;a href=&quot;#cb14-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/fzbk4fnbjqhr0l1scx5fspsx5najbrbm-bootstrap-tools.cpio.bz2.drv&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-10&quot;&gt;&lt;a href=&quot;#cb14-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/gxzl4vmccqj89yh7kz62frkxzgdpkxmp-sh.drv&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-11&quot;&gt;&lt;a href=&quot;#cb14-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;…&lt;/span&gt; 🌺 500+ derivations later 🌺 …&lt;/span&gt;
&lt;span id=&quot;cb14-12&quot;&gt;&lt;a href=&quot;#cb14-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/i0zc5mm4vpj3lviyydb9s73j53mypkrg-nghttp2-1.49.0.drv&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-13&quot;&gt;&lt;a href=&quot;#cb14-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/w37b5s734m53gxnzqyb5v0v98mhdfg2i-coreutils-9.1.drv&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-14&quot;&gt;&lt;a href=&quot;#cb14-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/mmsrbggvzn6rwlx1ijw90sw3wvhzj18j-openssl-3.0.5.drv&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-15&quot;&gt;&lt;a href=&quot;#cb14-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/n7iibs6b818v402j0yczf4mgy73sbzpv-libssh2-1.10.0.drv&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-16&quot;&gt;&lt;a href=&quot;#cb14-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/z074ki54p77r7db3wsgxh9p18f67xnv8-curl-7.85.0.drv&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-17&quot;&gt;&lt;a href=&quot;#cb14-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/hwymznwkd1kgf5ldcldjl9bnc1wz2azb-hello-2.12.1.tar.gz.drv&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-18&quot;&gt;&lt;a href=&quot;#cb14-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/4a78f0s4p5h2sbcrrzayl5xas2i7zq1m-hello-2.12.1.drv&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
&lt;summary&gt;
Click to expand and see the full list of build-time dependencies
&lt;/summary&gt;
&lt;pre&gt;&lt;code&gt;/nix/store/8djp1rizc1dblv8svnb0mpa0c3lwvc17-drop-comments.patch
/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh
/nix/store/3glray2y14jpk1h6i599py7jdn3j2vns-mkdir.drv
/nix/store/50ql5q0raqkcydmpi6wqvnhs9hpdgg5f-cpio.drv
/nix/store/81xahsrhpn9mbaslgi5sz7gsqra747d4-unpack-bootstrap-tools-aarch64.sh
/nix/store/fzbk4fnbjqhr0l1scx5fspsx5najbrbm-bootstrap-tools.cpio.bz2.drv
/nix/store/gxzl4vmccqj89yh7kz62frkxzgdpkxmp-sh.drv
/nix/store/pjbpvdy0gais8nc4sj3kwpniq8mgkb42-bzip2.drv
/nix/store/7kcayxwk8khycxw1agmcyfm9vpsqpw4s-bootstrap-tools.drv
/nix/store/1i5y55x4b4m9qkx5dqbmr1r6bvrqbanw-multiple-outputs.sh
/nix/store/59jmzisg8fkm9c125fw384dqq1np602l-move-docs.sh
/nix/store/bnj8d7mvbkg3vdb07yz74yhl3g107qq5-patch-shebangs.sh
/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh
/nix/store/ckzrg0f0bdyx8rf703nc61r3hz5yys9q-builder.sh
/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh
/nix/store/g8xg0i02aqwhgxwd2vnp5ax3d6lrkg1v-strip.sh
/nix/store/jngr4r80x5jn482ckqrfh08ljrx1k86f-setup.sh
/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh
/nix/store/kxw6q8v6isaqjm702d71n2421cxamq68-make-symlinks-relative.sh
/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh
/nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epoch-to-latest.sh
/nix/store/wlwcf1nw2b21m4gghj70hbg1v7x53ld8-reproducible-builds.sh
/nix/store/nbxwxwqwcr9rrmxb6gb532f18102815x-bootstrap-stage0-stdenv-darwin.drv
/nix/store/ycwm35msmsdi2qgjax1slmjffsmwy8am-write-mirror-list.sh
/nix/store/i65va14cylqc74y80ksgnrsaixk39mmh-mirrors-list.drv
/nix/store/lphxcbw5wqsjskipaw1fb8lcf6pm6ri6-builder.sh
/nix/store/bgp77z9z42x35vmwyfywqaiqsmnb3ffa-patchutils-0.3.3.tar.xz.drv
/nix/store/3lhw0v2wyzimzl96xfsk6psfmzh38irh-bash51-007.drv
/nix/store/3p62kw9mpkcp0grhirfn46i9afhqf0c9-bash51-015.drv
/nix/store/3za6mykjk49sr616w80lvmy5xcmbkrp3-bash51-006.drv
/nix/store/5lv0fbn6ajwdzw04nz88cc0qqrgrvnp1-bash51-016.drv
/nix/store/4dq81yma6drk9701h17h64zx47r7p5n8-utils.sh
/nix/store/ds0q1li2i96dy7yp6n8zkbakz7m7d5l8-bootstrap-stage0-stdenv-darwin.drv
/nix/store/vcbpmcxpir9nyy480vx5sxb4pm2v0dps-bootstrap-stage0-sigtool.drv
/nix/store/5xk8j72a1dddq1gxh39amgifknwb0lvm-signing-utils.drv
/nix/store/fmd71yqpgwrkdbidzxwmfasqp39zzf8r-CLTools_macOSNMOS_SDK.pkg.drv
/nix/store/ijdrwgv6kv4k17qb5jvqkbs1ccqrlalb-bootstrap-stage0-pbzx.drv
/nix/store/z727aawh6imz3hpmviqyf4zlgprfn8zf-bootstrap-stage0-cpio.drv
/nix/store/fbhkqzn4wc69pa4rvndin5h4b8k02f5c-MacOSX-SDK-11.0.0.drv
/nix/store/72fl7wcbnl6srm5dxb7xbnn20zr07011-libobjc-11.0.0.drv
/nix/store/93n8xmgm6x65mh88amw15wps3h18yqn8-bootstrap-stage0-libcxx.drv
/nix/store/cyk47lyfswsxgn7z2qnhkp0919nhdd3b-config.sub?id=6faca61810d335c7837f320733fe8e15a1431fc2.drv
/nix/store/lmdwlh09b7g3kzga0i2hprcfxszg3ghz-config.guess?id=6faca61810d335c7837f320733fe8e15a1431fc2.drv
/nix/store/9vh7qbpb8chmx5r5cswrix00hngy7vky-gnu-config-2021-01-25.drv
/nix/store/2idjp2xdckqyrdk3hd8msp4cfdi6b8if-utils.bash
/nix/store/47gspvwaxra868q4rsmva0g5nz7zac6p-add-clang-cc-cflags-before.sh
/nix/store/797k3249lr4rx8wslf7kcsa3hv6fis3x-role.bash
/nix/store/bybz12bxjbk94hm58zc70sc0xhj2dxif-add-darwin-ldflags-before.sh
/nix/store/c1vmxz359mfljs3cdimhd2fr6fw0n99s-add-hardening.sh
/nix/store/civvq4xh4p0mj04l7k73p1xbsq1rs9bc-darwin-install_name_tool-wrapper.sh
/nix/store/dk3ly72kiv27srcj1mjr5n4112vx2hfk-setup-hook.sh
/nix/store/khkfggnk4h14f2spsjcjrxlf8himd4vj-bootstrap-stage0-rewrite-tbd.drv
/nix/store/ff3yqdllxmlp1r8mfkfgjf671r8flf8j-libSystem-11.0.0.drv
/nix/store/gvr0mz9wfz4g0z9w6477ikywmcivk1mh-bootstrap-stage0-coreutils.drv
/nix/store/jravmbdjn0md7cnn6rbqwf3aflw72msb-post-link-sign-hook.drv
/nix/store/js1lic1bmif60d4mlffkpbvz5jim34n3-darwin-strip-wrapper.sh
/nix/store/m0ww06j4y2v3jdsabrr8n0y9d4nnvqn3-bootstrap-stage0-gnugrep.drv
/nix/store/mrzpfh0ml9k07sw019ydagbb2z1q4sxz-add-flags.sh
/nix/store/vicx6qnvvxb96y0iwnya977viira2apc-ld-wrapper.sh
/nix/store/dj5xngrf61x9isyp2r5d84h3i43wg65l-bootstrap-stage0-binutils-wrapper-.drv
/nix/store/gn1b4gh07byi8xnahgc800jznyarqin0-bootstrap-stage0-clang.drv
/nix/store/hc3z14jhqg35x5286hw5wmc3injg62fa-add-hardening.sh
/nix/store/ji2yrl1na00bwav65hh1vr0nc0s1xzvz-add-flags.sh
/nix/store/lck6bijpq64zjvmkwdi081v6wm2r8nyx-bootstrap-stage0-libcxxabi.drv
/nix/store/li62b4bvg51zikbni9xadg08za340k71-cc-wrapper.sh
/nix/store/nc4bvrgb8jxh4k1fq2zgzh4mmxqavp54-setup-hook.sh
/nix/store/xbfsjb46np040h2aph1k76iybq9rzd7x-bootstrap-stage0-compiler-rt.drv
/nix/store/cz1x2bgvnzi0qc39hjwm0ppdvqwkfybl-bootstrap-stage0-clang-wrapper-11.1.0.drv
/nix/store/00qr10y7z2fcvrp9b2m46710nkjvj55z-update-autotools-gnu-config-scripts.sh
/nix/store/qzvw98z9qwv3vasfc9lwcq0d1sgfin6v-hook.drv
/nix/store/vp49i9krzqf282vj6bqr6rxs96d2a1fv-apple-framework-CoreFoundation-11.0.0.drv
/nix/store/lkjwmgmnm4f7d3iiglxglrgll1c8vdkf-bootstrap-stage1-stdenv-darwin.drv
/nix/store/r09r8wpshjqdkx0xwkin79km812nbgp3-m4-1.4.19.tar.bz2.drv
/nix/store/7rxh71ny4xrckw1ip50hv44mylpxpd5v-gnum4-1.4.19.drv
/nix/store/h1s43lrwjjf98dmfhayn6cmax2h19qz9-bison-3.8.2.tar.gz.drv
/nix/store/85f1q5rm0qzqay7fk3935h6kvzfqdcfv-http-tiny-verify-ssl-by-default.patch
/nix/store/dm81j9qdcdr4c458pqbc9wvq9ymgzk4m-setup-hook.sh
/nix/store/mb381gpm9k5wdl37l5ad5pp8w11qzhjg-no-sys-dirs-5.31.patch
/nix/store/n315a3g9bcxlypqzbm36nzrrg40h6lcj-cpp-precomp.patch
/nix/store/ppbkcbhzwzwpqaad6whhr9qgxjvj82gj-perl-5.36.0.tar.gz.drv
/nix/store/0phjl3yzr4m1gady21l21h4brn140hjm-CVE-2022-37434.patch
/nix/store/jw5f744vn0nv6q0ms6s5q0w0kkml2a8v-fix-configure-issue-cross.patch
/nix/store/mg7z3nsc96864cfkx2jwda7wmpdn71dl-zlib-1.2.12.tar.gz.drv
/nix/store/xniqbx8mh8lx06bw267g6hkfkp2c79kn-comprehensive-crc-validation-for-wrong-implementations.patch
/nix/store/vblzwf77rk1mxxk6qjhgaqp43z36j992-zlib-1.2.12.drv
/nix/store/x0ll5lnagy6lg7hgvqb26il3qnmsqisd-sw_vers.patch
/nix/store/m9h3rw3jlzf8hapgiw29i5fjyzw7r9v4-perl-5.36.0.drv
/nix/store/5nxxxmzb23y9pzp673grmfs95jrx14rx-bison-3.8.2.drv
/nix/store/13i5k09s5g6gdkaj731rqsi1qc70khka-bootstrap-stage1-stdenv-darwin.drv
/nix/store/jik02mkz72r2f6hhxnlhp6h5f0fi89gw-expand-response-params.c
/nix/store/g9h3q3y44p4ycn8vdai1s9aw1f0s7icy-expand-response-params.drv
/nix/store/734l1nlc4d2zbksafqvp5436ynp26z3g-bash51-014.drv
/nix/store/crar8b49gsplly9x0v279bibvixmj9gc-bash51-003.drv
/nix/store/d7i8a7c8mb0qmsb1c3rj8g38m071vmaf-bash51-004.drv
/nix/store/gapa7v6rz1gzjsn1kckpb4fj07pmznw6-bash-5.1.tar.gz.drv
/nix/store/ig7d802vp43ap4ga26r2vd174h2c1bk7-bash51-010.drv
/nix/store/jj3jm1bjqnlwz4yassc9h70mwmrxy442-bash51-008.drv
/nix/store/krhwn1440gxvry5gw4wmzk6y83fm4bdw-bash51-001.drv
/nix/store/n92wsf556wqp4dbf0rxwx1b175m0vwyn-bash51-013.drv
/nix/store/nkzvvyvmckwv4a8r84iwyfbivvw05nvc-bash51-009.drv
/nix/store/nm5946y3ffkynrz67vz47ik0ygvg6byn-pgrp-pipe-5.1.patch
/nix/store/pkd2vxq8w5fhrfk6k89hi29d5ldbbj29-bash51-005.drv
/nix/store/q6jpdv2j5dh4nbsbmkzy6za1vfpb2l30-bash51-011.drv
/nix/store/w8q9jdvb96sayxyi25amd27yki283zg9-bash51-002.drv
/nix/store/wg9gacyfgldnwh3gc23nr49n4j0b58sv-bash51-012.drv
/nix/store/4kpfa2fhfdb6r9icym3q8n3w1s8mfv6z-bash-5.1-p16.drv
/nix/store/k9bkzj7nhqxnvbmz5vk8pmzxpmym0qa6-file-5.43.tar.gz.drv
/nix/store/hgps4nk9p01z9zngmbnbv42pqmzg9nhg-file-5.43.drv
/nix/store/4cmjzk8yr6i5vls5d2050p653zzdvmvp-setup-hook.sh
/nix/store/4hcdpxjmr4nh625ry840g70xp00vdf5a-2.71-fix-race.patch
/nix/store/kxdvjnq8cl9jd5g9jndhhl5a17h2xbih-autoconf-2.71.tar.xz.drv
/nix/store/irpqw60zcy00lj3hjia8gr15z984x9xn-texinfo-6.8.tar.xz.drv
/nix/store/19ndr8g629l0xzzs1x7xz4z0fbkwpgcj-xz-5.2.6.tar.bz2.drv
/nix/store/kas3n4g0jyrz3rhl1znjcxqmpyddk8sw-xz-5.2.6.drv
/nix/store/5pj1w63j668yqssrxb4dykpzpm1yhx9q-libiconv-50.tar.gz.drv
/nix/store/xrvbfm0ahaiik1vlxzn3vsp5gyhksy2n-setup-hook.sh
/nix/store/5xx3gba361rf696b27r3jfa0q7rmlyh9-libiconv-50.drv
/nix/store/ny42y6hs4p294rvnrwbmrpwzqghw2816-gettext-setup-hook.sh
/nix/store/p2fp6i7hjx9af1wbwr32k217wp2dxmiw-absolute-paths.diff
/nix/store/sihz0cdcajckxnhjm8n4p652sbd5xwxd-gettext-0.21.tar.gz.drv
/nix/store/ri729qz1iq3iqr9bdvb406izklj1fpfa-gettext-0.21.drv
/nix/store/yl6g04fsr6p9lkvccqjjl8q1xnnmw49s-fix-glibc-2.34.patch
/nix/store/v94cwmp6hs6dvrw6v4jmqk9jwl0ik75q-texinfo-6.8.drv
/nix/store/ih062232k706fpydng4xlk75fpzraxmn-autoconf-2.71.drv
/nix/store/r5kd1di71n7xk9kjvrgyy75cz0c0skay-automake-1.16.5.tar.xz.drv
/nix/store/hqf9nllss9z0i3gmi8sv9kjcm9qhvf8q-automake-1.16.5.drv
/nix/store/ipdgmqcfn56mhgmq3hv3yy5xj2kj2ri7-libtool-2.4.7.tar.gz.drv
/nix/store/06nfwja5j8c36n780jvlwjv8gs2m7i3m-gettext-1.07.tar.gz.drv
/nix/store/qf3mzpvsmkrw963xchbivcci06078n13-builder.sh
/nix/store/j7jrmh8zz3jjcdsa050f1ja19nm07vz7-perl5.36.0-gettext-1.07.drv
/nix/store/lac4y6zxaqqhyf4r60p3ag68k3ckifvv-help2man-1.49.2.tar.xz.drv
/nix/store/k9223a4j2ar7j76zpjs8fmlfl9q76a76-help2man-1.49.2.drv
/nix/store/9gns0vpn7fajyzm3w2rsdbcz9pqgfsrm-libtool-2.4.7.drv
/nix/store/ghdamd4hl6yi7jysh1x3436fj1v9yvjb-autoreconf.sh
/nix/store/8byqd66k9p5zbiggz2a9frki47xqy28r-hook.drv
/nix/store/ing5qg4q87wdvm1h455c3xn889m2bbj0-coreutils-9.1.tar.xz.drv
/nix/store/66ayp7hm682rxhlxd061fvprrmf2zx3c-gmp-6.2.1.tar.bz2.drv
/nix/store/h96aykl4imzhfapnmavplr49v43c8apx-6.2.1-CVE-2021-43618.patch
/nix/store/k49s9lr0lw5zhwsz4ni4rf2643byqrak-gmp-with-cxx-6.2.1.drv
/nix/store/jp5jbqfxjazf38w63bipqf68h7hyq4v0-coreutils-9.1.drv
/nix/store/322332kbmj7ig7ii3cwlfjcg4mf5xgz6-grep-3.7.tar.xz.drv
/nix/store/m2qc8a9c4yr5xmqck50fpzzwzpqggbbw-stacksize-detection.patch
/nix/store/qk3pnajspb378zx6c8g0anj2d7z31a88-pcre-8.45.tar.bz2.drv
/nix/store/pgzgn3knxdn335qci805a49bvlnl4ppa-pcre-8.45.drv
/nix/store/l2bbsavfww8zv5a9ncldh83c9vsz3y01-gnugrep-3.7.drv
/nix/store/1igs2sr5j99180z801426ivzzbikxi7q-CVE-2019-13232-2.patch.drv
/nix/store/1k1wn8807yizgz3ghnbd4k6zsc0dzfkr-CVE-2014-9913.patch
/nix/store/2cq4hsc1v8ylccspw8351r72s56w1fia-CVE-2015-7697.diff
/nix/store/6np2acjv1nxcg0xzsv9a76wyrpxznkna-CVE-2014-8141.diff
/nix/store/6zqn6w9rwkgfa6z1hpagnh5xhz2dag6m-CVE-2015-7696.diff
/nix/store/97d26l91h0db8h0qkmhxwi5d8shrilv6-CVE-2016-9844.patch
/nix/store/p67r2s04xw8plqs0552rc5qyj5016wxb-bzip2-1.0.8.tar.gz.drv
/nix/store/ra4ikm6b0nxgi0sil4mk3ikkingm80x0-bzip2-1.0.6.2-autoconfiscated.patch.drv
/nix/store/awrvprhqr5j0n6n8zqss2i5cyv25wis3-bzip2-1.0.8.drv
/nix/store/bqwhj80hz1z49365miaqcxp4c2mzsfp3-unzip60.tar.gz.drv
/nix/store/cciw7lgkldvx25d77cxpjhh1iw4xghd9-setup-hook.sh
/nix/store/d9b2qrrq32jzdsdx4y33inzrra5n5z5n-CVE-2014-8140.diff
/nix/store/ly8k93l59mlzlgnq679vcp54nqpi4sdc-06-initialize-the-symlink-flag.patch.drv
/nix/store/mwkywhh9wvym79lzlk8gsanw5swhfb8w-CVE-2019-13232-3.patch.drv
/nix/store/p46prhgmv7ibjh9igfkbc6zfxbbi6sk5-dont-hardcode-cc.patch
/nix/store/p55a764pi2f4kkx3adb43bxb2dnb4z6r-CVE-2018-18384.patch
/nix/store/pdcj2chp5c2gvm2jc3shbajfc62kbx1i-CVE-2014-9636.diff
/nix/store/rdkdki1f24q8mqgnbsyk7gmh28c027ks-CVE-2014-8139.diff
/nix/store/wx62rx7078a86mpimgg5gfsiisx3qk5l-CVE-2019-13232-1.patch.drv
/nix/store/zxpjddlgb46cdynbgbgq41i6k9a40wfg-unzip-6.0.drv
/nix/store/cnds925pfnac943p1f516pxwrbqy0gdi-source.drv
/nix/store/2cqnhs2ds0gn7xrq0zcwbj7gsv6l5xr7-use-etc-ssl-certs-darwin.patch
/nix/store/2yk6ab4c6j9y00g3x3cixqgi9jmgiwzd-openssl-3.0.5.tar.gz.drv
/nix/store/6hyy4ngzkxdsg71zmryvy3xkw0ydag21-openssl-disable-kernel-detection.patch
/nix/store/sq4h6bqjx12v9whvm65pjss25hg1538q-nix-ssl-cert-file.patch
/nix/store/imc07k6kg26rcam012pkgxba3mj0c0xq-openssl-3.0.5.drv
/nix/store/1ksmnsr3m6paw8gs7jp9b623agzdrqi2-add-flags.sh
/nix/store/9whvblgb7bgnmqsv7y5xqs1w8xv9aa1d-pkg-config-wrapper.sh
/nix/store/c4akajrb4jg50k72jw7zfbyv8z139ri0-setup-hook.sh
/nix/store/f4bvwqvj0y3z6blvh0knz71a8yq1c45p-requires-private.patch
/nix/store/qycyfzgf92i96ygij2b5bz27ll6mkyyw-pkg-config-0.29.2.tar.gz.drv
/nix/store/dq5y5c22p6ixswcqaxb6s0ymvi2bwmlm-pkg-config-0.29.2.drv
/nix/store/ssvy1s8p78q1jfy7bap0kl49sm8ad0m3-pkg-config-wrapper-0.29.2.drv
/nix/store/xz6rbdix12jn1bd3lydd1cagnvr94yf4-sigtool-0.1.2.drv
/nix/store/gp50m2w3aab5w1pgx9h18yky5x5jzzyq-signing-utils.drv
/nix/store/gz78khbgfz3rh5phvq1bavdp4v0bcimn-post-link-sign-hook.drv
/nix/store/zp333xdrvsgn3mjicwcbfiqd259ix6gd-MacOSX-SDK-11.0.0.drv
/nix/store/x3wxdzi7f36fnb1sryr1ifgafsycasks-libSystem-11.0.0.drv
/nix/store/v77imik30yacsdbfqkkdv0djyk1hsdgh-bootstrap-stage0-binutils-wrapper-.drv
/nix/store/6cqn1ln7v306ymslgmvcy77pbq30pjy1-bootstrap-stage0-clang-wrapper-11.1.0.drv
/nix/store/3inq067xw7bic7dy828bgjjzx54kav9v-install-shell-files.sh
/nix/store/70pf3jk5jc64jc82hqck1jx6z5l42xj3-install-shell-files.drv
/nix/store/zwlzlqvh3x2nw1421cvx2210bzz3xgfn-libev-4.33.tar.gz.drv
/nix/store/gn80i99rcc85d7l687d1jdmcm0yl51yv-libev-4.33.drv
/nix/store/h60a8qk9wqy8gbdvl9sf0qcnz63by9w4-nghttp2-1.49.0.tar.bz2.drv
/nix/store/09ba5xcaaaybqdsvljh5skzzl6blmmw4-c-ares-1.18.1.tar.gz.drv
/nix/store/l0niywhmkdqv97i8rlxzr1yqbn9k7sc1-c-ares-1.18.1.drv
/nix/store/36rbachr8ra090v3m6s86603sfp382k4-nghttp2-1.49.0.drv
/nix/store/fgr4mizzn2y712bqlk895lk8wpws27ir-dyld-433.5.tar.gz.drv
/nix/store/7c2sh9fyqz113rrpx5mdnmkk8mdrhb47-dyld-433.5.drv
/nix/store/81gwh57vnrm6qpw3gxmdmrjsp26dxi7p-find-xml-catalogs.sh
/nix/store/1vaq58n8rvn8bbr9mcm3k30zkr63480d-hook.drv
/nix/store/68bzcamhirzd95vsh05wilz8p8vfvyb6-expat-2.4.9.tar.xz.drv
/nix/store/0vyw0ywxhng31zvxqia2y23ljjmzsdj6-expat-2.4.9.drv
/nix/store/345r2zz7pgiyk91j89qlf7mhs95jrv6f-no-ldconfig.patch
/nix/store/zi0m9pfmvy5lw89x7a8x674rm99i8qiq-setup-hook.sh
/nix/store/4aakllhrfd3r87a67g0hb6r37nk4ahqf-python-setup-hook.sh.drv
/nix/store/4j7gbzbahn5by6vvck1gcpjc95k6vpz6-Python-3.10.7.tar.xz.drv
/nix/store/9m54l1bi5814x9cqznwlga7yfs5ipi6h-nuke-refs.sh
/nix/store/pm08hy0dzswr0wj3n7nczm5pbzzjxdh6-darwin-sign-fixup.sh
/nix/store/4qmyys335vfbmyx2q8ii3md77yaswsim-nuke-references.drv
/nix/store/57kclla9vza2n87xgwg1ap54d20cz6lb-fix-finding-headers-when-cross-compiling.patch
/nix/store/aafa965mg7grhivxa01mmbqksz6c3w77-python-3.x-distutils-C++.patch
/nix/store/cv1ynpzvjjr0s72jkbblbzz3ymr87lpi-0001-On-all-posix-systems-not-just-Darwin-set-LDSHARED-if.patch
/nix/store/dkb2rjyj7lwmvsn4zzwx85kx8r61nk9w-darwin-libutil.patch
/nix/store/w7hflmy5kddj6p1kvbkgag7qjs44217d-libffi-3.4.3.tar.gz.drv
/nix/store/nv7ln6adf9vv2c81rw1rv8sarp2w3dbp-libffi-3.4.3.drv
/nix/store/r112dk8w7zvdjipki58ch00m825li7fq-virtualenv-permissions.patch
/nix/store/x6aiw4vay2b63slqz5byimn0alhg5b1s-darwin-tcl-tk.patch
/nix/store/70zdg3iypjrxjyvj602ai92j36j8l4rp-python3-minimal-3.10.7.drv
/nix/store/1qrnbw8xsww3vydd71lwfp32ylgx9i8g-make-wrapper.sh
/nix/store/819fzxfwzp7zhhi4wy5nkapimkb1bsx5-die.sh
/nix/store/csphakh9ck533qnjfqmrh5ybg7amwvwv-hook.drv
/nix/store/scgakk3jkkkqfzxp5v9575163dj03c2y-hook.drv
/nix/store/8p4sgrqajxwzcm9l02m45qvpg6ncr0h9-patchutils-0.3.3.drv
/nix/store/baz2nahq7z7xxya1gi7in6a4msmvkbly-5b2d07a72670513e41b481a9d922c983a64027ca.patch.drv
/nix/store/frr6f2hq56j6b4wc0bsklaqskjsagqc0-utf8-xmlErrorFuncHandler.patch
/nix/store/vyh448kgn8qx2frx4g42f64b1akic218-libxml2-2.10.0.tar.xz.drv
/nix/store/lyl7058saady3i75h1w0177qfzfr1zf0-ncurses-6.3-20220507.tgz.drv
/nix/store/wy5amsi09scnbxgsbm1fzzq9963zlg9m-ncurses-6.3-p20220507.drv
/nix/store/x1fa0bns4szjkbb7f8bsflcxmzas41h0-4ad71c2d72beef0d10cf75aa417db10d77846f75.patch.drv
/nix/store/9gql9xbn6mfd56lxxchd0q7qzyf7cdby-libxml2-2.10.0.drv
/nix/store/1nv6k9zyc7pj74yshdzm4bmjfv6k86l9-source.drv
/nix/store/34qn4by9lqrri323ahm5vizv6bgsbhfn-006-darwin-always-set-runtime-c-flag.diff
/nix/store/chhz1kdhnql7gshwrns13lawgm75an7c-adv_cmds-119.tar.gz.drv
/nix/store/bylhfm7hj9sm4qb5n9mnsvj71xhmi6rx-flex-2.6.4.tar.gz.drv
/nix/store/vila3sxd48ha6r4yhdbfzqlvfl1jn2bw-glibc-2.26.patch.drv
/nix/store/lnb1468vfblvbc6lqgpigypspa4lzl68-flex-2.6.4.drv
/nix/store/6s064qz2lzpi1ml9z4vx0ajmk7fwafv6-bsdmake-24.tar.gz.drv
/nix/store/pps2jxig0cgkz81qwhy9gqar360mbbdb-bsdmake-24.drv
/nix/store/x1dh5wnl7pf81iq0gx0gqj6i9vnz89vv-source.drv
/nix/store/icl9b9dikbnwsrb5agnjmfryxyjnfp1n-adv_cmds-119.drv
/nix/store/6wbmq1k5x7q9lchs986bjq2qf1ip7b41-ps-adv_cmds-119.drv
/nix/store/7qslhycy1d0ag13xn4rfxfwdm8f7afb1-001-search-path.diff
/nix/store/ar1p4gcvlqf8dwbkfrcb01srbywinaj5-check-pc-files-hook.sh
/nix/store/ha21dnn4nw858g8d0wrkvhyvp7zmqgnz-setup-hook.sh
/nix/store/jmif3w9zsykc13zrhw4y8pynnnxg27zn-cmake-3.24.2.tar.gz.drv
/nix/store/k845qxmkbra9fc4628lpi0q8yjmc1sx9-005-remove-systemconfiguration-dep.diff
/nix/store/ri7qddqm02y0w2g43zqqz8lzy2pbdgrk-002-application-services.diff
/nix/store/rq41inv92jszcs5x62nc5cci5hapbjpw-003-libuv-application-services.diff
/nix/store/23dflh1nkw215df7bfyy9ml3jd5ranrw-cmake-boot-3.24.2.drv
/nix/store/c14fh88kpi7gc627s1l19gdlipfrwd59-brotli-1.0.9.drv
/nix/store/rv3w6kch2d0l70r6h3kk2r5d8ca216hz-libobjc-11.0.0.drv
/nix/store/f07bc31w87jm2rjk8zap5xyf92ach79p-apple-framework-CoreFoundation-11.0.0.drv
/nix/store/k8xvsl4226pzy73ywglgx46h7scffpjq-gnu-config-2021-01-25.drv
/nix/store/h9gslm9dppn38plwa811yr5c03s5lw9w-ICU-66108.tar.gz.drv
/nix/store/mqvcwr74dcsqlib5crdcawk16dmdgj9h-ICU-66108.drv
/nix/store/rkr3wamhhf9ha9n89yimjwyazvf3ar6j-hook.drv
/nix/store/f0qv4kz20212qcnd9wsck36zk3r8isl9-curl-7.85.0.tar.bz2.drv
/nix/store/gdqnvkbp6nnrvww108adb7nvjgrpdxzb-7.79.1-darwin-no-systemconfiguration.patch
/nix/store/3bld52y6l8fg58gaj9b937qg6m7zbm16-krb5-1.20.tar.gz.drv
/nix/store/3xk9ps0qz073k641b88swpa4fgx3hzwg-nix-ssl-cert-file.patch
/nix/store/n3vnxwsnf75gz250yayipdga4ziidwpi-openssl-1.1.1q.tar.gz.drv
/nix/store/82cq1qadbgv5d6gxb11zgkxl530wvzxj-openssl-1.1.1q.drv
/nix/store/18vddqgdxg6xcv5iws1vv7fd152rag04-bootstrap_cmds-121.tar.gz.drv
/nix/store/jyci5k74rnj58fkalyil3pj28x7xnr3m-bootstrap_cmds-121.drv
/nix/store/hj7zxy2r8ib6s6fa669kr6hqdiv4l6s1-libkrb5-1.20.drv
/nix/store/z3h1d8wp61892ydalxldvb496ar0hiz6-libssh2-1.10.0.tar.gz.drv
/nix/store/zrh6il3gp9xa58ldg40d57kwgsvljyb1-openssl_add_support_for_libressl_3_5.patch
/nix/store/yf97cpb80lyvqgd0lnq82c4qkx7kpb9f-libssh2-1.10.0.drv
/nix/store/w5683845xkfzwlp8sgbax0farj5fzhpv-curl-7.85.0.drv
/nix/store/9rkj0y4cl1sbbzndzg01crdamv4813pg-bootstrap-stage2-stdenv-darwin.drv
/nix/store/labgzlb16svs1z7z9a6f49b5zi8hb11s-bash-5.1-p16.drv
/nix/store/hvl8g8b6n8m8dk16bdavvpg31g8zmk96-bootstrap-stage2-stdenv-darwin.drv
/nix/store/9lzpvga5gm5klwg28iv1hgf01g0hpfaa-hook.drv
/nix/store/96fgzfyknjaj6fc85ai2n68qfndbps02-hook.drv
/nix/store/6wky968nz63ndx7z6kppcada8cdj4hg8-bsdmake-24.drv
/nix/store/0w9k3ah3f9c0j7k4vxka74pi07x01bbv-adv_cmds-119.drv
/nix/store/2n3wbbh9sk778vkl1lsz58inmyvk2g3r-file-5.43.drv
/nix/store/bcv1p9lpghn2l1zcw21z7401qc8fnmvr-gnu-config-2021-01-25.drv
/nix/store/47msbw943yjc7hm6d13r9jl5cz0ih9x9-hook.drv
/nix/store/24a06br9jvy87sbanym8hijfq4j2dsqm-no-threads.patch
/nix/store/4a0sl25fn3ymdmaalxwvjk6a2xajy3cb-libcxxabi-11.1.0.src.tar.xz.drv
/nix/store/ccf2fg1l77aqbw3v8hiql7a4c54dr8lh-bootstrap-stage0-clang-wrapper-11.1.0.drv
/nix/store/bhmp58x5m3lkscnxs9zwscc4rxbz7fc4-bootstrap-stage2-stdenv-darwin.drv
/nix/store/db7hhqin9klk8qx344r2b3dhb4xrfiq6-llvm-11.1.0.src.tar.xz.drv
/nix/store/il3mvxijf7cc9ys09pcblff47ia93kk2-gnu-install-dirs.patch
/nix/store/z3pj61rk5h9ffbj5anhwbp3ah2qysvqf-libcxx-11.1.0.src.tar.xz.drv
/nix/store/fg68n6bycig5c23sw8yfn7nmgbj85v6x-libcxxabi-11.1.0.drv
/nix/store/wjgikzdk0fcbldspzlkyh0dvd8wa2say-patchutils-0.3.3.drv
/nix/store/3v9a47xl4w8kc8bff4daxvbg50008imh-19bc9ea480b60b607a3e303f20c7a3a2ea553369.patch.drv
/nix/store/c9w69kl4caarcs2j84hck0icrdj9jqr6-fix-darwin-dylib-names.sh
/nix/store/g958ikb42h89wl8rgx597l5h6k9n2cfx-fix-darwin-dylib-names-hook.drv
/nix/store/ym4y16msxvvpbcsc0s829has6v8mxg56-gnu-install-dirs.patch
/nix/store/hhn96pp2rk2bq1hipcr147hqfrgh80gk-libcxx-11.1.0.drv
/nix/store/rizgpw7ndpwy12kyr03mnlhhkfwzk75a-pcre-8.45.drv
/nix/store/m1pm94jj46gsmks3d11p44qdhqml9inm-gnugrep-3.7.drv
/nix/store/r2mi8209hbvfhyhjcxy6qqvyawf8s4k3-expand-response-params.drv
/nix/store/6yjiri44dy8c8lnjn0f14w8nvgs2fhf0-bootstrap-stage3-stdenv-darwin.drv
/nix/store/dlm9y4dfkjmcqrysf37kxfhlds9r9jng-hook.drv
/nix/store/q6x1zg4xsbzw7qv3qdcq2rny1n4pr5xk-hook.drv
/nix/store/iraif23i0p01sx6qq6jkry21v7g84wvi-bootstrap-stage0-clang-wrapper-11.1.0.drv
/nix/store/wpni47ni5xf8qms83in475fyn8z2ikf6-bootstrap-stage3-stdenv-darwin.drv
/nix/store/40ri4k2mfvs5wjwry47iqv30587p1jh0-patchutils-0.3.3.drv
/nix/store/0w90wllxcb2wyjbkxjacm0m3q2wfz702-uops-CMOV16rm-noreg.diff.drv
/nix/store/09q0yxa6ixb030mkw96j2za7h8dpbpc7-dejagnu-1.6.3.tar.gz.drv
/nix/store/fk7p458jm8ra2d6zf2y4nw1ykckvmnrr-tcl8.6.11-src.tar.gz.drv
/nix/store/5z49kw0iq4qyga5zxmmhw1fh2l6jiwjz-tcl-8.6.11.drv
/nix/store/g4c3jbhc8ag6db5py0xk2sicfy0hrpmw-tcl-package-hook.sh
/nix/store/a1ipqs2qcpbqyfmxgk6yi3yyl2f6pd62-tcl-package-hook.drv
/nix/store/4vq3350zc6sqnibkqpgic2d6cvi1r9hq-substitute-all.sh
/nix/store/5241l4i852qd9imqz3jgv9rv9gv701gk-fix-cross-compilation.patch
/nix/store/dhba38jjxia0b5snjrhvcl9dbjbdb3k0-fix-cross-compilation.patch.drv
/nix/store/gdag5rjmiv9iwgj8gnibcvzic5f1kwbp-0001-enable-cross-compilation.patch.drv
/nix/store/qcmyh5mgqv62zip6gkp2xjriklpbm0xv-expect5.45.4.tar.gz.drv
/nix/store/xpdirxij63a69jk43pgajjrgmv7gaajd-hook.drv
/nix/store/iag2icih50jb6wxn15a71jy9pix7jd15-expect-5.45.4.drv
/nix/store/nharms54shj3rhwzw2ywk4alfrgm5k1m-dejagnu-1.6.3.drv
/nix/store/2hc51kpv7vkbfpifjq28jbhm49wlphzw-libffi-3.4.3.drv
/nix/store/6wv8acdd7bm7npixgr3rk86mf55fj47c-llvm-config-link-static.patch
/nix/store/9fcwwdr92g5wzpj2wxf86f0zy5mn0h1v-zlib-1.2.12.drv
/nix/store/9fd3xdcfv1dw93y99a18lw735fx8kvgy-gnu-install-dirs.patch
/nix/store/g05jynqyglkf9if6y70822l2r6y3nkj5-ncurses-6.3-p20220507.drv
/nix/store/2mys4xnihsf6r5y0sbby0y3qcn22ggjw-4ad71c2d72beef0d10cf75aa417db10d77846f75.patch.drv
/nix/store/2nyygvchsc258gkqymnbzmh741wsizrf-libiconv-50.drv
/nix/store/i68qy2hwsvqx3haf36smqi3n4lg1wavm-5b2d07a72670513e41b481a9d922c983a64027ca.patch.drv
/nix/store/w8ma9ddjcfc3l3z4ng6rlwljxiw85fhv-hook.drv
/nix/store/j4h65frq4nx4kpl06sj5c3cz2lc9fdrz-libxml2-2.10.0.drv
/nix/store/kl8l1ci2ycc6y23vkxvjhlbz2p93zp3z-polly-11.1.0.src.tar.xz.drv
/nix/store/n1sl525i7qanfd75l8s1bbqn32fasma0-dfaemitter-gcc-12.patch.drv
/nix/store/qcb7ljbcrmgdf6xv0irgvdv6rivgj3md-nvptx-gcc-12.patch.drv
/nix/store/yzac3dpyb5cyndxjl0d9nrpwqmcz18dk-b498303066a63a203d24f739b2d2e0e56dca70d1.patch.drv
/nix/store/8vqfrpgwki8j8nk9j08g04vh1iqcm9bw-llvm-11.1.0.drv
/nix/store/2jlsizsg3hsj6p10cm11fx9rshsjwwri-clang-tools-extra-11.1.0.src.tar.xz.drv
/nix/store/34zhl915l308dpa7v2786z3xgbvy6398-purity.patch
/nix/store/akc6qlr586k4r5lwmj70i0mbb8wxz709-clang-11.1.0.src.tar.xz.drv
/nix/store/v2az1r12rfivd43pvq2s0brp60n54mqa-clang-11-12-LLVMgold-path.patch
/nix/store/bhdlpz3fgkzcrh94rsp76m0n0gwb6fxx-clang-11-12-LLVMgold-path.patch.drv
/nix/store/f91k74rxz9c8miqg843jf6dfq35jhpka-fix-darwin-dylib-names-hook.drv
/nix/store/yrskcbyfm56qm4vs9dnacg8mqpqx7qwx-gnu-install-dirs.patch
/nix/store/arqis7aqh6b9p3a90idcjnr21fp1d0c4-clang-11.1.0.drv
/nix/store/79xln4yb0zql3j1zvc72yfi1y6333crl-disable-rpath.patch
/nix/store/dvdql179kllliqznwkd307bvdny2h96h-source.drv
/nix/store/5ks4wyqmh20wzz3i2yyqky7g0g8jhmsk-libtapi-1100.0.11.drv
/nix/store/aipzgrzywrh1qgw2l3bigbnnwpyr61kn-source.drv
/nix/store/fz56qb3cymbf2acghsqmdgjwwklc411f-install-shell-files.drv
/nix/store/r9iy2wdkq3w0n1hbyg92c2sqg3vcbkhl-ld-ignore-rpath-link.patch
/nix/store/3jjd65b6nyg7g30ixszjcsgb08j5mmhn-0001-Add-useless-descriptions-to-AC_DEFINE.patch
/nix/store/f3ygraph3msfdkyrqg91j7smx1c78qnd-bzip2-1.0.8.drv
/nix/store/j3frsgc0zsrg2pg7w9pqmxjh6qd01aqs-0002-Use-pkg-config-for-libxml2.patch
/nix/store/y26ic2b9n1g1cng3s68753qcxd6fvqrq-xz-5.2.6.drv
/nix/store/yqdd6m0r80c5pn3z7wc1mhn1wqmyli4i-xar-1.6.1.tar.gz.drv
/nix/store/1m30bskfc8z8r4dhb2qv9sd7jyl92srx-xar-1.6.1.drv
/nix/store/7vs1bbfsk0w6p6n5c4bqs3mp7q6n9lyd-source.drv
/nix/store/paybkfdbyh40jzyv6l5ywsbaabqy1sav-pbzx-1.0.2.drv
/nix/store/vwlpvn89jh6h45dj8q9nin0iv7rw85qb-MacOSX-SDK-11.0.0.drv
/nix/store/vb56s92027cg2c6573dahs6830fhz9xk-libobjc-11.0.0.drv
/nix/store/zr59kiajvksmks3vl1hja2ybix9z2zqk-ld-rpath-nonfinal.patch
/nix/store/ldj50kzrjbzh8dzcb7mqqa5gqsmc33v9-cctools-port-949.0.1.drv
/nix/store/0df8rz15sp4ai6md99q5qy9lf0srji5z-0001-Revert-libtool.m4-fix-nm-BSD-flag-detection.patch
/nix/store/k1cgpjsl77c8wfaq0w7n6k1i7fvxr5p8-gas-dwarf-zero-PR29451.patch
/nix/store/lgniihp1bk6mkd5nn9y5ikfim2ignr52-0001-libtool.m4-update-macos-version-detection-block.patch
/nix/store/pa83jbilxjpv5d4f62l3as4wg2fri7r7-always-search-rpath.patch
/nix/store/dqgzlxvbzq4dih9ska9k0y91sc1kv7d9-autoconf-2.69.tar.xz.drv
/nix/store/s8wb99pw1w8yspcz26zfadsy0j1k70ww-autoconf-2.69.drv
/nix/store/sqbhaaayam0xw3a3164ks1vvbrdhl9vq-deterministic.patch
/nix/store/xrw086zw3xqsvy9injgil8n2qdkvkpff-0001-Revert-libtool.m4-fix-the-NM-nm-over-here-B-option-w.patch
/nix/store/zbdl2p9amxdkr9cqjq0yv6h0mr55lm3l-binutils-2.39.tar.bz2.drv
/nix/store/zki7kfvf2f0xdksq9hp004xz1hsxklz3-texinfo-6.8.drv
/nix/store/q1kz46q80wj4bfc314g5p3sylpilpv0i-binutils-2.39.drv
/nix/store/00fij0grbvf9svcxvyk5ys51qcpmk7sa-cctools-binutils-darwin-949.0.1.drv
/nix/store/17agldwh525770zc3w11sdkpdxq8xwjy-gnu-config-2021-01-25.drv
/nix/store/0kkx3whrs8zb85qwwvl42ax99hmk0xpz-pcre-8.45.drv
/nix/store/3qkad2sv1xwngyn4gmx473mzrjhs2jx8-gnugrep-3.7.drv
/nix/store/xn8bjkw4fmyr2xvk9higd54g9s7q2kdz-gmp-with-cxx-6.2.1.drv
/nix/store/hbby7876a2qhk93hlx5ppr3jpgm1lwkl-coreutils-9.1.drv
/nix/store/vj0ai85srlbfn0yvd6mdql2nxan24naa-post-link-sign-hook.drv
/nix/store/vsd7hdcfnzn5n4q44flcdiaa2lv58d6d-signing-utils.drv
/nix/store/z4gcxwcrzc0mkx0zgha8k4jr506kgns7-expand-response-params.drv
/nix/store/vnxdn7rjmsm0naz6sgb98flh437iff1g-cctools-binutils-darwin-wrapper-949.0.1.drv
/nix/store/5gm6pb695hmb0q26cyvmm0ish0p5yig0-clang-wrapper-11.1.0.drv
/nix/store/2cw54rrcb7plvq6v5hxsm3sb42kq6fk5-bootstrap-stage3-stdenv-darwin.drv
/nix/store/3ic95d8vv23cdj4vq7634zh5zcdsda1p-normalize-var.patch
/nix/store/3m53ki7pr92hacq8mghsldg1wc4wrifm-codesign.patch
/nix/store/706qcmh667cmjwffc4vbjs9c745c7hs0-gnu-install-dirs.patch
/nix/store/skwzly3754w50q8mzdpadz8bsfmn6hs8-compiler-rt-11.1.0.src.tar.xz.drv
/nix/store/y87vwjq5v1fi0d077xqrsnkqrax3p4iz-libsanitizer-no-cyclades-11.patch
/nix/store/ylv0v02l6panidz2hkh756fz363yc68h-X86-support-extension.patch
/nix/store/1ffkl3b9gb1qyvmz2r1633vzkhd5bxn2-compiler-rt-libc-11.1.0.drv
/nix/store/9k3fqaqk3k7m510nn57ynd4ngx2x4rxs-clang-wrapper-11.1.0.drv
/nix/store/mmdgxk0mpsq2lzlja8g6mrdjzxpc3wmq-hook.drv
/nix/store/s9rdswvsx68yjwfk57vlw5a34hbjsl2v-source.drv
/nix/store/hrp64mrc7ss3zz8gfl36jfq8fj8qwk2b-libyaml-0.2.5.drv
/nix/store/y7wqq0qnhnhd6hr5d2hxl967fjssfrny-source.drv
/nix/store/vy20n6yc3nd8d1yk0sqa6cah7dpyhv9s-rewrite-tbd-20201114.drv
/nix/store/sn11j0j89hflj7snivdlxvxawvrpzp01-apple-framework-CoreFoundation-11.0.0.drv
/nix/store/aawhsgywk753j170584pf3r6rlismpi6-bootstrap-stage4-stdenv-darwin.drv
/nix/store/qwxrck5ibwhhhsgyblc711vnvw5rx2ib-bootstrap-stage4-stdenv-darwin.drv
/nix/store/bs639bs7frzx60c8bh3nyzmak49zbc3k-hook.drv
/nix/store/cfkvf8l9jw3vrvkss3c5i1ccgnp86nv6-hook.drv
/nix/store/skm4ysx9pk4nnwx75fpk9vghzc130887-perl-5.36.0.drv
/nix/store/ma5p31xpqrcyk0z70l14m7cklw2zkb5s-patchutils-0.3.3.drv
/nix/store/lapsha9pivk9wvrwlrc482i2biq06gw5-CVE-2021-38185-2.patch.drv
/nix/store/ncfbi3qgbflyph4x2ngcnz2584kykzqa-CVE-2021-38185-1.patch.drv
/nix/store/pklid951p82izlw5f06w5yvpps1zwgxw-CVE-2021-38185-3.patch.drv
/nix/store/sp2alvzdl09796wpg2wdf68akiha4d4g-fno-common-fix.patch.drv
/nix/store/zmadr12vmal7mwlgy1w4w4x70lss6j73-cpio-2.13.tar.bz2.drv
/nix/store/d54hwx5g50niakv2lpb9lkp1jjk910q1-cpio-2.13.drv
/nix/store/4yn89klg688jxj8sidmzc84hl7ndcwkm-pkg-config-0.29.2.drv
/nix/store/416vhsxki7508q1ijs8n415fqmvjxyky-pkg-config-wrapper-0.29.2.drv
/nix/store/a736nzx1nigikprmk4ignqzndmz7ls0m-gettext-0.21.drv
/nix/store/2szis9v9c9dzazajlflfdc9jl3b0pihg-gnum4-1.4.19.drv
/nix/store/gbznai4iy45kxmlnrn56fn5m0x2rlspc-texinfo-6.8.drv
/nix/store/f33p3mlclvl3hhnnjsnzw70bshn7criz-autoconf-2.71.drv
/nix/store/dw19klga9vppaq2f6lzj9h7bl4c29mga-automake-1.16.5.drv
/nix/store/hizv414b6ky026kw5f4hwgm2lbxzh08y-perl5.36.0-gettext-1.07.drv
/nix/store/ccwg6bkak9j236lc6k0n713iyn12k996-help2man-1.49.2.drv
/nix/store/jx8mci3vwqi9qv1wkbrfpjya00nl285j-file-5.43.drv
/nix/store/lahdhba85rpm60wxmhxanq1dqi8sa5kb-libtool-2.4.7.drv
/nix/store/g69zz30gq1rb85b6kdz5iidxxbwp1bda-hook.drv
/nix/store/hb2yk99cw015si2ry1l1fygp365as523-openssl-3.0.5.drv
/nix/store/cv65milx0bs2fk1xikgrgrhvkafkpqdk-xar-1.6.1.drv
/nix/store/9wfpm5alc542isr7232gg4qg5njdsgdq-unzip-6.0.drv
/nix/store/ggp35l799v2ggwsk73sz61y7wg3kpqy1-source.drv
/nix/store/msvf870j9sr6lwzakv6m263gk0r7126z-pbzx-1.0.2.drv
/nix/store/0b2hxys6lxyh567j82addkw2k36qjzgz-MacOSX-SDK-11.0.0.drv
/nix/store/0c1ijhg1cq01zcrvnhg24vhm5qn47kwd-libev-4.33.drv
/nix/store/0fqp7dz3rlrrhqjfc69wkmii3j5y0g7d-make-4.3.tar.gz.drv
/nix/store/bqlikyzhzhsjfirhzgmps9p99mhvn9az-bison-3.8.2.drv
/nix/store/c3kdwmns3lyigqqm6c4czisv0n226dy7-source.drv
/nix/store/hp3krbr0v290hwgrcskls6kk545virpz-flex-2.6.4.drv
/nix/store/mdihpwmpbkv1wg4yw03d7wy3fbs0l45w-bsdmake-24.drv
/nix/store/ln3xll7z1avhm03k3m8cdllln7wdgrrk-adv_cmds-119.drv
/nix/store/gs103r2mxcsjs3sw0ibvlnsv54qcw9q6-ps-adv_cmds-119.drv
/nix/store/94y4s4a30p8qqfg8bxr9rgwkdc9m3610-cmake-boot-3.24.2.drv
/nix/store/n91acyjrlchm0snw0w16i4683pf788ax-playtests-darwin.patch
/nix/store/vfb2ll7c9aq63mlkkvmvfq4ibiinq5nh-source.drv
/nix/store/vhp9nf4r8328m91l9l5c8fd9wlmb4bnd-fix-darwin-dylib-names-hook.drv
/nix/store/0w2r0sw68fwxqqki50mqx83iz1q6clgq-zstd-1.5.2.drv
/nix/store/4rj3r6gga5ipdfkiw9ahmrj9yr411ry6-libobjc-11.0.0.drv
/nix/store/vc3jlishkiy0qsw95smzzzr9vcgafi56-source.drv
/nix/store/jhs384scb8wk3sn9dw92khjpay91x9mg-libtapi-1100.0.11.drv
/nix/store/ylsnxqqfn3gpp0wr133z4ksj2bhklrg7-source.drv
/nix/store/z8gyza1abwd7jh3pv10r6kcrgphi2h2r-install-shell-files.drv
/nix/store/0xwx3m2lvpw92w4j45n1772f3aimskxg-cctools-port-949.0.1.drv
/nix/store/0y5flakfvnf813cwrr8rygf1jnk0gfnc-CVE-2019-13636.patch
/nix/store/4r8s8hcwyvvvnpcncps09zscqkh5qapx-no-install-statedir.patch
/nix/store/bljrd66ff2vp1zqikdfrz5x0k90kaw81-findutils-4.9.0.tar.xz.drv
/nix/store/10zrhmiqirncfbxyac8xrjg6p8mqf30k-findutils-4.9.0.drv
/nix/store/53d5wfhiifvxzgj847fva6q6py02m1g1-expand-response-params.drv
/nix/store/c2yrfg597pjcl1867pyir9jiq4fw3jl4-source.drv
/nix/store/9h8631c24qp90y7w0fvsl3c0dv8pv6pi-sigtool-0.1.2.drv
/nix/store/anpnd9wprrqhf1fdcwy96j66vb5fcsii-signing-utils.drv
/nix/store/5xzxmr5xpnqx0b0ar0kpy7kw0282a1jc-autoconf-2.69.drv
/nix/store/a921f1jk651ahri5f05gca9rwdiq3rlz-binutils-2.39.drv
/nix/store/laack7baw4rfxgvyqfrfydbn1v8zz9b6-clang-11-12-LLVMgold-path.patch.drv
/nix/store/d7h3zix26zzgdp0rzsyb19hrif8cbzmz-clang-11.1.0.drv
/nix/store/jxpxgb5hph4lw3s12g7lyqz0ci8a37ra-cctools-binutils-darwin-949.0.1.drv
/nix/store/w3hhid4crxafa1j03iq4a1y30d8p0sk2-post-link-sign-hook.drv
/nix/store/5w0k8f3ialhwr7p5g0y94zny3j74ryzn-cctools-binutils-darwin-wrapper-949.0.1.drv
/nix/store/74fhpxplxsc5qg1c67hb5picw88flx3d-libssh2-1.10.0.drv
/nix/store/76nc36kgrvhx8n9m8jz7ywrrqbcdkr48-gnu-config-2021-01-25.drv
/nix/store/9wyqdma0i671db7l4m0a3qbp6jpza2vi-tar-1.34.tar.xz.drv
/nix/store/90phqk429ip6kbi5jlm0lcg4h2xxaq2k-gnutar-1.34.drv
/nix/store/2j0fmwgm5ybgnc8jprc4ypcxw6s4r2nv-Allow_input_files_to_be_missing_for_ed-style_patches.patch
/nix/store/7mq3l9rhjbmpf06fwnrp51q6sy1l6g9j-patch-2.7.6.tar.xz.drv
/nix/store/8p3z4jsrxr5ck92iasc9bc7bmapb5mmg-CVE-2018-6951.patch
/nix/store/h2fcbw7ghgn3i4qadszdp272w4dab7ln-lzip-setup-hook.sh
/nix/store/vvciv7wkw3z9x0bj4jszb31crk0lix8y-lzip-1.23.tar.gz.drv
/nix/store/6gj38dbipcd2vbjcsv028jmpnn6bv1sz-lzip-1.23.drv
/nix/store/bv0xxgk72g693vdgs3w2w3d252hlxys9-ed-1.18.tar.lz.drv
/nix/store/lmssb21nd3zkv5gssngmk92bdf0q4h1w-ed-1.18.drv
/nix/store/npqvgz8c8w9kpj1gdma5bbn0pdkisyzp-CVE-2018-6952.patch
/nix/store/rxgi2l6jrgd5xmrrsbcv5cwi558lb36m-CVE-2019-13638-and-CVE-2018-20969.patch
/nix/store/sz6rhpf50kqh75fhqwl75q6dm6fr9xyd-CVE-2018-1000156.patch
/nix/store/aqmy225ay8m4yg51mib0bkpz3r1w2z7j-patch-2.7.6.drv
/nix/store/2k52bklbjhhq47dn35gm833vlh06fgfn-0001-No-impure-bin-sh.patch
/nix/store/6cc64ayl3fd2nc28ffw47cqsqi2bg1sn-0002-remove-impure-dirs.patch
/nix/store/avhna3r651j0frjk7jhy771za84mlh4j-gnumake-4.3.drv
/nix/store/b7mkkj1kbaxpihqh3k12s4a3viz9pdvk-hook.drv
/nix/store/dy63w31j33lknbd95fl81f24sndlgf35-source.drv
/nix/store/bl8jncx9dy4rr54cn8p1vwpf3wa01yyj-brotli-1.0.9.drv
/nix/store/rp4wqqv22pjl2235ra7ag3nb7yy0b5kr-diffutils-3.8.tar.xz.drv
/nix/store/d554acfihg4ssgij79ybd6ls0ww1p14x-diffutils-3.8.drv
/nix/store/szfjhkhmsxfyc289vz39882d3l866888-fix-error-darwin.patch
/nix/store/z8912zv98rl5yv104mf99j3k72xva3nr-libidn2-2.3.2.tar.gz.drv
/nix/store/qhs49gbxssyr8im8h2xc058gh4kdndv6-libunistring-1.0.tar.gz.drv
/nix/store/zipavm2mq94fsw09kx9mw7pi5n8xhkp4-libunistring-1.0.drv
/nix/store/gzy4kvn6djdm9b631fcm3g76pijsvvq7-libidn2-2.3.2.drv
/nix/store/hvp22x3rmpwfj6kcf0hj9dcv8lrkd4hs-clang-wrapper-11.1.0.drv
/nix/store/xhmwfi4xij5ryg9x2j0n6067ki55dscr-c-ares-1.18.1.drv
/nix/store/qpsbvsn7dl8gmlsmh474m2h9gmh8mg7i-nghttp2-1.49.0.drv
/nix/store/lwhmzpa1py1k244hfd3l026kc7r7b6ib-sed-4.8.tar.xz.drv
/nix/store/rvq62srcss99303nbgr94bq4av9kjv8q-gnused-4.8.drv
/nix/store/pid9is7y02wzdplvk6jcw2n0vfdh2y32-openssl-1.1.1q.drv
/nix/store/pz4hlrs0xa3q9knmn83v8v3wpf88iigz-bootstrap_cmds-121.drv
/nix/store/6m3w5kmj2m73nj3pakh6kaqjs2k64p5m-libkrb5-1.20.drv
/nix/store/sa6lxl61bh1wmr9rbpbyiq5wg2y5kbf2-curl-7.85.0.drv
/nix/store/vff2y41m68f5garsjmjxc0xfjrvw9pfm-setup-hook.drv
/nix/store/w99jp1rsykvc8rb09hr03c0rakw2dgzc-gzip-1.12.tar.xz.drv
/nix/store/swj6qdzryq4ln3h172s4h45wf0ks7g4j-gzip-1.12.drv
/nix/store/v994hjy8kmwi7g5li2lrpss92ldj0a54-ICU-66108.drv
/nix/store/pmxi9k28qls2yr7jhfnz3qp1fjchy64m-gawk-5.1.1.tar.xz.drv
/nix/store/x9ndmqlkrngf4jdy4zmvmal9ma7gh3z0-gawk-5.1.1.drv
/nix/store/5pfijbmkmy5kc81yzp0lpm4gpm2aq5rk-source.drv
/nix/store/zf7v9n0hxgb302wf08y762s0rhsbnqd2-source.drv
/nix/store/qr3r1g7n6xppyxb88726z7yr6r246nzd-libyaml-0.2.5.drv
/nix/store/91bfp6zivp9jq9sqq6iqq7vdpghdaffa-rewrite-tbd-20201114.drv
/nix/store/ya29pfy418vy1l0i5symnyprdb80c8ha-apple-framework-CoreFoundation-11.0.0.drv
/nix/store/cdk3pz11mvhqpphr0197wwmzhqppn7rl-stdenv-darwin.drv
/nix/store/26z459l0k3znhr99dsshkzj0il8dhwxx-perl-5.36.0.drv
/nix/store/sbcibnd6hym9c2rlbfnyhrbmlvgmsa59-stdenv-darwin.drv
/nix/store/sr9iyw9n2awaikjzvjfgwhvvn6vimf5w-pkg-config-0.29.2.drv
/nix/store/3zmkapnjbnajncxw7cix0lmj1fbspwa0-pkg-config-wrapper-0.29.2.drv
/nix/store/7dlkjg6cyd8d47qwiamxi77hld2z5360-mirrors-list.drv
/nix/store/i0zc5mm4vpj3lviyydb9s73j53mypkrg-nghttp2-1.49.0.drv
/nix/store/w37b5s734m53gxnzqyb5v0v98mhdfg2i-coreutils-9.1.drv
/nix/store/mmsrbggvzn6rwlx1ijw90sw3wvhzj18j-openssl-3.0.5.drv
/nix/store/n7iibs6b818v402j0yczf4mgy73sbzpv-libssh2-1.10.0.drv
/nix/store/z074ki54p77r7db3wsgxh9p18f67xnv8-curl-7.85.0.drv
/nix/store/hwymznwkd1kgf5ldcldjl9bnc1wz2azb-hello-2.12.1.tar.gz.drv
/nix/store/4a78f0s4p5h2sbcrrzayl5xas2i7zq1m-hello-2.12.1.drv&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;The above command not only lists the build-time dependencies for the
&lt;code&gt;hello&lt;/code&gt; package, but also their transitive build-time
dependencies. In other words, these are all the derivations needed to
build the &lt;code&gt;hello&lt;/code&gt; package “from scratch” in the absence of
any cache products. We can see the complete tree of build-time
dependencies like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;#cb16-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix-store &lt;span class=&quot;at&quot;&gt;--query&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--tree&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${DERIVATION}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-2&quot;&gt;&lt;a href=&quot;#cb16-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;/nix/store/4a78f0s4p5h2sbcrrzayl5xas2i7zq1m-hello-2.12.1.drv&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-3&quot;&gt;&lt;a href=&quot;#cb16-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;├───/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-4&quot;&gt;&lt;a href=&quot;#cb16-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;├───/nix/store/labgzlb16svs1z7z9a6f49b5zi8hb11s-bash-5.1-p16.drv&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-5&quot;&gt;&lt;a href=&quot;#cb16-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   ├───/nix/store/7kcayxwk8khycxw1agmcyfm9vpsqpw4s-bootstrap-tools.drv&lt;/span&gt;
&lt;span id=&quot;cb16-6&quot;&gt;&lt;a href=&quot;#cb16-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   ├───/nix/store/3glray2y14jpk1h6i599py7jdn3j2vns-mkdir.drv&lt;/span&gt;
&lt;span id=&quot;cb16-7&quot;&gt;&lt;a href=&quot;#cb16-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   ├───/nix/store/50ql5q0raqkcydmpi6wqvnhs9hpdgg5f-cpio.drv&lt;/span&gt;
&lt;span id=&quot;cb16-8&quot;&gt;&lt;a href=&quot;#cb16-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   ├───/nix/store/81xahsrhpn9mbaslgi5sz7gsqra747d4-unpack-bootstrap-tools-&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-9&quot;&gt;&lt;a href=&quot;#cb16-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   ├───/nix/store/fzbk4fnbjqhr0l1scx5fspsx5najbrbm-bootstrap-tools.cpio.bz&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-10&quot;&gt;&lt;a href=&quot;#cb16-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   ├───/nix/store/gxzl4vmccqj89yh7kz62frkxzgdpkxmp-sh.drv&lt;/span&gt;
&lt;span id=&quot;cb16-11&quot;&gt;&lt;a href=&quot;#cb16-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   └───/nix/store/pjbpvdy0gais8nc4sj3kwpniq8mgkb42-bzip2.drv&lt;/span&gt;
&lt;span id=&quot;cb16-12&quot;&gt;&lt;a href=&quot;#cb16-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   ├───/nix/store/3lhw0v2wyzimzl96xfsk6psfmzh38irh-bash51-007.drv&lt;/span&gt;
&lt;span id=&quot;cb16-13&quot;&gt;&lt;a href=&quot;#cb16-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   ├───/nix/store/7kcayxwk8khycxw1agmcyfm9vpsqpw4s-bootstrap-tools.drv [..&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-14&quot;&gt;&lt;a href=&quot;#cb16-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   ├───/nix/store/nbxwxwqwcr9rrmxb6gb532f18102815x-bootstrap-stage0-stdenv&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-15&quot;&gt;&lt;a href=&quot;#cb16-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   │   ├───/nix/store/1i5y55x4b4m9qkx5dqbmr1r6bvrqbanw-multiple-outputs.sh&lt;/span&gt;
&lt;span id=&quot;cb16-16&quot;&gt;&lt;a href=&quot;#cb16-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   │   ├───/nix/store/59jmzisg8fkm9c125fw384dqq1np602l-move-docs.sh&lt;/span&gt;
&lt;span id=&quot;cb16-17&quot;&gt;&lt;a href=&quot;#cb16-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   │   ├───/nix/store/7kcayxwk8khycxw1agmcyfm9vpsqpw4s-bootstrap-tools.drv&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-18&quot;&gt;&lt;a href=&quot;#cb16-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   │   ├───/nix/store/bnj8d7mvbkg3vdb07yz74yhl3g107qq5-patch-shebangs.sh&lt;/span&gt;
&lt;span id=&quot;cb16-19&quot;&gt;&lt;a href=&quot;#cb16-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   │   ├───/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-20&quot;&gt;&lt;a href=&quot;#cb16-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   │   ├───/nix/store/ckzrg0f0bdyx8rf703nc61r3hz5yys9q-builder.sh&lt;/span&gt;
&lt;span id=&quot;cb16-21&quot;&gt;&lt;a href=&quot;#cb16-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   │   ├───/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh&lt;/span&gt;
&lt;span id=&quot;cb16-22&quot;&gt;&lt;a href=&quot;#cb16-22&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   │   ├───/nix/store/g8xg0i02aqwhgxwd2vnp5ax3d6lrkg1v-strip.sh&lt;/span&gt;
&lt;span id=&quot;cb16-23&quot;&gt;&lt;a href=&quot;#cb16-23&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   │   ├───/nix/store/jngr4r80x5jn482ckqrfh08ljrx1k86f-setup.sh&lt;/span&gt;
&lt;span id=&quot;cb16-24&quot;&gt;&lt;a href=&quot;#cb16-24&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   │   ├───/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh&lt;/span&gt;
&lt;span id=&quot;cb16-25&quot;&gt;&lt;a href=&quot;#cb16-25&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   │   ├───/nix/store/kxw6q8v6isaqjm702d71n2421cxamq68-make-symlinks-relat&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-26&quot;&gt;&lt;a href=&quot;#cb16-26&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   │   ├───/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-27&quot;&gt;&lt;a href=&quot;#cb16-27&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   │   ├───/nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epo&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-28&quot;&gt;&lt;a href=&quot;#cb16-28&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   │   └───/nix/store/wlwcf1nw2b21m4gghj70hbg1v7x53ld8-reproducible-builds&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-29&quot;&gt;&lt;a href=&quot;#cb16-29&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   ├───/nix/store/i65va14cylqc74y80ksgnrsaixk39mmh-mirrors-list.drv&lt;/span&gt;
&lt;span id=&quot;cb16-30&quot;&gt;&lt;a href=&quot;#cb16-30&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   │   ├───/nix/store/7kcayxwk8khycxw1agmcyfm9vpsqpw4s-bootstrap-tools.drv&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-31&quot;&gt;&lt;a href=&quot;#cb16-31&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   │   ├───/nix/store/nbxwxwqwcr9rrmxb6gb532f18102815x-bootstrap-stage0-st&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-32&quot;&gt;&lt;a href=&quot;#cb16-32&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   │   └───/nix/store/ycwm35msmsdi2qgjax1slmjffsmwy8am-write-mirror-list.sh&lt;/span&gt;
&lt;span id=&quot;cb16-33&quot;&gt;&lt;a href=&quot;#cb16-33&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;│&lt;/span&gt;   │   └───/nix/store/lphxcbw5wqsjskipaw1fb8lcf6pm6ri6-builder.sh&lt;/span&gt;
&lt;span id=&quot;cb16-34&quot;&gt;&lt;a href=&quot;#cb16-34&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;…&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we were to build and cache all of these build-time dependencies
then our local &lt;code&gt;/nix/store&lt;/code&gt; and cache would explode in size.
Also, we do &lt;em&gt;not&lt;/em&gt; need to do this because there is a better
solution …&lt;/p&gt;
&lt;h4 id=&quot;correct-solution&quot;&gt;Correct solution&lt;/h4&gt;
&lt;p&gt;The solution that provides the best value is to cache all transitive
build-time dependencies &lt;em&gt;that are present within the current
&lt;code&gt;/nix/store&lt;/code&gt;&lt;/em&gt; after building the top-level build product.
In other words, don’t bother to predict which build-time dependencies we
need; instead, empirically infer which ones to cache based on which ones
Nix installed and used along the way.&lt;/p&gt;
&lt;p&gt;This is not only more accurate, but it’s also more efficient: we
don’t need to build or download anything new because we’re only caching
things we already locally installed.&lt;/p&gt;
&lt;p&gt;As a matter of fact, the &lt;code&gt;nix-store&lt;/code&gt; command already
supports this use case quite well. If you consult the documentation for
the &lt;code&gt;--requisites&lt;/code&gt; flag, you’ll find this gem:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       • --requisites; -R
         Prints out the closure (../glossary.md) of the store path paths.

         This query has one option:


         • --include-outputs Also include the existing output paths of store
           derivations, and their closures.

         This query can be used to implement various kinds of deployment. A
         source deployment is obtained by distributing the closure of a store
         derivation. A binary deployment is obtained by distributing the closure
         of an output path. A cache deployment (combined source/binary
         deployment, including binaries of build-time-only dependencies) is
         obtained by distributing the closure of a store derivation and
         specifying the option --include-outputs.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re specifically interested in a “cache deployment”, so we’re going
to do exactly what the documentation says and use the
&lt;code&gt;--include-outputs&lt;/code&gt; flag in conjunction with the
&lt;code&gt;--requisites&lt;/code&gt; flag. In other words, the
&lt;code&gt;--include-outputs&lt;/code&gt; flag was expressly created for this use
case!&lt;/p&gt;
&lt;p&gt;So here is the simplest, but least robust, version of the script for
computing the set of build-time dependencies to cache, as a Bash
array:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;#cb18-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# Continue reading before using this code; there&amp;#39;s a more robust version later&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-2&quot;&gt;&lt;a href=&quot;#cb18-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-3&quot;&gt;&lt;a href=&quot;#cb18-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# Optional: Perform the build if you haven&amp;#39;t already&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-4&quot;&gt;&lt;a href=&quot;#cb18-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix build &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${BUILD}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-5&quot;&gt;&lt;a href=&quot;#cb18-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-6&quot;&gt;&lt;a href=&quot;#cb18-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; DERIVATION=&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;nix&lt;/span&gt; path-info &lt;span class=&quot;at&quot;&gt;--derivation&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${BUILD}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-7&quot;&gt;&lt;a href=&quot;#cb18-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-8&quot;&gt;&lt;a href=&quot;#cb18-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; DEPENDENCIES=&lt;span class=&quot;er&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;ex&quot;&gt;nix-store&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--query&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--requisites&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--include-outputs&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${DERIVATION}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-9&quot;&gt;&lt;a href=&quot;#cb18-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-10&quot;&gt;&lt;a href=&quot;#cb18-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix store sign &lt;span class=&quot;at&quot;&gt;--key-file&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${KEY_FILE}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--recursive&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${DEPENDENCIES&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-11&quot;&gt;&lt;a href=&quot;#cb18-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-12&quot;&gt;&lt;a href=&quot;#cb18-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix copy &lt;span class=&quot;at&quot;&gt;--to&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${CACHE}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${DEPENDENCIES&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above code is simple and clear enough to illustrate the idea, but
we’re going to make a few adjustments to make this code more robust.&lt;/p&gt;
&lt;p&gt;Specifically, we’re going to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Change the code to support an array of build targets&lt;/p&gt;
&lt;p&gt;i.e. &lt;code&gt;BUILDS&lt;/code&gt; instead of &lt;code&gt;BUILD&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;mapfile&lt;/code&gt; instead of &lt;code&gt;($(…))&lt;/code&gt; to create
intermediate arrays&lt;/p&gt;
&lt;p&gt;See: &lt;a
href=&quot;https://www.shellcheck.net/wiki/SC2207&quot;&gt;&lt;code&gt;SC2207&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;xargs&lt;/code&gt; to handle command line length
limits&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… which gives us:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb19&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb19-1&quot;&gt;&lt;a href=&quot;#cb19-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# Optional: Perform the build if you haven&amp;#39;t already&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb19-2&quot;&gt;&lt;a href=&quot;#cb19-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; echo &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${BUILDS&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;xargs&lt;/span&gt; nix build&lt;/span&gt;
&lt;span id=&quot;cb19-3&quot;&gt;&lt;a href=&quot;#cb19-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb19-4&quot;&gt;&lt;a href=&quot;#cb19-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; mapfile &lt;span class=&quot;at&quot;&gt;-t&lt;/span&gt; DERIVATIONS &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;(&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${BUILDS&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;xargs&lt;/span&gt; nix path-info &lt;span class=&quot;at&quot;&gt;--derivation&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb19-5&quot;&gt;&lt;a href=&quot;#cb19-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb19-6&quot;&gt;&lt;a href=&quot;#cb19-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; mapfile &lt;span class=&quot;at&quot;&gt;-t&lt;/span&gt; DEPENDENCIES &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;(&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${DERIVATIONS&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;xargs&lt;/span&gt; nix-store &lt;span class=&quot;at&quot;&gt;--query&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--requisites&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--include-outputs&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb19-7&quot;&gt;&lt;a href=&quot;#cb19-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb19-8&quot;&gt;&lt;a href=&quot;#cb19-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; echo &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${DEPENDENCIES&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;xargs&lt;/span&gt; nix store sign &lt;span class=&quot;at&quot;&gt;--key-file&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${KEY_FILE}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--recursive&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb19-9&quot;&gt;&lt;a href=&quot;#cb19-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb19-10&quot;&gt;&lt;a href=&quot;#cb19-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; echo &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${DEPENDENCIES&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;xargs&lt;/span&gt; nix copy &lt;span class=&quot;at&quot;&gt;--to&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;${CACHE}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… where you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;replace &lt;code&gt;BUILDS&lt;/code&gt; with a Bash array containing what you
want to build&lt;/p&gt;
&lt;p&gt;e.g. &lt;code&gt;.#example&lt;/code&gt; or &lt;code&gt;nixpkgs#hello&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;replace &lt;code&gt;CACHE&lt;/code&gt; with whatever store you use as your
cache&lt;/p&gt;
&lt;p&gt;e.g. &lt;code&gt;s3://cache.example.com&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;replace &lt;code&gt;KEY_FILE&lt;/code&gt; with the path to your cache signing
key&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;That last script is the pedantically robust way to do this in Bash if
you want to be super paranoid. The above script might not work in other
shells, but hopefully this post was sufficiently clear that you can
adapt the script to your needs.&lt;/p&gt;
&lt;p&gt;If I made any mistakes in the above post, let me know and I can fix
them.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/7096293096571919933/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2022/10/how-to-correctly-cache-build-time.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/7096293096571919933'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/7096293096571919933'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2022/10/how-to-correctly-cache-build-time.html' title='How to correctly cache build-time dependencies using Nix'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-5833984871945391183</id><published>2022-10-20T07:31:00.008-07:00</published><updated>2022-10-22T13:12:19.341-07:00</updated><title type='text'>What does &quot;isomorphic&quot; mean (in Haskell)?</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;&gt;
  &lt;meta name=&quot;twitter:site&quot; content=&quot;@GabriellaG439&quot;&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;What does &amp;quot;isomorphic&amp;quot; mean (in Haskell)&quot;&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;An explanation of isomorphisms in the context of the Haskell programming language&quot;&gt;
  &lt;title&gt;What does &quot;isomorphic&quot; mean (in Haskell)&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { color: #008000; } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { color: #008000; font-weight: bold; } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Sometimes you’ll hear someone describe two things as being
“isomorphic” to one another and I wanted to explain what that means.&lt;/p&gt;
&lt;p&gt;You might have already guessed that “isomorphic” is a synonym for
“equivalent”, and that would have been a pretty good guess. Really, the
main difference between the two words is that “isomorphic” has a more
precise and more general definition than “equivalent”.&lt;/p&gt;
&lt;p&gt;In this post I will introduce a more precise definition of
“isomorphic”, using Haskell code. This definition won’t be the fully
general definition, but I still hope to give you some taste of how
“isomorphic” can denote something more than just “equivalent”.&lt;/p&gt;
&lt;h4 id=&quot;the-simple-version&quot;&gt;The simple version&lt;/h4&gt;
&lt;p&gt;The simplest and least general definition of “isomorphic” (in
Haskell) is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Two types, &lt;code&gt;A&lt;/code&gt;, and &lt;code&gt;B&lt;/code&gt;, are isomorphic if
there exist two functions, &lt;code&gt;forward&lt;/code&gt; and
&lt;code&gt;backward&lt;/code&gt; of the following types:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;forward ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;B&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;backward ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… such that the following two equations (which I will refer to as the “isomorphism
laws”) are true:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;forward &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; backward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;backward &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; forward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;id&lt;/code&gt; here is the identity function from Haskell’s Prelude,
defined like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ::&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; x &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and &lt;code&gt;(.)&lt;/code&gt; is the function composition operator (also
from Haskell’s Prelude), defined like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;(.) ::&lt;/span&gt; (b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; c) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(f &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; g) x &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f (g x)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;According to the above definition, the types
&lt;code&gt;Bool -&amp;gt; a&lt;/code&gt; and &lt;code&gt;(a, a)&lt;/code&gt; are isomorphic,
because we can define two functions:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;forward ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (a, a)&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;forward function &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (function &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;, function &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;backward ::&lt;/span&gt; (a, a) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;backward (first, second) &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; first&lt;/span&gt;
&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;backward (first, second) &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; second&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and we can prove that those two functions satisfy the isomorphism
laws using &lt;a
href=&quot;https://www.haskellforall.com/2013/12/equational-reasoning.html&quot;&gt;equational
reasoning&lt;/a&gt;.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Proof of the isomorphism laws (click to expand)
&lt;/summary&gt;
&lt;p&gt;Here’s the proof of the first isomorphism law:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;forward &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; backward&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (f . g) = \x -&amp;gt; f (g x)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;#cb6-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- … where:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-6&quot;&gt;&lt;a href=&quot;#cb6-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-7&quot;&gt;&lt;a href=&quot;#cb6-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- f = forward&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-8&quot;&gt;&lt;a href=&quot;#cb6-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- g = backward&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-9&quot;&gt;&lt;a href=&quot;#cb6-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; forward (backward x)&lt;/span&gt;
&lt;span id=&quot;cb6-10&quot;&gt;&lt;a href=&quot;#cb6-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-11&quot;&gt;&lt;a href=&quot;#cb6-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- x = (first, second)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-12&quot;&gt;&lt;a href=&quot;#cb6-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \(first, second) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; forward (backward (first, second))&lt;/span&gt;
&lt;span id=&quot;cb6-13&quot;&gt;&lt;a href=&quot;#cb6-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-14&quot;&gt;&lt;a href=&quot;#cb6-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- forward function = (function False, function True)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-15&quot;&gt;&lt;a href=&quot;#cb6-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \(first, second) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-16&quot;&gt;&lt;a href=&quot;#cb6-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    (backward (first, second) &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;, backward (first, second) &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb6-17&quot;&gt;&lt;a href=&quot;#cb6-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-18&quot;&gt;&lt;a href=&quot;#cb6-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- backward (first, second) False = first&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-19&quot;&gt;&lt;a href=&quot;#cb6-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- backward (first, second) True  = second&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-20&quot;&gt;&lt;a href=&quot;#cb6-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \(first, second) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (first, second)&lt;/span&gt;
&lt;span id=&quot;cb6-21&quot;&gt;&lt;a href=&quot;#cb6-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-22&quot;&gt;&lt;a href=&quot;#cb6-22&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- x = (first, second)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-23&quot;&gt;&lt;a href=&quot;#cb6-23&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-24&quot;&gt;&lt;a href=&quot;#cb6-24&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- … in reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-25&quot;&gt;&lt;a href=&quot;#cb6-25&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&quot;cb6-26&quot;&gt;&lt;a href=&quot;#cb6-26&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-27&quot;&gt;&lt;a href=&quot;#cb6-27&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- id x = x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-28&quot;&gt;&lt;a href=&quot;#cb6-28&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-29&quot;&gt;&lt;a href=&quot;#cb6-29&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- … in reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-30&quot;&gt;&lt;a href=&quot;#cb6-30&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&quot;cb6-31&quot;&gt;&lt;a href=&quot;#cb6-31&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-32&quot;&gt;&lt;a href=&quot;#cb6-32&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- η-reduction&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-33&quot;&gt;&lt;a href=&quot;#cb6-33&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and here is the proof of the second isomorphism law:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;backward &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; forward&lt;/span&gt;
&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (f . g) = \x -&amp;gt; f (g x)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-5&quot;&gt;&lt;a href=&quot;#cb7-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- … where:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-6&quot;&gt;&lt;a href=&quot;#cb7-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-7&quot;&gt;&lt;a href=&quot;#cb7-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- f = backward&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-8&quot;&gt;&lt;a href=&quot;#cb7-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- g = forward&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-9&quot;&gt;&lt;a href=&quot;#cb7-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- x = function&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-10&quot;&gt;&lt;a href=&quot;#cb7-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \function &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; backward (forward function)&lt;/span&gt;
&lt;span id=&quot;cb7-11&quot;&gt;&lt;a href=&quot;#cb7-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-12&quot;&gt;&lt;a href=&quot;#cb7-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- forward function = (function False, function True)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-13&quot;&gt;&lt;a href=&quot;#cb7-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \function &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; backward (function &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;, function &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb7-14&quot;&gt;&lt;a href=&quot;#cb7-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-15&quot;&gt;&lt;a href=&quot;#cb7-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- η-expand&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-16&quot;&gt;&lt;a href=&quot;#cb7-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \function bool &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; backward (function &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;, function &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;) bool&lt;/span&gt;
&lt;span id=&quot;cb7-17&quot;&gt;&lt;a href=&quot;#cb7-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-18&quot;&gt;&lt;a href=&quot;#cb7-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- There are two possible cases:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-19&quot;&gt;&lt;a href=&quot;#cb7-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-20&quot;&gt;&lt;a href=&quot;#cb7-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Case #0: bool = False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-21&quot;&gt;&lt;a href=&quot;#cb7-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Case #1: bool = True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-22&quot;&gt;&lt;a href=&quot;#cb7-22&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-23&quot;&gt;&lt;a href=&quot;#cb7-23&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Proof for case #0: bool = False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-24&quot;&gt;&lt;a href=&quot;#cb7-24&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \function bool &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; backward (function &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;, function &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-25&quot;&gt;&lt;a href=&quot;#cb7-25&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-26&quot;&gt;&lt;a href=&quot;#cb7-26&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- backward (first, second) False = first&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-27&quot;&gt;&lt;a href=&quot;#cb7-27&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-28&quot;&gt;&lt;a href=&quot;#cb7-28&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- … where:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-29&quot;&gt;&lt;a href=&quot;#cb7-29&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-30&quot;&gt;&lt;a href=&quot;#cb7-30&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- first  = function False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-31&quot;&gt;&lt;a href=&quot;#cb7-31&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- second = function True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-32&quot;&gt;&lt;a href=&quot;#cb7-32&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \function bool &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; function &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-33&quot;&gt;&lt;a href=&quot;#cb7-33&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-34&quot;&gt;&lt;a href=&quot;#cb7-34&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- bool = False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-35&quot;&gt;&lt;a href=&quot;#cb7-35&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-36&quot;&gt;&lt;a href=&quot;#cb7-36&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- … in reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-37&quot;&gt;&lt;a href=&quot;#cb7-37&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \function bool &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; function bool&lt;/span&gt;
&lt;span id=&quot;cb7-38&quot;&gt;&lt;a href=&quot;#cb7-38&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-39&quot;&gt;&lt;a href=&quot;#cb7-39&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- η-reduction&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-40&quot;&gt;&lt;a href=&quot;#cb7-40&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \function &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; function&lt;/span&gt;
&lt;span id=&quot;cb7-41&quot;&gt;&lt;a href=&quot;#cb7-41&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-42&quot;&gt;&lt;a href=&quot;#cb7-42&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- id x = x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-43&quot;&gt;&lt;a href=&quot;#cb7-43&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-44&quot;&gt;&lt;a href=&quot;#cb7-44&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- … in reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-45&quot;&gt;&lt;a href=&quot;#cb7-45&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \function &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; function&lt;/span&gt;
&lt;span id=&quot;cb7-46&quot;&gt;&lt;a href=&quot;#cb7-46&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-47&quot;&gt;&lt;a href=&quot;#cb7-47&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- η-reduction&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-48&quot;&gt;&lt;a href=&quot;#cb7-48&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-49&quot;&gt;&lt;a href=&quot;#cb7-49&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-50&quot;&gt;&lt;a href=&quot;#cb7-50&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Proof for case #1: bool = True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-51&quot;&gt;&lt;a href=&quot;#cb7-51&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \function bool &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; backward (function &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;, function &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-52&quot;&gt;&lt;a href=&quot;#cb7-52&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-53&quot;&gt;&lt;a href=&quot;#cb7-53&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- backward (first, second) True = second&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-54&quot;&gt;&lt;a href=&quot;#cb7-54&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-55&quot;&gt;&lt;a href=&quot;#cb7-55&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- … where:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-56&quot;&gt;&lt;a href=&quot;#cb7-56&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-57&quot;&gt;&lt;a href=&quot;#cb7-57&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- first  = function False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-58&quot;&gt;&lt;a href=&quot;#cb7-58&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- second = function True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-59&quot;&gt;&lt;a href=&quot;#cb7-59&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \function bool &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; function &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-60&quot;&gt;&lt;a href=&quot;#cb7-60&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-61&quot;&gt;&lt;a href=&quot;#cb7-61&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- b = True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-62&quot;&gt;&lt;a href=&quot;#cb7-62&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-63&quot;&gt;&lt;a href=&quot;#cb7-63&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- … in reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-64&quot;&gt;&lt;a href=&quot;#cb7-64&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \function bool &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; function bool&lt;/span&gt;
&lt;span id=&quot;cb7-65&quot;&gt;&lt;a href=&quot;#cb7-65&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-66&quot;&gt;&lt;a href=&quot;#cb7-66&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- η-reduction&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-67&quot;&gt;&lt;a href=&quot;#cb7-67&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \function &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; function&lt;/span&gt;
&lt;span id=&quot;cb7-68&quot;&gt;&lt;a href=&quot;#cb7-68&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-69&quot;&gt;&lt;a href=&quot;#cb7-69&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- id x = x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-70&quot;&gt;&lt;a href=&quot;#cb7-70&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-71&quot;&gt;&lt;a href=&quot;#cb7-71&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- … in reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-72&quot;&gt;&lt;a href=&quot;#cb7-72&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \function &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; function&lt;/span&gt;
&lt;span id=&quot;cb7-73&quot;&gt;&lt;a href=&quot;#cb7-73&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-74&quot;&gt;&lt;a href=&quot;#cb7-74&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- η-reduction&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-75&quot;&gt;&lt;a href=&quot;#cb7-75&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;We’ll use the notation &lt;code&gt;A ≅ B&lt;/code&gt; as a short-hand for
“&lt;code&gt;A&lt;/code&gt; is isomorphic to &lt;code&gt;B&lt;/code&gt;”, so we can also
write:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a ≅ (a, a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whenever we declare that two types are isomorphic we need to actually
specify what the &lt;code&gt;forward&lt;/code&gt; and &lt;code&gt;backward&lt;/code&gt;
conversion functions are and prove that they satisfy isomorphism laws.
The existence of &lt;code&gt;forward&lt;/code&gt; and &lt;code&gt;backward&lt;/code&gt;
functions of the correct input and output types is not enough to
establish that the two types are isomorphic.&lt;/p&gt;
&lt;p&gt;For example, suppose we changed the definition of
&lt;code&gt;forward&lt;/code&gt; to:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;forward ::&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (a, a)&lt;/span&gt;
&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;forward function &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (function &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;, function &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then &lt;code&gt;forward . backward&lt;/code&gt; and
&lt;code&gt;backward . forward&lt;/code&gt; would still type-check and have the
right type, but they would no longer be equal to &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In other words, when discussing isomorphic types, it’s technically
not enough that the two types are equivalent. The &lt;em&gt;way&lt;/em&gt; in which
they are equivalent matters, too, if we want to be pedantic. In
practice, though, if there’s only one way to implement the two
conversion functions then people won’t bother to explicitly specify
them.&lt;/p&gt;
&lt;p&gt;The reason why this is important is because an isomorphism also gives
us an explicit way to convert between the two types.  We&#39;re not just declaring
that they&#39;re equivalent, but we&#39;re spelling out exactly how to transform
each type into the other type, which is very useful!&lt;/p&gt;
&lt;h4 id=&quot;more-examples&quot;&gt;More examples&lt;/h4&gt;
&lt;p&gt;Let’s speedrun through a few more examples of isomorphic types, which
all parallel the rules of arithmetic:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- 0 + a = a&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt; a ≅ a&lt;/span&gt;
&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;#cb10-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-4&quot;&gt;&lt;a href=&quot;#cb10-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- a + (b + c) = (a + b) + c&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-5&quot;&gt;&lt;a href=&quot;#cb10-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; a (&lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; b c) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; a b) c&lt;/span&gt;
&lt;span id=&quot;cb10-6&quot;&gt;&lt;a href=&quot;#cb10-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-7&quot;&gt;&lt;a href=&quot;#cb10-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- 1 × a = a&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-8&quot;&gt;&lt;a href=&quot;#cb10-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;((), a) ≅ a&lt;/span&gt;
&lt;span id=&quot;cb10-9&quot;&gt;&lt;a href=&quot;#cb10-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-10&quot;&gt;&lt;a href=&quot;#cb10-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- a × (b × c) = (a × b) × c&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-11&quot;&gt;&lt;a href=&quot;#cb10-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(a, (b, c)) ≅ ((a, b), c)&lt;/span&gt;
&lt;span id=&quot;cb10-12&quot;&gt;&lt;a href=&quot;#cb10-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-13&quot;&gt;&lt;a href=&quot;#cb10-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- 0 × a = 0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-14&quot;&gt;&lt;a href=&quot;#cb10-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(&lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt;, a) ≅ &lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-15&quot;&gt;&lt;a href=&quot;#cb10-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-16&quot;&gt;&lt;a href=&quot;#cb10-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- a × (b + c) = (a × b) + (a × c)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-17&quot;&gt;&lt;a href=&quot;#cb10-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(a, &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; b c) ≅ &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; (a, b) (a, c)&lt;/span&gt;
&lt;span id=&quot;cb10-18&quot;&gt;&lt;a href=&quot;#cb10-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-19&quot;&gt;&lt;a href=&quot;#cb10-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- a ^ 1 = a&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-20&quot;&gt;&lt;a href=&quot;#cb10-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;() &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a ≅ a&lt;/span&gt;
&lt;span id=&quot;cb10-21&quot;&gt;&lt;a href=&quot;#cb10-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-22&quot;&gt;&lt;a href=&quot;#cb10-22&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- a ^ 0 = 1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-23&quot;&gt;&lt;a href=&quot;#cb10-23&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a ≅ ()&lt;/span&gt;
&lt;span id=&quot;cb10-24&quot;&gt;&lt;a href=&quot;#cb10-24&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-25&quot;&gt;&lt;a href=&quot;#cb10-25&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (c ^ b) ^ a = (c ^ a) ^ b&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-26&quot;&gt;&lt;a href=&quot;#cb10-26&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; c ≅ b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&quot;cb10-27&quot;&gt;&lt;a href=&quot;#cb10-27&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-28&quot;&gt;&lt;a href=&quot;#cb10-28&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (c ^ b) ^ a = c ^ (a × b)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-29&quot;&gt;&lt;a href=&quot;#cb10-29&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; c ≅ (a, b) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt; implement the &lt;code&gt;forward&lt;/code&gt; and
&lt;code&gt;backward&lt;/code&gt; functions for some of the above types and prove
the isomorphism laws for each pair of functions. It will probably be
very tedious to prove all of the above examples, so pick the ones that
interest you the most.&lt;/p&gt;
&lt;h4 id=&quot;intermediate-tricks&quot;&gt;Intermediate tricks&lt;/h4&gt;
&lt;p&gt;This section will introduce some more advanced tricks for proving
that two types are isomorphic.&lt;/p&gt;
&lt;p&gt;First, let’s start with a few ground rules for working with all
isomorphisms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Reflexivity: &lt;code&gt;a ≅ a&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Symmetry: If &lt;code&gt;a ≅ b&lt;/code&gt; then &lt;code&gt;b ≅ a&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Transitivity: If &lt;code&gt;a ≅ b&lt;/code&gt; and &lt;code&gt;b ≅ c&lt;/code&gt; then
&lt;code&gt;a ≅ c&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let’s get into some Haskell-specific rules:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a &lt;code&gt;newtype&lt;/code&gt; in Haskell is isomorphic to the underlying
type if the &lt;code&gt;newtype&lt;/code&gt; constructor is public.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example, if we were to define:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; getName ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… then &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;String&lt;/code&gt; would be isomorphic
(&lt;code&gt;Name ≅ String&lt;/code&gt;), where:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;forward ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;#cb12-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;forward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; getName&lt;/span&gt;
&lt;span id=&quot;cb12-3&quot;&gt;&lt;a href=&quot;#cb12-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-4&quot;&gt;&lt;a href=&quot;#cb12-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;backward ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-5&quot;&gt;&lt;a href=&quot;#cb12-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;backward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Name&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One such &lt;code&gt;newtype&lt;/code&gt; that shows up pretty often when
reasoning about isomorphic types is the &lt;a
href=&quot;https://hackage.haskell.org/package/base/docs/Data-Functor-Identity.html#t:Identity&quot;&gt;&lt;code&gt;Identity&lt;/code&gt;&lt;/a&gt;
type constructor from &lt;a
href=&quot;https://hackage.haskell.org/package/base/docs/Data-Functor-Identity.html&quot;&gt;&lt;code&gt;Data.Functor.Identity&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; runIdentity ::&lt;/span&gt; a }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… where &lt;code&gt;Identity a ≅ a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To see why &lt;code&gt;Identity&lt;/code&gt; is useful, consider the following
two types:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;State&lt;/span&gt; s a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;State&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; runState ::&lt;/span&gt; s &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (a, s) }&lt;/span&gt;
&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;#cb14-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;#cb14-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;StateT&lt;/span&gt; s m a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;StateT&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; runStateT ::&lt;/span&gt; s &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; m (a, s) }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The latter &lt;code&gt;newtype&lt;/code&gt; is from the &lt;code&gt;transformers&lt;/code&gt;
package, which is how we layer on the “state” effect within a monad
transformer stack. If you don’t understand what that means, that’s okay;
it’s not that relevant to the point.&lt;/p&gt;
&lt;p&gt;However, the &lt;code&gt;transformers&lt;/code&gt; package doesn’t define
&lt;code&gt;State&lt;/code&gt; as above. Instead, the &lt;code&gt;transformers&lt;/code&gt;
package defines &lt;code&gt;State&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;#cb15-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;State&lt;/span&gt; s &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;StateT&lt;/span&gt; s &lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The latter &lt;code&gt;type&lt;/code&gt; synonym definition for
&lt;code&gt;State&lt;/code&gt; is equivalent (“isomorphic”) to the
&lt;code&gt;newtype&lt;/code&gt; definition for &lt;code&gt;State&lt;/code&gt; I provided above.
In order to prove that though I’ll need to distinguish between the two
&lt;code&gt;State&lt;/code&gt; type constructors, so I’ll use a numeric subscript to
distinguish them:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;#cb16-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Functor.Identity&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb16-2&quot;&gt;&lt;a href=&quot;#cb16-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-3&quot;&gt;&lt;a href=&quot;#cb16-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;State&lt;/span&gt;₀ s a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;State&lt;/span&gt;₀ {&lt;span class=&quot;ot&quot;&gt; runState ::&lt;/span&gt; s &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (a, s) }&lt;/span&gt;
&lt;span id=&quot;cb16-4&quot;&gt;&lt;a href=&quot;#cb16-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-5&quot;&gt;&lt;a href=&quot;#cb16-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;StateT&lt;/span&gt; s m a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;StateT&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; runStateT ::&lt;/span&gt; s &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; m (a, s) }&lt;/span&gt;
&lt;span id=&quot;cb16-6&quot;&gt;&lt;a href=&quot;#cb16-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-7&quot;&gt;&lt;a href=&quot;#cb16-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;State&lt;/span&gt;₁ s &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;StateT&lt;/span&gt; s &lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and then we can prove that &lt;code&gt;State₀&lt;/code&gt; is isomorphic to
&lt;code&gt;State₁&lt;/code&gt; like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;State₀ s a ≅ s -&amp;gt; (a, s)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;… because the &lt;code&gt;State₀&lt;/code&gt; &lt;code&gt;newtype&lt;/code&gt; is isomorphic
to the underlying type&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;s -&amp;gt; (a, s) ≅ s -&amp;gt; Identity (a, s)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;… because the &lt;code&gt;Identity&lt;/code&gt; newtype is isomorphic to the
underlying type&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;s -&amp;gt; Identity (a, s) ≅ StateT s Identity a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;… because the &lt;code&gt;StateT&lt;/code&gt; newtype is isomorphic to the
underlying type&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;StateT s Identity a = State₁ s a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;… because of how the &lt;code&gt;State₁&lt;/code&gt; type synonym is
defined.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, by transitivity, we can conclude:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;State₀ s a ≅ State₁ s a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, now let’s introduce an &lt;strong&gt;extremely useful&lt;/strong&gt; rule
related to isomorphic types:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If &lt;code&gt;f&lt;/code&gt; is a &lt;code&gt;Functor&lt;/code&gt; then
&lt;code&gt;forall r . (a -&amp;gt; r) -&amp;gt; f r&lt;/code&gt; is isomorphic to
&lt;code&gt;f a&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or in other words:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;#cb17-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f r) ≅ f a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and here are the two conversion functions:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;#cb18-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE RankNTypes #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-2&quot;&gt;&lt;a href=&quot;#cb18-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-3&quot;&gt;&lt;a href=&quot;#cb18-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;forward ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f r) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/span&gt;
&lt;span id=&quot;cb18-4&quot;&gt;&lt;a href=&quot;#cb18-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;forward f &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-5&quot;&gt;&lt;a href=&quot;#cb18-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-6&quot;&gt;&lt;a href=&quot;#cb18-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;backward ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; f a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; f r)&lt;/span&gt;
&lt;span id=&quot;cb18-7&quot;&gt;&lt;a href=&quot;#cb18-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;backward fa k &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; k fa&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is essentially the &lt;a
href=&quot;https://en.wikipedia.org/wiki/Yoneda_lemma&quot;&gt;Yoneda lemma&lt;/a&gt; in
Haskell form, which is actually a bit tricky to prove. If you don’t
believe me, try proving the isomorphism laws for the above
&lt;code&gt;forward&lt;/code&gt; and &lt;code&gt;backward&lt;/code&gt; functions and see how far
you get. It’s much easier to rely on the fact that someone else already
did the hard work of proving those isomorphism laws for us.&lt;/p&gt;
&lt;p&gt;Here’s a concrete example of the Yoneda lemma in action. Suppose that
I want to prove that there is only one implementation of the identity
function, &lt;code&gt;id&lt;/code&gt;. I can do so by proving that the type of the
identity function (&lt;code&gt;forall a . a -&amp;gt; a&lt;/code&gt;) is isomorphic to
the &lt;code&gt;()&lt;/code&gt; type (a type inhabited by exactly one value):&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb19&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb19-1&quot;&gt;&lt;a href=&quot;#cb19-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a) ≅ ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here’s how you prove that by chaining together several isomorphic
types:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb20&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb20-1&quot;&gt;&lt;a href=&quot;#cb20-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  (&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&quot;cb20-2&quot;&gt;&lt;a href=&quot;#cb20-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- a ≅ () -&amp;gt; a&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-3&quot;&gt;&lt;a href=&quot;#cb20-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;≅ (&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (() &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&quot;cb20-4&quot;&gt;&lt;a href=&quot;#cb20-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- a ≅ Identity a&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-5&quot;&gt;&lt;a href=&quot;#cb20-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;≅ (&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (() &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&quot;cb20-6&quot;&gt;&lt;a href=&quot;#cb20-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- ✨ Yoneda lemma (where f = Identity) ✨&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-7&quot;&gt;&lt;a href=&quot;#cb20-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;≅ &lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&quot;cb20-8&quot;&gt;&lt;a href=&quot;#cb20-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;≅ ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… so since the &lt;code&gt;()&lt;/code&gt; type is inhabited by exactly one value
(the &lt;code&gt;()&lt;/code&gt; term) and the &lt;code&gt;()&lt;/code&gt; type is isomorphic to
the type of &lt;code&gt;id&lt;/code&gt;, then there is exactly one way to implement
&lt;code&gt;id&lt;/code&gt; (which is &lt;code&gt;id x = x&lt;/code&gt;).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: To be totally pedantic, there is exactly one way to implement
&lt;code&gt;id&lt;/code&gt; “up to isomorphism”. This is how we say that there might
be several syntactically different ways of implementing &lt;code&gt;id&lt;/code&gt;,
such as:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb21&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb21-1&quot;&gt;&lt;a href=&quot;#cb21-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; x &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&quot;cb21-2&quot;&gt;&lt;a href=&quot;#cb21-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb21-3&quot;&gt;&lt;a href=&quot;#cb21-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; y &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; y&lt;/span&gt;
&lt;span id=&quot;cb21-4&quot;&gt;&lt;a href=&quot;#cb21-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb21-5&quot;&gt;&lt;a href=&quot;#cb21-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&quot;cb21-6&quot;&gt;&lt;a href=&quot;#cb21-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb21-7&quot;&gt;&lt;a href=&quot;#cb21-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; x &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; y&lt;/span&gt;
&lt;span id=&quot;cb21-8&quot;&gt;&lt;a href=&quot;#cb21-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb21-9&quot;&gt;&lt;a href=&quot;#cb21-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    y &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… but all of those ways of implementing &lt;code&gt;id&lt;/code&gt; are
isomorphic to one another (in a slightly different sense that I have not
covered), so there is essentially only one way of implementing
&lt;code&gt;id.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Similarly, we can prove that there are exactly two ways to implement
a function of type &lt;code&gt;forall a . a -&amp;gt; a -&amp;gt; a&lt;/code&gt; by showing
that such a type is isomorphic to &lt;code&gt;Bool&lt;/code&gt; (a type inhabited by
exactly two values):&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb22&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb22-1&quot;&gt;&lt;a href=&quot;#cb22-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  (&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&quot;cb22-2&quot;&gt;&lt;a href=&quot;#cb22-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- a -&amp;gt; b -&amp;gt; c ≅ (a, b) -&amp;gt; c&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-3&quot;&gt;&lt;a href=&quot;#cb22-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;≅ (&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (a, a) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&quot;cb22-4&quot;&gt;&lt;a href=&quot;#cb22-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- (a, a) ≅ Bool -&amp;gt; a&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-5&quot;&gt;&lt;a href=&quot;#cb22-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;≅ (&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&quot;cb22-6&quot;&gt;&lt;a href=&quot;#cb22-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- a ≅ Identity a&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-7&quot;&gt;&lt;a href=&quot;#cb22-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;≅ (&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&quot;cb22-8&quot;&gt;&lt;a href=&quot;#cb22-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- ✨ Yoneda lemma (where f = Identity) ✨&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-9&quot;&gt;&lt;a href=&quot;#cb22-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;≅ &lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-10&quot;&gt;&lt;a href=&quot;#cb22-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;≅ &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and in case you’re curious, here are the only two possible ways to
implement that type (up to isomorphism):&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb23&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb23-1&quot;&gt;&lt;a href=&quot;#cb23-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE ExplicitForAll #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-2&quot;&gt;&lt;a href=&quot;#cb23-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-3&quot;&gt;&lt;a href=&quot;#cb23-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;false ::&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&quot;cb23-4&quot;&gt;&lt;a href=&quot;#cb23-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;false f t &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f&lt;/span&gt;
&lt;span id=&quot;cb23-5&quot;&gt;&lt;a href=&quot;#cb23-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-6&quot;&gt;&lt;a href=&quot;#cb23-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;true ::&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&quot;cb23-7&quot;&gt;&lt;a href=&quot;#cb23-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;true f t &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; t&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here’s one last example of using the Yoneda lemma to prove that:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb24&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb24-1&quot;&gt;&lt;a href=&quot;#cb24-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r) ≅ a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… which you can prove like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb25&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb25-1&quot;&gt;&lt;a href=&quot;#cb25-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  (&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r)&lt;/span&gt;
&lt;span id=&quot;cb25-2&quot;&gt;&lt;a href=&quot;#cb25-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- Identity r ≅ r&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb25-3&quot;&gt;&lt;a href=&quot;#cb25-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;≅ (&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; r)&lt;/span&gt;
&lt;span id=&quot;cb25-4&quot;&gt;&lt;a href=&quot;#cb25-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- ✨ Yoneda lemma (where f = Identity) ✨&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb25-5&quot;&gt;&lt;a href=&quot;#cb25-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;≅ &lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&quot;cb25-6&quot;&gt;&lt;a href=&quot;#cb25-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;≅ a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Exercise:&lt;/strong&gt; Prove that these two types are
isomorphic:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb26&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb26-1&quot;&gt;&lt;a href=&quot;#cb26-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r)) ≅ a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click to expand)
&lt;/summary&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb27&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb27-1&quot;&gt;&lt;a href=&quot;#cb27-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  (&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r))&lt;/span&gt;
&lt;span id=&quot;cb27-2&quot;&gt;&lt;a href=&quot;#cb27-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- a -&amp;gt; b -&amp;gt; c ≅ b -&amp;gt; a -&amp;gt; c&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb27-3&quot;&gt;&lt;a href=&quot;#cb27-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;≅ (&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r)&lt;/span&gt;
&lt;span id=&quot;cb27-4&quot;&gt;&lt;a href=&quot;#cb27-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- r ≅ Identity r&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb27-5&quot;&gt;&lt;a href=&quot;#cb27-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;≅ (&lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; r)&lt;/span&gt;
&lt;span id=&quot;cb27-6&quot;&gt;&lt;a href=&quot;#cb27-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- ✨ Yoneda lemma (where f = Identity) ✨&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb27-7&quot;&gt;&lt;a href=&quot;#cb27-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;≅ a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Identity&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&quot;cb27-8&quot;&gt;&lt;a href=&quot;#cb27-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;co&quot;&gt;-- Identity b ≅ b&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb27-9&quot;&gt;&lt;a href=&quot;#cb27-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;≅ a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;h4 id=&quot;isomorphism&quot;&gt;Isomorphism&lt;/h4&gt;
&lt;p&gt;So far we’ve only used the word “isomorphic” but there is a related
word we should cover: “isomorphism”.&lt;/p&gt;
&lt;p&gt;In Haskell, if the types &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are
“isomorphic” then an “isomorphism” between them is the corresponding
pair of functions converting between them (i.e. &lt;code&gt;forward&lt;/code&gt; and
&lt;code&gt;backward&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The easiest way to explain this is to actually define an isomorphism
type in Haskell:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb28&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb28-1&quot;&gt;&lt;a href=&quot;#cb28-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; a b &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb28-2&quot;&gt;&lt;a href=&quot;#cb28-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    {&lt;span class=&quot;ot&quot;&gt; forward  ::&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&quot;cb28-3&quot;&gt;&lt;a href=&quot;#cb28-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    ,&lt;span class=&quot;ot&quot;&gt; backward ::&lt;/span&gt; b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&quot;cb28-4&quot;&gt;&lt;a href=&quot;#cb28-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb29&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb29-1&quot;&gt;&lt;a href=&quot;#cb29-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;exampleIsomorphism ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; ((a, b) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; c) (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&quot;cb29-2&quot;&gt;&lt;a href=&quot;#cb29-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;exampleIsomorphism &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt;{ forward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;curry&lt;/span&gt;, backward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;uncurry&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, this is not the only way we can encode an isomorphism in
Haskell. For example, the &lt;code&gt;lens&lt;/code&gt; package has an
&lt;code&gt;Iso&lt;/code&gt; type which can also represent an isomorphism:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb30&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb30-1&quot;&gt;&lt;a href=&quot;#cb30-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Lens&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Iso&amp;#39;&lt;/span&gt;, iso)&lt;/span&gt;
&lt;span id=&quot;cb30-2&quot;&gt;&lt;a href=&quot;#cb30-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb30-3&quot;&gt;&lt;a href=&quot;#cb30-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;exampleIso ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Iso&amp;#39;&lt;/span&gt; ((a, b) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; c) (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&quot;cb30-4&quot;&gt;&lt;a href=&quot;#cb30-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;exampleIso &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; iso &lt;span class=&quot;fu&quot;&gt;curry&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;uncurry&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These two types are equivalent. In fact, you might even say they are
… isomorphic 👀.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb31&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb31-1&quot;&gt;&lt;a href=&quot;#cb31-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE NamedFieldPuns #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb31-2&quot;&gt;&lt;a href=&quot;#cb31-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb31-3&quot;&gt;&lt;a href=&quot;#cb31-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Lens&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;AnIso&amp;#39;&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Iso&amp;#39;&lt;/span&gt;, cloneIso, iso, review, view)&lt;/span&gt;
&lt;span id=&quot;cb31-4&quot;&gt;&lt;a href=&quot;#cb31-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb31-5&quot;&gt;&lt;a href=&quot;#cb31-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; a b &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb31-6&quot;&gt;&lt;a href=&quot;#cb31-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    {&lt;span class=&quot;ot&quot;&gt; forward  ::&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&quot;cb31-7&quot;&gt;&lt;a href=&quot;#cb31-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    ,&lt;span class=&quot;ot&quot;&gt; backward ::&lt;/span&gt; b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&quot;cb31-8&quot;&gt;&lt;a href=&quot;#cb31-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&quot;cb31-9&quot;&gt;&lt;a href=&quot;#cb31-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb31-10&quot;&gt;&lt;a href=&quot;#cb31-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | We have to use `AnIso&amp;#39;` here instead of `Iso&amp;#39;` for reasons I won&amp;#39;t go into&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb31-11&quot;&gt;&lt;a href=&quot;#cb31-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;isomorphismIsomorphism ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; a b) (&lt;span class=&quot;dt&quot;&gt;AnIso&amp;#39;&lt;/span&gt; a b)&lt;/span&gt;
&lt;span id=&quot;cb31-12&quot;&gt;&lt;a href=&quot;#cb31-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;isomorphismIsomorphism &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt;{ forward, backward }&lt;/span&gt;
&lt;span id=&quot;cb31-13&quot;&gt;&lt;a href=&quot;#cb31-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb31-14&quot;&gt;&lt;a href=&quot;#cb31-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    forward ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; a b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;AnIso&amp;#39;&lt;/span&gt; a b&lt;/span&gt;
&lt;span id=&quot;cb31-15&quot;&gt;&lt;a href=&quot;#cb31-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    forward (&lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; f b) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; iso f b&lt;/span&gt;
&lt;span id=&quot;cb31-16&quot;&gt;&lt;a href=&quot;#cb31-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb31-17&quot;&gt;&lt;a href=&quot;#cb31-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    backward ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;AnIso&amp;#39;&lt;/span&gt; a b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; a b&lt;/span&gt;
&lt;span id=&quot;cb31-18&quot;&gt;&lt;a href=&quot;#cb31-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    backward iso &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb31-19&quot;&gt;&lt;a href=&quot;#cb31-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb31-20&quot;&gt;&lt;a href=&quot;#cb31-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            { forward  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; view (cloneIso iso)&lt;/span&gt;
&lt;span id=&quot;cb31-21&quot;&gt;&lt;a href=&quot;#cb31-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            , backward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; review (cloneIso iso)&lt;/span&gt;
&lt;span id=&quot;cb31-22&quot;&gt;&lt;a href=&quot;#cb31-22&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;generalized-isomorphisms&quot;&gt;Generalized isomorphisms&lt;/h4&gt;
&lt;p&gt;I mentioned earlier that the isomorphism definition we began with was
not the fully general definition. In this section we’ll slightly
generalize the definition, while still sticking to something ergonomic
to express within Haskell:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Two types, &lt;code&gt;A&lt;/code&gt;, and &lt;code&gt;B&lt;/code&gt;, are isomorphic if
there exist two morphisms, &lt;code&gt;forward&lt;/code&gt; and
&lt;code&gt;backward&lt;/code&gt; of the following types:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb32&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb32-1&quot;&gt;&lt;a href=&quot;#cb32-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;forward ::&lt;/span&gt; cat &lt;span class=&quot;dt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;B&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-2&quot;&gt;&lt;a href=&quot;#cb32-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-3&quot;&gt;&lt;a href=&quot;#cb32-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;backward ::&lt;/span&gt; cat &lt;span class=&quot;dt&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… such that &lt;code&gt;cat&lt;/code&gt; is an instance of the
&lt;code&gt;Category&lt;/code&gt; type class and the following two equations (which
I will refer to as the “isomorphism laws”) are true:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb33&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb33-1&quot;&gt;&lt;a href=&quot;#cb33-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;forward &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; backward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb33-2&quot;&gt;&lt;a href=&quot;#cb33-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb33-3&quot;&gt;&lt;a href=&quot;#cb33-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;backward &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; forward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… where &lt;code&gt;(.)&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; are the methods of the
&lt;code&gt;Category&lt;/code&gt; type class and not necessarily the
&lt;code&gt;(.)&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; from the Prelude.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This definition is based on the &lt;a
href=&quot;https://hackage.haskell.org/package/base/docs/Control-Category.html#t:Category&quot;&gt;&lt;code&gt;Category&lt;/code&gt;&lt;/a&gt;
type class from the &lt;a
href=&quot;https://hackage.haskell.org/package/base/docs/Control-Category.html&quot;&gt;&lt;code&gt;Control.Category&lt;/code&gt;&lt;/a&gt;
module, which is defined like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb34&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb34-1&quot;&gt;&lt;a href=&quot;#cb34-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Category&lt;/span&gt; cat &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb34-2&quot;&gt;&lt;a href=&quot;#cb34-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- | the identity morphism&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb34-3&quot;&gt;&lt;a href=&quot;#cb34-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    id ::&lt;/span&gt; cat a a&lt;/span&gt;
&lt;span id=&quot;cb34-4&quot;&gt;&lt;a href=&quot;#cb34-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb34-5&quot;&gt;&lt;a href=&quot;#cb34-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- | morphism composition&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb34-6&quot;&gt;&lt;a href=&quot;#cb34-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    (.) ::&lt;/span&gt; cat b c &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; cat a b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; cat a c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and all instance of the &lt;code&gt;Category&lt;/code&gt; class must satisfy
the following three “category laws”:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb35&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb35-1&quot;&gt;&lt;a href=&quot;#cb35-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(f &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; g) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; h &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (g &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; h)&lt;/span&gt;
&lt;span id=&quot;cb35-2&quot;&gt;&lt;a href=&quot;#cb35-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb35-3&quot;&gt;&lt;a href=&quot;#cb35-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;f &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f&lt;/span&gt;
&lt;span id=&quot;cb35-4&quot;&gt;&lt;a href=&quot;#cb35-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb35-5&quot;&gt;&lt;a href=&quot;#cb35-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In other words, you can think of the &lt;code&gt;Category&lt;/code&gt; class as
generalizing our notion of functions to become “morphisms” so that we
replace values of type &lt;code&gt;a -&amp;gt; b&lt;/code&gt; (functions) with values of
type &lt;code&gt;cat a b&lt;/code&gt; (“morphisms”). When we generalize our notion
of functions to morphisms then we can similarly generalize our notion of
isomorphisms.&lt;/p&gt;
&lt;p&gt;Of course, Haskell functions are one instance of this
&lt;code&gt;Category&lt;/code&gt; class:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb36&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb36-1&quot;&gt;&lt;a href=&quot;#cb36-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Category&lt;/span&gt; (&lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb36-2&quot;&gt;&lt;a href=&quot;#cb36-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; Prelude.id&lt;/span&gt;
&lt;span id=&quot;cb36-3&quot;&gt;&lt;a href=&quot;#cb36-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb36-4&quot;&gt;&lt;a href=&quot;#cb36-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;Prelude..&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… so if we take our more general definition of isomorphisms and
replace &lt;code&gt;cat&lt;/code&gt; with &lt;code&gt;(-&amp;gt;)&lt;/code&gt; then we get back the
less general definition of isomorphisms that we started with.&lt;/p&gt;
&lt;p&gt;However, things other than functions can be instances of this
&lt;code&gt;Category&lt;/code&gt; class, too. For example, “monadic” functions of
type &lt;code&gt;Monad m =&amp;gt; a -&amp;gt; m b&lt;/code&gt; can implement
&lt;code&gt;Category&lt;/code&gt;, too, if we wrap them in a newtype:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb37&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb37-1&quot;&gt;&lt;a href=&quot;#cb37-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Category&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Category&lt;/span&gt;(..))&lt;/span&gt;
&lt;span id=&quot;cb37-2&quot;&gt;&lt;a href=&quot;#cb37-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Monad&lt;/span&gt; ((&amp;lt;=&amp;lt;))&lt;/span&gt;
&lt;span id=&quot;cb37-3&quot;&gt;&lt;a href=&quot;#cb37-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb37-4&quot;&gt;&lt;a href=&quot;#cb37-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Note: This type and instance already exists in the `Control.Arrow` module&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb37-5&quot;&gt;&lt;a href=&quot;#cb37-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Kleisli&lt;/span&gt; m a b &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Kleisli&lt;/span&gt;{&lt;span class=&quot;ot&quot;&gt; runKleisli ::&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; m b }&lt;/span&gt;
&lt;span id=&quot;cb37-6&quot;&gt;&lt;a href=&quot;#cb37-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb37-7&quot;&gt;&lt;a href=&quot;#cb37-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt; m &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Category&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Kleisli&lt;/span&gt; m) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb37-8&quot;&gt;&lt;a href=&quot;#cb37-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Kleisli&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb37-9&quot;&gt;&lt;a href=&quot;#cb37-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb37-10&quot;&gt;&lt;a href=&quot;#cb37-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Kleisli&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Kleisli&lt;/span&gt; g &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Kleisli&lt;/span&gt; (f &lt;span class=&quot;op&quot;&gt;&amp;lt;=&amp;lt;&lt;/span&gt; g)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and that satisfies the category laws because:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb38&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb38-1&quot;&gt;&lt;a href=&quot;#cb38-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(f &lt;span class=&quot;op&quot;&gt;&amp;lt;=&amp;lt;&lt;/span&gt; g) &lt;span class=&quot;op&quot;&gt;&amp;lt;=&amp;lt;&lt;/span&gt; h &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;&amp;lt;=&amp;lt;&lt;/span&gt; (g &lt;span class=&quot;op&quot;&gt;&amp;lt;=&amp;lt;&lt;/span&gt; h)&lt;/span&gt;
&lt;span id=&quot;cb38-2&quot;&gt;&lt;a href=&quot;#cb38-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb38-3&quot;&gt;&lt;a href=&quot;#cb38-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;f &lt;span class=&quot;op&quot;&gt;&amp;lt;=&amp;lt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f&lt;/span&gt;
&lt;span id=&quot;cb38-4&quot;&gt;&lt;a href=&quot;#cb38-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb38-5&quot;&gt;&lt;a href=&quot;#cb38-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;=&amp;lt;&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; f&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Fun fact: The above category laws for the &lt;code&gt;Kleisli&lt;/code&gt; type
constructor are isomorphic to the monad laws (in a different sense of
the world &quot;isomorphic&quot; that I have not covered).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once we begin to use &lt;code&gt;Category&lt;/code&gt; instances other than
functions we can begin to explore more interesting types of “morphisms”
and “isomorphisms”. However, in order to do so we need to generalize our
&lt;code&gt;Isomorphism&lt;/code&gt; type like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb39&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb39-1&quot;&gt;&lt;a href=&quot;#cb39-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; cat a b &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb39-2&quot;&gt;&lt;a href=&quot;#cb39-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    {&lt;span class=&quot;ot&quot;&gt; forward  ::&lt;/span&gt; cat a b&lt;/span&gt;
&lt;span id=&quot;cb39-3&quot;&gt;&lt;a href=&quot;#cb39-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    ,&lt;span class=&quot;ot&quot;&gt; backward ::&lt;/span&gt; cat b a&lt;/span&gt;
&lt;span id=&quot;cb39-4&quot;&gt;&lt;a href=&quot;#cb39-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… so that we can store morphisms that are not necessarily
functions.&lt;/p&gt;
&lt;p&gt;With that generalized &lt;code&gt;Isomorphism&lt;/code&gt; type in hand we can
now create a sample &lt;code&gt;Isomorphism&lt;/code&gt; in a &lt;code&gt;Kleisli&lt;/code&gt;
&lt;code&gt;Category&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb40&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb40-1&quot;&gt;&lt;a href=&quot;#cb40-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Monoid&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Sum&lt;/span&gt;(..))&lt;/span&gt;
&lt;span id=&quot;cb40-2&quot;&gt;&lt;a href=&quot;#cb40-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Monad.Writer&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Writer&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb40-3&quot;&gt;&lt;a href=&quot;#cb40-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb40-4&quot;&gt;&lt;a href=&quot;#cb40-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;writerIsomorphism ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Kleisli&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Writer&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;))) () ()&lt;/span&gt;
&lt;span id=&quot;cb40-5&quot;&gt;&lt;a href=&quot;#cb40-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;writerIsomorphism &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt;{ forward, backward }&lt;/span&gt;
&lt;span id=&quot;cb40-6&quot;&gt;&lt;a href=&quot;#cb40-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb40-7&quot;&gt;&lt;a href=&quot;#cb40-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    forward ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Kleisli&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Writer&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;)) () ()&lt;/span&gt;
&lt;span id=&quot;cb40-8&quot;&gt;&lt;a href=&quot;#cb40-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    forward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Kleisli&lt;/span&gt; (\_ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; tell (&lt;span class=&quot;dt&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb40-9&quot;&gt;&lt;a href=&quot;#cb40-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb40-10&quot;&gt;&lt;a href=&quot;#cb40-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    backward ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Kleisli&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Writer&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;)) () ()&lt;/span&gt;
&lt;span id=&quot;cb40-11&quot;&gt;&lt;a href=&quot;#cb40-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    backward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Kleisli&lt;/span&gt; (\_ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; tell (&lt;span class=&quot;dt&quot;&gt;Sum&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like before, we still require that:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb41&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb41-1&quot;&gt;&lt;a href=&quot;#cb41-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;forward &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; backward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb41-2&quot;&gt;&lt;a href=&quot;#cb41-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb41-3&quot;&gt;&lt;a href=&quot;#cb41-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;backward &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; forward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… but in this case the &lt;code&gt;(.)&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; in these
two isomorphism laws will be the ones for our &lt;code&gt;Kleisli&lt;/code&gt; type
instead of the ones for functions.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Proof of isomorphism laws (click to expand)
&lt;/summary&gt;
&lt;p&gt;I’ll skip over several steps for this proof to highlight the relevant
parts:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb42&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb42-1&quot;&gt;&lt;a href=&quot;#cb42-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;forward &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; backward&lt;/span&gt;
&lt;span id=&quot;cb42-2&quot;&gt;&lt;a href=&quot;#cb42-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb42-3&quot;&gt;&lt;a href=&quot;#cb42-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Kleisli&lt;/span&gt; (\_ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; tell (&lt;span class=&quot;dt&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Kleisli&lt;/span&gt; (\_ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; tell (&lt;span class=&quot;dt&quot;&gt;Sum&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)))&lt;/span&gt;
&lt;span id=&quot;cb42-4&quot;&gt;&lt;a href=&quot;#cb42-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb42-5&quot;&gt;&lt;a href=&quot;#cb42-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Kleisli&lt;/span&gt; ((\_ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; tell (&lt;span class=&quot;dt&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)) &lt;span class=&quot;op&quot;&gt;&amp;lt;=&amp;lt;&lt;/span&gt; (\_ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; tell (&lt;span class=&quot;dt&quot;&gt;Sum&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))))&lt;/span&gt;
&lt;span id=&quot;cb42-6&quot;&gt;&lt;a href=&quot;#cb42-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb42-7&quot;&gt;&lt;a href=&quot;#cb42-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Kleisli&lt;/span&gt; (\_ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; tell (&lt;span class=&quot;dt&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb42-8&quot;&gt;&lt;a href=&quot;#cb42-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb42-9&quot;&gt;&lt;a href=&quot;#cb42-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Kleisli&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb42-10&quot;&gt;&lt;a href=&quot;#cb42-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb42-11&quot;&gt;&lt;a href=&quot;#cb42-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
The proof of &lt;code&gt;backward . forward = id&lt;/code&gt; is essentially the
same thing, except flipped.
&lt;/details&gt;
&lt;p&gt;Note our &lt;code&gt;Isomorphism&lt;/code&gt; effectively says that the type
&lt;code&gt;()&lt;/code&gt; is isomorphic to the type &lt;code&gt;()&lt;/code&gt; within this
&lt;code&gt;Kleisli (Writer (Sum Integer))&lt;/code&gt; &lt;code&gt;Category&lt;/code&gt;, which
is not a very interesting conclusion. Rather, for this
&lt;code&gt;Isomorphism&lt;/code&gt; the (slightly more) interesting bit is in the
“morphisms” (the &lt;code&gt;forward&lt;/code&gt; and &lt;code&gt;backward&lt;/code&gt;
definitions), which are inverses of one another.&lt;/p&gt;
&lt;p&gt;Here is one last example of a non-trivial &lt;code&gt;Category&lt;/code&gt;
instance with an example isomorphism:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb43&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb43-1&quot;&gt;&lt;a href=&quot;#cb43-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Prelude&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;hiding&lt;/span&gt; ((.), id)&lt;/span&gt;
&lt;span id=&quot;cb43-2&quot;&gt;&lt;a href=&quot;#cb43-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb43-3&quot;&gt;&lt;a href=&quot;#cb43-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Note: This is not how the lens package works, but it&amp;#39;s still a useful example&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb43-4&quot;&gt;&lt;a href=&quot;#cb43-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lens&lt;/span&gt; a b &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lens&lt;/span&gt;{&lt;span class=&quot;ot&quot;&gt; view ::&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b,&lt;span class=&quot;ot&quot;&gt; over ::&lt;/span&gt; (b &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a) }&lt;/span&gt;
&lt;span id=&quot;cb43-5&quot;&gt;&lt;a href=&quot;#cb43-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb43-6&quot;&gt;&lt;a href=&quot;#cb43-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Category&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lens&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb43-7&quot;&gt;&lt;a href=&quot;#cb43-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lens&lt;/span&gt;{ view &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;, over &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb43-8&quot;&gt;&lt;a href=&quot;#cb43-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb43-9&quot;&gt;&lt;a href=&quot;#cb43-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Lens&lt;/span&gt;{ view &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; viewL, over &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; overL } &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lens&lt;/span&gt;{ view &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; viewR, over &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; overR } &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb43-10&quot;&gt;&lt;a href=&quot;#cb43-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Lens&lt;/span&gt;{ view &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; viewL &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; viewR, over &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; overR &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; overL }&lt;/span&gt;
&lt;span id=&quot;cb43-11&quot;&gt;&lt;a href=&quot;#cb43-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb43-12&quot;&gt;&lt;a href=&quot;#cb43-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;lensIsomorphism ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lens&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb43-13&quot;&gt;&lt;a href=&quot;#cb43-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;lensIsomorphism &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt;{ forward, backward }&lt;/span&gt;
&lt;span id=&quot;cb43-14&quot;&gt;&lt;a href=&quot;#cb43-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb43-15&quot;&gt;&lt;a href=&quot;#cb43-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    forward ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lens&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb43-16&quot;&gt;&lt;a href=&quot;#cb43-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    forward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lens&lt;/span&gt;{ view &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;not&lt;/span&gt;, over &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \f &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;not&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb43-17&quot;&gt;&lt;a href=&quot;#cb43-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb43-18&quot;&gt;&lt;a href=&quot;#cb43-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- There is no rule that the two morphisms can&amp;#39;t be the same&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb43-19&quot;&gt;&lt;a href=&quot;#cb43-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    backward ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Lens&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb43-20&quot;&gt;&lt;a href=&quot;#cb43-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    backward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; forward&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, it’s not very interesting to say that &lt;code&gt;Bool&lt;/code&gt; is
isomorphic to &lt;code&gt;Bool&lt;/code&gt;, but it is more to note that the
&lt;code&gt;forward&lt;/code&gt; lens is essentially its own inverse.&lt;/p&gt;
&lt;p&gt;There’s one last category I want to quickly mention, which is …
&lt;code&gt;Isomorphism&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Yes, the &lt;code&gt;Isomorphism&lt;/code&gt; type we introduced is itself an
instance of the &lt;code&gt;Category&lt;/code&gt; class:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb44&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb44-1&quot;&gt;&lt;a href=&quot;#cb44-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Category&lt;/span&gt; cat &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Category&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; cat) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb44-2&quot;&gt;&lt;a href=&quot;#cb44-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; forwardL backwardL &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; forwardR backwardR &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb44-3&quot;&gt;&lt;a href=&quot;#cb44-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; (forwardL &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; forwardR) (backwardR &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; backwardL)&lt;/span&gt;
&lt;span id=&quot;cb44-4&quot;&gt;&lt;a href=&quot;#cb44-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb44-5&quot;&gt;&lt;a href=&quot;#cb44-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might even say that an “isomorphism” is a “morphism” in the above
&lt;code&gt;Category&lt;/code&gt;. An “iso”-“morphism”, if you will (where “iso”
means “same”).&lt;/p&gt;
&lt;p&gt;Furthermore, we can create an example &lt;code&gt;Isomorphism&lt;/code&gt; in
this &lt;code&gt;Category&lt;/code&gt; of &lt;code&gt;Isomorphism&lt;/code&gt;s:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb45&quot;&gt;&lt;pre
class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb45-1&quot;&gt;&lt;a href=&quot;#cb45-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;nestedIsomorphism ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt; (&lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;)) &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb45-2&quot;&gt;&lt;a href=&quot;#cb45-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;nestedIsomorphism &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb45-3&quot;&gt;&lt;a href=&quot;#cb45-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb45-4&quot;&gt;&lt;a href=&quot;#cb45-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        { forward  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt;{ forward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), backward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;subtract&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb45-5&quot;&gt;&lt;a href=&quot;#cb45-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        , backward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Isomorphism&lt;/span&gt;{ forward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;subtract&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, backward &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) }&lt;/span&gt;
&lt;span id=&quot;cb45-6&quot;&gt;&lt;a href=&quot;#cb45-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Okay, perhaps that’s going a bit too far, but I just wanted to end
this post with a cute example of how you can keep chaining these ideas
together in new ways.&lt;/p&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;In my experience, the more you train your ability to reason formally
about isomorphisms the more you broaden your ability to recognize
disparate things as equivalent and draw interesting connections between
them.&lt;/p&gt;
&lt;p&gt;For example, fluency with many common isomorphisms is a useful skill
for API design because often there might be a way to take an API which
is not very ergonomic and refactor it into an equivalent (isomorphic)
API which is more ergonomic to use.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/5833984871945391183/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2022/10/what-does-isomorphic-mean-in-haskell.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/5833984871945391183'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/5833984871945391183'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2022/10/what-does-isomorphic-mean-in-haskell.html' title='What does &quot;isomorphic&quot; mean (in Haskell)?'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-8136329259991133570</id><published>2022-09-07T06:53:00.006-07:00</published><updated>2022-09-07T08:56:33.607-07:00</updated><title type='text'>nix-serve-ng: A faster, more reliable, drop-in replacement for nix-serve</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot;&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;nix-serve-ng: A faster, more reliable, drop-in replacement for nix-serve&quot;&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;An announcement post for a Haskell rewrite of nix-serve named nix-serve-ng&quot;&gt;
  &lt;title&gt;nix-serve-ng&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Our team at &lt;a href=&quot;https://www.arista.com/en/&quot;&gt;Arista Networks&lt;/a&gt;
is happy to announce nix-serve-ng, a backwards-compatible Haskell
  rewrite of &lt;a href=&quot;https://github.com/edolstra/nix-serve&quot;&gt;nix-serve&lt;/a&gt;
  (a service for hosting a &lt;code&gt;/nix/store&lt;/code&gt; as a binary cache). It provides better reliability and performance
than nix-serve (ranging from ≈ 1.5× to 32× faster). We wrote
nix-serve-ng to fix scaling bottlenecks in our cache and we expect other
large-scale deployments might be interested in this project, too.&lt;/p&gt;
&lt;p&gt;This post will focus more on the background behind the development
process and comparisons to other Nix cache implementations. If you don’t
care about any of that then you can get started by following the
instructions in &lt;a
href=&quot;https://github.com/aristanetworks/nix-serve-ng#nix-serve-ng&quot;&gt;the
repository’s &lt;code&gt;README&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;background&quot;&gt;Background&lt;/h4&gt;
&lt;p&gt;Before we began this project there were at least two other open
source rewrites of &lt;code&gt;nix-serve-ng&lt;/code&gt; that we could have adopted
instead of &lt;code&gt;nix-serve&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a
href=&quot;https://github.com/thoughtpolice/eris&quot;&gt;&lt;code&gt;eris&lt;/code&gt;&lt;/a&gt; - A
Perl rewrite of &lt;code&gt;nix-serve&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note: the original &lt;code&gt;nix-serve&lt;/code&gt; is implemented in Perl, and
eris is also implemented in Perl using a different framework.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a
href=&quot;https://github.com/helsinki-systems/harmonia&quot;&gt;&lt;code&gt;harmonia&lt;/code&gt;&lt;/a&gt;
- A Rust rewrite of &lt;code&gt;nix-serve&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main reason we did not go with these two alternatives is because
they are not drop-in replacements for the original
&lt;code&gt;nix-serve&lt;/code&gt;. We could have fixed that, but given &lt;a
href=&quot;https://github.com/edolstra/nix-serve/blob/master/nix-serve.psgi&quot;&gt;how
simple &lt;code&gt;nix-serve&lt;/code&gt; is&lt;/a&gt; I figured that it would be simpler
to just create our own. &lt;code&gt;nix-serve-ng&lt;/code&gt; only took a couple of
days for the initial version and maybe a week of follow-up fixes and
performance tuning.&lt;/p&gt;
&lt;p&gt;We did not evaluate the performance or reliability of
&lt;code&gt;eris&lt;/code&gt; or &lt;code&gt;harmonia&lt;/code&gt; before embarking on our own
&lt;code&gt;nix-serve&lt;/code&gt; replacement. However, after
&lt;code&gt;nix-serve-ng&lt;/code&gt; was done we learned that it was significantly
faster than the alternatives (see the &lt;a
href=&quot;#performance&quot;&gt;Performance&lt;/a&gt; section below). Some of those
performance differences are probably fixable, especially for
&lt;code&gt;harmonia&lt;/code&gt;. That said, we are very happy with the quality of
our solution.&lt;/p&gt;
&lt;h4 id=&quot;backwards-compatibility&quot;&gt;Backwards compatibility&lt;/h4&gt;
&lt;p&gt;One important design goal for this project is to be significantly
backwards compatible with &lt;code&gt;nix-serve&lt;/code&gt;. We went to great
lengths to preserve compatibility, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Naming the built executable &lt;code&gt;nix-serve&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Yes, even though the project name is &lt;code&gt;nix-serve-ng&lt;/code&gt;, the
executable built by the project is named
&lt;code&gt;nix-serve&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Preserving most of the original command-line options, including
legacy options&lt;/p&gt;
&lt;p&gt;… even though some are unused.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In most cases you can literally replace &lt;code&gt;pkgs.nix-serve&lt;/code&gt;
with &lt;code&gt;pkgs.nix-serve-ng&lt;/code&gt; and it will “just work”. You can
even continue to use the existing &lt;code&gt;services.nix-serve&lt;/code&gt; NixOS
options.&lt;/p&gt;
&lt;p&gt;The biggest compatibility regression is that
&lt;code&gt;nix-serve-ng&lt;/code&gt; cannot be built on MacOS. It is extremely
close to supporting MacOS save for this one bug in Haskell’s
&lt;code&gt;hsc2hs&lt;/code&gt; tool: &lt;a
href=&quot;https://github.com/haskell/hsc2hs/issues/26&quot;&gt;&lt;code&gt;haskell/hsc2hs&lt;/code&gt;
- #26&lt;/a&gt;. We left in all of the MacOS shims so that if that bug is ever
fixed then we can get MacOS support easily.&lt;/p&gt;
&lt;p&gt;For more details on the exact differences compared to
&lt;code&gt;nix-serve&lt;/code&gt;, see the &lt;a
href=&quot;https://github.com/aristanetworks/nix-serve-ng#results&quot;&gt;Result /
Backwards-compatibility&lt;/a&gt; section of the &lt;code&gt;README&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;performance&quot;&gt;Performance&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;nix-serve-ng&lt;/code&gt; is faster than all of the alternatives
according to both our formal benchmarks and also informal testing. The
&lt;a
href=&quot;https://github.com/aristanetworks/nix-serve-ng#benchmarks&quot;&gt;“Benchmarks”
section of our &lt;code&gt;README&lt;/code&gt;&lt;/a&gt; has the complete breakdown but
the relevant part is this table:&lt;/p&gt;
&lt;p&gt;Speedups (compared to &lt;code&gt;nix-serve&lt;/code&gt;):&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 28%&quot; /&gt;
&lt;col style=&quot;width: 18%&quot; /&gt;
&lt;col style=&quot;width: 18%&quot; /&gt;
&lt;col style=&quot;width: 18%&quot; /&gt;
&lt;col style=&quot;width: 18%&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th&gt;Benchmark&lt;/th&gt;
&lt;th&gt;&lt;code&gt;nix-serve&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;eris&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;harmonia&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;nix-serve-ng&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;Fetch present NAR info ×10&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;1.33&lt;/td&gt;
&lt;td&gt;1.58&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;Fetch absent NAR info ×1&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;0.06&lt;/td&gt;
&lt;td&gt;1.53&lt;/td&gt;
&lt;td&gt;1.84&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td&gt;Fetch empty NAR ×10&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;0.67&lt;/td&gt;
&lt;td&gt;0.59&lt;/td&gt;
&lt;td&gt;31.80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;Fetch 10 MB NAR ×10&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;0.64&lt;/td&gt;
&lt;td&gt;0.60&lt;/td&gt;
&lt;td&gt;3.35&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;… which I can summarize like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nix-serve-ng&lt;/code&gt; is faster than all of the alternatives
across all use cases&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eris&lt;/code&gt; is slower than the original &lt;code&gt;nix-serve&lt;/code&gt;
across all use cases&lt;/li&gt;
&lt;li&gt;&lt;code&gt;harmonia&lt;/code&gt; is faster than the original
&lt;code&gt;nix-serve&lt;/code&gt; for NAR info lookups, but slower for fetching
NARs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These performance results were surprising for a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I was not expecting &lt;code&gt;eris&lt;/code&gt; to be slower than the
original &lt;code&gt;nix-serve&lt;/code&gt; implementation&lt;/p&gt;
&lt;p&gt;… especially not NAR info lookups to be ≈ 20× slower. This is
significant because NAR info lookups typically dominate a Nix cache’s
performance. In my (informal) experience, the majority of a Nix cache’s
time is spent addressing failed cache lookups.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I was not expecting &lt;code&gt;harmonia&lt;/code&gt; (the Rust rewrite) to
be slower than the original &lt;code&gt;nix-serve&lt;/code&gt; for fetching NARs&lt;/p&gt;
&lt;p&gt;This seems like something that should be fixable.
&lt;code&gt;harmonia&lt;/code&gt; will probably eventually match our performance
because Rust has a high performance ceiling.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I was not expecting a ≈ 30x speedup for &lt;code&gt;nix-serve-ng&lt;/code&gt;
fetching small NARs&lt;/p&gt;
&lt;p&gt;I had to triple-check that neither &lt;code&gt;nix-serve-ng&lt;/code&gt; nor the
benchmark were broken when I saw this speedup.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I investigated these performance differences to help inform other
implementations what to be mindful of.&lt;/p&gt;
&lt;h4 id=&quot;performance-insights&quot;&gt;Performance insights&lt;/h4&gt;
&lt;p&gt;We didn’t get these kinds of speed-ups by being completely oblivious
to performance. Here are the things that we paid special attention to to
keep things efficient, in order of lowest-hanging to highest-hanging
fruit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Don’t read the secret key file on every NAR fetch&lt;/p&gt;
&lt;p&gt;This is a silly thing that &lt;a
href=&quot;https://github.com/edolstra/nix-serve/blob/8501f2e44e7963eb1fb20146a055cfe7242a2ac4/nix-serve.psgi#L38-L40&quot;&gt;the
original &lt;code&gt;nix-serve&lt;/code&gt; does&lt;/a&gt; that is the easiest thing to
fix.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eris&lt;/code&gt; and &lt;code&gt;harmonia&lt;/code&gt; also fix this, so this
optimization is not unique to our rewrite.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We bind directly to the Nix C++ API for fetching NARs&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nix-serve&lt;/code&gt;, &lt;code&gt;eris&lt;/code&gt;, and &lt;code&gt;harmonia&lt;/code&gt;
all shell out to a subprocess to fetch NARs, by invoking either
&lt;code&gt;nix dump-path&lt;/code&gt; or &lt;code&gt;nix-store --dump&lt;/code&gt; to do the
heavy lifting. In contrast, &lt;code&gt;nix-serve-ng&lt;/code&gt; binds to the Nix
C++ API for this purpose.&lt;/p&gt;
&lt;p&gt;This would definitely explain some of the performance difference when
fetching NARs. Creating a subprocess has a fixed overhead regardless of
the size of the NAR, which explains why we see the largest performance
difference when fetching tiny NARs since the overhead of creating a
subprocess would dominate the response time.&lt;/p&gt;
&lt;p&gt;This may also affect throughput for serving large NAR files, too, by
adding unnecessary memory copies/buffering as part of streaming the
subprocess output.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We minimize memory copies when fetching NARs&lt;/p&gt;
&lt;p&gt;We go to great lengths to minimize the number of intermediate buffers
and copies when streaming the contents of a NAR to a client. To do this,
we exploit the fact that Haskell’s foreign function interface works in
both directions: Haskell code can call C++ code but also C++ code can
call Haskell code. This means that we can &lt;a
href=&quot;https://github.com/aristanetworks/nix-serve-ng/blob/ba2028f9d7fd2f93a04e1ca9677811f461fe6676/cbits/nix.cpp#L173-L185&quot;&gt;create
a Nix C++ streaming sink from a Haskell callback function&lt;/a&gt; and this
eliminates the need for intermediate buffers.&lt;/p&gt;
&lt;p&gt;This likely also improves the throughput for serving NAR files. Only
&lt;code&gt;nix-serve-ng&lt;/code&gt; performs this optimization (since
&lt;code&gt;nix-serve-ng&lt;/code&gt; is the only one that uses the C++ API for
streaming NAR contents).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hand-write the API routing logic&lt;/p&gt;
&lt;p&gt;We hand-write all of the API routing logic to prioritize and optimize
the hot path (fetching NAR info).&lt;/p&gt;
&lt;p&gt;For example, a really simple thing that the original
&lt;code&gt;nix-serve&lt;/code&gt; does inefficiently is to check if the path
matches &lt;code&gt;/nix-cache-info&lt;/code&gt; first, even though that is an
extremely infrequently used path. In our API routing logic we move that
check straight to the very end.&lt;/p&gt;
&lt;p&gt;These optimizations likely improve the performance of NAR info
requests. As far as I can tell, only &lt;code&gt;nix-serve-ng&lt;/code&gt; performs
these optimizations.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have not benchmarked the performance impact of each of these
changes in isolation, though. These observations are purely based on my
intuition.&lt;/p&gt;
&lt;h4 id=&quot;features&quot;&gt;Features&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;nix-serve-ng&lt;/code&gt; is not all upsides. In particular,
&lt;code&gt;nix-serve-ng&lt;/code&gt; is missing features that some of the other
rewrites provide, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Greater configurability&lt;/li&gt;
&lt;li&gt;Improved authentication support&lt;/li&gt;
&lt;li&gt;Monitoring/diagnostics/status APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our focus was entirely on scalability, so the primary reason to use
&lt;code&gt;nix-serve-ng&lt;/code&gt; is if you prioritize performance and
uptime.&lt;/p&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;We’ve been using &lt;code&gt;nix-serve-ng&lt;/code&gt; long enough internally
that we feel confident endorsing its use outside our company. We run a
particularly large Nix deployment internally (which is why we needed
this in the first place), so we have stress tested
&lt;code&gt;nix-serve-ng&lt;/code&gt; considerably under heavy and realistic usage
patterns.&lt;/p&gt;
&lt;p&gt;You can get started by following these &lt;a
href=&quot;https://github.com/aristanetworks/nix-serve-ng/blob/main/README.md#quick-start&quot;&gt;these
instructions&lt;/a&gt; and let us know if you run into any issues or
difficulties.&lt;/p&gt;
&lt;p&gt;Also, I want to thank &lt;a href=&quot;https://www.arista.com/en/&quot;&gt;Arista
Networks&lt;/a&gt; for graciously sponsoring our team to work on and open
source this project&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/8136329259991133570/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2022/09/nix-serve-ng-faster-more-reliable-drop.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/8136329259991133570'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/8136329259991133570'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2022/09/nix-serve-ng-faster-more-reliable-drop.html' title='nix-serve-ng: A faster, more reliable, drop-in replacement for nix-serve'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-906620765110929969</id><published>2022-08-29T06:16:00.008-07:00</published><updated>2023-04-03T11:48:06.699-07:00</updated><title type='text'>Stop calling everything &quot;Nix&quot;</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot;&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;Stop calling everything &amp;quot;Nix&amp;quot;&quot;&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;Explanation of the Nix ecosystem&#39;s abstraction layers&quot;&gt;
  &lt;title&gt;Stop calling everything &quot;Nix&quot;&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;One of my pet peeves is when people abuse the term “Nix” without
qualification when trying to explain the various components of the Nix
ecosystem.&lt;/p&gt;
&lt;p&gt;As a concrete example, a person might say:&lt;/p&gt;
&lt;p&gt;“I hate Nix’s syntax”&lt;/p&gt;
&lt;p&gt;… and when you dig into this criticism you realize that they’re
actually complaining about the Nixpkgs API, which is not the same thing
as the syntax of the Nix expression language.&lt;/p&gt;
&lt;p&gt;So one of the goals of this post is to introduce some unambiguous
terminology that people can use to refer to the various abstraction
layers of the Nix ecosystem in order to avoid confusion. I’ll introduce
each abstraction layer from the lowest level abstractions to the highest
level abstractions.&lt;/p&gt;
&lt;p&gt;Another reason I explain “Nix” in terms of these abstraction layers
is because this helps people consult the correct manual. The Nix
ecosystem provides three manuals that you will commonly need to refer to
in order to become more proficient:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;https://nixos.org/manual/nix/stable/&quot;&gt;Nix
manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://nixos.org/manual/nixpkgs/stable/&quot;&gt;Nixpkgs
manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://nixos.org/manual/nixos/stable/&quot;&gt;NixOS
manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… and I hope by the end of this post it will be clearer which manual
interests you for any given question.&lt;/p&gt;
&lt;p&gt;Edit: &lt;a
href=&quot;https://twitter.com/domenkozar/status/1564241948319404032&quot;&gt;Domen
Kožar pointed out&lt;/a&gt; that there is an ongoing effort to standardize
terminology here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a
href=&quot;https://github.com/NixOS/nix.dev/issues/275&quot;&gt;&lt;code&gt;NixOS/nix.dev&lt;/code&gt;
#275 - establish nomenclature&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ll update the post to match the agreed-upon terminology when that
is complete.&lt;/p&gt;
&lt;h4 id=&quot;layer-0-the-nix-store&quot;&gt;Layer #0: The Nix store&lt;/h4&gt;
&lt;p&gt;I use the term “Nix store” to mean essentially everything you can
manage with the &lt;code&gt;nix-store&lt;/code&gt; command-line tool.&lt;/p&gt;
&lt;p&gt;That is the simplest definition, but to expand upon that, I mean the
following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Derivations: &lt;code&gt;/nix/store/*.drv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Build products: &lt;code&gt;/nix/store/*&lt;/code&gt; without a
&lt;code&gt;.drv&lt;/code&gt; extension&lt;/li&gt;
&lt;li&gt;Log files: &lt;code&gt;/nix/var/log/nix/drvs/**&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Garbage collection roots: &lt;code&gt;/nix/var/nix/gcroots/**&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… and the following operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Realizing a derivation&lt;/p&gt;
&lt;p&gt;i.e. converting a &lt;code&gt;.drv&lt;/code&gt; file to the corresponding build
products using &lt;code&gt;nix-store --realise&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adding static files to the &lt;code&gt;/nix/store&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;i.e. &lt;code&gt;nix-store --add&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating GC roots for build products&lt;/p&gt;
&lt;p&gt;i.e. the &lt;code&gt;--add-root&lt;/code&gt; option to
&lt;code&gt;nix-store&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Garbage collecting derivations not protected by a GC root&lt;/p&gt;
&lt;p&gt;i.e. &lt;code&gt;nix-store --gc&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are other things the Nix store supports (like profile
management), but these are the most important operations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CAREFULLY NOTE:&lt;/strong&gt; the “Nix store” is independent of
the “Nix language” (which we’ll define below). In other words, you could
replace the front-end Nix programming language with another language
(e.g. Guile scheme, as Guix does). This is because the Nix derivation
format (the &lt;code&gt;.drv&lt;/code&gt; files) and the &lt;code&gt;nix-store&lt;/code&gt;
command-line interface are both agnostic of the Nix expression language.
I have a talk which delves a bit more into this subject:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=GMQPzv3Sx58&quot;&gt;Nix: Under the
hood&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;layer-1-the-nix-language&quot;&gt;Layer #1: The Nix language&lt;/h4&gt;
&lt;p&gt;I use the term “Nix language” to encompass three things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The programming language: source code we typically store in
&lt;code&gt;.nix&lt;/code&gt; files&lt;/li&gt;
&lt;li&gt;Instantiation: the interpretation of Nix code to generate
&lt;code&gt;.drv&lt;/code&gt; files&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nixos.wiki/wiki/Flakes&quot;&gt;Flakes&lt;/a&gt;: pure evaluation
and instantiation caching&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To connect this with the previous section, the typical pipeline for
converting Nix source code to a build product is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Nix source code (*.nix)            │ Nix language
      ↓ Instantiation              ├─────────────
Nix derivation (/nix/store/*.drv)  │
      ↓ Realization                │ Nix store
Nix build product (/nix/store/*)   │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In isolation, the Nix language is “just” a purely functional
programming language with simple language constructs. For example, here
is a sample Nix REPL session:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;nix-repl&amp;gt; 2 + 2
4

nix-repl&amp;gt; x = &amp;quot;world&amp;quot;   

nix-repl&amp;gt; &amp;quot;Hello, &amp;quot; + x  
&amp;quot;Hello, world&amp;quot;

nix-repl&amp;gt; r = { a = 1; b = true; }

nix-repl&amp;gt; if r.b then r.a else 0
1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, as we go up the abstraction ladder the idiomatic Nix code
we’ll encounter will begin to stray from that simple functional
core.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Some people will disagree with my choice to
include flakes at this abstraction layer since flakes are sometimes
marketed as a dependency manager (similar to &lt;code&gt;niv&lt;/code&gt;). I don’t
view them in this way and I treat flakes as primarily as mechanism for
purifying evaluation and caching instantiation, as outlined in this
post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.tweag.io/blog/2020-06-25-eval-cache/&quot;&gt;Nix
Flakes, Part 2: Evaluation Caching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… and if you view flakes in that capacity then they are a feature of
the Nix language since evaluation/instantiation are the primary purpose
of the programming language.&lt;/p&gt;
&lt;h4 id=&quot;layer-2-the-nix-build-tool&quot;&gt;Layer #2: The Nix build tool&lt;/h4&gt;
&lt;p&gt;This layer encompasses the command-line interface to both the “Nix
store” and the “Nix language”.&lt;/p&gt;
&lt;p&gt;This includes (but is not limited to):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nix-store&lt;/code&gt; (the command, not the underlying store)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nix-instantiate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nix-build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nix-shell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nix&lt;/code&gt; subcommands, including:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nix build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nix run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nix develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nix log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nix flake&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I make this distinction because the command-line interface enables
some additional niceties that are not inherent to the underlying layers.
For example, the &lt;code&gt;nix build&lt;/code&gt; command has some flake
integration so that you can say
&lt;code&gt;nix build someFlake#somePackage&lt;/code&gt; and this command-line API
nicety is not necessarily inherent to flakes (in my view).&lt;/p&gt;
&lt;p&gt;Also, many of these commands operate at both Layer 0 and Layer 1,
which can blur the distinction between the two. For example the
&lt;code&gt;nix-build&lt;/code&gt; command can accept a layer 1 Nix program (i.e. a
&lt;code&gt;.nix&lt;/code&gt; file) or a layer 0 derivation (i.e. a
&lt;code&gt;.drv&lt;/code&gt; file).&lt;/p&gt;
&lt;p&gt;Another thing that blurs the distinction is that the Nix manual
covers all three of the layers introduced so far, ranging from the Nix
store to the command-line interface. However, if you want to better
understand these three layers then that is correct place to begin:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nixos.org/manual/nix/stable/introduction.html&quot;&gt;Nix
manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;layer-3-nixpkgs&quot;&gt;Layer #3: Nixpkgs&lt;/h4&gt;
&lt;p&gt;Nixpkgs is a software distribution (a.k.a. “distro”) for Nix.
Specifically, all of the packaging logic for Nixpkgs is hosted on GitHub
here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/NixOS/nixpkgs&quot;&gt;GitHub -
&lt;code&gt;NixOS/nixpkgs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This repository contains a large number of Nix expressions for
building packages across several platforms. If the “Nix language” is a
programming language then “Nixpkgs” is a gigantic “library” authored
within that language. There are other Nix “libraries” outside of Nixpkgs
but Nixpkgs is the one you will interact with the most.&lt;/p&gt;
&lt;p&gt;The Nixpkgs repository establishes several widespread idioms and
conventions, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The standard environment (a.k.a. &lt;code&gt;stdenv&lt;/code&gt;) for authoring
a package
&lt;ul&gt;
&lt;li&gt;There are also language-specific standard-environments, too&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A domain-specific language for overriding individual packages or
sets of packages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When people complain about “Nix’s syntax”, most of the time they’re
actually complaining about Nixpkgs and more specifically complaining
about the Nixpkgs system for overriding packages. However, I can see how
people might mistake the two.&lt;/p&gt;
&lt;p&gt;The reason for the confusion is that the Nixpkgs support for
overrides is essentially an embedded domain-specific language, meaning
that you still express everything in the Nix language (layer 1), but the
ways in which you express things is fundamentally different than if you
were simply using low-level Nix language features.&lt;/p&gt;
&lt;p&gt;As a contrived example, this “layer 1” Nix code:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;let
  x = 1;

  y = x + 2;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… would roughly correspond to the following “layer 3” Nixpkgs
overlay:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;self: super: {
  x = 1;

  y = self.x + 2;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason why Nixpkgs doesn’t do the simpler “layer 1” thing is
because Nixpkgs is designed to support “late binding” of expressions,
meaning that everything can be overridden, even dependencies deep within
the dependency tree. Moreover, this overriding is done in such a way
that everything “downstream” of the overrride (i.e. all reverse
dependencies) pick up the change correctly.&lt;/p&gt;
&lt;p&gt;As a more realistic example, the following program:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;let
  pkgs = import &amp;lt;nixpkgs&amp;gt; { };

  fast-tags =
    pkgs.haskell.lib.justStaticExecutables pkgs.haskellPackages.fast-tags;

  fast-tags-no-tests =
    pkgs.haskell.lib.dontCheck fast-tags;

in
  fast-tags-no-tests&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… is simpler, but is not an idiomatic use of Nixpkgs because it is
not using the overlay system and therefore does not support late
binding. The more idiomatic analog would be:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;let
  overlay = self: super: {
    fast-tags =
      self.haskell.lib.justStaticExecutables self.haskellPackages.fast-tags;

    fast-tags-no-tests =
      self.haskell.lib.dontCheck self.fast-tags;
  };

  pkgs = import &amp;lt;nixpkgs&amp;gt; { overlays = [ overlay ]; };

in
  pkgs.fast-tags-no-tests&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can learn more about this abstraction layer by consulting the
Nixpkgs manual:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nixos.org/manual/nixpkgs/stable/&quot;&gt;Nixpkgs
manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;layer-4-nixos&quot;&gt;Layer #4: NixOS&lt;/h4&gt;
&lt;p&gt;NixOS is an operating system that is (literally) built on
Nixpkgs. Specifically, there is a &lt;code&gt;./nixos/&lt;/code&gt; subdirectory of
the Nixpkgs repository for all of the NixOS-related logic.&lt;/p&gt;
&lt;p&gt;NixOS is based on the NixOS module system, which is yet another
embedded domain-specific language. In other words, you configure NixOS
with Nix code, but the idioms of that Nix code depart even more wildly
from straightforward “layer 1” Nix code.&lt;/p&gt;
&lt;p&gt;NixOS modules were designed to look more like Terraform modules than
Nix code, but they are still technically Nix code. For example, this is
what the NixOS module for the &lt;code&gt;lorri&lt;/code&gt; service looks like at
the time of this writing:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;{ config, lib, pkgs, ... }:

let
  cfg = config.services.lorri;
  socketPath = &amp;quot;lorri/daemon.socket&amp;quot;;
in {
  options = {
    services.lorri = {
      enable = lib.mkOption {
        default = false;
        type = lib.types.bool;
        description = lib.mdDoc &amp;#39;&amp;#39;
          Enables the daemon for `lorri`, a nix-shell replacement for project
          development. The socket-activated daemon starts on the first request
          issued by the `lorri` command.
        &amp;#39;&amp;#39;;
      };
      package = lib.mkOption {
        default = pkgs.lorri;
        type = lib.types.package;
        description = lib.mdDoc &amp;#39;&amp;#39;
          The lorri package to use.
        &amp;#39;&amp;#39;;
        defaultText = lib.literalExpression &amp;quot;pkgs.lorri&amp;quot;;
      };
    };
  };

  config = lib.mkIf cfg.enable {
    systemd.user.sockets.lorri = {
      description = &amp;quot;Socket for Lorri Daemon&amp;quot;;
      wantedBy = [ &amp;quot;sockets.target&amp;quot; ];
      socketConfig = {
        ListenStream = &amp;quot;%t/${socketPath}&amp;quot;;
        RuntimeDirectory = &amp;quot;lorri&amp;quot;;
      };
    };

    systemd.user.services.lorri = {
      description = &amp;quot;Lorri Daemon&amp;quot;;
      requires = [ &amp;quot;lorri.socket&amp;quot; ];
      after = [ &amp;quot;lorri.socket&amp;quot; ];
      path = with pkgs; [ config.nix.package git gnutar gzip ];
      serviceConfig = {
        ExecStart = &amp;quot;${cfg.package}/bin/lorri daemon&amp;quot;;
        PrivateTmp = true;
        ProtectSystem = &amp;quot;strict&amp;quot;;
        ProtectHome = &amp;quot;read-only&amp;quot;;
        Restart = &amp;quot;on-failure&amp;quot;;
      };
    };

    environment.systemPackages = [ cfg.package ];
  };
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might wonder how NixOS relates to the underlying layers. For
example, if Nix is a build system, then how do you “build” NixOS? I have
another post which elaborates on that subject here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a
href=&quot;https://www.haskellforall.com/2018/08/nixos-in-production.html&quot;&gt;NixOS
in production&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, you can learn more about this abstraction layer by consulting
the NixOS manual:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nixos.org/manual/nixos/stable/&quot;&gt;NixOS
manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;nix-ecosystem&quot;&gt;Nix ecosystem&lt;/h4&gt;
&lt;p&gt;I use the term “Nix ecosystem” to describe all of the preceding
layers and other stuff not mentioned so far (like &lt;code&gt;hydra&lt;/code&gt;,
the continuous integration service).&lt;/p&gt;
&lt;p&gt;This is not a layer of its own, but I mention this because I prefer
to use “Nix ecosystem” instead of “Nix” to avoid ambiguity, since the
latter can easily be mistaken for an individual abstraction layer
(especially the Nix language or the Nix build tool).&lt;/p&gt;
&lt;p&gt;However, when I do hear people say “Nix”, then I generally understand
it to mean the “Nix ecosystem” unless they clarify otherwise.&lt;/p&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;Hopefully this passive aggressive post helps people express
themselves a little more precisely when discussing the Nix
ecosystem.&lt;/p&gt;
&lt;p&gt;If you enjoy this post, you will probably also like this other post
of mine:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a
href=&quot;https://www.haskellforall.com/2022/03/the-hard-part-of-type-checking-nix.html&quot;&gt;The
hard part of type-checking Nix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… since that touches on the Nixpkgs and NixOS embedded
domain-specific languages and how they confound the user experience.&lt;/p&gt;
&lt;p&gt;I’ll conclude this post with the following obligatory joke:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’d just like to interject for a moment. What you’re refering to as
Nix, is in fact, NixOS, or as I’ve recently taken to calling it, Nix
plus OS. Nix is not an operating system unto itself, but rather another
free component of a fully functioning ecosystem made useful by the Nix
store, Nix language, and Nix build tool comprising a full OS as defined
by POSIX.&lt;/p&gt;
&lt;p&gt;Many Guix users run a modified version of the Nix ecosystem every
day, without realizing it. Through a peculiar turn of events, the
operating system based on Nix which is widely used today is often called
Nix, and many of its users are not aware that it is basically the Nix
ecosystem, developed by the NixOS foundation.&lt;/p&gt;
&lt;p&gt;There really is a Nix, and these people are using it, but it is just
a part of the system they use. Nix is the expression language: the
program in the system that specifies the services and programs that you
want to build and run. The language is an essential part of the
operating system, but useless by itself; it can only function in the
context of a complete operating system. Nix is normally used in
combination with an operating system: the whole system is basically an
operating system with Nix added, or NixOS. All the so-called Nix
distributions are really distributions of NixOS!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/body&gt;
&lt;/html&gt;
</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/906620765110929969/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2022/08/stop-calling-everything-nix.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/906620765110929969'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/906620765110929969'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2022/08/stop-calling-everything-nix.html' title='Stop calling everything &quot;Nix&quot;'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-2613892908644813447</id><published>2022-08-28T08:23:00.007-07:00</published><updated>2022-08-28T08:56:26.253-07:00</updated><title type='text'>Incrementally package a Haskell program using Nix</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;
  &lt;meta name=&quot;twitter:creator&quot; content=&quot;@GabriellaG439&quot;&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;Incrementally package a Haskell program using Nix&quot;&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;A tour of progressively more robust ways to package a Haskell file using Nix&quot;&gt;
  &lt;title&gt;incremental-nix&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC &gt; ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;This post walks through how to take a standalone Haskell file and
progressively package the file using Nix. In other words, we will tour a
spectrum of packaging options ranging from simple to fancy.&lt;/p&gt;
&lt;p&gt;The running example will be the following standalone single-file
Haskell program:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a
href=&quot;https://github.com/Gabriella439/spire/blob/5a35feb5629df27d9c973d36d9bf940dd85445eb/Spire.hs&quot;&gt;GitHub
- Gabriella439/spire - Spire.hs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I won’t go into detail about what that program does, although you can
study the program if you are curious. Essentially, I’m planning to
deliver a talk based on that program at &lt;a
href=&quot;https://munihac.de/2022.html&quot;&gt;this year’s MuniHac&lt;/a&gt; and I wanted
to package it up so that other people could collaborate on the program
with me during the hackathon.&lt;/p&gt;
&lt;p&gt;When I began writing this post, there was no packaging logic for this
program; it’s a standalone Haskell file. However, this file has several
dependencies outside of Haskell’s standard library, so up until now I
needed some way to obtain those dependencies for development.&lt;/p&gt;
&lt;h4 id=&quot;stage-0-ghc.withpackages&quot;&gt;Stage 0:
&lt;code&gt;ghc.withPackages&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The most low-tech way that you can hack on a Haskell program using
Nix is to use &lt;code&gt;nix-shell&lt;/code&gt; to obtain a transient development
environment (this is what I had done up until now).&lt;/p&gt;
&lt;p&gt;Specifically, you can do something like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix-shell &lt;span class=&quot;at&quot;&gt;--packages&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;ghc.withPackages (pkgs: [ pkgs.mtl pkgs.MemoTrie pkgs.containers pkgs.pretty-show ])&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… where &lt;code&gt;pkgs.mtl&lt;/code&gt; and &lt;code&gt;pkgs.MemoTrie&lt;/code&gt; indicate
that I want to include the &lt;code&gt;mtl&lt;/code&gt; and &lt;code&gt;MemoTrie&lt;/code&gt;
packages in my Haskell development environment.&lt;/p&gt;
&lt;p&gt;Inside of that development environment I can build and run the file
using &lt;code&gt;ghc&lt;/code&gt;. For example, I can use &lt;code&gt;ghc -O&lt;/code&gt; to
build an executable to run:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;[nix-shell]$&lt;/span&gt; ghc &lt;span class=&quot;at&quot;&gt;-O&lt;/span&gt; Spire.hs&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;[nix-shell]$&lt;/span&gt; ./Spire&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;…&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… or if I don’t care about optimizations I can interpret the file
using &lt;code&gt;runghc&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; runghc Spire.hs&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;…&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;stage-1-ide-support&quot;&gt;Stage 1: IDE support&lt;/h4&gt;
&lt;p&gt;Once I’m inside a Nix shell I can begin to take advantage of
integrated development environment (IDE) support.&lt;/p&gt;
&lt;p&gt;The two most common tools Haskell developers use for rapid feedback
are &lt;code&gt;ghcid&lt;/code&gt; and &lt;code&gt;haskell-language-server&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ghcid&lt;/code&gt; provides a command-line interface for fast
type-checking feedback but doesn’t provide other IDE-like
features&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;haskell-language-server&lt;/code&gt; is more of a proper IDE that
you use in conjunction with some editor&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I can obtain either tool by exiting from the shell and creating a new
shell that includes the desired tool.&lt;/p&gt;
&lt;p&gt;For example, if I want to use &lt;code&gt;ghcid&lt;/code&gt; then I recreate the
&lt;code&gt;nix-shell&lt;/code&gt; using the following command:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix-shell &lt;span class=&quot;at&quot;&gt;--packages&lt;/span&gt; ghcid &lt;span class=&quot;st&quot;&gt;&amp;#39;ghc.withPackages (pkgs: [ pkgs.mtl pkgs.MemoTrie pkgs.containers pkgs.pretty-show ])&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and then I can tell &lt;code&gt;ghcid&lt;/code&gt; to continuously type-check
my file using:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;[nix-shell]$&lt;/span&gt; ghcid Spire.hs&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;…&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I want to use &lt;code&gt;haskell-language-server&lt;/code&gt;, then I
recreate the &lt;code&gt;nix-shell&lt;/code&gt; using this command:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix-shell &lt;span class=&quot;at&quot;&gt;--packages&lt;/span&gt; haskell-language-server &lt;span class=&quot;st&quot;&gt;&amp;#39;ghc.withPackages (pkgs: [ pkgs.mtl pkgs.MemoTrie pkgs.containers pkgs.pretty-show ])&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and then I can explore the code in any editor that supports the
language server protocol.&lt;/p&gt;
&lt;p&gt;Note that if you use VSCode as your editor then you may need to
install some additional plugins:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a
href=&quot;https://marketplace.visualstudio.com/items?itemName=justusadam.language-haskell&quot;&gt;Haskell
Syntax Highlighting&lt;/a&gt; plugin&lt;/li&gt;
&lt;li&gt;&lt;a
href=&quot;https://marketplace.visualstudio.com/items?itemName=haskell.haskell&quot;&gt;Haskell&lt;/a&gt;
plugin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… and the next section will show how to install VSCode and those
plugins using Nix.&lt;/p&gt;
&lt;p&gt;However, once you do install those plugins then you can open the file
in VSCode from within the &lt;code&gt;nix-shell&lt;/code&gt; using:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;[nix-shell]$&lt;/span&gt; code Spire.hs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and once you &lt;a
href=&quot;https://code.visualstudio.com/docs/editor/workspace-trust&quot;&gt;trust
the file&lt;/a&gt; the IDE features will kick in.&lt;/p&gt;
&lt;h4 id=&quot;stage-2-global-development-environment&quot;&gt;Stage 2: Global
development environment&lt;/h4&gt;
&lt;p&gt;Sometimes I like to globally install development tools that are
commonly shared between projects. For example, if I use
&lt;code&gt;ghcid&lt;/code&gt; or &lt;code&gt;haskell-language-server&lt;/code&gt; across all my
projects then I don’t want to have to explicitly enumerate that tool in
each project’s Nix shell.&lt;/p&gt;
&lt;p&gt;Moreover, my tool preferences might not be shared by other
developers. If I share my &lt;code&gt;nix-shell&lt;/code&gt; with other developers
for a project then I probably don’t want to add editors/IDEs or other
command-line tools to that environment because then they have to
download those tools regardless of whether they plan to use them.&lt;/p&gt;
&lt;p&gt;However, I don’t want to globally install development tools like
this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix-env &lt;span class=&quot;at&quot;&gt;--install&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--file&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;lt;nixpkgs&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--attr&lt;/span&gt; ghcid&lt;/span&gt;
&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix-env &lt;span class=&quot;at&quot;&gt;--install&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--file&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;lt;nixpkgs&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--attr&lt;/span&gt; haskell-language-server&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Part of the reason I use Nix is to avoid imperatively managing my
development environment. Fortunately, though, &lt;code&gt;nix-env&lt;/code&gt;
supports a more declarative way of managing dependencies.&lt;/p&gt;
&lt;p&gt;What you can do instead is save a file like this to
&lt;code&gt;~/default.nix&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;let
  # For VSCode
  config = { allowUnfree = true; };

  overlay = pkgsNew: pkgsOld: {
    # Here&amp;#39;s an example of how to use Nix to install VSCode with plugins managed
    # by Nix, too
    vscode-with-extensions = pkgsOld.vscode-with-extensions.override {
      vscodeExtensions = [
        pkgsNew.vscode-extensions.haskell.haskell
        pkgsNew.vscode-extensions.justusadam.language-haskell
      ]; 
    };
  };

  pkgs = import &amp;lt;nixpkgs&amp;gt; { inherit config; overlays = [ overlay ]; };

in      
  { inherit (pkgs)
      # I included some sample useful development tools for Haskell.  Feel free
      # to customize.
      cabal-install
      ghcid
      haskell-language-server
      stylish-haskell
      vscode-with-extensions 
    ; 
  }     &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… and once you create that file you have two options.&lt;/p&gt;
&lt;p&gt;The first option is that you can set your global development environment to match
the file by running:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix-env &lt;span class=&quot;at&quot;&gt;--remove-all&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--install&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;--file&lt;/span&gt; ~/default.nix&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: At the time of this writing you may also need to add
&lt;code&gt;--system x86_64-darwin&lt;/code&gt; if you are trying out these examples
on an M1 Macbook. For more details, see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a
href=&quot;https://evanrelf.com/building-x86-64-packages-with-nix-on-apple-silicon&quot;&gt;Building
x86-64 Packages With Nix on Apple Silicon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Carefully note the &lt;code&gt;--remove-all&lt;/code&gt;, which resets your
development environment to match the file, so that nothing from your old
development environment is accidentally carried over into your new
development environment. This makes our use of the &lt;code&gt;nix-env&lt;/code&gt;
command truly declarative.&lt;/p&gt;
&lt;p&gt;The second option is that you can change the file to create a valid
shell, like this:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;let
  config = { allowUnfree = true; };

  overlay = pkgsNew: pkgsOld: {
    vscode-with-extensions = pkgsOld.vscode-with-extensions.override {
      vscodeExtensions = [
        pkgsNew.vscode-extensions.haskell.haskell
        pkgsNew.vscode-extensions.justusadam.language-haskell
      ];
    };
  };

  pkgs = import &amp;lt;nixpkgs&amp;gt; { inherit config; overlays = [ overlay ]; };

in
  pkgs.mkShell {
    packages = [
      pkgs.ghcid
      pkgs.haskell-language-server
      pkgs.stylish-haskell
      pkgs.vscode-with-extensions
      pkgs.cabal-install
    ];
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… and then run:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix-shell ~/default.nix&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, even better, you can rename the file to &lt;code&gt;~/shell.nix&lt;/code&gt;
and then if you’re already in your home directory (e.g. you just logged
into your system), then you can run:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix-shell&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… which will select &lt;code&gt;~/shell.nix&lt;/code&gt; by default. This lets
you get a completely transient development environment so that you never
have to install anything development tools globally.&lt;/p&gt;
&lt;p&gt;These &lt;code&gt;nix-shell&lt;/code&gt; commands stack, so you can first run
&lt;code&gt;nix-shell&lt;/code&gt; to obtain your global development environment and
then use &lt;code&gt;nix-shell&lt;/code&gt; a second time to obtain project-specific
dependencies.&lt;/p&gt;
&lt;p&gt;My personal preference is to use the declarative &lt;code&gt;nix-env&lt;/code&gt;
trick for installing global development tools. In my opinion it’s just
as elegant as &lt;code&gt;nix-shell&lt;/code&gt; and slightly less hassle.&lt;/p&gt;
&lt;h4 id=&quot;stage-3-cabal&quot;&gt;Stage 3: Cabal&lt;/h4&gt;
&lt;p&gt;Anyway, enough about global development tools. Back to our Haskell
project!&lt;/p&gt;
&lt;p&gt;So &lt;code&gt;ghc.withPackages&lt;/code&gt; is a great way to just start hacking
on a standalone Haskell program when you don’t want to worry about
packaging up the program. However, at some point you might want to share
the program with the others or do a proper job of packaging if you’re
trying to &lt;a
href=&quot;https://en.wiktionary.org/wiki/productionize&quot;&gt;productionize&lt;/a&gt;
the code.&lt;/p&gt;
&lt;p&gt;That brings us to the next step, which is packaging our Haskell
program with a Cabal file (a Haskell package manifest). We’ll need the
&lt;code&gt;cabal-install&lt;/code&gt; command-line tool before we proceed further,
so you’ll want to add that tool to your global development environment
(see the previous section).&lt;/p&gt;
&lt;p&gt;To create our &lt;code&gt;.cabal&lt;/code&gt; file we can run the following
command from the top-level directory of our Haskell project:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; cabal init &lt;span class=&quot;at&quot;&gt;--interactive&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;#cb14-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;Should&lt;/span&gt; I generate a simple project with sensible defaults&lt;span class=&quot;pp&quot;&gt;?&lt;/span&gt; [default: y] n&lt;/span&gt;
&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;#cb14-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;…&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and follow the prompts to create a starting point for our
&lt;code&gt;.cabal&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;After completing those choices and trimming down the
&lt;code&gt;.cabal&lt;/code&gt; file (to keep the example simple), I get a file that
looks like this:&lt;/p&gt;
&lt;pre class=&quot;cabal&quot;&gt;&lt;code&gt;cabal-version:      2.4
name:               spire
version:            1.0.0
license:            BSD-3-Clause
license-file:       LICENSE

executable spire
    main-is:          Spire.hs
    build-depends:    base ^&amp;gt;=4.14.3.0
    default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only thing I’m going change for now is to add dependencies to the
&lt;code&gt;build-depends&lt;/code&gt; section and increase the upper bound on
&lt;code&gt;base&lt;/code&gt;::&lt;/p&gt;
&lt;pre class=&quot;cabal&quot;&gt;&lt;code&gt;cabal-version:      2.4
name:               spire
version:            1.0.0
license:            BSD-3-Clause
license-file:       LICENSE

executable spire
    main-is:          Spire.hs
    build-depends:    base &amp;gt;=4.14.3.0 &amp;amp;&amp;amp; &amp;lt; 5
                    , MemoTrie
                    , containers
                    , mtl
                    , pretty-show
                    , transformers
    default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;stage-4-cabal2nix---shell&quot;&gt;Stage 4:
&lt;code&gt;cabal2nix --shell&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Adding a &lt;code&gt;.cabal&lt;/code&gt; file suffices to share our Haskell
package with other Haskell developers if they’re not using Nix. However,
if we want to Nix-enable package our package then we have a few
options.&lt;/p&gt;
&lt;p&gt;The simplest option is to run the following command from the
top-level of the Haskell project:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cabal2nix --shell . &amp;gt; shell.nix&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That will create something similar to the following
&lt;code&gt;shell.nix&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;{ nixpkgs ? import &amp;lt;nixpkgs&amp;gt; {}, compiler ? &amp;quot;default&amp;quot;, doBenchmark ? false }:

let

  inherit (nixpkgs) pkgs;

  f = { mkDerivation, base, containers, lib, MemoTrie, mtl
      , pretty-show, transformers
      }:
      mkDerivation {
        pname = &amp;quot;spire&amp;quot;;
        version = &amp;quot;1.0.0&amp;quot;;
        src = ./.;
        isLibrary = false;
        isExecutable = true;
        executableHaskellDepends = [
          base containers MemoTrie mtl pretty-show transformers
        ];
        license = lib.licenses.bsd3;
      };

  haskellPackages = if compiler == &amp;quot;default&amp;quot;
                       then pkgs.haskellPackages
                       else pkgs.haskell.packages.${compiler};

  variant = if doBenchmark then pkgs.haskell.lib.doBenchmark else pkgs.lib.id;

  drv = variant (haskellPackages.callPackage f {});

in

  if pkgs.lib.inNixShell then drv.env else drv&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… and if you run &lt;code&gt;nix-shell&lt;/code&gt; within the same directory the
shell environment will have the Haskell dependencies you need to build
and run project using &lt;code&gt;cabal&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb19&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb19-1&quot;&gt;&lt;a href=&quot;#cb19-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix-shell&lt;/span&gt;
&lt;span id=&quot;cb19-2&quot;&gt;&lt;a href=&quot;#cb19-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;[nix-shell]$&lt;/span&gt; cabal run&lt;/span&gt;
&lt;span id=&quot;cb19-3&quot;&gt;&lt;a href=&quot;#cb19-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;…&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and tools like &lt;code&gt;ghcid&lt;/code&gt; and
&lt;code&gt;haskell-language-server&lt;/code&gt; will also work within this shell,
too. The only difference is that &lt;code&gt;ghcid&lt;/code&gt; now takes no
arguments, since it will auto-detect the cabal project in the current
directory:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb20&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb20-1&quot;&gt;&lt;a href=&quot;#cb20-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;[nix-shell]$&lt;/span&gt; ghcid&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this &lt;code&gt;nix-shell&lt;/code&gt; will &lt;strong&gt;NOT&lt;/strong&gt;
include &lt;code&gt;cabal&lt;/code&gt; by default. You will need to globally install
&lt;code&gt;cabal&lt;/code&gt; (see the prior section on “Global development
environment”).&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;cabal2nix --shell&lt;/code&gt; workflow is sufficiently
lightweight that you can Nixify other people’s projects on the fly when
hacking on them locally. A common thing I do if I need to make a change
to a person’s project is to clone their repository, run:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb21&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb21-1&quot;&gt;&lt;a href=&quot;#cb21-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; cabal2nix &lt;span class=&quot;at&quot;&gt;--shell&lt;/span&gt; . &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; shell.nix&lt;/span&gt;
&lt;span id=&quot;cb21-2&quot;&gt;&lt;a href=&quot;#cb21-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix-shell&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and start hacking away. I don’t even need to upstream the
&lt;code&gt;shell.nix&lt;/code&gt; file I created in this way; I just keep it around
locally for my own hacking.&lt;/p&gt;
&lt;p&gt;In fact, I typically don’t want to upstream such a
&lt;code&gt;shell.nix&lt;/code&gt; file (even if the upstream author were receptive
to Nix), because there are more robust Nix expressions we can upstream
instead.&lt;/p&gt;
&lt;h4 id=&quot;stage-5-custom-shell.nix-file&quot;&gt;Stage 5: Custom
&lt;code&gt;shell.nix&lt;/code&gt; file&lt;/h4&gt;
&lt;p&gt;One disadvantage of &lt;code&gt;cabal2nix --shell&lt;/code&gt; is that you have
to re-run the command any time your dependencies change. However, if
you’re willing to hand-write your own &lt;code&gt;shell.nix&lt;/code&gt; file then
you can create something more stable:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;let
  overlay = pkgsNew: pkgsOld: {
    haskellPackages = pkgsOld.haskellPackages.override (old: {
      overrides = pkgsNew.haskell.lib.packageSourceOverrides {
        spire = ./.;
      };
    });
  };

  pkgs = import &amp;lt;nixpkgs&amp;gt; { overlays = [ overlay ]; };

in
  pkgs.haskellPackages.spire.env&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;packageSourceOverrides&lt;/code&gt; is the key bit. Under the
hood, that essentially runs &lt;code&gt;cabal2nix&lt;/code&gt; for you any time your
project changes and then generates your development environment from the
result. You can also use &lt;code&gt;packageSourceOverrides&lt;/code&gt; to specify
non-default versions of dependencies, too:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;let
  overlay = pkgsNew: pkgsOld: {
    haskellPackages = pkgsOld.haskellPackages.override (old: {
      overrides = pkgsNew.haskell.lib.packageSourceOverrides {
        spire = ./.;

        # Example of how to pin a dependency to a non-defaul version
        pretty-show = &amp;quot;1.9.5&amp;quot;;
      };
    });
  };

  pkgs = import &amp;lt;nixpkgs&amp;gt; { overlays = [ overlay ]; };

in
  pkgs.haskellPackages.spire.env&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… although that will only work for packages that have been released
prior to the version of Nixpkgs that you’re depending on.&lt;/p&gt;
&lt;p&gt;If you want something a bit more robust, you can do something like
this:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;let
  overlay = pkgsNew: pkgsOld: {
    haskellPackages = pkgsOld.haskellPackages.override (old: {
      overrides =
        pkgsNew.lib.fold
          pkgsNew.lib.composeExtensions
          (old.overrides or (_: _: { }))
          [ (pkgsNew.haskell.lib.packageSourceOverrides {
              spire = ./.;
            })
            (pkgsNew.haskell.lib.packagesFromDirectory {
              directory = ./packages;
            })
          ];
    });
  };

  pkgs = import &amp;lt;nixpkgs&amp;gt; { overlays = [ overlay ]; };

in
  pkgs.haskellPackages.spire.env&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… and then you have the option to also depend on any dependency that
&lt;code&gt;cabal2nix&lt;/code&gt; knows how to generate:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb25&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb25-1&quot;&gt;&lt;a href=&quot;#cb25-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; mkdir packages&lt;/span&gt;
&lt;span id=&quot;cb25-2&quot;&gt;&lt;a href=&quot;#cb25-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb25-3&quot;&gt;&lt;a href=&quot;#cb25-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# Add the following file to version control to preserve the directory&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb25-4&quot;&gt;&lt;a href=&quot;#cb25-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; touch packages/.gitkeep&lt;/span&gt;
&lt;span id=&quot;cb25-5&quot;&gt;&lt;a href=&quot;#cb25-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb25-6&quot;&gt;&lt;a href=&quot;#cb25-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; cabal update&lt;/span&gt;
&lt;span id=&quot;cb25-7&quot;&gt;&lt;a href=&quot;#cb25-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb25-8&quot;&gt;&lt;a href=&quot;#cb25-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; cabal2nix cabal://&lt;span class=&quot;va&quot;&gt;${PACKAGE_NAME}&lt;/span&gt;-&lt;span class=&quot;va&quot;&gt;${VERSION}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; ./packages/&lt;span class=&quot;va&quot;&gt;${PACKAGE_NAME}&lt;/span&gt;.nix&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and that works even on bleeding-edge Haskell packages that Nixpkgs
hasn’t picked up, yet.&lt;/p&gt;
&lt;h4 id=&quot;stage-6-pinning-nixpkgs&quot;&gt;Stage 6: Pinning Nixpkgs&lt;/h4&gt;
&lt;p&gt;All of the prior examples are “impure”, meaning that they depend on
the ambient &lt;code&gt;nixpkgs&lt;/code&gt; channel installed on the developer’s
system. This &lt;code&gt;nixpkgs&lt;/code&gt; channel might vary from system to
system, meaning that each system might have different versions of
&lt;code&gt;nixpkgs&lt;/code&gt; installed, and then you run into issues reproducing
each other’s builds.&lt;/p&gt;
&lt;p&gt;For example, if you have a newer version of &lt;code&gt;nixpkgs&lt;/code&gt;
installed your Nix build for the above Haskell project might succeed,
but then another developer might attempt to build your project with an
older version of &lt;code&gt;nixpkgs&lt;/code&gt;, which might select an older
incompatible version of one of your Haskell dependencies.&lt;/p&gt;
&lt;p&gt;Or, vice versa, the examples in this blog post might succeed at the
time of this writing for the current version of &lt;code&gt;nixpkgs&lt;/code&gt; but
then as time goes on the examples might begin to fail for future
versions of &lt;code&gt;nixpkgs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can fix that by pinning Nixpkgs, which this post covers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a
href=&quot;https://nixos.wiki/wiki/How_to_fetch_Nixpkgs_with_an_empty_NIX_PATH&quot;&gt;How
to fetch Nixpkgs with an empty &lt;code&gt;NIX_PATH&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, we could pin &lt;code&gt;nixpkgs&lt;/code&gt; for our global
&lt;code&gt;~/default.nix&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;let
  nixpkgs = builtins.fetchTarball {
    url    = &amp;quot;https://github.com/NixOS/nixpkgs/archive/0ba2543f8c855d7be8e90ef6c8dc89c1617e8a08.tar.gz&amp;quot;;
    sha256 = &amp;quot;14ann7vz7qgfrw39ji1s19n1p0likyf2ag8h7rh8iwp3iv5lmprl&amp;quot;;
  };

  config = { allowUnfree = true; };

  overlay = pkgsNew: pkgsOld: {
    vscode-with-extensions = pkgsOld.vscode-with-extensions.override {
      vscodeExtensions = [
        pkgsNew.vscode-extensions.haskell.haskell
        pkgsNew.vscode-extensions.justusadam.language-haskell
      ];
    };
  };

  pkgs = import nixpkgs { inherit config; overlays = [ overlay ]; };

in
  { inherit (pkgs)
      cabal-install
      ghcid
      haskell-language-server
      stylish-haskell
      vscode-with-extensions
    ;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… which pins us to the tip of the &lt;code&gt;release-22.05&lt;/code&gt; branch
at the time of this writing.&lt;/p&gt;
&lt;p&gt;We can likewise pin &lt;code&gt;nixpkgs&lt;/code&gt; for our project-local
&lt;code&gt;shell.nix&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;let
  nixpkgs = builtins.fetchTarball {
    url    = &amp;quot;https://github.com/NixOS/nixpkgs/archive/0ba2543f8c855d7be8e90ef6c8dc89c1617e8a08.tar.gz&amp;quot;;
    sha256 = &amp;quot;14ann7vz7qgfrw39ji1s19n1p0likyf2ag8h7rh8iwp3iv5lmprl&amp;quot;;
  };

  overlay = pkgsNew: pkgsOld: {
    haskellPackages = pkgsOld.haskellPackages.override (old: {
      overrides = pkgsNew.haskell.lib.packageSourceOverrides {
        spire = ./.;
      };
    });
  };

  pkgs = import nixpkgs { overlays = [ overlay ]; };

in
  pkgs.haskellPackages.spire.env&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;flakes&quot;&gt;Flakes&lt;/h4&gt;
&lt;p&gt;The final improvement we can make is the most important one of all:
we can convert our project into a Nix flake:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nixos.wiki/wiki/Flakes&quot;&gt;NixOS Wiki -
Flakes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are two main motivations for flake-enabling our project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To simplify managing inputs that we need to lock
(e.g. &lt;code&gt;nixpkgs&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;To speed up our shell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To flake-enable our project, we’ll save the following code to
&lt;code&gt;flake.nix&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;nix&quot;&gt;&lt;code&gt;{ inputs = {
    nixpkgs.url = github:NixOS/nixpkgs/release-22.05;

    utils.url = github:numtide/flake-utils;
  };

  outputs = { nixpkgs, utils, ... }:
    utils.lib.eachDefaultSystem (system:
      let
        config = { };

        overlay = pkgsNew: pkgsOld: {
          spire =
            pkgsNew.haskell.lib.justStaticExecutables
              pkgsNew.haskellPackages.spire;

          haskellPackages = pkgsOld.haskellPackages.override (old: {
            overrides = pkgsNew.haskell.lib.packageSourceOverrides {
              spire = ./.;
            };
          });
        };

        pkgs =
          import nixpkgs { inherit config system; overlays = [ overlay ]; };

      in
        rec {
          packages.default = pkgs.haskellPackages.spire;

          apps.default = {
            type = &amp;quot;app&amp;quot;;

            program = &amp;quot;${pkgs.spire}/bin/spire&amp;quot;;
          };

          devShells.default = pkgs.haskellPackages.spire.env;
        }
    );
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… and then we can delete our old &lt;code&gt;shell.nix&lt;/code&gt; because we
don’t need it anymore.&lt;/p&gt;
&lt;p&gt;Now we can obtain a development environment by running:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb29&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb29-1&quot;&gt;&lt;a href=&quot;#cb29-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix develop&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and the above flake also makes it possible to easily build and run
the program, too:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb30&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb30-1&quot;&gt;&lt;a href=&quot;#cb30-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix run    &lt;span class=&quot;co&quot;&gt;# Run the program&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb30-2&quot;&gt;&lt;a href=&quot;#cb30-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix build  &lt;span class=&quot;co&quot;&gt;# Build the project&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In fact, you can even run a flake without having to clone a
repository. For example, you can run the example code from this blog
post by typing:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb31&quot;&gt;&lt;pre
class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span id=&quot;cb31-1&quot;&gt;&lt;a href=&quot;#cb31-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ex&quot;&gt;$&lt;/span&gt; nix run github:Gabriella439/spire&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Moreover, we no longer have to take care of managing hashes for, say,
Nixpkgs. The flake machinery takes care of that automatically for you
and generates a &lt;code&gt;flake.lock&lt;/code&gt; file which you can then add to
version control. For example, the lock file I got was:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb32&quot;&gt;&lt;pre
class=&quot;sourceCode json&quot;&gt;&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span id=&quot;cb32-1&quot;&gt;&lt;a href=&quot;#cb32-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-2&quot;&gt;&lt;a href=&quot;#cb32-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;dt&quot;&gt;&amp;quot;nodes&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-3&quot;&gt;&lt;a href=&quot;#cb32-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;nixpkgs&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-4&quot;&gt;&lt;a href=&quot;#cb32-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;&amp;quot;locked&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-5&quot;&gt;&lt;a href=&quot;#cb32-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;lastModified&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1661617163&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-6&quot;&gt;&lt;a href=&quot;#cb32-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;narHash&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;sha256-NN9Ky47j8ohgPhA9JZyfkYIbbAo6RJkGz+7h8/exVpE=&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-7&quot;&gt;&lt;a href=&quot;#cb32-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;NixOS&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-8&quot;&gt;&lt;a href=&quot;#cb32-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;repo&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;nixpkgs&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-9&quot;&gt;&lt;a href=&quot;#cb32-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;rev&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;0ba2543f8c855d7be8e90ef6c8dc89c1617e8a08&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-10&quot;&gt;&lt;a href=&quot;#cb32-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;github&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-11&quot;&gt;&lt;a href=&quot;#cb32-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-12&quot;&gt;&lt;a href=&quot;#cb32-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;&amp;quot;original&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-13&quot;&gt;&lt;a href=&quot;#cb32-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;NixOS&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-14&quot;&gt;&lt;a href=&quot;#cb32-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;ref&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;release-22.05&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-15&quot;&gt;&lt;a href=&quot;#cb32-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;repo&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;nixpkgs&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-16&quot;&gt;&lt;a href=&quot;#cb32-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;github&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-17&quot;&gt;&lt;a href=&quot;#cb32-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-18&quot;&gt;&lt;a href=&quot;#cb32-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-19&quot;&gt;&lt;a href=&quot;#cb32-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-20&quot;&gt;&lt;a href=&quot;#cb32-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;&amp;quot;inputs&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-21&quot;&gt;&lt;a href=&quot;#cb32-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;nixpkgs&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;nixpkgs&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-22&quot;&gt;&lt;a href=&quot;#cb32-22&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;utils&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;utils&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-23&quot;&gt;&lt;a href=&quot;#cb32-23&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-24&quot;&gt;&lt;a href=&quot;#cb32-24&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-25&quot;&gt;&lt;a href=&quot;#cb32-25&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;&amp;quot;utils&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-26&quot;&gt;&lt;a href=&quot;#cb32-26&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;&amp;quot;locked&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-27&quot;&gt;&lt;a href=&quot;#cb32-27&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;lastModified&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1659877975&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-28&quot;&gt;&lt;a href=&quot;#cb32-28&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;narHash&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;sha256-zllb8aq3YO3h8B/U0/J1WBgAL8EX5yWf5pMj3G0NAmc=&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-29&quot;&gt;&lt;a href=&quot;#cb32-29&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;numtide&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-30&quot;&gt;&lt;a href=&quot;#cb32-30&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;repo&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;flake-utils&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-31&quot;&gt;&lt;a href=&quot;#cb32-31&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;rev&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;c0e246b9b83f637f4681389ecabcb2681b4f3af0&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-32&quot;&gt;&lt;a href=&quot;#cb32-32&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;github&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-33&quot;&gt;&lt;a href=&quot;#cb32-33&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-34&quot;&gt;&lt;a href=&quot;#cb32-34&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;&amp;quot;original&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-35&quot;&gt;&lt;a href=&quot;#cb32-35&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;numtide&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-36&quot;&gt;&lt;a href=&quot;#cb32-36&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;repo&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;flake-utils&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-37&quot;&gt;&lt;a href=&quot;#cb32-37&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;github&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-38&quot;&gt;&lt;a href=&quot;#cb32-38&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-39&quot;&gt;&lt;a href=&quot;#cb32-39&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-40&quot;&gt;&lt;a href=&quot;#cb32-40&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-41&quot;&gt;&lt;a href=&quot;#cb32-41&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;dt&quot;&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-42&quot;&gt;&lt;a href=&quot;#cb32-42&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;dt&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb32-43&quot;&gt;&lt;a href=&quot;#cb32-43&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and you can easily upgrade to, say, a newer revision of Nixpkgs if
you need to.&lt;/p&gt;
&lt;p&gt;Additionally, all of the Nix commands are now &lt;em&gt;faster&lt;/em&gt;.
Specifically, the first time you run a command Nix still needs to
download and/or build dependencies, but subsequent runs are faster
because Nix can skip the instantiation phase. For more details, see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.tweag.io/blog/2020-06-25-eval-cache/&quot;&gt;Nix
Flakes, Part 2: Evaluation Caching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;Flakes are our final destination, so that’s as far as this post will
go. There are technically some more ways that we can overengineer
things, but in my experience the idioms highlighted in this post are the
ones that provide the highest power-to-weight ratio.&lt;/p&gt;
&lt;p&gt;The key thing to take away is that the Nixpkgs Haskell infrastructure
lets you smoothly transition from simpler approaches to more powerful
approaches, and even the final flake-enabled approach is actually not
that complicated.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/2613892908644813447/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2022/08/incrementally-package-haskell-program.html#comment-form' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/2613892908644813447'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/2613892908644813447'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2022/08/incrementally-package-haskell-program.html' title='Incrementally package a Haskell program using Nix'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-810372623312147782</id><published>2022-06-26T10:03:00.004-07:00</published><updated>2022-06-26T19:03:59.290-07:00</updated><title type='text'>defaultable-map: An Applicative wrapper for Maps</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;
  &lt;meta name=&quot;twitter:site&quot; content=&quot;@GabriellaG439&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;defaultable-map: An Applicative wrapper for Maps&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;An announcement post for a Haskell package for default-valued Maps.&quot; /&gt;
  &lt;title&gt;defaultable-map: An Applicative wrapper for Maps&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      word-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;I’m announcing a small utility Haskell package I created that can wrap arbitrary &lt;code&gt;Map&lt;/code&gt;-like types to provide &lt;code&gt;Applicative&lt;/code&gt; and &lt;code&gt;Alternative&lt;/code&gt; instances. You can find this package on Hackage here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hackage.haskell.org/package/defaultable-map&quot;&gt;&lt;code&gt;defaultable-map&lt;/code&gt;: Applicative maps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I can motivate why the &lt;code&gt;Applicative&lt;/code&gt; and &lt;code&gt;Alternative&lt;/code&gt; instances matter with a small example. Suppose that I define the following three &lt;code&gt;Map&lt;/code&gt;s which are sort of like database tables:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable.Map&lt;/span&gt; &lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;firstNames ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;firstNames &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; fromList [(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Gabriella&amp;quot;&lt;/span&gt;), (&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Oscar&amp;quot;&lt;/span&gt;), (&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Edgar&amp;quot;&lt;/span&gt;)]&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;lastNames ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;lastNames &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; fromList [(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Gonzalez&amp;quot;&lt;/span&gt;), (&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Codd&amp;quot;&lt;/span&gt;), (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Bryant&amp;quot;&lt;/span&gt;)]&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;handles ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;handles &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; fromList [(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;GabriellaG439&amp;quot;&lt;/span&gt;), (&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;posco&amp;quot;&lt;/span&gt;), (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;avibryant&amp;quot;&lt;/span&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you squint, you can think of these as analogous to database tables, where the primary key is an &lt;code&gt;Int&lt;/code&gt; index:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode sql&quot;&gt;&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; firstNames (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;integer&lt;/span&gt;, firstName text);&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; firstNames (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;, firstName) &lt;span class=&quot;kw&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;Gabriella&amp;#39;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; firstNames (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;, firstName) &lt;span class=&quot;kw&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;Oscar&amp;#39;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; firstNames (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;, firstName) &lt;span class=&quot;kw&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;Edgar&amp;#39;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;FROM&lt;/span&gt; firstNames;&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | firstName&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;---+----------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;  | Gabriella&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;  | Oscar&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;  | Edgar&lt;/span&gt;
&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; lastNames (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;integer&lt;/span&gt;, lastName text);&lt;/span&gt;
&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;#cb2-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; lastNames (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;, lastName) &lt;span class=&quot;kw&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;Gonzalez&amp;#39;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&quot;cb2-14&quot;&gt;&lt;a href=&quot;#cb2-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; lastNames (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;, lastName) &lt;span class=&quot;kw&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;Codd&amp;#39;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&quot;cb2-15&quot;&gt;&lt;a href=&quot;#cb2-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; lastNames (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;, lastName) &lt;span class=&quot;kw&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;Bryant&amp;#39;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&quot;cb2-16&quot;&gt;&lt;a href=&quot;#cb2-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;FROM&lt;/span&gt; lastNames;&lt;/span&gt;
&lt;span id=&quot;cb2-17&quot;&gt;&lt;a href=&quot;#cb2-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | lastName&lt;/span&gt;
&lt;span id=&quot;cb2-18&quot;&gt;&lt;a href=&quot;#cb2-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;---+---------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-19&quot;&gt;&lt;a href=&quot;#cb2-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;  | Gonzalez&lt;/span&gt;
&lt;span id=&quot;cb2-20&quot;&gt;&lt;a href=&quot;#cb2-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;  | Codd&lt;/span&gt;
&lt;span id=&quot;cb2-21&quot;&gt;&lt;a href=&quot;#cb2-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;  | Bryant&lt;/span&gt;
&lt;span id=&quot;cb2-22&quot;&gt;&lt;a href=&quot;#cb2-22&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-23&quot;&gt;&lt;a href=&quot;#cb2-23&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; handles (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;integer&lt;/span&gt;, handle text);&lt;/span&gt;
&lt;span id=&quot;cb2-24&quot;&gt;&lt;a href=&quot;#cb2-24&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; handles (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;, handle) &lt;span class=&quot;kw&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;GabriellaG439&amp;#39;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&quot;cb2-25&quot;&gt;&lt;a href=&quot;#cb2-25&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; handles (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;, handle) &lt;span class=&quot;kw&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;posco&amp;#39;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&quot;cb2-26&quot;&gt;&lt;a href=&quot;#cb2-26&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;INTO&lt;/span&gt; handles (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;, handle) &lt;span class=&quot;kw&quot;&gt;VALUES&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;avibryant&amp;#39;&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&quot;cb2-27&quot;&gt;&lt;a href=&quot;#cb2-27&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;FROM&lt;/span&gt; handles;&lt;/span&gt;
&lt;span id=&quot;cb2-28&quot;&gt;&lt;a href=&quot;#cb2-28&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | handle&lt;/span&gt;
&lt;span id=&quot;cb2-29&quot;&gt;&lt;a href=&quot;#cb2-29&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;---+--------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-30&quot;&gt;&lt;a href=&quot;#cb2-30&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;  | GabriellaG439&lt;/span&gt;
&lt;span id=&quot;cb2-31&quot;&gt;&lt;a href=&quot;#cb2-31&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;  | posco&lt;/span&gt;
&lt;span id=&quot;cb2-32&quot;&gt;&lt;a href=&quot;#cb2-32&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;  | avibryant&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;Defaultable (Map Int)&lt;/code&gt; type has a law-abiding &lt;code&gt;Applicative&lt;/code&gt; instance, so we can safely “join” these “tables” using &lt;code&gt;Applicative&lt;/code&gt; operations. For example, if we enable Haskell’s &lt;code&gt;ApplicativeDo&lt;/code&gt; language extension then we can compute an “inner join” on tables like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# LANGUAGE ApplicativeDo #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;innerJoin ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;innerJoin &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    firstName &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; firstNames&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    lastName  &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; lastNames&lt;/span&gt;
&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; (firstName, lastName)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and that evaluates to the following result:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    (fromList&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        [ (&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, (&lt;span class=&quot;st&quot;&gt;&amp;quot;Gabriella&amp;quot;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&amp;quot;Gonzalez&amp;quot;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        , (&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, (&lt;span class=&quot;st&quot;&gt;&amp;quot;Edgar&amp;quot;&lt;/span&gt;    ,&lt;span class=&quot;st&quot;&gt;&amp;quot;Codd&amp;quot;&lt;/span&gt;    ))&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    )&lt;/span&gt;
&lt;span id=&quot;cb4-7&quot;&gt;&lt;a href=&quot;#cb4-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… which is the same result we would have gotten from doing an inner join in SQL:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode sql&quot;&gt;&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;SELECT&lt;/span&gt; firstNames.&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;, firstName, lastName&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;kw&quot;&gt;FROM&lt;/span&gt; firstNames &lt;span class=&quot;kw&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;JOIN&lt;/span&gt; lastNames &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; firstNames.&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; lastNames.&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | firstName | lastName&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;---+-----------+---------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;  | Gabriella | Gonzalez&lt;/span&gt;
&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;  | Edgar     | Codd&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;Defaultable (Map Int)&lt;/code&gt; type also has a law-abiding &lt;code&gt;Alternative&lt;/code&gt; instance, which we can combine with the &lt;code&gt;Applicative&lt;/code&gt; instance to compute “left/right/outer joins”. For example, this “left join”:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;leftJoin ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;leftJoin &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    firstName &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; firstNames&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    lastName  &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; optional lastNames&lt;/span&gt;
&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;#cb6-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; (firstName, lastName)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… evaluates to:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    (fromList&lt;/span&gt;
&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        [ (&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, (&lt;span class=&quot;st&quot;&gt;&amp;quot;Gabriella&amp;quot;&lt;/span&gt;,&lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Gonzalez&amp;quot;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        , (&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, (&lt;span class=&quot;st&quot;&gt;&amp;quot;Oscar&amp;quot;&lt;/span&gt;    ,&lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;        ))&lt;/span&gt;
&lt;span id=&quot;cb7-5&quot;&gt;&lt;a href=&quot;#cb7-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        , (&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, (&lt;span class=&quot;st&quot;&gt;&amp;quot;Edgar&amp;quot;&lt;/span&gt;    ,&lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Codd&amp;quot;&lt;/span&gt;    ))&lt;/span&gt;
&lt;span id=&quot;cb7-6&quot;&gt;&lt;a href=&quot;#cb7-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&quot;cb7-7&quot;&gt;&lt;a href=&quot;#cb7-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    )&lt;/span&gt;
&lt;span id=&quot;cb7-8&quot;&gt;&lt;a href=&quot;#cb7-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… which is analogous to this SQL left join:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode sql&quot;&gt;&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;SELECT&lt;/span&gt; firstNames.&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;, firstName, lastName&lt;/span&gt;
&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;kw&quot;&gt;FROM&lt;/span&gt; firstNames &lt;span class=&quot;kw&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;JOIN&lt;/span&gt; lastNames &lt;span class=&quot;kw&quot;&gt;on&lt;/span&gt; firstNames.&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; lastNames.&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; | firstName | lastName&lt;/span&gt;
&lt;span id=&quot;cb8-4&quot;&gt;&lt;a href=&quot;#cb8-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;---+-----------+---------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb8-5&quot;&gt;&lt;a href=&quot;#cb8-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;  | Gabriella | Gonzalez&lt;/span&gt;
&lt;span id=&quot;cb8-6&quot;&gt;&lt;a href=&quot;#cb8-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;  | Oscar     |&lt;/span&gt;
&lt;span id=&quot;cb8-7&quot;&gt;&lt;a href=&quot;#cb8-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;  | Edgar     | Codd&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since Haskell is a more fully-featured language than SQL, we can do more sophisticated things more easily than in SQL. For example, the following three-way join with some post-processing logic is much easier to express in Haskell than SQL:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;display ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;display firstName &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; handle &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;#cb9-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    firstName &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;: @&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; handle&lt;/span&gt;
&lt;span id=&quot;cb9-4&quot;&gt;&lt;a href=&quot;#cb9-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;display firstName (&lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; lastName) handle &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-5&quot;&gt;&lt;a href=&quot;#cb9-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    firstName &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; lastName &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;: @&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; handle&lt;/span&gt;
&lt;span id=&quot;cb9-6&quot;&gt;&lt;a href=&quot;#cb9-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-7&quot;&gt;&lt;a href=&quot;#cb9-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;interestingJoin ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-8&quot;&gt;&lt;a href=&quot;#cb9-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;interestingJoin &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-9&quot;&gt;&lt;a href=&quot;#cb9-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    firstName &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; firstNames&lt;/span&gt;
&lt;span id=&quot;cb9-10&quot;&gt;&lt;a href=&quot;#cb9-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    lastName  &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; optional lastNames&lt;/span&gt;
&lt;span id=&quot;cb9-11&quot;&gt;&lt;a href=&quot;#cb9-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    handle    &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; handles&lt;/span&gt;
&lt;span id=&quot;cb9-12&quot;&gt;&lt;a href=&quot;#cb9-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; (display firstName lastName handle)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… which evaluates to:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    (fromList&lt;/span&gt;
&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;#cb10-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        [ (&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Gabriella Gonzalez: @GabriellaG439&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb10-4&quot;&gt;&lt;a href=&quot;#cb10-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        , (&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Oscar: @posco&amp;quot;&lt;/span&gt;                     )&lt;/span&gt;
&lt;span id=&quot;cb10-5&quot;&gt;&lt;a href=&quot;#cb10-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&quot;cb10-6&quot;&gt;&lt;a href=&quot;#cb10-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    )&lt;/span&gt;
&lt;span id=&quot;cb10-7&quot;&gt;&lt;a href=&quot;#cb10-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;the-defaultable-type-constructor&quot;&gt;The &lt;code&gt;Defaultable&lt;/code&gt; type constructor&lt;/h4&gt;
&lt;p&gt;The central data type exported by the package is the &lt;code&gt;Defaultable&lt;/code&gt; type constructor, which has the following simple definition:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; value &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; value) (&lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; value)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here the &lt;code&gt;map&lt;/code&gt; type parameter can be any &lt;code&gt;Map&lt;/code&gt;-like type that includes the type of the key. For example, a typical instantiation of the &lt;code&gt;Defaultable&lt;/code&gt; type constructor might be &lt;code&gt;Defaultable (Map key) value&lt;/code&gt; or &lt;code&gt;Defaultable IntMap value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first field of the type is the actual map that you want to wrap in order to get an &lt;code&gt;Applicative&lt;/code&gt; and &lt;code&gt;Alternative&lt;/code&gt; instance. The second field is an optional default value stored alongside the map that can be returned if a &lt;code&gt;lookup&lt;/code&gt; does not find a matching key.&lt;/p&gt;
&lt;p&gt;The default value is not required (it can be &lt;code&gt;Nothing&lt;/code&gt;), but that default value is what makes the &lt;code&gt;Applicative&lt;/code&gt; instance work. Specifically, without the ability to specify a default value there would be no way to implement &lt;code&gt;pure&lt;/code&gt; for a &lt;code&gt;Map&lt;/code&gt;-like type.&lt;/p&gt;
&lt;p&gt;In case you’re curious, here is what the &lt;code&gt;Applicative&lt;/code&gt; instance looks like:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; a)) &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb12-2&quot;&gt;&lt;a href=&quot;#cb12-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-3&quot;&gt;&lt;a href=&quot;#cb12-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; v &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; v)&lt;/span&gt;
&lt;span id=&quot;cb12-4&quot;&gt;&lt;a href=&quot;#cb12-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-5&quot;&gt;&lt;a href=&quot;#cb12-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; fMap fDefault &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; xMap xDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-6&quot;&gt;&lt;a href=&quot;#cb12-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; fxMap fxDefault&lt;/span&gt;
&lt;span id=&quot;cb12-7&quot;&gt;&lt;a href=&quot;#cb12-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-8&quot;&gt;&lt;a href=&quot;#cb12-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        fxMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (fMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; xMap) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; fFallback &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; xFallback&lt;/span&gt;
&lt;span id=&quot;cb12-9&quot;&gt;&lt;a href=&quot;#cb12-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-10&quot;&gt;&lt;a href=&quot;#cb12-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            fFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-11&quot;&gt;&lt;a href=&quot;#cb12-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; fDefault &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-12&quot;&gt;&lt;a href=&quot;#cb12-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                    &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-13&quot;&gt;&lt;a href=&quot;#cb12-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                    &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; f  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; f xMap&lt;/span&gt;
&lt;span id=&quot;cb12-14&quot;&gt;&lt;a href=&quot;#cb12-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-15&quot;&gt;&lt;a href=&quot;#cb12-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            xFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-16&quot;&gt;&lt;a href=&quot;#cb12-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; xDefault &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-17&quot;&gt;&lt;a href=&quot;#cb12-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                    &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-18&quot;&gt;&lt;a href=&quot;#cb12-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                    &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; x  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; x) fMap&lt;/span&gt;
&lt;span id=&quot;cb12-19&quot;&gt;&lt;a href=&quot;#cb12-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb12-20&quot;&gt;&lt;a href=&quot;#cb12-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        fxDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; fDefault &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; xDefault&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The neat part of the above instance is the class constraint:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓&lt;/span&gt;
&lt;span id=&quot;cb13-2&quot;&gt;&lt;a href=&quot;#cb13-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; a)) &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;Defaultable&lt;/code&gt; type is set up in such a way that you can wrap any &lt;code&gt;Map&lt;/code&gt;-like type that satisfies that constraint (which is basically all of them) and get a law-abiding &lt;code&gt;Applicative&lt;/code&gt; instance (See the &lt;a href=&quot;#appendix---proof-of-the-applicative-laws&quot;&gt;Appendix&lt;/a&gt; for a proof of the &lt;code&gt;Applicative&lt;/code&gt; laws).&lt;/p&gt;
&lt;p&gt;In particular, this constraint makes use of &lt;a href=&quot;https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/quantified_constraints.html&quot;&gt;the &lt;code&gt;QuantifiedConstraints&lt;/code&gt; language extension&lt;/a&gt; introduced in GHC 8.6. Without that instance then we wouldn’t be able to generalize this type to wrap arbitrary &lt;code&gt;Map&lt;/code&gt;s and we’d have to hard-code the package to work with a specific &lt;code&gt;Map&lt;/code&gt; like &lt;code&gt;Data.Map.Map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Defaultable&lt;/code&gt; type also implements &lt;code&gt;Alternative&lt;/code&gt;, too, although that instance is much simpler:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Apply&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monoid&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; a)) &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Alternative&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;#cb14-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    empty &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; empty&lt;/span&gt;
&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;#cb14-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-4&quot;&gt;&lt;a href=&quot;#cb14-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; lMap lDefault &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; rMap rDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-5&quot;&gt;&lt;a href=&quot;#cb14-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; (lMap &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rMap) (lDefault &lt;span class=&quot;op&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; rDefault)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This instance is only possible because the &lt;code&gt;Defaultable&lt;/code&gt; type constructor doesn’t require the default value to be present. If the default value were required then we could not sensibly define &lt;code&gt;empty&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;prior-art&quot;&gt;Prior art&lt;/h4&gt;
&lt;p&gt;I was surprised that something like this didn’t already exist on Hackage. The closest package I could find was this one:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hackage.haskell.org/package/total-map&quot;&gt;&lt;code&gt;total-map&lt;/code&gt;: Finitely represented total maps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, that wasn’t exactly what I wanted, because it requires the default value to be present. That means that you can’t implement an &lt;code&gt;Alternative&lt;/code&gt; instance for the &lt;code&gt;TMap&lt;/code&gt; type from that package and you therefore can’t do things like left/right/outer joins as I mentioned above.&lt;/p&gt;
&lt;p&gt;Also, more generally, sometimes you want a &lt;code&gt;Map&lt;/code&gt; to have an &lt;code&gt;Applicative&lt;/code&gt; instance without having to specify a default value. Requiring the default to always be present is not necessary to implement &lt;code&gt;Applicative&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The other issue I had with that package is that it’s hard-coded to use &lt;code&gt;Data.Map.Map&lt;/code&gt; under the hood, whereas I wanted an API that could be used in conjunction with any &lt;code&gt;Map&lt;/code&gt;-like type.&lt;/p&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;The idea for this package originated from a LambdaConf presentation I gave a while ago where I brainstormed what a good “data science” ecosystem for Haskell might look like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Gabriella439/slides/blob/main/lambdaconf/data/data.md#a-higher-level-api&quot;&gt;Data science APIs in Haskell - slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I sat on this idea for years without publishing anything to Hackage because my original vision was a bit too ambitious and included much more than just an &lt;code&gt;Applicative&lt;/code&gt; &lt;code&gt;Map&lt;/code&gt; type. However, recently I needed this &lt;code&gt;Applicative&lt;/code&gt; &lt;code&gt;Map&lt;/code&gt; type, so I settled for publishing a narrower and more focused package to Hackage.&lt;/p&gt;
&lt;p&gt;The personal use case I have in mind for this package is no longer data science, but I hope that people interested in building a data science ecosystem for Haskell consider using this package as a building block since I believe it is well-suited for that purpose.&lt;/p&gt;
&lt;h4 id=&quot;appendix---proof-of-the-applicative-laws&quot;&gt;Appendix - Proof of the &lt;code&gt;Applicative&lt;/code&gt; laws&lt;/h4&gt;
&lt;p&gt;These proofs require a few additional assumptions about the interaction between the &lt;code&gt;Apply&lt;/code&gt; and &lt;code&gt;Monoid&lt;/code&gt; constraint on the &lt;code&gt;map&lt;/code&gt; type parameter to &lt;code&gt;Defaultable&lt;/code&gt;. These assumptions hold for &lt;code&gt;Map&lt;/code&gt;-like types.&lt;/p&gt;
&lt;p&gt;The first assumption is that &lt;code&gt;fmap&lt;/code&gt; is a &lt;code&gt;Monoid&lt;/code&gt; homomorphism:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;#cb15-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; f &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb15-2&quot;&gt;&lt;a href=&quot;#cb15-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb15-3&quot;&gt;&lt;a href=&quot;#cb15-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; f (x &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; y) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; f x &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; f y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second assumption is that &lt;code&gt;f &amp;lt;.&amp;gt;&lt;/code&gt; is a &lt;code&gt;Monoid&lt;/code&gt; homorphism:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;#cb16-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;f &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-2&quot;&gt;&lt;a href=&quot;#cb16-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb16-3&quot;&gt;&lt;a href=&quot;#cb16-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;f &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (x &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; y) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (f &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; x) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (f &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; y)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The final assumption is specific to maps, which is:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;#cb17-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Given:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb17-2&quot;&gt;&lt;a href=&quot;#cb17-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;mf ::&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b)&lt;/span&gt;
&lt;span id=&quot;cb17-3&quot;&gt;&lt;a href=&quot;#cb17-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;mx ::&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&quot;cb17-4&quot;&gt;&lt;a href=&quot;#cb17-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;kf ::&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&quot;cb17-5&quot;&gt;&lt;a href=&quot;#cb17-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;kx ::&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&quot;cb17-6&quot;&gt;&lt;a href=&quot;#cb17-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb17-7&quot;&gt;&lt;a href=&quot;#cb17-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  (mf &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; mx) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; kf mf &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; kx mx&lt;/span&gt;
&lt;span id=&quot;cb17-8&quot;&gt;&lt;a href=&quot;#cb17-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (mf &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; mx) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; kx mx &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; kf mf&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The intuition here is if that &lt;code&gt;map&lt;/code&gt; is a &lt;code&gt;Map&lt;/code&gt;-like type constructor then we can think of those three expressions as having a set of keys associated with them, such that:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;#cb18-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Given:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-2&quot;&gt;&lt;a href=&quot;#cb18-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;keys ::&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; key&lt;/span&gt;
&lt;span id=&quot;cb18-3&quot;&gt;&lt;a href=&quot;#cb18-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-4&quot;&gt;&lt;a href=&quot;#cb18-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;keys (mf &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; mx) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; keys (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; kf mf) &lt;span class=&quot;ot&quot;&gt;`intersection`&lt;/span&gt; keys (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; kx mx)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So normally the following equality would not be true:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  fmap kf mf &amp;lt;&amp;gt; fmap kx mx
= fmap kx mx &amp;lt;&amp;gt; fmap kf mf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… because the result would change if there was a key collision. Then the order in which we union (&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;) the two maps would change the result.&lt;/p&gt;
&lt;p&gt;However, if you union yet another map (&lt;code&gt;mf &amp;lt;.&amp;gt; mx&lt;/code&gt;) that shadows the colliding keys then result remains the same.&lt;/p&gt;
&lt;p&gt;The proof below uses that assumption a bit less formally by just noting that we can commute a union operation if there is a downstream union operation that would shadow any colliding keys that might differ.&lt;/p&gt;
&lt;h5 id=&quot;proof-of-identity-law&quot;&gt;Proof of identity law&lt;/h5&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb20&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb20-1&quot;&gt;&lt;a href=&quot;#cb20-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; v&lt;/span&gt;
&lt;span id=&quot;cb20-2&quot;&gt;&lt;a href=&quot;#cb20-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-3&quot;&gt;&lt;a href=&quot;#cb20-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure v = Defaultable mempty (pure v)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-4&quot;&gt;&lt;a href=&quot;#cb20-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; v&lt;/span&gt;
&lt;span id=&quot;cb20-5&quot;&gt;&lt;a href=&quot;#cb20-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-6&quot;&gt;&lt;a href=&quot;#cb20-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Expand: v = Defaultable xMap xDefault&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-7&quot;&gt;&lt;a href=&quot;#cb20-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; xMap xDefault&lt;/span&gt;
&lt;span id=&quot;cb20-8&quot;&gt;&lt;a href=&quot;#cb20-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-9&quot;&gt;&lt;a href=&quot;#cb20-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of (&amp;lt;*&amp;gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-10&quot;&gt;&lt;a href=&quot;#cb20-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; fxMap fxDefault&lt;/span&gt;
&lt;span id=&quot;cb20-11&quot;&gt;&lt;a href=&quot;#cb20-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-12&quot;&gt;&lt;a href=&quot;#cb20-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; xMap) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; fFallback &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; xFallback&lt;/span&gt;
&lt;span id=&quot;cb20-13&quot;&gt;&lt;a href=&quot;#cb20-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-14&quot;&gt;&lt;a href=&quot;#cb20-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        fFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-15&quot;&gt;&lt;a href=&quot;#cb20-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-16&quot;&gt;&lt;a href=&quot;#cb20-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-17&quot;&gt;&lt;a href=&quot;#cb20-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; f  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; f xMap&lt;/span&gt;
&lt;span id=&quot;cb20-18&quot;&gt;&lt;a href=&quot;#cb20-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-19&quot;&gt;&lt;a href=&quot;#cb20-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        xFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-20&quot;&gt;&lt;a href=&quot;#cb20-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; xDefault &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-21&quot;&gt;&lt;a href=&quot;#cb20-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-22&quot;&gt;&lt;a href=&quot;#cb20-22&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; x  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; x) &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-23&quot;&gt;&lt;a href=&quot;#cb20-23&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-24&quot;&gt;&lt;a href=&quot;#cb20-24&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; xDefault&lt;/span&gt;
&lt;span id=&quot;cb20-25&quot;&gt;&lt;a href=&quot;#cb20-25&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-26&quot;&gt;&lt;a href=&quot;#cb20-26&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- mempty &amp;lt;.&amp;gt; xMap = mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-27&quot;&gt;&lt;a href=&quot;#cb20-27&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; fxMap fxDefault&lt;/span&gt;
&lt;span id=&quot;cb20-28&quot;&gt;&lt;a href=&quot;#cb20-28&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-29&quot;&gt;&lt;a href=&quot;#cb20-29&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; fFallback &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; xFallback&lt;/span&gt;
&lt;span id=&quot;cb20-30&quot;&gt;&lt;a href=&quot;#cb20-30&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-31&quot;&gt;&lt;a href=&quot;#cb20-31&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        fFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-32&quot;&gt;&lt;a href=&quot;#cb20-32&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-33&quot;&gt;&lt;a href=&quot;#cb20-33&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-34&quot;&gt;&lt;a href=&quot;#cb20-34&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; f  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; f xMap&lt;/span&gt;
&lt;span id=&quot;cb20-35&quot;&gt;&lt;a href=&quot;#cb20-35&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-36&quot;&gt;&lt;a href=&quot;#cb20-36&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        xFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-37&quot;&gt;&lt;a href=&quot;#cb20-37&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; xDefault &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-38&quot;&gt;&lt;a href=&quot;#cb20-38&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-39&quot;&gt;&lt;a href=&quot;#cb20-39&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; x  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; x) &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-40&quot;&gt;&lt;a href=&quot;#cb20-40&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-41&quot;&gt;&lt;a href=&quot;#cb20-41&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; xDefault&lt;/span&gt;
&lt;span id=&quot;cb20-42&quot;&gt;&lt;a href=&quot;#cb20-42&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-43&quot;&gt;&lt;a href=&quot;#cb20-43&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Simplify `case pure id of …`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-44&quot;&gt;&lt;a href=&quot;#cb20-44&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; fxMap fxDefault&lt;/span&gt;
&lt;span id=&quot;cb20-45&quot;&gt;&lt;a href=&quot;#cb20-45&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-46&quot;&gt;&lt;a href=&quot;#cb20-46&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; fFallback &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; xFallback&lt;/span&gt;
&lt;span id=&quot;cb20-47&quot;&gt;&lt;a href=&quot;#cb20-47&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-48&quot;&gt;&lt;a href=&quot;#cb20-48&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        fFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; xMap&lt;/span&gt;
&lt;span id=&quot;cb20-49&quot;&gt;&lt;a href=&quot;#cb20-49&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-50&quot;&gt;&lt;a href=&quot;#cb20-50&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        xFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-51&quot;&gt;&lt;a href=&quot;#cb20-51&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; xDefault &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-52&quot;&gt;&lt;a href=&quot;#cb20-52&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-53&quot;&gt;&lt;a href=&quot;#cb20-53&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; x  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; x) &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-54&quot;&gt;&lt;a href=&quot;#cb20-54&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-55&quot;&gt;&lt;a href=&quot;#cb20-55&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; xDefault&lt;/span&gt;
&lt;span id=&quot;cb20-56&quot;&gt;&lt;a href=&quot;#cb20-56&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-57&quot;&gt;&lt;a href=&quot;#cb20-57&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap id x = x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-58&quot;&gt;&lt;a href=&quot;#cb20-58&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; fxMap fxDefault&lt;/span&gt;
&lt;span id=&quot;cb20-59&quot;&gt;&lt;a href=&quot;#cb20-59&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-60&quot;&gt;&lt;a href=&quot;#cb20-60&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; fFallback &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; xFallback&lt;/span&gt;
&lt;span id=&quot;cb20-61&quot;&gt;&lt;a href=&quot;#cb20-61&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-62&quot;&gt;&lt;a href=&quot;#cb20-62&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        fFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; xMap&lt;/span&gt;
&lt;span id=&quot;cb20-63&quot;&gt;&lt;a href=&quot;#cb20-63&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-64&quot;&gt;&lt;a href=&quot;#cb20-64&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        xFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-65&quot;&gt;&lt;a href=&quot;#cb20-65&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; xDefault &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-66&quot;&gt;&lt;a href=&quot;#cb20-66&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-67&quot;&gt;&lt;a href=&quot;#cb20-67&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; x  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; x) &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-68&quot;&gt;&lt;a href=&quot;#cb20-68&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-69&quot;&gt;&lt;a href=&quot;#cb20-69&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; xDefault&lt;/span&gt;
&lt;span id=&quot;cb20-70&quot;&gt;&lt;a href=&quot;#cb20-70&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-71&quot;&gt;&lt;a href=&quot;#cb20-71&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f mempty = mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-72&quot;&gt;&lt;a href=&quot;#cb20-72&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; fxMap fxDefault&lt;/span&gt;
&lt;span id=&quot;cb20-73&quot;&gt;&lt;a href=&quot;#cb20-73&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-74&quot;&gt;&lt;a href=&quot;#cb20-74&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;fFallback &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; xFallback&lt;/span&gt;
&lt;span id=&quot;cb20-75&quot;&gt;&lt;a href=&quot;#cb20-75&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-76&quot;&gt;&lt;a href=&quot;#cb20-76&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        fFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; xMap&lt;/span&gt;
&lt;span id=&quot;cb20-77&quot;&gt;&lt;a href=&quot;#cb20-77&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-78&quot;&gt;&lt;a href=&quot;#cb20-78&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        xFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-79&quot;&gt;&lt;a href=&quot;#cb20-79&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; xDefault &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-80&quot;&gt;&lt;a href=&quot;#cb20-80&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-81&quot;&gt;&lt;a href=&quot;#cb20-81&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; x  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-82&quot;&gt;&lt;a href=&quot;#cb20-82&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-83&quot;&gt;&lt;a href=&quot;#cb20-83&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; xDefault&lt;/span&gt;
&lt;span id=&quot;cb20-84&quot;&gt;&lt;a href=&quot;#cb20-84&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-85&quot;&gt;&lt;a href=&quot;#cb20-85&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure id &amp;lt;*&amp;gt; v = v&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-86&quot;&gt;&lt;a href=&quot;#cb20-86&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; fxMap fxDefault&lt;/span&gt;
&lt;span id=&quot;cb20-87&quot;&gt;&lt;a href=&quot;#cb20-87&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-88&quot;&gt;&lt;a href=&quot;#cb20-88&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; fFallback &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; xFallback&lt;/span&gt;
&lt;span id=&quot;cb20-89&quot;&gt;&lt;a href=&quot;#cb20-89&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-90&quot;&gt;&lt;a href=&quot;#cb20-90&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        fFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; xMap&lt;/span&gt;
&lt;span id=&quot;cb20-91&quot;&gt;&lt;a href=&quot;#cb20-91&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-92&quot;&gt;&lt;a href=&quot;#cb20-92&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        xFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-93&quot;&gt;&lt;a href=&quot;#cb20-93&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; xDefault &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-94&quot;&gt;&lt;a href=&quot;#cb20-94&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-95&quot;&gt;&lt;a href=&quot;#cb20-95&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; x  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-96&quot;&gt;&lt;a href=&quot;#cb20-96&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-97&quot;&gt;&lt;a href=&quot;#cb20-97&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; xDefault&lt;/span&gt;
&lt;span id=&quot;cb20-98&quot;&gt;&lt;a href=&quot;#cb20-98&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-99&quot;&gt;&lt;a href=&quot;#cb20-99&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Simplify&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-100&quot;&gt;&lt;a href=&quot;#cb20-100&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; fxMap fxDefault&lt;/span&gt;
&lt;span id=&quot;cb20-101&quot;&gt;&lt;a href=&quot;#cb20-101&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-102&quot;&gt;&lt;a href=&quot;#cb20-102&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; xMap &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-103&quot;&gt;&lt;a href=&quot;#cb20-103&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-104&quot;&gt;&lt;a href=&quot;#cb20-104&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; xDefault&lt;/span&gt;
&lt;span id=&quot;cb20-105&quot;&gt;&lt;a href=&quot;#cb20-105&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-106&quot;&gt;&lt;a href=&quot;#cb20-106&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- x &amp;lt;&amp;gt; mempty = x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-107&quot;&gt;&lt;a href=&quot;#cb20-107&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- mempty &amp;lt;&amp;gt; x = x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-108&quot;&gt;&lt;a href=&quot;#cb20-108&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; fxMap fxDefault&lt;/span&gt;
&lt;span id=&quot;cb20-109&quot;&gt;&lt;a href=&quot;#cb20-109&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-110&quot;&gt;&lt;a href=&quot;#cb20-110&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; xMap&lt;/span&gt;
&lt;span id=&quot;cb20-111&quot;&gt;&lt;a href=&quot;#cb20-111&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-112&quot;&gt;&lt;a href=&quot;#cb20-112&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; xDefault&lt;/span&gt;
&lt;span id=&quot;cb20-113&quot;&gt;&lt;a href=&quot;#cb20-113&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-114&quot;&gt;&lt;a href=&quot;#cb20-114&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Simplify&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-115&quot;&gt;&lt;a href=&quot;#cb20-115&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; xMap xDefault&lt;/span&gt;
&lt;span id=&quot;cb20-116&quot;&gt;&lt;a href=&quot;#cb20-116&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-117&quot;&gt;&lt;a href=&quot;#cb20-117&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Contract: v = Defaultable xMap xDefault&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb20-118&quot;&gt;&lt;a href=&quot;#cb20-118&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;proof-of-the-composition-law&quot;&gt;Proof of the composition law&lt;/h5&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb21&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb21-1&quot;&gt;&lt;a href=&quot;#cb21-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; u &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; v &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; w&lt;/span&gt;
&lt;span id=&quot;cb21-2&quot;&gt;&lt;a href=&quot;#cb21-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb21-3&quot;&gt;&lt;a href=&quot;#cb21-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Expand:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb21-4&quot;&gt;&lt;a href=&quot;#cb21-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- u = Defaultable uMap uDefault&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb21-5&quot;&gt;&lt;a href=&quot;#cb21-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- v = Defaultable vMap vDefault&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb21-6&quot;&gt;&lt;a href=&quot;#cb21-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- w = Defaultable wMap wDefault&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb21-7&quot;&gt;&lt;a href=&quot;#cb21-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;       &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb21-8&quot;&gt;&lt;a href=&quot;#cb21-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; uMap uDefault&lt;/span&gt;
&lt;span id=&quot;cb21-9&quot;&gt;&lt;a href=&quot;#cb21-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; vMap vDefault&lt;/span&gt;
&lt;span id=&quot;cb21-10&quot;&gt;&lt;a href=&quot;#cb21-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; wMap wDefault&lt;/span&gt;
&lt;span id=&quot;cb21-11&quot;&gt;&lt;a href=&quot;#cb21-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb21-12&quot;&gt;&lt;a href=&quot;#cb21-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure v = Defaultable mempty (pure v)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb21-13&quot;&gt;&lt;a href=&quot;#cb21-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;       &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb21-14&quot;&gt;&lt;a href=&quot;#cb21-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; uMap uDefault&lt;/span&gt;
&lt;span id=&quot;cb21-15&quot;&gt;&lt;a href=&quot;#cb21-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; vMap vDefault&lt;/span&gt;
&lt;span id=&quot;cb21-16&quot;&gt;&lt;a href=&quot;#cb21-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; wMap wDefault&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… before continuing, it’s easiest to prove all eight possible combinations of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;uDefault&lt;/code&gt; is &lt;code&gt;pure u&lt;/code&gt; or &lt;code&gt;empty&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vDefault&lt;/code&gt; is &lt;code&gt;pure v&lt;/code&gt; or &lt;code&gt;empty&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wDefault&lt;/code&gt; is &lt;code&gt;pure w&lt;/code&gt; or &lt;code&gt;empty&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To avoid lots of repetition, I’ll only prove the most difficult case (where all defaults are present), since the other proofs are essentially subsets of that proof where some subterms disappear because they become &lt;code&gt;mempty&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Case:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;uDefault = pure u&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vDefault = pure v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wDefault = pure w&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb22&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb22-1&quot;&gt;&lt;a href=&quot;#cb22-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;       &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb22-2&quot;&gt;&lt;a href=&quot;#cb22-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; uMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; u)&lt;/span&gt;
&lt;span id=&quot;cb22-3&quot;&gt;&lt;a href=&quot;#cb22-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; vMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; v)&lt;/span&gt;
&lt;span id=&quot;cb22-4&quot;&gt;&lt;a href=&quot;#cb22-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; wMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; w)&lt;/span&gt;
&lt;span id=&quot;cb22-5&quot;&gt;&lt;a href=&quot;#cb22-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-6&quot;&gt;&lt;a href=&quot;#cb22-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of (&amp;lt;*&amp;gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-7&quot;&gt;&lt;a href=&quot;#cb22-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;       (&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuMap cuDefault&lt;/span&gt;
&lt;span id=&quot;cb22-8&quot;&gt;&lt;a href=&quot;#cb22-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-9&quot;&gt;&lt;a href=&quot;#cb22-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; uMap) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; u) &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-10&quot;&gt;&lt;a href=&quot;#cb22-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-11&quot;&gt;&lt;a href=&quot;#cb22-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; u&lt;/span&gt;
&lt;span id=&quot;cb22-12&quot;&gt;&lt;a href=&quot;#cb22-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&quot;cb22-13&quot;&gt;&lt;a href=&quot;#cb22-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; vMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; v)&lt;/span&gt;
&lt;span id=&quot;cb22-14&quot;&gt;&lt;a href=&quot;#cb22-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; wMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; w)&lt;/span&gt;
&lt;span id=&quot;cb22-15&quot;&gt;&lt;a href=&quot;#cb22-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-16&quot;&gt;&lt;a href=&quot;#cb22-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- mempty &amp;lt;.&amp;gt; x = mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-17&quot;&gt;&lt;a href=&quot;#cb22-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;       (&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuMap cuDefault&lt;/span&gt;
&lt;span id=&quot;cb22-18&quot;&gt;&lt;a href=&quot;#cb22-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-19&quot;&gt;&lt;a href=&quot;#cb22-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; u) &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-20&quot;&gt;&lt;a href=&quot;#cb22-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-21&quot;&gt;&lt;a href=&quot;#cb22-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; u&lt;/span&gt;
&lt;span id=&quot;cb22-22&quot;&gt;&lt;a href=&quot;#cb22-22&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&quot;cb22-23&quot;&gt;&lt;a href=&quot;#cb22-23&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; vMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; v)&lt;/span&gt;
&lt;span id=&quot;cb22-24&quot;&gt;&lt;a href=&quot;#cb22-24&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; wMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; w)&lt;/span&gt;
&lt;span id=&quot;cb22-25&quot;&gt;&lt;a href=&quot;#cb22-25&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-26&quot;&gt;&lt;a href=&quot;#cb22-26&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f mempty = mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-27&quot;&gt;&lt;a href=&quot;#cb22-27&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;       (&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuMap cuDefault&lt;/span&gt;
&lt;span id=&quot;cb22-28&quot;&gt;&lt;a href=&quot;#cb22-28&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-29&quot;&gt;&lt;a href=&quot;#cb22-29&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-30&quot;&gt;&lt;a href=&quot;#cb22-30&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-31&quot;&gt;&lt;a href=&quot;#cb22-31&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; u&lt;/span&gt;
&lt;span id=&quot;cb22-32&quot;&gt;&lt;a href=&quot;#cb22-32&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&quot;cb22-33&quot;&gt;&lt;a href=&quot;#cb22-33&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; vMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; v)&lt;/span&gt;
&lt;span id=&quot;cb22-34&quot;&gt;&lt;a href=&quot;#cb22-34&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; wMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; w)&lt;/span&gt;
&lt;span id=&quot;cb22-35&quot;&gt;&lt;a href=&quot;#cb22-35&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-36&quot;&gt;&lt;a href=&quot;#cb22-36&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure f &amp;lt;*&amp;gt; pure x = pure (f x)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-37&quot;&gt;&lt;a href=&quot;#cb22-37&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;       (&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuMap cuDefault&lt;/span&gt;
&lt;span id=&quot;cb22-38&quot;&gt;&lt;a href=&quot;#cb22-38&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-39&quot;&gt;&lt;a href=&quot;#cb22-39&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-40&quot;&gt;&lt;a href=&quot;#cb22-40&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-41&quot;&gt;&lt;a href=&quot;#cb22-41&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; ((&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) u)&lt;/span&gt;
&lt;span id=&quot;cb22-42&quot;&gt;&lt;a href=&quot;#cb22-42&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&quot;cb22-43&quot;&gt;&lt;a href=&quot;#cb22-43&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; vMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; v)&lt;/span&gt;
&lt;span id=&quot;cb22-44&quot;&gt;&lt;a href=&quot;#cb22-44&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; wMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; w)&lt;/span&gt;
&lt;span id=&quot;cb22-45&quot;&gt;&lt;a href=&quot;#cb22-45&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-46&quot;&gt;&lt;a href=&quot;#cb22-46&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- x &amp;lt;&amp;gt; mempty = x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-47&quot;&gt;&lt;a href=&quot;#cb22-47&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- mempty &amp;lt;&amp;gt; x = x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-48&quot;&gt;&lt;a href=&quot;#cb22-48&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;       (&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuMap cuDefault&lt;/span&gt;
&lt;span id=&quot;cb22-49&quot;&gt;&lt;a href=&quot;#cb22-49&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-50&quot;&gt;&lt;a href=&quot;#cb22-50&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap&lt;/span&gt;
&lt;span id=&quot;cb22-51&quot;&gt;&lt;a href=&quot;#cb22-51&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-52&quot;&gt;&lt;a href=&quot;#cb22-52&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; ((&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) u)&lt;/span&gt;
&lt;span id=&quot;cb22-53&quot;&gt;&lt;a href=&quot;#cb22-53&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&quot;cb22-54&quot;&gt;&lt;a href=&quot;#cb22-54&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; vMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; v)&lt;/span&gt;
&lt;span id=&quot;cb22-55&quot;&gt;&lt;a href=&quot;#cb22-55&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; wMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; w)&lt;/span&gt;
&lt;span id=&quot;cb22-56&quot;&gt;&lt;a href=&quot;#cb22-56&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-57&quot;&gt;&lt;a href=&quot;#cb22-57&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Simplify&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-58&quot;&gt;&lt;a href=&quot;#cb22-58&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;       (&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap) (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;)))&lt;/span&gt;
&lt;span id=&quot;cb22-59&quot;&gt;&lt;a href=&quot;#cb22-59&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; vMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; v)&lt;/span&gt;
&lt;span id=&quot;cb22-60&quot;&gt;&lt;a href=&quot;#cb22-60&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; wMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; w)&lt;/span&gt;
&lt;span id=&quot;cb22-61&quot;&gt;&lt;a href=&quot;#cb22-61&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-62&quot;&gt;&lt;a href=&quot;#cb22-62&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of (&amp;lt;*&amp;gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-63&quot;&gt;&lt;a href=&quot;#cb22-63&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;       (&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvMap cuvDefault&lt;/span&gt;
&lt;span id=&quot;cb22-64&quot;&gt;&lt;a href=&quot;#cb22-64&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-65&quot;&gt;&lt;a href=&quot;#cb22-65&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuvMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-66&quot;&gt;&lt;a href=&quot;#cb22-66&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                    (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-67&quot;&gt;&lt;a href=&quot;#cb22-67&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) vMap&lt;/span&gt;
&lt;span id=&quot;cb22-68&quot;&gt;&lt;a href=&quot;#cb22-68&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; v) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap)&lt;/span&gt;
&lt;span id=&quot;cb22-69&quot;&gt;&lt;a href=&quot;#cb22-69&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-70&quot;&gt;&lt;a href=&quot;#cb22-70&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuvDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; v&lt;/span&gt;
&lt;span id=&quot;cb22-71&quot;&gt;&lt;a href=&quot;#cb22-71&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&quot;cb22-72&quot;&gt;&lt;a href=&quot;#cb22-72&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; wMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; w)&lt;/span&gt;
&lt;span id=&quot;cb22-73&quot;&gt;&lt;a href=&quot;#cb22-73&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-74&quot;&gt;&lt;a href=&quot;#cb22-74&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f (fmap g x) = fmap (f . g) x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-75&quot;&gt;&lt;a href=&quot;#cb22-75&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;       (&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvMap cuvDefault&lt;/span&gt;
&lt;span id=&quot;cb22-76&quot;&gt;&lt;a href=&quot;#cb22-76&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-77&quot;&gt;&lt;a href=&quot;#cb22-77&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuvMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-78&quot;&gt;&lt;a href=&quot;#cb22-78&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                    (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-79&quot;&gt;&lt;a href=&quot;#cb22-79&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) vMap&lt;/span&gt;
&lt;span id=&quot;cb22-80&quot;&gt;&lt;a href=&quot;#cb22-80&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) uMap&lt;/span&gt;
&lt;span id=&quot;cb22-81&quot;&gt;&lt;a href=&quot;#cb22-81&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-82&quot;&gt;&lt;a href=&quot;#cb22-82&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuvDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; v&lt;/span&gt;
&lt;span id=&quot;cb22-83&quot;&gt;&lt;a href=&quot;#cb22-83&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&quot;cb22-84&quot;&gt;&lt;a href=&quot;#cb22-84&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; wMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; w)&lt;/span&gt;
&lt;span id=&quot;cb22-85&quot;&gt;&lt;a href=&quot;#cb22-85&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-86&quot;&gt;&lt;a href=&quot;#cb22-86&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- ((.) u) = \v -&amp;gt; u . v&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-87&quot;&gt;&lt;a href=&quot;#cb22-87&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;       (&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvMap cuvDefault&lt;/span&gt;
&lt;span id=&quot;cb22-88&quot;&gt;&lt;a href=&quot;#cb22-88&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-89&quot;&gt;&lt;a href=&quot;#cb22-89&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuvMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-90&quot;&gt;&lt;a href=&quot;#cb22-90&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                    (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-91&quot;&gt;&lt;a href=&quot;#cb22-91&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) vMap&lt;/span&gt;
&lt;span id=&quot;cb22-92&quot;&gt;&lt;a href=&quot;#cb22-92&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) uMap&lt;/span&gt;
&lt;span id=&quot;cb22-93&quot;&gt;&lt;a href=&quot;#cb22-93&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-94&quot;&gt;&lt;a href=&quot;#cb22-94&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuvDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; v&lt;/span&gt;
&lt;span id=&quot;cb22-95&quot;&gt;&lt;a href=&quot;#cb22-95&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&quot;cb22-96&quot;&gt;&lt;a href=&quot;#cb22-96&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; wMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; w)&lt;/span&gt;
&lt;span id=&quot;cb22-97&quot;&gt;&lt;a href=&quot;#cb22-97&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-98&quot;&gt;&lt;a href=&quot;#cb22-98&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure f &amp;lt;*&amp;gt; pure x = pure (f x)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-99&quot;&gt;&lt;a href=&quot;#cb22-99&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;       (&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvMap cuvDefault&lt;/span&gt;
&lt;span id=&quot;cb22-100&quot;&gt;&lt;a href=&quot;#cb22-100&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-101&quot;&gt;&lt;a href=&quot;#cb22-101&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuvMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-102&quot;&gt;&lt;a href=&quot;#cb22-102&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                    (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-103&quot;&gt;&lt;a href=&quot;#cb22-103&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) vMap&lt;/span&gt;
&lt;span id=&quot;cb22-104&quot;&gt;&lt;a href=&quot;#cb22-104&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) uMap&lt;/span&gt;
&lt;span id=&quot;cb22-105&quot;&gt;&lt;a href=&quot;#cb22-105&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-106&quot;&gt;&lt;a href=&quot;#cb22-106&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            cuvDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v)&lt;/span&gt;
&lt;span id=&quot;cb22-107&quot;&gt;&lt;a href=&quot;#cb22-107&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&quot;cb22-108&quot;&gt;&lt;a href=&quot;#cb22-108&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; wMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; w)&lt;/span&gt;
&lt;span id=&quot;cb22-109&quot;&gt;&lt;a href=&quot;#cb22-109&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-110&quot;&gt;&lt;a href=&quot;#cb22-110&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of (&amp;lt;*&amp;gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-111&quot;&gt;&lt;a href=&quot;#cb22-111&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-112&quot;&gt;&lt;a href=&quot;#cb22-112&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-113&quot;&gt;&lt;a href=&quot;#cb22-113&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (cuvMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) wMap &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) cuvMap &lt;/span&gt;
&lt;span id=&quot;cb22-114&quot;&gt;&lt;a href=&quot;#cb22-114&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-115&quot;&gt;&lt;a href=&quot;#cb22-115&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        cuvMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-116&quot;&gt;&lt;a href=&quot;#cb22-116&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-117&quot;&gt;&lt;a href=&quot;#cb22-117&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) vMap&lt;/span&gt;
&lt;span id=&quot;cb22-118&quot;&gt;&lt;a href=&quot;#cb22-118&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) uMap&lt;/span&gt;
&lt;span id=&quot;cb22-119&quot;&gt;&lt;a href=&quot;#cb22-119&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-120&quot;&gt;&lt;a href=&quot;#cb22-120&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; v&lt;/span&gt;
&lt;span id=&quot;cb22-121&quot;&gt;&lt;a href=&quot;#cb22-121&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-122&quot;&gt;&lt;a href=&quot;#cb22-122&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (f &amp;lt;&amp;gt; g) &amp;lt;.&amp;gt; x = (f &amp;lt;.&amp;gt; x) &amp;lt;&amp;gt; (g &amp;lt;.&amp;gt; x)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-123&quot;&gt;&lt;a href=&quot;#cb22-123&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f (x &amp;lt;&amp;gt; y) = fmap f x &amp;lt;&amp;gt; fmap f y&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-124&quot;&gt;&lt;a href=&quot;#cb22-124&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-125&quot;&gt;&lt;a href=&quot;#cb22-125&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-126&quot;&gt;&lt;a href=&quot;#cb22-126&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-127&quot;&gt;&lt;a href=&quot;#cb22-127&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-128&quot;&gt;&lt;a href=&quot;#cb22-128&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-129&quot;&gt;&lt;a href=&quot;#cb22-129&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-130&quot;&gt;&lt;a href=&quot;#cb22-130&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) wMap&lt;/span&gt;
&lt;span id=&quot;cb22-131&quot;&gt;&lt;a href=&quot;#cb22-131&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-132&quot;&gt;&lt;a href=&quot;#cb22-132&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-133&quot;&gt;&lt;a href=&quot;#cb22-133&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) uMap)&lt;/span&gt;
&lt;span id=&quot;cb22-134&quot;&gt;&lt;a href=&quot;#cb22-134&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-135&quot;&gt;&lt;a href=&quot;#cb22-135&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; w&lt;/span&gt;
&lt;span id=&quot;cb22-136&quot;&gt;&lt;a href=&quot;#cb22-136&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-137&quot;&gt;&lt;a href=&quot;#cb22-137&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure f &amp;lt;*&amp;gt; pure x = pure (f x)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-138&quot;&gt;&lt;a href=&quot;#cb22-138&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-139&quot;&gt;&lt;a href=&quot;#cb22-139&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-140&quot;&gt;&lt;a href=&quot;#cb22-140&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-141&quot;&gt;&lt;a href=&quot;#cb22-141&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-142&quot;&gt;&lt;a href=&quot;#cb22-142&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-143&quot;&gt;&lt;a href=&quot;#cb22-143&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-144&quot;&gt;&lt;a href=&quot;#cb22-144&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) wMap&lt;/span&gt;
&lt;span id=&quot;cb22-145&quot;&gt;&lt;a href=&quot;#cb22-145&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-146&quot;&gt;&lt;a href=&quot;#cb22-146&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-147&quot;&gt;&lt;a href=&quot;#cb22-147&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) uMap)&lt;/span&gt;
&lt;span id=&quot;cb22-148&quot;&gt;&lt;a href=&quot;#cb22-148&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-149&quot;&gt;&lt;a href=&quot;#cb22-149&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-150&quot;&gt;&lt;a href=&quot;#cb22-150&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-151&quot;&gt;&lt;a href=&quot;#cb22-151&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap (.) u &amp;lt;.&amp;gt; v &amp;lt;.&amp;gt; w = u &amp;lt;.&amp;gt; (v &amp;lt;.&amp;gt; w)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-152&quot;&gt;&lt;a href=&quot;#cb22-152&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-153&quot;&gt;&lt;a href=&quot;#cb22-153&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-154&quot;&gt;&lt;a href=&quot;#cb22-154&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-155&quot;&gt;&lt;a href=&quot;#cb22-155&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap))&lt;/span&gt;
&lt;span id=&quot;cb22-156&quot;&gt;&lt;a href=&quot;#cb22-156&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-157&quot;&gt;&lt;a href=&quot;#cb22-157&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-158&quot;&gt;&lt;a href=&quot;#cb22-158&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) wMap&lt;/span&gt;
&lt;span id=&quot;cb22-159&quot;&gt;&lt;a href=&quot;#cb22-159&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-160&quot;&gt;&lt;a href=&quot;#cb22-160&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-161&quot;&gt;&lt;a href=&quot;#cb22-161&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) uMap)&lt;/span&gt;
&lt;span id=&quot;cb22-162&quot;&gt;&lt;a href=&quot;#cb22-162&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-163&quot;&gt;&lt;a href=&quot;#cb22-163&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-164&quot;&gt;&lt;a href=&quot;#cb22-164&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-165&quot;&gt;&lt;a href=&quot;#cb22-165&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f (x &amp;lt;.&amp;gt; y) = fmap (f .) x &amp;lt;.&amp;gt; y&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-166&quot;&gt;&lt;a href=&quot;#cb22-166&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-167&quot;&gt;&lt;a href=&quot;#cb22-167&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-168&quot;&gt;&lt;a href=&quot;#cb22-168&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-169&quot;&gt;&lt;a href=&quot;#cb22-169&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap))&lt;/span&gt;
&lt;span id=&quot;cb22-170&quot;&gt;&lt;a href=&quot;#cb22-170&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-171&quot;&gt;&lt;a href=&quot;#cb22-171&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-172&quot;&gt;&lt;a href=&quot;#cb22-172&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) wMap&lt;/span&gt;
&lt;span id=&quot;cb22-173&quot;&gt;&lt;a href=&quot;#cb22-173&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-174&quot;&gt;&lt;a href=&quot;#cb22-174&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-175&quot;&gt;&lt;a href=&quot;#cb22-175&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) uMap)&lt;/span&gt;
&lt;span id=&quot;cb22-176&quot;&gt;&lt;a href=&quot;#cb22-176&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-177&quot;&gt;&lt;a href=&quot;#cb22-177&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-178&quot;&gt;&lt;a href=&quot;#cb22-178&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-179&quot;&gt;&lt;a href=&quot;#cb22-179&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- x &amp;lt;.&amp;gt; fmap f y = fmap (. f) x &amp;lt;.&amp;gt; y&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-180&quot;&gt;&lt;a href=&quot;#cb22-180&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-181&quot;&gt;&lt;a href=&quot;#cb22-181&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-182&quot;&gt;&lt;a href=&quot;#cb22-182&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-183&quot;&gt;&lt;a href=&quot;#cb22-183&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap))&lt;/span&gt;
&lt;span id=&quot;cb22-184&quot;&gt;&lt;a href=&quot;#cb22-184&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-185&quot;&gt;&lt;a href=&quot;#cb22-185&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-186&quot;&gt;&lt;a href=&quot;#cb22-186&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) wMap&lt;/span&gt;
&lt;span id=&quot;cb22-187&quot;&gt;&lt;a href=&quot;#cb22-187&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-188&quot;&gt;&lt;a href=&quot;#cb22-188&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-189&quot;&gt;&lt;a href=&quot;#cb22-189&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) uMap)&lt;/span&gt;
&lt;span id=&quot;cb22-190&quot;&gt;&lt;a href=&quot;#cb22-190&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-191&quot;&gt;&lt;a href=&quot;#cb22-191&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-192&quot;&gt;&lt;a href=&quot;#cb22-192&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-193&quot;&gt;&lt;a href=&quot;#cb22-193&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f (x &amp;lt;.&amp;gt; y) = fmap (f .) x &amp;lt;.&amp;gt; y&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-194&quot;&gt;&lt;a href=&quot;#cb22-194&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-195&quot;&gt;&lt;a href=&quot;#cb22-195&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-196&quot;&gt;&lt;a href=&quot;#cb22-196&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-197&quot;&gt;&lt;a href=&quot;#cb22-197&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap))&lt;/span&gt;
&lt;span id=&quot;cb22-198&quot;&gt;&lt;a href=&quot;#cb22-198&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-199&quot;&gt;&lt;a href=&quot;#cb22-199&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-200&quot;&gt;&lt;a href=&quot;#cb22-200&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) wMap&lt;/span&gt;
&lt;span id=&quot;cb22-201&quot;&gt;&lt;a href=&quot;#cb22-201&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; ((&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) uMap) &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-202&quot;&gt;&lt;a href=&quot;#cb22-202&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-203&quot;&gt;&lt;a href=&quot;#cb22-203&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) uMap)&lt;/span&gt;
&lt;span id=&quot;cb22-204&quot;&gt;&lt;a href=&quot;#cb22-204&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-205&quot;&gt;&lt;a href=&quot;#cb22-205&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-206&quot;&gt;&lt;a href=&quot;#cb22-206&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-207&quot;&gt;&lt;a href=&quot;#cb22-207&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f (fmap g x) = fmap (f . g) x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-208&quot;&gt;&lt;a href=&quot;#cb22-208&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-209&quot;&gt;&lt;a href=&quot;#cb22-209&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-210&quot;&gt;&lt;a href=&quot;#cb22-210&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-211&quot;&gt;&lt;a href=&quot;#cb22-211&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap))&lt;/span&gt;
&lt;span id=&quot;cb22-212&quot;&gt;&lt;a href=&quot;#cb22-212&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-213&quot;&gt;&lt;a href=&quot;#cb22-213&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-214&quot;&gt;&lt;a href=&quot;#cb22-214&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) wMap&lt;/span&gt;
&lt;span id=&quot;cb22-215&quot;&gt;&lt;a href=&quot;#cb22-215&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (((&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;)) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-216&quot;&gt;&lt;a href=&quot;#cb22-216&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-217&quot;&gt;&lt;a href=&quot;#cb22-217&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) uMap)&lt;/span&gt;
&lt;span id=&quot;cb22-218&quot;&gt;&lt;a href=&quot;#cb22-218&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-219&quot;&gt;&lt;a href=&quot;#cb22-219&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-220&quot;&gt;&lt;a href=&quot;#cb22-220&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-221&quot;&gt;&lt;a href=&quot;#cb22-221&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- ((($ w) .) . (.))&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-222&quot;&gt;&lt;a href=&quot;#cb22-222&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- = \u -&amp;gt; (($ w) .) ((.) u)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-223&quot;&gt;&lt;a href=&quot;#cb22-223&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- = \u -&amp;gt; (($ w) .) (u .)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-224&quot;&gt;&lt;a href=&quot;#cb22-224&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- = \u -&amp;gt; ($ w) . (u .)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-225&quot;&gt;&lt;a href=&quot;#cb22-225&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- = \u v -&amp;gt; ($ w) ((u .) v)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-226&quot;&gt;&lt;a href=&quot;#cb22-226&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- = \u v -&amp;gt; ($ w) (u . v)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-227&quot;&gt;&lt;a href=&quot;#cb22-227&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- = \u v -&amp;gt; (u . v) w&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-228&quot;&gt;&lt;a href=&quot;#cb22-228&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- = \u v -&amp;gt; u (v w)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-229&quot;&gt;&lt;a href=&quot;#cb22-229&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- = \u v -&amp;gt; u (($ w) v)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-230&quot;&gt;&lt;a href=&quot;#cb22-230&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- = \u -&amp;gt; u . ($ w)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-231&quot;&gt;&lt;a href=&quot;#cb22-231&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- = (. ($ w))&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-232&quot;&gt;&lt;a href=&quot;#cb22-232&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-233&quot;&gt;&lt;a href=&quot;#cb22-233&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-234&quot;&gt;&lt;a href=&quot;#cb22-234&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-235&quot;&gt;&lt;a href=&quot;#cb22-235&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap))&lt;/span&gt;
&lt;span id=&quot;cb22-236&quot;&gt;&lt;a href=&quot;#cb22-236&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-237&quot;&gt;&lt;a href=&quot;#cb22-237&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-238&quot;&gt;&lt;a href=&quot;#cb22-238&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) wMap&lt;/span&gt;
&lt;span id=&quot;cb22-239&quot;&gt;&lt;a href=&quot;#cb22-239&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w)) uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-240&quot;&gt;&lt;a href=&quot;#cb22-240&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-241&quot;&gt;&lt;a href=&quot;#cb22-241&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) uMap)&lt;/span&gt;
&lt;span id=&quot;cb22-242&quot;&gt;&lt;a href=&quot;#cb22-242&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-243&quot;&gt;&lt;a href=&quot;#cb22-243&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-244&quot;&gt;&lt;a href=&quot;#cb22-244&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-245&quot;&gt;&lt;a href=&quot;#cb22-245&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- x &amp;lt;.&amp;gt; (f &amp;lt;$&amp;gt; y) = (. f) &amp;lt;$&amp;gt; x &amp;lt;.&amp;gt; y&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-246&quot;&gt;&lt;a href=&quot;#cb22-246&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-247&quot;&gt;&lt;a href=&quot;#cb22-247&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-248&quot;&gt;&lt;a href=&quot;#cb22-248&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-249&quot;&gt;&lt;a href=&quot;#cb22-249&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap))&lt;/span&gt;
&lt;span id=&quot;cb22-250&quot;&gt;&lt;a href=&quot;#cb22-250&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-251&quot;&gt;&lt;a href=&quot;#cb22-251&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-252&quot;&gt;&lt;a href=&quot;#cb22-252&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) wMap&lt;/span&gt;
&lt;span id=&quot;cb22-253&quot;&gt;&lt;a href=&quot;#cb22-253&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-254&quot;&gt;&lt;a href=&quot;#cb22-254&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-255&quot;&gt;&lt;a href=&quot;#cb22-255&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) uMap)&lt;/span&gt;
&lt;span id=&quot;cb22-256&quot;&gt;&lt;a href=&quot;#cb22-256&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-257&quot;&gt;&lt;a href=&quot;#cb22-257&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-258&quot;&gt;&lt;a href=&quot;#cb22-258&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-259&quot;&gt;&lt;a href=&quot;#cb22-259&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f (fmap g x) = fmap (f . g) w&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-260&quot;&gt;&lt;a href=&quot;#cb22-260&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- (f . g) = \x -&amp;gt; f (g x)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-261&quot;&gt;&lt;a href=&quot;#cb22-261&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-262&quot;&gt;&lt;a href=&quot;#cb22-262&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-263&quot;&gt;&lt;a href=&quot;#cb22-263&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-264&quot;&gt;&lt;a href=&quot;#cb22-264&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap))&lt;/span&gt;
&lt;span id=&quot;cb22-265&quot;&gt;&lt;a href=&quot;#cb22-265&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-266&quot;&gt;&lt;a href=&quot;#cb22-266&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-267&quot;&gt;&lt;a href=&quot;#cb22-267&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\w &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) wMap&lt;/span&gt;
&lt;span id=&quot;cb22-268&quot;&gt;&lt;a href=&quot;#cb22-268&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-269&quot;&gt;&lt;a href=&quot;#cb22-269&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\v &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) vMap&lt;/span&gt;
&lt;span id=&quot;cb22-270&quot;&gt;&lt;a href=&quot;#cb22-270&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) uMap&lt;/span&gt;
&lt;span id=&quot;cb22-271&quot;&gt;&lt;a href=&quot;#cb22-271&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-272&quot;&gt;&lt;a href=&quot;#cb22-272&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-273&quot;&gt;&lt;a href=&quot;#cb22-273&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-274&quot;&gt;&lt;a href=&quot;#cb22-274&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- `fmap (\w -&amp;gt; u (v w)) wMap &amp;lt;&amp;gt; (uMap &amp;lt;.&amp;gt; fmap ($ w) vMap)` commutes because&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-275&quot;&gt;&lt;a href=&quot;#cb22-275&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- the colliding keys are shadowed by `(uMap &amp;lt;.&amp;gt; (vMap &amp;lt;.&amp;gt; wMap))`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-276&quot;&gt;&lt;a href=&quot;#cb22-276&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-277&quot;&gt;&lt;a href=&quot;#cb22-277&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-278&quot;&gt;&lt;a href=&quot;#cb22-278&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-279&quot;&gt;&lt;a href=&quot;#cb22-279&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap))&lt;/span&gt;
&lt;span id=&quot;cb22-280&quot;&gt;&lt;a href=&quot;#cb22-280&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-281&quot;&gt;&lt;a href=&quot;#cb22-281&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-282&quot;&gt;&lt;a href=&quot;#cb22-282&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-283&quot;&gt;&lt;a href=&quot;#cb22-283&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\w &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) wMap&lt;/span&gt;
&lt;span id=&quot;cb22-284&quot;&gt;&lt;a href=&quot;#cb22-284&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\v &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) vMap&lt;/span&gt;
&lt;span id=&quot;cb22-285&quot;&gt;&lt;a href=&quot;#cb22-285&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) uMap&lt;/span&gt;
&lt;span id=&quot;cb22-286&quot;&gt;&lt;a href=&quot;#cb22-286&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-287&quot;&gt;&lt;a href=&quot;#cb22-287&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-288&quot;&gt;&lt;a href=&quot;#cb22-288&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-289&quot;&gt;&lt;a href=&quot;#cb22-289&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- `fmap u (vMap &amp;lt;.&amp;gt; wMap) &amp;lt;&amp;gt; (uMap &amp;lt;.&amp;gt; fmap v wMap)` commutes because the&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-290&quot;&gt;&lt;a href=&quot;#cb22-290&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- colliding keys are sahdowed by `(uMap &amp;lt;.&amp;gt; (vMap &amp;lt;.&amp;gt; wMap))`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-291&quot;&gt;&lt;a href=&quot;#cb22-291&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-292&quot;&gt;&lt;a href=&quot;#cb22-292&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-293&quot;&gt;&lt;a href=&quot;#cb22-293&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-294&quot;&gt;&lt;a href=&quot;#cb22-294&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap))&lt;/span&gt;
&lt;span id=&quot;cb22-295&quot;&gt;&lt;a href=&quot;#cb22-295&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-296&quot;&gt;&lt;a href=&quot;#cb22-296&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-297&quot;&gt;&lt;a href=&quot;#cb22-297&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-298&quot;&gt;&lt;a href=&quot;#cb22-298&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\w &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) wMap&lt;/span&gt;
&lt;span id=&quot;cb22-299&quot;&gt;&lt;a href=&quot;#cb22-299&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\v &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) vMap&lt;/span&gt;
&lt;span id=&quot;cb22-300&quot;&gt;&lt;a href=&quot;#cb22-300&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) uMap&lt;/span&gt;
&lt;span id=&quot;cb22-301&quot;&gt;&lt;a href=&quot;#cb22-301&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-302&quot;&gt;&lt;a href=&quot;#cb22-302&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-303&quot;&gt;&lt;a href=&quot;#cb22-303&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-304&quot;&gt;&lt;a href=&quot;#cb22-304&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- `fmap u (vMap &amp;lt;.&amp;gt; wMap) &amp;lt;&amp;gt; (uMap &amp;lt;.&amp;gt; fmap ($ w) vMap)` commutes because the&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-305&quot;&gt;&lt;a href=&quot;#cb22-305&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- colliding keys are sahdowed by `(uMap &amp;lt;.&amp;gt; (vMap &amp;lt;.&amp;gt; wMap))`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-306&quot;&gt;&lt;a href=&quot;#cb22-306&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-307&quot;&gt;&lt;a href=&quot;#cb22-307&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-308&quot;&gt;&lt;a href=&quot;#cb22-308&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-309&quot;&gt;&lt;a href=&quot;#cb22-309&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap))&lt;/span&gt;
&lt;span id=&quot;cb22-310&quot;&gt;&lt;a href=&quot;#cb22-310&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-311&quot;&gt;&lt;a href=&quot;#cb22-311&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-312&quot;&gt;&lt;a href=&quot;#cb22-312&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-313&quot;&gt;&lt;a href=&quot;#cb22-313&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\w &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) wMap&lt;/span&gt;
&lt;span id=&quot;cb22-314&quot;&gt;&lt;a href=&quot;#cb22-314&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\v &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) vMap&lt;/span&gt;
&lt;span id=&quot;cb22-315&quot;&gt;&lt;a href=&quot;#cb22-315&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) uMap&lt;/span&gt;
&lt;span id=&quot;cb22-316&quot;&gt;&lt;a href=&quot;#cb22-316&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-317&quot;&gt;&lt;a href=&quot;#cb22-317&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-318&quot;&gt;&lt;a href=&quot;#cb22-318&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-319&quot;&gt;&lt;a href=&quot;#cb22-319&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- \w -&amp;gt; u (v w) = u . v&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-320&quot;&gt;&lt;a href=&quot;#cb22-320&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-321&quot;&gt;&lt;a href=&quot;#cb22-321&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-322&quot;&gt;&lt;a href=&quot;#cb22-322&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-323&quot;&gt;&lt;a href=&quot;#cb22-323&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap))&lt;/span&gt;
&lt;span id=&quot;cb22-324&quot;&gt;&lt;a href=&quot;#cb22-324&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-325&quot;&gt;&lt;a href=&quot;#cb22-325&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-326&quot;&gt;&lt;a href=&quot;#cb22-326&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-327&quot;&gt;&lt;a href=&quot;#cb22-327&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; v) wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-328&quot;&gt;&lt;a href=&quot;#cb22-328&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\v &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) vMap&lt;/span&gt;
&lt;span id=&quot;cb22-329&quot;&gt;&lt;a href=&quot;#cb22-329&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) uMap&lt;/span&gt;
&lt;span id=&quot;cb22-330&quot;&gt;&lt;a href=&quot;#cb22-330&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-331&quot;&gt;&lt;a href=&quot;#cb22-331&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-332&quot;&gt;&lt;a href=&quot;#cb22-332&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-333&quot;&gt;&lt;a href=&quot;#cb22-333&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f (fmap g x) = fmap (f . g) x, in reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-334&quot;&gt;&lt;a href=&quot;#cb22-334&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-335&quot;&gt;&lt;a href=&quot;#cb22-335&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-336&quot;&gt;&lt;a href=&quot;#cb22-336&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-337&quot;&gt;&lt;a href=&quot;#cb22-337&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap))&lt;/span&gt;
&lt;span id=&quot;cb22-338&quot;&gt;&lt;a href=&quot;#cb22-338&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-339&quot;&gt;&lt;a href=&quot;#cb22-339&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-340&quot;&gt;&lt;a href=&quot;#cb22-340&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-341&quot;&gt;&lt;a href=&quot;#cb22-341&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-342&quot;&gt;&lt;a href=&quot;#cb22-342&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\v &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) vMap&lt;/span&gt;
&lt;span id=&quot;cb22-343&quot;&gt;&lt;a href=&quot;#cb22-343&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) uMap&lt;/span&gt;
&lt;span id=&quot;cb22-344&quot;&gt;&lt;a href=&quot;#cb22-344&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-345&quot;&gt;&lt;a href=&quot;#cb22-345&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-346&quot;&gt;&lt;a href=&quot;#cb22-346&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-347&quot;&gt;&lt;a href=&quot;#cb22-347&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- \v -&amp;gt; u (v w)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-348&quot;&gt;&lt;a href=&quot;#cb22-348&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- = \v -&amp;gt; u (($ w) v)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-349&quot;&gt;&lt;a href=&quot;#cb22-349&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- = u . ($ w)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-350&quot;&gt;&lt;a href=&quot;#cb22-350&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-351&quot;&gt;&lt;a href=&quot;#cb22-351&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-352&quot;&gt;&lt;a href=&quot;#cb22-352&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-353&quot;&gt;&lt;a href=&quot;#cb22-353&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap))&lt;/span&gt;
&lt;span id=&quot;cb22-354&quot;&gt;&lt;a href=&quot;#cb22-354&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-355&quot;&gt;&lt;a href=&quot;#cb22-355&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-356&quot;&gt;&lt;a href=&quot;#cb22-356&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-357&quot;&gt;&lt;a href=&quot;#cb22-357&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-358&quot;&gt;&lt;a href=&quot;#cb22-358&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (u &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w)) vMap&lt;/span&gt;
&lt;span id=&quot;cb22-359&quot;&gt;&lt;a href=&quot;#cb22-359&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) uMap&lt;/span&gt;
&lt;span id=&quot;cb22-360&quot;&gt;&lt;a href=&quot;#cb22-360&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-361&quot;&gt;&lt;a href=&quot;#cb22-361&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-362&quot;&gt;&lt;a href=&quot;#cb22-362&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-363&quot;&gt;&lt;a href=&quot;#cb22-363&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f (fmap g x) = fmap (f . g) x, in reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-364&quot;&gt;&lt;a href=&quot;#cb22-364&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-365&quot;&gt;&lt;a href=&quot;#cb22-365&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-366&quot;&gt;&lt;a href=&quot;#cb22-366&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-367&quot;&gt;&lt;a href=&quot;#cb22-367&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap))&lt;/span&gt;
&lt;span id=&quot;cb22-368&quot;&gt;&lt;a href=&quot;#cb22-368&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-369&quot;&gt;&lt;a href=&quot;#cb22-369&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-370&quot;&gt;&lt;a href=&quot;#cb22-370&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-371&quot;&gt;&lt;a href=&quot;#cb22-371&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-372&quot;&gt;&lt;a href=&quot;#cb22-372&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-373&quot;&gt;&lt;a href=&quot;#cb22-373&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (\u &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; u (v w)) uMap&lt;/span&gt;
&lt;span id=&quot;cb22-374&quot;&gt;&lt;a href=&quot;#cb22-374&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-375&quot;&gt;&lt;a href=&quot;#cb22-375&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-376&quot;&gt;&lt;a href=&quot;#cb22-376&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-377&quot;&gt;&lt;a href=&quot;#cb22-377&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- \f -&amp;gt; f x = ($ x)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-378&quot;&gt;&lt;a href=&quot;#cb22-378&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-379&quot;&gt;&lt;a href=&quot;#cb22-379&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-380&quot;&gt;&lt;a href=&quot;#cb22-380&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-381&quot;&gt;&lt;a href=&quot;#cb22-381&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap))&lt;/span&gt;
&lt;span id=&quot;cb22-382&quot;&gt;&lt;a href=&quot;#cb22-382&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-383&quot;&gt;&lt;a href=&quot;#cb22-383&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-384&quot;&gt;&lt;a href=&quot;#cb22-384&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-385&quot;&gt;&lt;a href=&quot;#cb22-385&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap)&lt;/span&gt;
&lt;span id=&quot;cb22-386&quot;&gt;&lt;a href=&quot;#cb22-386&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) vMap)&lt;/span&gt;
&lt;span id=&quot;cb22-387&quot;&gt;&lt;a href=&quot;#cb22-387&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; (v w)) uMap&lt;/span&gt;
&lt;span id=&quot;cb22-388&quot;&gt;&lt;a href=&quot;#cb22-388&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-389&quot;&gt;&lt;a href=&quot;#cb22-389&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-390&quot;&gt;&lt;a href=&quot;#cb22-390&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-391&quot;&gt;&lt;a href=&quot;#cb22-391&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- f &amp;lt;.&amp;gt; (x &amp;lt;&amp;gt; y) = (f &amp;lt;.&amp;gt; x) &amp;lt;&amp;gt; (f &amp;lt;.&amp;gt; y), in reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-392&quot;&gt;&lt;a href=&quot;#cb22-392&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f (x &amp;lt;&amp;gt; y) = fmap f x &amp;lt;&amp;gt; fmap f y, in reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-393&quot;&gt;&lt;a href=&quot;#cb22-393&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-394&quot;&gt;&lt;a href=&quot;#cb22-394&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-395&quot;&gt;&lt;a href=&quot;#cb22-395&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; vwMap) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u vwMap &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; (v w)) uMap&lt;/span&gt;
&lt;span id=&quot;cb22-396&quot;&gt;&lt;a href=&quot;#cb22-396&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-397&quot;&gt;&lt;a href=&quot;#cb22-397&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        vwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) vMap&lt;/span&gt;
&lt;span id=&quot;cb22-398&quot;&gt;&lt;a href=&quot;#cb22-398&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-399&quot;&gt;&lt;a href=&quot;#cb22-399&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (u (v w))&lt;/span&gt;
&lt;span id=&quot;cb22-400&quot;&gt;&lt;a href=&quot;#cb22-400&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-401&quot;&gt;&lt;a href=&quot;#cb22-401&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure f &amp;lt;*&amp;gt; pure x = pure (f x), in reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-402&quot;&gt;&lt;a href=&quot;#cb22-402&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; cuvwMap cuvwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-403&quot;&gt;&lt;a href=&quot;#cb22-403&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-404&quot;&gt;&lt;a href=&quot;#cb22-404&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; vwMap) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; u vwMap &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; (v w)) uMap&lt;/span&gt;
&lt;span id=&quot;cb22-405&quot;&gt;&lt;a href=&quot;#cb22-405&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-406&quot;&gt;&lt;a href=&quot;#cb22-406&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        vwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) vMap&lt;/span&gt;
&lt;span id=&quot;cb22-407&quot;&gt;&lt;a href=&quot;#cb22-407&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-408&quot;&gt;&lt;a href=&quot;#cb22-408&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    cuvwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; u &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (v w)&lt;/span&gt;
&lt;span id=&quot;cb22-409&quot;&gt;&lt;a href=&quot;#cb22-409&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-410&quot;&gt;&lt;a href=&quot;#cb22-410&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of (&amp;lt;*&amp;gt;), in reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-411&quot;&gt;&lt;a href=&quot;#cb22-411&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;   (   &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; uMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; u)&lt;/span&gt;
&lt;span id=&quot;cb22-412&quot;&gt;&lt;a href=&quot;#cb22-412&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; vwMap vwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-413&quot;&gt;&lt;a href=&quot;#cb22-413&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-414&quot;&gt;&lt;a href=&quot;#cb22-414&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            vwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) vMap&lt;/span&gt;
&lt;span id=&quot;cb22-415&quot;&gt;&lt;a href=&quot;#cb22-415&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-416&quot;&gt;&lt;a href=&quot;#cb22-416&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            vwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (v w)&lt;/span&gt;
&lt;span id=&quot;cb22-417&quot;&gt;&lt;a href=&quot;#cb22-417&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&quot;cb22-418&quot;&gt;&lt;a href=&quot;#cb22-418&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    )&lt;/span&gt;
&lt;span id=&quot;cb22-419&quot;&gt;&lt;a href=&quot;#cb22-419&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-420&quot;&gt;&lt;a href=&quot;#cb22-420&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure f &amp;lt;*&amp;gt; pure x = pure (f x), in reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-421&quot;&gt;&lt;a href=&quot;#cb22-421&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;   (   &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; uMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; u)&lt;/span&gt;
&lt;span id=&quot;cb22-422&quot;&gt;&lt;a href=&quot;#cb22-422&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; vwMap vwDefault&lt;/span&gt;
&lt;span id=&quot;cb22-423&quot;&gt;&lt;a href=&quot;#cb22-423&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-424&quot;&gt;&lt;a href=&quot;#cb22-424&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            vwMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (vMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; wMap) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; v wMap &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w) vMap &lt;/span&gt;
&lt;span id=&quot;cb22-425&quot;&gt;&lt;a href=&quot;#cb22-425&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-426&quot;&gt;&lt;a href=&quot;#cb22-426&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            vwDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; v &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; w&lt;/span&gt;
&lt;span id=&quot;cb22-427&quot;&gt;&lt;a href=&quot;#cb22-427&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&quot;cb22-428&quot;&gt;&lt;a href=&quot;#cb22-428&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    )&lt;/span&gt;
&lt;span id=&quot;cb22-429&quot;&gt;&lt;a href=&quot;#cb22-429&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-430&quot;&gt;&lt;a href=&quot;#cb22-430&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of (&amp;lt;*&amp;gt;), in reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-431&quot;&gt;&lt;a href=&quot;#cb22-431&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;   (   &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; uMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; u)&lt;/span&gt;
&lt;span id=&quot;cb22-432&quot;&gt;&lt;a href=&quot;#cb22-432&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (   &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; vMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; v)&lt;/span&gt;
&lt;span id=&quot;cb22-433&quot;&gt;&lt;a href=&quot;#cb22-433&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; wMap (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; w)&lt;/span&gt;
&lt;span id=&quot;cb22-434&quot;&gt;&lt;a href=&quot;#cb22-434&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id=&quot;cb22-435&quot;&gt;&lt;a href=&quot;#cb22-435&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    )&lt;/span&gt;
&lt;span id=&quot;cb22-436&quot;&gt;&lt;a href=&quot;#cb22-436&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-437&quot;&gt;&lt;a href=&quot;#cb22-437&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Contract:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-438&quot;&gt;&lt;a href=&quot;#cb22-438&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- u = Defaultable uMap uDefault&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-439&quot;&gt;&lt;a href=&quot;#cb22-439&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- v = Defaultable vMap vDefault&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-440&quot;&gt;&lt;a href=&quot;#cb22-440&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- w = Defaultable wMap wDefault&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-441&quot;&gt;&lt;a href=&quot;#cb22-441&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (v &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; w)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;proof-of-homomorphism-law&quot;&gt;Proof of homomorphism law&lt;/h5&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb23&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb23-1&quot;&gt;&lt;a href=&quot;#cb23-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&quot;cb23-2&quot;&gt;&lt;a href=&quot;#cb23-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-3&quot;&gt;&lt;a href=&quot;#cb23-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure v = Defaultable mempty (pure v)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-4&quot;&gt;&lt;a href=&quot;#cb23-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; f) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; x)&lt;/span&gt;
&lt;span id=&quot;cb23-5&quot;&gt;&lt;a href=&quot;#cb23-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-6&quot;&gt;&lt;a href=&quot;#cb23-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of (&amp;lt;*&amp;gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-7&quot;&gt;&lt;a href=&quot;#cb23-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; fxMap fxDefault&lt;/span&gt;
&lt;span id=&quot;cb23-8&quot;&gt;&lt;a href=&quot;#cb23-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-9&quot;&gt;&lt;a href=&quot;#cb23-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;  (&lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; f &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; x) &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-10&quot;&gt;&lt;a href=&quot;#cb23-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-11&quot;&gt;&lt;a href=&quot;#cb23-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&quot;cb23-12&quot;&gt;&lt;a href=&quot;#cb23-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-13&quot;&gt;&lt;a href=&quot;#cb23-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f mempty = mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-14&quot;&gt;&lt;a href=&quot;#cb23-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; fxMap fxDefault&lt;/span&gt;
&lt;span id=&quot;cb23-15&quot;&gt;&lt;a href=&quot;#cb23-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-16&quot;&gt;&lt;a href=&quot;#cb23-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-17&quot;&gt;&lt;a href=&quot;#cb23-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-18&quot;&gt;&lt;a href=&quot;#cb23-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&quot;cb23-19&quot;&gt;&lt;a href=&quot;#cb23-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-20&quot;&gt;&lt;a href=&quot;#cb23-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- mempty &amp;lt;.&amp;gt; x = mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-21&quot;&gt;&lt;a href=&quot;#cb23-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; fxMap fxDefault&lt;/span&gt;
&lt;span id=&quot;cb23-22&quot;&gt;&lt;a href=&quot;#cb23-22&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-23&quot;&gt;&lt;a href=&quot;#cb23-23&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-24&quot;&gt;&lt;a href=&quot;#cb23-24&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-25&quot;&gt;&lt;a href=&quot;#cb23-25&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&quot;cb23-26&quot;&gt;&lt;a href=&quot;#cb23-26&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-27&quot;&gt;&lt;a href=&quot;#cb23-27&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- mempty &amp;lt;&amp;gt; x = x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-28&quot;&gt;&lt;a href=&quot;#cb23-28&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; fxMap fxDefault&lt;/span&gt;
&lt;span id=&quot;cb23-29&quot;&gt;&lt;a href=&quot;#cb23-29&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-30&quot;&gt;&lt;a href=&quot;#cb23-30&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-31&quot;&gt;&lt;a href=&quot;#cb23-31&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-32&quot;&gt;&lt;a href=&quot;#cb23-32&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&quot;cb23-33&quot;&gt;&lt;a href=&quot;#cb23-33&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-34&quot;&gt;&lt;a href=&quot;#cb23-34&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure f &amp;lt;*&amp;gt; pure x = pure (f x)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-35&quot;&gt;&lt;a href=&quot;#cb23-35&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; fxMap fxDefault&lt;/span&gt;
&lt;span id=&quot;cb23-36&quot;&gt;&lt;a href=&quot;#cb23-36&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-37&quot;&gt;&lt;a href=&quot;#cb23-37&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-38&quot;&gt;&lt;a href=&quot;#cb23-38&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-39&quot;&gt;&lt;a href=&quot;#cb23-39&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    fxDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (f x)&lt;/span&gt;
&lt;span id=&quot;cb23-40&quot;&gt;&lt;a href=&quot;#cb23-40&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-41&quot;&gt;&lt;a href=&quot;#cb23-41&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Simplify&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-42&quot;&gt;&lt;a href=&quot;#cb23-42&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (f x))&lt;/span&gt;
&lt;span id=&quot;cb23-43&quot;&gt;&lt;a href=&quot;#cb23-43&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-44&quot;&gt;&lt;a href=&quot;#cb23-44&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure v = Defaultable mempty (pure v), in reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-45&quot;&gt;&lt;a href=&quot;#cb23-45&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (f x)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;proof-of-interchange-law&quot;&gt;Proof of interchange law&lt;/h5&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb24&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb24-1&quot;&gt;&lt;a href=&quot;#cb24-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;u &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; y&lt;/span&gt;
&lt;span id=&quot;cb24-2&quot;&gt;&lt;a href=&quot;#cb24-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-3&quot;&gt;&lt;a href=&quot;#cb24-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure v = Defaultable mempty (pure v)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-4&quot;&gt;&lt;a href=&quot;#cb24-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; u &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; y)&lt;/span&gt;
&lt;span id=&quot;cb24-5&quot;&gt;&lt;a href=&quot;#cb24-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-6&quot;&gt;&lt;a href=&quot;#cb24-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Expand: u = Defaultable uMap uDefault&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-7&quot;&gt;&lt;a href=&quot;#cb24-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; uMap uDefault &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; y)&lt;/span&gt;
&lt;span id=&quot;cb24-8&quot;&gt;&lt;a href=&quot;#cb24-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-9&quot;&gt;&lt;a href=&quot;#cb24-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of (&amp;lt;*&amp;gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-10&quot;&gt;&lt;a href=&quot;#cb24-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; uyMap uyDefault&lt;/span&gt;
&lt;span id=&quot;cb24-11&quot;&gt;&lt;a href=&quot;#cb24-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-12&quot;&gt;&lt;a href=&quot;#cb24-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    uyMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; uFallback &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; y) uMap&lt;/span&gt;
&lt;span id=&quot;cb24-13&quot;&gt;&lt;a href=&quot;#cb24-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-14&quot;&gt;&lt;a href=&quot;#cb24-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        uFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-15&quot;&gt;&lt;a href=&quot;#cb24-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; uDefault &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-16&quot;&gt;&lt;a href=&quot;#cb24-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-17&quot;&gt;&lt;a href=&quot;#cb24-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; u  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; y &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-18&quot;&gt;&lt;a href=&quot;#cb24-18&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-19&quot;&gt;&lt;a href=&quot;#cb24-19&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    uyDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; uDefault &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; y&lt;/span&gt;
&lt;span id=&quot;cb24-20&quot;&gt;&lt;a href=&quot;#cb24-20&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-21&quot;&gt;&lt;a href=&quot;#cb24-21&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- fmap f mempty = mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-22&quot;&gt;&lt;a href=&quot;#cb24-22&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; uyMap uyDefault&lt;/span&gt;
&lt;span id=&quot;cb24-23&quot;&gt;&lt;a href=&quot;#cb24-23&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-24&quot;&gt;&lt;a href=&quot;#cb24-24&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    uyMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; uFallback &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; y) uMap&lt;/span&gt;
&lt;span id=&quot;cb24-25&quot;&gt;&lt;a href=&quot;#cb24-25&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-26&quot;&gt;&lt;a href=&quot;#cb24-26&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        uFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-27&quot;&gt;&lt;a href=&quot;#cb24-27&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; uDefault &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-28&quot;&gt;&lt;a href=&quot;#cb24-28&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-29&quot;&gt;&lt;a href=&quot;#cb24-29&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; u  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-30&quot;&gt;&lt;a href=&quot;#cb24-30&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-31&quot;&gt;&lt;a href=&quot;#cb24-31&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    uyDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; uDefault &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; y&lt;/span&gt;
&lt;span id=&quot;cb24-32&quot;&gt;&lt;a href=&quot;#cb24-32&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-33&quot;&gt;&lt;a href=&quot;#cb24-33&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Simplify `case uDefault of …`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-34&quot;&gt;&lt;a href=&quot;#cb24-34&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; uyMap uyDefault&lt;/span&gt;
&lt;span id=&quot;cb24-35&quot;&gt;&lt;a href=&quot;#cb24-35&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-36&quot;&gt;&lt;a href=&quot;#cb24-36&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    uyMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (uMap &lt;span class=&quot;op&quot;&gt;&amp;lt;.&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; uFallback &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; y) uMap&lt;/span&gt;
&lt;span id=&quot;cb24-37&quot;&gt;&lt;a href=&quot;#cb24-37&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-38&quot;&gt;&lt;a href=&quot;#cb24-38&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        uFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-39&quot;&gt;&lt;a href=&quot;#cb24-39&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-40&quot;&gt;&lt;a href=&quot;#cb24-40&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    uyDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; uDefault &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; y&lt;/span&gt;
&lt;span id=&quot;cb24-41&quot;&gt;&lt;a href=&quot;#cb24-41&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-42&quot;&gt;&lt;a href=&quot;#cb24-42&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- f &amp;lt;.&amp;gt; mempty = mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-43&quot;&gt;&lt;a href=&quot;#cb24-43&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; uyMap uyDefault&lt;/span&gt;
&lt;span id=&quot;cb24-44&quot;&gt;&lt;a href=&quot;#cb24-44&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-45&quot;&gt;&lt;a href=&quot;#cb24-45&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    uyMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; uFallback &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; y) uMap&lt;/span&gt;
&lt;span id=&quot;cb24-46&quot;&gt;&lt;a href=&quot;#cb24-46&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-47&quot;&gt;&lt;a href=&quot;#cb24-47&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        uFallback &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-48&quot;&gt;&lt;a href=&quot;#cb24-48&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-49&quot;&gt;&lt;a href=&quot;#cb24-49&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    uyDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; uDefault &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; y&lt;/span&gt;
&lt;span id=&quot;cb24-50&quot;&gt;&lt;a href=&quot;#cb24-50&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-51&quot;&gt;&lt;a href=&quot;#cb24-51&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- mempty &amp;lt;&amp;gt; x = x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-52&quot;&gt;&lt;a href=&quot;#cb24-52&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; uyMap uyDefault&lt;/span&gt;
&lt;span id=&quot;cb24-53&quot;&gt;&lt;a href=&quot;#cb24-53&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-54&quot;&gt;&lt;a href=&quot;#cb24-54&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    uyMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; y) uMap&lt;/span&gt;
&lt;span id=&quot;cb24-55&quot;&gt;&lt;a href=&quot;#cb24-55&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-56&quot;&gt;&lt;a href=&quot;#cb24-56&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    uyDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; uDefault &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; y&lt;/span&gt;
&lt;span id=&quot;cb24-57&quot;&gt;&lt;a href=&quot;#cb24-57&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-58&quot;&gt;&lt;a href=&quot;#cb24-58&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- u &amp;lt;*&amp;gt; pure y = pure ($ y) &amp;lt;*&amp;gt; u&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-59&quot;&gt;&lt;a href=&quot;#cb24-59&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; uyMap uyDefault&lt;/span&gt;
&lt;span id=&quot;cb24-60&quot;&gt;&lt;a href=&quot;#cb24-60&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-61&quot;&gt;&lt;a href=&quot;#cb24-61&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    uyMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; y) uMap&lt;/span&gt;
&lt;span id=&quot;cb24-62&quot;&gt;&lt;a href=&quot;#cb24-62&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-63&quot;&gt;&lt;a href=&quot;#cb24-63&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    uyDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; y) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; uDefault&lt;/span&gt;
&lt;span id=&quot;cb24-64&quot;&gt;&lt;a href=&quot;#cb24-64&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-65&quot;&gt;&lt;a href=&quot;#cb24-65&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure f &amp;lt;*&amp;gt; x = fmap f x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-66&quot;&gt;&lt;a href=&quot;#cb24-66&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; uyMap uyDefault&lt;/span&gt;
&lt;span id=&quot;cb24-67&quot;&gt;&lt;a href=&quot;#cb24-67&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-68&quot;&gt;&lt;a href=&quot;#cb24-68&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    uyMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; y) uMap&lt;/span&gt;
&lt;span id=&quot;cb24-69&quot;&gt;&lt;a href=&quot;#cb24-69&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-70&quot;&gt;&lt;a href=&quot;#cb24-70&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    uyDefault &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; y) uDefault&lt;/span&gt;
&lt;span id=&quot;cb24-71&quot;&gt;&lt;a href=&quot;#cb24-71&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-72&quot;&gt;&lt;a href=&quot;#cb24-72&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Definition of `fmap`, in reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-73&quot;&gt;&lt;a href=&quot;#cb24-73&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; y) (&lt;span class=&quot;dt&quot;&gt;Defaultable&lt;/span&gt; uMap uDefault)&lt;/span&gt;
&lt;span id=&quot;cb24-74&quot;&gt;&lt;a href=&quot;#cb24-74&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-75&quot;&gt;&lt;a href=&quot;#cb24-75&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- Contract: u = Defaultable uMap uDefault&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-76&quot;&gt;&lt;a href=&quot;#cb24-76&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; y) u&lt;/span&gt;
&lt;span id=&quot;cb24-77&quot;&gt;&lt;a href=&quot;#cb24-77&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-78&quot;&gt;&lt;a href=&quot;#cb24-78&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- pure f &amp;lt;*&amp;gt; x = fmap f x, in reverse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb24-79&quot;&gt;&lt;a href=&quot;#cb24-79&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; y) &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; u&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/810372623312147782/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2022/06/defaultable-map-applicative-wrapper-for.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/810372623312147782'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/810372623312147782'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2022/06/defaultable-map-applicative-wrapper-for.html' title='defaultable-map: An Applicative wrapper for Maps'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-1659249216193744870</id><published>2022-06-03T06:12:00.008-07:00</published><updated>2022-06-10T15:04:50.943-07:00</updated><title type='text'>The appeal of bidirectional type-checking</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;
  &lt;meta name=&quot;twitter:site&quot; content=&quot;@GabriellaG439&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;The appeal of bidirectional type-checking&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;A post explaining why bidirectional type-checking is popular within the programming language theory community.&quot; /&gt;
  &lt;title&gt;The appeal of bidirectional type-checking&lt;/title&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      word-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;In this post I hope to explain why &lt;a href=&quot;https://www.cl.cam.ac.uk/~nk480/bidir.pdf&quot;&gt;bidirectional type-checking&lt;/a&gt; has a lot of cultural cachet within the programming language theory community. To be clear, I’m an amateur and I have no formal background in computer science or type theory. Nonetheless, I believe I’ve learned enough and compared notes with others to motivate bidirectional type-checking.&lt;/p&gt;
&lt;h4 id=&quot;subtyping&quot;&gt;Subtyping&lt;/h4&gt;
&lt;p&gt;The fundamental problem that bidirectional type-checking solves well is &lt;strong&gt;subtyping&lt;/strong&gt;. I will not explain why in this post, so for now take it as an article of faith that bidirectional type-checking provides a simple and consistent framework for supporting subtyping within a programming language’s type system.&lt;/p&gt;
&lt;p&gt;Bidirectional type-checking does other things well, too (such as inferring the types of inputs from outputs), but subtyping is the thing that bidirectional type-checking does uniquely well.  For example, you can infer inputs from outputs using unification instead of bidirectional type-checking, which is why I don&#39;t motivate bidirectional type-checking in terms of doing inference &quot;in reverse&quot;.&lt;/p&gt;
&lt;p&gt;By “subtyping”, I mean that a type &lt;code&gt;A&lt;/code&gt; is a subtype of type &lt;code&gt;B&lt;/code&gt; if any expression of type &lt;code&gt;A&lt;/code&gt; is also a valid expression of type &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, we could create a language that provides two numeric types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Natural&lt;/code&gt; - The type of non-negative integers (ℕ)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Integer&lt;/code&gt; - The type of all integers (ℤ)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Furthermore, we could define &lt;code&gt;Natural&lt;/code&gt; to be a subtype of &lt;code&gt;Integer&lt;/code&gt; (i.e. ℕ ⊆ ℤ). In other words, if a scalar literal like &lt;code&gt;4&lt;/code&gt; were a valid &lt;code&gt;Natural&lt;/code&gt; number then &lt;code&gt;4&lt;/code&gt; would also be a valid &lt;code&gt;Integer&lt;/code&gt;, too. That would permit us to write something like this &lt;a href=&quot;https://github.com/Gabriella439/grace&quot;&gt;Fall-from-Grace&lt;/a&gt; code:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  [ x, &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt; ] &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and the type-checker would not complain that we put a &lt;code&gt;Natural&lt;/code&gt; number inside a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Integer&lt;/code&gt;s, because a &lt;code&gt;Natural&lt;/code&gt; number is a subtype of an &lt;code&gt;Integer&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;why-subtyping-matters&quot;&gt;Why subtyping matters&lt;/h4&gt;
&lt;p&gt;Now, automatic numeric coercions like that are convenient but in the grand scheme of things they are not a big deal from a language implementer’s point of view. The real appeal of subtyping is that subtyping appears in more places than you’d expect.&lt;/p&gt;
&lt;p&gt;I’m not even talking about object-oriented subtyping like “The &lt;code&gt;Dog&lt;/code&gt; class is a subtype of the &lt;code&gt;Animal&lt;/code&gt; class”. Subtyping occurs quite frequently in even non-OOP languages, in the form of universal quantification (a.k.a. “polymorphism” or “generics”).&lt;/p&gt;
&lt;p&gt;For example, we can define a polymorphic identity function, but then use the function as if it had a narrower (more specialized) type:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; (a &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and that works because &lt;code&gt;forall (a : Type) . a -&amp;gt; a&lt;/code&gt; is a subtype of &lt;code&gt;Text -&amp;gt; Text&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Yes, you read that right; I didn’t get the subtyping direction backwards. A polymorphic type is a subtype of a more specialized type.&lt;/p&gt;
&lt;p&gt;In fact, &lt;code&gt;forall (a : Type) . a -&amp;gt; a&lt;/code&gt; is a subtype of multiple types, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Integer -&amp;gt; Integer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List Natural -&amp;gt; List Natural&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ x: Bool } -&amp;gt; { x: Bool }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… and so on. This might be a bit counter-intuitive if you come from an OOP background where usually each type is a subtype of at most one other (explicitly declared) supertype.&lt;/p&gt;
&lt;p&gt;This type specialization is implicit, meaning that we don’t need the type annotation to use &lt;code&gt;id&lt;/code&gt; on a value of type &lt;code&gt;Text&lt;/code&gt;. Instead, the specialization happens automatically, so we can use &lt;code&gt;id&lt;/code&gt; on any value without annotations:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; (a &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;ABC&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If our language didn’t support subtyping then we’d need to explicitly abstract over and apply type arguments. For example, this is how that same &lt;code&gt;id&lt;/code&gt; example would work in &lt;a href=&quot;https://dhall-lang.org&quot;&gt;Dhall&lt;/a&gt; (which does not support any form of subtyping):&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;forall&lt;/span&gt; (a &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \(a &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Type&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \(x &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; a) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;co&quot;&gt;-- ↑ Explicit type abstraction&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;ABC&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- ↑ Explicit type application&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Typically I refer to a Dhall-style type system as “explicit type abstraction and type application”. Vice versa, I refer to a Grace-style language as “implicit type abstraction and type application”.&lt;/p&gt;
&lt;p&gt;The real reason why subtyping matters is because you need to support subtyping in order to implement a language with “implicit type abstraction/application”. In other words, you need some way to automatically produce and consume polymorphic types without explicit types or type annotations from the end user and that is essentially a form of subtyping.&lt;/p&gt;
&lt;h4 id=&quot;bidirectional-type-checking-vs-hindley-milner&quot;&gt;Bidirectional type-checking vs unification&lt;/h4&gt;
&lt;p&gt;Bidirectional type-checking is not the only way to implement a language with implicit type abstraction/application. For example, &lt;a href=&quot;https://en.wikipedia.org/wiki/Hindley–Milner_type_system&quot;&gt;Hindley-Milner type inference&lt;/a&gt; is a type system that is based on unification instead of bidirectional type-checking type system and Hindley-Milner inference still supports implicit type abstraction/application.&lt;/p&gt;
&lt;p&gt;The reason why Hindley Milner type inference works, though, is by exploiting a narrow set of requirements that do not generalize well to more sophisticated type systems. Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Hindley Milner type inference only permits “top-level polymorphism”&lt;/p&gt;
&lt;p&gt;In other words, Hindley Milner type inference only permits universal quantification at the top-level of a program or at the top-level of a &lt;code&gt;let&lt;/code&gt;-bound expression&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hindley Milner type inference does not support any other form of subtyping&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To expand on the latter point, language implementers often want to add other forms of subtyping to our languages beyond implicit type abstraction/application, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implicit numeric coercions&lt;/li&gt;
&lt;li&gt;Object-oriented inheritance&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Existential_quantification&quot;&gt;Existential quantification&lt;/a&gt; (the dual of universal quantification)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Refinement_type&quot;&gt;Refinement types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… and if you try to extend Hindley Milner type inference to add any other language feature that requires subtyping then you run into issues pretty quickly. This is because Hindley Milner exploits a cute hack that does not generalize well.&lt;/p&gt;
&lt;p&gt;In contrast, bidirectional type-checking is not just a method for handling implicit type abstraction/application. Rather, bidirectional type-checking is a framework for introducing any form of subtyping, of which implicit type abstraction/application is just a special case.&lt;/p&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;If you’d like to learn more about bidirectional type-checking then I recommend reading:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.cl.cam.ac.uk/~nk480/bidir.pdf&quot;&gt;Complete and Easy Bidirectional Typechecking for Higher-Rank Polymorphism&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This paper provides an all-in-one presentation of how to implement a bidirectional type-checking system&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.cl.cam.ac.uk/~nk480/bidir-survey.pdf&quot;&gt;Bidirectional Typing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This explains the general principles behind bidirectional type-checking so that you can better understand how to extend the type system with new features&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I mentioned earlier, bidirectional type-checking has a lot of cultural cachet within the programming language theory community, so even if you don’t plan on using it, understanding it will help you speak the same language as many others within the community.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/1659249216193744870/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2022/06/the-appeal-of-bidirectional-type.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/1659249216193744870'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/1659249216193744870'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2022/06/the-appeal-of-bidirectional-type.html' title='The appeal of bidirectional type-checking'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1777990983847811806.post-7352509006108964106</id><published>2022-05-31T09:13:00.004-07:00</published><updated>2022-05-31T09:26:13.366-07:00</updated><title type='text'>Generate web forms from pure functions</title><content type='html'>&lt;!DOCTYPE html&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=yes&quot; /&gt;
  &lt;title&gt;Generate web forms from pure functions&lt;/title&gt;
  &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;
  &lt;meta name=&quot;twitter:site&quot; content=&quot;@GabriellaG439&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;Generate web forms from pure functions&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;Announce post for the Grace browser, which translates functional code to interactive HTML&quot; /&gt;
  &lt;style&gt;
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      word-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li &gt; ol, li &gt; ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, &#39;Lucida Console&#39;, Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre &gt; code.sourceCode { white-space: pre; position: relative; }
    pre &gt; code.sourceCode &gt; span { display: inline-block; line-height: 1.25; }
    pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre &gt; code.sourceCode { white-space: pre-wrap; }
    pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code &gt; span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code &gt; span &gt; a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  &lt;/style&gt;
  &lt;!--[if lt IE 9]&gt;
    &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&quot;&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;This is an announcement post for my “Grace browser” project, which you can find here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://trygrace.dev&quot;&gt;&lt;code&gt;trygrace.dev&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This project is a web page which can dynamically convert a wide variety of functional programming expressions to their equivalent HTML. This conversion can even auto-generate interactive web forms from functions, which means that people without web programming knowledge can use the Grace browser to create and share simple and interactive web pages.&lt;/p&gt;
&lt;h4 id=&quot;demo&quot;&gt;Demo&lt;/h4&gt;
&lt;p&gt;You can quickly get the gist of this project by visiting the following page:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://trygrace.dev/?expression=%255Cinput%2520-%253E%250A%2520%2520%2520%2520%257B%2520%2522x%2520or%2520y%2522%2520%253A%2520input.x%2520%257C%257C%2520input.y%250A%2520%2520%2520%2520%252C%2520%2522x%2520and%2520y%2522%253A%2520input.x%2520%2526%2526%2520input.y%250A%2520%2520%2520%2520%257D&quot;&gt;Grace browser - Boolean logic example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Grace browser begins with a code editor where you can input a purely functional expression and the above link uses the following example code:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;\input &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    { &lt;span class=&quot;st&quot;&gt;&amp;quot;x or y&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; input&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; input&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;y&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    , &lt;span class=&quot;st&quot;&gt;&amp;quot;x and y&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; input&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; input&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;y&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The interpreter then infers the type of the input expression, which for the above example is:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; } &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; { &lt;span class=&quot;st&quot;&gt;&amp;quot;x or y&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;x and y&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and you can read that type as saying:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a function whose input is a record and whose output is also a record. The input record has two boolean-valued fields named “x” and “y” and the output record has two boolean-valued fields named “x or y” and “x and y”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is the novel bit: the interpreter then &lt;strong&gt;generates a web interface appropriate for that type&lt;/strong&gt;. In this case, the equivalent web interface is a form with two inputs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a checkbox labeled “x”&lt;/li&gt;
&lt;li&gt;a checkbox labeled “y”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… and the form also produces two outputs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a read-only checkbox labeled “x or y”&lt;/li&gt;
&lt;li&gt;a read-only checkbox labeled “x and y”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;404&quot; alt=&quot;Screen Shot 2022-05-28 at 11 12 23 AM&quot; src=&quot;https://user-images.githubusercontent.com/1313787/170837955-35feb8b4-9028-4bf2-af36-9b814fc9a70c.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Moreover, the generated form is reactive: as you check or uncheck the two input checkboxes the two output checkboxes immediately update in response. In particular:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the “x or y” box will be checked whenever either input box is checked&lt;/li&gt;
&lt;li&gt;the “x and y” box will be checked whenever both input boxes are checked&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width=&quot;136&quot; alt=&quot;Screen Shot 2022-05-28 at 11 19 15 AM&quot; src=&quot;https://user-images.githubusercontent.com/1313787/170838108-83610230-159e-43ea-9ef9-0e2bbebdee03.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;This also all runs entirely client side, meaning that all the computation happens in your browser. Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;compiling the functional code to an interactive form is done client-side&lt;/li&gt;
&lt;li&gt;updating form outputs in response to inputs is also done client-side&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;intelligent-forms&quot;&gt;Intelligent forms&lt;/h4&gt;
&lt;p&gt;Here’s another example that might further pique your interest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://trygrace.dev/?expression=List%252Fmap%2520%2528%255Cx%2520-%253E%2520x%2520%252B%25201%2529&quot;&gt;Grace browser - Increment each element of a list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above example is a pure function to increment each element of a list:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; (\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;List/map&lt;/code&gt; function is unsaturated, meaning that we’re missing the final argument: the actual list to transform. So the interpreter infers the following type for the function:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and you can read that type as saying:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a function whose input is a list of natural numbers and whose output is also a list of natural numbers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So what kind of interactive form will that generate?&lt;/p&gt;
&lt;p&gt;The generated input to the form begins with a blue “+” button that you can click to add elements to the input list. Each time you click the button the form creates a numeric input for that list element alongside a red “-” button that you can click to delete the corresponding list element. As you add or remove elements from the input list the reactive form update will also add or remove elements from the output list, too.&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;296&quot; alt=&quot;Screen Shot 2022-05-28 at 11 14 45 AM&quot; src=&quot;https://user-images.githubusercontent.com/1313787/170838009-3d68369d-34b0-4823-a1f9-160505c84c4e.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Moreover, each element in the input list will be a numeric input. As you adjust each input element the matching output element will automatically be set to a number that is one greater than the input number.&lt;/p&gt;
&lt;p&gt;The interpreter also sets the permitted range of the numeric inputs based on the inferred type. Since the default numeric type is &lt;code&gt;Natural&lt;/code&gt; (i.e. non-negative) numbers, the numeric inputs will forbid negative inputs. However, if you were to add a type annotation to specify an &lt;code&gt;Integer&lt;/code&gt; element type:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; (\x &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… then the generated form will change to permit negative inputs and outputs because then the inferred type would be:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;shareable-forms&quot;&gt;Shareable forms&lt;/h4&gt;
&lt;p&gt;The “Grace browser” is based on the Fall-from-Grace functional programming language (or “Grace” for short), which I previously announced here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.haskellforall.com/2021/09/fall-from-grace-ready-to-fork.html&quot;&gt;Fall-from-Grace: A ready-to-fork functional programming language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… and one of the features of this language is the ability to import arbitrary expressions by URL, including functions!&lt;/p&gt;
&lt;p&gt;That means that if you were to create a useful pure function for others to use you could host your code anywhere that you can serve plain text (such as a GitHub repository or gist) and anybody could turn that function into the corresponding form.&lt;/p&gt;
&lt;p&gt;For example, the following gist contains a pure Grace function to compute US federal income taxes for 2022:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/Gabriella439/712d0648bbdcfcc83eadd0ee394beed3&quot;&gt;GitHub Gist - Income tax calculator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… so if you paste the URL for the raw text of the gist into the Grace browser you’ll get a shareable form for computing your taxes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://trygrace.dev/?expression=https%253A%252F%252Fgist.githubusercontent.com%252FGabriella439%252F712d0648bbdcfcc83eadd0ee394beed3%252Fraw%252F1b03f661577521b4d3dc6ca73dd11475a30c1594%252FincomeTax.ffg&quot;&gt;Grace browser - US federal income tax calculator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width=&quot;390&quot; alt=&quot;Screen Shot 2022-05-28 at 11 15 45 AM&quot; src=&quot;https://user-images.githubusercontent.com/1313787/170838035-1b45109e-eb38-426b-9d20-0f2d216456f5.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;This provides a lightweight way to publish, share, and consume utility code.&lt;/p&gt;
&lt;h4 id=&quot;plain-json-data&quot;&gt;Plain JSON data&lt;/h4&gt;
&lt;p&gt;The Grace browser also works for plain data, too. In fact, Grace is a superset of JSON so the Grace browser is also a JSON browser.&lt;/p&gt;
&lt;p&gt;For example, I can render the JSON served at &lt;a href=&quot;https://api.github.com&quot;&gt;&lt;code&gt;https://api.github.com&lt;/code&gt;&lt;/a&gt; as HTML by pasting that URL into the Grace browser, which produces this result:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://trygrace.dev/?expression=https%253A%252F%252Fapi.github.com&quot;&gt;Grace browser - GitHub API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width=&quot;814&quot; alt=&quot;Screen Shot 2022-05-28 at 11 16 39 AM&quot; src=&quot;https://user-images.githubusercontent.com/1313787/170838058-1e376c3a-4a02-4b81-9982-b41e07fed454.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;If I’m only interested in one field of the JSON output, I can project out the field of interest like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;( https&lt;span class=&quot;op&quot;&gt;://&lt;/span&gt;api&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;github&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;com&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt; )&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;starred_gists_url&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://trygrace.dev/?expression=%2528%2520https%253A%252F%252Fapi.github.com%252F%2520%2529.starred_gists_url&quot;&gt;Grace browser - Query API field&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width=&quot;505&quot; alt=&quot;Screen Shot 2022-05-28 at 11 17 08 AM&quot; src=&quot;https://user-images.githubusercontent.com/1313787/170838072-e4af350e-2f34-49f2-a4b1-970d11adaaea.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;In other words, you can use Grace browser sort of like a “&lt;code&gt;jq&lt;/code&gt; but with HTML output”.&lt;/p&gt;
&lt;h4 id=&quot;teaching-tool&quot;&gt;Teaching tool&lt;/h4&gt;
&lt;p&gt;You can also use the Grace browser to teach functional programming concepts, too. For example, you can illustrate the difference between Haskell/Rust-style error-handling and Go-style error-handling by entering this input into the code editor:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;{ &lt;span class=&quot;st&quot;&gt;&amp;quot;Error handling in Haskell and Rust&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    \input &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; input &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Failure&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Success&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Error handling in Go&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb8-4&quot;&gt;&lt;a href=&quot;#cb8-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    \input &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; input &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; { &lt;span class=&quot;st&quot;&gt;&amp;quot;Failure&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Optional&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Success&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Optional&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Natural&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb8-5&quot;&gt;&lt;a href=&quot;#cb8-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://trygrace.dev/?expression=%257B%2520%2522Error%2520handling%2520in%2520Haskell%2520and%2520Rust%2522%253A%250A%2520%2520%2520%2520%255Cinput%2520-%253E%2520input%2520%253A%2520%253C%2520Failure%2520%253A%2520Text%2520%257C%2520Success%2520%253A%2520Natural%2520%253E%250A%252C%2520%2522Error%2520handling%2520in%2520Go%2522%253A%250A%2520%2520%2520%2520%255Cinput%2520-%253E%2520input%2520%253A%2520%257B%2520%2522Failure%2522%2520%253A%2520Optional%2520Text%252C%2520%2522Success%2522%253A%2520Optional%2520Natural%2520%257D%250A%257D&quot;&gt;Grace browser - Error handling semantics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… and the form will illustrate how:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In Haskell and Rust, the failure data and success data are mutually exclusive&lt;/p&gt;
&lt;p&gt;The generated form illustrates this by using mutually exclusive radio buttons for the input.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In Go, failure data and success data are not mutually exclusive&lt;/p&gt;
&lt;p&gt;The generated form illustrates this by using checkboxes to independently enable or disable the failure and success data.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width=&quot;620&quot; alt=&quot;Screen Shot 2022-05-28 at 11 18 06 AM&quot; src=&quot;https://user-images.githubusercontent.com/1313787/170838090-4ba3bcdf-a5b2-4679-9535-d9eca0257b5e.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;semantic-web&quot;&gt;Semantic web&lt;/h4&gt;
&lt;p&gt;Grace is currently very limited in its current incarnation, meaning that the language only provides a small set of built-in functions and operators. The reason why is because I originally created Grace to serve as a simple reference implementation of how to create a functional programming language and I intended people to fork the language to add any additional language features they needed.&lt;/p&gt;
&lt;p&gt;However, if Grace were more featureful then you could imagine creating a “semantic web” of purely functional expressions that could reference each other by URL and be visualized using an intelligent client like the Grace browser. For example, you could have some pure data hosted at &lt;code&gt;https://example.com/students.ffg&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;[ { &lt;span class=&quot;st&quot;&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;       , &lt;span class=&quot;st&quot;&gt;&amp;quot;Grade&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;95&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;, { &lt;span class=&quot;st&quot;&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Mary Jane&amp;quot;&lt;/span&gt;      , &lt;span class=&quot;st&quot;&gt;&amp;quot;Grade&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;98&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;#cb9-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;, { &lt;span class=&quot;st&quot;&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Alice Templeton&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;Grade&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;90&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb9-4&quot;&gt;&lt;a href=&quot;#cb9-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and then you could create a “view” into that data that adds up all the grades by hosting another expression at &lt;code&gt;https://example.com/total.ffg&lt;/code&gt; which could contain:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; https&lt;span class=&quot;op&quot;&gt;://&lt;/span&gt;raw&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;githubusercontent&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;com&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Gabriella439&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;grace&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;main&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;prelude&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;natural&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;ffg&lt;/span&gt;
&lt;span id=&quot;cb10-2&quot;&gt;&lt;a href=&quot;#cb10-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb10-3&quot;&gt;&lt;a href=&quot;#cb10-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;sum&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; (\student &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; student&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;Grade&amp;quot;&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;./&lt;/span&gt;students&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;ffg)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;… and whenever you would update the data hosted at &lt;code&gt;students.ffg&lt;/code&gt; the view at &lt;code&gt;total.ffg&lt;/code&gt; would automatically update, too. You could then generate a web page for either view of the data using something like the Grace browser.&lt;/p&gt;
&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;If this interests you, the website contains a tutorial that you can try out that partially overlaps with the examples from this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://trygrace.dev&quot;&gt;Grace browser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just click the “Try the tutorial” button to give it a whirl.&lt;/p&gt;
&lt;p&gt;If you want a deeper dive into what the Grace language can do, then I recommend reading the original announcement post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.haskellforall.com/2021/09/fall-from-grace-ready-to-fork.html&quot;&gt;Fall-from-Grace: A ready-to-fork functional programming language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… or reading the &lt;code&gt;README&lt;/code&gt; from the corresponding GitHub project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Gabriella439/grace#grace&quot;&gt;GitHub - &lt;code&gt;Gabriella439/grace&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, I set things up so that if you do fork the language you can easily generate your own “Grace browser” for your fork of the language that’s just a bunch of static assets you can host anywhere. No server-side computation necessary!&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content><link rel='replies' type='application/atom+xml' href='https://www.haskellforall.com/feeds/7352509006108964106/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.haskellforall.com/2022/05/generate-web-forms-from-pure-functions.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/7352509006108964106'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/1777990983847811806/posts/default/7352509006108964106'/><link rel='alternate' type='text/html' href='https://www.haskellforall.com/2022/05/generate-web-forms-from-pure-functions.html' title='Generate web forms from pure functions'/><author><name>Gabriella Gonzalez</name><uri>http://www.blogger.com/profile/01917800488530923694</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhqisRb34-8Mka4C_SQoN8W_DrFhaLFNXTxAgnV0-6Zie_4yvzcv0OnAkkH0m3aJSBYSufV3ItaIy9mhQGzoO65NZ7tXsqtxyN963kLIzuzqkdaXhkdXkG1zdmIGZVpmeq78T63Vne9fs0M9AP8kJxEUkRmUXCK9HqiEQ9ztgZtvlA/s220/Avatar%20-%20Welcome%20-%20Original.png'/></author><thr:total>0</thr:total></entry></feed>