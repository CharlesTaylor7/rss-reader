<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://vaktibabat.github.io/</id><title>Vaktibabat</title><subtitle>A (mostly) Cybersecurity Blog</subtitle> <updated>2024-10-10T16:22:51+03:00</updated> <author> <name>Yoray Herzberg</name> <uri>https://vaktibabat.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://vaktibabat.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://vaktibabat.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator> <rights> © 2024 Yoray Herzberg </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Ant Colony Optimization in Golang!</title><link href="https://vaktibabat.github.io/posts/antcolony/" rel="alternate" type="text/html" title="Ant Colony Optimization in Golang!" /><published>2024-10-10T04:25:00+03:00</published> <updated>2024-10-10T04:25:00+03:00</updated> <id>https://vaktibabat.github.io/posts/antcolony/</id> <content src="https://vaktibabat.github.io/posts/antcolony/" /> <author> <name>Yoray Herzberg</name> </author> <category term="golang" /> <category term="algo" /> <summary> Introduction Several months ago, I wrote about implementing Genetic Algorithms in Rust to solve optimization problems. In today’s post, we are going to use another such nature-inspired algorithm called Ant Colony Optimization (ACO) to solve a classic NP-Complete problem (which we also tackled last post): The Traveling Salesman Problem (TSP). Unlike last post, we’re going to implement the algori... </summary> </entry> <entry><title>Secure Chat 2.0 (Elliptic Curves, Protobufs, and MACs)</title><link href="https://vaktibabat.github.io/posts/ecurvechat/" rel="alternate" type="text/html" title="Secure Chat 2.0 (Elliptic Curves, Protobufs, and MACs)" /><published>2024-09-19T04:25:00+03:00</published> <updated>2024-09-19T04:25:00+03:00</updated> <id>https://vaktibabat.github.io/posts/ecurvechat/</id> <content src="https://vaktibabat.github.io/posts/ecurvechat/" /> <author> <name>Yoray Herzberg</name> </author> <category term="crypto" /> <category term="rust" /> <summary> Intro Several months ago, I wrote a post about developing a secure chat in Rust using RSA and AES-CBC. Writing that post taught me a lot (like in this post, all of the crypto algorithms were implemented from scratch), but there were 2 major problems with the final result: It was very hard to maintain. All the serialization/deserialization was done by hand over TCP streams, which meant that ... </summary> </entry> <entry><title>Digit Recognition With Rust and WASM - Part 2</title><link href="https://vaktibabat.github.io/posts/rustwasm/" rel="alternate" type="text/html" title="Digit Recognition With Rust and WASM - Part 2" /><published>2024-08-25T04:25:00+03:00</published> <updated>2024-08-25T15:26:04+03:00</updated> <id>https://vaktibabat.github.io/posts/rustwasm/</id> <content src="https://vaktibabat.github.io/posts/rustwasm/" /> <author> <name>Yoray Herzberg</name> </author> <category term="rust" /> <category term="wasm" /> <category term="ai" /> <summary> Intro A few posts ago, we’ve implemented a neural network in Rust that classifies digits from scratch (i.e. no ML-related dependencies), and got some pretty good results! However, the model stayed in the memory of the training program, and that was that. Today, we’re going to train a model using the program from the previous post (with some adjustments), and deploy said model using WebAssembly... </summary> </entry> <entry><title>My idekCTF 2024 Writeups!</title><link href="https://vaktibabat.github.io/posts/idek_2024/" rel="alternate" type="text/html" title="My idekCTF 2024 Writeups!" /><published>2024-08-19T04:25:00+03:00</published> <updated>2024-08-19T04:25:00+03:00</updated> <id>https://vaktibabat.github.io/posts/idek_2024/</id> <content src="https://vaktibabat.github.io/posts/idek_2024/" /> <author> <name>Yoray Herzberg</name> </author> <category term="ctf_writeup" /> <category term="security" /> <summary> Intro During the last couple of days, I’ve participated in idekCTF2024, which was a ton of fun, and had some very interesting challenges! This post contains my writeups for the challenges I solved :) crypto/Golden Ticket In this challenge, we are provided with a Python script, and its output: from Crypto.Util.number import * #Some magic from Willy Wonka def chocolate_generator(m:int) -&amp;gt; in... </summary> </entry> <entry><title>Training a Deep-Q Network in Rust To Play Blackjack!</title><link href="https://vaktibabat.github.io/posts/DQN_Rust_Blackjack/" rel="alternate" type="text/html" title="Training a Deep-Q Network in Rust To Play Blackjack!" /><published>2024-08-09T04:25:00+03:00</published> <updated>2024-08-09T04:25:00+03:00</updated> <id>https://vaktibabat.github.io/posts/DQN_Rust_Blackjack/</id> <content src="https://vaktibabat.github.io/posts/DQN_Rust_Blackjack/" /> <author> <name>Yoray Herzberg</name> </author> <category term="rust" /> <category term="ai" /> <summary> Introduction Almost everyone knows the game Blackjack (If you don’t, you can read the rules here). It’s a simple, mostly luck-based game, yet there exists a certain amount of strategy to it. For example, if your hand has a sum of 20, you don’t want to hit, since any card other than an ace will make you bust and lose (unless you already have an ace). In this post, we train an agent to learn a go... </summary> </entry> </feed>
