<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Eli Bendersky's website</title><link href="https://eli.thegreenplace.net/" rel="alternate"></link><link href="https://eli.thegreenplace.net/feeds/all.atom.xml" rel="self"></link><id>https://eli.thegreenplace.net/</id><updated>2024-11-04T14:08:15-08:00</updated><entry><title>Ranging over functions in Go 1.23</title><link href="https://eli.thegreenplace.net/2024/ranging-over-functions-in-go-123/" rel="alternate"></link><published>2024-11-02T06:35:00-07:00</published><updated>2024-11-02T13:43:25-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-11-02:/2024/ranging-over-functions-in-go-123/</id><summary type="html">&lt;p&gt;Go 1.23 shipped with a new major feature: ranging over functions (also known
as &amp;quot;iterators&amp;quot;), per &lt;a class="reference external" href="https://github.com/golang/go/issues/61405"&gt;this proposal&lt;/a&gt;.
This feature is nicely covered in the official &lt;a class="reference external" href="https://go.dev/blog/range-functions"&gt;Go blog post from August&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article is a rewrite of &lt;a class="reference external" href="https://eli.thegreenplace.net/2023/preview-ranging-over-functions-in-go/"&gt;my older post&lt;/a&gt;
that described this feature when it was still in â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Go 1.23 shipped with a new major feature: ranging over functions (also known
as &amp;quot;iterators&amp;quot;), per &lt;a class="reference external" href="https://github.com/golang/go/issues/61405"&gt;this proposal&lt;/a&gt;.
This feature is nicely covered in the official &lt;a class="reference external" href="https://go.dev/blog/range-functions"&gt;Go blog post from August&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article is a rewrite of &lt;a class="reference external" href="https://eli.thegreenplace.net/2023/preview-ranging-over-functions-in-go/"&gt;my older post&lt;/a&gt;
that described this feature when it was still in preview. The feature was
slightly different then, and I want a post that reflects the accepted and final
state of affairs. The full code for this article is available in the
&lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2023/for-range-proposal/final-shipped-1.23"&gt;accompanying repository&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="background-original-for-range-statements"&gt;
&lt;h2&gt;Background - original &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;for-range&lt;/span&gt;&lt;/tt&gt; statements&lt;/h2&gt;
&lt;p&gt;All Go programmers know and love the venerable &lt;tt class="docutils literal"&gt;for ... := range&lt;/tt&gt; loop;
whether it's ranging over elements of a slice, runes of a string, or key/value
pairs of a map - it's a versatile tool, and few programs do without it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mySlice&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// use index i or element elem somehow&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, so far &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;for-range&lt;/span&gt;&lt;/tt&gt; statements have been limited to a relatively
small number of Go constructs: arrays, slices, strings, maps and channels.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ranging-over-int"&gt;
&lt;h2&gt;Ranging over &lt;tt class="docutils literal"&gt;int&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;The first addition made in &lt;a class="reference external" href="https://github.com/golang/go/issues/61405"&gt;the proposal&lt;/a&gt; is &lt;tt class="docutils literal"&gt;range&lt;/tt&gt; over
integers. Here's a basic example of how it looks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code is exactly equivalent to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And will do the same thing: print out the numbers 0,1,2,3,4 - each on a separate
line. Obviously, the ranged integer does not have to be a constant and
assigning the range to a per-iteration value is optional:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// do something&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Will &lt;em&gt;do something&lt;/em&gt; exactly &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; times. That's really all there is to it!
This is just a clean shortcut for a very common loop (&lt;tt class="docutils literal"&gt;i := 0; i &amp;lt; n; i++&lt;/tt&gt;).
In the proposal, Russ mentioned that approximately half of the 3-clause &lt;tt class="docutils literal"&gt;for&lt;/tt&gt;
loops he observed in the wild can be converted to this &amp;quot;range over int&amp;quot; form.
This includes Go benchmarks, where the main loop can be converted to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// run the benchmarked code&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ranging over integers is simple and clear, so I won't spend more time on it.
Let's move on to the more significant change - ranging over functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="range-over-functions-motivation"&gt;
&lt;h2&gt;Range over functions - motivation&lt;/h2&gt;
&lt;p&gt;Since Go's addition of generics &lt;a class="reference external" href="https://go.dev/blog/go1.18"&gt;in version 1.18&lt;/a&gt;,
people started writing generic &lt;em&gt;containers&lt;/em&gt; or Abstract Data Structures;
generics make it possible for programmers to decouple the data structure from
the types it stores in an efficient and convenient way (compared to the older
way of using empty interfaces).&lt;/p&gt;
&lt;p&gt;However, one nagging issue for custom containers remained: how do you iterate
over their elements? While Go supports iteration over built-in containers like
slices and maps very naturally with a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;for-range&lt;/span&gt;&lt;/tt&gt; loop, this utility was
not available for custom containers, so programmers had to come up with ad-hoc
iteration methods... until now.&lt;/p&gt;
&lt;p&gt;For a concrete motivating example, let's assume that Lisp programmers were right
all along and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Association_list"&gt;association lists&lt;/a&gt; are the best data structure
(TM). Using generics, we can implement a simple assoc list in Go, built
on top of a slice &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;AssocList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;comparable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;comparable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;AssocList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I'll leave the &amp;quot;lookup&amp;quot; method as an exercise for motivated readers. We can
create an association list and populate it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;AssocList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ten&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;twenty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;five&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this data structure in hand, an obvious question arises - how do I iterate
over all its elements? We could cheat and &lt;tt class="docutils literal"&gt;range&lt;/tt&gt; over the underlying slice,
but this requires exposing an implementation detail -- what if we want to
re-implement assoc lists without slices later?&lt;/p&gt;
&lt;p&gt;We're left with devising a custom iteration API; something like a &lt;tt class="docutils literal"&gt;Next()&lt;/tt&gt;
method. This is what Go programmers have been doing so far, and you can find
many examples of custom iteration APIs across the standard library and
elsewhere. As you would expect, many different approaches emerged.
Starting with Go 1.23, we can finally settle on a single, idiomatic approach.&lt;/p&gt;
&lt;p&gt;I'm going to show how to use the Go 1.23 range-over-functions feature
to write an iterator for &lt;tt class="docutils literal"&gt;AssocList&lt;/tt&gt;; the next section will discuss the
mechanics of how it works. We start by adding a method to &lt;tt class="docutils literal"&gt;AssocList&lt;/tt&gt; with a
special signature; it can also be a free-standing function, but for a container
like &lt;tt class="docutils literal"&gt;AssocList&lt;/tt&gt;, a method is natural:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;AssocList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seq2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;tt class="docutils literal"&gt;Seq2&lt;/tt&gt; is a helper type defined in the new &lt;a class="reference external" href="https://pkg.go.dev/iter"&gt;iter&lt;/a&gt; package
in the standard library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Seq2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can use the new &lt;tt class="docutils literal"&gt;All&lt;/tt&gt; method as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;AssocList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ten&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;twenty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;five&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key=%v, value=%v\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Prints:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// key=10, value=ten&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// key=20, value=twenty&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// key=5, value=five&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Magic! We just iterate over our container with a standard &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;for-range&lt;/span&gt;&lt;/tt&gt; loop;
how does it work?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="range-over-functions-the-mechanics"&gt;
&lt;h2&gt;Range over functions - the mechanics&lt;/h2&gt;
&lt;p&gt;First, note that &lt;tt class="docutils literal"&gt;All&lt;/tt&gt; is a method that returns a function. To be eligible
for &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;for-range&lt;/span&gt;&lt;/tt&gt; iteration, a value has to be a function with one of these
signatures:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each is a function that takes another function as parameter. The function
parameter is named &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; &lt;em&gt;by convention&lt;/em&gt; - the name itself has no
significance. &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; can have 0, 1, or 2 parameters and returns a &lt;tt class="docutils literal"&gt;bool&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The number of &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt;'s parameters is directly mapped to the left-hand side
of the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;for-range&lt;/span&gt;&lt;/tt&gt; loop w.r.t maximal number of returned values, e.g. &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for x, y := range ...   // two parameters
for x := range ...      // one parameter
for range ...           // no parameters
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the new iteration functionality, the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;for-range&lt;/span&gt;&lt;/tt&gt; loop over functions will
be automatically transformed by the compiler. Quoting from the proposal:&lt;/p&gt;
&lt;blockquote&gt;
For a function &lt;tt class="docutils literal"&gt;f&lt;/tt&gt;, the iteration proceeds by calling &lt;tt class="docutils literal"&gt;f&lt;/tt&gt; with a
synthesized &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; function that invokes the body of the loop. The
values produced correspond to the arguments in successive calls to &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt;.
As with range over other types, it is permitted to declare fewer iteration
variables than there are iteration values. The return value from the
&lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; function reports whether &lt;tt class="docutils literal"&gt;f&lt;/tt&gt; should continue iterating. For
example, if the loop body executes a &lt;tt class="docutils literal"&gt;break&lt;/tt&gt; statement, the corresponding
call to &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; returns &lt;tt class="docutils literal"&gt;false&lt;/tt&gt;.&lt;/blockquote&gt;
&lt;p&gt;Letâ€™s unpack this, using our &lt;tt class="docutils literal"&gt;AssocList&lt;/tt&gt; iterator as an example. Here's
the transformation:&lt;/p&gt;
&lt;img alt="transformation of for-range code" class="align-center" src="https://eli.thegreenplace.net/images/2024/for-range-code-transform-123.png" /&gt;
&lt;p&gt;Now looking into the definition of &lt;tt class="docutils literal"&gt;AssocList.All&lt;/tt&gt;, it's clear how the
iteration works. The loop in this method iterates over the items in the data
structure, passing each into the supplied &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; function, which the compiler
substitutes for the body of the original &lt;tt class="docutils literal"&gt;range&lt;/tt&gt; loop.&lt;/p&gt;
&lt;p&gt;This is the simplest example, because it doesn't change the control flow in any
way. In more complex cases the compiler applies more sophisticated
transformations; for example, a &lt;tt class="docutils literal"&gt;break&lt;/tt&gt; in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;for-range&lt;/span&gt;&lt;/tt&gt; loop body is
transformed into a &lt;tt class="docutils literal"&gt;return false&lt;/tt&gt; from the &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; function, directing
iteration to stop. A &lt;tt class="docutils literal"&gt;continue&lt;/tt&gt; is transformed into an early &lt;tt class="docutils literal"&gt;return true&lt;/tt&gt;;
more work is needed for &lt;tt class="docutils literal"&gt;goto&lt;/tt&gt; statements, early returns, panics, &lt;tt class="docutils literal"&gt;defer&lt;/tt&gt;s
and so on. For the gory details, take a look at the &lt;a class="reference external" href="https://github.com/golang/go/blob/release-branch.go1.23/src/cmd/compile/internal/rangefunc/rewrite.go"&gt;transformation
implementing the proposal&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stopping-iteration-early"&gt;
&lt;h2&gt;Stopping iteration early&lt;/h2&gt;
&lt;p&gt;Early stops are an essential feature of the range over functions proposal.
Recall our &lt;tt class="docutils literal"&gt;AssocList.All&lt;/tt&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;AssocList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seq2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lst&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Checking for a false return from &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; and using that to return early is
important, because this is the invoking &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;for-range&lt;/span&gt;&lt;/tt&gt; loop telling us to
stop. Consider this loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;al&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HasPrefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;found bad value, aborting!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;key=%v, value=%v\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As mentioned earlier, the &lt;tt class="docutils literal"&gt;break&lt;/tt&gt; is transformed into &lt;tt class="docutils literal"&gt;return false&lt;/tt&gt; when
the body of this loop is transformed into the &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; function. Once we've
encountered a &amp;quot;bad value&amp;quot;, we don't want to continue iterating, and therefore
the iterator function has to exit early, too.&lt;/p&gt;
&lt;p&gt;This is very important because iteration may be costly, have side effects (it
could be reading I/O devices, for example), or because the iterator isn't even
finite.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="iterating-over-all-fibonacci-numbers"&gt;
&lt;h2&gt;Iterating over &amp;quot;all&amp;quot; Fibonacci numbers&lt;/h2&gt;
&lt;p&gt;As an example of an infinite iterator, let's write one for Fibonacci numbers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;genFib&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function returns &lt;tt class="docutils literal"&gt;iter.Seq&lt;/tt&gt; because the iteration happens over single
values (unlike the pairs passed to &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; by our assoc list iterator).
This means the associated &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;for-range&lt;/span&gt;&lt;/tt&gt; loop will yield at most a single value.
Here's how we can use it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;genFib&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print Fibonacci numbers until (and including) the first one over 1000.
Clearly, there is no &amp;quot;end&amp;quot; to such an iterator; there are infinitely many
Fibonacci numbers. In fact, the &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; loop in the function returned by
&lt;tt class="docutils literal"&gt;genFib&lt;/tt&gt; doesn't even have an end condition; it only exits when &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt;
returns false. This happens when the &lt;tt class="docutils literal"&gt;break&lt;/tt&gt; statement from the &lt;tt class="docutils literal"&gt;if p &amp;gt;
1000&lt;/tt&gt; condition is triggered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recursive-iterators"&gt;
&lt;h2&gt;Recursive iterators&lt;/h2&gt;
&lt;p&gt;So far the iterator examples have all been &lt;em&gt;linear&lt;/em&gt;: the iterator had a single
loop that yields all the values one by one. Some iteration patterns are not
linear, however; for example, consider iterating over a binary tree:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Inorder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that there's no loop here - the iteration is done by means of recursion
instead. This code uses a recursive helper method -- &lt;tt class="docutils literal"&gt;push&lt;/tt&gt;. We need a helper
method here because we want &lt;tt class="docutils literal"&gt;push&lt;/tt&gt; to return a boolean; this boolean indicates
whether iteration should stop and propagates it up the recursion stack.
It only stops if &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; returns &lt;tt class="docutils literal"&gt;false&lt;/tt&gt; on some value.&lt;/p&gt;
&lt;p&gt;Here's the in-order tree iterator in action:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Create a sample tree:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//       10&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//      /  \&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//     20  40&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//    /  \&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//   30  39&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;Tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Inorder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Prints:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// 30&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// 20&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// 39&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// 10&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// 40&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-iteration-examples"&gt;
&lt;h2&gt;Additional iteration examples&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pkg.go.dev/bufio#Scanner"&gt;bufio.Scanner&lt;/a&gt; is a useful type for
iterating over lines in text; it can also be used to work with other separators,
but let's just talk about newline-separated lines for simplicity.&lt;/p&gt;
&lt;p&gt;The canonical way of iterating over all lines in the input is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;scanner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bufio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewScanner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stdin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fprintln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;reading standard input:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a great example of an ad-hoc iteration method the designers of Go came
up with, before the language had real iterator support. There's nothing wrong
with this approach - it's clear and it works well. However, without a standard
for iteration, multiple approaches emerge and one always has to consult the
documentation for the right way to do this.&lt;/p&gt;
&lt;p&gt;With the new range-over-functions feature, we can write an iterator that works
in a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;for-range&lt;/span&gt;&lt;/tt&gt; loop. I'll wrap &lt;tt class="docutils literal"&gt;Scanner&lt;/tt&gt; to demonstrate this without
modifying the standard library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;myScanner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;bufio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scanner&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;newScanner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;myScanner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bufio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewScanner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;myScanner&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;myScanner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;myScanner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can use it as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;scanner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;newScanner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stdin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;got line:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;reading stdin: %v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One could envision an &lt;tt class="docutils literal"&gt;All&lt;/tt&gt; method being added to the actual &lt;tt class="docutils literal"&gt;Scanner&lt;/tt&gt;
type at some point in the future.&lt;/p&gt;
&lt;p&gt;Another example that I like is the &lt;tt class="docutils literal"&gt;Backward&lt;/tt&gt; function for slices. It shows
that a free-standing function can also return an iterator, and that it can
use a parameter to define the iteration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Backward&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;any&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Seq2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Backward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Prints:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// 22&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// 11&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// 8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// 7&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// 6&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// 5&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You don't have to write your own &lt;tt class="docutils literal"&gt;Backward&lt;/tt&gt; function though - it's already
been added to the standard &lt;a class="reference external" href="https://pkg.go.dev/slices"&gt;slices package&lt;/a&gt;,
along with some other useful iterator functions (search the documentation
for &lt;tt class="docutils literal"&gt;iter.Seq&lt;/tt&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="final-words-push-vs-pull-iterators"&gt;
&lt;h2&gt;Final words - push vs. pull iterators&lt;/h2&gt;
&lt;p&gt;I like this new feature - it improves the ergonomics of Go
programming with only minimal added complexity &lt;a class="footnote-reference" href="#footnote-3" id="footnote-reference-3"&gt;[3]&lt;/a&gt;. I started putting
together a &lt;a class="reference external" href="https://github.com/eliben/gogl"&gt;small collection of generic Go data structures&lt;/a&gt;,
and most of the packages there now implement iterators.&lt;/p&gt;
&lt;p&gt;Finally, if you read the proposal and other documents related to it, you'll
quickly run into &amp;quot;push&amp;quot; vs. &amp;quot;pull&amp;quot; iterators; what do these terms mean?&lt;/p&gt;
&lt;p&gt;Simply put, &amp;quot;push&amp;quot; iterators push their values into a function given to them;
the iterators in this proposal and the examples in this post are therefore
all push iterators - they take a &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; function and generate values by
invoking it; &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt;'s return value is then used to determine whether the
iterator should continue generating values, or else stop.&lt;/p&gt;
&lt;p&gt;&amp;quot;Pull&amp;quot; iterators work somewhat differently; a pull iterator is a function
you can invoke multiple times and its signature is something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cont&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;tt class="docutils literal"&gt;value&lt;/tt&gt; is the generated value and &lt;tt class="docutils literal"&gt;cont&lt;/tt&gt; says if the iterator is
ready to produce more values, or else is done.&lt;/p&gt;
&lt;p&gt;The control flow around push vs. pull iterators is very different. Push
iterators &amp;quot;drive&amp;quot; the iteration process, feeding values into a function until
they're done or explicitly asked to stop. Pull iterators, on the other hand,
are driven from elsewhere and have to retain state between calls. Both kinds of
iterators are useful for different patterns.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://go.dev/blog/range-functions"&gt;Go blog post&lt;/a&gt; has an example
of pull-based iteration, and &lt;a class="reference external" href="https://research.swtch.com/coro"&gt;Russ's coro blog post&lt;/a&gt;
goes into more details.&lt;/p&gt;
&lt;p&gt;An &lt;a class="reference external" href="https://pkg.go.dev/iter#Pull"&gt;iter.Pull&lt;/a&gt; function for converting from
push to pull iterators has also been added to the standard library. I may
write more about pull iterators separately.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;As an exercise, if you want to feel like a real Lisp hacker, feel free
to implement it using a proper linked list.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Note that I'm saying &lt;em&gt;maximal&lt;/em&gt; number of returned values. Even if our
&lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; takes two values, we can still iterate with &lt;tt class="docutils literal"&gt;for x := range&lt;/tt&gt;
and only the &lt;em&gt;first&lt;/em&gt; value fed to &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt; will be assigned to &lt;tt class="docutils literal"&gt;x&lt;/tt&gt;.
This is just like iterating over regular maps, where the
&lt;tt class="docutils literal"&gt;for k, v := range&lt;/tt&gt; form obtains both keys and values, but the
&lt;tt class="docutils literal"&gt;for k := range&lt;/tt&gt; form is valid as well - for iterating just over keys.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;At least user-observable complexity. The implementation of the proposal
is rather involved in order to handle all forms of control flow properly.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Go"></category></entry><entry><title>Bloch sphere</title><link href="https://eli.thegreenplace.net/2024/bloch-sphere/" rel="alternate"></link><published>2024-10-29T16:10:00-07:00</published><updated>2024-11-04T14:08:15-08:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-10-29:/2024/bloch-sphere/</id><summary type="html">&lt;p&gt;When learning the basics of quantum computing, the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bloch_sphere"&gt;Bloch sphere&lt;/a&gt;
comes early on as a visualization technique of quantum states. It shows the
state of a single qubit as a point on this sphere:&lt;/p&gt;
&lt;img alt="Bloch sphere showing kets 0 and 1 in the usual places" class="align-center" src="https://eli.thegreenplace.net/images/2024/bloch-with-kets-01.png" /&gt;
&lt;p&gt;This post explains how the Bloch sphere works and also &lt;em&gt;why&lt;/em&gt; it works.&lt;/p&gt;
&lt;div class="section" id="mapping-4-dimensions-onto-a-sphere"&gt;
&lt;h2&gt;Mapping 4 dimensions â€¦&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;When learning the basics of quantum computing, the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bloch_sphere"&gt;Bloch sphere&lt;/a&gt;
comes early on as a visualization technique of quantum states. It shows the
state of a single qubit as a point on this sphere:&lt;/p&gt;
&lt;img alt="Bloch sphere showing kets 0 and 1 in the usual places" class="align-center" src="https://eli.thegreenplace.net/images/2024/bloch-with-kets-01.png" /&gt;
&lt;p&gt;This post explains how the Bloch sphere works and also &lt;em&gt;why&lt;/em&gt; it works.&lt;/p&gt;
&lt;div class="section" id="mapping-4-dimensions-onto-a-sphere"&gt;
&lt;h2&gt;Mapping 4 dimensions onto a sphere&lt;/h2&gt;
&lt;p&gt;We have a qubit in an arbitrary state:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/a63b3b4185f94421fe82d6b27e83db4c871fcfb6.svg" style="height: 19px;" type="image/svg+xml"&gt;\[\ket{\psi}=a\ket{0}+b\ket{1}\]&lt;/object&gt;
&lt;p&gt;How can we visualize this state?&lt;/p&gt;
&lt;p&gt;Had &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; been real numbers, it would have been easy since there would
only be two dimensions (degrees of freedom). However, in reality
&lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/a40c5e2c5b3fee3c060de7e3623cfde67a0a54f2.svg" style="height: 16px;" type="image/svg+xml"&gt;a,b\in\mathbb{C}&lt;/object&gt;, making our visualization task much more challenging
because there are now 4 dimensions (two for each complex number). The Bloch
sphere is a clever mapping from this 4D reality into something we can visualize.&lt;/p&gt;
&lt;p&gt;We start by representing each of the complex coefficients using their
&lt;a class="reference external" href="https://eli.thegreenplace.net/2024/notes-on-the-euler-formula/"&gt;polar representation&lt;/a&gt;,
where the magnitudes and angles are real numbers:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/0be9ded0fff08d6e751472c127b3e40b279ddc0a.svg" style="height: 49px;" type="image/svg+xml"&gt;\[\begin{align*}
a&amp;amp;=r_a e^{i\phi_a}\\
b&amp;amp;=r_b e^{i\phi_b}
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Therefore:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/45bd78f16aaf510347915f3d0ba14ca0f8676e28.svg" style="height: 22px;" type="image/svg+xml"&gt;\[\ket{\psi}=r_a e^{i\phi_a}\ket{0} + r_b e^{i\phi_b}\ket{1}\]&lt;/object&gt;
&lt;p&gt;Since a global phase doesn't affect the observable properties of a qubit (see
the appendix for more on this), we can multiply this state by the global
state &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/8d2d62a6083c60a9df49922270ce494c1b9fc567.svg" style="height: 15px;" type="image/svg+xml"&gt;e^{-i\phi_a}&lt;/object&gt; to get &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/02be39bdbc3a331d4bf7a7ea0a1ed596e26ae8bf.svg" style="height: 61px;" type="image/svg+xml"&gt;\[\begin{align*}
\ket{\psi}&amp;amp;=e^{-i\phi_a}\left (r_a e^{i\phi_a}\ket{0} + r_b e^{i\phi_b}\ket{1} \right ) \\
 &amp;amp;=r_a\ket{0}+r_b e^{i(\phi_b-\phi_a)}\ket{1}
\end{align*}\]&lt;/object&gt;
&lt;p&gt;There's only a single angle in this equation: &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/a062edb59d046220003d17f70cc81374153ac27f.svg" style="height: 16px;" type="image/svg+xml"&gt;\phi_b-\phi_a&lt;/object&gt;; this
is the &lt;em&gt;relative&lt;/em&gt; phase between the two components of the state. Let's
call it just &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/411e715f9ab9075b0a30b4117d209921f0bc2389.svg" style="height: 16px;" type="image/svg+xml"&gt;\phi&lt;/object&gt;, and then:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/239c993ea0542ee402bb3d77eed2400f7a2c51b6.svg" style="height: 22px;" type="image/svg+xml"&gt;\[\ket{\psi}=r_a\ket{0}+r_b e^{i\phi}\ket{1}\]&lt;/object&gt;
&lt;p&gt;We're down from 4 real parameters to 3. But there's still a constraint on our
state equation that we didn't use; all quantum states must be normalized - the
amplitudes must satisfy:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/6a408bfe9b9e2ac643a9f2563112c11e74024ffd.svg" style="height: 22px;" type="image/svg+xml"&gt;\[|a|^2+|b|^2=1\]&lt;/object&gt;
&lt;p&gt;In our case:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/1c78aafcb7004b3f4bfe9aa9f1845b90caf2d392.svg" style="height: 22px;" type="image/svg+xml"&gt;\[|r_a|^2+|r_b e^{i\phi}|^2=1\]&lt;/object&gt;
&lt;p&gt;To proceed from here, we'll rewrite the second magnitude using the cartesian
representation of complex numbers (instead of parameters &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/cdfe7c131e161adc750f10a87ccd098fbf8a276c.svg" style="height: 11px;" type="image/svg+xml"&gt;r_b&lt;/object&gt; and
&lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/411e715f9ab9075b0a30b4117d209921f0bc2389.svg" style="height: 16px;" type="image/svg+xml"&gt;\phi&lt;/object&gt;, we'll use &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;) and do some algebra:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/735fd5adac7e0e47a77befd1509ce4e21d6183c6.svg" style="height: 77px;" type="image/svg+xml"&gt;\[\begin{align*}
|r_a|^2+|x+iy|^2&amp;amp;=1 \\
{r_a}^2+(x+iy)(x-iy)&amp;amp;=1 \\
{r_a}^2+x^2+y^2&amp;amp;=1 \\
\end{align*}\]&lt;/object&gt;
&lt;p&gt;If we rename &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/cb3719acabf42ce9628ea5488e484e3ff3958fb3.svg" style="height: 11px;" type="image/svg+xml"&gt;r_a&lt;/object&gt; to &lt;em&gt;z&lt;/em&gt;, this equation should look familiar:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/580c4e5828c85ff64ba780c9857f89283b5b6bba.svg" style="height: 21px;" type="image/svg+xml"&gt;\[x^2+y^2+z^2=1\]&lt;/object&gt;
&lt;p&gt;This is the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Sphere#Equations"&gt;equation of a unit sphere&lt;/a&gt;!
We can now use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Spherical_coordinate_system"&gt;spherical coordinates&lt;/a&gt;
to express:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/3566cb7d40bd8e2b4991672b7200c15b9a83ef1a.svg" style="height: 72px;" type="image/svg+xml"&gt;\[\begin{align*}
x&amp;amp;=sin(\theta) cos(\phi) \\
y&amp;amp;=sin(\theta) sin(\phi) \\
z&amp;amp;=cos(\theta) \\
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Where &lt;img alt="\theta" class="valign-0" src="https://eli.thegreenplace.net/images/math/cb005d76f9f2e394a770c2562c2e150a413b3216.png" style="height: 12px;" /&gt; is the angle from the positive &lt;em&gt;z&lt;/em&gt; axis (&amp;quot;polar angle&amp;quot;) and
&lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/411e715f9ab9075b0a30b4117d209921f0bc2389.svg" style="height: 16px;" type="image/svg+xml"&gt;\phi&lt;/object&gt; is the angle from the positive &lt;em&gt;x&lt;/em&gt; axis (&amp;quot;azimuthal angle&amp;quot;):&lt;/p&gt;
&lt;img alt="Unit sphere with spherical coordinates" class="align-center" src="https://eli.thegreenplace.net/images/2024/unit-sphere-polar.png" /&gt;
&lt;p&gt;If you recall, we expressed &lt;em&gt;a&lt;/em&gt; in our quantum state as &lt;em&gt;z&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; as
&lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/dc5648d309ad9fa02d53124cd7d954697f66d39c.svg" style="height: 16px;" type="image/svg+xml"&gt;x+iy&lt;/object&gt;. Substituting back into the state equation:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/adea20be1037a6345308eb2c42c05caea1619503.svg" style="height: 102px;" type="image/svg+xml"&gt;\[\begin{align*}
\ket{\psi}&amp;amp;=z\ket{0}+(x+iy)\ket{1}\\
&amp;amp;=cos(\theta)\ket{0}+(sin(\theta)cos(\phi) + i sin(\theta)sin(\phi))\ket{1}\\
&amp;amp;=cos(\theta)\ket{0}+sin(\theta)(cos(\phi) + i sin(\phi))\ket{1}\\
&amp;amp;=cos(\theta)\ket{0}+sin(\theta)e^{i \phi}\ket{1}\\
\end{align*}\]&lt;/object&gt;
&lt;p&gt;We're now down to just 2 real parameters: the angles &lt;img alt="\theta" class="valign-0" src="https://eli.thegreenplace.net/images/math/cb005d76f9f2e394a770c2562c2e150a413b3216.png" style="height: 12px;" /&gt; and
&lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/411e715f9ab9075b0a30b4117d209921f0bc2389.svg" style="height: 16px;" type="image/svg+xml"&gt;\phi&lt;/object&gt;. These two angles uniquely map a quantum state onto a unit sphere.&lt;/p&gt;
&lt;p&gt;Now comes the trickiest part in understanding the Bloch sphere, IMHO. Notice
that something is wrong with the mapping we've just found. In spherical
coordinates, &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/6ac3c9b7281d43fe8cec91958a20e2750285cad9.svg" style="height: 15px;" type="image/svg+xml"&gt;$$0\leq\theta\leq \pi$$&lt;/object&gt;. However, if we set &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/35d63cd9f27cd61eae24d22e3869f0ce0a2acceb.svg" style="height: 12px;" type="image/svg+xml"&gt;\theta=\pi&lt;/object&gt;
in the state equation we've just derived, we get:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/384c07724f4cdc2a000d76ac2303521000cea56b.svg" style="height: 19px;" type="image/svg+xml"&gt;\[\ket{\psi}=-\ket{0}\]&lt;/object&gt;
&lt;p&gt;Which is &lt;em&gt;not&lt;/em&gt; what we see on the Bloch sphere; indeed, since the states
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/6b461a7c4ec702afa72360726f18f43fc7d785a1.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{0}&lt;/object&gt; and &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/4f12cd6e6422f93a0993205418cfb42a13b4ec39.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{1}&lt;/object&gt; are orthogonal by definition, we should
not be seeing &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/4f12cd6e6422f93a0993205418cfb42a13b4ec39.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{1}&lt;/object&gt; as the polar opposite of &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/6b461a7c4ec702afa72360726f18f43fc7d785a1.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{0}&lt;/object&gt; on the
Bloch sphere, and yet we do. What's going on?&lt;/p&gt;
&lt;p&gt;The simple (but partial) explanation is that we'd need only half a sphere
to represent states, but it wouldn't have the nice visual properties of the
full Bloch sphere. There are deeper mathematical reasons for this - see
discussions &lt;a class="reference external" href="https://physics.stackexchange.com/questions/174562/why-is-theta-over-2-used-for-a-bloch-sphere-instead-of-theta"&gt;#1&lt;/a&gt;
and &lt;a class="reference external" href="https://quantumcomputing.stackexchange.com/questions/4118/why-are-half-angles-used-in-the-bloch-sphere-representation-of-qubits"&gt;#2&lt;/a&gt;
for more details.&lt;/p&gt;
&lt;p&gt;The usual mathematical trick is to stretch the state space over an entire
sphere by using &lt;object class="valign-m6" data="https://eli.thegreenplace.net/images/math/fb50c3fe8ab16c3bc51af81f89862dd768effcd8.svg" style="height: 22px;" type="image/svg+xml"&gt;\frac{\theta}{2}&lt;/object&gt; instead of &lt;img alt="\theta" class="valign-0" src="https://eli.thegreenplace.net/images/math/cb005d76f9f2e394a770c2562c2e150a413b3216.png" style="height: 12px;" /&gt;. Therefore,
our state would be:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/8418b36e6c0230cfb3867aa4ba3bdb3dea774b94.svg" style="height: 43px;" type="image/svg+xml"&gt;\[\ket{\psi}=cos\left (\frac{\theta}{2} \right )\ket{0}+sin\left (\frac{\theta}{2} \right )e^{i \phi}\ket{1}\]&lt;/object&gt;
&lt;p&gt;Now if we set &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/35d63cd9f27cd61eae24d22e3869f0ce0a2acceb.svg" style="height: 12px;" type="image/svg+xml"&gt;\theta=\pi&lt;/object&gt;, we get:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/c45966410875507bf789ea509bd8554fd8e5a3c0.svg" style="height: 22px;" type="image/svg+xml"&gt;\[\ket{\psi}=0\cdot\ket{0}+e^{i\phi}\ket{1}\equiv\ket{1}\]&lt;/object&gt;
&lt;p&gt;Once again, the equivalence to &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/4f12cd6e6422f93a0993205418cfb42a13b4ec39.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{1}&lt;/object&gt; is because now that the phase
&lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/411e715f9ab9075b0a30b4117d209921f0bc2389.svg" style="height: 16px;" type="image/svg+xml"&gt;\phi&lt;/object&gt; applies only to &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/4f12cd6e6422f93a0993205418cfb42a13b4ec39.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{1}&lt;/object&gt;, it makes no difference.
Indeed, if we have a point on the &lt;em&gt;z&lt;/em&gt; axis, it doesn't really matter what its
azimuthal angle is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-the-bloch-sphere-to-visualize-quantum-states"&gt;
&lt;h2&gt;Using the Bloch sphere to visualize quantum states&lt;/h2&gt;
&lt;p&gt;Now that we understand the math behind the mapping, let's use it to visualize
some quantum state superpositions on the Bloch sphere.&lt;/p&gt;
&lt;p&gt;We'll start with the important state &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/f1c98d68542f8a94e29c79e5e65768469360e707.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{+}&lt;/object&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/6af9c454692362b2fce37aa6406e66f376883cda.svg" style="height: 40px;" type="image/svg+xml"&gt;\[\ket{+}=\frac{1}{\sqrt{2}}\left (\ket{0}+\ket{1} \right )\]&lt;/object&gt;
&lt;p&gt;To find the angles for the spherical representation:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/8418b36e6c0230cfb3867aa4ba3bdb3dea774b94.svg" style="height: 43px;" type="image/svg+xml"&gt;\[\ket{\psi}=cos\left (\frac{\theta}{2} \right )\ket{0}+sin\left (\frac{\theta}{2} \right )e^{i \phi}\ket{1}\]&lt;/object&gt;
&lt;p&gt;We notice that &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/863965f01f19330eab0895c6fe94ce1b3263d91a.svg" style="height: 16px;" type="image/svg+xml"&gt;\phi=0&lt;/object&gt; because the coefficient of &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/4f12cd6e6422f93a0993205418cfb42a13b4ec39.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{1}&lt;/object&gt; is
real. Also:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/aa76639e3630fc599b822ac8ccb3f00f9a4eb5b1.svg" style="height: 43px;" type="image/svg+xml"&gt;\[\frac{\theta}{2}=cos^{-1}\left (\frac{1}{\sqrt{2}}\right ) \Longrightarrow \theta=\frac{\pi}{2}\]&lt;/object&gt;
&lt;p&gt;Recalling the meaning of &lt;img alt="\theta" class="valign-0" src="https://eli.thegreenplace.net/images/math/cb005d76f9f2e394a770c2562c2e150a413b3216.png" style="height: 12px;" /&gt; and &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/411e715f9ab9075b0a30b4117d209921f0bc2389.svg" style="height: 16px;" type="image/svg+xml"&gt;\phi&lt;/object&gt; in spherical
coordinates, this means that &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/f1c98d68542f8a94e29c79e5e65768469360e707.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{+}&lt;/object&gt; is on the positive &lt;em&gt;x&lt;/em&gt; axis. Here
is this state on the Bloch sphere, along with other important states
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/e15b266d80354b55bd364547e650588797cc10f6.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{-}&lt;/object&gt;, &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/484eb17230e803270870cd1a6cbc42008dfd42a0.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{i}&lt;/object&gt; and &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/638a583ff638ffde63113246f47f0e1fd1abb0e3.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{-i}&lt;/object&gt;, which are similarly
simple to compute:&lt;/p&gt;
&lt;img alt="Bloch sphere showing kets 0, 1, +, -, i, -i" class="align-center" src="https://eli.thegreenplace.net/images/2024/bloch-with-basic-states.png" /&gt;
&lt;p&gt;The measurement probabilities of &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/f1c98d68542f8a94e29c79e5e65768469360e707.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{+}&lt;/object&gt; in the standard basis are
&lt;object class="valign-m6" data="https://eli.thegreenplace.net/images/math/eb946338365d9781f7d2e9ec692c26702d0ae3a7.svg" style="height: 22px;" type="image/svg+xml"&gt;\frac{1}{2}&lt;/object&gt; for 0 and &lt;object class="valign-m6" data="https://eli.thegreenplace.net/images/math/eb946338365d9781f7d2e9ec692c26702d0ae3a7.svg" style="height: 22px;" type="image/svg+xml"&gt;\frac{1}{2}&lt;/object&gt; for 1 &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;. The Bloch sphere makes
it geometrically intuitive, because &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/f1c98d68542f8a94e29c79e5e65768469360e707.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{+}&lt;/object&gt; lies on the &amp;quot;equator&amp;quot;,
half-way between &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/6b461a7c4ec702afa72360726f18f43fc7d785a1.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{0}&lt;/object&gt; and &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/4f12cd6e6422f93a0993205418cfb42a13b4ec39.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{1}&lt;/object&gt;. Note that all the
states depicted above have these measurement probabilities - the only difference
between them is the relative phase, which is expressed with the &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/411e715f9ab9075b0a30b4117d209921f0bc2389.svg" style="height: 16px;" type="image/svg+xml"&gt;\phi&lt;/object&gt;
angle on the sphere.&lt;/p&gt;
&lt;p&gt;As the final example, let's map the following state onto the Bloch sphere:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/346da634519f91d3e34dca04cf2cfe525cd64f49.svg" style="height: 40px;" type="image/svg+xml"&gt;\[\ket{\psi}=\frac{3+i\sqrt{3}}{4}\ket{0}-\frac{1}{2}\ket{1}\]&lt;/object&gt;
&lt;p&gt;Rearranging a bit:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/57b0f70624be5a1a4b25ae190f6f2cc9b5ec24f7.svg" style="height: 54px;" type="image/svg+xml"&gt;\[\ket{\psi}=\frac{\sqrt{3}}{2}\left (\frac{\sqrt{3}}{2}+i\frac{1}{2}\right )\ket{0}-\frac{1}{2}\ket{1}\]&lt;/object&gt;
&lt;p&gt;Since &lt;object class="valign-m6" data="https://eli.thegreenplace.net/images/math/3a2a06328699cf55bff36f68bca03d4867809d2e.svg" style="height: 22px;" type="image/svg+xml"&gt;sin(\pi/6)=\frac{1}{2}&lt;/object&gt; and &lt;object class="valign-m6" data="https://eli.thegreenplace.net/images/math/47c6055c65e5687c104d3023f120baad97a03d0d.svg" style="height: 25px;" type="image/svg+xml"&gt;cos(\pi/6)=\frac{\sqrt{3}}{2}&lt;/object&gt;,
we can rewrite it as:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/2370970cdcec491e0a78395ac09a6c1cefefb40b.svg" style="height: 40px;" type="image/svg+xml"&gt;\[\ket{\psi}=\frac{\sqrt{3}}{2}e^{i\pi/6}\ket{0}-\frac{1}{2}\ket{1}\]&lt;/object&gt;
&lt;p&gt;To get into the spherical coordinate representation, we have to move the
relative phase to the &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/4f12cd6e6422f93a0993205418cfb42a13b4ec39.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{1}&lt;/object&gt;. To do that, we'll factor out
&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/c491b6741e7886066364f39c0c06d5d99bebad88.svg" style="height: 16px;" type="image/svg+xml"&gt;e^{i\pi/6}&lt;/object&gt; and then ignore the global phase. We'll then use the
fact that &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/445f8fe14bdc777990faaf6a92e624c9eb1446e1.svg" style="height: 16px;" type="image/svg+xml"&gt;e^{-i\pi/6}=e^{i5\pi/6}&lt;/object&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/6041ae8707c629a2a07d186a8853d96c3df32d60.svg" style="height: 146px;" type="image/svg+xml"&gt;\[\begin{align*}
\ket{\psi}&amp;amp;=\frac{\sqrt{3}}{2}e^{i\pi/6}\ket{0}-\frac{1}{2}\ket{1}\\
&amp;amp;=e^{i\pi/6}\left(\frac{\sqrt{3}}{2}\ket{0}-e^{-i\pi/6}\frac{1}{2}\ket{1}\right )\\
&amp;amp;\equiv\frac{\sqrt{3}}{2}\ket{0}+e^{i5\pi/6}\frac{1}{2}\ket{1}
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Now we're ready to extract the angles:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/cfe93f7d3af5e3652da02da879fe4e5a40b9bd72.svg" style="height: 96px;" type="image/svg+xml"&gt;\[\begin{align*}
\frac{\theta}{2}&amp;amp;=cos^{-1}\left (\frac{\sqrt{3}}{2}\right ) \Longrightarrow \theta = \frac{\pi}{3}\\
\phi&amp;amp;=\frac{5\pi}{6}
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Here's how this looks on the sphere:&lt;/p&gt;
&lt;img alt="Bloch sphere showing psi" class="align-center" src="https://eli.thegreenplace.net/images/2024/bloch-phi-pi-6.png" /&gt;
&lt;p&gt;Visually, we get the intuitive sense that the probability of measuring
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/6b461a7c4ec702afa72360726f18f43fc7d785a1.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{0}&lt;/object&gt; is
higher than the probability of measuring &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/4f12cd6e6422f93a0993205418cfb42a13b4ec39.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{1}&lt;/object&gt;, for example. Also, if
we measure using another base like &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/f1c98d68542f8a94e29c79e5e65768469360e707.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{+}&lt;/object&gt; and &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/e15b266d80354b55bd364547e650588797cc10f6.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{-}&lt;/object&gt;, it's
apparent that the probability of measuring &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/e15b266d80354b55bd364547e650588797cc10f6.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{-}&lt;/object&gt; will be higher, and
so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="appendix-equivalence-of-global-phases"&gt;
&lt;h2&gt;Appendix: Equivalence of global phases&lt;/h2&gt;
&lt;p&gt;Let's take a qubit in this superposition:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/f862d0020e1490cadeeeeec1c7c7b0dfe4fb9600.svg" style="height: 40px;" type="image/svg+xml"&gt;\[\psi=\frac{\sqrt{3}}{2}\ket{0}+\frac{1}{2}\ket{1}\]&lt;/object&gt;
&lt;p&gt;The probabilities of measurements in the standard base are:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/59bc2b214542e2bf031ff2a60346a96d17dd4881.svg" style="height: 109px;" type="image/svg+xml"&gt;\[\begin{align*}
  0\longrightarrow\left|\frac{\sqrt{3}}{2}\right|^2&amp;amp;=\frac{3}{4}\\
  1\longrightarrow\left|\frac{1}{2}\right|^2&amp;amp;=\frac{1}{4}
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Now let's apply a global phase &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/411e715f9ab9075b0a30b4117d209921f0bc2389.svg" style="height: 16px;" type="image/svg+xml"&gt;\phi&lt;/object&gt; to our qubit:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/4e2cce421bc6291a7bcb7daa8387b17b8ef36c92.svg" style="height: 54px;" type="image/svg+xml"&gt;\[\hat{\psi}=e^{i\phi}\left(\frac{\sqrt{3}}{2}\ket{0}+\frac{1}{2}\ket{1}\right)\]&lt;/object&gt;
&lt;p&gt;And calculate the measurement probabilities again:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/fda63c6aa7775f911388c1dbf45c87251d901edd.svg" style="height: 109px;" type="image/svg+xml"&gt;\[\begin{align*}
  0\longrightarrow\left|e^{i\phi}\frac{\sqrt{3}}{2}\right|^2=\frac{\sqrt{3}}{2}e^{i\phi}\cdot\frac{\sqrt{3}}{2}e^{-i\phi}&amp;amp;=\frac{3}{4}\\
  1\longrightarrow\left|\frac{1}{2}\right|^2=\frac{1}{2}e^{i\phi}\cdot\frac{1}{2}e^{-i\phi}&amp;amp;=\frac{1}{4}
\end{align*}\]&lt;/object&gt;
&lt;p&gt;The global phase didn't change our measurement probabilities in any way;
since measurement is the only way to observe the quantum state, we say that
the global phase is irrelevant and can be ignored.&lt;/p&gt;
&lt;p&gt;As an exercise, it's easy to show that this applies for any
quantum state &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/b573b4df40ba8628e08f542cce5ff9fdf024818d.svg" style="height: 19px;" type="image/svg+xml"&gt;a\ket{0}+b\ket{1}&lt;/object&gt;. It also applies for any computational
basis, not just the standard basis &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/6b461a7c4ec702afa72360726f18f43fc7d785a1.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{0}&lt;/object&gt; and &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/4f12cd6e6422f93a0993205418cfb42a13b4ec39.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{1}&lt;/object&gt;.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Strictly speaking, we shouldn't be using the equals sign here because
this new state isn't equal to the old one; it's equivalent to it,
so we can use the &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/265a73f0318d82099471b873fb7854c7f06ef9d4.svg" style="height: 8px;" type="image/svg+xml"&gt;\equiv&lt;/object&gt; sign. I'll just keep using
&lt;object class="valign-2" data="https://eli.thegreenplace.net/images/math/21606782c65e44cac7afbb90977d8b6f82140e76.svg" style="height: 5px;" type="image/svg+xml"&gt;=&lt;/object&gt; for simplicity, though.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;For a generalized quantum superposition &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/1f4e773c84381f25644aa1407e4a7cfe845b2033.svg" style="height: 19px;" type="image/svg+xml"&gt;\ket{\psi}=a\ket{0}+b\ket{1}&lt;/object&gt;,
the probability of measuring 0 is &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/16af801e554a81bc5fcb604ec6948d46829d5683.svg" style="height: 20px;" type="image/svg+xml"&gt;|a|^2&lt;/object&gt;, and the probability
of measuring 1 is &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/afd90d000ca1b52787b43dc4ad5db6a9848cb930.svg" style="height: 20px;" type="image/svg+xml"&gt;|b|^2&lt;/object&gt;. Recall that in the general case
&lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are complex, so we have to calculate the
&lt;a class="reference external" href="https://eli.thegreenplace.net/2024/calculating-the-norm-of-a-complex-number/"&gt;norm-squared&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Math"></category></entry><entry><title>Calculating the norm of a complex number</title><link href="https://eli.thegreenplace.net/2024/calculating-the-norm-of-a-complex-number/" rel="alternate"></link><published>2024-10-17T19:45:00-07:00</published><updated>2024-11-04T14:08:15-08:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-10-17:/2024/calculating-the-norm-of-a-complex-number/</id><summary type="html">&lt;p&gt;In this quick post I'll dispel a common confusion in the basic math
of complex numbers. It's often useful to calculate the norm-square (also
known as &lt;a class="reference external" href="https://mathworld.wolfram.com/AbsoluteSquare.html"&gt;absolute square&lt;/a&gt;)
of a complex number &lt;em&gt;z&lt;/em&gt;. This norm-square is denoted &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/360ebdabd39e1822650a9e06af52bafa42c612d1.svg" style="height: 20px;" type="image/svg+xml"&gt;|z|^2&lt;/object&gt;. One
could naively expect that:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/0ba9970d4320810ab52d4760cc3710f8b1aa4d2f.svg" style="height: 22px;" type="image/svg+xml"&gt;\[|z|^2=zz\]&lt;/object&gt;
&lt;p&gt;However, that's false â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this quick post I'll dispel a common confusion in the basic math
of complex numbers. It's often useful to calculate the norm-square (also
known as &lt;a class="reference external" href="https://mathworld.wolfram.com/AbsoluteSquare.html"&gt;absolute square&lt;/a&gt;)
of a complex number &lt;em&gt;z&lt;/em&gt;. This norm-square is denoted &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/360ebdabd39e1822650a9e06af52bafa42c612d1.svg" style="height: 20px;" type="image/svg+xml"&gt;|z|^2&lt;/object&gt;. One
could naively expect that:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/0ba9970d4320810ab52d4760cc3710f8b1aa4d2f.svg" style="height: 22px;" type="image/svg+xml"&gt;\[|z|^2=zz\]&lt;/object&gt;
&lt;p&gt;However, that's false! The way to calculate norm-square is:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/93a6ea8b04b9e10b4ac45e52aee614cda725e38f.svg" style="height: 22px;" type="image/svg+xml"&gt;\[|z|^2=zz^*\]&lt;/object&gt;
&lt;p&gt;Where &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/3c28f425f15b96a78602a12bc367a48e1708c344.svg" style="height: 12px;" type="image/svg+xml"&gt;z^*&lt;/object&gt; is the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Complex_conjugate"&gt;complex conjugate&lt;/a&gt; of &lt;em&gt;z&lt;/em&gt;.
But why? To understand the mechanics of this calculation, let's start by
defining what a &lt;em&gt;norm&lt;/em&gt; is.&lt;/p&gt;
&lt;div class="section" id="the-norm-of-a-complex-number"&gt;
&lt;h2&gt;The norm of a complex number&lt;/h2&gt;
&lt;p&gt;Informally, a &lt;em&gt;norm&lt;/em&gt; is a generalization of the
concept of &amp;quot;length&amp;quot; or &amp;quot;size&amp;quot;. For a real number &lt;em&gt;r&lt;/em&gt;, the norm is its absolute
value &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/5a43d0019ad191c183202219f9300ad0d99ecdf3.svg" style="height: 19px;" type="image/svg+xml"&gt;|r|&lt;/object&gt;. No matter if the number is positive or negative, the norm is
its &amp;quot;length&amp;quot; - the distance from the origin.&lt;/p&gt;
&lt;p&gt;A norm is defined similarly for complex numbers. Here's a standard geometrical
interpretation of a complex number &lt;em&gt;z&lt;/em&gt;, showing both cartesian and polar
coordinates:&lt;/p&gt;
&lt;img alt="Cartesian and polar representation of a complex number" class="align-center" src="https://eli.thegreenplace.net/images/2024/complex-cartesian-polar.png" /&gt;
&lt;p&gt;The &amp;quot;norm&amp;quot; of &lt;em&gt;z&lt;/em&gt; is the length of the blue line, or the distance of its
endpoint from the origin (&lt;a class="reference external" href="https://eli.thegreenplace.net/2024/notes-on-the-euler-formula/"&gt;in the polar representation&lt;/a&gt;&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/0d8a226a76f59bb6b9b4b23b11fbb18118336c40.svg" style="height: 15px;" type="image/svg+xml"&gt;z=re^{i\theta}&lt;/object&gt;,
it's exactly &lt;em&gt;r&lt;/em&gt;). The norm of a complex number uses the same notation
as the absolute value: &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/0d4ebef37595cd27057748de36eab66c6d8e1e04.svg" style="height: 19px;" type="image/svg+xml"&gt;|z|&lt;/object&gt;, because it means the same thing. Another
common name for the norm of complex numbers is &lt;a class="reference external" href="https://mathworld.wolfram.com/ComplexModulus.html"&gt;modulus&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="norm-a-formal-definition"&gt;
&lt;h2&gt;Norm: a formal definition&lt;/h2&gt;
&lt;p&gt;The formal definition of a norm (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Norm_(mathematics)"&gt;from Wikipedia&lt;/a&gt;)
talks about generalized vector spaces. Since complex numbers are also a vector
space (of dimension 1), we can simplify the definition just for
&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/706e4005d6760527e1bd99f36d2e91c4f60ad91f.svg" style="height: 12px;" type="image/svg+xml"&gt;\mathbb{C}&lt;/object&gt; as follows:&lt;/p&gt;
&lt;p&gt;A norm on &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/706e4005d6760527e1bd99f36d2e91c4f60ad91f.svg" style="height: 12px;" type="image/svg+xml"&gt;\mathbb{C}&lt;/object&gt; is a real-valued function &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/633a6c4d4c130b45fb1b8ef67cd28851444288bf.svg" style="height: 16px;" type="image/svg+xml"&gt;p:\mathbb{C}\rightarrow\mathbb{R}&lt;/object&gt;
with the following properties:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Triangle inequality: &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/209e13884ab8dafefe1963d183fdda62ba1864fa.svg" style="height: 19px;" type="image/svg+xml"&gt;p(z+w)\leq p(z)+p(w)&lt;/object&gt; for all &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/3eb34c306327bdc359651378e76a616fb3b0f8cb.svg" style="height: 16px;" type="image/svg+xml"&gt;z,w\in \mathbb{C}&lt;/object&gt;&lt;/li&gt;
&lt;li&gt;Absolute homogeneity: &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/bac398d257afc0a11114fbcd2cf4f79ad9aa2b57.svg" style="height: 19px;" type="image/svg+xml"&gt;p(sz)=|s|p(z)&lt;/object&gt; for all &lt;object class="valign-m1" data="https://eli.thegreenplace.net/images/math/b1bc0cc92c24cfcad20c59b6d677cb462cdfe104.svg" style="height: 13px;" type="image/svg+xml"&gt;z\in \mathbb{C}&lt;/object&gt; and
all &lt;object class="valign-m1" data="https://eli.thegreenplace.net/images/math/3062e83c8f48712f2e4e6d14b50bf3c6a2695b2c.svg" style="height: 13px;" type="image/svg+xml"&gt;s\in \mathbb{R}&lt;/object&gt;&lt;/li&gt;
&lt;li&gt;Positive definiteness: for all &lt;object class="valign-m1" data="https://eli.thegreenplace.net/images/math/b1bc0cc92c24cfcad20c59b6d677cb462cdfe104.svg" style="height: 13px;" type="image/svg+xml"&gt;z\in \mathbb{C}&lt;/object&gt; if &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/fcd0d0402f66de0afbe427cfb03a753e7acce3ec.svg" style="height: 19px;" type="image/svg+xml"&gt;p(z)=0&lt;/object&gt;
then &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/f44367dd295fad0767e7cdf7174fec85da66458c.svg" style="height: 12px;" type="image/svg+xml"&gt;z=0&lt;/object&gt;.&lt;/li&gt;
&lt;li&gt;Non-negativity: &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/749c1daf2a7faa84adf6091934867be7a53d5cc3.svg" style="height: 19px;" type="image/svg+xml"&gt;p(z)\geq 0&lt;/object&gt; for all &lt;object class="valign-m1" data="https://eli.thegreenplace.net/images/math/b1bc0cc92c24cfcad20c59b6d677cb462cdfe104.svg" style="height: 13px;" type="image/svg+xml"&gt;z\in \mathbb{C}&lt;/object&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For a complex number &lt;em&gt;z&lt;/em&gt;, setting &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/4d1a7f50f65484a5c2db197377fffed5044490a7.svg" style="height: 19px;" type="image/svg+xml"&gt;p(z)=|z|&lt;/object&gt; makes all these properties
work out intuitively:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Graphically, complex numbers add like vectors; therefore, given &lt;em&gt;z&lt;/em&gt; and &lt;em&gt;w&lt;/em&gt;,
the length &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/6fb540afab729a6a220cbf521596adbce4e36e30.svg" style="height: 19px;" type="image/svg+xml"&gt;|z+w|&lt;/object&gt; is always &lt;em&gt;at most&lt;/em&gt; the combined lengths
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/a88991833b27e12c9974180b9db252ee7c7d225d.svg" style="height: 19px;" type="image/svg+xml"&gt;|z|+|w|&lt;/object&gt;.&lt;/li&gt;
&lt;li&gt;When we scale &lt;em&gt;z&lt;/em&gt; by a scalar &lt;em&gt;s&lt;/em&gt;, its length is scaled similarly. Think
about the polar representation of a complex number: &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/0d8a226a76f59bb6b9b4b23b11fbb18118336c40.svg" style="height: 15px;" type="image/svg+xml"&gt;z=re^{i\theta}&lt;/object&gt;.
Multiplying that by &lt;em&gt;s&lt;/em&gt;, we get &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/d8b19ba3f76e67da5a34bc2e85deea9a9eda4905.svg" style="height: 15px;" type="image/svg+xml"&gt;sz=sre^{i\theta}&lt;/object&gt;, which has length
&lt;em&gt;sr&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;In the polar representation: if &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/c6087094ab24bf158bda02a759a6f464d1878133.svg" style="height: 19px;" type="image/svg+xml"&gt;|z|=0&lt;/object&gt;, then &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/fa05edcebc0b56a6ac848cede267b8ff43b01a41.svg" style="height: 12px;" type="image/svg+xml"&gt;r=0&lt;/object&gt;,
meaning that &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/f44367dd295fad0767e7cdf7174fec85da66458c.svg" style="height: 12px;" type="image/svg+xml"&gt;z=0&lt;/object&gt;.&lt;/li&gt;
&lt;li&gt;By definition, a length is non-negative; it's the distance from the origin.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="why-z-squared-is-not-a-norm-square"&gt;
&lt;h2&gt;Why &lt;em&gt;z&lt;/em&gt; squared is not a norm-square&lt;/h2&gt;
&lt;p&gt;Now it's time to go back to the question we started the post with. Why isn't
&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/d7dacae2c968388960bf8970080a980ed5c5dcb7.svg" style="height: 8px;" type="image/svg+xml"&gt;zz&lt;/object&gt; (or &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/0409c5da5b5540f8df097997a3201c82e674414e.svg" style="height: 15px;" type="image/svg+xml"&gt;z^2&lt;/object&gt;) the norm-square?&lt;/p&gt;
&lt;p&gt;For a general &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/a8630c2c602beeac9c7d604f7a5c4c72b6235adf.svg" style="height: 16px;" type="image/svg+xml"&gt;z=x+iy&lt;/object&gt;, we can calculate &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/d7dacae2c968388960bf8970080a980ed5c5dcb7.svg" style="height: 8px;" type="image/svg+xml"&gt;zz&lt;/object&gt; as follows:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/24bdce64d3c2d2516903588c116cb27f42269503.svg" style="height: 75px;" type="image/svg+xml"&gt;\[\begin{align*}
  zz&amp;amp;=(x+iy)(x+iy)\\
    &amp;amp;=x^2+iyx+ixy-y^2\\
    &amp;amp;=x^2-y^2+2ixy
\end{align*}\]&lt;/object&gt;
&lt;p&gt;This is clearly a complex number, with a real and an imaginary component. It
doesn't seem to fit the requirement of being a &amp;quot;length&amp;quot; or distance from the
origin, which we'd expect to be a real quantity.&lt;/p&gt;
&lt;p&gt;Multiplying &lt;em&gt;z&lt;/em&gt; by itself in polar coordinates can be insightful:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/2a9ebafa3b0b745bb3d84494376be884791a5747.svg" style="height: 75px;" type="image/svg+xml"&gt;\[\begin{align*}
  zz&amp;amp;=re^{i\theta}re^{i\theta}\\
  &amp;amp;=rre^{i\theta+i\theta}\\
  &amp;amp;=r^2 e^{i\cdot 2\theta}
\end{align*}\]&lt;/object&gt;
&lt;p&gt;It seems like we &lt;em&gt;almost&lt;/em&gt; get what we want, because the magnitude of &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/d7dacae2c968388960bf8970080a980ed5c5dcb7.svg" style="height: 8px;" type="image/svg+xml"&gt;zz&lt;/object&gt;
is &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/23b008c61c26b6b07c237ebcd14cc1bd5590d5b7.svg" style="height: 15px;" type="image/svg+xml"&gt;r^2&lt;/object&gt;, which seems like the right magnitude for the square of the
distance from origin; but there's still an angle... Here's how it looks
geometrically:&lt;/p&gt;
&lt;img alt="Polar representation of zz" class="align-center" src="https://eli.thegreenplace.net/images/2024/complex-squared.png" /&gt;
&lt;p&gt;Recall that when multiplying two complex numbers - their magnitudes multiply,
but their angles add. In this case, we got the &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/23b008c61c26b6b07c237ebcd14cc1bd5590d5b7.svg" style="height: 15px;" type="image/svg+xml"&gt;r^2&lt;/object&gt; we needed, but with
an angle of &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/bcafa268aec732fa30f1ca94c5a71c2c51a835c2.svg" style="height: 12px;" type="image/svg+xml"&gt;2\theta&lt;/object&gt;, which is not what we need. If only we could get
rid of the angle somehow... keep this thought in your head for the next
section.&lt;/p&gt;
&lt;p&gt;Looking at the formal definition of the norm, it's clear right away that
&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/d7dacae2c968388960bf8970080a980ed5c5dcb7.svg" style="height: 8px;" type="image/svg+xml"&gt;zz&lt;/object&gt; won't do. The norm is defined as a &lt;em&gt;real-valued&lt;/em&gt; function, whereas
&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/d7dacae2c968388960bf8970080a980ed5c5dcb7.svg" style="height: 8px;" type="image/svg+xml"&gt;zz&lt;/object&gt; is not real-valued.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zz-is-a-norm-square"&gt;
&lt;h2&gt;&lt;em&gt;zz*&lt;/em&gt; is a norm-square&lt;/h2&gt;
&lt;p&gt;The conjugate &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/3c28f425f15b96a78602a12bc367a48e1708c344.svg" style="height: 12px;" type="image/svg+xml"&gt;z^*&lt;/object&gt; of &lt;em&gt;z&lt;/em&gt; is defined as:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/f97bf5145b4f109dd873f026dd19b6261bee8e7a.svg" style="height: 18px;" type="image/svg+xml"&gt;\[z^*=x-iy\]&lt;/object&gt;
&lt;p&gt;Or in polar form:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/cb428cca8c7c2334e82204dcc6ec8500cc6abd3e.svg" style="height: 17px;" type="image/svg+xml"&gt;\[z^*=re^{-i\theta}\]&lt;/object&gt;
&lt;p&gt;Recall how we had that pesky angle remaining when calculating &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/d7dacae2c968388960bf8970080a980ed5c5dcb7.svg" style="height: 8px;" type="image/svg+xml"&gt;zz&lt;/object&gt;?
Let's find a way to get rid of it; since angles add when we multiply complex
numbers, to get rid of &lt;img alt="\theta" class="valign-0" src="https://eli.thegreenplace.net/images/math/cb005d76f9f2e394a770c2562c2e150a413b3216.png" style="height: 12px;" /&gt; we should multiply &lt;em&gt;z&lt;/em&gt; by something with
an angle of &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/1d89455d52a663f9bd876993dab3244eca9825bf.svg" style="height: 12px;" type="image/svg+xml"&gt;-\theta&lt;/object&gt;. Do you see where this is going?&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/38969c078a5e7218ff67a0757edd77f69ef33926.svg" style="height: 18px;" type="image/svg+xml"&gt;\[zz^*=re^{i\theta}re^{-i\theta}=r^2e^{i(\theta-\theta)}=r^2\]&lt;/object&gt;
&lt;p&gt;Voila! Multiplying &lt;em&gt;z&lt;/em&gt; by its complex conjugate gives us a real number. Moreover,
it gives us exactly the number we want - &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/23b008c61c26b6b07c237ebcd14cc1bd5590d5b7.svg" style="height: 15px;" type="image/svg+xml"&gt;r^2&lt;/object&gt;. This is the norm-square,
or &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/360ebdabd39e1822650a9e06af52bafa42c612d1.svg" style="height: 20px;" type="image/svg+xml"&gt;|z|^2&lt;/object&gt;. The norm of &lt;em&gt;z&lt;/em&gt; is &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/0d4ebef37595cd27057748de36eab66c6d8e1e04.svg" style="height: 19px;" type="image/svg+xml"&gt;|z|&lt;/object&gt; and is precisely &lt;em&gt;r&lt;/em&gt;, the
&amp;quot;length&amp;quot; of the complex number.&lt;/p&gt;
&lt;p&gt;Let's verify this works in cartesian coordinates:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/e9ad74b17f3c7c150032032ba187665192af9c3c.svg" style="height: 75px;" type="image/svg+xml"&gt;\[\begin{align*}
  zz^*&amp;amp;=(x+iy)(x-iy)\\
    &amp;amp;=x^2+iyx-ixy+y^2\\
    &amp;amp;=x^2+y^2
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Indeed, this makes intuitive sense because:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/1fc08c47d9bde9c56ce120223f02d6e4e4aa119c.svg" style="height: 23px;" type="image/svg+xml"&gt;\[|z|=\sqrt{zz*}=\sqrt{x^2+y^2}\]&lt;/object&gt;
&lt;p&gt;And this is exactly what we expect when calculating the length of &lt;em&gt;z&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The norm square of a complex number &lt;em&gt;z&lt;/em&gt; is denoted &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/360ebdabd39e1822650a9e06af52bafa42c612d1.svg" style="height: 20px;" type="image/svg+xml"&gt;|z|^2&lt;/object&gt;. In this post
we've seen why&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/be43c9bbc0688fbd5bd2a5ccbbcbfc490e8157ec.svg" style="height: 22px;" type="image/svg+xml"&gt;\[|z|^2\neq z^2\]&lt;/object&gt;
&lt;p&gt;(even though the mathematical notation makes it seem like this should be true).
Instead, this is how the norm-square is actually calculated:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/93a6ea8b04b9e10b4ac45e52aee614cda725e38f.svg" style="height: 22px;" type="image/svg+xml"&gt;\[|z|^2=zz^*\]&lt;/object&gt;
&lt;p&gt;With the norm itself being&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/17853097cca6756851e0ae03c50c118bbc0ba3d9.svg" style="height: 22px;" type="image/svg+xml"&gt;\[|z|=\sqrt{zz^*}\]&lt;/object&gt;
&lt;/div&gt;
&lt;div class="section" id="appendix-1-zz-and-the-formal-definition-of-norm"&gt;
&lt;h2&gt;Appendix 1: &lt;em&gt;zz*&lt;/em&gt; and the formal definition of norm&lt;/h2&gt;
&lt;p&gt;Let's get back to the formal definition of norm and show that &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/4e7ff76404faee9370867212b4d0db77fbef2153.svg" style="height: 9px;" type="image/svg+xml"&gt;zz*&lt;/object&gt;
satisfies it.&lt;/p&gt;
&lt;p&gt;First of all, we've already seen that &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/4e7ff76404faee9370867212b4d0db77fbef2153.svg" style="height: 9px;" type="image/svg+xml"&gt;zz*&lt;/object&gt; is a &lt;em&gt;real&lt;/em&gt; number, no matter
what &lt;em&gt;z&lt;/em&gt; is. Therefore, it can indeed serve as a real-valued function
&lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/633a6c4d4c130b45fb1b8ef67cd28851444288bf.svg" style="height: 16px;" type="image/svg+xml"&gt;p:\mathbb{C}\rightarrow\mathbb{R}&lt;/object&gt;.&lt;/p&gt;
&lt;p&gt;The proof of property 1 is a bit tedious,
&lt;a class="reference external" href="https://proofwiki.org/wiki/Triangle_Inequality/Complex_Numbers"&gt;but straightforward using the Cauchy-Schwartz inequality&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For property 2, since &lt;em&gt;s&lt;/em&gt; is a real number, the square root of its square is
just its absolute value:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/cda157a5549a049536ef4b3a9f9ae2405702a85c.svg" style="height: 23px;" type="image/svg+xml"&gt;\[|sz|=\sqrt{(sx)^2+(sy)^2}=\sqrt{s^2(x^2+y^2)}=|s|\sqrt{x^2+y^2}=|s||z|\]&lt;/object&gt;
&lt;p&gt;For property 3, consider a &lt;em&gt;z&lt;/em&gt; such that:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/8f9c2e89345d32212e440f1784f96b4b38537cc8.svg" style="height: 23px;" type="image/svg+xml"&gt;\[|z|=\sqrt{x^2+y^2}=0\]&lt;/object&gt;
&lt;p&gt;Since neither addend inside the square root can be negative,
clearly both &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; must be zero, meaning that &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/f44367dd295fad0767e7cdf7174fec85da66458c.svg" style="height: 12px;" type="image/svg+xml"&gt;z=0&lt;/object&gt;.&lt;/p&gt;
&lt;p&gt;Property 4 is similarly straightforward: given real components &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;,
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/20fbc79261e6506fa206545e608a128dfe7f96fb.svg" style="height: 22px;" type="image/svg+xml"&gt;|z|=\sqrt{x^2+y^2}&lt;/object&gt; is non-negative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="appendix-2-norms-of-expressions"&gt;
&lt;h2&gt;Appendix 2: norms of expressions&lt;/h2&gt;
&lt;p&gt;Say we want to calculate the norm squared of some expression involving complex
numbers; the simplest example would be a sum of &lt;em&gt;z&lt;/em&gt; and &lt;em&gt;w&lt;/em&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/ee8259923714f60717a9d19affab1c2468c15961.svg" style="height: 22px;" type="image/svg+xml"&gt;\[|z+w|^2\]&lt;/object&gt;
&lt;p&gt;We go about it pretty much the same way:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/3b8d01185756bc07e6d5e7a85ea5eca1e0e49d81.svg" style="height: 103px;" type="image/svg+xml"&gt;\[\begin{align*}
|z+w|^2&amp;amp;=(z+w)(z+w)^*\\
&amp;amp;=(z+w)(z^*+w^*)\\
&amp;amp;=zz^*+zw^*+wz^*+ww^*\\
&amp;amp;=|z|^2+|w|^2+wz^*+zw^*
\end{align*}\]&lt;/object&gt;
&lt;p&gt;If we want to push a little further, the imaginary components of
&lt;object class="valign-m2" data="https://eli.thegreenplace.net/images/math/39c0a484bf8140d0769ee249ddb031251bd9c65d.svg" style="height: 14px;" type="image/svg+xml"&gt;wz^*+zw^*&lt;/object&gt; cancel out, while their real components are duplicates;
so we end up with:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/0458b649a4c34e3aa1c88de2d04fc06c67c810f1.svg" style="height: 22px;" type="image/svg+xml"&gt;\[|z+w|^2=|z|^2+|w|^2+2Re(zw^*)\]&lt;/object&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Math"></category></entry><entry><title>Implementing Raft: Part 4 - Key/Value Database</title><link href="https://eli.thegreenplace.net/2024/implementing-raft-part-4-keyvalue-database/" rel="alternate"></link><published>2024-10-10T19:50:00-07:00</published><updated>2024-10-11T02:55:46-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-10-10:/2024/implementing-raft-part-4-keyvalue-database/</id><summary type="html">&lt;p&gt;This is Part 4 in a series of posts describing the Raft distributed consensus
algorithm and its complete implementation in Go. Here is a list of posts in
the series:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://eli.thegreenplace.net/2020/implementing-raft-part-0-introduction/"&gt;Part 0: Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://eli.thegreenplace.net/2020/implementing-raft-part-1-elections/"&gt;Part 1: Elections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://eli.thegreenplace.net/2020/implementing-raft-part-2-commands-and-log-replication/"&gt;Part 2: Commands and log replication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://eli.thegreenplace.net/2020/implementing-raft-part-3-persistence-and-optimizations/"&gt;Part 3: Persistence and optimizations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 4: Key â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This is Part 4 in a series of posts describing the Raft distributed consensus
algorithm and its complete implementation in Go. Here is a list of posts in
the series:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://eli.thegreenplace.net/2020/implementing-raft-part-0-introduction/"&gt;Part 0: Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://eli.thegreenplace.net/2020/implementing-raft-part-1-elections/"&gt;Part 1: Elections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://eli.thegreenplace.net/2020/implementing-raft-part-2-commands-and-log-replication/"&gt;Part 2: Commands and log replication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://eli.thegreenplace.net/2020/implementing-raft-part-3-persistence-and-optimizations/"&gt;Part 3: Persistence and optimizations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 4: Key/Value database (this post)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this part, we're going to use our Raft module to implement a simple but
realistic application - a replicated key / value database with strong
consistency semantics. All the code for this part is located
in &lt;a class="reference external" href="https://github.com/eliben/raft/tree/main/part4kv"&gt;this directory&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="key-value-database-as-a-state-machine"&gt;
&lt;h2&gt;Key / value database as a state machine&lt;/h2&gt;
&lt;p&gt;First of all, what's a key / value database (KV DB)? Think of it as a Go
&lt;tt class="docutils literal"&gt;map&lt;/tt&gt;, or as an extremely simple version of NoSQL databases like Redis or
CouchDB. The basic operations our KV DB supports are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;PUT(k,v)&lt;/tt&gt;: assign value &lt;tt class="docutils literal"&gt;v&lt;/tt&gt; to key &lt;tt class="docutils literal"&gt;k&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;GET(k)&lt;/tt&gt;: retrieve the value associated with key &lt;tt class="docutils literal"&gt;k&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;CAS(k, cmp, v)&lt;/tt&gt;: atomic compare-and-swap. First, it reads &lt;tt class="docutils literal"&gt;curV&lt;/tt&gt; - the
current value associated with key &lt;tt class="docutils literal"&gt;k&lt;/tt&gt;. If &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;curV==cmp&lt;/span&gt;&lt;/tt&gt;, assigns value
&lt;tt class="docutils literal"&gt;v&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;k&lt;/tt&gt; instead; otherwise, it's a no-op. In any case, &lt;tt class="docutils literal"&gt;curV&lt;/tt&gt; is
returned.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, suppose the commands in some Raft log are (in order from left to
right):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PUT(x,2)  PUT(y,3)  PUT(x,4)  PUT(z,5)  CAS(x,4,8)  CAS(z,4,9)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Applied to an empty DB, this log will result in these keys / values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x=8
y=3
z=5
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="system-diagram"&gt;
&lt;h2&gt;System diagram&lt;/h2&gt;
&lt;p&gt;In this part we're going to build a complete KV DB system - including the
service and a client library:&lt;/p&gt;
&lt;img alt="Raft-based KV DB -- system diagram" class="align-center" src="https://eli.thegreenplace.net/images/2024/raft-kv-system.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The diagram presents a cluster with 3 replicas &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;. Each replica is a KV DB
service.&lt;/li&gt;
&lt;li&gt;A KV service contains a Raft Consensus Module (the diagram doesn't show the
log, assuming it's just part of the CM), and a data store module that
implements the actual database.&lt;/li&gt;
&lt;li&gt;The Raft CM of each replica is connected to the others via RPCs - these
are the Raft protocol RPCs discussed extensively in previous parts.&lt;/li&gt;
&lt;li&gt;The KV service presents a REST API to the external world;
clients can send HTTP commands to the service and get results.&lt;/li&gt;
&lt;li&gt;&amp;quot;KV Client&amp;quot; is a client library with a convenient API that encapsulates the
HTTP interactions with KV services. This is also part of our demo,
and we'll discuss it later in the post.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="kv-service-architecture"&gt;
&lt;h2&gt;KV service architecture&lt;/h2&gt;
&lt;p&gt;The KV service consists of several key components:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An instance of a Raft server; as described back in &lt;a class="reference external" href="https://eli.thegreenplace.net/2020/implementing-raft-part-1-elections/"&gt;Part 1&lt;/a&gt;,
a Raft &lt;tt class="docutils literal"&gt;Server&lt;/tt&gt; wraps a consensus module with some RPC scaffolding. In this
part we reuse our final Raft server code from Part 3, without any
modifications.&lt;/li&gt;
&lt;li&gt;An underlying &amp;quot;data store&amp;quot;. For our demonstration, a simple mutex-protected
Go &lt;tt class="docutils literal"&gt;map&lt;/tt&gt; will do; this is implemented in &lt;tt class="docutils literal"&gt;kvservice/datastore.go&lt;/tt&gt;. This
data store implements the Get, Put and CAS commands described earlier. All
keys and values are Go &lt;tt class="docutils literal"&gt;string&lt;/tt&gt;s (naturally, anything can be encoded in a
string value).&lt;/li&gt;
&lt;li&gt;An HTTP server for the REST API of the service exposed to the external world.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="commands"&gt;
&lt;h2&gt;Commands&lt;/h2&gt;
&lt;p&gt;If you recall from &lt;a class="reference external" href="https://eli.thegreenplace.net/2020/implementing-raft-part-2-commands-and-log-replication/"&gt;Part 2&lt;/a&gt;,
we submit new commands to the Raft cluster with the &lt;tt class="docutils literal"&gt;ConsensusModule.Submit&lt;/tt&gt;
method. A &lt;tt class="docutils literal"&gt;Command&lt;/tt&gt; is an arbitrary &lt;tt class="docutils literal"&gt;any&lt;/tt&gt; value; whenever the Raft cluster
reaches consensus on a log entry, it sends a &amp;quot;commit entry&amp;quot; with this command on
the commit channel. Commands are application-specific, and since we're working
on a concrete application now, it's time to define our command for the KV
service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Command is the concrete command type KVService submits to the Raft log to&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// manage its state machine. It&amp;#39;s also used to carry the results of the command&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// after it&amp;#39;s applied to the state machine. These are the supported commands:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// CommandGet: queries a key&amp;#39;s value&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// * Key is the key to get, Value is ignored&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// * CompareValue is ignored&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// * ResultFound is true iff Key was found in the store&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// * ResultValue is the value, if Key was found in the store&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// CommandPut: assigns value to the key&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// * Key,Value are the pair to assign (store[key]=value)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// * CompareValue is ignored&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// * ResultFound is true iff Key was previously found in the store&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// * ResultValue is the old value of Key, if it was previously found&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// CommandCAS: atomic compare-and-swap, performs:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//    if Store[Key] == CompareValue {&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//      Store[Key] = Value&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//    } else {&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//      nop&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//    }&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// * Key is the key this command acts on&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// * CompareValue is the previous value the command compares to&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// * Value is the new value the command assigns&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// * ResultFound is true iff Key was previously found in the store&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// * ResultValue is the old value of Key, if it was previously found&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Kind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CommandKind&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;CompareValue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;ResultValue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;ResultFound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// id is the Raft ID of the server submitting this command.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CommandKind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;CommandInvalid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CommandKind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;iota&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;CommandGet&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;CommandPut&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;CommandCAS&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For simplicity, I chose to include fields for several commands in the same
struct instead of using an &lt;a class="reference external" href="https://eli.thegreenplace.net/2018/go-and-algebraic-data-types/"&gt;algebraic data type&lt;/a&gt; here.&lt;/p&gt;
&lt;p&gt;One important thing to note is that the service's Raft cluster ID is part of
the command; it will soon become clear why this is needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="life-of-a-put-request-to-the-service"&gt;
&lt;h2&gt;Life of a PUT request to the service&lt;/h2&gt;
&lt;p&gt;Before we dive deep into the code, let's examine the journey a successful PUT
request makes through the system:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A client sends a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;PUT(&amp;quot;k&amp;quot;,&lt;/span&gt; &amp;quot;v&amp;quot;)&lt;/tt&gt; request to a service, via HTTP.
Let's assume it reaches the service which is currently the Raft cluster
leader (we'll discuss what happens if it reaches a follower later on).&lt;/li&gt;
&lt;li&gt;The service's HTTP handler receives the request, constructs a &lt;tt class="docutils literal"&gt;Command&lt;/tt&gt;
of kind &lt;tt class="docutils literal"&gt;CommandPut&lt;/tt&gt; representing it and submits it to its Raft CM.&lt;ol class="arabic"&gt;
&lt;li&gt;At this point, the HTTP handler waits; it can't reply to the client until
it knows that the command was properly replicated to the Raft cluster
and committed by the CM.&lt;/li&gt;
&lt;li&gt;Once the command it submitted appears on the commit channel, the HTTP
handler can return a success status to the client.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Meanwhile, a process in the service watches its commit channel for new
commands that reached consensus by the cluster, and updates the underlying
data store.&lt;/li&gt;
&lt;li&gt;At the same time, the other services in the cluster - the followers - are
also watching their commit channels and update their own replicas of the
data store with the new PUT command.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that steps 2.2 and 3 happen &lt;em&gt;concurrently&lt;/em&gt;. One process (in the sense
of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Communicating_sequential_processes"&gt;CSP&lt;/a&gt;)
handles a client request, while another process takes care to execute commands
arriving on the commit channel. In fact, there's more concurrency here than
meets the eye. Our service can handle multiple concurrent requests, each with
its own command - and it should all just work. This kind of concurrency is
natural in Go - and now it's time to see how it works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="kv-service-code-walk-through"&gt;
&lt;h2&gt;KV service code walk-through&lt;/h2&gt;
&lt;p&gt;All the code described in this section is located in &lt;tt class="docutils literal"&gt;kvservice/kvservice.go&lt;/tt&gt;.
Here's the struct defining the service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;KVService&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mutex&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// id is the service ID in a Raft cluster.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// rs is the Raft server that contains a CM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;rs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;raft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// commitChan is the commit channel passed to the Raft server; when commands&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// are committed, they&amp;#39;re sent on this channel.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;commitChan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;raft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CommitEntry&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// commitSubs are the commit subscriptions currently active in this service.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// See the createCommitSubsciption method for more details.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;commitSubs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;raft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CommitEntry&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// ds is the underlying data store implementing the KV DB.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;DataStore&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// srv is the HTTP server exposed by the service to the external world.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;srv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don't worry about understanding exactly what each field means right now; note
the correlation to the descriptions in &amp;quot;KV service architecture&amp;quot;, though. A
service holds a Raft server, a datastore, and an HTTP server. Other entities,
like the commit channel, should be familiar by now.&lt;/p&gt;
&lt;p&gt;A new service is created with this constructor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// New creates a new KVService&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//   - id: this service&amp;#39;s ID within its Raft cluster&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//   - peerIds: the IDs of the other Raft peers in the cluster&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//   - storage: a raft.Storage implementation the service can use for&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//     durable storage to persist its state.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//   - readyChan: notification channel that has to be closed when the Raft&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//     cluster is ready (all peers are up and connected to each other).&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;peerIds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;raft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;readyChan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;KVService&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;gob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;commitChan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;raft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CommitEntry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// raft.Server handles the Raft RPCs in the cluster; after Serve is called,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// it&amp;#39;s ready to accept RPC connections from peers.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;rs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;raft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;peerIds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;readyChan&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;commitChan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;rs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Serve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;KVService&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;rs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nx"&gt;rs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;commitChan&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;commitChan&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nx"&gt;NewDataStore&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;commitSubs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;raft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CommitEntry&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;runUpdater&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We'll get back to what &lt;tt class="docutils literal"&gt;runUpdater&lt;/tt&gt; is a little later; for now, let's look
at how the HTTP server is launched:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// ServeHTTP starts serving the KV REST API on the given TCP port. This&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// function does not block; it fires up the HTTP server and returns. To properly&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// shut down the server, call the Shutdown method.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;KVService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ServeHTTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ServeHTTP called with existing server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;mux&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewServeMux&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;mux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;POST /get/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleGet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;mux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;POST /put/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handlePut&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;mux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;POST /cas/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleCAS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Addr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kvlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;serving HTTP on %s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ErrServerClosed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should be familiar if you've written &lt;a class="reference external" href="https://eli.thegreenplace.net/2023/better-http-server-routing-in-go-122"&gt;Go HTTP servers&lt;/a&gt;
before. Listening is done in a goroutine to enable clean shutdown of the HTTP
server specifically and the whole service in general; check out the &lt;tt class="docutils literal"&gt;Shutdown&lt;/tt&gt;
method for more details.&lt;/p&gt;
&lt;p&gt;In the previous section, I mentioned that multiple HTTP requests
can be handled concurrently; this is just &lt;a class="reference external" href="https://eli.thegreenplace.net/2019/on-concurrency-in-go-http-servers/"&gt;the nature of the standard Go
HTTP server&lt;/a&gt;.
Here we see the &lt;tt class="docutils literal"&gt;handleXXX&lt;/tt&gt; handlers registered with the server; each handler
is invoked in a separate goroutine, and our code has to account for this. To
understand what this means in practice, let's look at the updater goroutine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// runUpdater runs the &amp;quot;updater&amp;quot; goroutine that reads the commit channel&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// from Raft and updates the data store; this is the Replicated State Machine&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// part of distributed consensus!&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// It also notifies subscribers (registered with createCommitSubsciption).&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;KVService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;runUpdater&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commitChan&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;.(&lt;/span&gt;&lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Kind&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CommandGet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResultValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResultFound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CommandPut&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResultValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResultFound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;CommandCAS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResultValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResultFound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CAS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CompareValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unexpected command %v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// We&amp;#39;re modifying the command to include results from the datastore,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// so clone an entry with the update command for the subscribers.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;newEntry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;raft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CommitEntry&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;Term&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Term&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// Forward this entry to the subscriber interested in its index, and&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// close the subscription - it&amp;#39;s single-use.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;popCommitSubscription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;newEntry&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The updater goroutine is responsible for implementing step (3) described in
the &amp;quot;Life of...&amp;quot; section. It watches the commit channel for new committed
commands, applies these commands to the datastore and then notifies
&amp;quot;subscribers&amp;quot; about it. The first two tasks is what we'd expect from an
implementation of a Raft-based replicated state machine; the last task needs
some elaboration.&lt;/p&gt;
&lt;p&gt;Recall step 2.1 from the &amp;quot;Life of...&amp;quot; section; once an HTTP handler submits
a command to the Raft cluster, it has to wait and see if this command was
properly committed. The way we implement it is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The handler submits a command to the Raft CM, and keeps note of the log
index the command is placed in.&lt;/li&gt;
&lt;li&gt;The handler than registers a &amp;quot;subscription&amp;quot; with the updater, telling it:
&amp;quot;hey, if you see a command submitted for this index, let me know&amp;quot;.
The subscription is implemented with a channel.&lt;/li&gt;
&lt;li&gt;The handler can then wait on the channel.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's the code of &lt;tt class="docutils literal"&gt;handlePut&lt;/tt&gt;, demonstrating this in action:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;KVService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;handlePut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;pr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PutRequest&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;readRequestJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusBadRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kvlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HTTP PUT %v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Submit a command into the Raft server; this is the state change in the&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// replicated state machine built on top of the Raft log.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;CommandPut&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;pr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;logIndex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// If we&amp;#39;re not the Raft leader, send an appropriate status&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;logIndex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;renderJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PutResponse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;RespStatus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusNotLeader&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Subscribe for a commit update for our log index. Then wait for it to&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// be delivered.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createCommitSubsciption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Wait on the sub channel: the updater will deliver a value when the Raft&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// log has a commit at logIndex. To ensure clean shutdown of the service,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// also select on the request context - if the request is canceled, this&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// handler aborts without sending data back to the client.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// If this is our command, all is good! If it&amp;#39;s some other server&amp;#39;s command,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// this means we lost leadership at some point and should return an error&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// to the client.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;entryCmd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;.(&lt;/span&gt;&lt;span class="nx"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;entryCmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;kvs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;renderJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PutResponse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;RespStatus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;KeyFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;entryCmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResultFound&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;PrevValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;entryCmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResultValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;renderJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PutResponse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;RespStatus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusFailedCommit&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code is well-commented, but I want to specifically call out a few
important points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;When &lt;tt class="docutils literal"&gt;kvs.rs.Submit&lt;/tt&gt; is called with the command, it returns -1 if the
current Raft CM is not the leader. In this case, we return a special status
to the client - &amp;quot;I'm not the leader&amp;quot; - and abort the handler. We'll see what
the client does about this further down in the post.&lt;/p&gt;
&lt;p&gt;For a leader, &lt;tt class="docutils literal"&gt;Submit&lt;/tt&gt; returns the log index at which the command was
submitted. This is the index used to subscribe to notifications from the
commit channel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The handler waits on a receive on this channel. This can be canceled
if the HTTP request is canceled by the client (e.g. timeout); otherwise,
we just wait. In practice, with the optimizations in Part 3, it takes just
a handful of milliseconds to fully commit new commands in a functioning
Raft cluster. In case of problems (disconnections, crashes etc.) this may
take longer, but our application prioritizes consistency over availability
(see &lt;a class="reference external" href="https://eli.thegreenplace.net/2020/implementing-raft-part-0-introduction/"&gt;Part 0 on fault tolerance in Raft and the CAP theorem&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When notified that a commit was made for this log index, there's still an
important safety check to make! Is it actually &lt;em&gt;our&lt;/em&gt; command that was
committed there? This is what the &lt;tt class="docutils literal"&gt;id&lt;/tt&gt; field on the command is for.&lt;/p&gt;
&lt;p&gt;Consider the following case: peer &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; is the leader, and a client submits a
command. &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; places it in log index 42, but gets disconnected before it
manages to tell followers about it.
After a while, &lt;tt class="docutils literal"&gt;C&lt;/tt&gt; becomes the new leader; &lt;tt class="docutils literal"&gt;C&lt;/tt&gt; is unaware that &lt;tt class="docutils literal"&gt;A&lt;/tt&gt;
placed something in its log at index 42. Therefore, when &lt;tt class="docutils literal"&gt;C&lt;/tt&gt; receives a new
command from another client, it commits it at index 42 (since this is still
the &amp;quot;next index for entries&amp;quot; for all connected cluster members).
At some point later, &lt;tt class="docutils literal"&gt;A&lt;/tt&gt;
gets reconnected to the cluster, becomes a follower (since its term is out of
date), and sees the commit from &lt;tt class="docutils literal"&gt;C&lt;/tt&gt; at index 42. At this point it realizes
that it failed to commit its own command (because the ID doesn't match), and
replies with a &amp;quot;failed commit&amp;quot; status to the client.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll leave figuring out the mechanics of channel subscriptions to you as an
exercise. Just read the &lt;tt class="docutils literal"&gt;createCommitSubscription&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;popCommitSubscription&lt;/tt&gt; methods - they're fairly straightforward.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="consistency-guarantees"&gt;
&lt;h2&gt;Consistency guarantees&lt;/h2&gt;
&lt;p&gt;I wrote in detail about &lt;a class="reference external" href="https://eli.thegreenplace.net/2024/linearizability-in-distributed-systems/"&gt;linearizable semantics&lt;/a&gt;
recently. Our KV service is linearizable based on that definition, due
to the nature of Raft consensus. An operation only becomes visible to clients
after it's committed; and it's committed by cluster consensus, at a &amp;quot;moment
in time&amp;quot; relative to other operations in the Raft log.&lt;/p&gt;
&lt;p&gt;Moreover, it's also &lt;a class="reference external" href="https://jepsen.io/consistency/models/serializable"&gt;serializable&lt;/a&gt; for transactions like
CAS: these are performed by a single service (the leader) atomically, so clients
can never observe the results of sub-operations in isolation.&lt;/p&gt;
&lt;p&gt;By being both linearizable and serializable, our service is
&lt;a class="reference external" href="https://jepsen.io/consistency/models/strict-serializable"&gt;strict serializable&lt;/a&gt;, which
is the strongest consistency guarantee for distributed systems.&lt;/p&gt;
&lt;p&gt;As discussed before, this strong consistency comes at the expense of
availability in the face of network partitions (as it must, due to the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/CAP_theorem"&gt;CAP theorem limits&lt;/a&gt;). It's a
&amp;quot;CP&amp;quot; system; the following diagram is from Wikipedia:&lt;/p&gt;
&lt;img alt="CAP euler diagram from Wikipedia" class="align-center" src="https://eli.thegreenplace.net/images/2024/kvservice-cp.png" /&gt;
&lt;p&gt;What are such services good for? Though it can serve as a NoSQL database, it
won't be very performant - every operation has to reach consensus among multiple
peers before being considered &amp;quot;done&amp;quot;. Instead, such strict serializable
services are used as the very bottom layer of large distributed systems.
For example, it can be used to coordinate distributed locks, elect leaders
(these are fairly easy to build on top of our CAS primitive) or store some
critical low-volume configuration data for a complex system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="plumbing-read-only-operations-through-the-raft-log"&gt;
&lt;h2&gt;Plumbing read-only operations through the Raft log&lt;/h2&gt;
&lt;p&gt;You'll note that all the commands our KV service supports - PUT, GET and CAS -
are implemented fairly consistently and follow the sequence described in the
&amp;quot;Life of...&amp;quot; section. This raises an important question: is this
really necessary for the read-only GET operations? After all, they don't really
change the state machine, so why add them as Raft log commands?&lt;/p&gt;
&lt;p&gt;While it's true that a stray GET command won't harm the integrity of the
internal data store, it may result in stale reads or other events inconsistent
with the linearizable semantics of our service.&lt;/p&gt;
&lt;p&gt;To see why, let's work by contradiction; assume we don't plumb GET through
the Raft log, but instead let leaders immediately reply to GET requests based
on their local datastore. Here's what can happen:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The KV DB has the key-value pair &lt;tt class="docutils literal"&gt;k=v&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;A&lt;/tt&gt; used to be a leader, but got disconnected from its peers; after a suitable
election timeout, &lt;tt class="docutils literal"&gt;C&lt;/tt&gt; was elected as the new leader. &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; still thinks it's
the leader, however.&lt;/li&gt;
&lt;li&gt;At some point, a client contacts &lt;tt class="docutils literal"&gt;C&lt;/tt&gt; and submits &lt;tt class="docutils literal"&gt;PUT(k,v2)&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;C&lt;/tt&gt;
successfully replicates this command to the remaining connected peers.&lt;/li&gt;
&lt;li&gt;A bit later, another client sends &lt;tt class="docutils literal"&gt;GET(K)&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;C&lt;/tt&gt; and gets the correct
response &lt;tt class="docutils literal"&gt;v2&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Then, a different client sends &lt;tt class="docutils literal"&gt;GET(k)&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; (perhaps the client
remembered that the previous time it contacted the service, &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; was the
leader &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;). Since &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; still thinks it's the leader, it will
happily reply with the value &lt;tt class="docutils literal"&gt;v&lt;/tt&gt; to the client's request.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This sequence of events breaks the linearizability guarantees of our service!
The read &lt;tt class="docutils literal"&gt;GET(K) &lt;span class="pre"&gt;--&amp;gt;&lt;/span&gt; v&lt;/tt&gt; is &lt;em&gt;stale&lt;/em&gt;, since another client already read the
value as &lt;tt class="docutils literal"&gt;v2&lt;/tt&gt;. There is no single-threaded history in which this sequence
of events is possible.&lt;/p&gt;
&lt;p&gt;This problem is explicitly called out in Section 8 of the Raft paper. The
canonical solution is what our service is doing: plumb all commands - even
the read-only ones - through the Raft log &lt;a class="footnote-reference" href="#footnote-3" id="footnote-reference-3"&gt;[3]&lt;/a&gt;. A service won't respond to a
client's request unless it was able to successfully commit this command to the
Raft log.&lt;/p&gt;
&lt;p&gt;Since we plumb GET commands through the Raft log, in our example the problem in
the last step couldn't happen, because &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; would not respond to its client
while disconnected from the cluster. Instead, it would have to wait to be
reconnected, and at that point would discover that it's no longer the leader.
The client would then ask the real leader and get the right response. However,
even if due to additional disconnections or crashes &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; resumed leadership, it
would have to process the &lt;tt class="docutils literal"&gt;PUT(k,v2)&lt;/tt&gt; before processing the client's
&lt;tt class="docutils literal"&gt;GET(k)&lt;/tt&gt;, since the state machine is updated in log order.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="kv-client"&gt;
&lt;h2&gt;KV client&lt;/h2&gt;
&lt;p&gt;Now it's time to discuss the final piece of our system - the KV client library.
Since the KV service API is just REST, we don't necessarily &lt;em&gt;need&lt;/em&gt; a client
library - we could just use &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; calls or any other way to generate HTTP
requests to interact with it. However, a convenient, idiomatic client library
goes a long way in improving the quality of life of users - and it will be
particularly useful in this case because it encodes some essential logic -
finding and keeping track of the cluster leader.&lt;/p&gt;
&lt;p&gt;So far, everything in our system has been replicated by N, which is the Raft
cluster size (typically 3 or 5). The client is a single entity - just user
code that wants to use the KV service. All the client code is in
&lt;tt class="docutils literal"&gt;kvclient/kvclient.go&lt;/tt&gt;; let's walk through how a single request works,
starting with the type and constructor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;KVClient&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;addrs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// assumedLeader is the index (in addrs) of the service we assume is the&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// current leader. It is zero-initialized by default, without loss of&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// generality.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;assumedLeader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;clientID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int32&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// New creates a new KVClient. serviceAddrs is the addresses (each a string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// with the format &amp;quot;host:port&amp;quot;) of the services in the KVService cluster the&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// client will contact.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serviceAddrs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;KVClient&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;KVClient&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;addrs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nx"&gt;serviceAddrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;assumedLeader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;clientID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;clientCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// clientCount is used internally for debugging&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;clientCount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int32&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To create a client, we have to provide it with a list of addresses for the
KV services that constitute a cluster; before the client sends its first
request, the services should be launched and listening on these addresses.&lt;/p&gt;
&lt;p&gt;All client requests follow the same steps; let's use &lt;tt class="docutils literal"&gt;Put&lt;/tt&gt; as an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Put the key=value pair into the store. Returns an error, or&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// (prevValue, keyFound, false), where keyFound specifies whether the key was&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// found in the store prior to this command, and prevValue is its previous&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// value if it was found.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;KVClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;putReq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PutRequest&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;putResp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PutResponse&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;put&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;putReq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;putResp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;putResp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PrevValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;putResp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;KeyFound&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Types like &lt;tt class="docutils literal"&gt;PutRequest&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;PutResponse&lt;/tt&gt; are defined in &lt;tt class="docutils literal"&gt;api/api.go&lt;/tt&gt;
(you may have noticed them in the service code as well); they're trivial, so
I won't spend more time on them.&lt;/p&gt;
&lt;p&gt;All the client logic is encapsulated in the &lt;tt class="docutils literal"&gt;send&lt;/tt&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;KVClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// This loop rotates through the list of service addresses until we get&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// a response that indicates we&amp;#39;ve found the leader of the cluster. It&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// starts at c.assumedLeader&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;FindLeader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// There&amp;#39;s a two-level context tree here: we have the user context - ctx,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// and we create our own context to impose a timeout on each request to&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// the service. If our timeout expires, we move on to try the next service.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// In the meantime, we have to keep an eye on the user context - if that&amp;#39;s&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// canceled at any time (due to timeout, explicit cancellation, etc), we&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// bail out.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;retryCtx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;retryCtxCancel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WithTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Millisecond&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://%s/%s/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assumedLeader&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sending %#v to %v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sendJSONRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;retryCtx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// Since the contexts are nested, the order of testing here matters.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// We have to check the parent context first - if it&amp;#39;s done, it means&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// we have to return.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;contextDone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;parent context done; bailing out&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;retryCtxCancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;contextDeadlineExceeded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;retryCtx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// If the parent context is not done, but our retry context is done,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// it&amp;#39;s time to retry a different service.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;timed out: will try next address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assumedLeader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assumedLeader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;retryCtxCancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;FindLeader&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;retryCtxCancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;received response %#v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// No context/timeout on this request - we&amp;#39;ve actually received a response.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusNotLeader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;not leader: will try next address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assumedLeader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assumedLeader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;retryCtxCancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;FindLeader&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;retryCtxCancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusFailedCommit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;retryCtxCancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;commit failed; please retry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unreachable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There's some &lt;tt class="docutils literal"&gt;context&lt;/tt&gt; subtlety going on here - hopefully the comments
make that clear enough.&lt;/p&gt;
&lt;p&gt;The client keeps track of the last service it saw that accepted a command as
a leader. When asked to send a new command to the service, this is the service
it starts from. If its request to the assumed leader times out, or that service
says it's no longer the leader, the client retries to the next service in the
cluster.&lt;/p&gt;
&lt;p&gt;During &lt;em&gt;normal operation&lt;/em&gt;, the leader will typically be stable, each client
will quickly discover who it is and from that point on will address the leader
directly. When there's a cluster disruption, the client will spend a bit of
time looking for the leader - but this can be optimized if needed &lt;a class="footnote-reference" href="#footnote-4" id="footnote-reference-4"&gt;[4]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If a client can't find a leader, it will just keep trying; since we use the Go
&lt;tt class="docutils literal"&gt;context&lt;/tt&gt; idiom, this can always be controlled by the user - by imposing a
timeout on client operations, or canceling them for other reasons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="future-work"&gt;
&lt;h2&gt;Future work&lt;/h2&gt;
&lt;p&gt;The KV service presented in this post provides strong consistency guarantees,
as discussed. However, keeping systems linearizable all the way through the
client is notoriously tricky, and the simple client we presented in this post
is not immune to issues.&lt;/p&gt;
&lt;p&gt;The problem is with its retry logic; when a client sends a PUT command to
a leader and the request times out, what is the right thing to do? Our client
just retries, looking for a different leader. Is this the right approach?&lt;/p&gt;
&lt;p&gt;Not necessarily! Consider what happens if the leader committed the command,
but crashed before responding to the client. If the client now retries, the
command may end up duplicated in the log. While it may seem like this shouldn't
be a problem because PUT is idempotent &lt;a class="footnote-reference" href="#footnote-5" id="footnote-reference-5"&gt;[5]&lt;/a&gt;, it can in fact cause
non-linearizable behavior to be observed, if some other client managed to
PUT &lt;em&gt;another&lt;/em&gt; value for the same key in-between the replies.&lt;/p&gt;
&lt;p&gt;This isn't a trivial problem; in fact, it's also mentioned in section 8 of the
Raft paper. We'll spend the next part in the series discussing this problem in
detail, presenting one potential solution and talking about how real-world
distributed KV services deal
with it.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;For the terms used in this description, refer to &lt;a class="reference external" href="https://eli.thegreenplace.net/2020/implementing-raft-part-0-introduction/"&gt;Part 0&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This is exactly how &lt;em&gt;our&lt;/em&gt; client implementation works, as we'll see soon.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The paper also discusses some ideas for optimizations of this process.
Since this optimizes the uncommon path (when crashes and disconnections
disrupt the normal operation of the Raft cluster), I leave this out of
my implementation.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Here's an exercise: the &lt;tt class="docutils literal"&gt;AppendEntries&lt;/tt&gt; RPC sent by leaders to
followers contains a &amp;quot;leader ID&amp;quot; field; so followers know who the current
leader is. We already have it in our Raft implementation; try to plumb
this information all the way through to the client. When a follower
sends a &amp;quot;I'm not a leader&amp;quot; response to the client, it can include the ID
of the service it thinks is the current leader; this can reduce the
search time somewhat.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Applying &lt;tt class="docutils literal"&gt;PUT(k1, v1)&lt;/tt&gt; right after another &lt;tt class="docutils literal"&gt;PUT(k1,v1)&lt;/tt&gt; doesn't
affect the correctness of the DB.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Concurrency"></category><category term="Go"></category><category term="Network Programming"></category></entry><entry><title>Linearizability in distributed systems</title><link href="https://eli.thegreenplace.net/2024/linearizability-in-distributed-systems/" rel="alternate"></link><published>2024-10-07T19:16:00-07:00</published><updated>2024-10-08T02:16:59-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-10-07:/2024/linearizability-in-distributed-systems/</id><summary type="html">&lt;p&gt;Linearizability is a strong &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Consistency_model"&gt;consistency model&lt;/a&gt;
in concurrent and distributed systems. From the paper introducing it &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Linearizability provides the illusion that each operation applied by
concurrent processes takes effect instantaneously at some point between
its invocation and its response.&lt;/blockquote&gt;
&lt;p&gt;On first reading (and probably on the second and third â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Linearizability is a strong &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Consistency_model"&gt;consistency model&lt;/a&gt;
in concurrent and distributed systems. From the paper introducing it &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Linearizability provides the illusion that each operation applied by
concurrent processes takes effect instantaneously at some point between
its invocation and its response.&lt;/blockquote&gt;
&lt;p&gt;On first reading (and probably on the second and third...) this sounds a bit
abstract, but it really is all there is to it. A slightly different way to
think about it is - a linearizable system appears as if there's only one copy
of data in existence, and all client operations apply to this data atomically.
This post dives deeper into what this means in practice.&lt;/p&gt;
&lt;div class="section" id="registers"&gt;
&lt;h2&gt;Registers&lt;/h2&gt;
&lt;p&gt;Linearizability is a &lt;em&gt;single-object&lt;/em&gt; consistency model (see the &amp;quot;Linearizability
vs. Serializability&amp;quot; section below for more on this).
It's common in distributed systems literature to talk
about a &lt;em&gt;register&lt;/em&gt; - a single key-value pair, for example, stored in some
distributed database. When clients write and read this register concurrently,
we can analyze the history of operations and their results and determine if
the system maintains linearizability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="basic-example"&gt;
&lt;h2&gt;Basic example&lt;/h2&gt;
&lt;p&gt;The following diagram describes a sequence of register reads and writes by
three different clients; some of these operations are done concurrently. Time
flows from left to right, and a colored rectangle denotes an operation; its
left edge is the operation's start, and its right edge the operation's
completion &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="Linearizable history scenario 1" class="align-center" src="https://eli.thegreenplace.net/images/2024/linearizable-sc1.png" /&gt;
&lt;p&gt;Here are the events, each with its own number in the yellow bubble:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Client A reads the register and gets the value of 0. The read itself
happened at some point in time in the database, denoted on the timeline
in the very bottom of the diagram.&lt;/li&gt;
&lt;li&gt;Client B reads the value 0. Note that this read operation is partially
concurrent with the write operation (3); concurrent operations can execute
in any order, but here (2) happened to be executed before (3) (we know
this because the value 0 was read, not 1).&lt;/li&gt;
&lt;li&gt;Client C writes 1 into the register.&lt;/li&gt;
&lt;li&gt;Client A reads 1 from the register. This read is also concurrent with the
write, and thus could end up with any result, but since the result in this
timeline is 1, we know it happened after (3).&lt;/li&gt;
&lt;li&gt;Client B reads 1 from the register.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This sequence of events is valid in a linearizable system, because we can
construct a serial history of events (the bottom timeline) that's consistent
with our results. Each event occurs instantaneously at some point between the
start and finish of the client request.&lt;/p&gt;
&lt;p&gt;Compare this to the following sequence, which is not valid:&lt;/p&gt;
&lt;img alt="Linearizable history scenario 2" class="align-center" src="https://eli.thegreenplace.net/images/2024/linearizable-sc2.png" /&gt;
&lt;p&gt;This sequence is similar to the first one, with one difference: B's read in
(5) results in 0. Since (5) is concurrent with (3), when seen in isolation
this isn't unreasonable. However, since in (4), client A already observed
the value 1 in the register and (4) happens before (5), this sequence is
invalid in a linearizable system. We can imagine systems with weaker
consistency guarantees producing this history, but such systems are not
linearizable.&lt;/p&gt;
&lt;p&gt;Another way to look at it is examine the timeline in the bottom of the diagram.
Notice that (5) reads 0, after (3) happened. We just can't find a way to
arrange this history so it looks sequential - therefore, it's inconsistent
with linearizability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-more-subtle-example"&gt;
&lt;h2&gt;A more subtle example&lt;/h2&gt;
&lt;p&gt;Here's a more subtle example, taken from the linearizability paper:&lt;/p&gt;
&lt;img alt="Linearizable history scenario 3" class="align-center" src="https://eli.thegreenplace.net/images/2024/linearizable-sc3.png" /&gt;
&lt;p&gt;This sequence of events is invalid for a linearizable system! To
understand why, let's follow the timeline at the bottom of the diagram.&lt;/p&gt;
&lt;p&gt;(3) Client B's write of 1 executes before (2) client A's read, because A
reads 1 from the register. If the read at (2) happened before the write
at (3), it (the read) would result in 0, not 1.&lt;/p&gt;
&lt;p&gt;Event (4) has to happen after event (2), since it starts after (2) ends.
But we've just reasoned that (2) happens after (3); therefore, (4) happens
after (3) - even though these two writes are concurrent, their order is
imposed by observing other events.&lt;/p&gt;
&lt;p&gt;Finally, since we've just proven that (4) happens after (3), the value in the
register at the conclusion of (3) is 0, not 1; therefore, the read of 1 in (5)
is invalid. This system cannot be linearizable. As before, you can try
to arrange the events in the bottom of the diagram into some sequential order -
this attempt will fail, because no consistent sequential order can account
for the observed events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-formal-definition"&gt;
&lt;h2&gt;A formal definition&lt;/h2&gt;
&lt;p&gt;I personally found the formal definition of linearizability in the Herlihy &amp;amp;
Wang paper somewhat obscured by attention given to potentially unfinished
operations. If we assume that every operation has a start and an end, it's
easier to restate the formal definition as follows.&lt;/p&gt;
&lt;p&gt;An operation &lt;em&gt;e&lt;/em&gt; has the timestamps &lt;em&gt;start(e)&lt;/em&gt; and &lt;em&gt;end(e)&lt;/em&gt;; these are the
left and right boundaries of the rectangles in the diagrams shown above.&lt;/p&gt;
&lt;p&gt;A history &lt;em&gt;H&lt;/em&gt; exists with a strong partial order &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/756c241ac5f91f469be969adf19eba8be013f3d6.svg" style="height: 13px;" type="image/svg+xml"&gt;&amp;lt;_H&lt;/object&gt; on operations &lt;a class="footnote-reference" href="#footnote-3" id="footnote-reference-3"&gt;[3]&lt;/a&gt;:
&lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/da680da9f55778b0b7ae1936f4f9d9e83f7686cb.svg" style="height: 13px;" type="image/svg+xml"&gt;e_0 &amp;lt;_H e_1&lt;/object&gt; if &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/98d60fef24c45831a1c414f7c97ef09d586c7a02.svg" style="height: 19px;" type="image/svg+xml"&gt;end(e_0)&lt;/object&gt; precedes &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/c4a35986d620d327ab562a7d0a5a603e11425181.svg" style="height: 19px;" type="image/svg+xml"&gt;start(e_1)&lt;/object&gt; in &lt;em&gt;H&lt;/em&gt;.
Operations unrelated by &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/756c241ac5f91f469be969adf19eba8be013f3d6.svg" style="height: 13px;" type="image/svg+xml"&gt;&amp;lt;_H&lt;/object&gt; are said to be &lt;em&gt;concurrent&lt;/em&gt; in H.
In our diagrams, &lt;em&gt;H&lt;/em&gt; represents the observed history (the part of the diagram
with the overlapping rectangles). The formal definition captures what it
means for us to know that some operations precede others, while other operations
are concurrent.&lt;/p&gt;
&lt;p&gt;For example, in our last diagram above if &lt;em&gt;H&lt;/em&gt; is the history shown, then
&lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/ee5009cacbd76077cf901db78a83bf5014f6c7c0.svg" style="height: 13px;" type="image/svg+xml"&gt;e_3 &amp;lt;_H e_5&lt;/object&gt;, but the pair &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/bc1f891fff9987dabf9906aa81786141b784d60a.svg" style="height: 12px;" type="image/svg+xml"&gt;e_3,e_4&lt;/object&gt; is not in the relation
&lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/756c241ac5f91f469be969adf19eba8be013f3d6.svg" style="height: 13px;" type="image/svg+xml"&gt;&amp;lt;_H&lt;/object&gt;, since these operations are concurrent.&lt;/p&gt;
&lt;p&gt;If &lt;em&gt;H&lt;/em&gt; is a sequential history, then &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/756c241ac5f91f469be969adf19eba8be013f3d6.svg" style="height: 13px;" type="image/svg+xml"&gt;&amp;lt;_H&lt;/object&gt; is a &lt;em&gt;total order&lt;/em&gt;. It means
there are no concurrent operations.&lt;/p&gt;
&lt;p&gt;Now it's time for the definition of linearizability. &lt;em&gt;H&lt;/em&gt; is linearizable if:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;H&lt;/em&gt; is equivalent to some sequential history &lt;em&gt;S&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/21bc4a1cae8b4f606a98282c4c93be246a3673fb.svg" style="height: 14px;" type="image/svg+xml"&gt;&amp;lt;_H \subseteq &amp;lt;_S&lt;/object&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second item requires a bit of elaboration: recall that &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/756c241ac5f91f469be969adf19eba8be013f3d6.svg" style="height: 13px;" type="image/svg+xml"&gt;&amp;lt;_H&lt;/object&gt; and
&lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/cdd6694fe341fc295fff7257a7031c88365c1bf8.svg" style="height: 13px;" type="image/svg+xml"&gt;&amp;lt;_S&lt;/object&gt; are &lt;em&gt;relations&lt;/em&gt;. &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/756c241ac5f91f469be969adf19eba8be013f3d6.svg" style="height: 13px;" type="image/svg+xml"&gt;&amp;lt;_H&lt;/object&gt; being a subset of &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/cdd6694fe341fc295fff7257a7031c88365c1bf8.svg" style="height: 13px;" type="image/svg+xml"&gt;&amp;lt;_S&lt;/object&gt; means
that the partial order of operations in the real-time history &lt;em&gt;H&lt;/em&gt; is preserved
in the linearization.&lt;/p&gt;
&lt;p&gt;We then call &lt;em&gt;S&lt;/em&gt; the &lt;em&gt;linearization of H&lt;/em&gt;. In our diagrams, &lt;em&gt;S&lt;/em&gt; is the bottom
line where operations are shown on the server happening immediately; they are
still represented by &lt;em&gt;start(e)&lt;/em&gt; and &lt;em&gt;end(e)&lt;/em&gt; in the history (we can just assume
&lt;em&gt;start(e)&lt;/em&gt; and &lt;em&gt;end(e)&lt;/em&gt; are infinitesimally close in time, since the DB applies
operations atomically).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linearizability-vs-serializability"&gt;
&lt;h2&gt;Linearizability vs. Serializability&lt;/h2&gt;
&lt;p&gt;Linearizability is often confused with &lt;em&gt;serializability&lt;/em&gt; - another consistency
model. The two are fundamentally different, though:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Serializability is a multi-object property useful to describe transactions
that consist of multiple operations that may potentially touch multiple
objects; informally, it means that transactions happen atomically, and their
sub-operations cannot be observed in isolation or intermix.&lt;/li&gt;
&lt;li&gt;Linearizability is a single-object property, talking about the observed
effects on a single register, as this post demonstrates.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a great taxonomy of consistency models, see &lt;a class="reference external" href="https://jepsen.io/consistency"&gt;this page from Jepsen&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-resources"&gt;
&lt;h2&gt;Additional resources&lt;/h2&gt;
&lt;p&gt;Kyle Kingsbury - on his blog and through his company Jepsen - has a wealth of
great resources on the subject of linearizability and other consistency models.
Some examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://jepsen.io/consistency"&gt;The taxonomy&lt;/a&gt;, as mentioned above,
and the related &lt;a class="reference external" href="https://aphyr.com/posts/313-strong-consistency-models"&gt;blog post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Knossos, a linearizability checker: &lt;a class="reference external" href="https://aphyr.com/posts/309-knossos-redis-and-linearizability"&gt;blog post&lt;/a&gt;
and &lt;a class="reference external" href="https://github.com/jepsen-io/knossos"&gt;project page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jepsen's &lt;a class="reference external" href="https://jepsen.io/analyses/etcd-3.4.3"&gt;analysis of etcd&lt;/a&gt; has
an interesting practical discussion of linearizability in a real-world system&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Herlihy, Maurice P.; Wing, Jeannette M. (1990).
&amp;quot;Linearizability: A Correctness Condition for Concurrent Objects&amp;quot;.
ACM Transactions on Programming Languages and Systems.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The operation itself happens instantaneously on the server at some
moment within the rectangle's boundaries, but we don't know exactly when
due to network delays.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;For a refresher on the math used here (relations, orders) see
&lt;a class="reference external" href="https://eli.thegreenplace.net/2018/partial-and-total-orders/"&gt;this post&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Concurrency"></category><category term="Network Programming"></category><category term="Databases"></category></entry><entry><title>Summary of reading: July - September 2024</title><link href="https://eli.thegreenplace.net/2024/summary-of-reading-july-september-2024/" rel="alternate"></link><published>2024-09-30T17:01:00-07:00</published><updated>2024-10-01T01:40:00-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-09-30:/2024/summary-of-reading-july-september-2024/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;A City on Mars&amp;quot; By Kelly and Zach Weinersmith - actual discussion of building
settlements on Mars occupies maybe 1% of this book. The authors have an
uncanny talent of focusing on all the least interesting aspects of space
exploration; whatever little is dedicated to science and engineering is
fairly shallow â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;A City on Mars&amp;quot; By Kelly and Zach Weinersmith - actual discussion of building
settlements on Mars occupies maybe 1% of this book. The authors have an
uncanny talent of focusing on all the least interesting aspects of space
exploration; whatever little is dedicated to science and engineering is
fairly shallow and reeks of techno-pessimism. That said, if the aspects of
space exploration that interest you most are politics, social structures,
legal frameworks, labor relations and mental health - go ahead and read this
book. Overall, I found it infuriatingly bad.&lt;/li&gt;
&lt;li&gt;&amp;quot;What You Are Looking For Is in the Library&amp;quot; Michiko Aoyama - a sweet little
collection of loosely-related short stories. Just regular people living their
lives in Japan; the common theme is changing circumstances and how to deal
with them. I really enjoy books of this kind, and this one is very well done.&lt;/li&gt;
&lt;li&gt;&amp;quot;Is this Wi-Fi Organic?: A guide to spotting misleading science online&amp;quot; by
Dave Farina - a valiant attempt to build up a solid scientific foundation
for debunking myths (focusing mostly on alternative medicine). Unfortunately,
the execution falls short. The tactic employed by the author is: explain
a bunch of science at a pretty shallow level, then present some claim to
debunk and then immediately jump to &amp;quot;this is clearly false, becasue science&amp;quot;.
Rinse; repeat. While entertaining, this isn't very convincing. From a book,
I'd expect much more. For example, Simon Singh's &amp;quot;Trick or Treatment&amp;quot; is much
better in this respect, because the debunking done with a lot of supporting
evidence, citing relevant research and studies. The good thing I can say
about this book is that I appreciate the techno-optimism and the science-first
approach.&lt;/li&gt;
&lt;li&gt;&amp;quot;An imaginary tale&amp;quot; by Paul J. Nahin - tells the history of the discovery
and initial applications of the imaginary unit - &lt;em&gt;i&lt;/em&gt;. Very interesting book
that fills an under-served niche between popular science and textbooks. The
book isn't easy to go through - it requires sophisticated math, at least at
the engineering undergrad level. Except the last chapter - which goes a
bit off the rails with complex analysis - this background should be sufficient
for the vast majority of the book, but some work will still be required.
While I didn't follow through every single calculation, I really enjoyed the
book overall and should try to read additional stuff by this author.&lt;/li&gt;
&lt;li&gt;&amp;quot;The Code Breaker&amp;quot; by Walter Isaacson - a biography of Jennifer Doudna,
focusing on the discovery of CRISPR, the competition around it, the ethical
implications of gene editing and COVID vaccine research. An OK book overall,
with some really tedious parts; not the best Isaacson, in my experience.&lt;/li&gt;
&lt;li&gt;&amp;quot;An Immense World&amp;quot; by Ed Yong - secondary title &amp;quot;How Animal Senses Reveal
the Hidden Realms Around Us&amp;quot;; an information-packed book with a huge scope,
describing the sensing capabilities animals possess beyond the human range.
Very interesting.&lt;/li&gt;
&lt;li&gt;&amp;quot;Mansfield Park&amp;quot; by Jane Austen - familiar style and topic - the lives of
the bored 19th century English gentry. I liked this book less than others
by Austen I read; the characters aren't as well developed (I feel like there
are too many? Austen seems to have neglected to provide distinct roles for
several), and the first half of the book is fairly dull.&lt;/li&gt;
&lt;li&gt;&amp;quot;How to Avoid a Climate Disaster&amp;quot; by Bill Gates - a decent overview of the
current state of global warming, and what it would take to avoid the
worst-case scenario. This book could be much better, IMHO, if it had more
depth and a coherent summary/plan. I'm also surprised by the relatively
shallow coverage of nuclear (fission) power, given the importance attributed
to it by Gates. Also, the coverage of carbon capture is surprisingly minimal.
On the good side, I really liked the concept of &amp;quot;green premium&amp;quot; and how to
factor that into economically realistic solutions. This is one of those
subjects that's moving so fast, however, that it needs a fresh treatment
every few years. This book is from 2020 and already some information feels
stale due to the huge progress in solar deployments that's been made in the
past few years.&lt;/li&gt;
&lt;li&gt;&amp;quot;On Writing: A Memoir of the Craft&amp;quot; by Stephen King - a mix of autobiography
with some advice on writing creative fiction. Very good overall. King's
relationship with his family is inspiring and endearing - not the usual
celebrity fare. One small gripe is that the book is artificially inflated with
some tangential interviews at the end, so it's actually shorter than
advertised.&lt;/li&gt;
&lt;li&gt;&amp;quot;Engineering in Plain Sight&amp;quot; by Grady Hillhouse - the author is well-known
from his YouTube channel &amp;quot;Practical Engineering&amp;quot;, and this book is a text
presentation of many of the topics he discusses in his videos. The writing
is unmistakable in Hillhouse's enthusiastic style and the illustrations are
beautiful. In all, a very nice book.&lt;/li&gt;
&lt;li&gt;&amp;quot;Children of Time&amp;quot; by Adrian Tchaikovsky - first part of a sci-fi trilogy
about space-faring humans and... spiders. Highly imaginative and fun to read.&lt;/li&gt;
&lt;li&gt;&amp;quot;Journeys North: The Pacific Crest Trail&amp;quot; by Barney Scout Mann - a memoir
of a person thru-hiking the full PCT in 2007, and some stories about his
fellow hikers. Great book.&lt;/li&gt;
&lt;li&gt;&amp;quot;The Final Frontiersman&amp;quot; by James Campbell - subtitle is &amp;quot;Heimo Korth and
His Family, Alone in Alaska's Arctic Wilderness&amp;quot;. Very nice biography about
a fur trapper family living in a remote self-built cabin in north-east Alaska.
Covers a period roughly from the 1980s to the early 2000s.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Re-reads:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Naked Economics&amp;quot; by Charles Wheelan&lt;/li&gt;
&lt;li&gt;&amp;quot;The count of Monte Cristo&amp;quot; by Alexandre Dumas&lt;/li&gt;
&lt;li&gt;&amp;quot;Skunk Works: A Personal Memoir of My Years of Lockheed&amp;quot; by Ben Rich&lt;/li&gt;
&lt;/ul&gt;
</content><category term="misc"></category><category term="Book reviews"></category></entry><entry><title>Notes on running Go in the browser with WebAssembly</title><link href="https://eli.thegreenplace.net/2024/notes-on-running-go-in-the-browser-with-webassembly/" rel="alternate"></link><published>2024-09-14T06:05:00-07:00</published><updated>2024-10-11T13:54:40-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-09-14:/2024/notes-on-running-go-in-the-browser-with-webassembly/</id><summary type="html">&lt;p&gt;Recently I've had to compile Go to WebAssembly to run in the browser in a couple
of small projects (&lt;a class="reference external" href="https://eliben.github.io/go-sudoku/"&gt;#1&lt;/a&gt;,
&lt;a class="reference external" href="https://eliben.github.io/go-sentencepiece/"&gt;#2&lt;/a&gt;), and in general spent some
time &lt;a class="reference external" href="https://eli.thegreenplace.net/tag/webassembly"&gt;looking at WebAssembly&lt;/a&gt;.
I find WebAssembly to be an exciting technology, both for the web and for
other uses (e.g. with WASI â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I've had to compile Go to WebAssembly to run in the browser in a couple
of small projects (&lt;a class="reference external" href="https://eliben.github.io/go-sudoku/"&gt;#1&lt;/a&gt;,
&lt;a class="reference external" href="https://eliben.github.io/go-sentencepiece/"&gt;#2&lt;/a&gt;), and in general spent some
time &lt;a class="reference external" href="https://eli.thegreenplace.net/tag/webassembly"&gt;looking at WebAssembly&lt;/a&gt;.
I find WebAssembly to be an exciting technology, both for the web and for
other uses (e.g. with WASI); specifically, it's pretty great that we can take
existing projects and components written in Go and run them in the browser.&lt;/p&gt;
&lt;p&gt;In this post, I will summarize some useful patterns in running Go in the browser
via WebAssembly. All the patterns are demonstrated by small, self-contained
programs you can find in &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2024/go-wasm-js-cookbook"&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="basics-calling-go-from-js"&gt;
&lt;h2&gt;Basics: calling Go from JS&lt;/h2&gt;
&lt;p&gt;This sample serves as the basis for other samples in this post: let's
write a Go function that we'll call in the browser using JS. This function
uses Go's &lt;tt class="docutils literal"&gt;math/big&lt;/tt&gt; stdlib package to calculate the sum of the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Harmonic_series_(mathematics)"&gt;harmonic series&lt;/a&gt;
for some duration &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;, and returns the result with high precision:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// calcHarmonic calculates the harmonic series for approximately the given&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// number of seconds and returns the accumulated result in a string.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;calcHarmonic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nsecs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nsecs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;r1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;big&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewRat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;addend&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;big&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewRat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;r1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;addend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FloatString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To export this function to JS in the browser, we add the following
code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Export the name &amp;quot;calcHarmonic&amp;quot; to JS, with our wrapper as value&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Global&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;calcHarmonic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;jsCalcHarmonic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// The Go main function compiled to WASM is expected to block&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// indefinitely.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// wrap calcHarmonic to be callable from JS&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;jsCalcHarmonic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FuncOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;any&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;want one argument&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;calcHarmonic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ValueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This Go file is compiled to the WASM/js target with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GOOS=js GOARCH=wasm go build -o harmonic.wasm harmonic.go
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And load it from JS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Instantiate a new Go object (defined in from wasm_exec.js)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Go&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;WebAssembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instantiateStreaming&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;harmonic.wasm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;importObject&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="Shows the UI of our &amp;quot;calculate harmonic sum&amp;quot; demo" class="align-center" src="https://eli.thegreenplace.net/images/2024/calc-harmonic-ui2.png" /&gt;
&lt;p&gt;The JS code that calls &lt;tt class="docutils literal"&gt;calcHarmonic&lt;/tt&gt; is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;buttonElement&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;submitButton&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;submitButton&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;timeInput&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;calcHarmonic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;outputDiv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, the &lt;tt class="docutils literal"&gt;wasm_exec.js&lt;/tt&gt; file from the Go distribution has to be included
with something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wasm_exec.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The easiest way to obtain this file is download it from the Go project's GitHub
mirror (for the same Go version your Go code is compiled with); this is handled
by the Makefile in our sample project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wasm_exec.js:
  wget https://raw.githubusercontent.com/golang/go/release-branch.go1.22/misc/wasm/wasm_exec.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the basic recipe for invoking Go from JS in the browser: the Go code
is platform-agnostic and presents some API and all the glue logic is done in JS.
The next samples show some variations on this basic scheme.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2024/go-wasm-js-cookbook/basic-call-go-from-js"&gt;Link to the full code for this sample&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dom-manipulation-from-go"&gt;
&lt;h2&gt;DOM manipulation from Go&lt;/h2&gt;
&lt;p&gt;In the previous example, Go implemented the &lt;tt class="docutils literal"&gt;calcHarmonic&lt;/tt&gt; function, but the
rest of the program's logic was in JS - setting up an event listener for a
button click, updating output, etc.&lt;/p&gt;
&lt;p&gt;We can move more of the code to Go, if we want. The &lt;tt class="docutils literal"&gt;calcHarmonic&lt;/tt&gt; remains
unchanged, but our &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; function in Go becomes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Global&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;document&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;buttonElement&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;getElementById&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submitButton&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;inputElement&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;getElementById&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;timeInput&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;outputElement&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;getElementById&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;outputDiv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;buttonElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;addEventListener&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FuncOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;any&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;inputElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;inputFloat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;strconv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ParseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;calcHarmonic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputFloat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;outputElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;innerText&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We obtain JS values from the &lt;tt class="docutils literal"&gt;js.Global()&lt;/tt&gt; context and can call functions
or set attributes on them. If you squint, this looks very similar to JS code,
but written in Go-ish.&lt;/p&gt;
&lt;p&gt;This code sample demonstrates some useful capabilities of DOM manipulation in Go:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Adding event listeners on DOM elements, with Go callbacks&lt;/li&gt;
&lt;li&gt;Getting values from DOM elements&lt;/li&gt;
&lt;li&gt;Setting attributes on DOM elements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only code JS remaining in our &lt;tt class="docutils literal"&gt;index.html&lt;/tt&gt; is the WebAssembly loader:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Go&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;WebAssembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instantiateStreaming&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;harmonic.wasm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;importObject&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All the rest is done in Go! &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2024/go-wasm-js-cookbook/dom-in-go"&gt;Link to the full code for this sample&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a more full-featured sample, check out &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2024/go-wasm-js-cookbook/go-canvas-gameoflife"&gt;this directory&lt;/a&gt;.
It implements a simple Game of Life running in the browser, entirely in Go. All
the game logic, canvas manipulation and event management is done in Go; here
too, the only JS code in the project is the few lines used to load the
WebAssembly module.&lt;/p&gt;
&lt;img alt="Game of Life screenshot" class="align-center" src="https://eli.thegreenplace.net/images/2024/gameoflife-go-wasm.png" /&gt;
&lt;p&gt;I personally prefer keeping the UI logic in JS, but if you're interested in
Go purity all the way - it's definitely feasible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-tinygo-as-an-alternative-compiler"&gt;
&lt;h2&gt;Using TinyGo as an alternative compiler&lt;/h2&gt;
&lt;p&gt;The Go compiler's support for WebAssembly is pretty good these days, but there's
a small snag that may be important to users: the entire Go runtime is compiled
into the WASM binary. On my machine, the &lt;tt class="docutils literal"&gt;.wasm&lt;/tt&gt; files produced for the
sample Go code weigh in at around 2.5 MiB, which will take some time to load
in the browser - especially on slow connections &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There's an alternative: &lt;a class="reference external" href="https://tinygo.org/"&gt;TinyGo&lt;/a&gt; is a Go toolchain
&amp;quot;for small places&amp;quot;, specializing in embedded controllers; the same
considerations apply to WASM. The TinyGo runtime is lightweight compared
to Go, and the binaries are about 1/4 the size. Not everything is perfect with
TinyGo, though: compilation is much slower, and the resulting code is a bit
slower as well. Finally, TinyGo has &lt;a class="reference external" href="https://tinygo.org/docs/reference/lang-support/stdlib/"&gt;some limitations&lt;/a&gt;
that make stdlib packages that rely on reflection not work; this can be painful
when interacting with JS because &lt;tt class="docutils literal"&gt;encoding/json&lt;/tt&gt; relies on reflection - so
you may need to look for an alternative JSON package.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2024/go-wasm-js-cookbook/dom-in-go"&gt;dom-in-go sample directory&lt;/a&gt;
also shows how to build the project with TinyGo; take a look at the Makefile.
Note that TinyGo has its own &lt;tt class="docutils literal"&gt;wasm_exec.js&lt;/tt&gt; support file - it won't work with
the one taken from the standard Go distribution; the Makefile handles this too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="keeping-the-main-thread-free-webassembly-in-a-web-worker"&gt;
&lt;h2&gt;Keeping the main thread free: WebAssembly in a web worker&lt;/h2&gt;
&lt;p&gt;If we come back to the original sample and run the calculation for some
non-trivial amount of time (say, 2 seconds or more) - you may notice something:
the page appears &amp;quot;frozen&amp;quot; while the calculation is running. You can't interact
with the UI in any way, can't select text with the mouse; if you try to add
periodic &lt;tt class="docutils literal"&gt;console.log&lt;/tt&gt; printouts or some spinner animation - nothing will show
until &lt;tt class="docutils literal"&gt;calcHarmonic&lt;/tt&gt; returns with the result.&lt;/p&gt;
&lt;p&gt;This is the expected behavior for JS when it calls a blocking, CPU-intensive
function! Let's revisit the code again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;buttonElement&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;submitButton&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;submitButton&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;timeInput&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;calcHarmonic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;outputDiv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The highlighted line will block the main thread for 2+ seconds, but the main
thread in JS is also used for all the UI interaction. This is one of the
most common manifestations of &lt;a class="reference external" href="https://eli.thegreenplace.net/2018/go-hits-the-concurrency-nail-right-on-the-head/"&gt;function coloring problem&lt;/a&gt; - blocking
is problematic. Luckily, all modern browsers support &lt;em&gt;Web Workers&lt;/em&gt; - isolated
threads that can execute concurrently.&lt;/p&gt;
&lt;p&gt;It's not hard to make web workers work with WebAssembly, which is what our
next demo shows. The main HTML file includes, in addition to the UI logic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;worker.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`worker.log: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;resultReady&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`Unknown action: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;tt class="docutils literal"&gt;worker.js&lt;/tt&gt; is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;importScripts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;wasm_exec.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Worker is running&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Load the WASM module with Go code.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Go&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;WebAssembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instantiateStreaming&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;harmonic.wasm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;importObject&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Worker loaded WASM module&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Worker failed to load WASM module: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nx"&gt;onmessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`Worker received message &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;calculate&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;calcHarmonic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`unknown action &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;&amp;#39;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(The Go code remains unchanged.)&lt;/p&gt;
&lt;p&gt;We see that the worker does the WebAssembly loading now, meaning that the
Go code executes in a separate thread and the UI thread is free to run while
the computation is ongoing. This sample adds a spinner that animates until
the web worker returns &lt;tt class="docutils literal"&gt;calcHarmonic&lt;/tt&gt;'s answer, to show the effect.&lt;/p&gt;
&lt;img alt="Shows the UI of our &amp;quot;calculate harmonic sum&amp;quot; demo with a spinner" class="align-center" src="https://eli.thegreenplace.net/images/2024/calc-harmonic-spinner.png" /&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2024/go-wasm-js-cookbook/go-in-web-worker"&gt;Link to the full code for this sample&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="talking-on-a-web-socket-with-go"&gt;
&lt;h2&gt;Talking on a Web Socket with Go&lt;/h2&gt;
&lt;p&gt;A few years ago I &lt;a class="reference external" href="https://eli.thegreenplace.net/2016/go-websocket-server-sample/"&gt;published a sample&lt;/a&gt;
of a Go server talking via web sockets with JavaScript client code. Well, since
the theme here is porting all client code to Go, how about we replace that
JavaScript client with yet more Go?&lt;/p&gt;
&lt;p&gt;This turns out to be fairly simple - not much different from the &amp;quot;DOM
manipulation in Go&amp;quot; section, in fact. But there are some nuances I want
to cover.&lt;/p&gt;
&lt;p&gt;The application is simple - we display a box, and whenever there's mouse
movement over the box, the client sends messages to the server via a web socket;
the server echoes the message back and the client uses it to update a text div:&lt;/p&gt;
&lt;img alt="Screenshot of wasm websocket sample" class="align-center" src="https://eli.thegreenplace.net/images/2024/wasm-websocket-go-screen.png" /&gt;
&lt;p&gt;The server code is standard Go using the &lt;tt class="docutils literal"&gt;golang.org/x/net/websocket&lt;/tt&gt;
package. On the client, however, we have to use browser APIs. Here's the
interesting part of the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wsServerAddress&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ws://127.0.0.1:4050&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// These are equivalent to the following in JS:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//   ws = new WebSocket(addr) ...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;wsCtor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Global&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;WebSocket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;wsEcho&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wsCtor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wsServerAddress&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/wsecho&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;wsTime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wsCtor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wsServerAddress&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/wstime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To send on a web socket, we'll use this function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// wsSend sends a message on a web socket; the web socket must be active and&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// open (otherwise wsSends logs an error and doesn&amp;#39;t send anything).&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// The message will be serialized to JSON prior to sending.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;wsSend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sock&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IsNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;readyState&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Global&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;WebSocket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;OPEN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;send&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;socket is not open&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here's how receiving looks, registering the &lt;tt class="docutils literal"&gt;message&lt;/tt&gt; event listener:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;wsEcho&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;addEventListener&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FuncOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;any&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Event&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="nb"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;String&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;coordMsg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Coordinates: (%v, %v)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;outputElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;innerText&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;coordMsg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As before, this is just straightforward translation of JS into Go &lt;a class="footnote-reference" href="#footnote-3" id="footnote-reference-3"&gt;[3]&lt;/a&gt;. Note
something interesting that's going on here: we have two different Go programs,
talking over web sockets with each other using completely different underlying
libraries. One uses a Go-native implementation of web sockets; the other uses
the browser implementation, exposed via a JS API. In a realistic program, it
would make sense to abstract over these details so the same code could be used
to send/receive data over web sockets, whether it runs on the server or the
client.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2024/go-wasm-js-cookbook/go-wasm-websockets"&gt;Link to the full code for this sample&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="testing-locally-with-node-js"&gt;
&lt;h2&gt;Testing locally with Node.js&lt;/h2&gt;
&lt;p&gt;This section isn't strictly about &amp;quot;running in the browser&amp;quot;, but it covers the
important topic of local testing. Sometimes we don't want the browser in the
loop for our tests; well, good news - we can leverage Node.js's ability to
load and execute WebAssembly modules to run &lt;tt class="docutils literal"&gt;GOOS=js GOARCH=wasm&lt;/tt&gt; Go
binaries locally!&lt;/p&gt;
&lt;img alt="Node.js logo" class="align-center" src="https://eli.thegreenplace.net/images/2024/nodejs-logo.png" style="width: 200px;" /&gt;
&lt;p&gt;The intersting tidbit here is that we can leverage special support implemented
in the Go toolchain to make these invocations similar to running/testing
regular Go programs.
Here's an excerpt from &lt;tt class="docutils literal"&gt;go help run&lt;/tt&gt; describing it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;By default, &amp;#39;go run&amp;#39; runs the compiled binary directly: &amp;#39;a.out arguments...&amp;#39;.
If the -exec flag is given, &amp;#39;go run&amp;#39; invokes the binary using xprog:
  &amp;#39;xprog a.out arguments...&amp;#39;.
If the -exec flag is not given, GOOS or GOARCH is different from the system
default, and a program named go_$GOOS_$GOARCH_exec can be found
on the current search path, &amp;#39;go run&amp;#39; invokes the binary using that program,
for example &amp;#39;go_js_wasm_exec a.out arguments...&amp;#39;. This allows execution of
cross-compiled programs when a simulator or other execution method is
available.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; in our sample handles this fully; we can run a test like
this locally, without opening the browser:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//go:build js &amp;amp;&amp;amp; wasm&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;syscall/js&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;TestJSArr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello from test in js/wasm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;objs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Global&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;eval&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;`({&lt;/span&gt;
&lt;span class="s"&gt;arr: [41,42,43],&lt;/span&gt;
&lt;span class="s"&gt;})`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;objs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;arr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;got&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;got&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;got %#v, want %#v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;got&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;got&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;got&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;got %#v, want %#v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;got&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With an invocation like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GOOS=js GOARCH=wasm go test -exec=supportfiles/go_js_wasm_exec -v .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2024/go-wasm-js-cookbook/local-test-with-node"&gt;Link to the full code for this sample&lt;/a&gt;.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The harmonic series is known to diverge, but &lt;em&gt;very slowly&lt;/em&gt;. You need
over 200 million elements to get to the sum of 20, etc.
(see &lt;a class="reference external" href="https://oeis.org/A004080"&gt;A004080&lt;/a&gt;).&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;There are some additional mitigations we can explore, like compressing
the WASM binary. This is outside the scope of this post, and it applies
to the TinyGo output as well.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;To be honest, this makes me appreciate JS as an extension language. It
has such a simple ABI! Everything is an object, and we can get/set
object properties (which can be other objects), and call
functions/methods - that's all we need to access all of the browser
APIs.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Go"></category><category term="WebAssembly"></category><category term="JavaScript"></category></entry><entry><title>Notes on the Euler formula</title><link href="https://eli.thegreenplace.net/2024/notes-on-the-euler-formula/" rel="alternate"></link><published>2024-09-07T05:44:00-07:00</published><updated>2024-09-08T13:47:45-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-09-07:/2024/notes-on-the-euler-formula/</id><summary type="html">&lt;p&gt;The Euler formula states that for any real &lt;em&gt;x&lt;/em&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/e41e42437950b87591a40b19d5bd68d01bd7786b.svg" style="height: 22px;" type="image/svg+xml"&gt;\[e^{ix}=cos(x)+i sin(x)\]&lt;/object&gt;
&lt;p&gt;Where &lt;em&gt;i&lt;/em&gt; is the imaginary unit. This formula is extremely important in many
branches of mathematics and engineering, but at first glance it's puzzling. What
does a complex exponent even mean, and how can â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Euler formula states that for any real &lt;em&gt;x&lt;/em&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/e41e42437950b87591a40b19d5bd68d01bd7786b.svg" style="height: 22px;" type="image/svg+xml"&gt;\[e^{ix}=cos(x)+i sin(x)\]&lt;/object&gt;
&lt;p&gt;Where &lt;em&gt;i&lt;/em&gt; is the imaginary unit. This formula is extremely important in many
branches of mathematics and engineering, but at first glance it's puzzling. What
does a complex exponent even mean, and how can it be related to the
trigonometric functions?&lt;/p&gt;
&lt;div class="section" id="complex-number-representations"&gt;
&lt;h2&gt;Complex number representations&lt;/h2&gt;
&lt;p&gt;Complex numbers have two canonical representations:&lt;/p&gt;
&lt;img alt="Cartesian and polar representation of a complex number" class="align-center" src="https://eli.thegreenplace.net/images/2024/complex-cartesian-polar.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cartesian: &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/dc5648d309ad9fa02d53124cd7d954697f66d39c.svg" style="height: 16px;" type="image/svg+xml"&gt;x+iy&lt;/object&gt;&lt;/li&gt;
&lt;li&gt;Polar: &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/498a8152700d478a53607b91f0940c6b8fa0a1fb.svg" style="height: 12px;" type="image/svg+xml"&gt;r\angle \theta&lt;/object&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Trigonometric formulae can be used to convert between the two in a
straightforward way:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Given &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/dc5648d309ad9fa02d53124cd7d954697f66d39c.svg" style="height: 16px;" type="image/svg+xml"&gt;x+iy&lt;/object&gt;, we can compute &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/2728488e970286c68c04be64d662d549e241ba5c.svg" style="height: 22px;" type="image/svg+xml"&gt;r=\sqrt{x^2+y^2}&lt;/object&gt; and
&lt;object class="valign-m6" data="https://eli.thegreenplace.net/images/math/4db3dc38b58aa628d82fadf84b3d6eb76572fcd5.svg" style="height: 21px;" type="image/svg+xml"&gt;\theta=tan^{-1}(\frac{y}{x})&lt;/object&gt;&lt;/li&gt;
&lt;li&gt;Given &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/498a8152700d478a53607b91f0940c6b8fa0a1fb.svg" style="height: 12px;" type="image/svg+xml"&gt;r\angle \theta&lt;/object&gt; we can compute &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/1315df0eea0f941a4323e489788223ea5ac54f15.svg" style="height: 12px;" type="image/svg+xml"&gt;x=r cos\theta&lt;/object&gt;
and &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/16bc635450100d6285d3cedee1bac9513e31a7fe.svg" style="height: 16px;" type="image/svg+xml"&gt;y=r sin\theta&lt;/object&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="some-intuition-for-euler-s-formula"&gt;
&lt;h2&gt;Some intuition for Euler's formula&lt;/h2&gt;
&lt;p&gt;Representing &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; as above, we have:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/9536f1bf02955baf02fab954b441b1efcd06768c.svg" style="height: 19px;" type="image/svg+xml"&gt;\[z=r(cos\theta+i sin\theta)\]&lt;/object&gt;
&lt;p&gt;Now, let's take two complex numbers, multiply them together and use some
basic trigonometric identities:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/671dbe789a44e7c82d528021ee225cd94095852e.svg" style="height: 153px;" type="image/svg+xml"&gt;\[\begin{align*}
  z_1&amp;amp;=r_1 (cos\theta+i sin\theta) \\
  z_2&amp;amp;=r_2 (cos\phi+i sin\phi)\\
  z_1 z_2 &amp;amp;= r_1 r_2 (cos\theta+i sin\theta)(cos\phi+i sin\phi)\\
  &amp;amp;=r_1 r_2 ((cos\theta cos\phi -sin\theta sin\phi) +i(cos\theta sin\phi + cos\phi sin\theta))\\
  &amp;amp;=r_1 r_2 (cos(\theta+\phi) + i sin(\theta+\phi))\\
  &amp;amp;= r_1 r_2 \angle (\theta+\phi)
\end{align*}\]&lt;/object&gt;
&lt;p&gt;When multiplying two complex numbers in polar form, their magnitudes multiply
but their angles &lt;em&gt;add&lt;/em&gt; &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, suppose we have a hypothetical function &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/cdbd3b5daa63e81b18753fcadf7ce6842362d7ce.svg" style="height: 19px;" type="image/svg+xml"&gt;f(\theta)&lt;/object&gt; such that
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/7e89ab16a335a7db4b5f9665ad6bf3f5507ff6b2.svg" style="height: 19px;" type="image/svg+xml"&gt;r f(\theta)&lt;/object&gt; represents a complex number. We've just shown that:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/ebabe28755489ef975d05f0b8eca2b7fa9bdba58.svg" style="height: 19px;" type="image/svg+xml"&gt;\[(r_1 f(\theta))\cdot(r_2 f(\phi))=r_1 r_2 f(\theta+\phi)\]&lt;/object&gt;
&lt;p&gt;What real-life function do you know that behaves like this? An exponential
function! &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/9094dd6718488a8c2fd484f3a163473682f5c51d.svg" style="height: 14px;" type="image/svg+xml"&gt;a^x a^y=a^{x+y}&lt;/object&gt; for some &lt;em&gt;a&lt;/em&gt;. This isn't a proof of anything,
of course, and the base of the exponent can be arbitrary - but it does show
that there's something about complex numbers that behaves like exponentials.&lt;/p&gt;
&lt;p&gt;Let's look at it from another direction. Once again starting with:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/9536f1bf02955baf02fab954b441b1efcd06768c.svg" style="height: 19px;" type="image/svg+xml"&gt;\[z=r(cos\theta+i sin\theta)\]&lt;/object&gt;
&lt;p&gt;We'll treat &lt;em&gt;z&lt;/em&gt; as a function of &lt;img alt="\theta" class="valign-0" src="https://eli.thegreenplace.net/images/math/cb005d76f9f2e394a770c2562c2e150a413b3216.png" style="height: 12px;" /&gt;, and find its derivative:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/f0c166c16c8953fb3d7413c38a98c3a7fe2d611a.svg" style="height: 36px;" type="image/svg+xml"&gt;\[\frac{dz}{d\theta}=-rsin\theta +i cos\theta\]&lt;/object&gt;
&lt;p&gt;If we factor &lt;em&gt;i&lt;/em&gt; out of the parenthesis, we get:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/3aad161fa2b1aabee4ca8e8b62a98b4896c25ab0.svg" style="height: 36px;" type="image/svg+xml"&gt;\[\frac{dz}{d\theta}=ri(cos\theta+i sin\theta)=iz\]&lt;/object&gt;
&lt;p&gt;Note that this is exactly the derivative if &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/3da5144c6fa0c57644b8f22d37ae190c1163a2f0.svg" style="height: 20px;" type="image/svg+xml"&gt;z(\theta)=e^{i\theta}&lt;/object&gt;,
another clue that complex numbers behave like exponential functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="proof-using-power-series"&gt;
&lt;h2&gt;Proof using power series&lt;/h2&gt;
&lt;p&gt;The canonical proof of Euler's formula uses &lt;a class="reference external" href="https://eli.thegreenplace.net/2024/notes-on-taylor-and-maclaurin-series/"&gt;Maclaurin series expansions&lt;/a&gt;
for &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/1624dce91de495347430ec2518baf6c6a5328d2e.svg" style="height: 12px;" type="image/svg+xml"&gt;e^x&lt;/object&gt;, &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/562597441eed562140c81684902007f6f275c940.svg" style="height: 19px;" type="image/svg+xml"&gt;cos(x)&lt;/object&gt; and &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/1f2ea8ffab8deb0e5b854a260a68b42b7eb7b048.svg" style="height: 19px;" type="image/svg+xml"&gt;sin(x)&lt;/object&gt;.&lt;/p&gt;
&lt;p&gt;As a reminder, the Maclaurin series approximation for a function &lt;img alt="f(x)" class="valign-m4" src="https://eli.thegreenplace.net/images/math/3e03f4706048fbc6c5a252a85d066adf107fcc1f.png" style="height: 18px;" /&gt; is:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/766aa8a11f2b92dd363c0dab88fff5eb333165bd.svg" style="height: 50px;" type="image/svg+xml"&gt;\[p(x) = f(0)+\frac{f&amp;#x27;(0)}{1!}x+\frac{f&amp;#x27;&amp;#x27;(0)}{2!}x^2+\frac{f&amp;#x27;&amp;#x27;&amp;#x27;(0)}{3!}x^3+\cdots=\sum_{n=0}^{\infty} \frac{f^{(n)}(0)}{n!}x^n\]&lt;/object&gt;
&lt;p&gt;For &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/1624dce91de495347430ec2518baf6c6a5328d2e.svg" style="height: 12px;" type="image/svg+xml"&gt;e^x&lt;/object&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/9484e0e6f1dad5e262b0637ea89651e71fce7df8.svg" style="height: 39px;" type="image/svg+xml"&gt;\[e^{x}=1+x+\frac{x^2}{2!}+\frac{x^3}{3!}+\frac{x^4}{4!}+\frac{x^5}{5!}+\cdots\]&lt;/object&gt;
&lt;p&gt;Substituting &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/d4f506d11f53beffb8d67eda0740af3a887a992e.svg" style="height: 12px;" type="image/svg+xml"&gt;ix&lt;/object&gt; for &lt;em&gt;x&lt;/em&gt; and applying powers of &lt;em&gt;i&lt;/em&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/db09e62c7bdd82da448598d005baee788f2a3841.svg" style="height: 85px;" type="image/svg+xml"&gt;\[\begin{align*}
  e^{ix}&amp;amp;=1+ix+\frac{(ix)^2}{2!}+\frac{(ix)^3}{3!}+\frac{(ix)^4}{4!}+\frac{(ix)^5}{5!}+\cdots\\
        &amp;amp;=1+ix-\frac{x^2}{2!}-\frac{ix^3}{3!}+\frac{x^4}{4!}+\frac{ix^5}{5!}+\cdots
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Now let's regroup the real and imaginary parts of the series:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/e336528c61ea33ff9928fef362e358ea0d3e52ce.svg" style="height: 44px;" type="image/svg+xml"&gt;\[e^{ix}=\left(1-\frac{x^2}{2!}+\frac{x^4}{4!}+\cdots\right)
+i\left(x-\frac{x^3}{3!}+\frac{x^5}{5!}+\cdots\right)\]&lt;/object&gt;
&lt;p&gt;The contents of the first parenthesis is precisely the Maclaurin series expansion
of &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/562597441eed562140c81684902007f6f275c940.svg" style="height: 19px;" type="image/svg+xml"&gt;cos(x)&lt;/object&gt;, and the contents of the second parenthesis is the expansion
of &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/1f2ea8ffab8deb0e5b854a260a68b42b7eb7b048.svg" style="height: 19px;" type="image/svg+xml"&gt;sin(x)&lt;/object&gt;; therefore, we've just proven the Euler formula &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="proof-using-derivatives"&gt;
&lt;h2&gt;Proof using derivatives&lt;/h2&gt;
&lt;p&gt;Let's define &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/10196ffe9eae4b142f48f3a6a30852c5e39f8630.svg" style="height: 19px;" type="image/svg+xml"&gt;\xi(x)&lt;/object&gt; as follows:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/5b22bb50bf5f6ceec5d6f3dcd41e1b0a4ad237eb.svg" style="height: 38px;" type="image/svg+xml"&gt;\[\xi(x)=\frac{cos(x)+isin(x)}{e^{ix}}=e^{-ix}(cos(x)+isin(x))\]&lt;/object&gt;
&lt;p&gt;And compute its derivative:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/116f265e64f726d0eccc32d1c28c3d996eb76304.svg" style="height: 66px;" type="image/svg+xml"&gt;\[\begin{align*}
  \frac{d\xi(x)}{dx}&amp;amp;=e^{-ix}(-sin(x)+icos(x))-ie^{-ix}(cos(x)+isin(x))\\
  &amp;amp;=e^{-ix}(-sin(x)+icos(x))-e^{-ix}(icos(x)-sin(x))=0
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Thus, it's a constant function; what is its value? We can find &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/ce91859cf82a14e92ab96aaed0abbd7152f9f5fb.svg" style="height: 19px;" type="image/svg+xml"&gt;\xi(0)&lt;/object&gt;
easily - it's 1. Therefore, &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/7e2b6fb6c68ae16b535063e3a227c94746080406.svg" style="height: 19px;" type="image/svg+xml"&gt;\xi(x)=1&lt;/object&gt; everywhere and thus its numerator
and denominator are always equal &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/4a4e9e431da45a27bc880a8a1ca44d8b1b9bc143.svg" style="height: 12px;" type="image/svg+xml"&gt;\blacksquare&lt;/object&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="visualizing-euler-s-formula"&gt;
&lt;h2&gt;Visualizing Euler's formula&lt;/h2&gt;
&lt;p&gt;It's interesting to plot &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/835c7c5ff57a0abe89062ebc5e94c95acef69e33.svg" style="height: 15px;" type="image/svg+xml"&gt;e^{i\phi}&lt;/object&gt; to observe its behavior. In the general
case, it's very difficult to visualize functions in the complex domain because
both the input and output are two-dimensional; so we'd need a 4D plot. Luckily
for us, we're usually interested in &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/835c7c5ff57a0abe89062ebc5e94c95acef69e33.svg" style="height: 15px;" type="image/svg+xml"&gt;e^{i\phi}&lt;/object&gt; only for
&lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/8896a3aed7cce98a05251da9e29f829fc0a60dae.svg" style="height: 16px;" type="image/svg+xml"&gt;\phi\in\mathbb{R}&lt;/object&gt;, so we have 3 dimensions to deal with:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Input dimension: &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/411e715f9ab9075b0a30b4117d209921f0bc2389.svg" style="height: 16px;" type="image/svg+xml"&gt;\phi&lt;/object&gt;&lt;/li&gt;
&lt;li&gt;Output dimensions: &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/3e7d36763f50c2d5acde9f87bd8478fbe2c79bbe.svg" style="height: 20px;" type="image/svg+xml"&gt;Re(e^{i\phi})&lt;/object&gt; and &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/0ea36534dd6402c443e4b003f8218887a0422189.svg" style="height: 20px;" type="image/svg+xml"&gt;Im(e^{i\phi})&lt;/object&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="3D Plot of e^{i phi}" class="align-center" src="https://eli.thegreenplace.net/images/2024/eix-spiral.png" /&gt;
&lt;p&gt;If we isolate the two 2D plots of &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/4560241354db0347c87b3a51129d06d902a90ed5.svg" style="height: 20px;" type="image/svg+xml"&gt;f(\phi)=Re(e^{i\phi})&lt;/object&gt; as a function of
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/6893b686e59874da28d1829cacac3a51f155e4b6.svg" style="height: 20px;" type="image/svg+xml"&gt;g(\phi)=Im(e^{i\phi})&lt;/object&gt;, we get:&lt;/p&gt;
&lt;img alt="Two 2D plots separately of Re and Im" class="align-center" src="https://eli.thegreenplace.net/images/2024/phi-re-im.png" /&gt;
&lt;p&gt;This is the expected result from Euler's formula! The real part of the complex
exponent is &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/e16afa9144b2205a80c1bde56036c8cf096fdf75.svg" style="height: 19px;" type="image/svg+xml"&gt;cos(\phi)&lt;/object&gt;, while the imaginary part is &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/9cac796934ea0be2805c5f4105ff7dae42e65421.svg" style="height: 19px;" type="image/svg+xml"&gt;sin(\phi)&lt;/object&gt;.&lt;/p&gt;
&lt;p&gt;Finally, let's plot the projection of the 3D plot onto the real+imaginary axes:&lt;/p&gt;
&lt;img alt="Plotting e^{i phi} as projection on the re+im axes, unit circle" class="align-center" src="https://eli.thegreenplace.net/images/2024/unit-circle.png" /&gt;
&lt;p&gt;It hopefully comes as no surprise that we get the unit circle! This is another
way to demonstrate the beautiful connection between the trigonometric functions
and circles. If you imagine a point moving along the unit circle
counter-clockwise, this point's &lt;em&gt;Re&lt;/em&gt; value will be &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/e16afa9144b2205a80c1bde56036c8cf096fdf75.svg" style="height: 19px;" type="image/svg+xml"&gt;cos(\phi)&lt;/object&gt; where
&lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/411e715f9ab9075b0a30b4117d209921f0bc2389.svg" style="height: 16px;" type="image/svg+xml"&gt;\phi&lt;/object&gt; is its angle from the &lt;em&gt;Re&lt;/em&gt; axis, and its &lt;em&gt;Im&lt;/em&gt; value will be
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/9cac796934ea0be2805c5f4105ff7dae42e65421.svg" style="height: 19px;" type="image/svg+xml"&gt;sin(\phi)&lt;/object&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="euler-s-identity"&gt;
&lt;h2&gt;Euler's identity&lt;/h2&gt;
&lt;p&gt;Euler's famous identity ties the &amp;quot;five fundamental constants of mathematics&amp;quot;
together:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/26cc6b1c790a7db2144e4f5948158479292c55e6.svg" style="height: 19px;" type="image/svg+xml"&gt;\[e^{i\pi}+1=0\]&lt;/object&gt;
&lt;p&gt;This identity is trivial to derive from the Euler formula, because:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/168aa576bd1a872a6fc10c796b647144237931ce.svg" style="height: 22px;" type="image/svg+xml"&gt;\[e^{i\pi}=cos(\pi)+i sin(\pi)=-1\]&lt;/object&gt;
&lt;/div&gt;
&lt;div class="section" id="de-moivre-formula"&gt;
&lt;h2&gt;De Moivre formula&lt;/h2&gt;
&lt;p&gt;Let's take the complex exponent &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/0e85a3c21a84f33aef16ee284c5a954b3c90c2ef.svg" style="height: 15px;" type="image/svg+xml"&gt;e^{ix}&lt;/object&gt; and raise it to the n-th power,
where &lt;em&gt;n&lt;/em&gt; is an integer:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/e159517d90bc55d4ca93f3e149ec573a0d609c76.svg" style="height: 22px;" type="image/svg+xml"&gt;\[(e^{ix})^n=e^{inx}\]&lt;/object&gt;
&lt;p&gt;We can replace the complex exponent by its trigonometric equivalent using
Euler's formula on both sides:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/96194ade4d0676d1b88fb7a030ebb4204615a1bb.svg" style="height: 19px;" type="image/svg+xml"&gt;\[(cos(x) +isin(x))^n=cos(nx)+isin(nx)\]&lt;/object&gt;
&lt;p&gt;This is &lt;a class="reference external" href="https://en.wikipedia.org/wiki/De_Moivre%27s_formula"&gt;De Moivre's Formula&lt;/a&gt;,
which is extremely useful in calculations involving complex numbers, and is a
treasure trove of trigonometric identities.&lt;/p&gt;
&lt;p&gt;An alternative formulation of the De Moivre formula uses fractional powers
and is useful for finding the roots of complex numbers. However, we have to
be careful here, because the complex root function (just like its real
counterpart!) is &lt;em&gt;multi-valued&lt;/em&gt;; it maps a single value in its domain to
potentially multiple values in its range &lt;a class="footnote-reference" href="#footnote-3" id="footnote-reference-3"&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This formulation says:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/fd11e3c26f7da5cc3427a955581d301125e9454b.svg" style="height: 37px;" type="image/svg+xml"&gt;\[e^{\frac{ix}{n}}=(cos(x) +isin(x))^{\frac{1}{n}}=cos(\frac{x+2\pi k}{n})+isin(\frac{x+2\pi k}{n})\]&lt;/object&gt;
&lt;p&gt;For integer &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/ad950d9a503bb8985bf9b60d02f867703eee04a6.svg" style="height: 15px;" type="image/svg+xml"&gt;$$0\leq k&amp;lt; n$$&lt;/object&gt;. This is because if we raise this number back
to the power of &lt;em&gt;n&lt;/em&gt;, we'll get back the original &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/0e85a3c21a84f33aef16ee284c5a954b3c90c2ef.svg" style="height: 15px;" type="image/svg+xml"&gt;e^{ix}&lt;/object&gt; for any of
these &lt;em&gt;k&lt;/em&gt; (both sine and cosine are periodic with a period of &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/0833718ca4569f36e84dbdc7742eaec65e49b150.svg" style="height: 12px;" type="image/svg+xml"&gt;2\pi&lt;/object&gt;).&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;In other words, multiplying by a complex number combines a
&lt;em&gt;scaling&lt;/em&gt; and &lt;em&gt;rotation&lt;/em&gt; operations. Multiplying any &lt;em&gt;z&lt;/em&gt; by
&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/498a8152700d478a53607b91f0940c6b8fa0a1fb.svg" style="height: 12px;" type="image/svg+xml"&gt;r\angle \theta&lt;/object&gt; scales (multiplies) z's magnitude by
&lt;em&gt;r&lt;/em&gt; and rotates it (counter-clockwise) by angle &lt;img alt="\theta" class="valign-0" src="https://eli.thegreenplace.net/images/math/cb005d76f9f2e394a770c2562c2e150a413b3216.png" style="height: 12px;" /&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I've seen places that treat this as
the &lt;em&gt;definition&lt;/em&gt; of what a complex exponential means, rather than
a proof.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;And thus isn't strictly a function at all, if we want to put our
abstract algebra hat on.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Math"></category></entry><entry><title>SentencePiece BPE Tokenizer in Go</title><link href="https://eli.thegreenplace.net/2024/sentencepiece-bpe-tokenizer-in-go/" rel="alternate"></link><published>2024-08-23T10:35:00-07:00</published><updated>2024-08-23T17:39:54-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-08-23:/2024/sentencepiece-bpe-tokenizer-in-go/</id><summary type="html">&lt;p&gt;Earlier this year I wrote a &lt;a class="reference external" href="https://eli.thegreenplace.net/2024/tokens-for-llms-byte-pair-encoding-in-go/"&gt;post about implementing BPE tokenization in Go&lt;/a&gt;,
which made it possible to reproduce OpenAI's tokenizer.&lt;/p&gt;
&lt;p&gt;Today I want to mention a new project I've been hacking on recently:
&lt;a class="reference external" href="https://github.com/eliben/go-sentencepiece"&gt;go-sentencepiece&lt;/a&gt;
- a pure Go implementation of the &lt;a class="reference external" href="https://github.com/google/sentencepiece"&gt;SentencePiece&lt;/a&gt; tokenizer
that's used for Google AI's models like â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Earlier this year I wrote a &lt;a class="reference external" href="https://eli.thegreenplace.net/2024/tokens-for-llms-byte-pair-encoding-in-go/"&gt;post about implementing BPE tokenization in Go&lt;/a&gt;,
which made it possible to reproduce OpenAI's tokenizer.&lt;/p&gt;
&lt;p&gt;Today I want to mention a new project I've been hacking on recently:
&lt;a class="reference external" href="https://github.com/eliben/go-sentencepiece"&gt;go-sentencepiece&lt;/a&gt;
- a pure Go implementation of the &lt;a class="reference external" href="https://github.com/google/sentencepiece"&gt;SentencePiece&lt;/a&gt; tokenizer
that's used for Google AI's models like Gemma and Gemini. SentencePiece has
a canonical C++ implementation and Python bindings (using SWIG).
While it's not too hard to wrap the C++ code with cgo, in some cases a C
compiler dependency isn't desirable, so a pure Go solution may be useful. This
is what &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-sentencepiece&lt;/span&gt;&lt;/tt&gt; is for.&lt;/p&gt;
&lt;p&gt;A disclaimer: while SentencePiece contains implementations for both BPE and
Unigram tokenizers, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-sentencepiece&lt;/span&gt;&lt;/tt&gt; only implements BPE because this is the
one use in practice by models. Also, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-sentencepiece&lt;/span&gt;&lt;/tt&gt; doesn't implement the
training phase of the tokenizer, only encoding &amp;amp; decoding. For training,
feel free to review my &lt;a class="reference external" href="https://eli.thegreenplace.net/2024/tokens-for-llms-byte-pair-encoding-in-go/"&gt;previous post&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="Screenshot of tokenizer with a sample text, showing tokens" class="align-center" src="https://eli.thegreenplace.net/images/2024/sp-tok-screenshot.png" /&gt;
&lt;p&gt;There are a couple of ways in which SentencePiece works differently from
OpenAI's variant of BPE:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The text is not pre-split by whitespace using a regexp; instead, whitespace
is considered just another part of the input and has its own tokens. You
can even see it in the screenshot above - it's marked by the &amp;quot;fat underscore&amp;quot;
character (U+2581). While single-space runes are usually part of the next
non-space token, multi-space tokens exist as distinct tokens.&lt;/li&gt;
&lt;li&gt;Instead of being configured by just a vocabulary and a regexp, SentencePiece
tokenizers have a whole protobuf for configuration, with many options.
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-sentencepiece&lt;/span&gt;&lt;/tt&gt; only supports the set of options used for Google AI's
models, but more can be added easily.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The whitespace difference turns out to play a crucial role in performance. My
&lt;a class="reference external" href="https://eli.thegreenplace.net/2024/tokens-for-llms-byte-pair-encoding-in-go/"&gt;original BPE implementation&lt;/a&gt;
was fairly naive, using simple quadratic algorithms for encoding; this was OK,
because these algorithms were working on one word at a time, so the N was very
small.&lt;/p&gt;
&lt;p&gt;This is no longer sufficient for SentencePiece, however, since the length
of the full text is N. Therefore, the implementation adopts some more sophisticated
algorithms from the C++ SentencePiece codebase; in particular:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To match a prefix of a long string from a set of candidates, we use a trie
data structure. The &lt;a class="reference external" href="https://github.com/eliben/go-sentencepiece/tree/main/internal/prefixmatcher"&gt;prefixmatcher&lt;/a&gt;
package implements this and may be generally interesting.&lt;/li&gt;
&lt;li&gt;To figure out which pair of tokens to try merging next, we use a heap-based
priority queue; this is implemented in the generic &lt;a class="reference external" href="https://github.com/eliben/go-sentencepiece/tree/main/internal/priorityqueue"&gt;priorityqueue&lt;/a&gt;
package.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I didn't spend much time in micro-optimizing the
implementation, these algorithmic improvements sped up the encoder by about 100x
compared to a naive approach, and it's now so fast that I don't think it will
ever be a bottleneck in reality.&lt;/p&gt;
&lt;div class="section" id="config-and-set-up"&gt;
&lt;h2&gt;Config and set up&lt;/h2&gt;
&lt;p&gt;As mentioned earlier, SentencePiece is configurable with a protobuf file. There
are two parts to this: first is a &lt;tt class="docutils literal"&gt;.proto&lt;/tt&gt; file defining the schema of
the protobuf. This is &lt;a class="reference external" href="https://github.com/eliben/go-sentencepiece/blob/main/internal/model/sentencepiece_model.proto"&gt;vendored into my repository&lt;/a&gt;,
copied from the C++ SentencePiece repository. The &lt;tt class="docutils literal"&gt;.pb.go&lt;/tt&gt; file is also in the
tree so you don't need to run the protobuf compiler unless the &lt;tt class="docutils literal"&gt;.proto&lt;/tt&gt;
changes.&lt;/p&gt;
&lt;p&gt;The second part is the protobuf itself, which contains the tokenizer vocabulary
and a bunch of configuration options. This can be downloaded from the
&lt;a class="reference external" href="https://github.com/google/gemma_pytorch/blob/main/tokenizer/tokenizer.model"&gt;official Gemma repository&lt;/a&gt;.
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-sentencepiece&lt;/span&gt;&lt;/tt&gt; should be able to load this file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="online-demo"&gt;
&lt;h2&gt;Online demo&lt;/h2&gt;
&lt;p&gt;As before, I've implemented an online demo of this tokenizer by compiling it
into WebAssembly and adding some HTML+JS scaffolding around it. This is where
the screenshot above is from.&lt;/p&gt;
&lt;p&gt;You can play with it here: &lt;a class="reference external" href="https://eliben.github.io/go-sentencepiece/"&gt;https://eliben.github.io/go-sentencepiece/&lt;/a&gt; (the
model protobuf is quite big though, so this page may take a few seconds to load
if you have a slow connection).&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Go"></category><category term="Machine Learning"></category><category term="WebAssembly"></category></entry><entry><title>Building static binaries with Go on Linux</title><link href="https://eli.thegreenplace.net/2024/building-static-binaries-with-go-on-linux/" rel="alternate"></link><published>2024-07-30T14:35:00-07:00</published><updated>2024-07-30T21:35:34-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-07-30:/2024/building-static-binaries-with-go-on-linux/</id><summary type="html">&lt;p&gt;One of Go's advantages is being able to produce statically-linked
binaries &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;. This doesn't mean that Go always produces such binaries by default,
however; in some scenarios it requires extra work to make this happen.
Specifics here are OS-dependent; here we focus on Unix systems.&lt;/p&gt;
&lt;div class="section" id="basics-hello-world"&gt;
&lt;h2&gt;Basics - hello world&lt;/h2&gt;
&lt;p&gt;This post â€¦&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;One of Go's advantages is being able to produce statically-linked
binaries &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;. This doesn't mean that Go always produces such binaries by default,
however; in some scenarios it requires extra work to make this happen.
Specifics here are OS-dependent; here we focus on Unix systems.&lt;/p&gt;
&lt;div class="section" id="basics-hello-world"&gt;
&lt;h2&gt;Basics - hello world&lt;/h2&gt;
&lt;p&gt;This post goes over a series of experiments: we take simple programs and use
&lt;tt class="docutils literal"&gt;go build&lt;/tt&gt; to produce binaries on a Linux machine. We then examine whether
the produced binary is statically or dynamically linked. The first example is
a simple &amp;quot;hello, world&amp;quot;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After building it with &lt;tt class="docutils literal"&gt;go build&lt;/tt&gt;, we get a binary. There are a few ways on
Linux to determine whether a binary is statically or dynamically linked. One
is the &lt;tt class="docutils literal"&gt;file&lt;/tt&gt; tool:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ file ./helloworld
helloworld: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, Go BuildID=Flm7stIXKLPfvBhTgXmR/PPwdjFUEkc9NCSPRC7io/PofU_qoulSqJ0Ktvgx5g/eQXbAL15zCEIXOBSPZgY, with debug_info, not stripped
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see it says &amp;quot;statically linked&amp;quot;. Another way is to use &lt;tt class="docutils literal"&gt;ldd&lt;/tt&gt;, which
prints the shared object dependencies of a given binary:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ldd ./helloworld
  not a dynamic executable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, we can also use the ubiquitous &lt;tt class="docutils literal"&gt;nm&lt;/tt&gt; tool, asking it to list the
undefined symbols in a binary (these are symbols the binary expects the dynamic
linker to provide at run-time from shared objects):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nm -u ./helloworld
&amp;lt;empty output&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of these tell us that a simple &lt;tt class="docutils literal"&gt;helloworld&lt;/tt&gt; is a statically-linked binary.
Throughout the post I'll mostly be using &lt;tt class="docutils literal"&gt;ldd&lt;/tt&gt; (out of habit), but you can
use any approach you like.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dns-and-user-groups"&gt;
&lt;h2&gt;DNS and user groups&lt;/h2&gt;
&lt;p&gt;There are two pieces of functionality the Go standard library defers to the
system's &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt; on Unix machines, when some conditions are met. When cgo
is enabled (as it often - but not always - is on Unix machines), Go will call
the C library for DNS lookups in the &lt;tt class="docutils literal"&gt;net&lt;/tt&gt; package and for user and group
ID lookups in the &lt;tt class="docutils literal"&gt;os/user&lt;/tt&gt; package.&lt;/p&gt;
&lt;p&gt;Let's observe this with an experiment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;net&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LookupHost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;go.dev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we build this program, we notice it's &lt;em&gt;dynamically&lt;/em&gt; linked, expecting to
load a &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt; shared object at run-time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go build lookuphost.go
$ ldd ./lookuphost
  linux-vdso.so.1 (0x00007b50cb22a000)
  libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007b50cae00000)
  /lib64/ld-linux-x86-64.so.2 (0x00007b50cb22c000)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is explained in the &lt;a class="reference external" href="https://pkg.go.dev/net#hdr-Name_Resolution"&gt;net package documentation&lt;/a&gt; in some detail. The Go
standard library does have a pure Go implementation of this functionality
(although it may lack some advanced features). We can ask the toolchain to use
it in a couple of ways. First, we can set the &lt;tt class="docutils literal"&gt;netgo&lt;/tt&gt; build tag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go build -tags netgo lookuphost.go
$ ldd ./lookuphost
  not a dynamic executable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, we can disable cgo entirely with the &lt;tt class="docutils literal"&gt;CGO_ENABLED&lt;/tt&gt; env var. This env
var is usually on by default on Unix systems:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go env CGO_ENABLED
1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we disable it explicitly for our build, we'll get a static binary again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ CGO_ENABLED=0 go build lookuphost.go
$ ldd ./lookuphost
  not a dynamic executable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, some of the functionality of the &lt;tt class="docutils literal"&gt;os/user&lt;/tt&gt; package uses &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt;
by default. Here's an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;encoding/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;os/user&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;je&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;je&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces a dynamically-linked binary:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go build userlookup.go
$ ldd ./userlookup
  linux-vdso.so.1 (0x0000708301084000)
  libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x0000708300e00000)
  /lib64/ld-linux-x86-64.so.2 (0x0000708301086000)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As with &lt;tt class="docutils literal"&gt;net&lt;/tt&gt;, we can ask the Go toolchain to use the pure Go implementation
of this user lookup functionality. The build tag for this is &lt;tt class="docutils literal"&gt;osusergo&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go build -tags osusergo userlookup.go
$ ldd ./userlookup
  not a dynamic executable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, we can disable cgo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ CGO_ENABLED=0 go build userlookup.go
$ ldd ./userlookup
  not a dynamic executable
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="linking-c-into-our-go-binary"&gt;
&lt;h2&gt;Linking C into our go binary&lt;/h2&gt;
&lt;p&gt;We've seen that the standard library has some functionality that may require
dynamic linking by default, but this is relatively easy to override. What
happens when we actually have C code as part of our Go program, though?&lt;/p&gt;
&lt;p&gt;Go supports C extensions and FFI using &lt;a class="reference external" href="https://pkg.go.dev/cmd/cgo"&gt;cgo&lt;/a&gt;.
For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// #include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// void helloworld() {&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//   printf(&amp;quot;hello, world from C\n&amp;quot;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;helloworld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A program built from this source will be dynamically linked, due to cgo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go build cstdio.go
$ ldd ./cstdio
  linux-vdso.so.1 (0x00007bc6d68e3000)
  libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007bc6d6600000)
  /lib64/ld-linux-x86-64.so.2 (0x00007bc6d68e5000)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In our C code, &lt;tt class="docutils literal"&gt;printf&lt;/tt&gt; is a call to &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt;; even if we don't explicitly
call into the C runtime in our C code, cgo may do it in the scaffolding code
it generates.&lt;/p&gt;
&lt;p&gt;Note that cgo may be involved even if your project has no C code of its own;
several dependencies may bring in cgo. Some popular packages - like the
&lt;a class="reference external" href="https://pkg.go.dev/github.com/mattn/go-sqlite3"&gt;go-sqlite3&lt;/a&gt; driver - depend
on cgo, and importing them will impose a cgo requirement on a program.&lt;/p&gt;
&lt;p&gt;Obviously, building with &lt;tt class="docutils literal"&gt;CGO_ENABLED=0&lt;/tt&gt; is no longer an option.
So what's the recourse?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linking-a-libc-statically"&gt;
&lt;h2&gt;Linking a &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt; statically&lt;/h2&gt;
&lt;p&gt;To recap, once we have C code as part of our Go binary, it's going to be
dynamically linked on Unix, because:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The C code calls into &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt; (the C runtime)&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt; typically used on Unix systems is &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Glibc"&gt;glibc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The recommended way to link to &lt;tt class="docutils literal"&gt;glibc&lt;/tt&gt; is dynamically (for various
technical and license-related reasons that are outside the scope of this
post)&lt;/li&gt;
&lt;li&gt;Therefore, &lt;tt class="docutils literal"&gt;go build&lt;/tt&gt; produces dynamically-linked Go binaries&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To change this flow of events, we can interpose at step (2) - use a &lt;em&gt;different&lt;/em&gt;
&lt;tt class="docutils literal"&gt;libc&lt;/tt&gt; implementation, one that's statically linked. Luckily, such an
implementation exists and is well used and tested - &lt;a class="reference external" href="https://wiki.musl-libc.org/"&gt;musl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To follow along, start by installing musl. The standard instructions using
&lt;tt class="docutils literal"&gt;./configure &lt;span class="pre"&gt;--prefix=&amp;lt;MUSLDIR&amp;gt;&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; / &lt;tt class="docutils literal"&gt;make install&lt;/tt&gt; work well.
We'll use &lt;tt class="docutils literal"&gt;$MUSLDIR&lt;/tt&gt; to refer to the directory where musl is installed.
musl comes with a &lt;tt class="docutils literal"&gt;gcc&lt;/tt&gt; wrapper that makes it easy to pass all the right
flags. To re-build our &lt;tt class="docutils literal"&gt;cstdio&lt;/tt&gt; example using musl, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ CC=$MUSLDIR/bin/musl-gcc go build --ldflags &amp;#39;-linkmode external -extldflags &amp;quot;-static&amp;quot;&amp;#39; cstdio.go
$ ldd ./cstdio
  not a dynamic executable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;CC&lt;/tt&gt; env var tells &lt;tt class="docutils literal"&gt;go build&lt;/tt&gt; which C compiler to use for cgo; the
linker flags instruct it to use an external linker for the final build
(&lt;a class="reference external" href="https://cs.opensource.google/go/go/+/refs/tags/go1.22.0:src/cmd/cgo/doc.go;l=830"&gt;read this for the gory details&lt;/a&gt;)
and then to perform a static link.&lt;/p&gt;
&lt;p&gt;This approach works for more complex use cases as well! I won't paste the code
here, but the &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2024/go-static-linking"&gt;sample repository accompanying this post&lt;/a&gt; has a file
called &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;use-sqlite.go&lt;/span&gt;&lt;/tt&gt;; it uses the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-sqlite3&lt;/span&gt;&lt;/tt&gt; package. Try
&lt;tt class="docutils literal"&gt;go build&lt;/tt&gt;-ing it normally and observe the dynamically linked binary produced;
next, try to build it with the flags shown above to use musl, and observe
that the produced binary will be statically linked.&lt;/p&gt;
&lt;p&gt;Another curious tidbit is that we now have another way to build a statically-linked
&lt;tt class="docutils literal"&gt;lookuphost&lt;/tt&gt; program - by linking it with musl:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ CC=$MUSLDIR/bin/musl-gcc go build --ldflags &amp;#39;-linkmode external -extldflags &amp;quot;-static&amp;quot;&amp;#39; lookuphost.go
$ ldd ./lookuphost
  not a dynamic executable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we didn't provide &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-tags&lt;/span&gt; netgo&lt;/tt&gt; and didn't disable cgo, the Go toolchain
uses calls into &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt; to implement DNS lookup; however, since these calls
end up in the statically-linked musl, the final binary is statically linked!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-zig-as-our-c-compiler"&gt;
&lt;h2&gt;Using Zig as our C compiler&lt;/h2&gt;
&lt;p&gt;Another alternative emerged recently to achieve what we want: using the Zig
toolchain. &lt;a class="reference external" href="https://ziglang.org/"&gt;Zig&lt;/a&gt; is a new systems programming language,
which uses a bundled toolchain approach similar to Go. Its toolchain bundles
together a Zig compiler, C/C++ compiler, linker and &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt; for static linking.
Therefore, Zig can actually be used to link Go binaries statically with C code!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Instead&lt;/em&gt; of installing musl, we could instead install Zig and use its
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;x86_64-linux-musl&lt;/span&gt;&lt;/tt&gt; target (adjust the architecture if needed). This is
done by pointing to the &lt;tt class="docutils literal"&gt;zig&lt;/tt&gt; binary as our &lt;tt class="docutils literal"&gt;CC=&lt;/tt&gt; env var; assuming Zig
is installed in &lt;tt class="docutils literal"&gt;$ZIGDIR&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ CC=&amp;quot;$ZIGDIR/zig cc -target x86_64-linux-musl&amp;quot; go build cstdio.go
$ CC=&amp;quot;$ZIGDIR/zig cc -target x86_64-linux-musl&amp;quot; go build use-sqlite.go
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These will produce statically-linked Go binaries; the &lt;tt class="docutils literal"&gt;zig&lt;/tt&gt; driver takes
care of setting the right linker flags automatically, so the command-line ends
up being slightly simpler than invoking &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;musl-gcc&lt;/span&gt;&lt;/tt&gt;. Another advantage of Zig
here is that enables cross-compilation of Go programs that include C code &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I did find some issues with this approach, however; for example, attempting to
link the &lt;tt class="docutils literal"&gt;lookuphost.go&lt;/tt&gt; sample fails with a slew of linker errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Making sure Go produces a statically-linked binary on Linux takes a little
bit of effort, but works well overall.&lt;/p&gt;
&lt;p&gt;There's a &lt;a class="reference external" href="https://github.com/golang/go/issues/26492"&gt;long standing accepted proposal&lt;/a&gt;
about adding a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-static&lt;/span&gt;&lt;/tt&gt; flag to &lt;tt class="docutils literal"&gt;go build&lt;/tt&gt; that would take care of setting
up all the flags required for a static build. AFAICT, the proposal is just
waiting for someone with enough grit and dedication to implement and test it
in all the interesting scenarios.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="code"&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;The code for all the experiments described in this post
&lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2024/go-static-linking"&gt;is available on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;A &lt;em&gt;statically-linked&lt;/em&gt; binary doesn't have run-time dependencies on
other libraries (typically in the form of shared objects), not even
the C runtime library (&lt;tt class="docutils literal"&gt;libc&lt;/tt&gt;). I wrote much more about this topic
&lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/13/how-statically-linked-programs-run-on-linux"&gt;in the past&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Go is well-known for its cross-compilation capabilities, but it
depends on the C toolchain to compile C code. Therefore, when cgo is
involved, cross-compilation is challenging. Zig can help with this
because &lt;em&gt;its&lt;/em&gt; toolchain supports cross compilation for Zig &lt;em&gt;and&lt;/em&gt; C! It
does so by bundling LLVM with a bunch of targets linked in.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Go"></category><category term="Compilation"></category><category term="Linkers and Loaders"></category><category term="Linux"></category></entry></feed>