<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Franklin</title>
  <subtitle></subtitle>
  <link href="https://www.jackfranklin.co.uk/feed.xml" rel="self"/>
  <link href="http://www.jackfranklin.co.uk"/>
  <updated>2024-04-08T00:00:00+00:00</updated>
  <id>https://www.jackfranklin.co.uk/</id>
  <author>
    <name>Jack Franklin</name>
    <email>jack@jackfranklin.net</email>
  </author>
  
  <entry>
    <title>Using objects in jQuery&#39;s .css()</title>
    <link href="http://www.jackfranklin.co.uk/blog/using-objects-in-jquerys-css/"/>
    <updated>2012-04-06T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/using-objects-in-jquerys-css/</id>
    <content type="html">&lt;p&gt;Something I will be focusing on on a regular basis here at JSP is producing tidy code that&#39;s easier to maintain in the future as well as nicer to work with. One such area where people often produce messy code is when using jQuery&#39;s &lt;code&gt;.css()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Basic usage of this goes like so:&lt;/p&gt;
&lt;p&gt;$(elem).css(&amp;quot;display&amp;quot;); //returns value
$(elem).css(&amp;quot;display&amp;quot;, &amp;quot;block&amp;quot;); //sets value&lt;/p&gt;
&lt;p&gt;And in order to set multiple values, people will often do this:&lt;/p&gt;
&lt;p&gt;$(elem)
.css(&amp;quot;display&amp;quot;, &amp;quot;block&amp;quot;)
.css(&amp;quot;border&amp;quot;, &amp;quot;1px solid blue&amp;quot;)
.css(&amp;quot;background&amp;quot;, &amp;quot;#F00&amp;quot;)
{and so on}&lt;/p&gt;
&lt;p&gt;However this is the wrong way to do this, on so many levels. jQuery is written pretty cleverly, and &lt;code&gt;.css()&lt;/code&gt; can take an object of properties &amp;amp; their respective values:&lt;/p&gt;
&lt;p&gt;$(elem).css({
&amp;quot;border&amp;quot; : &amp;quot;1px solid blue&amp;quot;,
&amp;quot;display&amp;quot; : &amp;quot;block&amp;quot;,
&amp;quot;background&amp;quot; : &amp;quot;#F00&amp;quot;
});&lt;/p&gt;
&lt;p&gt;It&#39;s worth noting that you don&#39;t actually need the quotes around the properties (but you do around the values), this would be valid:&lt;/p&gt;
&lt;p&gt;$(elem).css({
border: &amp;quot;1px solid blue&amp;quot;,
{so on}
});&lt;/p&gt;
&lt;p&gt;However, you have to use quotes if you want to use a reserved word as a property. For example if you were creating a new element &amp;amp; setting the class attribute:&lt;/p&gt;
&lt;p&gt;$(&amp;quot;&lt;div&gt;&amp;quot;, {
class: &amp;quot;myDiv&amp;quot;
});&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;That&#39;s invalid, as &lt;code&gt;class&lt;/code&gt; is a reserved word, so you&#39;d have to do :&lt;/p&gt;
&lt;p&gt;$(&amp;quot;&lt;div&gt;&amp;quot;, {
&amp;quot;class&amp;quot; : &amp;quot;myDiv&amp;quot;
});&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Because this always trips me up, I&#39;ve simply gotten into the habit of always putting quotes around my property names in JS objects. This is more a personal preference than anything else, just pick what makes the most sense to you.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The JavaScript Module Pattern</title>
    <link href="http://www.jackfranklin.co.uk/blog/javascript-module-pattern/"/>
    <updated>2012-04-08T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/javascript-module-pattern/</id>
    <content type="html">&lt;p&gt;Lets say you&#39;ve got a little library like this, that just increments a number:&lt;/p&gt;
&lt;p&gt;var jspy = {
count: 0,&lt;/p&gt;
&lt;p&gt;incrementCount: function() {
this.count++;
},&lt;/p&gt;
&lt;p&gt;decrementCount: function() {
this.count--;
},&lt;/p&gt;
&lt;p&gt;getCount: function() {
return this.count;
}&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;However, people using this library are able to do &lt;code&gt;jspy.count = 5&lt;/code&gt; to manually adjust the value. Lets say for the purpose of this tutorial, that users should not be able to do that. In other languages you&#39;d be able to define a private variable, but JavaScript doesn&#39;t explcitly have them. However, we are able to manipulate JavaScript to provide them to us, and that brings us on nicely to one of the most popular JavaScript design patterns, the &lt;strong&gt;Module&lt;/strong&gt; or &lt;strong&gt;Modular&lt;/strong&gt; pattern.&lt;/p&gt;
&lt;p&gt;The solution to the above is:&lt;/p&gt;
&lt;p&gt;var jspy = (function() {
var _count = 0;&lt;/p&gt;
&lt;p&gt;var incrementCount = function() {
_count++;
}&lt;/p&gt;
&lt;p&gt;var getCount = function() {
return _count;
}
return {
incrementCount: incrementCount,
getCount: getCount
};&lt;/p&gt;
&lt;p&gt;})();&lt;/p&gt;
&lt;p&gt;Firstly I create the variable &lt;code&gt;_count&lt;/code&gt;, with the underscore denoting that it&#39;s private. The underscore means &lt;em&gt;nothing programmatically&lt;/em&gt; in JavaScript&#39;s case, but it&#39;s a common notation used to denote private variables, and one I like to stick to. You can then see the functions that manipulate &amp;amp; return that variable.&lt;/p&gt;
&lt;p&gt;However, you&#39;ll notice I&#39;ve wrapped the entire library in a self-invoking anonymous function. This is a function that&#39;s executed immediately at runtime. The function runs, defines the variables &amp;amp; functions and then hits the &lt;code&gt;return {}&lt;/code&gt; statement, telling this function what to return to the variable &lt;code&gt;jspy&lt;/code&gt;, or in other words, what &lt;em&gt;to expose to the user&lt;/em&gt;. I chose to expose the two functions but &lt;strong&gt;not&lt;/strong&gt; the &lt;code&gt;_count&lt;/code&gt; variable, which means I can do this:&lt;/p&gt;
&lt;p&gt;jspy.incrementCount();
jspy.getCount();&lt;/p&gt;
&lt;p&gt;But if I attempt:&lt;/p&gt;
&lt;p&gt;jspy._count; //undefined&lt;/p&gt;
&lt;p&gt;It returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are a couple of different approaches to the way I&#39;ve done things above. Some people like to define the function in the return statement:&lt;/p&gt;
&lt;p&gt;var jspy = (function() {
var _count = 0;&lt;/p&gt;
&lt;p&gt;return {
incrementCount: function() {
_count++;
},
getCount: function() {
return _count;
}
};
})();&lt;/p&gt;
&lt;p&gt;And following on from that, Christian Heilmann coined the &lt;em&gt;Revealing Module Pattern&lt;/em&gt;. His approach is to define all methods privately, that is, not in the &lt;code&gt;return&lt;/code&gt; block, but expose them there instead, like so:&lt;/p&gt;
&lt;p&gt;var jspy = (function() {
var _count = 0;
var incrementCount = function() {
_count++;
};
var resetCount = function() {
_count = 0;
};
var getCount = function() {
return _count;
};
return {
add: incrementCount,
reset: resetCount,
get: getCount
};
})();&lt;/p&gt;
&lt;p&gt;The two advantages of this are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&#39;s easier to see at a glace the methods that get exposed; when you&#39;re not defining all your methods within &lt;code&gt;return {}&lt;/code&gt; it means it&#39;s one exposed function per line, making it easier to scan.&lt;/li&gt;
&lt;li&gt;You can expose methods via shorter names (eg &lt;code&gt;add&lt;/code&gt;) but define them slightly more verbosely in your definition (eg &lt;code&gt;incrementCount&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In future tutorials we&#39;ll be looking at other types of patterns and putting these to use in a real world context. For now if you&#39;re looking for further reading, I highly recommend &lt;a href=&quot;http://addyosmani.com/resources/essentialjsdesignpatterns/book/&quot;&gt;Addy Osmani&#39;s online book, JavaScript Design Patterns&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>An introduction to jQuery Deferreds</title>
    <link href="http://www.jackfranklin.co.uk/blog/jquery-deferreds-tutorial/"/>
    <updated>2012-04-08T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/jquery-deferreds-tutorial/</id>
    <content type="html">&lt;p&gt;Prior to jQuery 1.5, Ajax requests could get a bit messy. You&#39;d probably do something like this, if we were making a simple &lt;code&gt;get&lt;/code&gt; request:&lt;/p&gt;
&lt;p&gt;$(function() {
$.get(
&amp;quot;content.txt&amp;quot;,
function(resp) {
console.log(&amp;quot;first code block&amp;quot;);
console.log(resp);
}
);&lt;/p&gt;
&lt;p&gt;});&lt;/p&gt;
&lt;p&gt;But this gives you a potential issue - what happens if this fails? What if you can&#39;t define the function to run in this code? These are issues before that have required a fair amount of work arounds but with 1.5 onwards we&#39;ve got the &lt;a href=&quot;http://api.jquery.com/category/deferred-object/&quot;&gt;jQuery Deferred Object&lt;/a&gt;. In this post I&#39;ll show you why this is so useful. All of the following code relies on &lt;strong&gt;jQuery 1.5 or higher&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;jQuery Ajax calls now return the jQuery Deferred object I linked to above. The documentation is a little overwhelming &amp;amp; not entirely clear, so don&#39;t worry if a brief look at that leaves you confused. Simply put, Ajax calls now return a jQuery object containing what&#39;s known as a &lt;a href=&quot;http://api.jquery.com/promise/&quot;&gt;promise&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The .promise() method returns a dynamically generated Promise that is resolved once all actions of a certain type bound to the collection, queued or not, have ended.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In reality whilst working with basic Ajax calls, you don&#39;t need to worry about the exact specifications or inner workings. Continuing from the &lt;code&gt;get&lt;/code&gt; example above, here&#39;s how we&#39;d implement it using jQuery&#39;s &lt;code&gt;when()&lt;/code&gt;, &lt;code&gt;then()&lt;/code&gt; and &lt;code&gt;fail()&lt;/code&gt; methods:&lt;/p&gt;
&lt;p&gt;$.when($.get(&amp;quot;content.txt&amp;quot;))
.then(function(resp) {
console.log(&amp;quot;third code block, then() call&amp;quot;);
console.log(resp);
})
.fail(function(resp) {
console.log(resp);
});&lt;/p&gt;
&lt;p&gt;It can basically be read as:&lt;/p&gt;
&lt;p&gt;$.when(some ajax request).then(do this if it succeeds).fail(or do this if it fails)&lt;/p&gt;
&lt;p&gt;The main feature of this is that &lt;code&gt;$.when()&lt;/code&gt; can take multiple functions, and will then call the functions you pass to &lt;code&gt;.then()&lt;/code&gt; once &lt;em&gt;all those functions&lt;/em&gt; have finished:&lt;/p&gt;
&lt;p&gt;$.when(fn1(), fn2()).then().fail()&lt;/p&gt;
&lt;p&gt;You still might not be able to see the main advantage of this method yet, compared to just defining the methods within an object via &lt;code&gt;$.ajax()&lt;/code&gt;. However, more importantly, we are able to &lt;em&gt;save Ajax calls to bind events later&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;var xhrreq = $.get(&amp;quot;content.txt&amp;quot;);&lt;/p&gt;
&lt;p&gt;We can then define &lt;code&gt;.success&lt;/code&gt; and &lt;code&gt;.error&lt;/code&gt; methods on this variable:&lt;/p&gt;
&lt;p&gt;xhrreq.success(function(resp) {
console.log(resp);
});&lt;/p&gt;
&lt;p&gt;And:&lt;/p&gt;
&lt;p&gt;xhrreq.error(function(resp) {
console.log(resp);
});&lt;/p&gt;
&lt;p&gt;With the main advantage here, being that we can declare many functions to run:&lt;/p&gt;
&lt;p&gt;xhrreq.success(fn1);
xhrreq.success(fn2);&lt;/p&gt;
&lt;p&gt;Or, an even easier way:&lt;/p&gt;
&lt;p&gt;xhrreq.success(fn1, fn2);&lt;/p&gt;
&lt;p&gt;So, to conclude, hopefully this article has shown you that deferreds are a much improved way to work with Ajax calls in jQuery. In the future I&#39;ll be doing follow up articles going into more depth.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>jQuery 1.7 Event Binding: .on() &amp;amp; .off()</title>
    <link href="http://www.jackfranklin.co.uk/blog/jquery-1-7-event-binding-on-and-off/"/>
    <updated>2012-04-09T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/jquery-1-7-event-binding-on-and-off/</id>
    <content type="html">&lt;p&gt;From jQuery 1.7 new methods were added for binding events, &lt;code&gt;.on()&lt;/code&gt; and &lt;code&gt;.off()&lt;/code&gt; which, unsurprisingly, does the opposite of &lt;code&gt;.on()&lt;/code&gt;. Amongst the community, there seems to have been a bit of confusion over these methods &amp;amp; in this post I want to clear this up, once &amp;amp; for all.&lt;/p&gt;
&lt;p&gt;Firstly, I&#39;m going to hit you with a rule:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;From now on, you should use &lt;code&gt;.on()&lt;/code&gt; and &lt;code&gt;.off()&lt;/code&gt; for all your event binding in jQuery.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You actually will be doing this, whether you like it or not, if you&#39;re using jQuery 1.7+. If you take a look at the source for &lt;code&gt;.click()&lt;/code&gt;, you can see it actually just calls &lt;code&gt;.on()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;function (data, fn) {
if (fn == null) {
fn = data;
data = null;
}&lt;/p&gt;
&lt;p&gt;return arguments.length &amp;gt; 0 ? this.on(name, null, data, fn) : this.trigger(name);
}&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For looking at the jQuery source I really like James Padolsey&#39;s &lt;a href=&quot;http://james.padolsey.com/jquery/#v=git&quot;&gt;jQuery source viewer&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It won&#39;t surprise you to know that all the other methods like &lt;code&gt;.bind()&lt;/code&gt;, &lt;code&gt;.delegate()&lt;/code&gt; and so on all internally use &lt;code&gt;.on()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the most basic form, this is how we&#39;d assign a click handler now:&lt;/p&gt;
&lt;p&gt;$(elem).on(&amp;quot;click&amp;quot;, function() {
console.log(&amp;quot;clicked&amp;quot;);
});&lt;/p&gt;
&lt;p&gt;The preferred way now of binding events is through &lt;em&gt;delegation&lt;/em&gt;. The idea of delegating is that you delegate an event to a parent, and then every time it detects that event, it looks to see if the item clicked on is what we want, and then it triggers that event. This is perhaps easier to see in an example:&lt;/p&gt;
&lt;p&gt;$(&amp;quot;table&amp;quot;).on(&amp;quot;click&amp;quot;, &amp;quot;tr&amp;quot;, function() {
console.log(&amp;quot;tr inside table clicked&amp;quot;);
});&lt;/p&gt;
&lt;p&gt;The advantage of this is that it&#39;s much easier work for the browser to bind one click event to one item, and then run a conditional every time that event fires, compared to binding a click event to every single &lt;code&gt;tr&lt;/code&gt;. Essentially, with delegate, the process for the above code goes like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bind 1 click event to &lt;code&gt;table&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Detected a click event on &lt;code&gt;table&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Was that click event on a &lt;code&gt;tr&lt;/code&gt; ?&lt;/li&gt;
&lt;li&gt;If so, fire the function.&lt;/li&gt;
&lt;li&gt;If not, do nothing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The final question you might be wondering is how we convert &lt;code&gt;.live()&lt;/code&gt; events to &lt;code&gt;.on()&lt;/code&gt; ? For those who are not familiar with &lt;code&gt;.live()&lt;/code&gt;, it allowed you to bind an event to a selector and have that event still bound to elements you programmatically inserted into the page &lt;em&gt;after&lt;/em&gt; the event binding.&lt;/p&gt;
&lt;p&gt;The solution is to use &lt;code&gt;.on()&lt;/code&gt; &amp;amp; delegation. Taking our &lt;code&gt;$(&amp;quot;table&amp;quot;).on()&lt;/code&gt; example from above, this would still fire click events on &lt;code&gt;tr&lt;/code&gt; items, even if those &lt;code&gt;tr&lt;/code&gt; items had been dynamically inserted by our code.&lt;/p&gt;
&lt;p&gt;Events can be removed with &lt;code&gt;.off()&lt;/code&gt;, for example:
$(&amp;quot;p&amp;quot;).off();
&lt;code&gt;.off()&lt;/code&gt; is actually pretty clever in the way it works, again the &lt;a href=&quot;http://api.jquery.com/off/&quot;&gt;jQuery docs&lt;/a&gt; offer a good overview. Personally I only want to briefly mention it here, as I don&#39;t think it&#39;s something I&#39;ve ever used in practice.&lt;/p&gt;
&lt;p&gt;That concludes our brief look into &lt;code&gt;.on()&lt;/code&gt;. From jQuery 1.7 onwards &lt;code&gt;.bind()&lt;/code&gt;, &lt;code&gt;.live()&lt;/code&gt; &amp;amp; &lt;code&gt;.delegate()&lt;/code&gt; are all &lt;strong&gt;deprecated&lt;/strong&gt; and I would encourage you to use the new APIs available to use, as &lt;code&gt;.on()&lt;/code&gt; is a far superior method in my opinion.&lt;/p&gt;
&lt;p&gt;For more, I suggest you read the &lt;a href=&quot;http://api.jquery.com/on/&quot;&gt;jQuery documentation for &lt;code&gt;.on()&lt;/code&gt;&lt;/a&gt; as it is a very comprehensive read.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JS WTF: 5 &amp;lt; 4 &amp;lt; 3</title>
    <link href="http://www.jackfranklin.co.uk/blog/js-wtf/"/>
    <updated>2012-04-10T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/js-wtf/</id>
    <content type="html">&lt;p&gt;A quick fun &amp;quot;JS WTF?&amp;quot; post for you today. If you load up your JavaScript console &amp;amp; enter:&lt;/p&gt;
&lt;p&gt;5 &amp;lt; 4 &amp;lt; 3&lt;/p&gt;
&lt;p&gt;You&#39;d be expecting to see &lt;code&gt;false&lt;/code&gt;, right? However, you&#39;ll actually see &lt;code&gt;true&lt;/code&gt;. &lt;strong&gt;WTF?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is actually down to the way JavaScript evaluates this and &lt;em&gt;operator precedence&lt;/em&gt;. What it sees is:&lt;/p&gt;
&lt;p&gt;(5 &amp;lt; 4) &amp;lt; 3&lt;/p&gt;
&lt;p&gt;Which in turn gives&lt;/p&gt;
&lt;p&gt;false &amp;lt; 3&lt;/p&gt;
&lt;p&gt;JavaScript then coerces &lt;code&gt;false&lt;/code&gt; into an integer &lt;code&gt;0&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;0 &amp;lt; 3&lt;/p&gt;
&lt;p&gt;And zero is indeed less than 3, so we get &lt;code&gt;true&lt;/code&gt; returned.&lt;/p&gt;
&lt;p&gt;Not much learned from this one but it&#39;s quite a fun thing to show someone &amp;amp; then explain why. I&#39;ll be trying to do a lot of these small &amp;quot;fun&amp;quot; posts as there&#39;s a fair few areas of &amp;quot;WTF?&amp;quot; in JavaScript, as we all know.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A jQuery Pub Sub Implementation</title>
    <link href="http://www.jackfranklin.co.uk/blog/a-jquery-pub-sub-implementation/"/>
    <updated>2012-04-12T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/a-jquery-pub-sub-implementation/</id>
    <content type="html">&lt;p&gt;Having &lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/javascript-module-pattern&quot;&gt;discussed the Module pattern&lt;/a&gt; briefly a few days ago, today I want to tackle another pattern, the Pub Sub (or &lt;em&gt;Publish&lt;/em&gt; and &lt;em&gt;Subscribe&lt;/em&gt;) pattern, also known as the Observer Pattern. If you&#39;ve not heard of this implementation, it&#39;s pretty straight forward. It allows different aspects of your application, usually called &lt;em&gt;modules&lt;/em&gt;, to both subscribe to events other modules might publish, &amp;amp; publish events itself. This means no two modules of your system are directly linked, as each module just relies on events to know what to do &amp;amp; when to do it. In the future we&#39;ll look into this pattern using plain JavaScript, but as an introduction to it it makes sense to use jQuery, a framework that allows us to publish &amp;amp; subscribe to events really easily, using &lt;code&gt;.on()&lt;/code&gt; &lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/jquery-1-7-event-binding-on-and-off&quot;&gt;which I covered very recently on this very blog&lt;/a&gt; and then &lt;code&gt;.trigger()&lt;/code&gt;, which lets us trigger events. Most people will use this to trigger events like &lt;code&gt;click&lt;/code&gt; or &lt;code&gt;submit&lt;/code&gt;, but did you know you can use it to trigger your own, custom events? It&#39;s this functionality we will use today.&lt;/p&gt;
&lt;p&gt;The app we will be building is very simple, it&#39;s a little app that lets you send messages to yourself. Of course, this is very, very easy (it&#39;s a bit of DOM manipulation) but the app is split up into 3 parts which lets me nicely demonstrate some of the PubSub ideas. The app can be seen on the &lt;a href=&quot;http://javascriptplayground.com/demos/jquerypubsub/&quot;&gt;online demo here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are three key parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User sends a message via the form,&lt;/li&gt;
&lt;li&gt;message is shown on the right panel,&lt;/li&gt;
&lt;li&gt;flash notice displays on top of screen to notify user.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The source code for this is all available on Github so for the purposes of this tutorial I wont talk at all about the (tiny) bit of CSS I&#39;ve done or even the HTML, it will focus purely on the JavaScript. All you need to know really is that I&#39;ve got a &lt;code&gt;div#flash&lt;/code&gt; for the flash message, a &lt;code&gt;form&lt;/code&gt; for sending a message and that each message is displayed as a &lt;code&gt;li&lt;/code&gt; inside a &lt;code&gt;ul&lt;/code&gt;. All of our code will go inside a JavaScript object I&#39;m going to call &lt;code&gt;pubsub&lt;/code&gt;, although in real life it would most likely be called something more relevant to your app:&lt;/p&gt;
&lt;p&gt;var pubsub = {&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;Firstly, lets tackle what happens when a user submits the form. We can use jQuery&#39;s &lt;code&gt;submit&lt;/code&gt; event to hijack the event &amp;amp; prevent the default action easily enough:&lt;/p&gt;
&lt;p&gt;$(&amp;quot;form&amp;quot;).on(&amp;quot;submit&amp;quot;, function() {
return false;
});&lt;/p&gt;
&lt;p&gt;Then I&#39;m going to want to call my method for dealing with this event. In practise, each module would probably have its own namespace and have its events in there, such as:&lt;/p&gt;
&lt;p&gt;pubsub.messages.send
pubsub.messages.receive
pubsub.flash.show
pubsub.flash.hide&lt;/p&gt;
&lt;p&gt;But as we have only 3 events, I&#39;m going to keep them in the main &lt;code&gt;pubsub&lt;/code&gt; namespace. So lets create our event for the sending of a message. Within our &lt;code&gt;pubsub&lt;/code&gt; object, add this method:&lt;/p&gt;
&lt;p&gt;sendMessage: function() {
var message = $(&amp;quot;input&amp;quot;).val();
$(&amp;quot;body&amp;quot;).trigger(&amp;quot;messageReceived&amp;quot;, { message: message});
return false;
}&lt;/p&gt;
&lt;p&gt;Notice how with &lt;code&gt;.trigger()&lt;/code&gt; we can send extra data through as the second parameter, so this makes it easy to send custom data with our custom events. You may have realised, but as part of our system we&#39;re going to need to bind our functions to regular DOM events, such as the form &lt;code&gt;submit&lt;/code&gt; event. I decided, as there&#39;s very few, to create a new method within &lt;code&gt;pubsub&lt;/code&gt;, called &lt;code&gt;bindEvents()&lt;/code&gt; that will do that for me. Here&#39;s the code for all the events we need:&lt;/p&gt;
&lt;p&gt;bindEvents: function() {
$(&amp;quot;form&amp;quot;).on(&amp;quot;submit&amp;quot;,function() {
pubsub.sendMessage();
return false;
});
$(&amp;quot;body&amp;quot;).on(&amp;quot;messageReceived&amp;quot;, function(event,data) {
pubsub.displayMessage(data);
});
$(&amp;quot;body&amp;quot;).on(&amp;quot;messageDisplayed&amp;quot;, function(event, data) {
pubsub.flashMessage();
});
}&lt;/p&gt;
&lt;p&gt;Note that when we pass data through an event, like we did with &lt;code&gt;messageReceived&lt;/code&gt;, we get at it through &lt;code&gt;function(event, data)&lt;/code&gt;. By default jQuery passes us lots of information about the event and then custom data is passed as the &lt;em&gt;second parameter&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Obviously, this could (and will) get messy if we had many more events, so again if there were more I&#39;d split these up further into the individual modules, and probably give each module an &lt;code&gt;init()&lt;/code&gt; method to do the set up, and then a &lt;code&gt;bindEvents()&lt;/code&gt; method for each module to set it up. Speaking of &lt;code&gt;init()&lt;/code&gt; methods, I&#39;ll add one to &lt;code&gt;pubsub&lt;/code&gt; and for now have it just call &lt;code&gt;bindEvents()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;init: function() {
this.bindEvents();
}&lt;/p&gt;
&lt;p&gt;Then we can set our entire app up when the DOM is ready with:
$(function() {
pubsub.init();
});
Now, the &lt;code&gt;displayMessage()&lt;/code&gt; and &lt;code&gt;flashMessage()&lt;/code&gt; methods are fairly straight forward:&lt;/p&gt;
&lt;p&gt;displayMessage: function(data) {
$(&amp;quot;body&amp;quot;).trigger(&amp;quot;messageDisplayed&amp;quot;);
var li = $(&amp;quot;&lt;li&gt;&amp;quot;).text(data.message).css(&amp;quot;display&amp;quot;, &amp;quot;none&amp;quot;);
$(&amp;quot;ul&amp;quot;).append(li);
$(&amp;quot;ul&amp;gt;li&amp;quot;).last().fadeIn()
},
flashMessage: function() {
$(&amp;quot;.flash&amp;quot;).text(&amp;quot;you&#39;ve got a new message&amp;quot;)
.fadeIn(500, function() {
var that = this;
setTimeout(function() {
$(that).fadeOut(500);
}, 2000);
});
}&lt;/li&gt;&lt;/p&gt;
&lt;p&gt;Notice that every event I trigger is on &lt;code&gt;$(&amp;quot;body&amp;quot;)&lt;/code&gt;. There&#39;s no reason I couldn&#39;t do it on a particular &lt;code&gt;div&lt;/code&gt;, but I like to do it on &lt;code&gt;body&lt;/code&gt; as I know that &lt;code&gt;body&lt;/code&gt; incorporates everything on the page. The code for each of these methods are pretty straight forward, just a bit of jQuery DOM manipulation.&lt;/p&gt;
&lt;p&gt;All the code covered in this article is available on &lt;a href=&quot;https://github.com/jackfranklin/JavaScript-Playground--Simple-jQuery-PubSub&quot;&gt;My Github as a Public Repository&lt;/a&gt;, and if you want to try it, &lt;a href=&quot;http://javascriptplayground.com/demos/jquerypubsub/&quot;&gt;there&#39;s a demo online here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, this might not seem very worthwhile &lt;em&gt;in this instance&lt;/em&gt;, but take a moment to think what you would have had code wise, if you had implemented all of the code above within the form&#39;s &lt;code&gt;submit&lt;/code&gt; event (like I have done in the past with projects, and I&#39;m sure you have too). It would be a complete mess of code, all within one form event. Then imagine you had another method of sending a message. How would you deal with that? You would either have to copy &amp;amp; paste all the code into another event, or trigger the form&#39;s &lt;code&gt;submit&lt;/code&gt; event. Neither of those solutions are good. With this method though, all you have to do is make that new way of sending messages trigger a &lt;code&gt;messageReceived&lt;/code&gt; event &amp;amp; pass the message with it, and then you&#39;re set. You could then remove the other way of sending messages, and nothing would break. Another issue is if one module breaks, it &lt;em&gt;shouldn&#39;t break the entire application&lt;/em&gt;. Having the entire implementation within one function means if just one line fails, the entire application will fall to its knees. With each module firing events, if one module fails and doesn&#39;t send the events it&#39;s expected to, other modules can still send theirs, and as such one module breaking doesn&#39;t bring the application down. This is the advantage of using such a pattern, code resuse, not repeating code &amp;amp; implementing a modular approach.&lt;/p&gt;
&lt;p&gt;I will be covering this pattern in large detail over the near future as it&#39;s something I&#39;ve been using a lot recently. I&#39;m aware that this implementation is another post on the JavaScript Playground that uses jQuery, but fear not, in a coming article we will go head on into a basic PubSub written in plain JavaScript. If you can&#39;t wait that long, &lt;a href=&quot;http://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript&quot;&gt;Addy Osmani&#39;s section on the Observer Pattern&lt;/a&gt; in his JS Patterns book is well worth your time.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Testing with QUnit: Part 1</title>
    <link href="http://www.jackfranklin.co.uk/blog/javascript-testing-qunit-1/"/>
    <updated>2012-04-14T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/javascript-testing-qunit-1/</id>
    <content type="html">&lt;p&gt;Recently I was asked on Twitter to do a tutorial on &lt;a href=&quot;http://qunitjs.com/&quot;&gt;QUnit&lt;/a&gt;, a JavaScript Unit Testing framework, and the one used by jQuery. What I wanted to do however, is use it with a real project, rather than set up some fake project. So, I&#39;ve done just that. Having worked with the &lt;a href=&quot;http://instagr.am/developer/&quot;&gt;Instagr.am API&lt;/a&gt; recently, I&#39;m going to use this series of tutorials to write a JavaScript wrapper for the Instagram API &amp;amp; test it with QUnit. Unlike most content on this site, this is going to be a multi-part tutorial, but I hope to still manage to achieve 1-2 specific things within each post. If you&#39;ve any questions, please leave a comment &amp;amp; I will answer all questions at the beginning of the next tutorial. I&#39;ll presume you&#39;re vaguely familiar with the idea of Unit Testing in general. At the end of the series you should have a working knowledge of QUnit and how to use it. I&#39;ll also open source the Instagram Wrapper we create onto Github. As this series is mainly focusing on testing, I wont highlight how I do everything in terms of querying the Instagram API but I will point out specific bits that I think are useful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What we will achieve today&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set up a QUnit testing suite&lt;/li&gt;
&lt;li&gt;Write our first QUnit tests&lt;/li&gt;
&lt;li&gt;Query the Instagram API to get information on a specific Instagram Image&lt;/li&gt;
&lt;li&gt;Learn how to test Async calls in QUnit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first step is to set up our directory. I like to set mine up like so:&lt;/p&gt;
&lt;p&gt;/app
instagramwrapper.js
/test
instagramwrapper_tests.js
/qunitsrc
tests.html&lt;/p&gt;
&lt;p&gt;The first thing we need to do is include all the QUnit source. QUnit needs 3 things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We need to include the QUnit JS Source&lt;/li&gt;
&lt;li&gt;We can link to the QUnit stylesheet to make the output look good&lt;/li&gt;
&lt;li&gt;It needs a specific HTML structure.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can find download links for the JS &amp;amp; CSS files &lt;a href=&quot;http://docs.jquery.com/Qunit#Using_QUnit&quot;&gt;here&lt;/a&gt;. You could include them direct but I like to download them &amp;amp; add them locally, putting them into the &lt;code&gt;qunitsrc&lt;/code&gt; directory.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;qunitsrc/qunit.css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;screen&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/javascript&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;qunitsrc/qunit.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/javascript&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;app/instagramwrapper.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/javascript&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;test/instagramwrapper_tests.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the HTML structure we need:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;qunit-header&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;QUnit Test Suite&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;qunit-banner&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;qunit-testrunner-toolbar&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;qunit-userAgent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ol&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;qunit-tests&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most of those are fairly explanatory. If not, don&#39;t worry, once we run an actual test it should become more apparent. Before we write our actual code, lets set up a test test just to make sure it works. Load up &lt;code&gt;instagramwrapper_tests.js&lt;/code&gt; (I&#39;ll refer to this as just &amp;quot;the tests file&amp;quot; from now on) and put in:&lt;/p&gt;
&lt;p&gt;function saysHi(name) {
return &amp;quot;Hi, &amp;quot; + name;
};&lt;/p&gt;
&lt;p&gt;test(&#39;saysHi()&#39;, function() {
equal(sayHi(&amp;quot;Jack&amp;quot;), &amp;quot;Hi, Jack&amp;quot;, &amp;quot;function outputs string correctly&amp;quot;)&lt;/p&gt;
&lt;p&gt;});&lt;/p&gt;
&lt;p&gt;You can see I define a simple function and then run tests on it, expecting &lt;code&gt;sayHi(&amp;quot;Jack&amp;quot;)&lt;/code&gt; to equal &lt;code&gt;&amp;quot;Hi, Jack&amp;quot;&lt;/code&gt;. If you run it however, we get a failure:&lt;/p&gt;
&lt;p&gt;saysHi() (1, 0, 1)
Died on test #1: sayHi is not defined
Source: at Object.&lt;anonymous&gt; (http://instagram.jsp/test/instagramwrapper_tests.js:6:10)&lt;/anonymous&gt;&lt;/p&gt;
&lt;p&gt;Why&#39;s that? Well, turns out in the &lt;code&gt;equal()&lt;/code&gt; call I referenced &lt;code&gt;sayHi&lt;/code&gt;, but it&#39;s actually &lt;code&gt;saysHi&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Run it again, and it passes!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/1Y1l0m0T1o0T0E0t2s0H/Screen%20Shot%202012-04-13%20at%2023.15.58.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now, for our first real test, lets take a look at the Instagram API. Say I have an Instagram URL, such as &lt;code&gt;http://instagr.am/p/JYAdvJr0K9/&lt;/code&gt; (which happened to be the first URL I found in my Twitter feed). And I want to get the exact URL to it. When we&#39;re testing, we first write tests, see them fail, and then make them pass. Before we dive in, I&#39;ll just do a little set up in the main implementation file:&lt;/p&gt;
&lt;p&gt;(function() {
var instagramwrapper = {
oembed: {
web_url: &amp;quot;&amp;quot;,
}
};
window.instagramwrapper = instagramwrapper;
})();&lt;/p&gt;
&lt;p&gt;The reason for the &lt;code&gt;oembed&lt;/code&gt; namespace is that the bit of the API we&#39;ll be using is &lt;a href=&quot;http://instagr.am/developer/embedding/&quot;&gt;named as such&lt;/a&gt;. So, time to write some tests. I&#39;ll write a couple just to check we&#39;ve set things up correctly, and then we can get into specific tests for this bit. Here&#39;s my initial tests:&lt;/p&gt;
&lt;p&gt;test(&#39;Set Up Tests&#39;, function() {
ok(instagramwrapper, &amp;quot;instagram wrapper is exists and is not undefined&amp;quot;);
});&lt;/p&gt;
&lt;p&gt;test(&#39;oembed&#39;, function() {
ok(instagramwrapper.oembed, &amp;quot;oembed namespace exists&amp;quot;);
instagramwrapper.oembed.web_url = &amp;quot;http://instagr.am/p/JYAdvJr0K9/&amp;quot;;
equal(instagramwrapper.oembed.web_url, &amp;quot;http://instagr.am/p/JYAdvJr0K9/&amp;quot;, &amp;quot;Can set the web_url correctly&amp;quot;);
});&lt;/p&gt;
&lt;p&gt;All these tests pass, but one thing was irritating me, and that is that by default QUnit doesn&#39;t show all the tests, but just the heading:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/0Y0M0o121t1I44403m1R/Screen%20Shot%202012-04-13%20at%2023.31.32.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;I wanted to change this, so I delved into the QUnit JS source and on line 192 I found:&lt;/p&gt;
&lt;p&gt;if (bad === 0) {
ol.style.display = &amp;quot;none&amp;quot;;
}&lt;/p&gt;
&lt;p&gt;I simply commented out that middle line and now it shows the full details:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/2b3S191c0Y1z011U1S13/Screen%20Shot%202012-04-13%20at%2023.32.29.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Obviously this is more a personal preference, so if you want to do it, feel free, but if not, that&#39;s fine too.&lt;/p&gt;
&lt;p&gt;Now I want to write some code to get the media URL that is returned from this API end point: &lt;code&gt;http://api.instagram.com/oembed?url=http://instagr.am/p/BUG/&lt;/code&gt;. I could write the Ajax call in a &lt;code&gt;get_url()&lt;/code&gt; function but as this query returns a set of data, I&#39;ll write a function to take a callback that has the data passed into it, and let the user then grab what they need. I&#39;ll also be using jQuery here for the Ajax calls. We could do them in cross browser JS, but that&#39;s a huge pain &amp;amp; beyond the scope of this tutorial.&lt;/p&gt;
&lt;p&gt;Normally at this stage I&#39;d say to write the test, but we have a problem. How do we test asynchronously?&lt;/p&gt;
&lt;p&gt;The obvious answer is to make the Ajax test non-async, but that&#39;s not a good solution. Thankfully, QUnit helps us out here with its &lt;code&gt;asyncTest()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;QUnit has &lt;code&gt;stop()&lt;/code&gt; and &lt;code&gt;start()&lt;/code&gt; methods which tell the framework to stop its tests, so it can wait for a Ajax call to run and then start the requests again. The &lt;code&gt;asyncTest()&lt;/code&gt; method just does the &lt;code&gt;stop()&lt;/code&gt; bit for us. So most asynchronous tests look a bit like:&lt;/p&gt;
&lt;p&gt;asyncTest(&amp;quot;some Ajax call&amp;quot;, function() {
someAjaxCall(function(resp) {
//callback
start(); //tell QUnit to run tests again
});
});&lt;/p&gt;
&lt;p&gt;And inside the callback, before you call &lt;code&gt;start()&lt;/code&gt;, is where you run your assertions that rely on the Ajax result. I&#39;ve written some tests within the callback that should validate everything works correctly. I then call &lt;code&gt;start()&lt;/code&gt; to tell QUnit it can run the rest of its tests again.&lt;/p&gt;
&lt;p&gt;test(&#39;oembed&#39;, function() {
ok(instagramwrapper.oembed, &amp;quot;oembed namespace exists&amp;quot;);
instagramwrapper.oembed.web_url = &amp;quot;http://instagr.am/p/JYAdvJr0K9/&amp;quot;;
equal(instagramwrapper.oembed.web_url, &amp;quot;http://instagr.am/p/JYAdvJr0K9/&amp;quot;, &amp;quot;Can set the web_url correctly&amp;quot;);
});
asyncTest(&amp;quot;oembed AJAX&amp;quot;, function() {
instagramwrapper.oembed.web_url = &amp;quot;http://instagr.am/p/JYAdvJr0K9/&amp;quot;;
instagramwrapper.oembed.query(function(res) {
ok(res, &amp;quot;AJAX call got a result&amp;quot;);
ok(res.url, &amp;quot;URL exists in response&amp;quot;);
equal(res.url, &amp;quot;http://distilleryimage5.instagram.com/9436051c85b011e18cf91231380fd29b_7.jpg&amp;quot;, &amp;quot;URL returned is correct&amp;quot;);
equal(res.title, &amp;quot;Drainpipe&amp;quot;, &amp;quot;The title returned is correct&amp;quot;);
start();
});
});&lt;/p&gt;
&lt;p&gt;Running these tests (without any implementation, rememeber!) will give you some errors. Now we take the next TDD step. Fix those errors, one at a time. The first will complain about &lt;code&gt;query()&lt;/code&gt; being undefined, so add the function, refresh &amp;amp; continue on. You&#39;ll hit a bit of a problem here. The tests will just run forever, as that &lt;code&gt;start()&lt;/code&gt; never gets called. This is because the function &lt;code&gt;query()&lt;/code&gt; exists, but it does nothing. So QUnit doesn&#39;t get an error that &lt;code&gt;query()&lt;/code&gt; is undefined, so it calls it but then never gets that &lt;code&gt;start()&lt;/code&gt; call again. What we can do to prevent this issue is to add a &lt;code&gt;setTimeout&lt;/code&gt; after my assertions that will run after 1000 milliseconds, telling QUnit to continue anyway:&lt;/p&gt;
&lt;p&gt;setTimeout(function() {
start();
}, 1000);&lt;/p&gt;
&lt;p&gt;That gives us the error:&lt;/p&gt;
&lt;p&gt;Expected at least one assertion, but none were run - call expect(0) to accept zero assertions.&lt;/p&gt;
&lt;p&gt;Another feature is that we can tell QUnit how many assertions we expect, so it knows when that doesn&#39;t happen &amp;amp; can tell us. In our case, we expect 4. Two calls to &lt;code&gt;ok()&lt;/code&gt;, and two to &lt;code&gt;equal()&lt;/code&gt;. We pass this in as the second parameter to &lt;code&gt;asyncTest()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;asyncTest(&amp;quot;oembed AJAX&amp;quot;, 4, function() {&lt;/p&gt;
&lt;p&gt;At this point QUnit gives us the error:&lt;/p&gt;
&lt;p&gt;Expected 4 assertions, but 0 were run&lt;/p&gt;
&lt;p&gt;I&#39;m not going to show you how to solve all these issues as most are straight forward from here on in, it&#39;s a simple Ajax call. Here&#39;s my implementation:&lt;/p&gt;
&lt;p&gt;query: function(cb) {
var ajxreq = $.Ajax({
url: &amp;quot;http://api.instagram.com/oembed?url=&amp;quot; + this.web_url,
dataType: &#39;jsonp&#39;
});
ajxreq.success(function(resp) {
cb(resp);
});
}&lt;/p&gt;
&lt;p&gt;The code works by taking a callback, that it will automatically pass our data into.
Run the tests, and I&#39;m greeted with all greens, lovely!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/0J0c3Z3J0r1K3M2a0m0a/Screen%20Shot%202012-04-14%20at%2000.01.33.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;That brings us to the end of the first tutorial. In this we&#39;ve achieved a great deal, learning how QUnit works, how to run async tests in QUnit and working with the Instagram API too. Not bad at all! Next time we will continue writing &amp;amp; testing, but at a bit more of a faster pace, now you&#39;ve got the hang of QUnit. You can get all the code from the &lt;a href=&quot;https://github.com/jackfranklin/JS-Instagram-Wrapper&quot;&gt;Github Repo&lt;/a&gt;. Each tutorial is on its own branch, for this one you want the branch &lt;em&gt;tutorial1&lt;/em&gt;. The &lt;code&gt;master&lt;/code&gt; branch will contain the current up to date code, whereas the tutorial branches will only contain the code from each tutorial and no more. Any questions, please leave a comment and I will answer them in part 2.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Scope and this in JavaScript</title>
    <link href="http://www.jackfranklin.co.uk/blog/javascript-variable-scope-this/"/>
    <updated>2012-04-16T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/javascript-variable-scope-this/</id>
    <content type="html">&lt;p&gt;Today I want to talk a little about scope in JavaScript and the &lt;code&gt;this&lt;/code&gt; variable. The idea of &amp;quot;scope&amp;quot; is that it&#39;s where certain functions or variables are accessible from in our code, &amp;amp; the context in which they exist &amp;amp; are executed in.&lt;/p&gt;
&lt;p&gt;If you&#39;ve ever seen someone do something like:&lt;/p&gt;
&lt;p&gt;function someFunc() {
var _this = this;
something.on(&amp;quot;click&amp;quot;, function() {
console.log(_this);
});
};&lt;/p&gt;
&lt;p&gt;And wondered what the &lt;code&gt;var _this=this;&lt;/code&gt; is all about, hopefully this article should clear it all up.&lt;/p&gt;
&lt;p&gt;The first scope is &lt;strong&gt;Global Scope&lt;/strong&gt;. This is very easy to define. If a variable or function is &lt;em&gt;global&lt;/em&gt;, it can be got at from anywhere. In a browser, the global scope is the &lt;code&gt;window&lt;/code&gt; object. So if in your code you simply have:&lt;/p&gt;
&lt;p&gt;var x = 9;&lt;/p&gt;
&lt;p&gt;You&#39;re actually setting the property &lt;code&gt;window.x&lt;/code&gt; to 9 (when working in a browser). You could type &lt;code&gt;window.x = 9;&lt;/code&gt; if you like, but because it&#39;s the global object you don&#39;t have to. Properties on the global object can be accessed from anywhere in our code.&lt;/p&gt;
&lt;p&gt;The only other scope we can have is &lt;strong&gt;Local Scope&lt;/strong&gt;. JavaScript scopes at a function level. For example:&lt;/p&gt;
&lt;p&gt;function myFunc() {
var x = 5;
};
console.log(x); //undefined&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;x&lt;/code&gt; was initialised within &lt;code&gt;myFunc()&lt;/code&gt;, it is only accessible within &lt;code&gt;myFunc()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A word of Caution&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you declare a variable &amp;amp; forget to use the &lt;code&gt;var&lt;/code&gt; keyword, that variable is automatically made global. So this code would work:&lt;/p&gt;
&lt;p&gt;function myFunc() {
x = 5;
});
console.log(x); //5&lt;/p&gt;
&lt;p&gt;This is a &lt;strong&gt;very bad idea&lt;/strong&gt;. It&#39;s considered bad practise to clutter the global scope. You should add as fewer properties as you possibly can to the global object. That&#39;s why you&#39;ll see libraries such as jQuery often do this:&lt;/p&gt;
&lt;p&gt;(function() {
var jQuery = { /* all my methods go here */ };
window.jQuery = jQuery.
})();&lt;/p&gt;
&lt;p&gt;Wrapping everything in a function which is then immediately invoked means all the variables within that function are bound to the &lt;em&gt;local scope&lt;/em&gt;. At the very end you can then expose all your methods by binding the &lt;code&gt;jQuery&lt;/code&gt; object to the &lt;code&gt;window&lt;/code&gt;, the &lt;em&gt;global object&lt;/em&gt;. Although I&#39;ve simplified it hugely, this is in essence how the jQuery source works. If you want to learn more, &lt;a href=&quot;http://paulirish.com/2010/10-things-i-learned-from-the-jquery-source/&quot;&gt;Paul Irish&#39;s &amp;quot;10 Things I learned from the jQuery Source&amp;quot;&lt;/a&gt; is a highly recommended watch.&lt;/p&gt;
&lt;p&gt;Because local scope works through functions, any functions defined within another have access to variables defined in the outer function:&lt;/p&gt;
&lt;p&gt;function outer() {
var x = 5;
function inner() {
console.log(x); //5
}
inner();
}&lt;/p&gt;
&lt;p&gt;But the &lt;code&gt;outer()&lt;/code&gt; function doesn&#39;t have access to any variables declared within &lt;code&gt;inner()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;function outer() {
var x = 5;
function inner() {
console.log(x); //5
var y = 10;
}
inner();
console.log(y); //undefined
}&lt;/p&gt;
&lt;p&gt;That&#39;s pretty much all there is too it at a basic level. Things get a bit more complex once we take a look at the &lt;code&gt;this&lt;/code&gt; keyword in JavaScript and how it works. I&#39;m sure we&#39;ve all come across this issue:&lt;/p&gt;
&lt;p&gt;$(&amp;quot;myLink&amp;quot;).on(&amp;quot;click&amp;quot;, function() {
console.log(this); //points to myLink (as expected)
$.ajax({
//ajax set up
success: function() {
console.log(this); //points to the global object. Huh?
}
});
});&lt;/p&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is a variable that is automatically set for you when a function is invoked. The value it&#39;s given depends on how a function is invoked. In JavaScript we have a few main ways of invoking functions. I wont talk about them all today, but just the three ways most people use them; either when a function is called as a method, or on it&#39;s own, or as an event handler. Depending on how a function is invoked, &lt;code&gt;this&lt;/code&gt; is set differently:&lt;/p&gt;
&lt;p&gt;function foo() {
console.log(this); //global object
};&lt;/p&gt;
&lt;p&gt;myapp = {};
myapp.foo = function() {
console.log(this); //points to myapp object
}&lt;/p&gt;
&lt;p&gt;var link = document.getElementById(&amp;quot;myId&amp;quot;);
link.addEventListener(&amp;quot;click&amp;quot;, function() {
console.log(this); //points to link
}, false);&lt;/p&gt;
&lt;p&gt;Those are all fairly obvious. The MDN has a &lt;a href=&quot;https://developer.mozilla.org/en/DOM/element.addEventListener&quot;&gt;nice explanation&lt;/a&gt; for the third &amp;amp; why this happens:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is often desirable to reference the element from which the event handler was fired, such as when using a generic handler for a series of similar elements. When attaching a function using addEventListener() the value of this is changed—note that the value of this is passed to a function from the caller.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, now we know that, we are in a position to figure out why &lt;code&gt;var _this = this;&lt;/code&gt; is required in the above code.&lt;/p&gt;
&lt;p&gt;Doing &lt;code&gt;$(&amp;quot;myLink&amp;quot;).on(&amp;quot;click&amp;quot;, function() {})&lt;/code&gt; means that when the element is clicked, the function is fired. But this function is bound as an event handler, so &lt;code&gt;this&lt;/code&gt; is set to the reference to the DOM element &lt;code&gt;myLink&lt;/code&gt;. The success method you define within the Ajax request is &lt;em&gt;just a regular function&lt;/em&gt;, and as such when it&#39;s invoked, &lt;code&gt;this&lt;/code&gt; is set to the global object, as it is when any function that&#39;s not an event handler or an object method is.&lt;/p&gt;
&lt;p&gt;The above is precisely why you&#39;ll see a lot of people doing &lt;code&gt;var _this = this&lt;/code&gt; or &lt;code&gt;var that = this&lt;/code&gt; or similar, to store the current value. It&#39;s also seen by many as what the correct value should be, but that debate is for another day.&lt;/p&gt;
&lt;p&gt;$(&amp;quot;myLink&amp;quot;).on(&amp;quot;click&amp;quot;, function() {
console.log(this); //points to myLink (as expected)
var _this = this;  //store reference
$.ajax({
//ajax set up
success: function() {
console.log(this); //points to the global object. Huh?
console.log(_this); //better!
}
});
});&lt;/p&gt;
&lt;p&gt;There are ways in which we can invoke functions by explicitly defining what the value of &lt;code&gt;this&lt;/code&gt; should be, but as this has already ended up as a fairly long article, I&#39;ll leave those for another day. If you have any questions, please do leave a comment &amp;amp; I will get back to you.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Grunt, a JS Command Line Tool</title>
    <link href="http://www.jackfranklin.co.uk/blog/grunt-js-command-line-tutorial/"/>
    <updated>2012-04-19T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/grunt-js-command-line-tutorial/</id>
    <content type="html">&lt;p&gt;Grunt describes itself as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Grunt is a task-based command line build tool for JavaScript projects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It was released very recently and is authored by &lt;a href=&quot;http://benalman.com/&quot;&gt;Ben &amp;quot;Cowboy&amp;quot; Alman&lt;/a&gt; and lives on the &lt;a href=&quot;https://github.com/cowboy/grunt&quot;&gt;Github Repository&lt;/a&gt;. In this tutorial I&#39;m going to be going through the basics of Grunt, how to install &amp;amp; use it. I will only cover basic usage today, with a follow up post planned for next week.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Please note that Grunt is currently in beta and changing fairly regularly, this tutorial was written with Grunt 0.3.9. I will link to newer versions of the tutorial when new versions of Grunt are released.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Grunt is installed as a NPM (Node Package Manager) module. If you&#39;ve not got Node.js &amp;amp; NPM installed, you should do that before proceeding. You can install the package from the &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; website, or if you&#39;re on a Mac &amp;amp; have homebrew installed you can get it that way too. You should then &lt;a href=&quot;http://npmjs.org/&quot;&gt;install NPM&lt;/a&gt;, which manages packages for Node. You could draw certain parallels between NPM &amp;amp; Ruby Gems, if you like. Please note that if you use a package install from the Node.js website, that &lt;strong&gt;comes with NPM already&lt;/strong&gt;. Only install NPM if you installed from source or via a package manager like homebrew.&lt;/p&gt;
&lt;p&gt;Once done, Grunt is installed with a simple &lt;code&gt;npm install -g grunt&lt;/code&gt;. The &lt;code&gt;-g&lt;/code&gt; flag installs Grunt globally, which means it will be available from anywhere in your terminal, as it&#39;s installed to the root &lt;code&gt;node_modules&lt;/code&gt; directory. If you only want Grunt to be available when you&#39;re within a specific directory, navigate to that directory &amp;amp; run the above command, just without &lt;code&gt;-g&lt;/code&gt;. Once that&#39;s done you&#39;ll get a whole load of terminal output as Grunt &amp;amp; its dependencies are installed. Once done you will see something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/2G1z461139080p1S3K1g/Screen%20Shot%202012-04-18%20at%2020.15.02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can see here that I have installed Grunt and the list of dependencies. If you get a similar output, you&#39;re all set, so we can now set up a project.&lt;/p&gt;
&lt;p&gt;The first step is to initialise a new project, through Grunt. There&#39;s a number of different types of projects we can initialise here as Grunt comes with some handy templates, including specific project set up for &lt;code&gt;commonjs&lt;/code&gt;, &lt;code&gt;jquery&lt;/code&gt;, and &lt;code&gt;node&lt;/code&gt;. Lets create a jQuery project. Make a new directory to house your project and then enter &lt;code&gt;grunt init:jquery&lt;/code&gt;. You&#39;ll be asked a few questions along the way. Grunt shows the current value set in brackets, and if you don&#39;t want to override it, just press enter. Here&#39;s what mine looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/3X280k1h031O0l0Q1u2P/Screen%20Shot%202012-04-18%20at%2019.14.03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The first file we will take a look in is the &lt;code&gt;grunt.js&lt;/code&gt; file, also known as &lt;code&gt;gruntfile&lt;/code&gt;. Some of this is a bit overwhelming and might look a bit alien, but don&#39;t worry for now. The key bits I&#39;d like to point out is that Grunt has added sections for &lt;code&gt;qunit&lt;/code&gt; here, and generated the &lt;code&gt;test&lt;/code&gt; directory for us. It&#39;s also got instructions for concatenating files, watching files &amp;amp; running tasks on those files automatically when it detects a change in them:&lt;/p&gt;
&lt;p&gt;watch: {
files: &#39;&lt;a href=&quot;config:lint.files&quot;&gt;config:lint.files&lt;/a&gt;&#39;,
tasks: &#39;lint qunit&#39;
}&lt;/p&gt;
&lt;p&gt;This takes the files from the &lt;code&gt;config:lint.files&lt;/code&gt;, which means this part of our config:&lt;/p&gt;
&lt;p&gt;lint: {
files: [&#39;grunt.js&#39;, &#39;src/&lt;strong&gt;/*.js&#39;, &#39;test/&lt;/strong&gt;/*.js&#39;]
}&lt;/p&gt;
&lt;p&gt;That tells Grunt to automatically run the &lt;code&gt;lint&lt;/code&gt; and &lt;code&gt;qunit&lt;/code&gt; tasks (which do exactly what you&#39;d think) whenever any of those files change. Pretty nifty! I will demonstrate this in a moment.&lt;/p&gt;
&lt;p&gt;At the end you&#39;ll find this line:&lt;/p&gt;
&lt;p&gt;grunt.registerTask(&#39;default&#39;, &#39;lint qunit concat min&#39;);&lt;/p&gt;
&lt;p&gt;This tells grunt that if it&#39;s not specified a task when it&#39;s run, just to run &lt;code&gt;lint&lt;/code&gt;, &lt;code&gt;qunit&lt;/code&gt;, &lt;code&gt;concat&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt;. Lets go to our terminal, and enter &lt;code&gt;grunt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately for me, this didn&#39;t go to plan:&lt;/p&gt;
&lt;p&gt;Running &amp;quot;lint:files&amp;quot; (lint) task
Lint free.&lt;/p&gt;
&lt;p&gt;Running &amp;quot;qunit:files&amp;quot; (qunit) task
Testing jquery.jsplayground-demo.html
Running PhantomJS...ERROR&lt;/p&gt;
&lt;p&gt;Installing PhantomJS is fairly straight forward, &lt;a href=&quot;http://code.google.com/p/phantomjs/wiki/Installation&quot;&gt;instructions can be found here&lt;/a&gt;. PhantomJS is a headless Webkit, with a JavaScript API, which means we can run tests through it, including QUnit tests. Once you&#39;ve got it installed, you should see the output look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/0B0L1t2E273j1900223A/Screen%20Shot%202012-04-18%20at%2019.24.44.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(as an aside, I will be covering PhantomJS in more depth in the very near future)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, what this script did:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ran JSLint on our code to check it for problems.&lt;/li&gt;
&lt;li&gt;Automatically ran QUnit tests for us, without opening a browser.&lt;/li&gt;
&lt;li&gt;Concatenated our files into one (although in this instance there is only one)&lt;/li&gt;
&lt;li&gt;Minified that concatenated file into a minified JS file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, I don&#39;t know about you, but I think that&#39;s pretty awesome for just one command! Say I want to run those tasks every time, I could edit &lt;code&gt;grunt.js&lt;/code&gt; to let me do that. Find the code for &lt;code&gt;watch&lt;/code&gt;, which looks like this:&lt;/p&gt;
&lt;p&gt;watch: {
files: &#39;&lt;a href=&quot;config:lint.files&quot;&gt;config:lint.files&lt;/a&gt;&#39;,
tasks: &#39;lint qunit&#39;
},&lt;/p&gt;
&lt;p&gt;Now, I could add the tasks &lt;code&gt;concat&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt; to that, but if you remember we defined the &lt;code&gt;default&lt;/code&gt; task to do all of this, so I can make the tasks to run on watch simply &lt;code&gt;default&lt;/code&gt;:
watch: {
files: &#39;&lt;a href=&quot;config:lint.files&quot;&gt;config:lint.files&lt;/a&gt;&#39;,
tasks: &#39;default&#39;
}
Of course, in reality running the concat &amp;amp; min tasks every time you save is a bit overkill, but I just want to demonstrate what you can do. You may decide to see up new tasks, one to run as default, one to run when you release your code, one to run whilst developing, and so on.&lt;/p&gt;
&lt;p&gt;Now, lets take a look at the JS file it initially created for us, which is in &lt;code&gt;src/jquery.jsplayground-demo.js&lt;/code&gt;. You will see it put in the license for us, the copyright and the URL to the Github repository - all of which we set up through &lt;code&gt;grunt init:jquery&lt;/code&gt; earlier. Now, lets change this file so we can see &lt;code&gt;watch&lt;/code&gt; in action. Grunt gives us a few bits of code to get us started, but I&#39;m going to delete some of it, then save the file so I can demonstrate Grunt&#39;s watching abilities. First, get the &lt;code&gt;watch&lt;/code&gt; task running by entering in the terminal &lt;code&gt;grunt watch&lt;/code&gt;. Then, make an edit. I&#39;m going to enter some invalid JS, so we can see JSLint fail. In my plugin file I&#39;ve typed &lt;code&gt;some rubbish stuff&lt;/code&gt;. I save it, and then my terminal automatically updates:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/2H363C2Y2z1x3B2t3B1U/Screen%20Shot%202012-04-18%20at%2019.52.40.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;I&#39;m going to fix that but remove all the jQuery code other than the code for &lt;code&gt;$.fn.awesome&lt;/code&gt;. Grunt has tests written for us, so when I save this file, you&#39;ll see tests fail. They fail because we&#39;re testing code I&#39;ve just removed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/1L343g2G3E0n2x0X1V2F/Screen%20Shot%202012-04-18%20at%2019.56.24.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;I remove those tests which are not not needed, and we pass:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/1I3g3H470i2K3G401h2l/Screen%20Shot%202012-04-18%20at%2019.58.04.png&quot; alt=&quot;&quot;&gt;.&lt;/p&gt;
&lt;p&gt;Just imagine when working on a project, being able to run &lt;code&gt;grunt watch&lt;/code&gt; and then happily working on your code, knowing it will be tested, checked &amp;amp; minified every time.&lt;/p&gt;
&lt;p&gt;I hope this brief look at Grunt has inspired you to give it a go. I personally have used it in a few projects recently and have really enjoyed it. If you have any questions, please do leave a comment &amp;amp; I will answer them in the next tutorial on Grunt, which I expect will be published in the next week or two. We have only just scratched the surface of what Grunt can do and in the next tutorial we shall further explore everything Grunt has to offer.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>QUnit, PhantomJS and Mockjax</title>
    <link href="http://www.jackfranklin.co.uk/blog/qunit-phantomjs-and-mockjax/"/>
    <updated>2012-04-20T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/qunit-phantomjs-and-mockjax/</id>
    <content type="html">&lt;p&gt;Following on from last week&#39;s &lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/javascript-testing-qunit-1&quot;&gt;introduction to QUnit&lt;/a&gt; today I want to talk less about how to use QUnit but ways to make it easier to use or integrate it into your development workflow.&lt;/p&gt;
&lt;p&gt;A lot of people asked me how to avoid refreshing the QUnit tests page everytime you want to rerun the tests. I was actually using the Mac tool &lt;a href=&quot;http://livereload.com/&quot;&gt;LiveReload&lt;/a&gt; which is currently on the App Store for £6.99. Fear not Windows users, it&#39;s coming to Windows too, and is currently in early testing stages, with users able to download &amp;amp; test it now, for free. You assign LiveReload a folder to watch and install the browser plugin. Once you&#39;ve connected the browser to the app, when the app detects a file has changed it will refresh the browsers. This meant whenever I saved my source file, or my tests file, it would rerun the tests. It&#39;s a lovely solution &amp;amp; I would highly recommend it.&lt;/p&gt;
&lt;p&gt;Now, being a developer something I immediately wondered was if I could run tests in the terminal. My answer came in the form of &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt;. There&#39;s a number of ways to install PhantomJS, the easiest if you&#39;re on a Mac and use homebrew is to simply run &lt;code&gt;brew install phantomjs&lt;/code&gt;. It can be installed on Linux, OS X and Windows. Once you&#39;ve got that done, you need to get the QUnit JS runner for Phantom, which can be found &lt;a href=&quot;https://github.com/ariya/phantomjs/blob/1.2/examples/run-qunit.js&quot;&gt;here on Github&lt;/a&gt;. Save that into the root directory. You should then be able to run your tests in the command line by:&lt;/p&gt;
&lt;p&gt;phantomjs run-qunit.js path/to/tests.html&lt;/p&gt;
&lt;p&gt;In my case, I run the tests through a virtual host and you can see that right now it&#39;s failing:&lt;/p&gt;
&lt;p&gt;phantomjs run-qunit.js http://instagram.jsp/tests.html
&#39;waitFor()&#39; finished in 401ms.
Tests completed in 266 milliseconds.
6 tests of 7 passed, 1 failed.&lt;/p&gt;
&lt;p&gt;Why is it failing? Unfortunately you don&#39;t get shown the failing tests in the output, which is a shame, however it&#39;s nice for a quick test, as in reality you only need to know about a test if it fails. We can head over to the browser and see:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/1q0u1G1h0n0X1E313w0B/Screen%20Shot%202012-04-20%20at%2014.23.49.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;So, it seems Instagram changed the URL where this image is stored that we get from our Ajax call. This is what I want to talk about now. When testing, you can&#39;t rely on making actual external Ajax calls. Why not? Imagine that you&#39;re on a train, and fancy developing. Without internet, you&#39;re stuck when it comes to testing. You also, as we&#39;ve seen above, can&#39;t rely on certain values staying the same so you can test against them. Here you can see a test that worked fine last time round doesn&#39;t anymore, all because the URL changed. Our code hasn&#39;t, at all. What we need is a way to fake Ajax calls &amp;amp; returned data.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href=&quot;https://github.com/appendto/jquery-mockjax/&quot;&gt;jQuery Mockjax&lt;/a&gt;. So, lets mock up a response for the current Ajax call we&#39;re making. What I&#39;m going to do is make the API call &amp;amp; copy the data. We can define a new Mocked Ajax call like so (taken from the docs on the Github page):&lt;/p&gt;
&lt;p&gt;$.mockjax({
url: &#39;/restful/fortune&#39;,
responseTime: 750,
responseText: {
status: &#39;success&#39;,
fortune: &#39;Are you a turtle?&#39;
}
});&lt;/p&gt;
&lt;p&gt;Mockjax will then capture all Ajax requests to &lt;code&gt;/restful/fortune&lt;/code&gt; and return the data within &lt;code&gt;responseText&lt;/code&gt;. You can also define &lt;code&gt;responseTime&lt;/code&gt; to simulate latency. As our response is a fair few lines, I&#39;m actually going to save this in &lt;code&gt;tests/oembed.json&lt;/code&gt; and then we&#39;ll tell Mockjax to use it shortly. So your &lt;code&gt;tests/oembed.json&lt;/code&gt; should look like this:&lt;/p&gt;
&lt;p&gt;{
provider_url: &amp;quot;http://instagram.com/&amp;quot;,
media_id: &amp;quot;168887029519565501_138023&amp;quot;,
title: &amp;quot;Drainpipe&amp;quot;,
url: &amp;quot;http://distilleryimage5.s3.amazonaws.com/9436051c85b011e18cf91231380fd29b_7.jpg&amp;quot;,
author_name: &amp;quot;joel_hughes&amp;quot;,
height: 612,
width: 612,
version: &amp;quot;1.0&amp;quot;,
author_url: &amp;quot;http://instagram.com/&amp;quot;,
author_id: 138023,
type: &amp;quot;photo&amp;quot;,
provider_name: &amp;quot;Instagram&amp;quot;
}&lt;/p&gt;
&lt;p&gt;Now lets mock our Ajax call. Within the &lt;code&gt;asyncTest&lt;/code&gt; call we created last time, at the top, add in this:&lt;/p&gt;
&lt;p&gt;$.mockjax({
url: &#39;http://api.instagram.com/oembed?url=http://instagr.am/p/JYAdvJr0K9/&#39;,
contentType: &#39;text/json&#39;,
proxy: &#39;/test/oembed.json&#39;
});&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;url&lt;/code&gt; property tells Mockjax to capture any Ajax calls to that URL. We then tell it that the response will be JSON, and then use the &lt;code&gt;proxy&lt;/code&gt; pattern to define a response file. That means Mockjax will just send the contents of that file back to the app.&lt;/p&gt;
&lt;p&gt;Before we run this, make sure you&#39;ve downloaded the Mockjax source from Github and have included it in your &lt;code&gt;tests.html&lt;/code&gt; file, &lt;strong&gt;before&lt;/strong&gt; you include our QUnit tests. Now, if you run it, you&#39;ll still get the error in the test. This is expected because we haven&#39;t changed the URL to be the new URL Instagram now gives us. If you want to check it&#39;s working, head to your console. Mockjax logs to the console everytime it captures a request, which is a nice way to test. In my case I see this line:&lt;/p&gt;
&lt;p&gt;MOCK GET: http://api.instagram.com/oembed?url=http://instagr.am/p/JYAdvJr0K9/&lt;/p&gt;
&lt;p&gt;So I can be confident it works. Now head into the &lt;code&gt;oembed.json&lt;/code&gt; file and copy the &lt;code&gt;url&lt;/code&gt; property into our &lt;code&gt;equal()&lt;/code&gt; call, so it now looks like this:&lt;/p&gt;
&lt;p&gt;equal(res.url, &amp;quot;http://distilleryimage5.s3.amazonaws.com/9436051c85b011e18cf91231380fd29b_7.jpg&amp;quot;, &amp;quot;URL returned is correct&amp;quot;);&lt;/p&gt;
&lt;p&gt;If you run the tests in the command line, you will see the Mockjax log &amp;amp; that all our tests pass:&lt;/p&gt;
&lt;p&gt;phantomjs run-qunit.js http://instagram.jsp/tests.html
MOCK GET: http://api.instagram.com/oembed?url=http://instagr.am/p/JYAdvJr0K9/
&#39;waitFor()&#39; finished in 701ms.
Tests completed in 509 milliseconds.
7 tests of 7 passed, 0 failed.&lt;/p&gt;
&lt;p&gt;And if you want to double check, you can load up the tests in your browser and see:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/2d2s103o352J030f0s1W/Screen%20Shot%202012-04-20%20at%2014.44.47.png&quot; alt=&quot;&quot;&gt;.&lt;/p&gt;
&lt;p&gt;So, although we didn&#39;t write any more functionality in this post, we&#39;ve now got Mockjax set up so we can work on it much easier and not rely on a 3rd party service or having an internet connection when we want to do some testing. I highly recommend using Mockjax for all your Ajax queries.&lt;/p&gt;
&lt;p&gt;Files for this tutorial can be found on the &lt;a href=&quot;https://github.com/jackfranklin/JS-Instagram-Wrapper/tree/tutorial2&quot;&gt;tutorial2 branch of the repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to explore running JS tests in the command line further, I recommend the JS tool Grunt, &lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/grunt-js-command-line-tutorial&quot;&gt;which I wrote a tutorial on yesterday&lt;/a&gt;, so please do check that out.&lt;/p&gt;
&lt;p&gt;As always, any questions, please leave a comment &amp;amp; I&#39;ll get back to you!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Exploring Backbone: Part 1</title>
    <link href="http://www.jackfranklin.co.uk/blog/backbone-js-tutorial-1/"/>
    <updated>2012-04-23T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/backbone-js-tutorial-1/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://documentcloud.github.com/backbone/&quot;&gt;Backbone.js&lt;/a&gt; is a framework that lets us structure our applications using a pattern similiar to MVC (technically Backbone is not pure MVC as the C stands for &amp;quot;Collection&amp;quot;). However, Backbone is a powerful system to use when creating apps that are beyond very basic. When passing &amp;amp; manipulating a lot of data, you should consider using something like Backbone.&lt;/p&gt;
&lt;p&gt;Since launching this blog I&#39;ve had a lot of people ask me about Backbone. Although there are a lot of very good resources out there, I have struggled to get to grips with it myself and from the requests I&#39;ve had I&#39;d suggest a lot of others have too. So, I sat down to create a sample application with Backbone, and in this tutorial - which will span at least 3 parts - we will create a very simplified shopping cart application, with Backbone. As always the source will be on Github and is linked to at the end of this post.&lt;/p&gt;
&lt;p&gt;The first thing to do is set up our basic page and include our dependencies. Backbone relies on Underscore.js, a set of utility functions written by Backbone&#39;s creator, Jeremy Ashkenas (who also created CoffeeScript). You need to download Underscore.js, Backbone.js &amp;amp; include jQuery too, which I do from the Google CDN. The Backbone link can be found above at the beginning of this article, and &lt;a href=&quot;http://documentcloud.github.com/underscore/&quot;&gt;here&#39;s the link for Underscore.js&lt;/a&gt;. I&#39;ve also created a stylesheet &amp;amp; &lt;code&gt;cart.js&lt;/code&gt;, which is where the majority of our code will go:&lt;/p&gt;
&lt;p&gt;&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Shopping Cart with Backbone&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://www.jackfranklin.co.uk/blog/backbone-js-tutorial-1/css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div id=&quot;yourcart&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://www.jackfranklin.co.uk/blog/backbone-js-tutorial-1/js/underscore.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://www.jackfranklin.co.uk/blog/backbone-js-tutorial-1/js/backbone.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://www.jackfranklin.co.uk/blog/backbone-js-tutorial-1/js/cart.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;
&lt;p&gt;The first thing we want to do is create a model. A model is a way we can represent data in an application, and the objects that we have in our application. We&#39;re going to have just one thing today, which is items, which sit in a shopping cart. The convention is to name a model as singular &amp;amp; capitalise it, so our model will be &lt;code&gt;Item&lt;/code&gt;. To create a model we extend &lt;code&gt;Backbone.Model&lt;/code&gt; like so:&lt;/p&gt;
&lt;p&gt;var Item = Backbone.Model.extend({
defaults: {
price: 35,
photo: &amp;quot;http://www.placedog.com/100/100&amp;quot;
}
});&lt;/p&gt;
&lt;p&gt;Here I set up the default values for my item. It&#39;s going to have three fields, a title, price &amp;amp; then a photo. Whilst I don&#39;t want to set a default title, I set the defaults for the other properties. &lt;a href=&quot;http://documentcloud.github.com/backbone/#Model-extend&quot;&gt;There&#39;s a lot you can do by extending models&lt;/a&gt; which I will revist in a future tutorial. If you fancy reading some more now, check out that link to the documentation. Now new items can be created easily. Load up &lt;code&gt;index.html&lt;/code&gt; in the browser &amp;amp; try this out in the command line:&lt;/p&gt;
&lt;p&gt;var football = new Item({title: &amp;quot;Football&amp;quot;});
football.get(&amp;quot;title&amp;quot;); //&amp;quot;Football&amp;quot;
football.get(&amp;quot;price&amp;quot;); //35
football.get(&amp;quot;photo&amp;quot;); //http://www.placedog…&lt;/p&gt;
&lt;p&gt;However, this functionality on its own is not very good. We need some way of managing sets of data, and this is where Collections come in. We can create a new collection which will store data, and tell it which model to use:&lt;/p&gt;
&lt;p&gt;var Cart = Backbone.Collection.extend({
model: Item
});&lt;/p&gt;
&lt;p&gt;Now refresh the page, load up the console &amp;amp; try this:&lt;/p&gt;
&lt;p&gt;var collection = new Cart({title: &amp;quot;football&amp;quot;});
collection.at(0).get(&amp;quot;price&amp;quot;); //35&lt;/p&gt;
&lt;p&gt;You can initialise a collection by passing it either a single object or an array of objects, all of which it will presume are instances of the model we specified above It will then use the values passed to create an instance of the model for each object passed in. The &lt;code&gt;at()&lt;/code&gt; method gets an object at a specific index and returns it.&lt;/p&gt;
&lt;p&gt;Now we have a collection &amp;amp; a model, we&#39;ve done the &amp;quot;MC&amp;quot; bit of &amp;quot;MVC&amp;quot;. So lets hook it up into a view to explore the basics of views in Backbone &amp;amp; then we&#39;ll wrap this up for today.&lt;/p&gt;
&lt;p&gt;Firstly, we need some sample data to work with, so I&#39;m going to create some sample items and initialise our &lt;code&gt;Cart&lt;/code&gt; collection with them:&lt;/p&gt;
&lt;p&gt;var items = [
{ title: &amp;quot;Macbook Air&amp;quot;, price: 799 },
{ title: &amp;quot;Macbook Pro&amp;quot;, price: 999 },
{ title: &amp;quot;The new iPad&amp;quot;, price: 399 },
{ title: &amp;quot;Magic Mouse&amp;quot;, price: 50 },
{ title: &amp;quot;Cinema Display&amp;quot;, price: 799 }
];&lt;/p&gt;
&lt;p&gt;var cartCollection = new Cart(items);&lt;/p&gt;
&lt;p&gt;Each view you create should be responsible for a small part of your application. I want to end this tutorial by showing all the items we have on the page, laid out neatly. Rather than having 1 view &amp;amp; dealing with everything in there, I&#39;m going to set up two. The first will be the template for an individual item, and the second will be for showing every single item. Before we write the JS, we need to make a quick HTML template for it, using the templating engine that comes with Underscore. These should go within script tags in &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt;
&lt;script id=&quot;itemTemplate&quot; type=&quot;text/template&quot;&gt;
&lt;img src=&quot;&lt;%= photo %&gt;&quot; alt=&quot;&lt;%= title %&gt;&quot;&gt;
&lt;div&gt;
&lt;h2&gt;&lt;%= title %&gt;&lt;/h2&gt;
&lt;h4&gt;&amp;pound;&lt;%= price %&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/script&gt;
&lt;p&gt;You can see what will happen here. Where I&#39;ve used &lt;code&gt;&amp;lt;% = title %&amp;gt;&lt;/code&gt;, that will be replaced with the item&#39;s title, and so on. I&#39;ve given it a type of &lt;code&gt;text/template&lt;/code&gt;, if we used &lt;code&gt;text/javascript&lt;/code&gt;, the browser would try (and fail) to parse it.&lt;/p&gt;
&lt;p&gt;Now I can write the JS for the view for a &lt;em&gt;single item&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;var ItemView = Backbone.View.extend({
tagName: &amp;quot;div&amp;quot;,
className: &amp;quot;item-wrap&amp;quot;,
template: $(&amp;quot;#itemTemplate&amp;quot;).html(),&lt;/p&gt;
&lt;p&gt;render: function() {
var templ = _.template(this.template);
this.$el.html(templ(this.model.toJSON()));
return this;
}
});&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tagName&lt;/code&gt; and &lt;code&gt;className&lt;/code&gt; tells Backbone to wrap the template within a &lt;code&gt;div&lt;/code&gt; with a class of &lt;code&gt;item-wrap&lt;/code&gt;. We give it the template, grabbing the code from our &lt;code&gt;script&lt;/code&gt; tag. The default for &lt;code&gt;tagName&lt;/code&gt; is &lt;code&gt;div&lt;/code&gt;, so I could haveb left it out, but I wanted to put it in to highlight the fact it exists. The &lt;code&gt;render&lt;/code&gt; method just uses Underscore&#39;s &lt;code&gt;template()&lt;/code&gt; method to parse the template. We then call it with a JSON representation of the current model - which for this view will be an individual item. &lt;code&gt;$el&lt;/code&gt; is a variable automatically set for us which stores a jQuery reference to the current object. Backbone does this for us to save us a bit of time and it comes in very handy. Note that in the &lt;code&gt;render&lt;/code&gt; method we return &lt;code&gt;this&lt;/code&gt;. This is so we can call this method from another view, and get access to the returned data. Whenever a view is rendered, one of the properties it has is &lt;code&gt;el&lt;/code&gt;, which is the fully compiled template, with every &lt;code&gt;&amp;lt;%= title %&amp;gt;&lt;/code&gt; substituted for the correct value and so on. We will use this in our next view.&lt;/p&gt;
&lt;p&gt;On its own however, this view doesn&#39;t serve a purpose. Right now it will render some HTMl for each individual item, but as I said earlier we want to write another view that shows all the items. This one is a bit more complex:&lt;/p&gt;
&lt;p&gt;var CartCollectionView = Backbone.View.extend({
el: $(&amp;quot;#yourcart&amp;quot;),
initialize: function() {
this.collection = cartCollection;
this.render();
},
render: function() {
this.collection.each(function(item) {
this.renderItem(item);
}, this);
},
renderItem: function(item) {
var itemView = new ItemView({ model: item });
this.$el.append(itemView.render().el);
}
});&lt;/p&gt;
&lt;p&gt;Don&#39;t panic! We shall work through this line by line. Right at the beginning, you will see I hard coded into &lt;code&gt;index.html&lt;/code&gt; the &lt;code&gt;div&lt;/code&gt; with an id of &amp;quot;yourcart&amp;quot;. Here I give Backbone a reference to it. From this Backbone will also create &lt;code&gt;this.$el&lt;/code&gt;, a jQuery reference to the element. Of course, I&#39;ve actually done this already by setting &lt;code&gt;el&lt;/code&gt; to be &lt;code&gt;$(&amp;quot;#yourcart&amp;quot;)&lt;/code&gt; but it&#39;s still handy to know.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;initialize()&lt;/code&gt; method tells the view which collection to use, which I set to &lt;code&gt;cartCollection&lt;/code&gt;, which we set up earlier. I then make it call its own &lt;code&gt;render()&lt;/code&gt; method. The &lt;code&gt;render&lt;/code&gt; method takes the collection, and then uses &lt;code&gt;each&lt;/code&gt; to loop through each item within the collection. The first argument is the iterator function, in which I just call &lt;code&gt;renderItem()&lt;/code&gt;, passing the item in. The second argument is the context, which I pass in as &lt;code&gt;this&lt;/code&gt;. This means the function is invoked with the value of &lt;code&gt;this&lt;/code&gt; equal to whatever &lt;code&gt;this&lt;/code&gt; was when it was invoked. In my case, this will mean &lt;code&gt;this&lt;/code&gt; refers to the &lt;code&gt;CartCollectionView&lt;/code&gt; object&lt;/p&gt;
&lt;p&gt;Finally, &lt;code&gt;renderItem()&lt;/code&gt; takes an item, creates a new &lt;code&gt;ItemView()&lt;/code&gt; for that specific Item, passing in the &lt;code&gt;model&lt;/code&gt; property. From there we append the compiled &lt;code&gt;ItemView&lt;/code&gt; template (remember the discussion about returning &lt;code&gt;this&lt;/code&gt; within &lt;code&gt;ItemView&lt;/code&gt; earlier? This was why) to &lt;code&gt;this.$el&lt;/code&gt;, which is &lt;code&gt;$(&amp;quot;#yourcart&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That&#39;s it. Although the code looks pretty overwhelming on the surface, once you look into it it&#39;s not so bad. Finally, all we need to do is instantiate a new instance of our main view when the DOM is ready:&lt;/p&gt;
&lt;p&gt;$(function() {
var cart = new CartCollectionView();
});&lt;/p&gt;
&lt;p&gt;And then (after a quick bit of CSS) you&#39;ll see this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.skitch.com/20120422-k2f196g9jeuw8578hxcsb591i8.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;I&#39;m not going to cover the CSS, as I&#39;m no designer, but it&#39;s in the repository if you want to take a look. It&#39;s hardily design of the century, mind.&lt;/p&gt;
&lt;p&gt;So, at this point we&#39;re done for today. We&#39;ve done a lot of stuff, but I bet you&#39;ve got a lot of questions, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do I add to a collection after initialising it?&lt;/li&gt;
&lt;li&gt;How can I show a filtered set of my objects?&lt;/li&gt;
&lt;li&gt;How do I let a user add a new item?&lt;/li&gt;
&lt;li&gt;How do I unit test my Backbone applications?&lt;/li&gt;
&lt;li&gt;Can I use Backbone.js with CoffeeScript?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And plenty more. I hope to answer all of the above &amp;amp; more in the future. Backbone is a big topic, there&#39;s lots of cool stuff it&#39;s capable of &amp;amp; today we&#39;ve really barely scratched the surface. As always, any questions please leave a comment &amp;amp; I will answer them all in the next part, which will come soon. Code for this tutorial is &lt;a href=&quot;https://github.com/jackfranklin/JS-Playground-Backbone&quot;&gt;on the Github repository&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Beginning Node.js</title>
    <link href="http://www.jackfranklin.co.uk/blog/beginning-node-js-express-tutorial/"/>
    <updated>2012-04-25T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/beginning-node-js-express-tutorial/</id>
    <content type="html">&lt;p&gt;Unless you&#39;ve been living under a rock for the past 12 months or so, you&#39;ve probably heard of &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;. Simply put, Node is JavaScript on the server.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Node.js is a platform built on Chrome&#39;s JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.&lt;/em&gt; (taken from the Node.js homepage).&lt;/p&gt;
&lt;p&gt;Node takes JavaScript onto the server, which means it&#39;s possible to write your entire application in JavaScript, using it for both the server side, handling requests &amp;amp; rendering views, and then on the front-end as we always have done. Whilst this isn&#39;t going to be an official tutorial series, I&#39;ll be writing a fair bit on Node in the future.&lt;/p&gt;
&lt;p&gt;Today we will look at installing Node &amp;amp; the package manager, NPM (really easy) and then the traditional &amp;quot;Hello World&amp;quot; tutorial. Once that&#39;s done we will take a look about other resources to make Node development easier, then in future tutorials we will use them.&lt;/p&gt;
&lt;p&gt;There&#39;s two ways to install Node. You can download the official package from the &lt;a href=&quot;http://nodejs.org/&quot;&gt;website&lt;/a&gt;. Node runs on Linux, OS X &amp;amp; Windows. A word of warning: I am a Mac user myself and throughout this tutorial I will be using it exclusively. Although everything should work independent of OS, I wont be checking it myself.&lt;/p&gt;
&lt;p&gt;If you&#39;re a Homebrew user (a package manager for OS X) you can get Node with &lt;code&gt;brew install node&lt;/code&gt; and then NPM with: &lt;code&gt;curl http://npmjs.org/install.sh | sh&lt;/code&gt;. NPM is Node&#39;s package manager, similar to how Rubygems manages Gems. Despite its relative infancy, there are a lot of very useful packages out there. It&#39;s worth having Node &amp;amp; NPM installed just for convenience. A large amount of JS resources are installed via NPM, including CoffeeScript &amp;amp; Grunt.js.&lt;/p&gt;
&lt;p&gt;Now we&#39;ve got it installed, lets do the &amp;quot;Hello World&amp;quot; example. Create a new directory &amp;amp; within that create &lt;code&gt;helloworld.js&lt;/code&gt;. The idea here is that we will create a simple server, that when we visit a page will give us a plain text page back with just the line &amp;quot;Hello World&amp;quot; in. To do this we want to use the &lt;code&gt;http&lt;/code&gt; package, which is installed by default. In Node to load in a module or package you&#39;ve installed, we use &lt;code&gt;require&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;var http = require(&#39;http&#39;);&lt;/p&gt;
&lt;p&gt;Once we&#39;ve done that we can then get at the methods within that module through the &lt;code&gt;http&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;The next step is to create a server, which is done through the &lt;code&gt;createServer&lt;/code&gt; method, which takes a function as its argument. This function is passed in details on the request &amp;amp; the response:&lt;/p&gt;
&lt;p&gt;http.createServer(function(req, res) {
});&lt;/p&gt;
&lt;p&gt;Within this function all I wanted to do is return a plain text page with the line &amp;quot;Hello World&amp;quot;. It&#39;s really easy:&lt;/p&gt;
&lt;p&gt;res.writeHead(200, {&#39;Content-Type&#39; : &#39;text/plain&#39;});
res.end(&#39;Hello World&#92;n&#39;);&lt;/p&gt;
&lt;p&gt;The first line writes the HTTP header, including the status &amp;amp; more importantly the content type, which in this instance is just plain text. I then end the response from the server with the line &amp;quot;Hello World&amp;quot;.&lt;/p&gt;
&lt;p&gt;Finally, we need to tell the server to listen on a specific URL &amp;amp; port. We can chain this onto the &lt;code&gt;createServer&lt;/code&gt; method:&lt;/p&gt;
&lt;p&gt;http.createServer(function(req, res) {}).listen(1337, &#39;127.0.0.1&#39;);&lt;/p&gt;
&lt;p&gt;Putting that all together, we get:
var http = require(&#39;http&#39;);
http.createServer(function(req, res) {
res.writeHead(200, {&#39;Content-Type&#39; : &#39;text/plain&#39;});
res.end(&#39;Hello World&#92;n&#39;);
}).listen(1337, &#39;127.0.0.1&#39;);
To run this, run &lt;code&gt;node helloworld.js&lt;/code&gt; in your terminal, and then visit &lt;code&gt;http://127.0.0.1:1337&lt;/code&gt; in your browser. You should see:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/3b2t2r1Z3y3o3W2u0x2O/Screen%20Shot%202012-04-25%20at%2000.03.12.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;It&#39;s as easy as that. However, in most real world projects, people don&#39;t tend to just use Node. There&#39;s a few frameworks that have sprung up. The most popular at the moment is &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express JS&lt;/a&gt;. I will be covering Express in much more detail in future tutorials, however for now lets see how we&#39;d achieve the &amp;quot;Hello World&amp;quot; demo in Express. Once you start writing an app that has a lot of dependencies, it&#39;s a good idea to keep track of them. In Rails you have a Gemfile, in Node &amp;amp; NPM you have &lt;code&gt;package.json&lt;/code&gt;. Create this in the root directory and just give it a name &amp;amp; version:&lt;/p&gt;
&lt;p&gt;{
&amp;quot;name&amp;quot; : &amp;quot;JS Playground Hello World&amp;quot;,
&amp;quot;version&amp;quot; : &amp;quot;0.0.1&amp;quot;
}&lt;/p&gt;
&lt;p&gt;To install express, in your terminal type &lt;code&gt;npm install express --save&lt;/code&gt;. This will install express but also add it to your &lt;code&gt;package.json&lt;/code&gt;. If you take a look at &lt;code&gt;package.json&lt;/code&gt; now, you&#39;ll see:&lt;/p&gt;
&lt;p&gt;{
&amp;quot;name&amp;quot;: &amp;quot;JS Playground Hello World&amp;quot;,
&amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;,
&amp;quot;dependencies&amp;quot;: {
&amp;quot;express&amp;quot;: &amp;quot;~2.5.9&amp;quot;
}
}&lt;/p&gt;
&lt;p&gt;This means if someone clones our project, for example, they can go into the directory &amp;amp; run &lt;code&gt;npm install&lt;/code&gt;. NPM then looks at our &lt;code&gt;package.json&lt;/code&gt; file and automatically installs the dependencies. This makes it easier all round. It&#39;s worth noting two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NPM only updated our &lt;code&gt;package.json&lt;/code&gt; because I passed it the &lt;code&gt;--save&lt;/code&gt; flag. If I hadn&#39;t done that, it would not have touched the JSON file.&lt;/li&gt;
&lt;li&gt;If your &lt;code&gt;package.json&lt;/code&gt; is invalid, NPM will NOT update it &amp;amp; also will not show any error messages, so be careful. This had me stuck for a while (in my opinion they would be better off showing an error message).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Right, so we now have Express installed, so lets take a look at that &amp;quot;Hello World&amp;quot;. The first thing we do is require express. We can do this through &lt;code&gt;require()&lt;/code&gt;. We can also immediately use Express&#39; &lt;code&gt;createServer()&lt;/code&gt; method to set it up. This returns an object with all the methods we need, so I save that to a variable &lt;code&gt;app&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;var app = require(&#39;express&#39;).createServer();&lt;/p&gt;
&lt;p&gt;Then we need to tell it that when the user visits the index page, to just send back &amp;quot;Hello World&amp;quot;. This is very straight forward:&lt;/p&gt;
&lt;p&gt;app.get(&#39;/&#39;, function(req, res) {
res.send(&amp;quot;Hello World&amp;quot;);
});&lt;/p&gt;
&lt;p&gt;This says that when we receive a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/&lt;/code&gt; (the index / home page), to send back the text &amp;quot;Hello World&amp;quot;. Easy as that. Finally, we need to give it a port to listen on:&lt;/p&gt;
&lt;p&gt;app.listen(3000);&lt;/p&gt;
&lt;p&gt;Putting that together gives us:&lt;/p&gt;
&lt;p&gt;var app = require(&#39;express&#39;).createServer();
app.get(&#39;/&#39;, function(req, res) {
res.send(&amp;quot;Hello World&amp;quot;);
});&lt;/p&gt;
&lt;p&gt;app.listen(3000);&lt;/p&gt;
&lt;p&gt;Run it again like before:&lt;/p&gt;
&lt;p&gt;node helloworld.js&lt;/p&gt;
&lt;p&gt;And visit &lt;code&gt;http://127.0.0.1:3000&lt;/code&gt;. You&#39;ll see exactly the same as last time. You can see hopefully that doing things with Express makes sense. It does a lot of the work for us. I&#39;ll be exploring Express in further tutorials.&lt;/p&gt;
&lt;p&gt;With that it&#39;s time to round up this article. Hopefully this has served as a good introduction to Node.js &amp;amp; NPM. In future tutorials I&#39;ll be doing all sorts of things with Node &amp;amp; Express, as well as other things, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating a Node module&lt;/li&gt;
&lt;li&gt;Using CoffeeScript with Node&lt;/li&gt;
&lt;li&gt;Unit testing Node applications&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And a whole lot more. As always, if you have any questions, feedback or requests for future tutorials, please do leave a comment.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A jQuery Plugin with Grunt &amp;amp; QUnit</title>
    <link href="http://www.jackfranklin.co.uk/blog/a-jquery-plugin-with-grunt-qunit/"/>
    <updated>2012-04-27T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/a-jquery-plugin-with-grunt-qunit/</id>
    <content type="html">&lt;p&gt;Today we&#39;re going to take a look at writing a jQuery plugin. There&#39;s a number of different ways to go about structuring jQuery plugins &amp;amp; hence a lot of tutorials differ. I&#39;ll show you how I would do it but also show examples of how others would do it &amp;amp; link you to alternative views. Along with developing the plugin, we will test it with unit tests through QUnit (my new favourite thing &lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/javascript-testing-qunit-1&quot;&gt;which I covered a couple of weeks back&lt;/a&gt;) and build it all with Grunt.js, &lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/grunt-js-command-line-tutorial&quot;&gt;which I covered last week&lt;/a&gt;. I&#39;ll be presuming some basic knowledge of jQuery, QUnit &amp;amp; Grunt; if you&#39;re not familiar with either Grunt or QUnit, those links above to previous tutorials should get you going.&lt;/p&gt;
&lt;p&gt;To write this tutorial, I wanted to come up with a proper idea for a plugin and I decided to take a look at the first jQuery plugin I ever wrote, which was called &amp;quot;jQuote&amp;quot;. This plugin takes some text &amp;amp; creates a quote from it as a &lt;code&gt;blockquote&lt;/code&gt; element, the idea being then it can be styled as a pull quote, much like you see in magazines. This plugin was written as my first and consequently I don&#39;t like it. Today I&#39;m going to show you how I&#39;d go about rewriting it, more effectively and with unit tests. In fact, I won&#39;t even test it in the browser until the very end, as all the development will be test driven.&lt;/p&gt;
&lt;p&gt;So, the first thing I&#39;m going to do is set up a new directory for my plugin, which this time round is going to be called jQuery PullQuote. I create a Git repository, and then run &lt;code&gt;grunt init:jquery&lt;/code&gt; to set up a new jQuery plugin project. Grunt asks me questions about my project &amp;amp; after answering them I&#39;m left with a project set up. I then add them all to Git and here&#39;s what Grunt&#39;s made for me:
create mode 100644 LICENSE-GPL
create mode 100644 LICENSE-MIT
create mode 100644 README.md
create mode 100644 grunt.js
create mode 100644 libs/jquery/jquery.js
create mode 100644 libs/qunit/qunit.css
create mode 100644 libs/qunit/qunit.js
create mode 100644 package.json
create mode 100644 src/jquery.pullquote.js
create mode 100644 test/jquery.pullquote.html
create mode 100644 test/jquery.pullquote_test.js
You can see it&#39;s given me everything I need. Making a jQuery plugin means we should use QUnit, as QUnit is the testing framework of choice for jQuery. Lets head into &lt;code&gt;src/jquery.pullquote.js&lt;/code&gt; and get coding. Grunt gives us a bit of a framework:&lt;/p&gt;
&lt;p&gt;/*
* jquery.pullquote
* https://github.com/jackfranklin/jquery.pullquote
*
* Copyright (c) 2012 Jack Franklin
* Licensed under the MIT, GPL licenses.
*/&lt;/p&gt;
&lt;p&gt;(function($) {&lt;/p&gt;
&lt;p&gt;// Collection method.
$.fn.awesome = function() {
return this.each(function() {
$(this).html(&#39;awesome&#39;);
});
};&lt;/p&gt;
&lt;p&gt;// Static method.
$.awesome = function() {
return &#39;awesome&#39;;
};&lt;/p&gt;
&lt;p&gt;// Custom selector.
$.expr[&#39;:&#39;].awesome = function(elem) {
return elem.textContent.indexOf(&#39;awesome&#39;) &amp;gt;= 0;
};&lt;/p&gt;
&lt;p&gt;}(jQuery));&lt;/p&gt;
&lt;p&gt;I&#39;m going to be using the first approach:&lt;/p&gt;
&lt;p&gt;$.fn.pullQuote = function(opts) {
opts = $.extend({}, $.fn.pullQuote.options, opts);
};&lt;/p&gt;
&lt;p&gt;$.fn.pullQuote.options = {
outputClass: &amp;quot;pullquote&amp;quot;,
outputElem: &amp;quot;blockquote&amp;quot;,
insertAfter: &amp;quot;elem&amp;quot;
};&lt;/p&gt;
&lt;p&gt;In one step there a fair amount has happened, so lets take a moment to have a look. I&#39;ve set up my function as &lt;code&gt;$.fn.pullQuote&lt;/code&gt; which means it gets called on a jQuery collection, for example: &lt;code&gt;$(&amp;quot;span&amp;quot;).pullQuote();&lt;/code&gt;. You can also pass in an optional object of options. The line:&lt;/p&gt;
&lt;p&gt;opts = $.extend({}, $.fn.pullQuote.options, opts);&lt;/p&gt;
&lt;p&gt;Takes anything I have in &lt;code&gt;opts&lt;/code&gt;, overrides that property in &lt;code&gt;$.fn.pullQuote.options&lt;/code&gt; and stores the formed object into &lt;code&gt;opts&lt;/code&gt;, which overrides the &lt;code&gt;opts&lt;/code&gt; passed into the function.&lt;/p&gt;
&lt;p&gt;The reasoning for doing this is so people can override our defaults on a global level. If this plugin is being used 3-4 times, it&#39;s quicker to change &lt;code&gt;$.fn.pullQuote.options&lt;/code&gt; than pass it into &lt;code&gt;$(&amp;quot;span&amp;quot;).pullQuote()&lt;/code&gt; every time. However, I&#39;ve written this code, but not tested it! Lets quickly write some tests:&lt;/p&gt;
&lt;p&gt;test(&amp;quot;defaults&amp;quot;, function() {
ok($.fn.pullQuote.options, &amp;quot;options set up correctly&amp;quot;);
equal($.fn.pullQuote.options.insertAfter, &amp;quot;elem&amp;quot;, &amp;quot;default global options are set&amp;quot;);
$.fn.pullQuote.options.insertAfter = &amp;quot;test&amp;quot;;
equal($.fn.pullQuote.options.insertAfter, &amp;quot;test&amp;quot;, &amp;quot;can change the defaults globally&amp;quot;);
});&lt;/p&gt;
&lt;p&gt;You can run them through grunt with &lt;code&gt;grunt qunit&lt;/code&gt;. Alternatively, you can run &lt;code&gt;grunt watch&lt;/code&gt; and it will run the tests for you when save a file. Those tests all pass, so we&#39;re on the right track.&lt;/p&gt;
&lt;p&gt;From now on, I&#39;ll write the tests first, as I should. Because our plugin interacts with DOM elements, I need to create some test HTML for us to work with. QUnit lets us put this in a &lt;code&gt;div&lt;/code&gt; with an id of &lt;code&gt;qunit-fixture&lt;/code&gt;. We can then get at this HTML in our tests, so this is a useful way to test plugins that interact with &amp;amp; manipulate the DOM. I&#39;m going to create &lt;code&gt;span&lt;/code&gt; with some text. The plugin should take this text and add a new quote after the &lt;code&gt;h2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;div id=&quot;qunit-fixture&quot;&gt;
&lt;p&gt;this is some text &lt;span&gt;with a totally awesome quote&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;h2&gt;Quote&lt;/h2&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;The first thing I want to ensure is that my plugin is chainable. People should be able to do &lt;code&gt;$(&amp;quot;span&amp;quot;).pullQuote().fadeOut().addClass(&amp;quot;foo&amp;quot;)&lt;/code&gt;, as they can with all jQuery methods. Here&#39;s the test I use:&lt;/p&gt;
&lt;p&gt;test(&amp;quot;chainable&amp;quot;, function() {
ok($(&amp;quot;p span&amp;quot;).pullQuote().addClass(&amp;quot;testing&amp;quot;), &amp;quot;can be chained&amp;quot;);
equal($(&amp;quot;p span&amp;quot;).attr(&amp;quot;class&amp;quot;), &amp;quot;testing&amp;quot;, &amp;quot;class was added correctly from chaining&amp;quot;);
});&lt;/p&gt;
&lt;p&gt;The logic here is to call PullQuote, then add a class, and then check that the element was indeed given that. Passing this test is easy. After our &lt;code&gt;opts = $.extend();&lt;/code&gt; line, add in:&lt;/p&gt;
&lt;p&gt;return this.each(function() {
});&lt;/p&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; refers to the collection the plugin was called on as a jQuery object, so by returning it we&#39;re returning the jQuery object which means we can chain. Within the &lt;code&gt;each&lt;/code&gt; is where we&#39;ll add the code to make it work.&lt;/p&gt;
&lt;p&gt;So now we&#39;ve got the basics out the way, I want to write the tests in their entirity for the functionality. I&#39;ve set up my test HTML in &lt;code&gt;#qunit-fixture&lt;/code&gt; so I&#39;ll use that for the tests. I want to take the text within the &lt;code&gt;span&lt;/code&gt; and create a new element after the &lt;code&gt;h2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;test(&amp;quot;functionality&amp;quot;, function() {
$(&amp;quot;p span&amp;quot;).pullQuote({
insertAfter: &amp;quot;div h2&amp;quot;
});
ok($(&amp;quot;div blockquote&amp;quot;).length, &amp;quot;the blockquote has been created&amp;quot;);
equal($(&amp;quot;div blockquote&amp;quot;).text(), &amp;quot;with a totally awesome quote&amp;quot;, &amp;quot;it gets the right text&amp;quot;);
ok($(&amp;quot;div blockquote&amp;quot;).hasClass(&amp;quot;pullquote&amp;quot;), &amp;quot;applies class correctly&amp;quot;);&lt;/p&gt;
&lt;p&gt;});&lt;/p&gt;
&lt;p&gt;This checks that &lt;code&gt;div blockquote&lt;/code&gt; is now valid, because after &lt;code&gt;pullQuote&lt;/code&gt; is called it should create that for us. It then makes sure the text matches, and that it has the class set in the options. I also want to write tests to check the defaults can be overwritten fine:&lt;/p&gt;
&lt;p&gt;test(&amp;quot;changing defaults&amp;quot;, function() {
$(&amp;quot;p span&amp;quot;).pullQuote({
insertAfter: &amp;quot;div h2&amp;quot;,
outputClass: &amp;quot;testQuote&amp;quot;,
outputElem: &amp;quot;p&amp;quot;
});
ok($(&amp;quot;div p.testQuote&amp;quot;).length, &amp;quot;the blockquote has been created&amp;quot;);
equal($(&amp;quot;div p.testQuote&amp;quot;).text(), &amp;quot;with a totally awesome quote&amp;quot;, &amp;quot;it gets the right text&amp;quot;);
});&lt;/p&gt;
&lt;p&gt;That does much the same as the prior tests, but this time overriding the defaults &amp;amp; then checking the plugin took them into account. The actual code to implement this is really simple:&lt;/p&gt;
&lt;p&gt;return this.each(function() {
var elem = $(this),
text = elem.text(),
newElem = $(&amp;quot;&amp;lt;&amp;quot; + opts.outputElem + &amp;quot;/&amp;gt;&amp;quot;, {
&amp;quot;class&amp;quot;: opts.outputClass,
text: text
}).insertAfter(opts.insertAfter);
});&lt;/p&gt;
&lt;p&gt;Line by line, we:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Wrap the current item in a jQuery object,&lt;/li&gt;
&lt;li&gt;Get the text &amp;amp; store it.&lt;/li&gt;
&lt;li&gt;Create a new element of the type the option is set as,&lt;/li&gt;
&lt;li&gt;Add the class set in options &amp;amp; the text we got earlier,&lt;/li&gt;
&lt;li&gt;Insert it after whatever selector is in &lt;code&gt;insertAfter&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Running the tests now should give you a full passing suite of 10 assertions.&lt;/p&gt;
&lt;p&gt;Now this plugin is very basic, and there&#39;s a lot more I want to expand on, but for now that will do, and I will revist this in the future. For now, lets imagine I want to release this onto Github. To do this, we&#39;ll harness the power of Grunt. Run &lt;code&gt;grunt&lt;/code&gt; in the command line. This will execute grunt&#39;s default task, which by default will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run the code through JSLint&lt;/li&gt;
&lt;li&gt;Run the test suite&lt;/li&gt;
&lt;li&gt;Concatenate all your JS src files into one.&lt;/li&gt;
&lt;li&gt;Minify them.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If at any stage there are errors (say your tests fail), it will stop. It&#39;s now created the files &lt;code&gt;dist/jquery.pullquote.js&lt;/code&gt; and &lt;code&gt;dist.jquery.pullquote.min.js&lt;/code&gt; for us. Just like that. After that all I have to do is commit them, and then &lt;a href=&quot;https://github.com/jackfranklin/jquery.pullquote&quot;&gt;push them to Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope this article has shown you what I think is a good workflow for developing a jQuery Plugin, using Grunt to do a lot of the hard work for us (I absolutely love using Grunt) and writing Unit Tests. The functionality implemented here is very, very basic but I wanted this to serve as an introduction, I&#39;ve got tutorials planned soon that attempt to implement much more complicated functionality. As always, please leave a comment &amp;amp; I will get back to you.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Node.js: A Todo App with Express</title>
    <link href="http://www.jackfranklin.co.uk/blog/node-js-a-todo-app-with-express/"/>
    <updated>2012-04-30T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/node-js-a-todo-app-with-express/</id>
    <content type="html">&lt;p&gt;So &lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/beginning-node-js-express-tutorial&quot;&gt;last time&lt;/a&gt; we installed Node &amp;amp; did the traditional &amp;quot;Hello World&amp;quot; example with Node &amp;amp; then using the Express framework. Today we&#39;re going to make a simple app using Express from the beginning. We will generate the app with Express &amp;amp; then explore Express further, including Unit testing. This will most likely be a multi-part tutorial. The app we&#39;re building is a very simple &amp;quot;To Do&amp;quot; application. I know it&#39;s boring, but it&#39;s simple enough that we can focus on Express &amp;amp; Node rather than the implementation of the app.&lt;/p&gt;
&lt;p&gt;The first thing to do is install Express globally:&lt;/p&gt;
&lt;p&gt;npm install express -g&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I am presuming here basic knowledge of Node, NPM &amp;amp; Express. If you&#39;re not familiar, you might be best off &lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/beginning-node-js-express-tutorial&quot;&gt;reading my tutorial from last week&lt;/a&gt; before continuing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Installing Express globally will give us the &lt;code&gt;express&lt;/code&gt; command in our command line &amp;amp; we can use this to generate our new app:&lt;/p&gt;
&lt;p&gt;express new JSPlaygroundToDo&lt;/p&gt;
&lt;p&gt;You should see something like this:
→ express new JSPlaygroundToDo
create : JSPlaygroundToDo
create : JSPlaygroundToDo/package.json
create : JSPlaygroundToDo/app.js
create : JSPlaygroundToDo/public
create : JSPlaygroundToDo/public/javascripts
create : JSPlaygroundToDo/public/images
create : JSPlaygroundToDo/public/stylesheets
create : JSPlaygroundToDo/public/stylesheets/style.css
create : JSPlaygroundToDo/routes
create : JSPlaygroundToDo/routes/index.js
create : JSPlaygroundToDo/views
create : JSPlaygroundToDo/views/layout.jade
create : JSPlaygroundToDo/views/index.jade
dont forget to install dependencies:
$ cd JSPlaygroundToDo &amp;amp;&amp;amp; npm install&lt;/p&gt;
&lt;p&gt;Express has set up the basic skeleton of our application for us. Lets make sure we&#39;ve got all the dependencies, so cd into the folder &amp;amp; run &lt;code&gt;npm install&lt;/code&gt;. This will check every package in &lt;code&gt;package.json&lt;/code&gt; is indeed installed.&lt;/p&gt;
&lt;p&gt;Once that&#39;s done, lets just run it &amp;amp; see what we have. In the command line type &lt;code&gt;node app.js&lt;/code&gt; to run the app, and then head to &lt;code&gt;http://localhost:3000&lt;/code&gt;. You should, if everything&#39;s working, see this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/3P2u133L0v2C3J3M1A2Y/Screen%20Shot%202012-04-29%20at%2017.38.26.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;One thing that confused me here is that many tutorials say that running &lt;code&gt;npm start&lt;/code&gt; should run your server, but for me it didn&#39;t. This is because NPM looks for a file named server.js, and ours is called app.js. There&#39;s two choices here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rename &lt;code&gt;app.js&lt;/code&gt; to &lt;code&gt;server.js&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Tell NPM to look for &lt;code&gt;app.js&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Either is fine, I&#39;m going to do the latter. Bear in mind if you rename to &lt;code&gt;server.js&lt;/code&gt;, from now on in this tutorial where I refer to &lt;code&gt;app.js&lt;/code&gt;, you need to use server.js. To do this, add this to &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;, &amp;quot;scripts&amp;quot; : {
&amp;quot;start&amp;quot;: &amp;quot;node app.js&amp;quot;
}&lt;/p&gt;
&lt;p&gt;You will notice there the random comma at the start of that snippet. By default NPM structures its package.json file like that, to avoid you missing out commas:&lt;/p&gt;
&lt;p&gt;{
&amp;quot;name&amp;quot;: &amp;quot;application-name&amp;quot;
, &amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;
, &amp;quot;private&amp;quot;: true
, &amp;quot;dependencies&amp;quot;: {
&amp;quot;express&amp;quot;: &amp;quot;2.5.8&amp;quot;
, &amp;quot;jade&amp;quot;: &amp;quot;&amp;gt;= 0.0.1&amp;quot;
}
, &amp;quot;scripts&amp;quot; : {
&amp;quot;start&amp;quot;: &amp;quot;node app.js&amp;quot;
}
}&lt;/p&gt;
&lt;p&gt;Whilst I&#39;m not a fan personally, I&#39;ll happily abide by it when working with Express. As I mentioned last time, if your JSON file is broken, you wont get any errors, it just wont work, so be careful when editing it.&lt;/p&gt;
&lt;p&gt;Now, running &lt;code&gt;npm start&lt;/code&gt; does indeed work:&lt;/p&gt;
&lt;p&gt;→ npm start&lt;/p&gt;
&lt;p&gt;&amp;gt; application-name@0.0.1 start /Users/JackFranklin/Dropbox/Sites/JSPlaygroundToDo
&amp;gt; node app.js&lt;/p&gt;
&lt;p&gt;By default, Express uses the &lt;a href=&quot;http://jade-lang.com/&quot;&gt;Jade&lt;/a&gt; templating engine. This is a bit odd at first, but actually I grew to like Jade quickly. In future tutorials I&#39;ll show you how to change from Jade if you&#39;d rather, but for now we&#39;ll stick with it. Head to &lt;code&gt;views/index.jade&lt;/code&gt; to see our index page:
h1= title
p Welcome to #{title}
&lt;code&gt;h1= title&lt;/code&gt; just says that we should create a new &lt;code&gt;h1&lt;/code&gt; element and put within it the contents of &lt;code&gt;title&lt;/code&gt;, which is a variable we set when the template is called.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;p Welcome to #{title}&lt;/code&gt; creates a new paragraph and sets the text, where &lt;code&gt;#{title}&lt;/code&gt; will be replaced with whatever we call the variable. So, lets see how we render a view. In &lt;code&gt;app.js&lt;/code&gt;, you will see:&lt;/p&gt;
&lt;p&gt;app.get(&#39;/&#39;, routes.index);&lt;/p&gt;
&lt;p&gt;So, when a GET request is fired to &lt;code&gt;/&lt;/code&gt;, it calls the method &lt;code&gt;routes.index&lt;/code&gt;, which is defined in &lt;code&gt;routes/index.js&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;exports.index = function(req, res){
res.render(&#39;index&#39;, { title: &#39;Express&#39; })
};&lt;/p&gt;
&lt;p&gt;So you can see here all this function does is render the &lt;code&gt;index&lt;/code&gt; view, setting the &lt;code&gt;title&lt;/code&gt; variable to &amp;quot;Express&amp;quot;. Lets see how we might create an about page, at the url &lt;code&gt;/about&lt;/code&gt;. Head over to &lt;code&gt;routes/index.js&lt;/code&gt; and add in:&lt;/p&gt;
&lt;p&gt;exports.about = function(req, res){
res.render(&#39;index&#39;, { title: &#39;About&#39; })
};&lt;/p&gt;
&lt;p&gt;Here I&#39;m still rendering the &lt;code&gt;index&lt;/code&gt; view but passing in a title of &lt;code&gt;About&lt;/code&gt;. Then, within &lt;code&gt;app.js&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;app.get(&#39;/about&#39;, routes.about);&lt;/p&gt;
&lt;p&gt;You may be wondering how &lt;code&gt;app.js&lt;/code&gt; knows about &lt;code&gt;routes.about&lt;/code&gt; when we defined this as &lt;code&gt;exports.about&lt;/code&gt; in our routes file. This is because right at the top of &lt;code&gt;app.js&lt;/code&gt; we have:
var express = require(&#39;express&#39;)
, routes = require(&#39;./routes&#39;);&lt;/p&gt;
&lt;p&gt;You can see here we set the variable &lt;code&gt;routes&lt;/code&gt; to the result of loading in the &lt;code&gt;routes&lt;/code&gt; folder. Then, within &lt;code&gt;routes/index.js&lt;/code&gt;, when we define &lt;code&gt;exports.about&lt;/code&gt;, &lt;code&gt;routes&lt;/code&gt; gets set to the value of &lt;code&gt;exports&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, quit &amp;amp; start the server, and head to &lt;code&gt;http://localhost:3000/about&lt;/code&gt;. You will see:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/1g2r340j3H0e0p160F1y/Screen%20Shot%202012-04-29%20at%2018.34.36.png&quot; alt=&quot;&quot;&gt;.&lt;/p&gt;
&lt;p&gt;You might notice there we had to restart the server for these changes to take affect. This gets very annoying, very quickly. Having to stop &amp;amp; start the Node server whenever we make a single change is not what I want to be doing. Thankfully, others thought this too and there are solutions to stop us having to do this. One such person who thought this is Remy Sharp, who made &lt;a href=&quot;http://remysharp.com/2010/10/12/nodejs-rapid-development-nodemon/&quot;&gt;nodemon&lt;/a&gt; to do this for us. Install it with &lt;code&gt;npm install nodemon -g&lt;/code&gt; and then launch the server again with:&lt;/p&gt;
&lt;p&gt;nodemon app.js 3000&lt;/p&gt;
&lt;p&gt;You&#39;ll see everything now works. However, now head into &lt;code&gt;routes/index.js&lt;/code&gt; and change anything. You will see in your terminal this output:&lt;/p&gt;
&lt;p&gt;29 Apr 18:37:47 - [nodemon] restarting due to changes...
29 Apr 18:37:47 - [nodemon] /Users/JackFranklin/Dropbox/Sites/JSPlaygroundToDo/routes/index.js
29 Apr 18:37:47 - [nodemon] starting &lt;code&gt;node app.js 3000&lt;/code&gt;
Express server listening on port 3000 in development mode&lt;/p&gt;
&lt;p&gt;You see what just happened here? Nodemon detected a file change &amp;amp; restarted our server for us. Easy. I&#39;ll be using nodemon from now on to start our server, although the times we have to do it manually will be far less now, thanks to nodemon.&lt;/p&gt;
&lt;p&gt;One thing that bugs me is that the routes file is called &lt;code&gt;index.js&lt;/code&gt;. You might think differently, but for me that suggests that &lt;code&gt;index.js&lt;/code&gt; deals just with the index route. I prefer mine to be called &lt;code&gt;routes.js&lt;/code&gt;. If you&#39;d like to do the same, rename &lt;code&gt;routes/index.js&lt;/code&gt; to &lt;code&gt;routes/routes.js&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;→ mv routes/index.js routes/routes.js&lt;/p&gt;
&lt;p&gt;Then in &lt;code&gt;app.js&lt;/code&gt;, change the &lt;code&gt;require()&lt;/code&gt; call to:&lt;/p&gt;
&lt;p&gt;routes = require(&#39;./routes/routes&#39;);&lt;/p&gt;
&lt;p&gt;And run the server again. You should see it all working, nothing should have changed. Feel free to change the routes file to whatever you like. In the future we will explore how to have multiple route files, if you prefer to set your app up like this.&lt;/p&gt;
&lt;p&gt;To wrap this up, I want to talk briefly about Jade. You may have realised our template was very bare, we just have a &lt;code&gt;h1&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; right now. There&#39;s actually another template file, &lt;code&gt;views/layout.jade&lt;/code&gt; which defines our general template:&lt;/p&gt;
&lt;p&gt;!!!
html
head
title= title
link(rel=&#39;stylesheet&#39;, href=&#39;/stylesheets/style.css&#39;)
body!= body&lt;/p&gt;
&lt;p&gt;The first line creates a Doctype, however the doctype it produces is an xHTML doctype. I prefer to use the HTML 5 doctype, which we can do just by replacing &lt;code&gt;!!!&lt;/code&gt; with &lt;code&gt;doctype5&lt;/code&gt;. Note that Jade files are compiled on request, so they do not require a server restart.&lt;/p&gt;
&lt;p&gt;The next line creates the &lt;code&gt;html&lt;/code&gt; tag. Instead of having opening &amp;amp; closing tags, we indent in to show the structure of our template. The other lines are fairly obvious. The most important line is:&lt;/p&gt;
&lt;p&gt;body!= body&lt;/p&gt;
&lt;p&gt;When you call &lt;code&gt;render&lt;/code&gt; on a view, the contents of that view are placed into &lt;code&gt;layout.jade&lt;/code&gt; as the &lt;code&gt;body&lt;/code&gt; variable. &lt;code&gt;!=&lt;/code&gt; is used here to tell Jade not to escape the contents of the body variable. By default Jade will use &lt;code&gt;=&lt;/code&gt;, which tells it to escape the variable, but as we&#39;re passing in HTML to the &lt;code&gt;body&lt;/code&gt; variable, we don&#39;t want Jade to escape it.&lt;/p&gt;
&lt;p&gt;With that I think it&#39;s time to call it a day. If you&#39;d like to check out the code, &lt;a href=&quot;https://github.com/jackfranklin/node-todo&quot;&gt;it&#39;s on Github&lt;/a&gt;. Next time we will actually make steps towards making our Todo application and talk about unit testing in Node.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A jQuery Plugin in CoffeeScript</title>
    <link href="http://www.jackfranklin.co.uk/blog/a-jquery-plugin-in-coffeescript/"/>
    <updated>2012-05-04T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/a-jquery-plugin-in-coffeescript/</id>
    <content type="html">&lt;p&gt;So &lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/a-jquery-plugin-with-grunt-qunit&quot;&gt;last week&lt;/a&gt; I showed you how to write a basic jQuery plugin and today I want to take that plugin &amp;amp; convert it into CoffeeScript.&lt;/p&gt;
&lt;p&gt;The first thing to do is open up that project again, and within &lt;code&gt;src&lt;/code&gt;, create &lt;code&gt;jquery.pullquote-coffee.coffee&lt;/code&gt;. Then head into &lt;code&gt;tests/jquery.pullquote.html&lt;/code&gt; and change the line that includes the plugin to reference &lt;code&gt;../src/jquery.pullquote-coffee.js&lt;/code&gt;. I wont be using a browser at all to change this plugin over to CoffeeScript. I&#39;ll be using our QUnit tests.&lt;/p&gt;
&lt;p&gt;For those who have not heard of &lt;a href=&quot;http://www.coffeescript/&quot;&gt;CoffeeScript&lt;/a&gt;, it&#39;s a language created by Jeremy Ashkenas that gives us some nice syntax, abstracts common JavaScript problems away &amp;amp; makes it quicker to write JavaScript. The way it works is simple, you write CoffeeScript, compile it into JavaScript, and then include that file like you would any other JS file.&lt;/p&gt;
&lt;p&gt;Seeing as CoffeeScript is pretty easy to pick up, I&#39;ll cover features as I go. We&#39;ll only look at the basics today, with more to come in the future.&lt;/p&gt;
&lt;p&gt;The first thing you need to do is decide how you&#39;ll compile it. I like to use &lt;a href=&quot;http://www.livereload.com/&quot;&gt;LiveReload&lt;/a&gt;, which is a Mac (and soon to be Windows) app that compiles automatically for you, if I have a lot of different compilations going on (perhaps CoffeeScript, SASS &amp;amp; HAML, for example).&lt;/p&gt;
&lt;p&gt;The other option though is to install it through the terminal, done using Node &amp;amp; NPM. If you&#39;ve not got those install, &lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/beginning-node-js-express-tutorial&quot;&gt;I wrote about how to install them last week&lt;/a&gt; so check that out &amp;amp; then come back here. Install CoffeeScript with:&lt;/p&gt;
&lt;p&gt;npm install -g coffee-script&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-g&lt;/code&gt; installs CoffeeScript globally, so it&#39;s available from the command line. You can then compile a JS file with:&lt;/p&gt;
&lt;p&gt;coffee --compile jquery.pullquote-coffee.coffee&lt;/p&gt;
&lt;p&gt;However this gets boring quickly, running this every time you want to compile it. You can use &lt;code&gt;watch&lt;/code&gt; to make CoffeeScript compile everytime you save your Coffee file:&lt;/p&gt;
&lt;p&gt;coffe --compile --watch jquery.pullquote-coffee.coffee&lt;/p&gt;
&lt;p&gt;That&#39;s how I&#39;ll be doing so today, however, there&#39;s one more thing to consider. By default, CoffeeScript wraps all your code within:&lt;/p&gt;
&lt;p&gt;(function() {
//your code here
}).call(this);&lt;/p&gt;
&lt;p&gt;Usually this is useful, it keeps our code contained &amp;amp; prevents us accidentally poluting the global namespace. In this instance however, we want to wrap our plugin within our own immediately invoked function:&lt;/p&gt;
&lt;p&gt;(function($) {&lt;/p&gt;
&lt;p&gt;})(jQuery);&lt;/p&gt;
&lt;p&gt;We can tell CoffeeScript to not wrap our code in that function by passing the &lt;code&gt;--bare&lt;/code&gt; option. So my final command for watching &amp;amp; compiling my coffee file is:&lt;/p&gt;
&lt;p&gt;coffee --compile --watch --bare jquery.pullquote-coffee.coffee&lt;/p&gt;
&lt;p&gt;So, now we&#39;ve got the compiling working, lets write the code. Firstly, load up the &lt;code&gt;.coffee&lt;/code&gt; file. Before we write code, run the QUnit tests in the terminal with &lt;code&gt;grunt qunit&lt;/code&gt;. You should see them all fail. Now it&#39;s time to make them all pass by writing our implementation in CoffeeScript. The first thing we need to replicate is the wrapping function:&lt;/p&gt;
&lt;p&gt;(function($) {&lt;/p&gt;
&lt;p&gt;})(jQuery);&lt;/p&gt;
&lt;p&gt;This looks like so in CoffeeScript:&lt;/p&gt;
&lt;p&gt;( ($) -&amp;gt;&lt;/p&gt;
&lt;p&gt;) jQuery&lt;/p&gt;
&lt;p&gt;Wow, what just happened there?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CoffeeScript replaces the &lt;code&gt;function&lt;/code&gt; keyword with just &lt;code&gt;-&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instead of passing in the variables after the &lt;code&gt;function&lt;/code&gt; keyword, in CoffeeScript you pass them in before. For example, something like:&lt;/p&gt;
&lt;p&gt;function(foo) {&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;Becomes:&lt;/p&gt;
&lt;p&gt;(foo) -&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There&#39;s also no need for braces in CoffeeScript, the language works on indentation. So where you would usually wrap some code in braces, in CoffeeScript you just indent by a tab. This can be a tab, 2 spaces, 4 spaces, whatever your preference. As long as you&#39;re consistent, CoffeeScript can deal with it.&lt;/p&gt;
&lt;p&gt;You also don&#39;t need to wrap function arguments in brackets when you call it. So something like:
someFunc(&amp;quot;hey&amp;quot;, 2, 5);
Becomes:&lt;/p&gt;
&lt;p&gt;someFunc &amp;quot;hey&amp;quot;, 2, 5&lt;/p&gt;
&lt;p&gt;If you want to add in brackets, you can. Sometimes I do it if a function takes lots of arguments, or if I&#39;m calling a function and passing it in the result of another function. You also need to use brackets when you want to call a function or access a property on the result of a function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You don&#39;t need to use semi colons.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we&#39;ve got the wrapping function sorted, it&#39;s time to declare our plugin function. This:&lt;/p&gt;
&lt;p&gt;$.fn.pullQuote = function(opts) {}&lt;/p&gt;
&lt;p&gt;Becomes:&lt;/p&gt;
&lt;p&gt;$.fn.pullQuote = (opts) -&amp;gt;&lt;/p&gt;
&lt;p&gt;And the next line&lt;/p&gt;
&lt;p&gt;opts = $.extend({}, $.fn.pullQuote.options, opts);&lt;/p&gt;
&lt;p&gt;Stays almost identical, I just choose to drop the brackets:&lt;/p&gt;
&lt;p&gt;opts = $.extend {}, $.fn.pullQuote.options, opts&lt;/p&gt;
&lt;p&gt;The next large block of code to convert starts with &lt;code&gt;return this.each(function() {&lt;/code&gt;. In CoffeeScript, &lt;code&gt;return&lt;/code&gt; is added automatically for you, much like Ruby, if you&#39;ve ever used that. So at the bottom of a function, instead of adding:&lt;/p&gt;
&lt;p&gt;return foo;&lt;/p&gt;
&lt;p&gt;I can just do:&lt;/p&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;p&gt;Some people find this not so clear and if you don&#39;t, you&#39;re fine to add in the &lt;code&gt;return&lt;/code&gt; keyword, it&#39;s again up to you. Obviously if you need to return from a function before the end, you still can:&lt;/p&gt;
&lt;p&gt;foo = -&amp;gt;
if x
return y&lt;/p&gt;
&lt;p&gt;z&lt;/p&gt;
&lt;p&gt;That function would return &lt;code&gt;y&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; exists, else it will return &lt;code&gt;z&lt;/code&gt;. CoffeeScript is pretty clever about knowing when you want a return statement, and when you don&#39;t.
So, back to our plugin. We&#39;ve got:&lt;/p&gt;
&lt;p&gt;return this.each(function() {&lt;/p&gt;
&lt;p&gt;But in CoffeeScript, we can do:&lt;/p&gt;
&lt;p&gt;this.each -&amp;gt;&lt;/p&gt;
&lt;p&gt;As this is the last block of code in our function, CoffeeScript knows to return it for us. Within the loop we have:
var elem = $(this),
text = elem.text(),
newElem = $(&amp;quot;&amp;lt;&amp;quot; + opts.outputElem + &amp;quot;/&amp;gt;&amp;quot;, {
&amp;quot;class&amp;quot;: opts.outputClass,
text: text
}).insertAfter(opts.insertAfter);&lt;/p&gt;
&lt;p&gt;Another easy CoffeeScript rule, &lt;code&gt;var&lt;/code&gt; is not needed. If you write:&lt;/p&gt;
&lt;p&gt;x = 2&lt;/p&gt;
&lt;p&gt;In CoffeeScript, the compiled JS will be:&lt;/p&gt;
&lt;p&gt;var x;
x = 2;&lt;/p&gt;
&lt;p&gt;Note the declaration will be hoisted to the top of its containing scope. In practise this is rarely an issue, but it&#39;s something to note. If you have:&lt;/p&gt;
&lt;p&gt;x = 2
someFunc()
y = 5&lt;/p&gt;
&lt;p&gt;That will compile to:&lt;/p&gt;
&lt;p&gt;var x, y;
x = 2;
someFunc():
y = 5;&lt;/p&gt;
&lt;p&gt;So, in our plugin we&#39;ve got &lt;code&gt;var elem = $(this)&lt;/code&gt;, I can replace this with:&lt;/p&gt;
&lt;p&gt;elem = $(this)&lt;/p&gt;
&lt;p&gt;I could also get rid of the brackets, but when using jQuery I tend to leave them in. For me it makes things clearer and I like to do it with jQuery because often you&#39;ll end up chaining things onto &lt;code&gt;$(this)&lt;/code&gt;, so adding brackets in first will maybe save time later.&lt;/p&gt;
&lt;p&gt;Now, previously we had:&lt;/p&gt;
&lt;p&gt;var elem = $(this),
text = elem.text(),&lt;/p&gt;
&lt;p&gt;(Note the commas), but because CoffeeScript sorts out &lt;code&gt;var&lt;/code&gt; for us, we don&#39;t need the commas and can just declare a variable on each new line:
this.each -&amp;gt;
elem = $(this)
text = elem.text()&lt;/p&gt;
&lt;p&gt;The next block we have to convert is:&lt;/p&gt;
&lt;p&gt;newElem = $(&amp;quot;&amp;lt;&amp;quot; + opts.outputElem + &amp;quot;/&amp;gt;&amp;quot;, {
&amp;quot;class&amp;quot;: opts.outputClass,
text: text
}).insertAfter(opts.insertAfter);&lt;/p&gt;
&lt;p&gt;Rather than do this one line at a time, I&#39;ll show you the fully converted code &amp;amp; then walk through it:&lt;/p&gt;
&lt;p&gt;newElem = $(&amp;quot;&amp;lt;#{opts.outputElem}/&amp;gt;&amp;quot;,
class: opts.outputClass
text: text
).insertAfter opts.insertAfter&lt;/p&gt;
&lt;p&gt;Going line by line:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CoffeeScript has a rather neat way of letting us put variables in the middle of strings. If you&#39;ve ever written Ruby you&#39;ll recognise this, it&#39;s very much the same syntax. Any &lt;code&gt;#{}&lt;/code&gt; that&#39;s within double quotes will be evaluated.
So:&lt;/p&gt;
&lt;p&gt;str = &amp;quot;Two plus two is #{2+2}&amp;quot;&lt;/p&gt;
&lt;p&gt;Will give:&lt;/p&gt;
&lt;p&gt;str = &amp;quot;Two plus two is &amp;quot; + 2+2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next, I pass in an object as the second argument. Except I don&#39;t have to use braces here, I can just indent by one tab. Also, I don&#39;t have to put quotes around the word &amp;quot;class&amp;quot;. CoffeeScript sees that I&#39;ve used a reserved word, and will automatically add quotes around it for me. How awesome is that? I also don&#39;t have to add a comma after the first property in my object, CoffeeScript does that for me too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, I call &lt;code&gt;insertAfter&lt;/code&gt; and pass in the correct option. That bit is pretty straight forward, I&#39;ve just dropped the brackets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The very last bit to convert is:&lt;/p&gt;
&lt;p&gt;$.fn.pullQuote.options = {
outputClass: &amp;quot;pullquote&amp;quot;,
outputElem: &amp;quot;blockquote&amp;quot;,
insertAfter: &amp;quot;elem&amp;quot;
};&lt;/p&gt;
&lt;p&gt;And that&#39;s written like so:
$.fn.pullQuote.options =
outputClass: &amp;quot;pullquote&amp;quot;
outputElem: &amp;quot;blockquote&amp;quot;
insertAfter: &amp;quot;elem&amp;quot;&lt;/p&gt;
&lt;p&gt;No braces, just indent in, and no commas needed either. Putting that all together, we have:&lt;/p&gt;
&lt;p&gt;( ($) -&amp;gt;&lt;/p&gt;
&lt;p&gt;$.fn.pullQuote = (opts) -&amp;gt;
opts = $.extend {}, $.fn.pullQuote.options, opts&lt;/p&gt;
&lt;p&gt;this.each -&amp;gt;
elem = $(this)
text = elem.text()
newElem = $(&amp;quot;&amp;lt;#{opts.outputElem}/&amp;gt;&amp;quot;,
class: opts.outputClass
text: text
).insertAfter opts.insertAfter&lt;/p&gt;
&lt;p&gt;$.fn.pullQuote.options =
outputClass: &amp;quot;pullquote&amp;quot;
outputElem: &amp;quot;blockquote&amp;quot;
insertAfter: &amp;quot;elem&amp;quot;
) jQuery&lt;/p&gt;
&lt;p&gt;And now running our QUnit tests will show 10 passes, out of 10. Job well done.&lt;/p&gt;
&lt;p&gt;In this rather quick paced tutorial, hopefully this has given you a glimse into why so many people are using CoffeeScript, and some of the advantages it will bring. In the future I&#39;ll look more in depth with CoffeeScript, and also show how you can use it when writing Node applications. As always, if you have a question, please do leave a comment.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A Pub Sub implementation in CoffeeScript</title>
    <link href="http://www.jackfranklin.co.uk/blog/a-pub-sub-implementation-in-coffeescript/"/>
    <updated>2012-05-06T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/a-pub-sub-implementation-in-coffeescript/</id>
    <content type="html">&lt;p&gt;A while back I wrote about creating a &lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/a-jquery-pub-sub-implementation&quot;&gt;Pub/Sub implementation in jQuery&lt;/a&gt; and said that I&#39;d revist the subject without relying on jQuery. Today I&#39;m going to do that but once again use &lt;a href=&quot;http://www.coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt;. As always I will be Unit testing, this time with Mocha, the &lt;a href=&quot;http://javascriptplayground.com/blog/2012/05/a-jquery-plugin-in-coffeescript&quot;&gt;same library I covered in the last tutorial&lt;/a&gt;. I will not be going over the very basics of using Mocha, so if you haven&#39;t used it before, please read that post first. Similarly, I will not be covering basic CoffeeScript, so please refer to that article if you&#39;re not familiar with the basics. For those not fans of CoffeeScript, in the future I&#39;ll be writing this from scratch with just JavaScript. The reason I use CoffeeScript today is that I&#39;ve had a lot of requests for it, so I thought I&#39;d merge a tutorial on &amp;quot;Advanced Coffeescript&amp;quot; into this Pub/Sub one.&lt;/p&gt;
&lt;p&gt;The Pub/Sub pattern (also known as the Observer pattern) is simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You can subscribe to an event, and add a function to execute when that event is called.&lt;/li&gt;
&lt;li&gt;You can publish events, invoking the functions of all the items subscribed to that event.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It&#39;s actually a very simple system to create. We&#39;ll be using CoffeeScript&#39;s class syntax to get this done. First however, I want to set up my testing. Create your &lt;code&gt;test/&lt;/code&gt; and &lt;code&gt;src/&lt;/code&gt; directories and add &lt;code&gt;pubsubtest.coffee&lt;/code&gt; and &lt;code&gt;pubsub.coffee&lt;/code&gt; to each of them respectively. Within your test file, add:
chai = require &#39;chai&#39;
expect = chai.expect
{Pubsub} = require &#39;../src/pubsub&#39;
Remembering you need Mocha &amp;amp; Chai installed. Please see the previous tutorial I linked to above if you need to do this. Last time round I used Chai&#39;s &lt;code&gt;should&lt;/code&gt; syntax to do tests, which are done more in the BDD style:&lt;/p&gt;
&lt;p&gt;someVal.should.equal &amp;quot;foo&amp;quot;&lt;/p&gt;
&lt;p&gt;Today however I&#39;m using Chai&#39;s &lt;code&gt;expect&lt;/code&gt; syntax, which gives me TDD style tests such as:&lt;/p&gt;
&lt;p&gt;expect(someVal).to.equal &amp;quot;foo&amp;quot;&lt;/p&gt;
&lt;p&gt;Personally I prefer the latter syntax, however use which ever one you prefer.
The last line includes my PubSub class, which we need to create before we do any more coding. Head into the source file and add:&lt;/p&gt;
&lt;p&gt;class Pubsub&lt;/p&gt;
&lt;p&gt;root = exports ? window
root.Pubsub = Pubsub&lt;/p&gt;
&lt;p&gt;That code creates our new class &amp;amp; exports it as &lt;code&gt;root.Pubsub&lt;/code&gt;, so we can then get at it in our tests using &lt;code&gt;{Pubsub} = require(&#39;../src/pubsub.coffee&#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The way this will work, is that the subscribe method should take three parameters, which are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The id of the item subscribing to the event, such as &amp;quot;module_chat&amp;quot;.&lt;/li&gt;
&lt;li&gt;The event to subscribe to, such as &amp;quot;new_message&amp;quot;.&lt;/li&gt;
&lt;li&gt;The function to execute when that event is published.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I will store these in an object and then store all items that are subscribed to an event in an array, so my object might look like this:&lt;/p&gt;
&lt;p&gt;subs = {
event1: [
{ id: &amp;quot;module1&amp;quot;, callback: function() {} },
{ id: &amp;quot;module2&amp;quot;, callback: function() {} }
]
}&lt;/p&gt;
&lt;p&gt;So the next step is to write tests for these:&lt;/p&gt;
&lt;p&gt;describe &#39;a subscription&#39;, -&amp;gt;
myApp = new Pubsub
it &#39;should add subscriptions to the object&#39;, -&amp;gt;
sub1 = myApp.sub &amp;quot;elem1&amp;quot;, &amp;quot;myEvent&amp;quot;, someFn
expect(myApp.subs[&amp;quot;myEvent&amp;quot;]).to.be.ok
expect(myApp.subs[&amp;quot;myEvent&amp;quot;].length).to.equal 1
it &#39;it should add the id to the array for that event if the event already exists&#39;, -&amp;gt;
sub2 = myApp.sub &amp;quot;elem2&amp;quot;, &amp;quot;myEvent&amp;quot;, someFn
expect(myApp.subs[&amp;quot;myEvent&amp;quot;].length).to.equal 2&lt;/p&gt;
&lt;p&gt;The first spec says that when I add a new subscription, the object in &lt;code&gt;myApp&lt;/code&gt;, called &lt;code&gt;subs&lt;/code&gt;, should have a property in it called &lt;code&gt;myEvent&lt;/code&gt;, and that should exist. The test &lt;code&gt;to.be.ok&lt;/code&gt; checks it evaluates to true, which it will do unless it doesn&#39;t even exist. I then check the length of &lt;code&gt;subs[&amp;quot;myEvent&amp;quot;]&lt;/code&gt; to be one, which means there&#39;s just one item in the array, which should be correct, as we&#39;ve only added one subscription for this event.&lt;/p&gt;
&lt;p&gt;The second spec says that if we add another subscription for a new event, it should add the item to the array in &lt;code&gt;subs[myEvent]&lt;/code&gt;, so the array should have a length of 2. I could write further tests which check the specific data within the array, but for now that will be okay. I&#39;m actually going to follow this up looking at our tests &amp;amp; where we can improve them, but for now we will stick with some basic tests.&lt;/p&gt;
&lt;p&gt;You can run these in the console with:&lt;/p&gt;
&lt;p&gt;mocha --compilers coffee:coffee-script -R spec&lt;/p&gt;
&lt;p&gt;I append &lt;code&gt;-R spec&lt;/code&gt; on there to get an &amp;quot;RSpec&amp;quot; style output in the terminal. Right now they all fail. First steps is to set up a constructor to create our &lt;code&gt;subs&lt;/code&gt; object. I use &lt;code&gt;@subs&lt;/code&gt; here because in CoffeeScript, &lt;code&gt;@&lt;/code&gt; is a shortcut for &lt;code&gt;this&lt;/code&gt;. So &lt;code&gt;@subs&lt;/code&gt; is &lt;code&gt;this.subs&lt;/code&gt;:
class Pubsub
constructor: -&amp;gt;
@subs = {}
When I started implementing the &lt;code&gt;sub&lt;/code&gt; method, I decided to write a function to check if an event has any subscriptions or not, as it made sense. I denote this as &lt;code&gt;_isSubscribed&lt;/code&gt;, with the underscore denoting to me that it&#39;s not a method I expect anyone to use outside of the implementation. These are what I usually refer to as utility functions:&lt;/p&gt;
&lt;p&gt;_isSubscribed: (evt) -&amp;gt;
@subs[evt]?&lt;/p&gt;
&lt;p&gt;All we do is see if the key exists. Using CoffeeScript&#39;s existential operator &lt;code&gt;?&lt;/code&gt; we can check if a variable is defined &amp;amp; not null. This is a really useful feature which I use a lot.&lt;/p&gt;
&lt;p&gt;You may say you could just do &lt;code&gt;@subs[evt]?&lt;/code&gt; wherever you need it, but I like to pull that out into a method as I&#39;m sure I will need it lots. Perhaps you would rather not, but I like it, personally. But I don&#39;t like having methods - albeit very simple ones - without tests, so in this case I tend to retrospectively write tests to double check my implementation:
describe &#39;isSubscribed&#39;, -&amp;gt;
myApp = new Pubsub
it &#39;should return false if evt is not in subs&#39;, -&amp;gt;
expect(myApp._isSubscribed(&amp;quot;event1&amp;quot;)).to.equal false
myApp.sub &amp;quot;elem2&amp;quot;, &amp;quot;myEvent&amp;quot;, someFn
expect(myApp._isSubscribed(&amp;quot;event1&amp;quot;)).to.equal false
it &#39;should return true if evt is in subs&#39;, -&amp;gt;
sub1 = myApp.sub &amp;quot;elem1&amp;quot;, &amp;quot;myEvent&amp;quot;, someFn
expect(myApp._isSubscribed(&amp;quot;myEvent&amp;quot;)).to.equal true&lt;/p&gt;
&lt;p&gt;It&#39;s pretty simple, I just add some subscriptions, and check that it returns true or false correctly. Of course, this is tough to test without the &lt;code&gt;sub&lt;/code&gt; method being implemented, so here goes:
sub: (id, evt, cb) -&amp;gt;
if @_isSubscribed evt
sub = @subs[evt]
sub.push {id: id, callback: cb}
else
@subs[evt] = [{id: id, callback: cb}]&lt;/p&gt;
&lt;p&gt;The implementation is pretty simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the event already has a subscription, then add a new object to the subscription array for that event.&lt;/li&gt;
&lt;li&gt;Else, create a new object &amp;amp; add an array of just one object.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you run those tests now, we should be passing. The next thing I want to do is add a way to unsubscribe. Again, time for tests!
describe &#39;unsubscribing&#39;, -&amp;gt;
myApp = new Pubsub
it &#39;should not error if removing a non existant subscription&#39;, -&amp;gt;
myApp.unSub &amp;quot;elem1&amp;quot;, &amp;quot;myEvent&amp;quot;
expect(myApp.subs).to.eql {}
it &#39;should remove subscription fine&#39;, -&amp;gt;
myApp.sub &amp;quot;elem1&amp;quot;, &amp;quot;myEvent&amp;quot;, someFn
myApp.sub &amp;quot;elem1&amp;quot;, &amp;quot;myEvent2&amp;quot;, someFn
expect(myApp.subs[&amp;quot;myEvent&amp;quot;]).to.be.ok
myApp.unSub &amp;quot;elem1&amp;quot;, &amp;quot;myEvent&amp;quot;
expect(myApp.subs[&amp;quot;myEvent&amp;quot;]).to.not.be.ok
expect(myApp.subs[&amp;quot;myEvent2&amp;quot;]).to.be.ok&lt;/p&gt;
&lt;p&gt;The only line I want to highlight:&lt;/p&gt;
&lt;p&gt;expect(myApp.subs).to.eql {}&lt;/p&gt;
&lt;p&gt;You&#39;ll notice I use &lt;code&gt;eql&lt;/code&gt; here rather than &lt;code&gt;equal&lt;/code&gt;. This is because &lt;code&gt;equal&lt;/code&gt; tests strict equality, whilst &lt;code&gt;eql&lt;/code&gt; does not. In JavaScript:&lt;/p&gt;
&lt;p&gt;{} === {} //false
{} == {} //true&lt;/p&gt;
&lt;p&gt;So to check if my object is empty, I want to use &lt;code&gt;==&lt;/code&gt;, which is what &lt;code&gt;eql&lt;/code&gt; does. My implementation for &lt;code&gt;unSub&lt;/code&gt; is:
unSub: (id, evt) -&amp;gt;
return false if not @_isSubscribed evt
newSubs = []
for sub in @subs[evt]
newSubs.push sub if sub.id isnt id
if newSubs.length is 0
delete @subs[evt]
else
@subs[evt] = newSubs&lt;/p&gt;
&lt;p&gt;This works like so:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If &lt;code&gt;subs[evt]&lt;/code&gt; does not exist, we don&#39;t need to bother trying to unsubscribe as there cannot be something to unsubscribe from.&lt;/li&gt;
&lt;li&gt;Else, we loop through all subscriptions for that event, and add any that are not the one we want to remove to the new array, &lt;code&gt;newSubs&lt;/code&gt;. Then, if &lt;code&gt;newSubs&lt;/code&gt; contains items, we set &lt;code&gt;@subs[evt]&lt;/code&gt; to be the new array, else we remove it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notice how I&#39;m adding the conditional after the &lt;code&gt;return false&lt;/code&gt;. You can do this with all conditionals in CoffeeScript. You see I do it again in the line &lt;code&gt;newSubs.push sub if sub.id isnt id&lt;/code&gt;. I find for quick, one line conditionals, postfixing the conditional makes more sense to me. I also use &lt;code&gt;is&lt;/code&gt;, which is compiled into &lt;code&gt;===&lt;/code&gt;. If you try using &lt;code&gt;===&lt;/code&gt; in your CoffeeScript, it wont compile, however if you use &lt;code&gt;==&lt;/code&gt;, it will compile into &lt;code&gt;===&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now we pass the tests for that, lets write the tests for publishing events. I stumbled a bit here, as I wasn&#39;t sure how best to check events had been fired. I came up with a system for doing this:&lt;/p&gt;
&lt;p&gt;Create my test functions to set a variable to true, and then create a function to check if that variable is true or false. If it&#39;s true, reset it to false, ready for the next test, and return true. If it&#39;s not true, return false.
fnDidFire = false
hasFired = -&amp;gt;
if fnDidFire
fnDidFire = false
return true
else
return false
someFn = -&amp;gt;
fnDidFire = true&lt;/p&gt;
&lt;p&gt;I also want to be able to pass data to callbacks, so I need to write another test variable &amp;amp; function to check I&#39;m passing in the extra information.&lt;/p&gt;
&lt;p&gt;extraCallbackInfo = {}
someFnWithInfo = (info) -&amp;gt;
fnDidFire = true
extraCallbackInfo = info&lt;/p&gt;
&lt;p&gt;When I want to test passing data, I will use the function which sets &lt;code&gt;extraCallbackInfo&lt;/code&gt; and then I&#39;ll test on that.&lt;/p&gt;
&lt;p&gt;So we can test the result of &lt;code&gt;hasFired()&lt;/code&gt;, and if that&#39;s true, we can be confident the function fired. Using this, I can write my tests:&lt;/p&gt;
&lt;p&gt;describe &#39;a publish&#39;, -&amp;gt;
myApp = new Pubsub
myApp.sub &amp;quot;elem1&amp;quot;, &amp;quot;event1&amp;quot;, someFn
it &#39;should fire the callback&#39;, -&amp;gt;
myApp.pub &amp;quot;event1&amp;quot;
expect(hasFired()).to.be.ok&lt;/p&gt;
&lt;p&gt;it &#39;should send any extra data through with the callback&#39;, -&amp;gt;
myApp.sub &amp;quot;elem2&amp;quot;, &amp;quot;event2&amp;quot;, someFnWithInfo
myApp.pub &amp;quot;event2&amp;quot;, foo: &amp;quot;bar&amp;quot;
expect(hasFired()).to.be.ok
expect(extraCallbackInfo.foo).to.equal &amp;quot;bar&amp;quot;&lt;/p&gt;
&lt;p&gt;it &#39;should not fire for an event that does not exist&#39;, -&amp;gt;
myApp.pub &amp;quot;madeUpEvent&amp;quot;
expect(hasFired()).to.not.be.ok&lt;/p&gt;
&lt;p&gt;The implementation for this is actually very, very simple:&lt;/p&gt;
&lt;p&gt;pub: (evt, info) -&amp;gt;
for key, val of @subs
return false if not val?
if key is evt
for data in val
data.callback(info)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If &lt;code&gt;val&lt;/code&gt; does not exist, don&#39;t do anything.&lt;/li&gt;
&lt;li&gt;Else, if &lt;code&gt;key&lt;/code&gt; is &lt;code&gt;evt&lt;/code&gt;, which means we have a match, loop through every item in the subscription array for that value.&lt;/li&gt;
&lt;li&gt;Then, run the callback, passing in the extra data passed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With that, you should see a passing set of specs. It&#39;s only a very simple implementation, but there is certainly room for improvements, both in the tests &amp;amp; implementation. If you&#39;d like to check it out, &lt;a href=&quot;https://github.com/jackfranklin/CoffeePubSub&quot;&gt;it&#39;s on Github&lt;/a&gt; for you to play around with.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A JS Playground Update</title>
    <link href="http://www.jackfranklin.co.uk/blog/js-playground-update/"/>
    <updated>2012-05-14T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/js-playground-update/</id>
    <content type="html">&lt;p&gt;JavaScript Playground is now just over one month old, so I thought it would be a good time to write a quick post with some updates about the site.&lt;/p&gt;
&lt;p&gt;Firstly, you will have noticed that the last post was a week ago, on the 7th. This can be attributed to the fact that for the next 3 weeks is exam period at University, and I&#39;ve got 4 exams to take between now &amp;amp; the end of May. This unfortunately takes a lot of my time up which means I haven&#39;t been able to write at the usual pace. I hope to publish about once a week for the next few weeks before returning to the more frequent schedule from June onwards. If there&#39;s something you&#39;d like to see me cover, I&#39;m always on the look out for ideas.&lt;/p&gt;
&lt;p&gt;I also wanted to say thank you to everyone who has tweeted, upvoted, retweeted &amp;amp; so on with links to the blog. In the first month JS Playground served over 50, 000 visits which for me personally is amazing, I never expected that to happen. If you&#39;re interested in sponsoring the blog, I&#39;m still looking for someone, so please do get in touch to discuss further.&lt;/p&gt;
&lt;p&gt;That&#39;s all I wanted to say, just a quick message to explain the slow down in content and also to say thank you to everyone who has helped, and I&#39;m glad that the stuff I&#39;m writing is proving beneficial to so many people.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Your own jQuery Deferreds</title>
    <link href="http://www.jackfranklin.co.uk/blog/your-own-jquery-deferreds/"/>
    <updated>2012-05-16T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/your-own-jquery-deferreds/</id>
    <content type="html">&lt;p&gt;One of the first and most well received posts on the JavaScript Playground &lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/jquery-deferreds-tutorial&quot;&gt;introduced jQuery Deferreds&lt;/a&gt;, a new feature in jQuery 1.5 to enable us to manage Ajax requests much easier. Today I want to build on that post by showing you how you can construct your own deferreds, enabling you to run callbacks much more efficiently on any piece of code.&lt;/p&gt;
&lt;p&gt;Before Deferreds, if you wanted to run some code once you&#39;d done something trivial, such as fading in a &lt;code&gt;div&lt;/code&gt;, you&#39;d do:&lt;/p&gt;
&lt;p&gt;$(&amp;quot;#myDiv&amp;quot;).fadeIn(1000, function() {
//callback
});&lt;/p&gt;
&lt;p&gt;That&#39;s great, but what if later down in your code you want to see if this div has indeed been faded in? One way round it might be:&lt;/p&gt;
&lt;p&gt;var divFadedIn = false;
$(&amp;quot;#myDiv&amp;quot;).fadeIn(1000, function() {
divFadedIn  = true;
//callback
});&lt;/p&gt;
&lt;p&gt;But that&#39;s messy and you end up with a lot of variables you&#39;d much rather avoid and then you get lots of irritating &lt;code&gt;if(divFadedIn)&lt;/code&gt; which really irks me.&lt;/p&gt;
&lt;p&gt;That&#39;s where Deferreds come in. In the past post I showed how they work with Ajax calls, but you can also integrate them into your own functions. Say we have a function fade in a div:&lt;/p&gt;
&lt;p&gt;var showDiv = function() {
$(&amp;quot;#fadeIn&amp;quot;).fadeIn(1000);
});&lt;/p&gt;
&lt;p&gt;Integrating Deferreds into this is easy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new &lt;code&gt;$.Deferred()&lt;/code&gt; object.&lt;/li&gt;
&lt;li&gt;Resolve the deferred when the code has been executed.&lt;/li&gt;
&lt;li&gt;Return the &lt;code&gt;promise()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So the above code now looks like:&lt;/p&gt;
&lt;p&gt;var showDiv = function() {
var def = $.Deferred();
$(&amp;quot;#fadeIn&amp;quot;).fadeIn(1000, def.resolve);
return def.promise();
});&lt;/p&gt;
&lt;p&gt;We can then check this has executed like so:&lt;/p&gt;
&lt;p&gt;$.when(showDiv()).then(function() {
console.log(&amp;quot;div faded in&amp;quot;);
});&lt;/p&gt;
&lt;p&gt;Which is a pattern you&#39;ll recognise from the previous post. It&#39;s exactly how we checked an Ajax request was done.&lt;/p&gt;
&lt;p&gt;We can go further though, by allowing our Deferred function to return data. The only change here is to call the method &lt;code&gt;def.resolve()&lt;/code&gt;, and pass it an object:&lt;/p&gt;
&lt;p&gt;var showDiv = function() {
var def = $.Deferred();
$(&amp;quot;#fadeIn&amp;quot;).fadeIn(1000, function() {
def.resolve({
elem: this.id
});
});
return def.promise();
});&lt;/p&gt;
&lt;p&gt;We can then get at this data easily:&lt;/p&gt;
&lt;p&gt;$.when(showDiv()).then(function(resp) {
console.log(&amp;quot;div was faded in with response &amp;quot;, resp);
});&lt;/p&gt;
&lt;p&gt;Remember, &lt;code&gt;$.when&lt;/code&gt; can accept multiple arguments, so if you had 3-4 functions all along these lines, you could do:&lt;/p&gt;
&lt;p&gt;$.when(showDiv(), hideOtherDiv(), foo(), bar()).then();&lt;/p&gt;
&lt;p&gt;And if you need to check the state of the div later, you can save the promise to a variable to check:&lt;/p&gt;
&lt;p&gt;var divFaded = showDiv();&lt;/p&gt;
&lt;p&gt;Although this doesn&#39;t get rid of my complaint of having to create a few variables, this does tidy it up a bit; we don&#39;t have to manually set values. It&#39;s also rare in practice that you&#39;ll need to do this, at least I&#39;ve found that for me.
There&#39;s a lot of power here to be used and there&#39;s a lot more Deferreds are capable of. In a future post, to be the final part of this 3-part series, I&#39;ll look at just what else we can use Deferreds for, and some common errors people make when using them.s&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Introduction to JavaScript Objects</title>
    <link href="http://www.jackfranklin.co.uk/blog/introduction-to-javascript-objects/"/>
    <updated>2012-06-04T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/introduction-to-javascript-objects/</id>
    <content type="html">&lt;p&gt;Today I&#39;d like to talk a little bit about Objects in JavaScript. When I first started using JavaScript (my first experience of it was through jQuery), I was initially confused with this whole idea of passing in objects to functions, in particular to jQuery functions like &lt;code&gt;animate()&lt;/code&gt; or &lt;code&gt;css()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;$(foo).css({
&amp;quot;border&amp;quot; : &amp;quot;1px solid black&amp;quot;,
&amp;quot;color&amp;quot;  : &amp;quot;red&amp;quot;
});&lt;/p&gt;
&lt;p&gt;This always confused me, before I had a solid grasp on pure JavaScripts &amp;amp; in particular JavaScript objects. If you&#39;re writing lots of JavaScript, objects are going to be something you use frequently so it&#39;s important as a beginner you make sure you&#39;ve got a firm understanding of them.&lt;/p&gt;
&lt;p&gt;So, firstly, how do we create an object? We can do it two ways:&lt;/p&gt;
&lt;p&gt;var x = new Object();
var y = {};&lt;/p&gt;
&lt;p&gt;Both of these mean exactly the same thing &amp;amp; both simply instantiate an empty object. In reality, the vast majority of developers use the second method - it&#39;s a lot shorter whilst still being clear as to what it does.&lt;/p&gt;
&lt;p&gt;As a side note, this is identical to how we might create new arrays, either through &lt;code&gt;var z = new Array();&lt;/code&gt; or through simply &lt;code&gt;var z = []&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now we have this object, we can define properties (or keys) and values. This can be done in a number of ways. You can create an empty object &amp;amp; then add properties:&lt;/p&gt;
&lt;p&gt;var x = {};
x.foo = &amp;quot;bar&amp;quot;;
x[&amp;quot;baz&amp;quot;] = 123;&lt;/p&gt;
&lt;p&gt;You&#39;ll notice the two ways of assigning properties. You can either use the dot notation or the square brackets. The differences between the two are easily shown through this code snippet:&lt;/p&gt;
&lt;p&gt;//x = some object
var bar = &amp;quot;foo&amp;quot;
x.bar //looks for &amp;quot;bar&amp;quot; property in object &amp;quot;x&amp;quot;
x[bar] //looks for &amp;quot;foo&amp;quot; property in object &amp;quot;x&amp;quot;&lt;/p&gt;
&lt;p&gt;The first method will look for the property named whatever you place after the dot, whilst the square brackets will evaluate what&#39;s inside. Hence, the square bracket notation is useful when you have the property you want to access stored within a variable, whilst if you know which property you want to get at, you&#39;ll tend to use the dot notation.&lt;/p&gt;
&lt;p&gt;However, you don&#39;t have to create an empty object first, you can create an object &amp;amp; define properties in one swoop:&lt;/p&gt;
&lt;p&gt;var x = {
foo: &amp;quot;bar&amp;quot;,
baz: 123
}&lt;/p&gt;
&lt;p&gt;You do not need to put the properties of an object in quotes when declaring them &lt;strong&gt;except&lt;/strong&gt; when using a reserved word in JavaScript. For example, you couldn&#39;t do:&lt;/p&gt;
&lt;p&gt;var x = {
class: 123
}&lt;/p&gt;
&lt;p&gt;If you wish to store a property that is also a reserved word, you need to quote it when declaring it:&lt;/p&gt;
&lt;p&gt;var x = {
&amp;quot;class&amp;quot;: 123
}&lt;/p&gt;
&lt;p&gt;Note that from ECMAScript 5, reserved words &lt;em&gt;can&lt;/em&gt; be used as properties without needing quotes, but that is only currently implemented in IE9, FF 3.5+ and Chrome 7+. If you wish to support prior versions of these browsers (and others, like Safari), quote your reserved word properties or, preferably, just don&#39;t use them.&lt;/p&gt;
&lt;p&gt;When declaring properties like this, note the use of commas. After the value for each &lt;em&gt;but the last&lt;/em&gt; property, you need to add a comma. Leaving a comma on the last one, or missing one out, will result in errors. That&#39;s why you&#39;ll sometimes see people declare objects like this:&lt;/p&gt;
&lt;p&gt;var x = {
bar: 123
, foo: 456
, baz: &amp;quot;abc&amp;quot;
}&lt;/p&gt;
&lt;p&gt;Whilst I&#39;m not a fan, that method does make it much easier to see if you&#39;ve missed a comma or put one where you don&#39;t need it. I personally prefer the more common approach that I use throughout this post, but if you prefer the other method, that&#39;s fine. As usual, it&#39;s down to personal preference.&lt;/p&gt;
&lt;p&gt;To iterate over an object, we can use &lt;code&gt;for…in&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;var x = {
foo: &amp;quot;bar&amp;quot;,
baz: 123
}
for (prop in x) {
console.log(prop, &amp;quot;=&amp;quot;, x[prop]);
}&lt;/p&gt;
&lt;p&gt;Which would output:&lt;/p&gt;
&lt;p&gt;foo=bar
baz=123&lt;/p&gt;
&lt;p&gt;Of course, properties of an object can contain functions (although functions inside an object are actually methods), too:&lt;/p&gt;
&lt;p&gt;var x = {
add: function(a, b) {
return a+b;
}
};&lt;/p&gt;
&lt;p&gt;Which is then called as &lt;code&gt;x.add(1,2)&lt;/code&gt; as you&#39;d expect. A good thing to know is when a method is invoked, its scope is set to the object. For example:&lt;/p&gt;
&lt;p&gt;var x = {
add: function() { console.log(this); },
bar: 123
}
x.add();&lt;/p&gt;
&lt;p&gt;Logs:&lt;/p&gt;
&lt;p&gt;{ add: [Function], bar: 123 }&lt;/p&gt;
&lt;p&gt;And of course, objects can have objects in them:&lt;/p&gt;
&lt;p&gt;var x = {
y: {
add: function(a,b) { return a+b; },
self: function() { console.log(this); }
},
bar: &amp;quot;foo&amp;quot;
}&lt;/p&gt;
&lt;p&gt;In this instance, &lt;code&gt;x.y.self()&lt;/code&gt; would log &lt;code&gt;{ add: [Function], self: [Function] }&lt;/code&gt;. Just to illustrate, I could call that method using the square bracket notation:&lt;/p&gt;
&lt;p&gt;x[&amp;quot;y&amp;quot;]&lt;a href=&quot;http://www.jackfranklin.co.uk/blog/introduction-to-javascript-objects/&quot;&gt;&amp;quot;self&amp;quot;&lt;/a&gt;;&lt;/p&gt;
&lt;p&gt;The reason you&#39;ll often see APIs of libraries take an object as an input to a function is that it&#39;s much easier than having multiple parameters and also allows you to only define those values you want to change. A jQuery plugin might have 5 options, with 5 defaults set. If you wanted to change just one of them but couldn&#39;t pass an object into the plugin, you would probably have to pass in every value, even those you don&#39;t want to change:&lt;/p&gt;
&lt;p&gt;$(foo).plugin(&amp;quot;defaultVal&amp;quot;, &amp;quot;defaultVal&amp;quot;, &amp;quot;changedVal&amp;quot;, &amp;quot;defaultVal&amp;quot;);&lt;/p&gt;
&lt;p&gt;It&#39;s also unclear what each of those options are, whereas if you can pass in an object:&lt;/p&gt;
&lt;p&gt;$(foo).plugin({
someProp: &amp;quot;changedVal&amp;quot;
});&lt;/p&gt;
&lt;p&gt;The advantage is twofold: it&#39;s clear what option you&#39;re changing, and you don&#39;t have to specify the defaults again. All we do here is pass an object directly into a function. You could, if you wanted, create it first:&lt;/p&gt;
&lt;p&gt;var opts = {
someProp: &amp;quot;changedVal&amp;quot;
}
$(foo).plugin(opts);&lt;/p&gt;
&lt;p&gt;With that it&#39;s time to bring this tutorial to a close. There is a lot more to cover, but this is all planned in an article next week titled &amp;quot;Object Oriented Programming in JavaScript&amp;quot;, which will pick up where this left off &amp;amp; go much further, to hopefully show some real life usage of objects &amp;amp; how powerful they can be. As always, if you have any questions please do leave a comment &amp;amp; I will get back to you. The next article will be on Wednesday, June 6th where I&#39;ll be demonstrating the use of Sockets with Node.js.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Conditional Loading with YepNope</title>
    <link href="http://www.jackfranklin.co.uk/blog/conditional-loading-yepnope-js-tutorial/"/>
    <updated>2012-06-11T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/conditional-loading-yepnope-js-tutorial/</id>
    <content type="html">&lt;p&gt;In today&#39;s tutorial I want to take a look at &lt;a href=&quot;http://yepnopejs.com/&quot;&gt;yepnope&lt;/a&gt;, which is an asynchronous resource loader that works on conditions. That is, you give it a test, and depending on the result of that test, you can load in additional scripts.&lt;/p&gt;
&lt;p&gt;This is used a lot when loading a Polyfill for a HTML5 feature, such as placeholders. You can detect if they are supported, and if they are not, bring in a JS script to add support. I used to think that was the only use for yepnope, but having used it on a client project recently I found a slightly different use, which I wanted to demonstrate today.&lt;/p&gt;
&lt;p&gt;On the site in question, all scripts are loaded just before the closing &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;, but because we have a lot of static pages on this site, all the scripts are within an individual file, which is then included through PHP includes. Thus, the issue was every script was getting loaded on every page, even when we didn&#39;t need it to be. For example, two of the pages use NivoSlider, but every page was loading it in. I decided to see if Yepnope would be a good fit to solve this issue, and it turned out to work quite well.&lt;/p&gt;
&lt;p&gt;The first thing I want to show is that yepnope can be used just to load in scripts, although that&#39;s not its main strength:&lt;/p&gt;
&lt;p&gt;yepnope({
load: [&#39;https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&#39;, &#39;/js/nav.js&#39;],
complete: function (url, res, key) {
//jQuery &amp;amp; nav.js is loaded
}
});&lt;/p&gt;
&lt;p&gt;Those two scripts were the ones I needed on every page, so I chose to load them in. A key thing here that had me stuck is yepnope&#39;s callbacks. There are two you&#39;ll generally use after loading in files, &lt;code&gt;callback&lt;/code&gt; and &lt;code&gt;complete&lt;/code&gt;. There is a subtle but &lt;em&gt;very&lt;/em&gt; important difference between them. When you&#39;re loading in multiple files, &lt;code&gt;callback&lt;/code&gt; fires after &lt;em&gt;each one individually is loaded&lt;/em&gt;, whereas &lt;code&gt;complete&lt;/code&gt; fires after &lt;em&gt;all the files are loaded&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;From here, I want to test if we need to load in the NivoSlider plugin. All elements on the site with a slider have an ID of &lt;code&gt;slider&lt;/code&gt;, so within the &lt;code&gt;complete&lt;/code&gt; callback, it&#39;s an easy test:&lt;/p&gt;
&lt;p&gt;$(function() {
yepnope({
test: $(&amp;quot;#slider&amp;quot;).length,
yep: &#39;/js/jquery.nivo.slider.pack.js&#39;,
callback: function(url, res, key) {
$(&#39;#slider&#39;).nivoSlider();
}
});
});&lt;/p&gt;
&lt;p&gt;I make sure the DOM is ready before running the tests, so we don&#39;t get a negative result purely because the DOM isn&#39;t ready. To evaluate conditionally you must pass a &lt;code&gt;test&lt;/code&gt; property into yepnope. This can be any expression at all that will evaluate to give &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. This means of course that you can load in a script based on more than one thing: &lt;code&gt;test: a &amp;amp;&amp;amp; !b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The test is if we have any elements with an id of &lt;code&gt;slider&lt;/code&gt; on the page. You have to test for &lt;code&gt;.length&lt;/code&gt;, as an empty array actually evaluates to &lt;code&gt;true&lt;/code&gt; in JavaScript. Obviously &lt;code&gt;length&lt;/code&gt; will return 0 or higher, and 0 evaluates to &lt;code&gt;false&lt;/code&gt;, which is what we want.&lt;/p&gt;
&lt;p&gt;From there it&#39;s easy, if the test is true, I can load in my slider script. Note that you don&#39;t have to pass both &lt;code&gt;yep&lt;/code&gt; and &lt;code&gt;nope&lt;/code&gt; - you can do just one or the other if that&#39;s all you need.&lt;/p&gt;
&lt;p&gt;I then use &lt;code&gt;callback&lt;/code&gt; - I don&#39;t need to use &lt;code&gt;complete&lt;/code&gt; here as it&#39;s only 1 script I&#39;m loading, and execute the &lt;code&gt;nivoSlider()&lt;/code&gt; on my slider.&lt;/p&gt;
&lt;p&gt;That&#39;s one use for yepnope and one I&#39;ve been using quite a lot recently, it really does make conditional script loading much easier to do. In terms of other use cases, it ties in very nicely with Modernizr. You can load in polyfills based on the results of Modernizr tests, which gives you a lot of power.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Exploring Backbone.js - Part 2</title>
    <link href="http://www.jackfranklin.co.uk/blog/exploring-backbone-js-part-2/"/>
    <updated>2012-06-15T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/exploring-backbone-js-part-2/</id>
    <content type="html">&lt;p&gt;A while ago I kicked off a planned series of Backbone.js tutorials with &lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/backbone-js-tutorial-1&quot;&gt;Part 1&lt;/a&gt;, which introduced Backbone as we set up a &amp;quot;shopping cart&amp;quot; - albeit an overly simplified one. Although it&#39;s been too long coming, today I&#39;ve got part 2! I ended part 1 with some bullet points as things I wanted to cover:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do I add to a collection after initialising it?&lt;/li&gt;
&lt;li&gt;How can I show a filtered set of my objects?&lt;/li&gt;
&lt;li&gt;How do I let a user add a new item?&lt;/li&gt;
&lt;li&gt;How do I unit test my Backbone applications?&lt;/li&gt;
&lt;li&gt;Can I use Backbone.js with CoffeeScript?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whilst I wont be covering them all today, I want to take on the 1st and 3rd bullet point, as they go hand in hand. So today, we&#39;ll edit our code to include a very simple form that lets us add a new item. Whilst this isn&#39;t so much in keeping with the shopping cart idea, it&#39;s the easiest way to demonstrate how to make the changes. In the upcoming parts we will start to model this into the shopping cart application.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;One thing that has become apparent is that in Backbone there a lot of different ways often to go about the same thing. I&#39;m still learning Backbone too, so if you would have done anything that I do today differently, please let me know in the comments.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We need to make some changes to our existing code base. Firstly, in the comments of the prior article it was pointed out to me that setting &lt;code&gt;el&lt;/code&gt; to be &lt;code&gt;$(&amp;quot;#yourcart&amp;quot;)&lt;/code&gt; was bad. What I should do is set &lt;code&gt;el&lt;/code&gt; to &lt;code&gt;&amp;quot;#yourcart&amp;quot;&lt;/code&gt;, and then Backbone gives us &lt;code&gt;$el&lt;/code&gt;, which is the same as &lt;code&gt;$(el)&lt;/code&gt; which of course is &lt;code&gt;$(&amp;quot;#yourcart&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, the way Backbone works in terms of events, is that you bind an event to an element using the form:&lt;/p&gt;
&lt;p&gt;events: {
&amp;quot;event selector&amp;quot;:&amp;quot;method&amp;quot;
}&lt;/p&gt;
&lt;p&gt;This can be any element, however the element has to reside within the View&#39;s objects, which is all the elements in whatever you specified as &lt;code&gt;el&lt;/code&gt; when declaring the view. &lt;em&gt;This had me stuck for ages!&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There are many ways to get around this, but before I cover my solution, I&#39;ve added this simple form just after the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag:&lt;/p&gt;
&lt;form id=&quot;add&quot;&gt;
&lt;label&gt;Title&lt;/label&gt;
&lt;input id=&quot;title&quot; type=&quot;text&quot;&gt;
&lt;label&gt;Price&lt;/label&gt;
&lt;input id=&quot;price&quot; type=&quot;text&quot;&gt;
&lt;input type=&quot;submit&quot; value=&quot;save&quot;&gt;
&lt;/form&gt;
My first solution was to update the `CartCollectionView` to just have `body` as its `el` and then save another for the wrapper around the items, like so:
var CartCollectionView = Backbone.View.extend({
el: &quot;body&quot;,
$item_wrap: $(&quot;#yourcart&quot;),
&lt;p&gt;However, this seemed not very modular. Each view should deal with just one thing. I either needed another view to deal with the individual item wrapper, or another view to deal with the app as an entity. In essence, both lead you to a similar solution. I chose the first, so &lt;code&gt;CartCollectionView&lt;/code&gt; would become the view for the entire app, and I created &lt;code&gt;ItemCollectionView&lt;/code&gt; to deal with the HTML for listing all the items.&lt;/p&gt;
&lt;p&gt;From here, &lt;code&gt;CartCollectionView&lt;/code&gt; became:&lt;/p&gt;
&lt;p&gt;var CartCollectionView = Backbone.View.extend({
el: &amp;quot;body&amp;quot;,
events: {
&amp;quot;submit #add&amp;quot;: &amp;quot;addItem&amp;quot;
},
initialize: function() {
this.itemView = new ItemCollectionView();
},
addItem: function(e) {
e.preventDefault();
this.itemView.addItem();
}
});&lt;/p&gt;
&lt;p&gt;As you can see, I set the &lt;code&gt;el&lt;/code&gt; to just be &lt;code&gt;body&lt;/code&gt;, so it encompasses everything. I then declare the events object. This simply states that when a &lt;code&gt;submit&lt;/code&gt; event is triggered on &lt;code&gt;#add&lt;/code&gt; (I gave the &lt;code&gt;form&lt;/code&gt; that ID), call the &lt;code&gt;addItem&lt;/code&gt; method. You can have as many of these as you want, in that format.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;initialize&lt;/code&gt; is also simplified, as all it does is create a new &lt;code&gt;ItemCollectionView&lt;/code&gt;, which I&#39;ll show you shortly.&lt;/p&gt;
&lt;p&gt;The main new piece of code is the &lt;code&gt;addItem&lt;/code&gt; method, but all this does is use jQuery&#39;s &lt;code&gt;preventDefault()&lt;/code&gt; to stop the form firing, and then call &lt;code&gt;addItem&lt;/code&gt; on the &lt;code&gt;itemView&lt;/code&gt;, which is what I stored the &lt;code&gt;new ItemCollectionView()&lt;/code&gt; as.&lt;/p&gt;
&lt;p&gt;Moving onto the &lt;code&gt;ItemCollectionView&lt;/code&gt;, most of it you&#39;ll recognise, all I&#39;ve done is move a lot of the code that was in the &lt;code&gt;CartCollectionView&lt;/code&gt; over:&lt;/p&gt;
&lt;p&gt;var ItemCollectionView = Backbone.View.extend({
el: &#39;#yourcart&#39;,
initialize: function() {
this.collection = cartCollection;
this.render();
},
render: function() {
this.$el.html(&amp;quot;&amp;quot;);
this.collection.each(function(item) {
this.renderItem(item);
}, this);
},
renderItem: function(item) {
var itemView = new ItemView({model: item});
this.$el.append(itemView.render().el);
},
addItem: function() {
var data = {};
$(&amp;quot;#add&amp;quot;).children(&amp;quot;input[type=&#39;text&#39;]&amp;quot;).each(function(i, el) {
data[el.id] = $(el).val();
});
var newItem = new Item(data);
this.collection.add(newItem);
this.renderItem(newItem);
}
});&lt;/p&gt;
&lt;p&gt;The only piece of code here that&#39;s new is the &lt;code&gt;addItem&lt;/code&gt; method. The first thing it does it loop through all the text fields of the form and store the values to the new &lt;code&gt;data&lt;/code&gt; object, using each input&#39;s &lt;code&gt;id&lt;/code&gt; as the key (I set the &lt;code&gt;id&lt;/code&gt; to &amp;quot;title&amp;quot; and &amp;quot;price&amp;quot; on the inputs). This builds us a simple object that we can now generate an Item from using &lt;code&gt;new Item(data)&lt;/code&gt;. From there we add that item to the collection and then call &lt;code&gt;renderItem&lt;/code&gt;, which creates the HTML for an item &amp;amp; then adds it to the &lt;code&gt;#yourcart&lt;/code&gt; wrapper.&lt;/p&gt;
&lt;p&gt;And that, as they say, is a wrap! At first I have to confess Backbone&#39;s way of doing this confused me, but after I managed to get my head around it it did begin to make sense. As always, you can find the code &lt;a href=&quot;https://github.com/jackfranklin/JS-Playground-Backbone/tree/tutorial2&quot;&gt;on Github&lt;/a&gt;, and if you have any questions, please leave a comment. As I said earlier, if you&#39;d have done this differently, I&#39;d love to know, as there are a few different approaches. I will be amending the article with other solutions if they come up.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Your First Polyfill</title>
    <link href="http://www.jackfranklin.co.uk/blog/writing-javascript-polyfill/"/>
    <updated>2012-06-20T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/writing-javascript-polyfill/</id>
    <content type="html">&lt;p&gt;In today&#39;s tutorial I want to introduce you to the concepts behind polyfills, a word you see used a lot in today&#39;s JS world. I&#39;ll demonstrate just what a polyfill is and then write one ourselves.&lt;/p&gt;
&lt;p&gt;A polyfill is a piece of code that provides a fallback if a certain feature doesn&#39;t exist within that browser&#39;s JS engine. Polyfills usually follow a pattern. First, they check to see if the function they implement exists, and then we only write our fallback implementation if we have to.&lt;/p&gt;
&lt;p&gt;There are multiple polyfills out there for mutliple functions. The website &lt;a href=&quot;http://html5please.com/&quot;&gt;HTML5 Please&lt;/a&gt; is very useful for finding polyfills to do a particular job.&lt;/p&gt;
&lt;p&gt;Now, lets get to our own implementation. I should note as this point that this implementation is by no means going to be a fully fledged, comprehensive one. At the end, I&#39;ll link you to the Mozilla Documentation Network (or MDN) page that contains a hugely comprehensive &amp;amp; fully featured polyfill, should you require it.&lt;/p&gt;
&lt;p&gt;Today we&#39;ll be implementing &lt;code&gt;Array forEach&lt;/code&gt;, which was introduced in JavaScript 1.6, ECMAScript 5th edition. In reality, this is actually a very well supported feature, but I&#39;ve chosen it more for the fact that it&#39;s a fairly simple implementation.&lt;/p&gt;
&lt;p&gt;The first thing we need to do is see if the method has been natively implemented. We do this by checking to see if &lt;code&gt;Array.prototype.forEach != undefined&lt;/code&gt;. If it is indeed undefined, we can continue. What this function does is iterate through all items within an array and call a function on them. This function is passed 3 arguments: the item, the index &amp;amp; the array it&#39;s iterating on. It&#39;s also possible to pass in to &lt;code&gt;forEach&lt;/code&gt; a second value, which will be used as the value for &lt;code&gt;this&lt;/code&gt; within the callback.&lt;/p&gt;
&lt;p&gt;With that in mind, lets implement it! At this point, I&#39;m presuming the method is not natively supported, and we need to implement it. Our first line simply defines the function:&lt;/p&gt;
&lt;p&gt;Array.prototype.forEach = function(callback, thisArg) {&lt;/p&gt;
&lt;p&gt;Next, we need to check if &lt;code&gt;callback&lt;/code&gt; is a function or not, and throw a &lt;code&gt;TypeError&lt;/code&gt; if it&#39;s not:&lt;/p&gt;
&lt;p&gt;if(typeof(callback) !== &amp;quot;function&amp;quot;) {
throw new TypeError(callback + &amp;quot; is not a function!&amp;quot;);
}&lt;/p&gt;
&lt;p&gt;Once we&#39;ve got this far, we know that the callback is a valid function, so now all that&#39;s left to do is loop through our array. Firstly, I save the length of the array:&lt;/p&gt;
&lt;p&gt;var len = this.length;&lt;/p&gt;
&lt;p&gt;Then we can loop through:&lt;/p&gt;
&lt;p&gt;for(var i = 0; i &amp;lt; len; i++) {
//callback here
}&lt;/p&gt;
&lt;p&gt;Remember, we have to pass three things into the callback. So we &lt;em&gt;could&lt;/em&gt; do:&lt;/p&gt;
&lt;p&gt;callback(this[i], i, this)&lt;/p&gt;
&lt;p&gt;But how do we go about applying the value of &lt;code&gt;this&lt;/code&gt; within the callback? We can use JavaScript&#39;s &lt;code&gt;call()&lt;/code&gt; method (&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/call&quot;&gt;MDN Link&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The first argument of &lt;code&gt;call&lt;/code&gt; is the value of &lt;code&gt;this&lt;/code&gt; within the function, and then every argument following it will be passed to the function. So, we have to do:&lt;/p&gt;
&lt;p&gt;for(var i = 0; i &amp;lt; len; i++) {
callback.call(thisArg, this[i], i, this)
}&lt;/p&gt;
&lt;p&gt;Your next question might be, what if &lt;code&gt;thisArg&lt;/code&gt; is undefined? In which case, the value of &lt;code&gt;this&lt;/code&gt; will become the global object, which is what it would become anyway if we&#39;d done &lt;code&gt;callback(this[i], i, this)&lt;/code&gt;, so that&#39;s actually the implementation we want.&lt;/p&gt;
&lt;p&gt;And with that, we&#39;re done! Here&#39;s the entire code:&lt;/p&gt;
&lt;p&gt;Array.prototype.forEach = function(callback, thisArg) {
if(typeof(callback) !== &amp;quot;function&amp;quot;) {
throw new TypeError(callback + &amp;quot; is not a function!&amp;quot;);
}
var len = this.length;
for(var i = 0; i &amp;lt; len; i++) {
callback.call(thisArg, this[i], i, this)
}
}&lt;/p&gt;
&lt;p&gt;As a quick test, try:&lt;/p&gt;
&lt;p&gt;var arr = [1,2,3];
arr.forEach(function(item, index, th) {
console.log(item, index, th);
});&lt;/p&gt;
&lt;p&gt;You should see this output:&lt;/p&gt;
&lt;p&gt;1 0 [ 1, 2, 3 ]
2 1 [ 1, 2, 3 ]
3 2 [ 1, 2, 3 ]&lt;/p&gt;
&lt;p&gt;We can also test setting the value of &lt;code&gt;this&lt;/code&gt; within the callback:&lt;/p&gt;
&lt;p&gt;arr.forEach(function(item, index, th) {
console.log(this);
}, {});&lt;/p&gt;
&lt;p&gt;Here I set it to just an empty object, &lt;code&gt;{}&lt;/code&gt;. In your console, you should see:&lt;/p&gt;
&lt;p&gt;{}
{}
{}&lt;/p&gt;
&lt;p&gt;Which is just what we&#39;re after. Hopefully this has helped clear up any confusion over just what a polyfill is, and the general methodology behind going about writing one. As always, any questions or feedback, please leave a comment or grab me on Twitter. If you&#39;re looking for a more complete &lt;code&gt;forEach&lt;/code&gt; polyfill, I suggest reading the &lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;MDN Documentation&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Node &amp;amp; Express Todo App: Redis</title>
    <link href="http://www.jackfranklin.co.uk/blog/node-express-todo-app-redis/"/>
    <updated>2012-06-24T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/node-express-todo-app-redis/</id>
    <content type="html">&lt;p&gt;Today I&#39;ll pick off where &lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/node-js-a-todo-app-with-express&quot;&gt;Part 1&lt;/a&gt; left off, and start working on the to-do part of our application. This tutorial literally starts where Part 1 stops, so if you haven&#39;t read Part 1 or need a refresher, I highly recommend reading that before this.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: this tutorial uses Express 2.5.8. Currently Express V3 is in beta. Once Express 3 stable is released, I will run a post discussing updating to it and link to it here. In the mean time, if you&#39;re using Express 3, a few things might be different to this tutorial. None-the-less, there&#39;s still a lot here that you can learn from, I hope&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The first thing I&#39;m going to do is create a new view for our Todo screen. This will list our todos and also provide a form for adding new ones. Create the file &lt;code&gt;views/todo.jade&lt;/code&gt; and add something like this:&lt;/p&gt;
&lt;p&gt;h1 new todo list
form(action=&amp;quot;/save&amp;quot;, method=&amp;quot;post&amp;quot;)
p
label Enter a new todo item
input(type=&#39;text&#39;,placeholder=&#39;new todo&#39;, name=&#39;todo-text&#39;)
p
input(type=&#39;submit&#39;, value=&#39;Save&#39;)&lt;/p&gt;
&lt;p&gt;And then we need to add the route for this, so the user sees this view when they go to &lt;code&gt;/todo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Head into &lt;code&gt;route/routes.js&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;exports.todo = function(req, res){
res.render(&#39;todo&#39;, {
title: &#39;New Todo List&#39;
});
};&lt;/p&gt;
&lt;p&gt;And finally we just need to link this route up to our URL, which is done at the bottom of &lt;code&gt;app.js&lt;/code&gt; (which you may have renamed to &lt;code&gt;server.js&lt;/code&gt;, as per the previous tutorial):&lt;/p&gt;
&lt;p&gt;app.get(&#39;/todo&#39;, routes.todo);&lt;/p&gt;
&lt;p&gt;If you&#39;re not already, run our server with &lt;code&gt;nodemon app.js&lt;/code&gt;. If you haven&#39;t got nodemon installed, please see the previous tutorial.&lt;/p&gt;
&lt;p&gt;Now, if you visit &lt;code&gt;http://localhost:3000/todo&lt;/code&gt;, you should see something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/2D1x3R1O0H3k0U3D0O0t/Screen%20Shot%202012-06-24%20at%2012.49.08.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Lets build in the functionality for listing some todo items. Obviously at the minute we don&#39;t have any of them, so I&#39;ll add some fake ones in. When you render a view, you can pass in variables, as we did above to set &lt;code&gt;title&lt;/code&gt;. Lets pass in an array of objects into the view to represent our items. For now they will be pretty simple:&lt;/p&gt;
&lt;p&gt;h1 new todo list
form(action=&amp;quot;/save&amp;quot;, method=&amp;quot;post&amp;quot;)
p
label Enter a new todo item
input(type=&#39;text&#39;,placeholder=&#39;new todo&#39;, name=&#39;todo-text&#39;)
p
input(type=&#39;submit&#39;, value=&#39;Save&#39;)
ul
each todo in todos
li #{todo.text}&lt;/p&gt;
&lt;p&gt;Now we can make use of Jade&#39;s built in looping mechanism to loop through our array. It&#39;s really beautifully simple:&lt;/p&gt;
&lt;p&gt;ul
each todo in todos
li #{todo.text}&lt;/p&gt;
&lt;p&gt;All I do here is create a new unordered list, and for each item within the &lt;code&gt;todos&lt;/code&gt; array (which I passed in above), just output the text.&lt;/p&gt;
&lt;p&gt;And now our view looks like so:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/1F1l2o3h31320K2J2B3P/Screen%20Shot%202012-06-24%20at%2012.56.26.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;It&#39;s now time to actually implement the adding of new todos.&lt;/p&gt;
&lt;p&gt;The first question is how to store our items? I&#39;m going to use &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt;. There&#39;s good documentation out there on how to install it, so I wont go through that here. One thing I will mention is if you&#39;re on Mac &amp;amp; use Homebrew, by far and away the easiest install is through this, using &lt;code&gt;brew install redis&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then we need the NPM Package for Redis, which you can install locally with:&lt;/p&gt;
&lt;p&gt;npm install redis --save&lt;/p&gt;
&lt;p&gt;Remember, doing &lt;code&gt;--save&lt;/code&gt; will add it as a dependency to your &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Now, within the file where we&#39;re going to be using Redis, which for us will be exclusively &lt;code&gt;routes/routes.js&lt;/code&gt;. You might be thinking it seems a bit messy to put it in here - and you&#39;d be right. In a future tutorial I will show you how I&#39;d tidy this up, but for now I want to concentrate purely on the Redis functionality.&lt;/p&gt;
&lt;p&gt;So, within your routes file, add in this code:&lt;/p&gt;
&lt;p&gt;var redis = require(&amp;quot;redis&amp;quot;),
client = redis.createClient();&lt;/p&gt;
&lt;p&gt;You&#39;ll also need to make sure a Redis instance is running on your machine. Try typing &lt;code&gt;redis-cli&lt;/code&gt; in the command line to see if it&#39;s running. On the Mac, to run the server you can type:&lt;/p&gt;
&lt;p&gt;redis-server /usr/local/etc/redis.conf&lt;/p&gt;
&lt;p&gt;Redis is a key-value datastore that&#39;s lightening quick &amp;amp; perfect for our needs here. Redis can be used with lots of datatypes but the most common use is a hash, where we store objects.&lt;/p&gt;
&lt;p&gt;Firstly, lets link up our form. Add this line to &lt;code&gt;app.js&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;app.post(&#39;/save&#39;, routes.saveTodo);&lt;/p&gt;
&lt;p&gt;And add the function to handle this route (don&#39;t panic, I&#39;ll explain the code in a second):&lt;/p&gt;
&lt;p&gt;exports.saveTodo = function(req, res) {
var newTodo = {};
newTodo.name = req.body[&#39;todo-text&#39;];
newTodo.id = newTodo.name.replace(&amp;quot; &amp;quot;, &amp;quot;-&amp;quot;);
client.hset(&amp;quot;Todo&amp;quot;, newTodo.id, newTodo.name);
res.redirect(&amp;quot;back&amp;quot;);
};&lt;/p&gt;
&lt;p&gt;All I do here is create a new object to store our new todo. I can get at the post data through &lt;code&gt;req.body[&#39;todo-text&#39;]&lt;/code&gt; - remember I gave our form field a name of that. Each item that is stored in Redis needs an id attached to it, which has to be unique. A simple way to do this in this instance is to generate the ID based on the name, but replacing spaces with &lt;code&gt;&amp;quot;-&amp;quot;&lt;/code&gt;, which is what I do to generate the ID using &lt;code&gt;replace(&amp;quot; &amp;quot;, &amp;quot;-&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, once I have my new Todo object, I use the &lt;code&gt;hset&lt;/code&gt; method (because we&#39;re storing a hash, hence the &amp;quot;h&amp;quot;), passing in a key which acts as the name of the datastore, and then I pass in the id &amp;amp; name as new parameters.&lt;/p&gt;
&lt;p&gt;Once that&#39;s done, I want to pass the user back to the main &lt;code&gt;todo&lt;/code&gt; page, so I can redirect the user back to where they came from, which would have been the main todo page.&lt;/p&gt;
&lt;p&gt;Once that&#39;s done, we need to edit &lt;code&gt;exports.todo&lt;/code&gt; to get the todo items from the data store. To get data from Redis, I can use &lt;code&gt;hgetall&lt;/code&gt; (again, the &amp;quot;h&amp;quot; denoting hash). This takes two arguments, the key (which for us is &amp;quot;Todo&amp;quot;) and a function to process the data. All I do here is loop through &amp;amp; store the new items into an array.&lt;/p&gt;
&lt;p&gt;exports.todo = function(req, res){
var todos = [];
client.hgetall(&amp;quot;Todo&amp;quot;, function(err, objs) {
for(var k in objs) {
var newTodo = {
text: objs[k]
};
todos.push(newTodo);
}
res.render(&#39;todo&#39;, {
title: &#39;New Todo List&#39;,
todos: todos
});
});
};&lt;/p&gt;
&lt;p&gt;The key thing to note here is that the call to &lt;code&gt;res.render&lt;/code&gt; is now &lt;strong&gt;inside&lt;/strong&gt; the &lt;code&gt;hgetall&lt;/code&gt; function. This is down to the asynchronous nature of Redis, you need to call the &lt;code&gt;render&lt;/code&gt; only once you know you&#39;ve got your data. It&#39;s much the same as when you&#39;re working with data fetched from an Ajax call. Once we do have our &lt;code&gt;todos&lt;/code&gt; array, I can pass that into the view.&lt;/p&gt;
&lt;p&gt;Now I can go in and add something, and then I&#39;m immediately taken back to the same page, with that item added.&lt;/p&gt;
&lt;p&gt;In summary, we&#39;ve covered a lot today, the main focus being using Redis but we&#39;ve also explored Jade further &amp;amp; done more with Express.&lt;/p&gt;
&lt;p&gt;As always, if you have any questions please leave a comment &amp;amp; the code from this tutorial is &lt;a href=&quot;https://github.com/jackfranklin/node-todo&quot;&gt;available on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the coming parts I&#39;d like to look at tidying up this code - perhaps abstracing all the Todo functionality out into an individual file - and then look at testing that file.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Package Management with Jam JS</title>
    <link href="http://www.jackfranklin.co.uk/blog/package-management-with-jam-js/"/>
    <updated>2012-07-01T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/package-management-with-jam-js/</id>
    <content type="html">&lt;p&gt;Today we&#39;ll take a look at &lt;a href=&quot;http://jamjs.org/&quot;&gt;Jam JS&lt;/a&gt;, a JavaScript Package Manager. This uses &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt; to load in your required packages and makes using JavaScript libraries much easier.&lt;/p&gt;
&lt;p&gt;The first thing to do is install it. This is done through the Node Package Manager, which I&#39;ll presume you&#39;ve got installed. If not, you need to install Node.js &amp;amp; NPM; there are plenty of resources online for helping you do this. To install simply run:&lt;/p&gt;
&lt;p&gt;npm install -g jamjs&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-g&lt;/code&gt; makes it install globally, which gives you the &lt;code&gt;jam&lt;/code&gt; command to run on the command line.&lt;/p&gt;
&lt;p&gt;Lets create a new project, which will be a simple website with some jQuery written to change the background colour of the website. For this usually I&#39;d pull in jQuery from Google&#39;s CDN, but Jam can download &amp;amp; set this up for us.&lt;/p&gt;
&lt;p&gt;Head into your project&#39;s directory and run:&lt;/p&gt;
&lt;p&gt;jam install jquery&lt;/p&gt;
&lt;p&gt;This will download the latest version of jQuery and put it into &lt;code&gt;./jam/jquery/jquery.js&lt;/code&gt;. By default all packages are installed to &lt;code&gt;./jam&lt;/code&gt;. Now, we could just include that script manually, but Jam comes with RequireJS to manage this for us.&lt;/p&gt;
&lt;p&gt;Firstly, here&#39;s my &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Jam JS&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;jam/require.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;app.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Using Jam JS&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key here is including &lt;code&gt;jam/require.js&lt;/code&gt;, which pulls in the RequireJS source, all configured to work with Jam&#39;s directory structure for packages.&lt;/p&gt;
&lt;p&gt;The work is done in &lt;code&gt;app.js&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;require([&#39;jquery&#39;], function () {
var changeBg = function() {
var body = $(&amp;quot;body&amp;quot;);&lt;/p&gt;
&lt;p&gt;var colours = [&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;green&amp;quot;, &amp;quot;yellow&amp;quot;];&lt;/p&gt;
&lt;p&gt;body.css(&amp;quot;background-color&amp;quot;, colours[Math.floor(Math.random()*colours.length)]);&lt;/p&gt;
&lt;p&gt;setTimeout(changeBg, 2000);&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;$(function() {
setTimeout(changeBg, 2000);
});
});&lt;/p&gt;
&lt;p&gt;That code just changes the background colour every 2 seconds, but the important bit is in the top line:&lt;/p&gt;
&lt;p&gt;require([&#39;jquery&#39;], function() {});&lt;/p&gt;
&lt;p&gt;RequireJS takes in a list of modules to load, and then a callback function to run once they are all loaded.&lt;/p&gt;
&lt;p&gt;So far, you might be wandering what the main advantage of Jam is. So far, it&#39;s been useful but nothing ground breaking. The main advantage for me is that you can update your scripts automatically. I don&#39;t know about you, but a lot of my projects still use old versions of libraries because I never got round to updating them. Well, with Jam it&#39;s as simple as:&lt;/p&gt;
&lt;p&gt;jam upgrade&lt;/p&gt;
&lt;p&gt;This checks all your libraries and will download new versions if required. You can also check for upgrades for an individual package:&lt;/p&gt;
&lt;p&gt;jam upgrade jquery&lt;/p&gt;
&lt;p&gt;However, sometimes you might want to stay at a specific version. Imagine jQuery 1.9 (not out yet, of course) introduces a change that breaks your application. You can tell Jam to lock jQuery at 1.8.x with:&lt;/p&gt;
&lt;p&gt;jam lock jquery@1.8.x&lt;/p&gt;
&lt;p&gt;This will allow it to upgrade jQuery all the way through 1.8 but not to 1.9. When the time comes for you to upgrade &amp;amp; fix those issues, you can unlock &amp;amp; upgrade it again:&lt;/p&gt;
&lt;p&gt;jam unlock jquery
jam upgrade jquery&lt;/p&gt;
&lt;p&gt;To view all your packages, you can do &lt;code&gt;jam ls&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can see the list of Jam&#39;s packages &lt;a href=&quot;http://jamjs.org/packages/#/&quot;&gt;on the Jam site&lt;/a&gt;, and also search. Whilst Jam is relatively new and does not have a huge library, a lot of very popular tools are on Jam, including jQuery, Underscore, CoffeeScript, Backbone, Handlebars and more.&lt;/p&gt;
&lt;p&gt;Once you&#39;ve got all your packages installed and your website done, it&#39;s time to put it live. We all know it&#39;s bad practise to include all these scripts individually, so Jam provides a mechanism to pool all our scripts into one. This will compile every library and the RequireJS source into one file:&lt;/p&gt;
&lt;p&gt;jam compile output.min.js&lt;/p&gt;
&lt;p&gt;This will produce &lt;code&gt;output.min.js&lt;/code&gt; which can then be included when putting your site into production.&lt;/p&gt;
&lt;p&gt;That brings to an end this whirlwind tour of Jam JS. Tools like this are becoming all the more common for JavaScript development &amp;amp; that&#39;s a good thing. In the next couple of months I&#39;ll be taking a look at a few tools that attempt to improve the JavaScript workflow &amp;amp; make managing libraries and packages easier.&lt;/p&gt;
&lt;p&gt;In a tutorial next week, I will show you how to make your own library a Jam package and publishing it for everyone to use.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Watch me Code Screencasts</title>
    <link href="http://www.jackfranklin.co.uk/blog/watch-me-code-screencasts/"/>
    <updated>2012-07-10T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/watch-me-code-screencasts/</id>
    <content type="html">&lt;p&gt;I have had a lot of tweets recently asking about how I work, the tools I use, the workflow I&#39;ve adopted and lots of related questions. I regularly tweet about tools and what I&#39;m up to; some people get annoyed by it but to me one of the best things you can do is to see how other developers do things &amp;amp; integrate bits into a workflow that suits you.&lt;/p&gt;
&lt;p&gt;Of course, there&#39;s no one definitive workflow for everyone, but I&#39;ve been asked enough times to show mine that I&#39;m going to do some screencasts titled &amp;quot;Watch me Code&amp;quot;. In these I&#39;ll code up a simple JavaScript project as I would in real life, and show you just how I go about doing things. This will include things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how I use Vim&lt;/li&gt;
&lt;li&gt;command line JS tools (Grunt, etc)&lt;/li&gt;
&lt;li&gt;Using Git&lt;/li&gt;
&lt;li&gt;Debugging with the Chrome dev tools&lt;/li&gt;
&lt;li&gt;TDD with Jasmine / Mocha / QUnit / others&lt;/li&gt;
&lt;li&gt;CoffeeScript development&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As there&#39;s a lot to cover, these will be split over multiple screencasts. What I&#39;m looking for from you lovely readers is two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What should I code up? If there&#39;s a plugin you&#39;d like to see created or a library made, then let me know! I&#39;ll do it for free, as long as you&#39;re happy that it gets put on Github in all its glory.&lt;/li&gt;
&lt;li&gt;What specifically would you like me to talk about?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In these screencasts I wont be explaining how every line of code works, I&#39;ll explain bits but I&#39;ll focus more on the tools I&#39;m using, tricks &amp;amp; tips I&#39;ve picked up, and so on.&lt;/p&gt;
&lt;p&gt;So, the power is in your hands...&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A Site Update</title>
    <link href="http://www.jackfranklin.co.uk/blog/a-site-update/"/>
    <updated>2012-07-16T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/a-site-update/</id>
    <content type="html">&lt;p&gt;As some of you will have noticed unfortunately posting has slowed in the past few weeks, and I just wanted to write a quick post to explain why. It&#39;s largely been down to starting a new job and moving house to a new city, so everything&#39;s been a bit hectic. I am pleased to say it&#39;s all settled down now, so I hope to resume posting at least twice a week in the very near future. I&#39;ve also been occupied with some other JS related projects which are very exciting, but unfortunately I can&#39;t say anything just yet.&lt;/p&gt;
&lt;p&gt;In other news, I;m looking for your feedback as always on what to write. Some people have told me articles are too long so I will be making an effort to do smaller, more targeted posts alongside longer ones. The list of upcoming topics includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction to Spine.js&lt;/li&gt;
&lt;li&gt;Creating your own NPM / Jam packages&lt;/li&gt;
&lt;li&gt;Testing with Sinon.js&lt;/li&gt;
&lt;li&gt;Watch Me Code Screencasts (working title)&lt;/li&gt;
&lt;li&gt;Angular.js&lt;/li&gt;
&lt;li&gt;Writing Node.js apps with CoffeeScript&lt;/li&gt;
&lt;li&gt;Creating Chrome &amp;amp; Firefox extensions&lt;/li&gt;
&lt;li&gt;Frisby.js&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And lots more. As always I&#39;m always looking for suggestions on what you&#39;d like to see written so please do let me know if you have any suggestions.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Come and watch me speak</title>
    <link href="http://www.jackfranklin.co.uk/blog/london-titanium-speaking/"/>
    <updated>2012-07-30T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/london-titanium-speaking/</id>
    <content type="html">&lt;p&gt;This coming Tuesday, July 31st, I&#39;m going to be talking at the &lt;a href=&quot;http://www.meetup.com/London-Titanium/events/72065822/&quot;&gt;London Titanium Meetup&lt;/a&gt;. If you&#39;re not a Titanium developer please don&#39;t be put off, I&#39;m doing a talk on an introduction to Node.js, that is not Titanium based at all. The event is free but spaces are limited so please do sign up on the above URL to register if you plan to attend. The event is free and if you&#39;re based in London and fancy an evening of JavaScript please do come along, it would be great to chat.&lt;/p&gt;
&lt;p&gt;If you&#39;ve any questions about the event, please do let me know and I&#39;ll either answer or put you in touch with the event organisers, who should be able to help out. It starts at 7PM on Tuesday and is being held close to Oxford Circus in the centre of London.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Introduction to RequireJS</title>
    <link href="http://www.jackfranklin.co.uk/blog/requirejs-amd-tutorial-introduction/"/>
    <updated>2012-07-30T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/requirejs-amd-tutorial-introduction/</id>
    <content type="html">&lt;p&gt;In this tutorial we are going to take a look at &lt;a href=&quot;http://www.requirejs.org/&quot;&gt;RequireJS&lt;/a&gt;, an AMD compatible asynchronous script loader that is incredibly powerful. In my experiments with RequireJS I&#39;ve hugely enjoyed working with it and will be using it heavily in my future development. This is a fairly heavy post as far as complexity goes, but please do stick with it. I struggled to get my head around RequireJS and AMD for a long time but once it &amp;quot;clicks&amp;quot; it is really awesome.&lt;/p&gt;
&lt;p&gt;The basic use case for RequireJS is as a basic script loader, but in this tutorial I wont concentrate on that, but on its uses for modular development. RequireJS implements the AMD (Asynchronous Module Definition) spec, which means we can write our own modules and load them with RequireJS, allowing it to manage dependencies for us. Have you ever had multiple script tags and had to load them in a particular order as one relied on the other? I have, and it&#39;s a nightmare. Working in a modular fashion really eliminates this issue and in this tutorial I hope to demonstrate just how.&lt;/p&gt;
&lt;p&gt;To do this, we are going to build an app (sort of - it&#39;s all very basic snippets of code) that has dependencies. It depends on both Underscore and jQuery. We could just include this as a whole host of &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags, but that&#39;s absolutely no fun and is also not efficient, when loading all those in a browser the rest of the page load will be blocked. We could minify them, but then we have to minify them and maintain order of the code, and it just becomes a nightmare. With RequireJS, we include the RequireJS source, and from there can get it to load in files.&lt;/p&gt;
&lt;p&gt;Firstly, create your project directory and the structure within. Mine looks like this:&lt;/p&gt;
&lt;p&gt;├── app.js
├── index.html
├── lib
│   ├── modules
│   │   └── template.js
│   ├── require.js
│   └── underscore.js&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app.js&lt;/code&gt; is my main file, we will look into this shortly.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib/modules&lt;/code&gt; is where all my self-written modules will go. With RequireJS all our code gets split into modules. I&#39;ll explain further in a moment.&lt;/li&gt;
&lt;li&gt;Files immediately within &lt;code&gt;lib&lt;/code&gt; are external libraries, in this case the RequireJS source and also Underscore.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To get started, head into your &lt;code&gt;index.html&lt;/code&gt; file and add in this line:&lt;/p&gt;
&lt;p&gt;&lt;script src=&quot;http://www.jackfranklin.co.uk/blog/requirejs-amd-tutorial-introduction/lib/require.js&quot; data-main=&quot;app&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;That line loads in the RequireJS source, but also tells RequireJS to automatically load in &lt;code&gt;app.js&lt;/code&gt;. This is what I will refer to from now on as our &amp;quot;main&amp;quot; JS file, it&#39;s where we will put our configuration for RequireJS and load in code. This also sets the base path for loading in files, whenever we load in a file with RequireJS, it will treat the folder &lt;code&gt;app.js&lt;/code&gt; is within as the base path and load all files relative to that. Now we&#39;ve got that done, we can get going.&lt;/p&gt;
&lt;p&gt;Before I get ahead of myself, let me show you how we load in dependencies. This is done through the &lt;code&gt;require&lt;/code&gt; function. To load in some code to run after a script, you use it like so:&lt;/p&gt;
&lt;p&gt;require([&#39;myfile&#39;], function(myFile) {
myFile.init();
});&lt;/p&gt;
&lt;p&gt;That would look for &lt;code&gt;myfile.js&lt;/code&gt; within the same directory as your main JS file, and whatever &lt;code&gt;myfile&lt;/code&gt; returns will be referenced within the callback as &lt;code&gt;myFile&lt;/code&gt;, as that&#39;s the variable name I passed into the callback. With libraries like jQuery and Underscore that register global objects, you don&#39;t need to do this.&lt;/p&gt;
&lt;p&gt;What we are going to do is set up jQuery with RequireJS. As of jQuery 1.7, it comes with support for AMD as it implements the AMD spec, so we can use it. You can see this right at the bottom of the un-minified source:&lt;/p&gt;
&lt;p&gt;if ( typeof define === &amp;quot;function&amp;quot; &amp;amp;&amp;amp; define.amd &amp;amp;&amp;amp; define.amd.jQuery ) {
define( &amp;quot;jquery&amp;quot;, [], function () { return jQuery; } );
}&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;define&lt;/code&gt; function is implemented by RequireJS to allow us to define modules. This one defines a named module named &amp;quot;jquery&amp;quot;. Usually when defining our own modules we don&#39;t explicitly name it (you&#39;ll see that later when we write our own) because the name is automatically generated by the file name, and we reference it based on that file name and the directory structure. Because jQuery has declared itself as a named module, we have to reference it as &amp;quot;jquery&amp;quot; when we load it in. This means, to make it work, we&#39;d have to have the jQuery source within our main directory (alongside &lt;code&gt;app.js&lt;/code&gt;) and name it &lt;code&gt;jquery.js&lt;/code&gt;, so when we reference it within &lt;code&gt;require()&lt;/code&gt; as &lt;code&gt;&amp;quot;jquery&amp;quot;&lt;/code&gt;, it loads properly (remember that RequireJS doesn&#39;t care about .js on the end). However, I prefer to load my jQuery version in from the Google CDN, so I need some way of telling RequireJS that when I try to load &amp;quot;jquery&amp;quot;, to fetch it from the CDN. Thankfully this is really easy:&lt;/p&gt;
&lt;p&gt;require.config({
paths: {
&amp;quot;jquery&amp;quot;: &amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min&amp;quot;
}
});&lt;/p&gt;
&lt;p&gt;That line means whenever I do:&lt;/p&gt;
&lt;p&gt;require([&#39;jquery&#39;], function() {
//some code
});&lt;/p&gt;
&lt;p&gt;It will pull in jQuery from the Google CDN. Note that I&#39;ve removed &amp;quot;.js&amp;quot; from the end of the URL. We&#39;ll also be using Underscore, and to save typing &lt;code&gt;lib/underscore&lt;/code&gt; to load it in, I set up a path for that too (I tend to set up paths for most of my libraries I&#39;m depending on. This means my config looks like:&lt;/p&gt;
&lt;p&gt;require.config({
paths: {
&amp;quot;jquery&amp;quot;: &amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min&amp;quot;,
&amp;quot;underscore&amp;quot;: &amp;quot;lib/underscore&amp;quot;,
}
});&lt;/p&gt;
&lt;p&gt;Now we have our set up sorted, lets write our first AMD module, called &lt;code&gt;template.js&lt;/code&gt;. This will provide a method that will compile a basic Underscore template and display it on the page. The functionality is very easy, as the idea here is to look more at the AMD side of things. To define a method, we use the &lt;code&gt;define()&lt;/code&gt; function. As we saw, we can explicitly name our module, like jQuery did, or we can let it be done based on the filename, which is fine. We need to pass &lt;code&gt;define()&lt;/code&gt; two things, an array of dependencies, and a function that will have our implementation in it. This module is going to depend on Underscore and jQuery:&lt;/p&gt;
&lt;p&gt;define([&#39;underscore&#39;, &#39;jquery&#39;], function() {});&lt;/p&gt;
&lt;p&gt;What we&#39;re going to do is write a function that will add a string to the body that says &amp;quot;Hello Name&amp;quot;, but let the name be passed into the function. It&#39;s a really easy implementation:&lt;/p&gt;
&lt;p&gt;var showName = function(n) {
var temp = _.template(&amp;quot;Hello &amp;lt;%= name %&amp;gt;&amp;quot;);
$(&amp;quot;body&amp;quot;).html(temp({name: n}));
};&lt;/p&gt;
&lt;p&gt;All we do is create a basic Underscore template and compile it, passing in the &lt;code&gt;name&lt;/code&gt; variable. I then use jQuery to add it to the &lt;code&gt;body&lt;/code&gt; of the page. Nothing complex at all.&lt;/p&gt;
&lt;p&gt;Now, to expose this method we simply need to return it. What we do is return an object containing properties that are the methods to expose. In our case:&lt;/p&gt;
&lt;p&gt;return {
showName: showName
};&lt;/p&gt;
&lt;p&gt;And with that, our entire module looks like so:&lt;/p&gt;
&lt;p&gt;define([&#39;underscore&#39;, &#39;jquery&#39;], function() {
var showName = function(n) {
var temp = _.template(&amp;quot;Hello &amp;lt;%= name %&amp;gt;&amp;quot;);
$(&amp;quot;body&amp;quot;).html(temp({name: n}));
};
return {
showName: showName
};
});&lt;/p&gt;
&lt;p&gt;The great thing about this is that you can have functions in your modules that are useful for internal use but avoid exposing them, and by dividing your app into multiple modules it&#39;s a great way to organise your code.&lt;/p&gt;
&lt;p&gt;Finally, all that&#39;s left to do is require our module in &lt;code&gt;app.js&lt;/code&gt; and then call &lt;code&gt;showName()&lt;/code&gt; on it:&lt;/p&gt;
&lt;p&gt;require([&#39;lib/modules/template&#39;], function(template) {
template.showName(&amp;quot;Jack&amp;quot;);
});&lt;/p&gt;
&lt;p&gt;Here the module we&#39;re loading does not expose itself globally, so to get at whatever it returns, we pass in a variable to the callback function that will be bound to what our module returns. If you&#39;re loading multiple modules, add multiple variables. For example:&lt;/p&gt;
&lt;p&gt;require([&#39;moduleA&#39;, &#39;moduleB&#39;, &#39;moduleC&#39;], function(a, b, c) {});&lt;/p&gt;
&lt;p&gt;Once the module is loaded, I can call &lt;code&gt;showName&lt;/code&gt; and sure enough, I get &amp;quot;Hello Jack&amp;quot; in the browser if I refresh my index page.&lt;/p&gt;
&lt;p&gt;Although this is a simple example I hope it helps to show the power behind RequireJS and what it can do with its modular approach. I&#39;ve really enjoyed using it and will no doubt be exploring it further in future tutorials as it does plenty more stuff I haven&#39;t covered here.&lt;/p&gt;
&lt;p&gt;As always, please do feel free to leave feedback and ask questions, I will endeavour to respond to them.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Speaking at WDC 2012</title>
    <link href="http://www.jackfranklin.co.uk/blog/speaking-at-wdc-2012/"/>
    <updated>2012-08-09T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/speaking-at-wdc-2012/</id>
    <content type="html">&lt;p&gt;I&#39;ve attended &lt;a href=&quot;http://www.webdevconf.com/&quot;&gt;WDC&lt;/a&gt; for the past two years so when Alex (@alexolder) gave me the chance to speak I couldn&#39;t say no. Having been at WDC the past two years I can tell you it&#39;s a great day out and the after party is always great fun too. If you&#39;re able to make it I&#39;d highly recommend it. Tickets are only £60 or £40 if you&#39;re a student. As an extra bonus if you use the discount code &amp;quot;jackfollowers&amp;quot; you&#39;ll get a little bit of money off.&lt;/p&gt;
&lt;p&gt;As of yet my talk title is not defined but it will be JavaScript based (obviously).&lt;/p&gt;
&lt;p&gt;Hope to see you there!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Writing a Command Line Node Tool</title>
    <link href="http://www.jackfranklin.co.uk/blog/writing-a-command-line-node-tool/"/>
    <updated>2012-08-17T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/writing-a-command-line-node-tool/</id>
    <content type="html">&lt;p&gt;Today we are going to combine a few different tools and create a simple Node package that will allow a user to search a directory for files. In this tutorial we will use Grunt to do a lot of the work for us, see how to to make a Node script executable on the command line, and finally see how we publish it to the Node Package Manager (npm) so anyone can install it.&lt;/p&gt;
&lt;p&gt;The pre-requisites to this are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have NodeJS installed (and preferably 0.10.32 up, this is &lt;strong&gt;not&lt;/strong&gt; tested on Node &amp;lt; 0.10.32)&lt;/li&gt;
&lt;li&gt;Have the Node Package Manager (npm) installed.&lt;/li&gt;
&lt;li&gt;Have Grunt-init and and Grunt-cli installed, or if not, run &lt;code&gt;npm install -g grunt-init&lt;/code&gt; and &lt;code&gt;npm install -g grunt-cli&lt;/code&gt; (or sudo npm install -g grunt-cli ). Some basic familiarity is good too, &lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/grunt-js-command-line-tutorial&quot;&gt;I&#39;ve written an introduction to it&lt;/a&gt; previously. If you&#39;ve never used it, go read that and then return.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the first thing to do is create a new project. Create a directory for it and change to the directory you created.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install the current version of Grunt local to your project&lt;/p&gt;
&lt;p&gt;npm install grunt --save&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will mark grunt your project&#39;s package.json devDependencies section.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add the node grunt-init template&lt;/p&gt;
&lt;p&gt;git clone https://github.com/gruntjs/grunt-init-node.git ~/.grunt-init/node&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(The current version on grunt-init doesn&#39;t come with any base templates. Additional information is avaliable at &lt;a href=&quot;http://gruntjs.com/project-scaffolding&quot;&gt;Project Scaffolding&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use grunt-init to create a new node project&lt;/p&gt;
&lt;p&gt;grunt-init node&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will take us through set up to set up our new project. It will ask you some questions. Feel free to deviate, but here&#39;s how I answered them:&lt;/p&gt;
&lt;p&gt;[?] Project name (playground-nodecmd) filesearch
[?] Description (The best project ever.) Awesome file search.
[?] Version (0.1.0)
[?] Project git repository (git://github.com/JackFranklin/filesearch.git)
[?] Project homepage (https://github.com/JackFranklin/filesearch)
[?] Project issues tracker (https://github.com/JackFranklin/filesearch/issues)
[?] Licenses (MIT)
[?] Author name (Jack Franklin)
[?] Author email (jack@jackfranklin.net)
[?] Author url (none)
[?] What versions of node does it run on? (&amp;gt;= 0.8.0) 0.10.32
[?] Main module/entry point (lib/filesearch)
[?] Npm test command (grunt nodeunit)
[?] Will this project be tested with Travis CI? (Y/n) n
[?] Do you need to make any changes to the above before continuing? (y/N) n&lt;/p&gt;
&lt;p&gt;You will see Grunt has got us started:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Writing .gitignore...OK
Writing .jshintrc...OK
Writing Gruntfile.js...OK
Writing README.md...OK
Writing lib/filesearch.js...OK
Writing test/filesearch_test.js...OK
Writing LICENSE-MIT...OK
Writing package.json...OK

Initialized from template &amp;quot;node&amp;quot;.
You should now install project dependencies with npm install. After that, you
may execute project tasks with grunt. For more information about installing
and configuring Grunt, please see the Getting Started guide:

http://gruntjs.com/getting-started

Done, without errors.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We wont actually be writing tests for this package as it&#39;s very simple. To search for files in a directory, we&#39;re just going to execute the shell command:&lt;/p&gt;
&lt;p&gt;ls -a | grep somefile&lt;/p&gt;
&lt;p&gt;In the future I will write on creating more complex modules and testing them, but for this we&#39;ll focus on implementation.&lt;/p&gt;
&lt;p&gt;Load up &lt;code&gt;package.json&lt;/code&gt; in your editor. It should look like this:&lt;/p&gt;
&lt;p&gt;{
&amp;quot;name&amp;quot;: &amp;quot;filesearch&amp;quot;,
&amp;quot;description&amp;quot;: &amp;quot;Awesome file search.&amp;quot;,
&amp;quot;version&amp;quot;: &amp;quot;0.1.0&amp;quot;,
&amp;quot;homepage&amp;quot;: &amp;quot;https://github.com/JackFranklin/filesearch&amp;quot;,
&amp;quot;author&amp;quot;: {
&amp;quot;name&amp;quot;: &amp;quot;Jack Franklin&amp;quot;,
&amp;quot;email&amp;quot;: &amp;quot;jack@jackfranklin.net&amp;quot;
},
&amp;quot;repository&amp;quot;: {
&amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,
&amp;quot;url&amp;quot;: &amp;quot;git://github.com/JackFranklin/filesearch.git&amp;quot;
},
&amp;quot;bugs&amp;quot;: {
&amp;quot;url&amp;quot;: &amp;quot;https://github.com/JackFranklin/filesearch/issues&amp;quot;
},
&amp;quot;licenses&amp;quot;: [
{
&amp;quot;type&amp;quot;: &amp;quot;MIT&amp;quot;,
&amp;quot;url&amp;quot;: &amp;quot;https://github.com/JackFranklin/filesearch/blob/master/LICENSE-MIT&amp;quot;
}
],
&amp;quot;main&amp;quot;: &amp;quot;lib/filesearch&amp;quot;,
&amp;quot;engines&amp;quot;: {
&amp;quot;node&amp;quot;: &amp;quot;0.10.32&amp;quot;
},
&amp;quot;scripts&amp;quot;: {
&amp;quot;test&amp;quot;: &amp;quot;grunt nodeunit&amp;quot;
},
&amp;quot;devDependencies&amp;quot;: {
&amp;quot;grunt-contrib-jshint&amp;quot;: &amp;quot;~0.6.4&amp;quot;,
&amp;quot;grunt-contrib-nodeunit&amp;quot;: &amp;quot;~0.2.0&amp;quot;,
&amp;quot;grunt-contrib-watch&amp;quot;: &amp;quot;~0.5.3&amp;quot;,
&amp;quot;grunt&amp;quot;: &amp;quot;~0.4.5&amp;quot;
},
&amp;quot;keywords&amp;quot;: []
}&lt;/p&gt;
&lt;p&gt;We need to add some properties to that. After the last property, as shown below:&lt;/p&gt;
&lt;p&gt;&amp;quot;Keywords&amp;quot;: []
&lt;code&gt;     //Add here this here      ,&amp;quot;preferGlobal&amp;quot;: &amp;quot;true&amp;quot;,       &amp;quot;bin&amp;quot;: {         &amp;quot;filesearch&amp;quot; : &amp;quot;lib/filesearch.js&amp;quot;       }     &lt;/code&gt;
}&lt;/p&gt;
&lt;p&gt;The first line denotes that our package should be installed globally if possible. If the user installs it locally, they will see a message about how it should be done globally. The second object, &lt;code&gt;bin&lt;/code&gt;, denotes files that should be executable on the command line, and how we should reference them. Here we are saying that when we hit &lt;code&gt;filesearch&lt;/code&gt; in the command line, it should run &lt;code&gt;lib/filesearch.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To make this happen, load up &lt;code&gt;lib/filesearch.js&lt;/code&gt; in your editor, and add this line at the very top:&lt;/p&gt;
&lt;p&gt;#! /usr/bin/env node&lt;/p&gt;
&lt;p&gt;This says how the script should be executed, in this case through Node.&lt;/p&gt;
&lt;p&gt;Add an additional line to the end of &lt;code&gt;lib/filesearch.js&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;console.log(&amp;quot;Success&amp;quot;);&lt;/p&gt;
&lt;p&gt;Once that is done, we can run &lt;code&gt;npm link&lt;/code&gt; to install our package locally so we can test it. Run &lt;code&gt;npm link&lt;/code&gt; and then you should have access to the &lt;code&gt;filesearch&lt;/code&gt; command. Of course, right now it only logs success to the console. To confirm it is working run &lt;code&gt;filesearch Grunt&lt;/code&gt; and look for the output &lt;code&gt;success&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, delete the rest of the code from &lt;code&gt;lib/filesearch&lt;/code&gt;, which is:&lt;/p&gt;
&lt;p&gt;&#39;use strict&#39;;&lt;/p&gt;
&lt;p&gt;exports.awesome = function() {
return &#39;awesome&#39;;
};&lt;/p&gt;
&lt;p&gt;console.log(&amp;quot;Success&amp;quot;);&lt;/p&gt;
&lt;p&gt;&lt;code&gt;exports&lt;/code&gt; is a way of exporting methods and variables from your script, that can be used in others. Say if this script was one other developers could use, &lt;code&gt;exports&lt;/code&gt; is the object that will be returned when a developer includes our module through &lt;code&gt;var x = require(&amp;quot;ourpackage&amp;quot;);&lt;/code&gt;. Because ours is a command line tool that&#39;s little use, so there&#39;s no need to include it. Now, lets implement this. I am envisaging that the use of this module is like so:&lt;/p&gt;
&lt;p&gt;filesearch filename&lt;/p&gt;
&lt;p&gt;So the parameter passed in is what we need to search for. All the arguments are stored in the array &lt;code&gt;process.argv&lt;/code&gt;. To inspect them, add this line:&lt;/p&gt;
&lt;p&gt;console.log(process.argv);&lt;/p&gt;
&lt;p&gt;And then run &lt;code&gt;filesearch grunt&lt;/code&gt; and check the result:
filesearch grunt
[ &#39;node&#39;, &#39;/usr/local/bin/filesearch&#39;, &#39;grunt&#39; ]
You can see that the first two arguments refer to how the script is executed and where the executable is. Hence, the actual arguments passed in start at the second index. Therefore we can get at the user supplied arguments by slicing the array at index 2:&lt;/p&gt;
&lt;p&gt;var userArgs = process.argv.slice(2);&lt;/p&gt;
&lt;p&gt;And then get our argument as the first argument of &lt;code&gt;userArgs&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;var searchParam = userArgs[0];&lt;/p&gt;
&lt;p&gt;Rather than do the implementation step by step, as it&#39;s only six lines, I&#39;ll show you and then explain:&lt;/p&gt;
&lt;p&gt;var userArgs = process.argv.slice(2);
var searchParam = userArgs[0];&lt;/p&gt;
&lt;p&gt;var exec = require(&#39;child_process&#39;).exec;
var child = exec(&#39;ls -a | grep &#39; + searchParam, function(err, stdout, stderr) {
if (err) throw err;
console.log(stdout);
});&lt;/p&gt;
&lt;p&gt;The first two lines get the search parameter, as I explained above.&lt;/p&gt;
&lt;p&gt;Next up we use Node&#39;s &lt;a href=&quot;http://nodejs.org/api/child_process.html&quot;&gt;Child Process&lt;/a&gt; library, more specifically the &lt;a href=&quot;http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback&quot;&gt;exec module&lt;/a&gt;, which runs a shell command and buffers the output. The command we need to run is:&lt;/p&gt;
&lt;p&gt;ls -a | grep {searchParam}&lt;/p&gt;
&lt;p&gt;For those unfamiliar with the shell, &lt;code&gt;ls -a&lt;/code&gt; means list all files, and &lt;code&gt;grep something&lt;/code&gt; searches for the term &amp;quot;something&amp;quot;. By piping the result of &lt;code&gt;ls -a&lt;/code&gt; through to &lt;code&gt;grep something&lt;/code&gt;, it searches everything &lt;code&gt;ls -a&lt;/code&gt; returned for &lt;code&gt;something&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So once we have the &lt;code&gt;exec&lt;/code&gt; variable, we can execute it. It takes two parameters, the string to execute and a callback. Exec is asynchronous, like most of Node in general, so any code to run after we have the result must go in the callback. Within the callback, all we do is throw an error if it exists, and if it doesn&#39;t just log the output.&lt;/p&gt;
&lt;p&gt;The pattern of callback functions taking the error as the first parameter is very common within Node. You will often see:&lt;/p&gt;
&lt;p&gt;function(err, stdout, stderr) {
if(err) throw err;
//rest of code
}&lt;/p&gt;
&lt;p&gt;As a pattern. Now we&#39;ve done that, running &lt;code&gt;filesearch Grunt&lt;/code&gt; within our project directory should get you what we want:&lt;/p&gt;
&lt;p&gt;filesearch Grunt
Gruntfile.js&lt;/p&gt;
&lt;p&gt;Of course, this module in practice is useless, but hopefully it has demonstrated how to go about making simple command line tools in Node. If you&#39;d like a more complex example, my &lt;a href=&quot;https://github.com/jackfranklin/nodefetch&quot;&gt;Nodefetch&lt;/a&gt; tool might make interesting reading.&lt;/p&gt;
&lt;p&gt;To publish this as an npm module, you need to do three things. Firstly, authenticate yourself with npm, or signup with npm. To do this, run &lt;code&gt;npm adduser&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Secondly, you should make sure your project is a Git repository, and:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;node_modules/&lt;/code&gt; to your &lt;code&gt;.gitignore&lt;/code&gt; file, to make sure only your module code is pushed, and not the modules you use. These are dealt with when the user installs your module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure your repository has a valid &lt;code&gt;package.json&lt;/code&gt; (running &lt;code&gt;npm link&lt;/code&gt; will verify this, if it works without error, you&#39;re fine).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push your repository to Github (or elsewhere) and make sure in your &lt;code&gt;package.json&lt;/code&gt;, the &lt;code&gt;repository&lt;/code&gt; object looks like so:&lt;/p&gt;
&lt;p&gt;&amp;quot;repository&amp;quot;: {
&amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,
&amp;quot;url&amp;quot;: &amp;quot;git://github.com/JackFranklin/filesearch.git&amp;quot;
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then it&#39;s easy, just run &lt;code&gt;npm publish&lt;/code&gt;, and you&#39;re done. It really is as easy as that. Users can then install your module through &lt;code&gt;npm install modulename&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I hope this tutorial has been useful, and if you have any questions please leave a comment, or feel free to tweet or email me.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>nodefetch, a command line download tool</title>
    <link href="http://www.jackfranklin.co.uk/blog/nodefetch-a-command-line-download-tool/"/>
    <updated>2012-08-20T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/nodefetch-a-command-line-download-tool/</id>
    <content type="html">&lt;p&gt;As part of me wanting to spend some time playing with command line Node.js tools, last week I sat down and wrote &lt;a href=&quot;https://github.com/jackfranklin/nodefetch&quot;&gt;nodefetch&lt;/a&gt;. Whilst I don&#39;t usually blog about my projects on here, I thought this one might be of use to a few people, so thought I&#39;d quickly write up about it. If you enjoyed last week&#39;s tutorial on &lt;a href=&quot;http://javascriptplayground.com/blog/2012/08/writing-a-command-line-node-tool&quot;&gt;creating a command line Node tool&lt;/a&gt;, this is a great chance for you to dive into the source of a little more complex tool.&lt;/p&gt;
&lt;p&gt;Once installed through NPM with &lt;code&gt;npm install nodefetch -g&lt;/code&gt;, you are able to download the latest copy of jQuery into your present working directory as easily as:&lt;/p&gt;
&lt;p&gt;nodefetch jquery&lt;/p&gt;
&lt;p&gt;You could also download multiple files:&lt;/p&gt;
&lt;p&gt;nodefetch jquery backbone underscore&lt;/p&gt;
&lt;p&gt;Isn&#39;t that awesome? I think so and a few folks I shared it with liked it too.&lt;/p&gt;
&lt;p&gt;It works by keeping a &lt;code&gt;.nodefetch.json&lt;/code&gt; file in your home directory that links package names to their downloads. When you first run nodefetch it will download the default file from my own server, but you are then free to edit it to add your own packages to suit you.&lt;/p&gt;
&lt;p&gt;There&#39;s more detailed instructions on Github involving how nodefetch is tested (I even wrote another npm package to help me test it) and how to contribute if you&#39;d like to help out. I&#39;ve got plenty more planned for nodefetch and if you do find it useful I&#39;d love for you to let me know. Similarly, if you look through the source and see anything you don&#39;t understand, feel free to ask.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Essential JavaScript Script Loaders</title>
    <link href="http://www.jackfranklin.co.uk/blog/essential-javascript-script-loaders/"/>
    <updated>2012-09-03T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/essential-javascript-script-loaders/</id>
    <content type="html">&lt;p&gt;For those who don&#39;t follow me on Twitter or perhaps missed it, one of the reasons I&#39;ve not been blogging on JSPlayground as much recently is down to writing for other sites too.&lt;/p&gt;
&lt;p&gt;Last week .net magazine published my article on the &lt;a href=&quot;http://www.netmagazine.com/features/essential-javascript-top-five-script-loaders&quot;&gt;Top 5 JavaScript Script Loaders&lt;/a&gt;. It covers Yepnope, Require and some others too so if you&#39;ve been looking at script loaders or wanted to for a while, hopefully this article might be of use to you.&lt;/p&gt;
&lt;p&gt;Another reason I&#39;ve not been blogging as much is because I&#39;ve signed a book deal with &lt;a href=&quot;http://www.apress.com/&quot;&gt;Apress&lt;/a&gt; to write a new book titled &amp;quot;Beginning jQuery&amp;quot;. This will hopefully take a developer from jQuery novice to someone who&#39;s comfortable entirely with the library and its more complex applications. At this stage three chapters have been written, although there&#39;s plenty more to be written. The book is going to be out in early 2013 and there will be a couple of copies on the JSPlayground to be won.&lt;/p&gt;
&lt;p&gt;Finally don&#39;t forget that I&#39;m speaking at &lt;a href=&quot;http://2012.webdevconf.com/&quot;&gt;WebDevConf&lt;/a&gt; on October 19th. I&#39;m going to be talking all about writing better jQuery, with a specific focus to not tying yourself so tightly to any DOM structure. Tickets are just £60 (£40 for students) and the discount code &amp;quot;jackfollowers&amp;quot; will get you an additional 10% off. It would be great to meet some new faces so please do come along.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Cross Browser Testing with bunyip</title>
    <link href="http://www.jackfranklin.co.uk/blog/cross-browser-testing-with-bunyip/"/>
    <updated>2012-09-17T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/cross-browser-testing-with-bunyip/</id>
    <content type="html">&lt;p&gt;Today we&#39;re going to take a look at &lt;a href=&quot;https://github.com/ryanseddon/bunyip&quot;&gt;bunyip&lt;/a&gt;, a tool from &lt;a href=&quot;http://twitter.com/ryanseddon&quot;&gt;Ryan Seddon&lt;/a&gt; to make running your test specs in multiple browsers really easy.&lt;/p&gt;
&lt;p&gt;Out of the box, bunyip only supports the YUI Test framework (this is due to the fact that Yeti, the tool bunyip uses, only supports YUI) but Ryan has written adapters for QUnit, Mocha and Jasmine. In this tutorial I&#39;ll take some Jasmine specs and run them through bunyip, using Ryan&#39;s Jasmine adapter. The specs are going to be from my &lt;a href=&quot;https://efendibooks.com/minibooks/testing-with-coffeescript&quot;&gt;Testing With CoffeeScript&lt;/a&gt; ebook, which is free and if you haven&#39;t checked it out yet, I&#39;d love it if you could give it a read and let me know your thoughts.&lt;/p&gt;
&lt;p&gt;bunyip is easily installed through npm, as a global module:&lt;/p&gt;
&lt;p&gt;npm install -g bunyip&lt;/p&gt;
&lt;p&gt;To run bunyip locally, simply run:&lt;/p&gt;
&lt;p&gt;bunyip -f yourspecs.html local&lt;/p&gt;
&lt;p&gt;The file you point bunyip to should be your spec runner, so for Jasmine users it&#39;s the SpecRunner.html file. The &lt;code&gt;local&lt;/code&gt; option tells bunyip to run local browsers. It&#39;s pretty smart about how it does this, and will look for the following browsers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firefox and FF Nightly&lt;/li&gt;
&lt;li&gt;Chrome and Canary&lt;/li&gt;
&lt;li&gt;Opera and Opera Next&lt;/li&gt;
&lt;li&gt;Safari&lt;/li&gt;
&lt;li&gt;PhantomJS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before we run bunyip, lets use Ryan&#39;s Jasmine adapter for Yeti, which is what bunyip uses to run the tests.&lt;/p&gt;
&lt;p&gt;In the top of the spec runner file, just below the line that sources Jasmine, add in a line below to include the Jasmine adapter, which you can &lt;a href=&quot;https://github.com/ryanseddon/yeti-adaptors/blob/master/jasmine/jasmine-yeti-adaptor.js&quot;&gt;find here&lt;/a&gt;. I&#39;d recommend downloading it and putting it into the same folder as the Jasmine source.&lt;/p&gt;
&lt;p&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.jackfranklin.co.uk/blog/cross-browser-testing-with-bunyip/lib/jasmine-1.1.0/jasmine.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.jackfranklin.co.uk/blog/cross-browser-testing-with-bunyip/lib/jasmine-1.1.0/jasmine-yeti-adaptor.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;If you take a look at your SpecRunner.html, you&#39;ll see this section of JavaScript that runs the tests:
(function() {
var jasmineEnv = jasmine.getEnv();
jasmineEnv.updateInterval = 1000;
var htmlReporter = new jasmine.HtmlReporter();
jasmineEnv.addReporter(htmlReporter);
jasmineEnv.specFilter = function(spec) {
return htmlReporter.specFilter(spec);
};
var currentWindowOnload = window.onload;
window.onload = function() {
if (currentWindowOnload) {
currentWindowOnload();
}
execJasmine();
};
function execJasmine() {
jasmineEnv.execute();
}
})();
All you need to do is slot in this check that sorts bunyip out:
if (window.$yetify !== undefined) {
BUNYIP.hookup(jasmineEnv);
}
I decided to add this into the &lt;code&gt;execJasmine()&lt;/code&gt; function:&lt;/p&gt;
&lt;p&gt;function execJasmine() {
if (window.$yetify !== undefined) {
BUNYIP.hookup(jasmineEnv);
}
jasmineEnv.execute();
}&lt;/p&gt;
&lt;p&gt;Now we&#39;ve got that sorted, head into the folder where your SpecRunner.html resides and run:&lt;/p&gt;
&lt;p&gt;bunyip -f SpecRunner.html local&lt;/p&gt;
&lt;p&gt;You should get an output similar to this:
Creating a Hub at http://localhost:9000
Waiting for agents to connect at http://localhost:9000.
When ready, press Enter to begin testing.
Agent connected: Chrome (21.0.1180.89) / Mac OS
Agent connected: Firefox (14.0.1) / Mac OS
Agent connected: Safari (5.1.7) / Mac OS
Agent connected: Mozilla/5.0 (Macintosh; Intel Mac OS X) AppleWebKit/534.34 (KHTML, like Gecko) PhantomJS/1.6.1 Safari/534.34&lt;/p&gt;
&lt;p&gt;bunyip finds the browsers you have installed (for me, it&#39;s Chrome, Safari and Firefox), along with PhantomJS. Once all the browsers you want have loaded, you need to press enter to run the tests. When you&#39;re happy, hit enter.
Testing started on Chrome (21.0.1180.89) / Mac OS, Firefox (14.0.1) / Mac OS, Safari (5.1.7) / Mac OS, Mozilla/5.0 (Macintosh; Intel Mac OS X) AppleWebKit/534.34 (KHTML, like Gecko) PhantomJS/1.6.1 Safari/534.34
Testing... &#92; 0% complete (0/4) 52.15 tests/sec
Agent completed: Firefox (14.0.1) / Mac OS
Agent completed: Mozilla/5.0 (Macintosh; Intel Mac OS X) AppleWebKit/534.34 (KHTML, like Gecko) PhantomJS/1.6.1 Safari/534.34
Testing... / 50% complete (2/4) 35.58 tests/sec
Agent completed: Chrome (21.0.1180.89) / Mac OS
Agent completed: Safari (5.1.7) / Mac OS
Testing... | 100% complete (4/4) 20.47 tests/sec 92 tests passed! (1417ms)
You&#39;ll see each browser briefly flash your specs page and then close again as all tests run, and pass in my case. If you want to run specific browsers, you can:&lt;/p&gt;
&lt;p&gt;bunyip -f SpecRunner.html local -l &amp;quot;firefox|phantomjs&amp;quot;&lt;/p&gt;
&lt;p&gt;Which does indeed just run those browsers:
Agent connected: Firefox (14.0.1) / Mac OS
Agent connected: Mozilla/5.0 (Macintosh; Intel Mac OS X) AppleWebKit/534.34 (KHTML, like Gecko) PhantomJS/1.6.1 Safari/534.34
This makes bunyip a great tool for quickly testing your specs cross-browser. I should also note that if you have a paid BrowserStack account, you can easily connect bunyip up to that which enables you to run your specs on all the devices Browser Stack supports, including IE and iOS devices. To find out more on that, I suggest checking out the &lt;a href=&quot;https://github.com/ryanseddon/bunyip&quot;&gt;bunyip repository&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Hosting a Node app on Heroku</title>
    <link href="http://www.jackfranklin.co.uk/blog/hosting-a-node-app-on-heroku/"/>
    <updated>2012-10-07T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/hosting-a-node-app-on-heroku/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;Note: I apologise for the lack of updates on JS Playground recently, but happy to announce the site is now returning to at least one post per week. Any requests for content, please get in touch.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Today I want to look at using the popular &lt;a href=&quot;http://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; to host a simple Node app. I got asked recently if I had any suggestions on hosting a small Node app, and Heroku&#39;s free plan is usually more than enough for little side projects, or to show off something you&#39;re working on. It can be a bit daunting if you&#39;ve never used it before, so I thought a step by step guide would be of use. This tutorial does require knowledge of Git and also you should be comfortable with the command line - if you&#39;re not then Heroku probably isn&#39;t for you.&lt;/p&gt;
&lt;p&gt;Heroku is heavily used to run Ruby / Rails apps but recently added Node.js support and it&#39;s a really great way to quickly and easily get something running online.&lt;/p&gt;
&lt;p&gt;If you haven&#39;t already, you&#39;ll need to &lt;a href=&quot;https://api.heroku.com/signup/devcenter&quot;&gt;sign up to Heroku&lt;/a&gt;, which is completely free. You&#39;ll then need to install the &lt;a href=&quot;https://toolbelt.heroku.com/&quot;&gt;Heroku Toolbelt&lt;/a&gt;, which will give you access to the &lt;code&gt;heroku&lt;/code&gt; command line interface.&lt;/p&gt;
&lt;p&gt;For the app, I&#39;m going to use the small Express server example I introduced in my &lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/beginning-node-js-express-tutorial&quot;&gt;Beginning Node&lt;/a&gt; tutorial. This contains &lt;code&gt;helloworld.js&lt;/code&gt;, which has the following:&lt;/p&gt;
&lt;p&gt;var app = require(&#39;express&#39;).createServer();
app.get(&#39;/&#39;, function(req, res) {
res.send(&amp;quot;Hello World&amp;quot;);
});&lt;/p&gt;
&lt;p&gt;app.listen(3000, function() {
console.log(&amp;quot;listening on 3000&amp;quot;);
});&lt;/p&gt;
&lt;p&gt;We need to make one change to this though. Heroku will need us to run on a specific port, which we access through the &lt;code&gt;process&lt;/code&gt; object, which is available to use. Make your app listen on the port number specified in &lt;code&gt;process.env.PORT&lt;/code&gt;, or if it can&#39;t find one, revert to 3000. This way it will work both locally and on Heroku.&lt;/p&gt;
&lt;p&gt;app.listen(process.env.PORT || 3000, function() {
console.log(&amp;quot;listening on 3000&amp;quot;);
});&lt;/p&gt;
&lt;p&gt;And also &lt;code&gt;package.json&lt;/code&gt;, which lists the dependencies we have. Heroku also recommend you list your engines in &lt;code&gt;package.json&lt;/code&gt;, so add them in so your file looks like so:&lt;/p&gt;
&lt;p&gt;{
&amp;quot;name&amp;quot;: &amp;quot;jsphelloworld&amp;quot;,
&amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;,
&amp;quot;dependencies&amp;quot;: {
&amp;quot;express&amp;quot;: &amp;quot;~2.5.9&amp;quot;
},
&amp;quot;engines&amp;quot;: {
&amp;quot;node&amp;quot;: &amp;quot;0.8.x&amp;quot;,
&amp;quot;npm&amp;quot;: &amp;quot;1.1.x&amp;quot;
}
}&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is using an outdated version of Express but for this tutorial it&#39;s irrelevant - there&#39;s tutorials planned around Express V3 in the near future.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It&#39;s important to note that you have to be using NPM to manage your dependencies to host with Heroku. You also need to be using Git as your VCS too, as to update files on Heroku you do a &lt;code&gt;git push&lt;/code&gt;. Run &lt;code&gt;npm install&lt;/code&gt; to make sure your &lt;code&gt;package.json&lt;/code&gt; file is valid, and that you&#39;ve got all your dependencies sorted.&lt;/p&gt;
&lt;p&gt;Next we need to tell the Heroku server how it should run our app. This is done through what Heroku call a &lt;a href=&quot;https://devcenter.heroku.com/articles/procfile&quot;&gt;Procfile&lt;/a&gt;. It&#39;s a simple text file created in the project root and for this example, we simply need to tell it how to run our app, which is done like so:&lt;/p&gt;
&lt;p&gt;web: node helloworld.js&lt;/p&gt;
&lt;p&gt;That&#39;s &lt;strong&gt;all&lt;/strong&gt; your Procfile should contain. Youc an test this by running it through Foreman, a way of running apps that uses a Procile to do it. Run &lt;code&gt;foreman start&lt;/code&gt; (it&#39;s installed as part of the Heroku toolbelt) and you should see output somewhat like this:
-&amp;gt; foreman start
12:37:50 web.1 | started with pid 1890
12:37:51 web.1 | Listening on 3000
If you get that, everything&#39;s working fine. You can go to &lt;code&gt;localhost:3000&lt;/code&gt; to check if you want to make sure.&lt;/p&gt;
&lt;p&gt;Now it&#39;s time to get these files into Git. Initialise your Git repository if your code is not in Git already, and commit all the changes we&#39;ve made. Now we&#39;re ready to run it on Heroku.&lt;/p&gt;
&lt;p&gt;On the command line, run &lt;code&gt;heroku login&lt;/code&gt;. This will authenticate you and set up any neccessary public keys required to allow you to push to Heroku. Now run &lt;code&gt;heroku create&lt;/code&gt; to get Heroku to set up a site for you:
-&amp;gt; heroku create
Creating fathomless-cove-9338... done, stack is cedar
http://fathomless-cove-9338.herokuapp.com/ | git@heroku.com:fathomless-cove-9338.git
Git remote heroku added
Now it&#39;s time to deploy your app. Heroku sets up a git remote for you, so to deploy simply run:&lt;/p&gt;
&lt;p&gt;git push heroku master&lt;/p&gt;
&lt;p&gt;This will take a few moments, especially the first time. Your output should look something like:&lt;/p&gt;
&lt;p&gt;-&amp;gt; git push heroku master
Counting objects: 6, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (6/6), 629 bytes, done.
Total 6 (delta 0), reused 0 (delta 0)&lt;/p&gt;
&lt;p&gt;-----&amp;gt; Heroku receiving push
-----&amp;gt; Node.js app detected
-----&amp;gt; Resolving engine versions
Using Node.js version: 0.8.11
Using npm version: 1.1.49
-----&amp;gt; Fetching Node.js binaries
-----&amp;gt; Vendoring node into slug
-----&amp;gt; Installing dependencies with npm
[snip - NPM logging here is pretty verbose]
Dependencies installed
-----&amp;gt; Building runtime environment
-----&amp;gt; Discovering process types
Procfile declares types -&amp;gt; web
-----&amp;gt; Compiled slug size: 4.0MB
-----&amp;gt; Launching... done, v3
http://fathomless-cove-9338.herokuapp.com deployed to Heroku&lt;/p&gt;
&lt;p&gt;Nearly there! You now need to tell Heroku to run 1 web process, which is done like so:&lt;/p&gt;
&lt;p&gt;heroku ps:scale web=1&lt;/p&gt;
&lt;p&gt;And finally, check out your app:&lt;/p&gt;
&lt;p&gt;heroku open&lt;/p&gt;
&lt;p&gt;This will open your site in the browser and if yours is like &lt;a href=&quot;http://fathomless-cove-9338.herokuapp.com/&quot;&gt;mine&lt;/a&gt;, you should get the text &amp;quot;Hello World&amp;quot; right back at you.&lt;/p&gt;
&lt;p&gt;Heroku can be a little daunting at first but hopefully this guide has shown that it&#39;s pretty straight forward once you get used to the way it works.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Five JavaScript Testing Libraries</title>
    <link href="http://www.jackfranklin.co.uk/blog/five-javascript-testing-libraries/"/>
    <updated>2012-10-11T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/five-javascript-testing-libraries/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;Jack Franklin explores five popular JavaScript testing libraries and provides examples of how to use them so you&#39;ll be able to choose the best one for the task in hand when your next JS project comes round.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The second article I&#39;ve written on the .net website - this time looking at libraries that exist for testing your JavaScript. &lt;a href=&quot;http://www.netmagazine.com/features/essential-javascript-top-five-testing-libraries&quot;&gt;Go on, give it a read&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Making your library AMD compliant</title>
    <link href="http://www.jackfranklin.co.uk/blog/making-your-library-amd-compliant/"/>
    <updated>2012-10-15T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/making-your-library-amd-compliant/</id>
    <content type="html">&lt;p&gt;Previously on this blog I&#39;ve written about an AMD approach with &lt;a href=&quot;http://javascriptplayground.com/blog/2012/07/requirejs-amd-tutorial-introduction&quot;&gt;Require.js&lt;/a&gt; and about package management with &lt;a href=&quot;http://javascriptplayground.com/blog/2012/07/package-management-with-jam-js&quot;&gt;Jam JS&lt;/a&gt;. Jam uses Require.js so what I thought would be a nice way to tie these two posts together would be to write on how to make your JS library AMD compliant and how to publish it with Jam, for use in other projects.&lt;/p&gt;
&lt;p&gt;The project I&#39;m using is actually written in CoffeeScript, but it&#39;s so similar to JavaScript in this instance that it shouldn&#39;t be an issue. I&#39;ve also included the same code in JavaScript, if CoffeeScript isn&#39;t your thing.&lt;/p&gt;
&lt;p&gt;I discussed how to define a module in the previous RequireJS tutorial linked above, so if you&#39;re not sure how to do things, please read that and then return here. The way to define something is simple - check if &lt;code&gt;window.define&lt;/code&gt; exists, and if it does, use it to define our module. To define a module we need to pass it a function that simply returns what we want a user of our library to access. Sometimes that&#39;s just one method, or it might be an object of multiple methods.&lt;/p&gt;
&lt;p&gt;In my case, using my little &lt;a href=&quot;https://github.com/jackfranklin/responsiveImages&quot;&gt;Responsive Images&lt;/a&gt; script, I just needed to expose the function &lt;code&gt;responsiveImage&lt;/code&gt;, which I had already attached onto the window object at this stage. In CoffeeScript, it&#39;s written like so:&lt;/p&gt;
&lt;p&gt;#expose globally
window.responsiveImage = responsiveImages&lt;/p&gt;
&lt;p&gt;# support AMD
if typeof window.define is &amp;quot;function&amp;quot; &amp;amp;&amp;amp; window.define.amd
window.define &amp;quot;responsiveImages&amp;quot;, [], -&amp;gt; window.responsiveImage&lt;/p&gt;
&lt;p&gt;If I were to write that in JavaScript, it would be:&lt;/p&gt;
&lt;p&gt;window.responsiveImage = responsiveImages;&lt;/p&gt;
&lt;p&gt;if (typeof window.define === &amp;quot;function&amp;quot; &amp;amp;&amp;amp; window.define.amd) {
window.define(&amp;quot;responsiveImages&amp;quot;, [], function() {
return window.responsiveImage;
});
}&lt;/p&gt;
&lt;p&gt;Note that I use &lt;code&gt;window.define&lt;/code&gt; rather than &lt;code&gt;define&lt;/code&gt; because all my code is wrapped within an anonymous function, so I don&#39;t have access to the global scope through &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The next thing to do is to create a &lt;code&gt;package.json&lt;/code&gt; file so Jam knows about our package and how to run it. For my project, it looks like this:&lt;/p&gt;
&lt;p&gt;{
&amp;quot;name&amp;quot;: &amp;quot;responsiveImages&amp;quot;,
&amp;quot;version&amp;quot;: &amp;quot;0.0.2&amp;quot;,
&amp;quot;description&amp;quot;: &amp;quot;A quick script to provide a way of changing which image to use based on window dimensions.&amp;quot;,
&amp;quot;main&amp;quot;: &amp;quot;responsiveimages.js&amp;quot;,
&amp;quot;repositories&amp;quot;: [
{
&amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,
&amp;quot;url&amp;quot;: &amp;quot;https://github.com/jackfranklin/responsiveImages.git&amp;quot;
}
],
&amp;quot;github&amp;quot;: &amp;quot;https://github.com/jackfranklin/responsiveImages&amp;quot;
}&lt;/p&gt;
&lt;p&gt;The only line there that isn&#39;t immediately obvious is the one declaring &lt;code&gt;main&lt;/code&gt;. By default Jam will look for a file &lt;code&gt;main.js&lt;/code&gt;, but if yours isn&#39;t called that you can tell it so in the JSON file. There&#39;s a lot more options you can set - &lt;a href=&quot;http://jamjs.org/docs#Package_json&quot;&gt;they are documented well on the Jam site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now it&#39;s time to publish. Head to the &lt;a href=&quot;http://jamjs.org/&quot;&gt;Jam site&lt;/a&gt; and sign up. Then head into your library&#39;s directory and run:&lt;/p&gt;
&lt;p&gt;jam publish&lt;/p&gt;
&lt;p&gt;If all goes well, you will see output similar to:&lt;/p&gt;
&lt;p&gt;-&amp;gt; jam publish
Please provide credentials for: http://jamjs.org/repository
Username: jackfranklin
Password:
creating /Users/JackFranklin/.jam/cache/responsiveImages/0.0.2/responsiveImages-0.0.2.tar.gz
extracting /Users/JackFranklin/.jam/cache/responsiveImages/0.0.2/responsiveImages-0.0.2.tar.gz
OK&lt;/p&gt;
&lt;p&gt;Now lets check this. Head into a project where you want to use the library (preferably this should be one which already uses Jam for package management) and run:&lt;/p&gt;
&lt;p&gt;jam install responsiveImages&lt;/p&gt;
&lt;p&gt;Changing the package name to yours. You&#39;ll see output that should include something like&lt;/p&gt;
&lt;p&gt;installing responsiveImages@0.0.1&lt;/p&gt;
&lt;p&gt;Once that&#39;s done, try it out. Head into your main JS file and change the &lt;code&gt;require&lt;/code&gt; call to include your new package. Remember that the package return is passed into the function as a variable, so add that in too:&lt;/p&gt;
&lt;p&gt;require([&#39;jquery&#39;, &#39;responsiveImages&#39;], function ($, RI) {});&lt;/p&gt;
&lt;p&gt;And now you should be able to use your library! As a test, I ran a simple &lt;code&gt;console.log(RI)&lt;/code&gt; and made sure it logged the function I return. If you want to upgrade your package, it&#39;s generally a 3 step process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make your changes and commit them.&lt;/li&gt;
&lt;li&gt;Boost the version number in your &lt;code&gt;package.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;jam publish&lt;/code&gt; again.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you&#39;re working on a lot of projects that use a lot of similar code, I highly recommend extracting them out into small AMD modules that can then be managed with a tool like Jam. I&#39;ve been doing it recently and it really has made things a lot nicer when it comes to JS library versioning, upgrading and so on.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A New JS Playground Update</title>
    <link href="http://www.jackfranklin.co.uk/blog/a-new-js-playground-update/"/>
    <updated>2012-11-25T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/a-new-js-playground-update/</id>
    <content type="html">&lt;p&gt;Today I spent a bit of time updating the site, and as such it seemed like a good time to write a small blog post with some updates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disqus&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I have now moved site comments over to Disqus. This does lose all previous comments (they are still in the DB, just not visible) which is a shame, but I was finding it hard to keep up with the old system. Disqus also offers a much nicer interface and tools to enable much better discussions to take place within the comments, so I think this will really help me keep up to date with comments and reply in a much more organised and clearer fashion.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Book&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I am still hard at work with my book! There are now just two chapters left, and the end is in sight. Once the book is done I hope to be able to return to my previous writing frequency on this site. You can also &lt;a href=&quot;http://www.amazon.co.uk/Beginning-jQuery-Jack-Franklin/dp/1430249323/ref=sr_1_1?ie=UTF8&amp;amp;qid=1353848521&amp;amp;sr=8-1&quot;&gt;preorder the book now!&lt;/a&gt; from Amazon. It&#39;s out on February 6th, 2013.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Open Source&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#39;ve been working ons ome open source libraries that some readers might find interesting: &lt;a href=&quot;https://github.com/jackfranklin/jQuery-Form-Validator&quot;&gt;jQuery Form Validator&lt;/a&gt;, &lt;a href=&quot;http://github.com/jackfranklin/nodefetch&quot;&gt;Nodefetch&lt;/a&gt; and &lt;a href=&quot;https://github.com/alphagov/magna-charta&quot;&gt;Magna Charta&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Content is coming&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tomorrow I&#39;m excited to post the second screencast I&#39;ve recorded. I&#39;ve been practicing screencasts and I&#39;m feeling more confident now, so hopefully in the future the split of screencast vs article will be a bit more even.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback Welcome&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As always, if you have any feedback, or requests, or would like to write for the site, please do just get in touch. I&#39;d be happy to chat.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript MV* Frameworks</title>
    <link href="http://www.jackfranklin.co.uk/blog/javascript-mv-frameworks/"/>
    <updated>2012-12-03T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/javascript-mv-frameworks/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&amp;quot;The massive growth in rich, JavaScript-heavy web applications has lead to a huge array of frameworks designed to help you build apps. There are so many that it can often be difficult to choose which best suits your needs, so in this article I&#39;ll discuss five of the most popular, and look at where each of their strengths lie. You shouldn&#39;t base your decision entirely on this article - I encourage you to play further with a framework before committing - but I hope this sets you off in the right direction.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another article I wrote for .net magazine went live last week: &lt;a href=&quot;http://www.netmagazine.com/features/essential-javascript-top-five-mvc-frameworks&quot;&gt;Five JavaScript MV* Frameworks&lt;/a&gt;. In it I take a look at Backbone, Ember, Angular, Batman and Knockout. It&#39;s a high level summary of each so if you&#39;ve been wondering which may suit your needs best, or what the differences are, I hope it may be of use.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The new keyword in JavaScript</title>
    <link href="http://www.jackfranklin.co.uk/blog/the-new-keyword-in-javascript/"/>
    <updated>2012-12-28T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/the-new-keyword-in-javascript/</id>
    <content type="html">&lt;p&gt;The &lt;code&gt;new&lt;/code&gt; keyword in JavaScript was an enigma to me for a long while, and only recently have I really begun to grasp it. In this article I&#39;m going to attempt to succintly summarise the &lt;code&gt;new&lt;/code&gt; keyword in JavaScript and the use cases.&lt;/p&gt;
&lt;p&gt;First, let me pose a question. What will be logged to the console in this example?&lt;/p&gt;
&lt;p&gt;function foo() {
this.x = 2;
return this;
}&lt;/p&gt;
&lt;p&gt;var y = foo();
var g = foo();
g.x = 3;
console.log(&amp;quot;y&amp;quot;, y.x);
console.log(&amp;quot;g&amp;quot;, g.x);
console.log(&amp;quot;this&amp;quot;, this.x);&lt;/p&gt;
&lt;p&gt;You might expect &lt;code&gt;y.x&lt;/code&gt; to be &lt;code&gt;2&lt;/code&gt;, as that&#39;s what it set to. However, you&#39;ll get the value &lt;code&gt;3&lt;/code&gt; for every single logged output.&lt;/p&gt;
&lt;p&gt;Within &lt;code&gt;foo()&lt;/code&gt;, we set &lt;code&gt;this.x&lt;/code&gt; to equal 2. &lt;code&gt;this&lt;/code&gt; refers to the context in which the function was called.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Thanks to some folks in the comments for correcting me on the value of &lt;code&gt;this&lt;/code&gt; within &lt;code&gt;foo()&lt;/code&gt;. My original explanation wasn&#39;t quite correct. Here&#39;s a better explanation that I&#39;ve pulled together from the contributions of Mike McNally and others.&lt;/p&gt;
&lt;p&gt;The value of &lt;code&gt;this&lt;/code&gt; has nothing at all to do with the calling scope. If there&#39;s no explicit receiver in the expression from which is derived the function object reference, and neither &lt;code&gt;call&lt;/code&gt; nor &lt;code&gt;apply&lt;/code&gt; are involved, then the value of &lt;code&gt;this&lt;/code&gt; in the called function will always be the global scope (or, in &amp;quot;strict&amp;quot; mode, undefined).&lt;/p&gt;
&lt;p&gt;Hence here when we invoke &lt;code&gt;foo()&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt; within &lt;code&gt;foo()&lt;/code&gt; is the global object. So we&#39;re setting &lt;code&gt;x&lt;/code&gt; on the global object - which would be &lt;code&gt;window&lt;/code&gt; within a browser.&lt;/p&gt;
&lt;p&gt;So although &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; point at separate invocations of &lt;code&gt;foo()&lt;/code&gt;, the returned object is the global object. So when &lt;code&gt;g.x&lt;/code&gt; gets set to three, this changes the global &lt;code&gt;x&lt;/code&gt;, which is what &lt;code&gt;y.x&lt;/code&gt; points at. &lt;a href=&quot;http://jsbin.com/welcome/67131/&quot;&gt;You can see this working on JSBin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, how would we keep &lt;code&gt;y.x&lt;/code&gt; and &lt;code&gt;g.x&lt;/code&gt; separate? This is where the &lt;code&gt;new&lt;/code&gt; keyword comes into play. If we change these lines:&lt;/p&gt;
&lt;p&gt;var y = foo();
var g = foo();&lt;/p&gt;
&lt;p&gt;To:&lt;/p&gt;
&lt;p&gt;var y = new foo();
var g = new foo();&lt;/p&gt;
&lt;p&gt;We will then get the right results. &lt;code&gt;y.x&lt;/code&gt; will be 2, &lt;code&gt;g.x&lt;/code&gt; will be 3, and &lt;code&gt;this.x&lt;/code&gt; is undefined. There&#39;s one more change we should make to stick with convention - change the function from &lt;code&gt;foo()&lt;/code&gt; to &lt;code&gt;Foo()&lt;/code&gt;. Any function that should be invoked with the &lt;code&gt;new&lt;/code&gt; keyword, should have a capital at the beginning. Here&#39;s the new example:
function Foo() {
this.x = 2;
}
var y = new Foo();
var g = new Foo();&lt;/p&gt;
&lt;p&gt;g.x = 3;
console.log(&amp;quot;y&amp;quot;, y.x);
console.log(&amp;quot;g&amp;quot;, g.x);
console.log(&amp;quot;this&amp;quot;, this.x);
You can &lt;a href=&quot;http://jsbin.com/ekiqif/2/&quot;&gt;see this working on JSBin&lt;/a&gt;. So lets explore how and why this works.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;new Foo()&lt;/code&gt; creates and instantiates a new instance of &lt;code&gt;Foo&lt;/code&gt;, and the scope that comes with it. &lt;code&gt;Foo()&lt;/code&gt; is known as a &lt;em&gt;constructor function&lt;/em&gt;. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/constructor&quot;&gt;This MDN article gives a very brief but useful overview of constructors.&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.2ality.com/2012/01/js-inheritance-by-example.html&quot;&gt;Dr. Axel Rauschmayer&#39;s post on inheritance&lt;/a&gt; explains the job of a constructor:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The constructor’s job is to set up the fresh object passed to it via the implicit parameter &lt;code&gt;this&lt;/code&gt;. The fresh object is (implicitly) returned by the constructor and considered its instance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hence, &lt;code&gt;var y = new Foo()&lt;/code&gt; creates and returns a new instance of the &lt;code&gt;Foo&lt;/code&gt; class. Notice that in the &lt;code&gt;Foo()&lt;/code&gt; method, we don&#39;t have to explicitly &lt;code&gt;return this&lt;/code&gt;. Because &lt;code&gt;Foo()&lt;/code&gt; is a constructor, &lt;code&gt;this&lt;/code&gt; (the new object) is returned implictly.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;new&lt;/code&gt; keyword is not as dangerous or confusing as it can first appear. Although it can be confusing, and certainly is a little odd on first look, once you can grasp the basics and understand the use cases, it has its place.&lt;/p&gt;
&lt;p&gt;If you&#39;d like to read further, &lt;a href=&quot;http://pivotallabs.com/users/pjaros/blog/articles/1368-javascript-constructors-prototypes-and-the-new-keyword&quot;&gt;this article on the Pivotal Labs blog&lt;/a&gt; goes into good detail and a bit more in depth on the inner workings of the &lt;code&gt;new&lt;/code&gt; keyword and prototypes. &lt;a href=&quot;http://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript&quot;&gt;This StackOverflow Question (and Answers)&lt;/a&gt; also explores the &lt;code&gt;new&lt;/code&gt; keyword in a lot of detail.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JS Command Line Tooling</title>
    <link href="http://www.jackfranklin.co.uk/blog/js-command-line-tooling/"/>
    <updated>2012-12-30T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/js-command-line-tooling/</id>
    <content type="html">&lt;p&gt;My &lt;a href=&quot;http://12devsofxmas.co.uk/post/2012-12-30-day-5-javascript-command-line-tooling&quot;&gt;JS Tooling post&lt;/a&gt; listed 5 of my favourite command line tools that I use every day when I&#39;m doing some JS development. If you&#39;ve any more to recommend, please do let me know!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2012 in Review</title>
    <link href="http://www.jackfranklin.co.uk/blog/2012-in-review/"/>
    <updated>2013-01-02T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/2012-in-review/</id>
    <content type="html">&lt;p&gt;Chris Coyier over at CSS Tricks does a yearly post documenting stats on the blog from the past 12 months, and it inspired me to do the same, as much as anything to have an easy way to compare year on year how the blog has done. Obviously this post wont quite be 12 months as the site has only existed for 9 months, having started in early April.&lt;/p&gt;
&lt;p&gt;So, I set the Analytics to show me from April 8th (Day One) through to December 31st, and here are the results.&lt;/p&gt;
&lt;h5&gt;Visitors&lt;/h5&gt;
&lt;p&gt;The site had 104,280 unique visitors, with 246,878 pageviews. Of the visits, 63% were new visitors, with 37% returning visitors.&lt;/p&gt;
&lt;h5&gt;Browsers&lt;/h5&gt;
&lt;p&gt;I was delighted to see that the most popular browser was Google Chrome, accounting for over 60% of the visits. Mozilla Firefox was second, with 19% of visits, then Apple Safari with 9% was third. Internet Explorer (that&#39;s all IEs combined) is just 2.17%, which accounts for roughly 3,500 visits.&lt;/p&gt;
&lt;p&gt;If you break IE down, 52.55% of IE hits were from IE9, with 33% of hits coming from IE8. IE10 was responsible for 6.6% of IE hits, and IE7 responsible for 5.5%, about 200 hits. IE6 had just 1.12%, which works out as just 40 visits. I guess with this blog being very much developer focused, there was always going to be a bias towards &amp;quot;modern&amp;quot; browsers. When I redesign the site next - whenever that might be - I will continue to support IE8+ but not look below that.&lt;/p&gt;
&lt;h5&gt;Operating Systems&lt;/h5&gt;
&lt;p&gt;No surprise that Windows is the top OS used, with 42% of visits. However, I was surprised to see that Mac was 34% and Linux 12%, meaning between them the Unix OS&#39;s outnumber Windows. Again, this is perhaps down to the audience of the blog. iOS had 3.74% of views, Android 2.73%.&lt;/p&gt;
&lt;p&gt;Of the Windows hits, 79% were from Windows 7, with 14% from XP and 3% from Vista. Just 0.52% came from Windows 8. On the Mac front, 58% were from 10.7 (Lion), 21% from 10.8 (Mountain Lion) and 18.6% from 10.6 (Snow Leopard).&lt;/p&gt;
&lt;h5&gt;Blog Stats&lt;/h5&gt;
&lt;p&gt;Lets leave the Analytics behind and move on to post statistics. I wrote a total of 44 blog posts in the 9 months of the site being in existance, which is just under 5 per month. It wasn&#39;t steady though, a lot of those posts were in the first 3 months, before I was approached to write a book. With the book taking up a lot of time, at times it was months between posts going live, which is a shame. With the book now out of the way, I&#39;m hoping in 2013 to average at least 4 posts per month, and hopefully do a few more as well. 4 per month is my baseline though.&lt;/p&gt;
&lt;p&gt;In terms of commenting, I recently swapped from the in-built commenting system to Disqus. This did lose a lot of comments, but Disqus is a much nicer system and allows discussions to form easier.&lt;/p&gt;
&lt;h5&gt;Thanks and Goals&lt;/h5&gt;
&lt;p&gt;A few thanks are required here before I end. Firstly to &lt;a href=&quot;http://tobyhowarth.co.uk/&quot;&gt;Toby Howarth&lt;/a&gt;, who provided me with the design you see right now when I was starting out. He&#39;s now available for hire, so if you&#39;re looking for a designer I&#39;d recommend giving him a shout. I also want to thank the number of people who have posted links to blog posts on Twitter, Hacker News and so on, in particular &lt;a href=&quot;http://twitter.com/elijahmanor&quot;&gt;Elijah Manor&lt;/a&gt;, who has tweeted most of my articles.&lt;/p&gt;
&lt;p&gt;In terms of goals for next year, I&#39;ve got a few:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Average 4 posts per month minimum.&lt;/li&gt;
&lt;li&gt;Get better at posting code from blog posts - set up a JSPlayground account on Github for it all to go in.&lt;/li&gt;
&lt;li&gt;Make sure I reply to any questions in the comments as they come in.&lt;/li&gt;
&lt;li&gt;Look into a &amp;quot;pro&amp;quot; area, or some form of members area, to try and bring in a small amount of money in from the site (it&#39;s unlikely this will happen this year though to be honest).&lt;/li&gt;
&lt;li&gt;Continue to grow the blog, and aim to hit 500,000 page views in the year 2013 alone (essentially double what I managed in the past 9 months).&lt;/li&gt;
&lt;li&gt;Release more screencasts. I like doing them a lot, but I&#39;ve only found the time to do two so far. Out of the 4 posts per month, I hope one of them can be a screencast.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bring on 2013!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Node.js workshops, March, London</title>
    <link href="http://www.jackfranklin.co.uk/blog/node-js-workshops-march-london/"/>
    <updated>2013-01-04T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/node-js-workshops-march-london/</id>
    <content type="html">&lt;p&gt;I&#39;ve teamed up with the lovely folks at Event Handler, who run an array of events in London, to run two JavaScript workshops in March 2013 which I&#39;m really excited about.&lt;/p&gt;
&lt;p&gt;The first is on March 6th and is titled &lt;a href=&quot;http://www.eventhandler.co.uk/events/ldnjsnightclass-toolingcli&quot;&gt;Modern Tooling on the Command Line&lt;/a&gt;. This workshop will run you through some of the powerful command line tools available to us that can really help speed up JavaScript development. We&#39;ll start with a brief introduction to the command line and then move on to trying out some of the tools, such as Yeoman, Grunt, Bower and so on.&lt;/p&gt;
&lt;p&gt;The second is on March 27th and is titled &lt;a href=&quot;http://www.eventhandler.co.uk/events/ldnjsnightclass-buildingcli&quot;&gt;Building Command Line tools with Node&lt;/a&gt;. In this workshop I want to demonstrate how you can use small tools like Node.js to piece together your own command line tools. Often I will write my own little tools to speed things up, and I think it&#39;s something more people should do. We&#39;ll build a few small tools, along with some bigger ones, and then also look at how we might publish our libraries to the Node Package Manager (npm).&lt;/p&gt;
&lt;p&gt;To come along you&#39;ll need a Mac of some sort or a machine running Linux. I simply don&#39;t have the knowledge of Windos to be able to guarantee I can help with how to install things on Windows, unfortunately. Tickets cost £40 and are available at the above links. Both events are based at the Google Campus in London.&lt;/p&gt;
&lt;p&gt;If you&#39;re interested but would like to clarify something or ask me questions, please leave a comment and I&#39;ll get back to you.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Talking RequireJS at TakeOff Conf</title>
    <link href="http://www.jackfranklin.co.uk/blog/talking-requirejs-at-takeoff-conf/"/>
    <updated>2013-01-19T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/talking-requirejs-at-takeoff-conf/</id>
    <content type="html">&lt;p&gt;So this week I attended my first conference outside of the UK and travelled to a freezing Lille, in Northern France (it&#39;s been below freezing every day!) and spoke on &lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt;, something I have &lt;a href=&quot;http://javascriptplayground.com/blog/category/requirejs&quot;&gt;written about before&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the future I will be doing a screencast on RequireJS in detail but for now I wanted to post up the slides and talk about the talk a little. &lt;a href=&quot;https://speakerdeck.com/jackfranklin/requirejs-take-off-conf&quot;&gt;You can view my slides on SpeakerDeck&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The main thing I said in my talk with RequireJS that I wanted to reiterate is that when you first start it, you&#39;ll probably get frustrated. I know I did. The tipping point for me was when I figured out how to shim. When you first use Require it&#39;s tempting to just ditch it when you encounter a non-AMD compliant library (such as Underscore), but shimming it is so simple:&lt;/p&gt;
&lt;p&gt;require.config({
shim: {
&#39;lib/underscore&#39;: {
&#39;exports&#39;: &#39;_&#39;
}
}
});&lt;/p&gt;
&lt;p&gt;Something &lt;a href=&quot;http://twitter.com/mheap&quot;&gt;@mheap&lt;/a&gt; pointed out to me that once you have an optimised JS file, you can swap out the RequireJS source for &lt;a href=&quot;https://github.com/jrburke/almond&quot;&gt;Almond&lt;/a&gt;, a much more minimal AMD API that you can include into your build file - check the Github link for instructions on how to use.&lt;/p&gt;
&lt;p&gt;I&#39;m a huge fan of RequireJS and it&#39;s now very rare that I start a new JS project without utilising it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>ECMAScript 5 Array Methods</title>
    <link href="http://www.jackfranklin.co.uk/blog/ecmascript-5-array-methods/"/>
    <updated>2013-01-27T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/ecmascript-5-array-methods/</id>
    <content type="html">&lt;p&gt;Something I&#39;ve not covered much so far is some of the newer parts of JavaScript. That is, methods in ECMASscript 5 that are not so commonly used due to browser support, and of course the new features in ECMAScript 6. Today I want to take a look at the new Array methods in ES5, such as &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&#39;d like to know the browser support for these methods, it&#39;s actually pretty good. &lt;a href=&quot;http://kangax.github.com/es5-compat-table/&quot;&gt;This site shows the support&lt;/a&gt;, and for most the only blip is IE 8 and lower. And if you do need to support older browsers, &lt;a href=&quot;https://github.com/kriskowal/es5-shim&quot;&gt;shims are available&lt;/a&gt;. Let&#39;s have a look at the Array methods introduced in ES5. This wont be an in-depth look exploring the ins and outs of every method, but more a quick summary over them.&lt;/p&gt;
&lt;p&gt;The first is &lt;code&gt;indexOf&lt;/code&gt;. As you might suspect, it searches the array to find the index of the passed in element:&lt;/p&gt;
&lt;p&gt;var arr = [1, 2, 3 ,4];
console.log(arr.indexOf(2)); // 1
console.log(arr.indexOf(5)); // -1&lt;/p&gt;
&lt;p&gt;If the element doesn&#39;t exist, &lt;code&gt;-1&lt;/code&gt; is returned. Be aware that &lt;code&gt;indexOf&lt;/code&gt; finds the &lt;strong&gt;first&lt;/strong&gt; index, if the element is in the array more than once:&lt;/p&gt;
&lt;p&gt;var arr = [1, 2, 3 ,4, 2];
console.log(arr.indexOf(2)); // 1&lt;/p&gt;
&lt;p&gt;There is also &lt;code&gt;lastIndexOf&lt;/code&gt; that finds the last index:&lt;/p&gt;
&lt;p&gt;var arr = [1, 2, 3 ,4, 2];
console.log(arr.lastIndexOf(2)); // 4&lt;/p&gt;
&lt;p&gt;Next is &lt;code&gt;every&lt;/code&gt;. The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/every&quot;&gt;mdn documentation&lt;/a&gt; sums it up best:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;&lt;code&gt;every&lt;/code&gt; executes the provided callback function once for each element present in the array until it finds one where callback returns a false value. If such an element is found, the &lt;code&gt;every&lt;/code&gt; method immediately returns &lt;code&gt;false&lt;/code&gt;. Otherwise, if callback returned a &lt;code&gt;true&lt;/code&gt; value for all elements, &lt;code&gt;every&lt;/code&gt; will return &lt;code&gt;true&lt;/code&gt;.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lets take a look at an example:&lt;/p&gt;
&lt;p&gt;var arr = [1, 2, 3, 4];
console.log(arr.every(function(x) {
console.log(x);
}));&lt;/p&gt;
&lt;p&gt;// 1
// false&lt;/p&gt;
&lt;p&gt;Here the callback function logs one, but then doesn&#39;t return a truthy value, so &lt;code&gt;every&lt;/code&gt; exists and returns false. It will loop over every element if our callback function returns true:&lt;/p&gt;
&lt;p&gt;var arr = [1, 2, 3, 4];
console.log(arr.every(function(x) {
console.log(x);
return true;
}));&lt;/p&gt;
&lt;p&gt;// 1
// 2
// 3
// 4
// true&lt;/p&gt;
&lt;p&gt;Next we have &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/some&quot;&gt;&lt;code&gt;some&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;some&lt;/code&gt; executes a callback function once for every element present in the array until it finds a value for which the callback returns true, at which point &lt;code&gt;some&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. If no value is found, &lt;code&gt;some&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. Here I use &lt;code&gt;some&lt;/code&gt; to test if any elements in the array are even:&lt;/p&gt;
&lt;p&gt;var arr = [1, 2, 3 ,4];
console.log(arr.some(function(x) {
return x % 2 == 0
}));&lt;/p&gt;
&lt;p&gt;// true&lt;/p&gt;
&lt;p&gt;It returns &lt;code&gt;true&lt;/code&gt; because at least one element made the callback function return &lt;code&gt;true&lt;/code&gt;. If none of them do, it returns &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;var arr = [1, 3, 5, 7];
console.log(arr.some(function(x) {
return x % 2 == 0
}));&lt;/p&gt;
&lt;p&gt;Next is &lt;code&gt;forEach&lt;/code&gt;, which is very straight forward. It takes a function and calls that function for each element in the array:&lt;/p&gt;
&lt;p&gt;var arr = [1, 2, 3, 4];
arr.forEach(function(x) {
console.log(x);
});
// 1
// 2
// 3
// 4&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; is similar to &lt;code&gt;forEach&lt;/code&gt; in that in loops over all elements in the set and calls the callback function on them, however &lt;code&gt;map&lt;/code&gt; will return an array which is the result of the callback function for each element. For example:&lt;/p&gt;
&lt;p&gt;var arr = [1, 2, 3, 4];
var newArr = arr.map(function(x) {
return x * x;
});
console.log(newArr);
// [1, 4, 9, 16]&lt;/p&gt;
&lt;p&gt;Here I use &lt;code&gt;map&lt;/code&gt; to square each number in the array, and it then returns that new array.&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;filter&lt;/code&gt; to trim down our arrays to elements that only match specific criteria. &lt;code&gt;filter&lt;/code&gt; executes the callback function on each element, and will only add that element to the new array if the callback function returns &lt;code&gt;true&lt;/code&gt;. Below I filter out any numbers that are not even:&lt;/p&gt;
&lt;p&gt;var arr = [1, 2, 3, 4];
var newArr = arr.filter(function(x) {
return x % 2 == 0;
});
console.log(newArr);
// [2, 4]&lt;/p&gt;
&lt;p&gt;The callback function only returns true for the even numbers, so the array &lt;code&gt;filter&lt;/code&gt; returns contains just those.&lt;/p&gt;
&lt;p&gt;Next is the slightly more complex &lt;code&gt;reduce&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Taken from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt;the MDN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The callback function for &lt;code&gt;reduce&lt;/code&gt; is usually used with two arguments. The first is the previous value in the array, and the second is the next value. I find I understand this best with an example, so here is how we would use &lt;code&gt;reduce&lt;/code&gt; to sum all the elements in an array:&lt;/p&gt;
&lt;p&gt;var arr = [1, 2, 3, 4];
console.log(arr.reduce(function(x, y) {
return x + y;
}));
// 10&lt;/p&gt;
&lt;p&gt;And the arguments are passed through like so:&lt;/p&gt;
&lt;p&gt;(0, 1), (1, 2), (3, 3), (6, 4)&lt;/p&gt;
&lt;p&gt;To give us an answer of ten. The MDN article on &lt;code&gt;reduce&lt;/code&gt; is very thorough, so I highly recommend giving that a read if you&#39;re slightly confused.&lt;/p&gt;
&lt;p&gt;Finally there is &lt;code&gt;reduceRight&lt;/code&gt;, which is the same as &lt;code&gt;reduce&lt;/code&gt; but starts on the right hand side, not the left.&lt;/p&gt;
&lt;p&gt;var arr = [1, 2, 3, 4];
console.log(arr.reduceRight(function(x, y) {
return x + y;
}));
// 10&lt;/p&gt;
&lt;p&gt;Here the arguments are processed from right to left:&lt;/p&gt;
&lt;p&gt;(0, 4), (4, 3), (7, 2), (9, 1)&lt;/p&gt;
&lt;p&gt;I hope this article has helped, if like me you&#39;d not taken the time to explore some of these newer features, or perhaps had mistakenly dismissed them because you didn&#39;t realise how comprehensive the browser support is (other than our old friend IE8, of course).&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Exploring Backbone.js - Part 3</title>
    <link href="http://www.jackfranklin.co.uk/blog/exploring-backbone-js-part-3/"/>
    <updated>2013-02-03T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/exploring-backbone-js-part-3/</id>
    <content type="html">&lt;p&gt;Way back in June last year I published &lt;a href=&quot;http://javascriptplayground.com/blog/2012/06/exploring-backbone-js-part-2&quot;&gt;part two of my Backbone series&lt;/a&gt; and today, at long last, it&#39;s time to pick up the pieces. I apologise for such a lull between articles and hopefully it wont be quite so long between this and the next episode! I recommend you go back and skim &lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/backbone-js-tutorial-1&quot;&gt;Part 1&lt;/a&gt; and &lt;a href=&quot;http://javascriptplayground.com/blog/2012/06/exploring-backbone-js-part-2&quot;&gt;Part 2&lt;/a&gt; first just to get up to speed.&lt;/p&gt;
&lt;p&gt;Last time I left off we had just written the code to add a new item to our collection. What I&#39;d like to do today is look at how we might filter down items in a collection. This will set us up nicely for the next article, which will look at Backbone&#39;s Router in more detail.&lt;/p&gt;
&lt;p&gt;Firstly, lets set up the HTML needed to allow a user to filter down by price.&lt;/p&gt;
&lt;p&gt;&lt;form id=&quot;filter&quot;&gt;
&lt;label&gt;Less Than&lt;/label&gt;
&lt;input type=&quot;text&quot; id=&quot;less-than&quot;&gt;
&lt;input type=&quot;submit&quot; value=&quot;Filter&quot;&gt;
&lt;/form&gt;
&lt;a href=&quot;#&quot; id=&quot;clear-filter&quot;&gt;Clear Filter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For now we will keep it simple and just let the user search for items less than a particular price.&lt;/p&gt;
&lt;p&gt;Next we need to set up some events on our &lt;code&gt;CartCollectionView&lt;/code&gt;. If you remember, this view encompasses the entire of our application (its &lt;code&gt;el&lt;/code&gt; property is set to &lt;code&gt;&amp;quot;body&amp;quot;&lt;/code&gt;), so this is where a lot of our events are set up. If you&#39;re thinking perhaps this isn&#39;t the best way, you&#39;re right. In a future episode when we add a couple more views, we will tidy this up. Add two more events to the &lt;code&gt;events&lt;/code&gt; property:&lt;/p&gt;
&lt;p&gt;events: {
&amp;quot;submit #add&amp;quot;: &amp;quot;addItem&amp;quot;,
&amp;quot;submit #filter&amp;quot;: &amp;quot;filterItems&amp;quot;,
&amp;quot;click #clear-filter&amp;quot;: &amp;quot;clearFilter&amp;quot;
}&lt;/p&gt;
&lt;p&gt;The methods we need to add to the cart collection view are very straight forward. All they will do is cancel the default action and then call methods on &lt;code&gt;itemView&lt;/code&gt;, which is the view that all our items sit within.&lt;/p&gt;
&lt;p&gt;filterItems: function(e) {
e.preventDefault();
this.itemView.filterByPrice();
},
clearFilter: function(e) {
e.preventDefault();
this.itemView.clearFilter();
}&lt;/p&gt;
&lt;p&gt;To filter the items down to those lower than a specific price, here&#39;s what we need to do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Loop through every element in the collection and see if it matches the filter.&lt;/li&gt;
&lt;li&gt;Re-render the item collection view with just those items in.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&#39;s the entire code. Give it a read, and I&#39;ll explain it in depth below.&lt;/p&gt;
&lt;p&gt;filterByPrice: function() {
// first reset the collection
// but do it silently so the event doesn&#39;t trigger
this.collection.reset(items, { silent: true });
var max = parseFloat($(&amp;quot;#less-than&amp;quot;).val(), 10);
var filtered = _.filter(this.collection.models, function(item) {
return item.get(&amp;quot;price&amp;quot;) &amp;lt; max;
});
// trigger reset again
// but this time trigger the event so the collection view is rerendered
this.collection.reset(filtered);
},&lt;/p&gt;
&lt;p&gt;The first thing we do is &lt;code&gt;this.collection.reset(items, { silent: true })&lt;/code&gt;. This will reset the collection, which is a way of completely changing the items in a collection. Here I reset it to the original array of items, which was stored in &lt;code&gt;items&lt;/code&gt;. By passing in &lt;code&gt;{ silent: true }&lt;/code&gt;, it means it wont trigger the &lt;code&gt;reset&lt;/code&gt; event on the collection. We&#39;ll use this event later, and then you&#39;ll see why it&#39;s important not to trigger it there.&lt;/p&gt;
&lt;p&gt;After that we grab the value from the input. I&#39;m not doing any validation here which is obviously not sensible - but for the purposes of demonstrating Backbone it will do just fine. Then we can use Underscore&#39;s &lt;code&gt;filter&lt;/code&gt; method. This takes an array of items, in this case all the models in the collection, and loops over them. Any that return &lt;code&gt;true&lt;/code&gt; from the callback are returned. Therefore after running &lt;code&gt;filter&lt;/code&gt;, only elements with a price less than the maximum will be returned. Then we can reset the collection again, but this time to just the filtered items.&lt;/p&gt;
&lt;p&gt;Head up to the &lt;code&gt;initialize&lt;/code&gt; method of the &lt;code&gt;ItemCollectionView&lt;/code&gt; and at the bottom add a binding to the &lt;code&gt;reset&lt;/code&gt; method that&#39;s called on the collection.&lt;/p&gt;
&lt;p&gt;initialize: function() {
this.collection = cartCollection;
this.render();
this.collection.on(&amp;quot;reset&amp;quot;, this.render, this);
},&lt;/p&gt;
&lt;p&gt;This means when a &amp;quot;reset&amp;quot; event is triggered on this view&#39;s collection, it will call the &lt;code&gt;render&lt;/code&gt; method, with the context bound to &lt;code&gt;this&lt;/code&gt;, which is the &lt;code&gt;ItemCollectionView&lt;/code&gt;. Therefore when we detect the collection has been reset, we can re-render the view. This is why when we reset the collection to contain all elements, we passed in &lt;code&gt;{ silent: true }&lt;/code&gt;. Else, we would re-render the item view to all elements just before we filtered it again, which wouldn&#39;t be very efficient.&lt;/p&gt;
&lt;p&gt;Finally, we need to add the code for clearing the filter. The &lt;code&gt;clearFilter&lt;/code&gt; method on the &lt;code&gt;ItemCollectionView&lt;/code&gt; is very straight forward:&lt;/p&gt;
&lt;p&gt;clearFilter: function() {
$(&amp;quot;#less-than&amp;quot;).val(&amp;quot;&amp;quot;);
this.collection.reset(items);
}&lt;/p&gt;
&lt;p&gt;All it does is clear the input, and reset the collection back to all items.&lt;/p&gt;
&lt;p&gt;With that, filtering and clearing the filter should work! There is a pretty big bug though. If you add a new item, and then do some filtering, that new item will not appear. This is because we reset the controller to contain &lt;code&gt;items&lt;/code&gt;, which is our original set of items, and doesn&#39;t include any new items the user added. What we need to do is keep track of when we add a new item, and update our &lt;code&gt;items&lt;/code&gt; array to contain those new items. When a collection&#39;s &lt;code&gt;add&lt;/code&gt; method is called, it triggers an &lt;code&gt;add&lt;/code&gt; event. Lets use this to solve our bug. Head to where we set up &lt;code&gt;var Cart&lt;/code&gt; as our collection of items, and edit it so it looks like so:&lt;/p&gt;
&lt;p&gt;var Cart = Backbone.Collection.extend({
model: Item,
initialize: function() {
this.on(&amp;quot;add&amp;quot;, this.updateSet, this);
},
updateSet: function() {
items = this.models;
}
});&lt;/p&gt;
&lt;p&gt;It&#39;s just a case of updating the original set of items when a new one is added. Now new items that are added can be filtered, and are not lost when we filter and then clear the filter.&lt;/p&gt;
&lt;p&gt;The code for this tutorial and the entire series is available &lt;a href=&quot;https://github.com/javascript-playground/backbone-beginners/tree/tutorial3&quot;&gt;on Github&lt;/a&gt;. Please note that this repository is no longer on my personal account but on the &lt;a href=&quot;https://github.com/javascript-playground&quot;&gt;JavaScript Playground&lt;/a&gt; organisation, which is where all future code will live.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The .net Awards</title>
    <link href="http://www.jackfranklin.co.uk/blog/the-net-awards/"/>
    <updated>2013-03-29T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/the-net-awards/</id>
    <content type="html">&lt;p&gt;Recently I found out that I had been nominated for two of &lt;a href=&quot;http://www.thenetawards.com/&quot;&gt;.net awards&lt;/a&gt;. I&#39;ve been nominated for &amp;quot;Young Developer of the Year&amp;quot; and &amp;quot;Brilliant Newcomer of the Year&amp;quot;.&lt;/p&gt;
&lt;p&gt;Firstly, you have to be nominated by people to be involved in the first place, so thanks to anyone who put my name forward. It means a lot that people would take the time to do that.&lt;/p&gt;
&lt;p&gt;However, that&#39;s only half the battle! I&#39;m up against some incredibly clever people and need all the votes I can get! If you can find a spare moment to navigate &lt;a href=&quot;http://thenetawards.com/&quot;&gt;to the awards site&lt;/a&gt;, locate my face and click &amp;quot;vote&amp;quot;, that would be awesome.&lt;/p&gt;
&lt;p&gt;Finally, I know content has been slow recently, but that&#39;s not for much longer. Next weekend, on April 6th, the JS Playground turns 1 year old and I&#39;ve plenty planned to celebrate. There will be lots of new content hitting your screens very soon.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;/p&gt;
&lt;p&gt;Jack.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Custom jQuery Builds with Grunt</title>
    <link href="http://www.jackfranklin.co.uk/blog/custom-jquery-builds-with-grunt/"/>
    <updated>2013-04-02T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/custom-jquery-builds-with-grunt/</id>
    <content type="html">&lt;p&gt;A lot has been made of how, in the future versions of jQuery, it will be possible to easily build your own version of jQuery, without the parts you know you&#39;re not going to use.&lt;/p&gt;
&lt;p&gt;What a lot of people don&#39;t realise is that you can do this today, if you&#39;re prepared to install Grunt and grab the raw jQuery repository from Github. This quick tip will show you how.&lt;/p&gt;
&lt;p&gt;First you&#39;re going to need Node and npm installed. Then get Grunt installed too. Note that since Grunt 0.4.0 the way of doing this has changed slightly. In the future I&#39;ll be covering Grunt in more detail but for now, follow the below instructions to get it going:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you&#39;ve ever previously installed Grunt 0.3.0, get rid of it: &lt;code&gt;npm uninstall -g grunt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now install the Grunt-CLI tool globally: &lt;code&gt;npm install -g grunt-cli&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means each project on your machine can use a different version of Grunt, if it so desires. The Grunt CLI tool will use the first local version of Grunt it can find, so you can have specific version numbers on a project by project basis.&lt;/p&gt;
&lt;p&gt;Next, lets clone the jQuery repository:&lt;/p&gt;
&lt;p&gt;git clone git@github.com:jquery/jquery.git&lt;/p&gt;
&lt;p&gt;Now navigate into that directory and install all dependencies:&lt;/p&gt;
&lt;p&gt;cd jquery
npm install&lt;/p&gt;
&lt;p&gt;The first time you clone the repository, you need to run Grunt once. This includes a number of tasks that update sub modules before running the tests and building jQuery:&lt;/p&gt;
&lt;p&gt;grunt&lt;/p&gt;
&lt;p&gt;That will give you the full jQuery source minified into the &lt;code&gt;dist/&lt;/code&gt; folder. But say you wanted to build jQuery without any of the Ajax built in, as your current project is not going to need it. Try:&lt;/p&gt;
&lt;p&gt;grunt custom:-ajax&lt;/p&gt;
&lt;p&gt;You should get an output similar to this:&lt;/p&gt;
&lt;p&gt;Running &amp;quot;custom:-ajax&amp;quot; (custom) task
Creating custom build...&lt;/p&gt;
&lt;p&gt;Running &amp;quot;build:all:*:-ajax&amp;quot; (build) task
Excluding ajax             (src/ajax.js)
Excluding ajax/script      (src/ajax/script.js)
Excluding ajax/jsonp       (src/ajax/jsonp.js)
Excluding ajax/xhr         (src/ajax/xhr.js)
File &#39;dist/jquery.js&#39; created.&lt;/p&gt;
&lt;p&gt;Running &amp;quot;uglify:all&amp;quot; (uglify) task
Source Map &amp;quot;dist/jquery.min.map&amp;quot; created.
File &amp;quot;dist/jquery.min.js&amp;quot; created.
Uncompressed size: 209152 bytes.
Compressed size: 16767 bytes gzipped (73066 bytes minified).&lt;/p&gt;
&lt;p&gt;Running &amp;quot;dist&amp;quot; task&lt;/p&gt;
&lt;p&gt;Done, without errors.&lt;/p&gt;
&lt;p&gt;And there you go! It&#39;s not only the Ajax module you can remove, &lt;a href=&quot;https://github.com/jquery/jquery#modules&quot;&gt;The jQuery Repository documents all of them&lt;/a&gt;. If you&#39;re going to be working on a project where file size is important, and you know there&#39;s parts of jQuery you wont use, it&#39;s certainly worth doing a custom build this way to save a few bytes.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>jQuery CSS Hooks</title>
    <link href="http://www.jackfranklin.co.uk/blog/jquery-css-hooks/"/>
    <updated>2013-04-08T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/jquery-css-hooks/</id>
    <content type="html">&lt;p&gt;Did you know that jQuery gives you a way to write your own custom CSS methods? I didn&#39;t until recently and I&#39;d like to show you why they are useful in this short tutorial.&lt;/p&gt;
&lt;p&gt;How many times have you wanted to do this:&lt;/p&gt;
&lt;p&gt;$(&amp;quot;div&amp;quot;).css(&amp;quot;margin&amp;quot;, &amp;quot;1px 2px 3px 4px&amp;quot;);&lt;/p&gt;
&lt;p&gt;But have to set each individual direction value separately? I know I have. Using CSS Hooks, we can easily add the above functionality to jQuery.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A word of warning: CSS Hooks were added in jQuery 1.4.3, so if you&#39;re stuck on an older version (you really shouldn&#39;t be by now) then this wont work.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lets set up the wrapper for our new margin CSS hook. What we&#39;ll need to do is split the user&#39;s input into 4 values, one for each direction. First, I can set up an array containing the four directions. You&#39;ll see why this is important shortly:&lt;/p&gt;
&lt;p&gt;var directions = [&amp;quot;Top&amp;quot;, &amp;quot;Right&amp;quot;, &amp;quot;Bottom&amp;quot;, &amp;quot;Left&amp;quot;];&lt;/p&gt;
&lt;p&gt;Next, lets define our new &amp;quot;margin&amp;quot; hook. The hooks are stored as objects with two methods, &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;$.cssHooks.margin = {
get: function(elem) {
},
set: function(elem, value) {
}
};&lt;/p&gt;
&lt;p&gt;Note that the &lt;code&gt;get&lt;/code&gt; method does take more arguments, including the computed value of the specific CSS property it&#39;s being asked for. &lt;a href=&quot;http://api.jquery.com/jQuery.cssHooks/&quot;&gt;The jQuery documentation discusses this in more detail&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&#39;s write the &lt;code&gt;set&lt;/code&gt; method first. This take two arguments, the element to set the CSS properties on, and the value the user passed. In our case this will be a string of values, eg &amp;quot;1px 2px 3px 4px&amp;quot;.&lt;/p&gt;
&lt;p&gt;set: function(elem, value) {
$.each(value.split(&amp;quot; &amp;quot;), function(i, val) {
elem.style[&amp;quot;margin + directions[i]&amp;quot;] = val;
});
}&lt;/p&gt;
&lt;p&gt;Here we split the values at a space, and loop over them. We use the directions array so for each value the relevant direction property is set. So here we loop over, first setting &lt;code&gt;marginTop&lt;/code&gt;, then &lt;code&gt;marginRight&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;get&lt;/code&gt; method will essentially do the reverse, getting each of the individual values and then joining them together into a string:&lt;/p&gt;
&lt;p&gt;get: function(elem, value) {
var res = [];
$.each(directions, function(i, dir) {
res.push($.css(elem, &amp;quot;margin&amp;quot; + dir));
});
return res.join(&amp;quot; &amp;quot;);
}&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;$.css&lt;/code&gt; to pull out a CSS setting. All this method does is grab the four individual values and add them to an array, which I then join at the end to return a string.&lt;/p&gt;
&lt;p&gt;Now there&#39;s obviously some problems. In CSS we can do &lt;code&gt;margin: 5px 10px&lt;/code&gt; to set top/bottom to 5px and left/right to 10px. Currently our implementation doesn&#39;t do this. Thankfully someone else has already done this. Brandon Aaron&#39;s &lt;a href=&quot;https://github.com/brandonaaron/jquery-cssHooks&quot;&gt;CSS Hooks project&lt;/a&gt; has a number of hooks, including a more feature-complete margin implementation.&lt;/p&gt;
&lt;p&gt;As I said in the opening, this was a jQuery feature I&#39;d managed to completely miss, and I bet I&#39;m not the only one, hence writing this post. &lt;a href=&quot;http://jsbin.com/enixej/2/edit&quot;&gt;My margin implementation is up on JSBin&lt;/a&gt; if you&#39;d like to have a play with it, and if you write any interesting CSS Hooks yourself, do let me know in the comments. I can think of a number of scenarios in which they could be very useful.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Moving to Jekyll</title>
    <link href="http://www.jackfranklin.co.uk/blog/jekyll/"/>
    <updated>2013-06-02T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/jekyll/</id>
    <content type="html">&lt;p&gt;Yesterday I finally sat down and properly ported the site over to Jekyll, the static site generator. Before I used &lt;a href=&quot;http://pyrocms.com/&quot;&gt;PyroCMS&lt;/a&gt;. I&#39;ve nothing against Pyro, it&#39;s great, but it was a bit over kill in this instance.&lt;/p&gt;
&lt;p&gt;You&#39;ll also notice there wasn&#39;t a single blog post in May, which is frustrating from my point of view. I will soon be able to commit more time to the JS Playground and have already started work on some up-coming tutorials:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Express and Backbone Series: Parts 4 and 5&lt;/li&gt;
&lt;li&gt;JavaScript Refactoring&lt;/li&gt;
&lt;li&gt;Modular Backbone Development&lt;/li&gt;
&lt;li&gt;Review of &lt;a href=&quot;http://discovermeteor.com/&quot;&gt;Discover Meteor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Handlebars Templating&lt;/li&gt;
&lt;li&gt;A look at the new Yeoman&lt;/li&gt;
&lt;li&gt;Developing for Firefox OS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, now that the site is &lt;a href=&quot;https://github.com/jackfranklin/javascriptplayground.com/tree/gh-pages&quot;&gt;hosted on Github&lt;/a&gt;, it means anyone can contribute through a pull request. If you have something you&#39;d like to write, please feel free to. All posts from guests are clearly credited to them.&lt;/p&gt;
&lt;p&gt;In moving the site over to Jekyll I took care to make sure that no URLs broke - Jekyll&#39;s slugs have been configured to exactly match those of the old site so no posts or Disqus comments should have been lost. I&#39;m also working on tweaking the design and there&#39;s still some rough patches there. Those of you who subscribe to RSS may need to update your subscription. &lt;a href=&quot;http://feeds.feedburner.com/TheJavascriptPlayground&quot;&gt;The new RSS feed is here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&#39;m excited to have JS Playground on Jekyll, and hopefully it will reduce the friction of writing, allow you all to contribute should you wish and mark the beginning of me being able to post much more frequently.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Refactoring DOM Heavy JS</title>
    <link href="http://www.jackfranklin.co.uk/blog/refactoring-js/"/>
    <updated>2013-06-03T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/refactoring-js/</id>
    <content type="html">&lt;p&gt;One of the things I&#39;ve been getting more into recently is refactoring. It&#39;s something that is heavily talked about in the Ruby world, but seems to be a bit less so in the JS world. In this post what I&#39;ve done is write some of my own (crappy) JavaScript for some simple JS tabs, using bad habits and code smells. I&#39;ll then look at how, if I was new to this code, I might start refactoring.&lt;/p&gt;
&lt;h3&gt;Bad beginnings&lt;/h3&gt;
&lt;p&gt;You can view the &amp;quot;bad&amp;quot; code I started with &lt;a href=&quot;https://github.com/javascript-playground/refactoring-js/commit/3e0fd4f55daa77557044569b55397622d68c50d1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is our starting point:&lt;/p&gt;
&lt;p&gt;var tabularize = function() {
var active = location.hash;
if(active) {
$(&amp;quot;.tabs&amp;quot;).children(&amp;quot;div&amp;quot;).hide();
$(active).show();
$(&amp;quot;.active&amp;quot;).removeClass(&amp;quot;active&amp;quot;);
$(&amp;quot;.tab-link&amp;quot;).each(function() {
if($(this).attr(&amp;quot;href&amp;quot;) === active) {
$(this).parent().addClass(&amp;quot;active&amp;quot;);
}
});
}
$(&amp;quot;.tabs&amp;quot;).find(&amp;quot;.tab-link&amp;quot;).click(function() {
$(&amp;quot;.tabs&amp;quot;).children(&amp;quot;div&amp;quot;).hide();
$($(this).attr(&amp;quot;href&amp;quot;)).show();
$(&amp;quot;.active&amp;quot;).removeClass(&amp;quot;active&amp;quot;);
$(this).parent().addClass(&amp;quot;active&amp;quot;);
return false;
});
};&lt;/p&gt;
&lt;p&gt;The corresponding HTML looks like this:&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;tabs&quot;&gt;
&lt;ul&gt;
&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#tab1&quot; class=&quot;tab-link&quot;&gt;Tab 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tab2&quot; class=&quot;tab-link&quot;&gt;Tab 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tab3&quot; class=&quot;tab-link&quot;&gt;Tab 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&quot;tab1&quot;&gt;
&lt;h3&gt;Tab 1&lt;/h3&gt;
&lt;p&gt;Lorem ipsum dolor sit amet&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;tab2&quot;&gt;
&lt;h3&gt;Tab 2&lt;/h3&gt;
&lt;p&gt;Lorem ipsum dolor sit amet&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;tab3&quot;&gt;
&lt;h3&gt;Tab 3&lt;/h3&gt;
&lt;p&gt;Lorem ipsum dolor sit amet&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Hopefully you&#39;re already starting to spot problems here. Here&#39;s a list of things I found that I&#39;d like to change:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Selector reuse&lt;/strong&gt;. Notice how the code is full of &lt;code&gt;$(&amp;quot;.tab&amp;quot;)&lt;/code&gt; or similar. This is bad, not just for efficiency, but just for the pain of having to update all these references if the class changes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not very DRY (Don&#39;t repeat yourself)&lt;/strong&gt;. There&#39;s plenty of duplication here across the two parts.&lt;/li&gt;
&lt;li&gt;Use of &lt;code&gt;click()&lt;/code&gt;, rather than the preferred &lt;code&gt;on()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;return false&lt;/code&gt; rather than &lt;code&gt;e.preventDefault()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It&#39;s very much tied to a specific DOM Structure. Often it&#39;s best to try to generalize your jQuery selectors and DOM traversal so small HTML changes (renaming a class, etc) don&#39;t break all your behaviour.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Something that I won&#39;t cover here is changing this code into a jQuery plugin. In reality I probably would do this, but in this instance I&#39;d rather discuss specific refactorings within this system, so the moving to a plugin is just an abstraction too many.&lt;/p&gt;
&lt;h3&gt;Breaking code down&lt;/h3&gt;
&lt;p&gt;This code is largely split into two parts. The first activates a specific tab if it is in the URL. For example, if &lt;code&gt;http://foo.com/#tab2&lt;/code&gt; is hit, the second tab will be activated. The second part adds click handlers to all the tab links so we can click to swap between them.&lt;/p&gt;
&lt;p&gt;The first thing I like to do in this case is write some tests. I decided to use QUnit to do so. I won&#39;t go into great detail on QUnit (&lt;a href=&quot;http://javascriptplayground.com/blog/2012/04/javascript-testing-qunit-1/&quot;&gt;I&#39;ve written an intro to it before&lt;/a&gt;), but you can &lt;a href=&quot;https://github.com/javascript-playground/refactoring-js/blob/master/test/tests.js&quot;&gt;see the test JS on Github&lt;/a&gt;. I won&#39;t paste it in here as it&#39;s pretty long. Essentially I wrote tests that test:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When we visit the page, the 1st tab is visible.&lt;/li&gt;
&lt;li&gt;When I click the link for tab 2, the 2nd tab is activated.&lt;/li&gt;
&lt;li&gt;When the URL has &lt;code&gt;#tab2&lt;/code&gt; in it, the 2nd tab is activated when the page loads.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am a big fan of having these tests as it means I can refactor with confidence that I&#39;m not breaking things. Of course, I&#39;ll always manually test too, but having tests to back me up is great.&lt;/p&gt;
&lt;h3&gt;Selector Reuse&lt;/h3&gt;
&lt;p&gt;First we should tackle the reusing of selectors. This one is easy to fix, just scan through the code and find any selectors, or DOM traversal methods, that are used lots. I&#39;ve pulled out three, for now:&lt;/p&gt;
&lt;p&gt;var tabsWrapper = $(&amp;quot;.tabs&amp;quot;);
var tabs = tabsWrapper.children(&amp;quot;div&amp;quot;);
var tabLinks = tabsWrapper.find(&amp;quot;.tab-link&amp;quot;);&lt;/p&gt;
&lt;p&gt;Now you&#39;ve done that, you can go through and replace all instances of &lt;code&gt;$(&amp;quot;.tabs&amp;quot;)&lt;/code&gt; with &lt;code&gt;tabsWrapper&lt;/code&gt;, and so on. Rerunning my tests after &lt;a href=&quot;https://github.com/javascript-playground/refactoring-js/commit/6db02d7847330bc6bbd861cc7757806fb7d16205&quot;&gt;that commit&lt;/a&gt; shows us as all green. Great! The secret to refactoring is lots of little steps. No big steps at once.&lt;/p&gt;
&lt;h3&gt;Spotting Duplication&lt;/h3&gt;
&lt;p&gt;Now lets look at the duplication. We&#39;re doing the same work in more than one place right now and this can be tidied up. The first is the process for marking the tab link as active. There&#39;s two bits to this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Remove the &lt;code&gt;active&lt;/code&gt; class from the current link.&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;active&lt;/code&gt; class to the new link.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And we have to do this in two places, once within the code for checking hashes (we&#39;ll refactor that in a bit, but remember, small steps) and also in the click handler. This is where I&#39;d typically make a method to do this for me:&lt;/p&gt;
&lt;p&gt;var activateLink = function(elem) {
$(&amp;quot;.active&amp;quot;).removeClass(&amp;quot;active&amp;quot;);
elem.addClass(&amp;quot;active&amp;quot;);
};&lt;/p&gt;
&lt;p&gt;And then use that in both places:&lt;/p&gt;
&lt;p&gt;if(active) {
tabs.hide();
$(active).show();
$(&amp;quot;.tab-link&amp;quot;).each(function() {
if($(this).attr(&amp;quot;href&amp;quot;) === active) {
activateLink($(this).parent());
}
});
}
tabLinks.click(function() {
tabs.hide();
$($(this).attr(&amp;quot;href&amp;quot;)).show();
activateLink($(this).parent());
return false;
});&lt;/p&gt;
&lt;p&gt;Don&#39;t worry if right now you&#39;re spotting some code that doesn&#39;t look right (I know I am). Refactoring is all about going slowly, even if you end up undoing some of your work later on. Once again, the tests are green. &lt;a href=&quot;https://github.com/javascript-playground/refactoring-js/commit/eeab097e8070673fd8f39c5bfb1db69e43d8d0de&quot;&gt;You can see the commit on Github&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Quick wins&lt;/h3&gt;
&lt;p&gt;Now I want to do a couple of quick fixes in the event handler for the links. I&#39;m going to swap out &lt;code&gt;click&lt;/code&gt; for an &lt;code&gt;on&lt;/code&gt; call, and swap &lt;code&gt;return false&lt;/code&gt; for &lt;code&gt;e.preventDefault()&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;tabLinks.on(&amp;quot;click&amp;quot;, function(e) {
e.preventDefault();
tabs.hide();
$($(this).attr(&amp;quot;href&amp;quot;)).show();
activateLink($(this).parent());
});&lt;/p&gt;
&lt;p&gt;If you&#39;re wondering why &lt;code&gt;return false&lt;/code&gt; is bad, &lt;a href=&quot;http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/&quot;&gt;give this post by Doug Neiner a read&lt;/a&gt;. I&#39;ve also moved the &lt;code&gt;preventDefault&lt;/code&gt; call to the top, as I like for it to be immediately apparent that the default action is cancelled. Once again, we&#39;re green and &lt;a href=&quot;https://github.com/javascript-playground/refactoring-js/commit/29d9db8ab6d5604c8a20a0f45b8ff2d43de8b3c1&quot;&gt;you can see the commit here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;More duplication&lt;/h3&gt;
&lt;p&gt;There&#39;s some more duplication across the two parts of the code here. Similarly to before, the code for activating a new tab is in two places. It can be summed up as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hide all the tabs&lt;/li&gt;
&lt;li&gt;Show the one tab&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&#39;s easy to write, and use:&lt;/p&gt;
&lt;p&gt;var activateTab = function(tabHash) {
tabs.hide();
$(tabHash).show();
};
...
if(active) {
activateTab(active);
...
}
tabLinks.on(&amp;quot;click&amp;quot;, function(e) {
e.preventDefault();
activateTab($(this).attr(&amp;quot;href&amp;quot;));
...
});&lt;/p&gt;
&lt;p&gt;And sure enough, we&#39;re green. &lt;a href=&quot;https://github.com/javascript-playground/refactoring-js/commit/9ae8424b4cf99a097f6ef545e88bf578ee450450&quot;&gt;Here&#39;s that commit&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Finding the active link&lt;/h3&gt;
&lt;p&gt;Now you can see the code for the URL hash and the event handler are very similar. In fact, the only difference is that the first has to search through all the links to find the one that should be active:&lt;/p&gt;
&lt;p&gt;$(&amp;quot;.tab-link&amp;quot;).each(function() {
if($(this).attr(&amp;quot;href&amp;quot;) === active) {
activateLink($(this).parent());
}
});&lt;/p&gt;
&lt;p&gt;We can write this shorter though, using jQuery&#39;s &lt;code&gt;filter&lt;/code&gt; method and selecting by attribute:&lt;/p&gt;
&lt;p&gt;if(active) {
activateTab(active);
activateLink($(&amp;quot;.tab-link&amp;quot;).filter(&amp;quot;[href=&#39;&amp;quot; + active + &amp;quot;&#39;]&amp;quot;).parent());
}&lt;/p&gt;
&lt;p&gt;That&#39;s a nicer way of doing things, even if it is quite a long line. I&#39;d be tempted here to create a variable first:&lt;/p&gt;
&lt;p&gt;var link = $(&amp;quot;.tab-link&amp;quot;).filter(&amp;quot;[href=&#39;&amp;quot; + active + &amp;quot;&#39;]&amp;quot;).parent();
activateLink(link);&lt;/p&gt;
&lt;p&gt;Although it adds a line, it makes it cleaner, in my opinion. Remember, line count is not a measure of a good or bad refactoring. Our tests are green, and &lt;a href=&quot;https://github.com/javascript-playground/refactoring-js/commit/3caea006cef342269981e9ae2fabb205064fcfdb&quot;&gt;here&#39;s that commit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;. As &lt;a href=&quot;http://twitter.com/mheap&quot;&gt;Michael&lt;/a&gt; pointed out, there&#39;s no need to use &lt;code&gt;filter&lt;/code&gt; here, we can just simply attach the attribute selector to the class selector:&lt;/p&gt;
&lt;p&gt;var link = $(&amp;quot;.tab-link[href=&#39;&amp;quot; + active + &amp;quot;&#39;]&amp;quot;).parent();&lt;/p&gt;
&lt;p&gt;With that being shorter, you could then miss out the temporary variable:&lt;/p&gt;
&lt;p&gt;activateLink($(&amp;quot;.tab-link[href=&#39;&amp;quot; + active + &amp;quot;&#39;]&amp;quot;).parent());&lt;/p&gt;
&lt;p&gt;This change isn&#39;t reflected in the Git commits as it was made after I made them, but feel free to make this change yourself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2&lt;/strong&gt;. &lt;a href=&quot;http://twitter.com/rodneyrehm&quot;&gt;Rodney&lt;/a&gt; makes a good point that you might prefer to use &lt;code&gt;filter&lt;/code&gt;, but pass it a function, which may also bring speed benefits:&lt;/p&gt;
&lt;p&gt;$(&amp;quot;.tab-link&amp;quot;).filter(function() { return this.href.hash === active });&lt;/p&gt;
&lt;p&gt;As Rodney explains: &amp;quot;I&#39;d expect (not tested) &lt;code&gt;filter(function(){ return this.href === active; })&lt;/code&gt; to be just as fast (if not faster, as no parsing)&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 3&lt;/strong&gt;. What we should be doing here is using our &lt;code&gt;tabLinks&lt;/code&gt; variable. We can combine that with the &lt;code&gt;filter&lt;/code&gt; method and use it like Rodney suggests, passing it a function:&lt;/p&gt;
&lt;p&gt;var transition = function(hash) {
activateTab(hash);
activateLink(tabLinks.filter(function() {
return $(this).attr(&amp;quot;href&amp;quot;) === hash;
}).parent());
};&lt;/p&gt;
&lt;p&gt;We have to use &lt;code&gt;$(this).attr(&amp;quot;href&amp;quot;)&lt;/code&gt; instead of the shorter &lt;code&gt;this.href&lt;/code&gt; as &lt;code&gt;this.href&lt;/code&gt; gives us the full URL, including the domain, even though the link is just &lt;code&gt;#tab1&lt;/code&gt;. jQuery normalises this, returning just the link within the anchor tag.&lt;/p&gt;
&lt;h3&gt;The &lt;code&gt;transition&lt;/code&gt; method&lt;/h3&gt;
&lt;p&gt;Now our two parts look identical. Both call &lt;code&gt;activateTab&lt;/code&gt; and &lt;code&gt;activateLink&lt;/code&gt;. Seems like that could become a method too:&lt;/p&gt;
&lt;p&gt;var transition = function(hash) {
activateTab(hash);
activateLink(tabLinks.filter(function() {
return $(this).attr(&amp;quot;href&amp;quot;) === hash;
}).parent());
};&lt;/p&gt;
&lt;p&gt;Now all we have to do is pass a hash, like &lt;code&gt;&amp;quot;#tab1&amp;quot;&lt;/code&gt; to &lt;code&gt;transition&lt;/code&gt;, and everything is taken care of. I can update the code to reflect this:&lt;/p&gt;
&lt;p&gt;var active = location.hash;
if(active) {
transition(active);
}
tabLinks.on(&amp;quot;click&amp;quot;, function(e) {
e.preventDefault();
transition(this.href.hash);
});&lt;/p&gt;
&lt;p&gt;Now, in my opinion, that&#39;s much nicer than when we started. &lt;a href=&quot;https://github.com/javascript-playground/refactoring-js/commit/07e063a4ceddca8aa4093c3bad9a4aecf4a088b6&quot;&gt;Here&#39;s that commit&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Two more quick wins&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://twitter.com/elijahmanor&quot;&gt;Elijah&lt;/a&gt; was kind enough to point out a couple of enhancements. The first is to limit the scope when we search for &lt;code&gt;.active&lt;/code&gt; to within the &lt;code&gt;tabWrapper&lt;/code&gt;, which makes sense. Simply swap out:&lt;/p&gt;
&lt;p&gt;$(&amp;quot;.active&amp;quot;)&lt;/p&gt;
&lt;p&gt;for:&lt;/p&gt;
&lt;p&gt;tabWrapper.find(&amp;quot;.active&amp;quot;);&lt;/p&gt;
&lt;p&gt;Similarly, using &lt;code&gt;parent()&lt;/code&gt; to find the link&#39;s &lt;code&gt;li&lt;/code&gt; is more brittle to simple HTML changes. What if an extra &lt;code&gt;span&lt;/code&gt; tag is wrapped round a link? Better to use &lt;code&gt;closest(&amp;quot;li&amp;quot;)&lt;/code&gt;, which will still work even if the HTML changes slightly.&lt;/p&gt;
&lt;p&gt;var transition = function(hash) {
activateTab(hash);
activateLink($(&amp;quot;.tab-link[href=&#39;&amp;quot; + hash + &amp;quot;&#39;]&amp;quot;).closest(&amp;quot;li&amp;quot;));
};&lt;/p&gt;
&lt;p&gt;Those commits are documented &lt;a href=&quot;https://github.com/javascript-playground/refactoring-js/commits/master&quot;&gt;on the master branch&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Post Refactor&lt;/h3&gt;
&lt;p&gt;As a recap, here&#39;s what the JS looks like now:&lt;/p&gt;
&lt;p&gt;var tabularize = function() {&lt;/p&gt;
&lt;p&gt;var tabsWrapper = $(&amp;quot;.tabs&amp;quot;);
var tabs = tabsWrapper.children(&amp;quot;div&amp;quot;);
var tabLinks = tabsWrapper.find(&amp;quot;.tab-link&amp;quot;);&lt;/p&gt;
&lt;p&gt;var activateLink = function(elem) {
tabsWrapper.find(&amp;quot;.active&amp;quot;).removeClass(&amp;quot;active&amp;quot;);
elem.addClass(&amp;quot;active&amp;quot;);
};&lt;/p&gt;
&lt;p&gt;var activateTab = function(tabHash) {
tabs.hide();
$(tabHash).show();
};&lt;/p&gt;
&lt;p&gt;var transition = function(hash) {
activateTab(hash);
activateLink(tabLinks.filter(function() {
return $(this).attr(&amp;quot;href&amp;quot;) === hash;
}).closest(&amp;quot;li&amp;quot;));
};&lt;/p&gt;
&lt;p&gt;var active = location.hash;
if(active) {
transition(active);
}
tabLinks.on(&amp;quot;click&amp;quot;, function(e) {
e.preventDefault();
transition($(this).attr(&amp;quot;href&amp;quot;));
});
};&lt;/p&gt;
&lt;p&gt;Is it longer? &lt;strong&gt;Yes&lt;/strong&gt;. Is it cleaner, more DRY and easier to follow? In my opinion, &lt;strong&gt;Yes it is&lt;/strong&gt;. We&#39;ve gone from a mess of spaghetti JavaScript with ugly selectors being reused, code being duplicated and the meaning obfuscated to a easier to follow, more organised structure.&lt;/p&gt;
&lt;h3&gt;Better Structure&lt;/h3&gt;
&lt;p&gt;There&#39;s a bit more to be done here. There&#39;s also a big bug in the way tabs are activated based on the hash in the URL, but I&#39;m going to leave that one to you to fix. At this point, I would consider moving the tab code into a more structured form, such as an object. Doing it this way also makes it easier to move into a jQuery plugin, as the plugin can just call the object. It&#39;s also &lt;strong&gt;bad practice to have functions contained within functions&lt;/strong&gt;, which is why my next step would be refactoring into an object (or what you might call a JS &amp;quot;class&amp;quot;).&lt;/p&gt;
&lt;p&gt;I&#39;m not going to go through it here, as this tutorial is long enough already, but have written and committed a new version to &lt;a href=&quot;https://github.com/javascript-playground/refactoring-js/tree/class-version&quot;&gt;a branch on Github&lt;/a&gt; for you to fully dive into. I will also try to write about it in a future post.&lt;/p&gt;
&lt;h3&gt;To conclude&lt;/h3&gt;
&lt;p&gt;Refactoring is fun! It&#39;s probably my favourite part of being a developer. Things that I try to do as typical refactorings are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Put things in variables if you reference them often.&lt;/li&gt;
&lt;li&gt;Remove temporary variables, or variables that are only used once (some exceptions to this).&lt;/li&gt;
&lt;li&gt;Don&#39;t be afraid to make more functions. The best functions are small functions.&lt;/li&gt;
&lt;li&gt;Don&#39;t be afraid to add a bit more structure at the expense of line count (which is very rarely a good measure of code).&lt;/li&gt;
&lt;li&gt;Have some tests to back up if your refactoring is going well and hasn&#39;t broken functionality.&lt;/li&gt;
&lt;li&gt;Take lots of small steps. Move very slowly, and resist the urge to immediately refactor everything at once. Be methodical.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I hope this was a useful post. If you&#39;ve any queries or questions, leave a comment and I&#39;ll endeavour to get back to you. Alternatively, you can drop me a tweet (@Jack_Franklin) or feel free to email me too.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Some of the links to Git commits have become slightly out of sync with the code, mainly due to tweaks following great feedback from folks on Twitter. You can see all the commits and the process I took &lt;a href=&quot;https://github.com/javascript-playground/refactoring-js/commits/master&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Meet pulldown</title>
    <link href="http://www.jackfranklin.co.uk/blog/pulldown/"/>
    <updated>2013-06-10T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/pulldown/</id>
    <content type="html">&lt;p&gt;A good couple of months ago, I sat down with fellow JavaScripter &lt;a href=&quot;http://twitter.com/phuunet&quot;&gt;Tom Ashworth&lt;/a&gt; to rewrite my JS tool &lt;a href=&quot;https://github.com/jackfranklin/pulldown&quot;&gt;pulldown&lt;/a&gt;. I thought it would be of interest to readers, both as a useful tool, and an example of developing relatively complex CLI tools.&lt;/p&gt;
&lt;p&gt;Pulldown will help you quickly and easily download libraries. For example, running:&lt;/p&gt;
&lt;p&gt;$ pulldown jquery&lt;/p&gt;
&lt;p&gt;Will instantly download you the latest minified source of the jQuery library. We use &lt;a href=&quot;http://cdnjs.com/&quot;&gt;cdnjs&lt;/a&gt; to search for what you looked for. It can also do versioning:&lt;/p&gt;
&lt;p&gt;$ pulldown jquery@1.8.2&lt;/p&gt;
&lt;p&gt;It&#39;s &lt;strong&gt;not supposed&lt;/strong&gt; to be a replacement for Bower, nor is it meant to replicate the features, but it&#39;s designed to sit right in the middle. If you need a quick CLI way to download a library, this might just be of use.&lt;/p&gt;
&lt;p&gt;It&#39;s fully documented &lt;a href=&quot;https://github.com/jackfranklin/pulldown&quot;&gt;in the Github repo&lt;/a&gt; and you can install it right now through npm:&lt;/p&gt;
&lt;p&gt;$ npm install -g pulldown&lt;/p&gt;
&lt;p&gt;If you do use it, please get in touch if you have any (good or bad) feedback. Would love to hear it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>More Refactoring</title>
    <link href="http://www.jackfranklin.co.uk/blog/refactoring-part-2/"/>
    <updated>2013-06-12T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/refactoring-part-2/</id>
    <content type="html">&lt;p&gt;Last week&#39;s &lt;a href=&quot;http://javascriptplayground.com/blog/2013/06/refactoring-js/&quot;&gt;refactoring post&lt;/a&gt; turned out more popular than expected and I wasn&#39;t going to revisit it. However, it got so much interest that I&#39;d like to.&lt;/p&gt;
&lt;p&gt;Here&#39;s the code we ended up with at the end:&lt;/p&gt;
&lt;p&gt;var tabularize = function() {&lt;/p&gt;
&lt;p&gt;var tabsWrapper = $(&amp;quot;.tabs&amp;quot;);
var tabs = tabsWrapper.children(&amp;quot;div&amp;quot;);
var tabLinks = tabsWrapper.find(&amp;quot;.tab-link&amp;quot;);&lt;/p&gt;
&lt;p&gt;var activateLink = function(elem) {
tabsWrapper.find(&amp;quot;.active&amp;quot;).removeClass(&amp;quot;active&amp;quot;);
elem.addClass(&amp;quot;active&amp;quot;);
};&lt;/p&gt;
&lt;p&gt;var activateTab = function(tabHash) {
tabs.hide();
$(tabHash).show();
};&lt;/p&gt;
&lt;p&gt;var transition = function(hash) {
activateTab(hash);
activateLink(tabLinks.filter(function() {
return $(this).attr(&amp;quot;href&amp;quot;) === hash;
}).closest(&amp;quot;li&amp;quot;));
};&lt;/p&gt;
&lt;p&gt;var active = location.hash;
if(active) {
transition(active);
}
tabLinks.on(&amp;quot;click&amp;quot;, function(e) {
e.preventDefault();
transition($(this).attr(&amp;quot;href&amp;quot;));
});
};&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(If you haven&#39;t already, I recommend reading &lt;a href=&quot;http://javascriptplayground.com/blog/2013/06/refactoring-js/&quot;&gt;the first post&lt;/a&gt;. This won&#39;t make much sense on its own)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;At that point, I ended the post with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;At this point, I would consider moving the tab code into a more structured form, such as an object. Doing it this way also makes it easier to move into a jQuery plugin, as the plugin can just call the object.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;The Further Refactoring&lt;/h3&gt;
&lt;p&gt;And I&#39;d like to talk a bit about that here, as I had a lot of questions about it. Here&#39;s my final class version of the tabs code:&lt;/p&gt;
&lt;p&gt;var Tabularize = function(elem) {
this.tabsWrapper = $(elem);
this.tabs = this.tabsWrapper.children(&amp;quot;div&amp;quot;);
this.tabLinks = this.tabsWrapper.find(&amp;quot;.tab-link&amp;quot;);
this.checkHash();
this.bind();
};&lt;/p&gt;
&lt;p&gt;Tabularize.prototype = {
bind: function() {
var self = this;
this.tabLinks.on(&amp;quot;click&amp;quot;, function(e) {
e.preventDefault();
self.transition($(this).attr(&amp;quot;href&amp;quot;));
});
},
checkHash: function() {
var active = location.hash;
if(active) {
this.transition(active);
}
},
transition: function(hash) {
this._activateTab(hash);
var link = tabLinks.filter(&amp;quot;[href=&#39;&amp;quot; + hash + &amp;quot;&#39;]&amp;quot;).closest(&amp;quot;li&amp;quot;);
this._activateLink(link);
},
_activateLink: function(elem) {
tabWrapper.find(&amp;quot;.active&amp;quot;).removeClass(&amp;quot;active&amp;quot;);
elem.addClass(&amp;quot;active&amp;quot;);
},
_activateTab: function(hash) {
this.tabs.hide();
$(hash).show();
}
}&lt;/p&gt;
&lt;p&gt;I have become a massive fan of abstracting things into objects like this in JavaScript. It forces you to structure your code better and positively influences the readability of your code (once you get used to this way of doing things).&lt;/p&gt;
&lt;h3&gt;jQuery Plugin&lt;/h3&gt;
&lt;p&gt;The beauty of this is how easy it would be to turn into a jQuery Plugin. Rather than write a messy jQuery plugin to do all this tabbing code, all we have to do is create a jQuery plugin that instantiates a new version of the &lt;code&gt;Tabularize&lt;/code&gt; object, passing in the element. Something like this should suffice:&lt;/p&gt;
&lt;p&gt;$.fn.tabularize = function() {
return this.each(function() {
new Tabularize(this);
});
}&lt;/p&gt;
&lt;p&gt;I really like moving code out of jQuery plugins and making the jQuery plugin just call code that&#39;s contained elsewhere.&lt;/p&gt;
&lt;h3&gt;Cleaner&lt;/h3&gt;
&lt;p&gt;Comparing the first refactoring to the second, in my opinion the second is definitely cleaner. The first has functions within function (a bad thing to do), and it&#39;s also unclear what methods are available. At a glance, it&#39;s difficult to quickly decipher. The second is much clearer. At a glance, I could tell you the main method names. I could also suggest that methods that start with an underscore are not designed to be used publically.&lt;/p&gt;
&lt;h3&gt;Short Methods&lt;/h3&gt;
&lt;p&gt;Notice also that every method is very short. In &lt;a href=&quot;http://www.youtube.com/watch?v=DC-pQPq0acs&quot;&gt;Ben Orenstein&#39;s Refactoring talk&lt;/a&gt; at Aloha Ruby, Ben says that shorter methods are far superior, and he&#39;s coming round to the idea that every public method should be one line. The talk is on Ruby, but I still think some of the ideas are relevant. Whilst one line per method is perhaps ambitious, I am absolutely with Ben in terms of keeping methods short and this Tabularize object achieves that.&lt;/p&gt;
&lt;p&gt;There&#39;s a lot of different ways to refactor and restructure, and you should by no means take what I&#39;ve discussed in these posts as the only way to do things. If you&#39;d have gone about this differently, please leave a comment, I enjoy seeing how others go about this.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Firefox OS Hello World</title>
    <link href="http://www.jackfranklin.co.uk/blog/firefoxos1/"/>
    <updated>2013-07-03T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/firefoxos1/</id>
    <content type="html">&lt;p&gt;I recently got my hands on a &lt;a href=&quot;http://www.geeksphone.com/&quot;&gt;Firefox OS preview device, a Keon&lt;/a&gt; and today I&#39;m going to show you how to get a simple Hello World app running on the phone. Note that you don&#39;t need a phone to follow through - we will also use the Firefox OS simulator which can run on any machine (it&#39;s a Firefox browser plugin) and you can easily run your application through that. The phone is just the extra bonus bit at the end!&lt;/p&gt;
&lt;p&gt;To install the simulator just load up Firefox and &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/firefox-os-simulator/&quot;&gt;head to the simulator download page&lt;/a&gt;. From there you can install it to Firefox OS. Hit the button on the left of the simulator dashboard to run the simulator and you should see the &amp;quot;device&amp;quot; appear:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/image/2k2T2X3E3S1f/Screen%20Shot%202013-07-01%20at%2011.42.08.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now lets make an app. Apps are almost deceptively simple to create. It really is just HTML, CSS and JavaScript! As always, &lt;a href=&quot;https://github.com/javascript-playground/firefoxos-helloworld&quot;&gt;you can find all the code on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first thing to do is create an &lt;code&gt;index.html&lt;/code&gt; page. This just links to a couple of JS files, one of which is jQuery, and contains an empty &lt;code&gt;div&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Hello World!&lt;/title&gt;
&lt;script src=&quot;http://www.jackfranklin.co.uk/blog/firefoxos1/js/jquery.min.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://www.jackfranklin.co.uk/blog/firefoxos1/js/app.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;
&lt;p&gt;Create a &lt;code&gt;js&lt;/code&gt; directory and grab the latest version of jQuery into it. Then create &lt;code&gt;app.js&lt;/code&gt; and put this within:&lt;/p&gt;
&lt;p&gt;$(function() {
$(&amp;quot;div&amp;quot;).text(&amp;quot;Hello World!&amp;quot;);
});&lt;/p&gt;
&lt;p&gt;When the app loads we should see the text &amp;quot;Hello World&amp;quot; appear in the empty &lt;code&gt;div&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we need to create a &lt;code&gt;manifest.webapp&lt;/code&gt; file. This is similar to how &lt;code&gt;package.json&lt;/code&gt; works with Node and npm apps in that it tells the system about the app and how to run it. Inside the application manifest goes some simple JSON:&lt;/p&gt;
&lt;p&gt;{
&amp;quot;name&amp;quot;: &amp;quot;Hello World&amp;quot;,
&amp;quot;description&amp;quot;: &amp;quot;Jack&#39;s test Hello World app&amp;quot;,
&amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
&amp;quot;launch_path&amp;quot;: &amp;quot;/index.html&amp;quot;,
&amp;quot;developer&amp;quot;: {
&amp;quot;name&amp;quot;: &amp;quot;Jack Franklin&amp;quot;,
&amp;quot;url&amp;quot;: &amp;quot;http://jackfranklin.co.uk&amp;quot;
}
}&lt;/p&gt;
&lt;p&gt;The main property there to note is &lt;code&gt;launch_path&lt;/code&gt;. This is the file that the app will load up first when it is run by the user.&lt;/p&gt;
&lt;p&gt;Now we have our app, we can try running it through the simulator. On the simulator dashboard, click the &amp;quot;Add Directory&amp;quot; button and then navigate to the folder which contains the manifest file. Double click on that manifest file to select it. You&#39;ll see the device boot and run your app, complete with the &amp;quot;Hello World&amp;quot; text we inserted.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/image/3E2Y2s2S1c2u/Screen%20Shot%202013-07-01%20at%2011.52.30.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Finally, lets install it on the device itself. The instructions on how to do this vary depending on your OS, so rather than type them all here, I suggest &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS/Debugging/Connecting_a_Firefox_OS_device_to_the_desktop&quot;&gt;reading the MDN documentation&lt;/a&gt;. Once you&#39;ve done that, and enabled remote debugging on the device, connect it to your computer via the USB lead.&lt;/p&gt;
&lt;p&gt;You should see a new &amp;quot;Push&amp;quot; icon appear:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/image/1D0g0R0J0p0b/Screen%20Shot%202013-07-03%20at%2014.23.08.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Hit that, and your app should be installed on the phone.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/image/3I3i0j0s1o0C/2013-07-03%2014.23.57.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;I hope this quick tutorial helps. The aim here wasn&#39;t to go into any huge depth, but provide a very quick &amp;quot;Getting started&amp;quot; app. In the future I&#39;ll delve into more of the APIs available and what can be done with them. In the mean time, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Firefox_OS_Simulator&quot;&gt;The MDN page&lt;/a&gt; has a huge amount of documentation.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Announcing &#39;Confident jQuery&#39;</title>
    <link href="http://www.jackfranklin.co.uk/blog/confident-jquery/"/>
    <updated>2013-07-16T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/confident-jquery/</id>
    <content type="html">&lt;p&gt;At the weekend I annouced my latest project, &amp;quot;Confident jQuery&amp;quot;. It&#39;s going to be a book, self-published through Leanpub aimed at those who are confident enough using the jQuery API and its methods, but want to take that next step. From the book&#39;s about page:&lt;/p&gt;
&lt;p&gt;Confident jQuery is for those who feel comfortable writing jQuery but want to improve their ability to structure their JavaScript better. If you have ever found yourself with messy JavaScript that is heavily tied to the structure of your HTML, or had your entire jQuery carousel refuse to start-up because you changed just one tiny class name in your HTML code, this book will help.&lt;/p&gt;
&lt;p&gt;Through the course of this book we&#39;ll study and discuss:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to make your code more structured and maintainable so you don&#39;t revisit it 6 months down the line and shudder.&lt;/li&gt;
&lt;li&gt;how you can write cleverer, more contextual selectors to avoid your jQuery being quite so tightly tied to the HTML structure.&lt;/li&gt;
&lt;li&gt;why not all your code should live within that one $(document).ready() call&lt;/li&gt;
&lt;li&gt;how we can leverage plain JavaScript objects to clean our code up considerably&lt;/li&gt;
&lt;li&gt;discuss refactoring methods to tackle old code and improve it&lt;/li&gt;
&lt;li&gt;how in certain situations at all using jQuery is actually harder than using plain JavaScript&lt;/li&gt;
&lt;li&gt;how to write tests for your jQuery&lt;/li&gt;
&lt;li&gt;and much more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;###What the book isn&#39;t&lt;/p&gt;
&lt;p&gt;This book will not look at any additional libraries. We&#39;ll just be using jQuery all the way through (with the exception of QUnit for the testing chapter). This is not a book about telling you how to use RequireJS to load in your code in a modular fashion and nor will it tell you that you should use an additional library like Backbone or Angular.&lt;/p&gt;
&lt;p&gt;This book is also not aimed at those who have never written jQuery before. You should have a good grasp of jQuery before tackling this book.&lt;/p&gt;
&lt;h3&gt;Sign up for updates&lt;/h3&gt;
&lt;p&gt;If this sounds interesting, please &lt;a href=&quot;https://leanpub.com/confidentjquery&quot;&gt;register your interest on Leanpub&lt;/a&gt;. It&#39;s my hope that the first &amp;quot;beta&amp;quot; version will be available in 3-4 weeks.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A new look</title>
    <link href="http://www.jackfranklin.co.uk/blog/new-design/"/>
    <updated>2013-08-14T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/new-design/</id>
    <content type="html">&lt;p&gt;Today I&#39;m happy to go live with the new design of the JavaScript Playground! My thanks go hugely to &lt;a href=&quot;http://twitter.com/benhowdle&quot;&gt;Ben Howdle&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/martinbean&quot;&gt;Martin Bean&lt;/a&gt;. The beautiful new design is the work of Ben, and Martin did a lot of the hard work turning it into HTML and CSS. I just added some final touches and moved it into Jekyll. This is also a good point to once again thank &lt;a href=&quot;http://twitter.com/tobyhowarth&quot;&gt;Toby Howarth&lt;/a&gt; who&#39;s original design lasted 16 months. Toby came up with the yellow which is now pretty much the most recognisable trait of the website.&lt;/p&gt;
&lt;p&gt;To celebrate the launch of the new design there&#39;s a number of tutorials coming your way very soon. On Friday I&#39;ll give you an introduction to working with maps using &lt;a href=&quot;http://leafletjs.com/&quot;&gt;LeafletJS&lt;/a&gt;, and next week I&#39;ll be looking at testing Node modules that make API calls, and how to mock those requests. The popular Express &amp;amp; Backbone series will also have another episode out early next week too. I&#39;m also chatting to lots of lovely folk who will be writing articles in the future, with lots of great topics on the way.&lt;/p&gt;
&lt;p&gt;If you find any bugs with the new site (there are always), please &lt;a href=&quot;https://github.com/jackfranklin/javascriptplayground.com/issues/new&quot;&gt;report it on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Mocking API Requests in Node tests</title>
    <link href="http://www.jackfranklin.co.uk/blog/mocking-web-requests/"/>
    <updated>2013-08-19T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/mocking-web-requests/</id>
    <content type="html">&lt;p&gt;Recently I sat down with my &lt;a href=&quot;https://github.com/jackfranklin/pulldown&quot;&gt;Pulldown Project&lt;/a&gt;, aiming to rewrite the tests. The problem with them was that they were network dependent. Each test would hit the real API and download the real file. This was not good for a number of reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I couldn&#39;t run the tests without an internet connection&lt;/li&gt;
&lt;li&gt;the tests were slow&lt;/li&gt;
&lt;li&gt;the tests were unreliable, they would sometimes pass, and other times not&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unreliable tests are worse than no tests, so I ripped them out and started again.&lt;/p&gt;
&lt;h3&gt;Meet Nock&lt;/h3&gt;
&lt;p&gt;The solution to this is &lt;a href=&quot;https://github.com/flatiron/nock&quot;&gt;Nock&lt;/a&gt;, a Node module for mocking HTTP requests. With Nock you can mock a HTTP request and make it always return a specific result. Here&#39;s an example:&lt;/p&gt;
&lt;p&gt;var nock = require(&amp;quot;nock&amp;quot;);
var http = require(&amp;quot;http&amp;quot;);&lt;/p&gt;
&lt;p&gt;var api = nock(&amp;quot;http://javascriptplayground.com&amp;quot;)
.get(&amp;quot;/test/&amp;quot;)
.reply(200, &amp;quot;Hello World&amp;quot;);&lt;/p&gt;
&lt;p&gt;http.get(&amp;quot;http://javascriptplayground.com/test/&amp;quot;, function(resp) {
var str = &amp;quot;&amp;quot;;
resp.on(&amp;quot;data&amp;quot;, function(data) { str += data; });
resp.on(&amp;quot;end&amp;quot;, function() {
console.log(&amp;quot;Got Result: &amp;quot;, str);
});
});&lt;/p&gt;
&lt;p&gt;In that code we do two things. First, we mock a request to &lt;code&gt;http://javascriptplayground.com/test/&lt;/code&gt; and make it return the string &amp;quot;Hello World&amp;quot; with a 200 status code. Then we use Node&#39;s http library to make a request and log it out. We then get &amp;quot;Got Result: Hello World&amp;quot; outputted when we run the above.&lt;/p&gt;
&lt;p&gt;What&#39;s so great about this is that &lt;code&gt;http.get&lt;/code&gt; is none-the-wiser about what just happened. You don&#39;t have to change any code to make this work, just mock the request.&lt;/p&gt;
&lt;p&gt;There&#39;s no requirement to return a string, either. You can return an object, an array, whatever you&#39;d like.&lt;/p&gt;
&lt;h3&gt;A Gotcha&lt;/h3&gt;
&lt;p&gt;When you mock something using nock, &lt;em&gt;it only works once&lt;/em&gt;. Once a URL you&#39;ve mocked is hit, the mock is then destroyed. To fix this, you can make a specific mocked URL persist:&lt;/p&gt;
&lt;p&gt;var api = nock(&amp;quot;http://javascriptplayground.com&amp;quot;)
.persist()
.get(&amp;quot;/test/&amp;quot;)
.reply(200, &amp;quot;Hello World&amp;quot;);&lt;/p&gt;
&lt;p&gt;Now it will last forever, until you call &lt;code&gt;cleanUp&lt;/code&gt;, which I&#39;ll cover shortly.&lt;/p&gt;
&lt;h3&gt;Asserting&lt;/h3&gt;
&lt;p&gt;If you need to test thaat a specific URL is called, you can mock that URL and then call &lt;code&gt;isDone()&lt;/code&gt; to see if it got called:&lt;/p&gt;
&lt;p&gt;var api = nock(&amp;quot;http://javascriptplayground.com&amp;quot;)
.get(&amp;quot;/test/&amp;quot;)
.reply(200, &amp;quot;Hello World&amp;quot;);&lt;/p&gt;
&lt;p&gt;// http.get code here
api.isDone(); // =&amp;gt; true&lt;/p&gt;
&lt;h3&gt;Clean Up&lt;/h3&gt;
&lt;p&gt;When you have lots of tests that do this, it&#39;s important to make sure they tidy up after themselves. The best way I&#39;ve found of doing this is calling &lt;code&gt;nock.cleanAll()&lt;/code&gt; after each test. &lt;code&gt;cleanAll()&lt;/code&gt; removes all mocks completely. If you were using something like Mocha to do your tests, you might like to do this in the &lt;code&gt;afterEach&lt;/code&gt; method.&lt;/p&gt;
&lt;h3&gt;Further Reading&lt;/h3&gt;
&lt;p&gt;The best place to start is the &lt;a href=&quot;https://github.com/flatiron/nock&quot;&gt;nock README&lt;/a&gt;. There&#39;s a huge amount of documentation and a lot more nock can do that I&#39;ve not covered.&lt;/p&gt;
&lt;p&gt;If you&#39;d like to see a real project that uses nock, we use it extensively in the &lt;a href=&quot;https://github.com/jackfranklin/pulldown/tree/master/test&quot;&gt;Pulldown tests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&#39;ve ever used an alternative to Nock, or use other tools with it that you think I should mention here, please leave a comment.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Dependency Management with Browserify</title>
    <link href="http://www.jackfranklin.co.uk/blog/browserify/"/>
    <updated>2013-09-08T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/browserify/</id>
    <content type="html">&lt;p&gt;If you&#39;ve been a long time reader of this blog you&#39;ll know that I&#39;m a fan of RequireJS, and have written about it before. This past weekend I was doing a JS workshop and someone mentioned Browserify to me as a potential alternative. I&#39;d not used it, so thought it was a good excuse to learn more and write up my experience.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/substack/node-browserify&quot;&gt;Browserify&lt;/a&gt; aims to bring Node&#39;s &lt;code&gt;require(&amp;quot;module&amp;quot;)&lt;/code&gt; syntax to the browser. Node&#39;s syntax itself is taken from the &lt;a href=&quot;http://wiki.commonjs.org/wiki/CommonJS&quot;&gt;CommonJS Spec&lt;/a&gt;, so in essence Browserify enables you to use your CommonJS style modules in the browser. It even allows you to require Node modules in the browser, although we won&#39;t look at that today. If you&#39;re comfortable requiring and defining modules in Node, Browserify should be easy to pick up. If not, don&#39;t worry, I&#39;ll explain how.&lt;/p&gt;
&lt;p&gt;Defining a module is easy. Here I&#39;ve created a file called &lt;code&gt;foo.js&lt;/code&gt;, which exports just one method:&lt;/p&gt;
&lt;p&gt;module.exports = function(x) {
console.log(x);
};&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;module.exports&lt;/code&gt; here will be picked up by Browserify, and tells it that when we require this file, to return this function.&lt;/p&gt;
&lt;p&gt;Now let&#39;s write a file that uses our new module. I&#39;ve called this &lt;code&gt;main.js&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;var foo = require(&amp;quot;./foo&amp;quot;);
foo(&amp;quot;Hey&amp;quot;);&lt;/p&gt;
&lt;p&gt;The first line loads in the file &lt;code&gt;foo.js&lt;/code&gt;, with the &lt;code&gt;./&lt;/code&gt; at the beginning indicating it&#39;s in the same directory as &lt;code&gt;main.js&lt;/code&gt;. Note that we can leave off the &lt;code&gt;.js&lt;/code&gt; extension. That will return us the function we defined earlier, which we can then call by passing it an argument.&lt;/p&gt;
&lt;p&gt;Right now, if we were to include &lt;code&gt;main.js&lt;/code&gt; in our HTML, this wouldn&#39;t work. This is the downside of Browserify. To use it, we have to first generate a JS file using the Browserify command line tool, which you can install with npm:&lt;/p&gt;
&lt;p&gt;npm install -g browserify&lt;/p&gt;
&lt;p&gt;Now run this command:&lt;/p&gt;
&lt;p&gt;browserify main.js &amp;gt; compiled.js&lt;/p&gt;
&lt;p&gt;This instructs Browserify to start at &lt;code&gt;main.js&lt;/code&gt;, and bundle up all our files and dependencies. Browserify will see that &lt;code&gt;main.js&lt;/code&gt; requires &lt;code&gt;foo.js&lt;/code&gt;, and pull that in for us. What we get is one JS file, &lt;code&gt;compiled.js&lt;/code&gt;, which has everything we need. You can then add that into your HTML:&lt;/p&gt;
&lt;p&gt;&lt;script src=&quot;http://www.jackfranklin.co.uk/blog/browserify/compiled.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Load it up in your browser, and you will see &amp;quot;Hey&amp;quot; logged to the screen.&lt;/p&gt;
&lt;p&gt;Browserify&#39;s command line tool is clever, and is able to deal with just about anything you can throw about it. The &lt;a href=&quot;https://github.com/substack/node-browserify&quot;&gt;README&lt;/a&gt; goes through this in detail.&lt;/p&gt;
&lt;p&gt;The benefit over RequireJS, at least for me, is that you don&#39;t need to worry about callbacks, or anything similar. In RequireJS, you have to do :&lt;/p&gt;
&lt;p&gt;require([&amp;quot;foo&amp;quot;], function(foo) {
// foo is loaded
});&lt;/p&gt;
&lt;p&gt;But in Browserify we can just put &lt;code&gt;require&lt;/code&gt; calls, and they are made synchronously.&lt;/p&gt;
&lt;p&gt;The disadvantage is that you have to run Browsify after every single change. There are ways to automate this, of course, but it&#39;s still something you&#39;ll have to set up - there are plenty of things like this &lt;a href=&quot;https://github.com/jmreidy/grunt-browserify&quot;&gt;Grunt plugin&lt;/a&gt; that can help with the automation.&lt;/p&gt;
&lt;p&gt;I advise you to have a look at Browserify - I admit that I didn&#39;t expect to like it or find it worthwhile, but having played with it a bit, I think I&#39;ll be using it in the future.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using Browserify with npm modules</title>
    <link href="http://www.jackfranklin.co.uk/blog/backbone-browserify/"/>
    <updated>2013-11-22T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/backbone-browserify/</id>
    <content type="html">&lt;p&gt;Recently I covered &lt;a href=&quot;http://javascriptplayground.com/blog/2013/09/browserify/&quot;&gt;Browserify&lt;/a&gt; in another post, but did not go into much detail. I discussed how to use Browserify with your own modules, but what I didn&#39;t discuss was how Browserify can work with modules that have been published to npm too. In short: you can use Node modules on the client side.&lt;/p&gt;
&lt;p&gt;In this tutorial, using a Backbone app as the example, I&#39;ll show you how to use Browserify to use npm modules, meaning you can use npm to manage your front end dependencies. This example uses Backbone, but you could use this with anything you like. Backbone just happens to be a good example in this case.&lt;/p&gt;
&lt;h3&gt;A Basic Server&lt;/h3&gt;
&lt;p&gt;Firstly, let&#39;s get a basic server running. To do this I like to use the &lt;a href=&quot;http://www.senchalabs.org/connect/&quot;&gt;Connect Module&lt;/a&gt;. First, install it:&lt;/p&gt;
&lt;p&gt;$ npm install --save connect&lt;/p&gt;
&lt;p&gt;Then create &lt;code&gt;index.js&lt;/code&gt; which looks like this:&lt;/p&gt;
&lt;p&gt;var connect = require(&amp;quot;connect&amp;quot;);&lt;/p&gt;
&lt;p&gt;connect.createServer(
connect.static(&amp;quot;app&amp;quot;)
).listen(8080);&lt;/p&gt;
&lt;p&gt;This just creates a very simple server that will serve static assets from the &lt;code&gt;app&lt;/code&gt; directory. Perfect for what we need. You can run it like so:&lt;/p&gt;
&lt;p&gt;node index.js&lt;/p&gt;
&lt;h3&gt;Installing Backbone&lt;/h3&gt;
&lt;p&gt;Now we need to install our front-end libraries. Firstly, Backbone:&lt;/p&gt;
&lt;p&gt;$ npm install --save backbone&lt;/p&gt;
&lt;p&gt;We don&#39;t need to install Underscore, because Backbone has that set as a dependency. If we wanted to use Underscore ourselves, outside of Backbone&#39;s internal usage of the library, we&#39;d have to install it then.&lt;/p&gt;
&lt;h3&gt;Installing jQuery&lt;/h3&gt;
&lt;p&gt;Next, jQuery. In the near future, jQuery will be fully published to npm, but right now the version that is on npm is very out of date. Thankfully the new beta version of jQuery 2.1.0 has just been published, so for now we can install the beta from npm:&lt;/p&gt;
&lt;p&gt;$ npm install jquery@2.1.0-beta2 --save&lt;/p&gt;
&lt;p&gt;In the near future, this will become &lt;code&gt;npm install jquery&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Browserify&lt;/h3&gt;
&lt;p&gt;First, make sure you&#39;ve got Browserify installed:&lt;/p&gt;
&lt;p&gt;$ npm install -g browserify&lt;/p&gt;
&lt;p&gt;Browserify works by taking in a file and walking through all the &lt;code&gt;require&lt;/code&gt; calls within to bundle all your code up into a file that can be used on the front end. Create &lt;code&gt;app/app.js&lt;/code&gt; and put this within:&lt;/p&gt;
&lt;p&gt;var Backbone = require(&amp;quot;backbone&amp;quot;);
var $ = require(&#39;jquery/dist/jquery&#39;);&lt;/p&gt;
&lt;p&gt;Backbone.$ = $;
console.log(Backbone);&lt;/p&gt;
&lt;p&gt;The first thing we do is load in Backbone and jQuery. The odd path to jQuery is due to a &lt;a href=&quot;http://bugs.jquery.com/ticket/14548&quot;&gt;bug in the beta release&lt;/a&gt;, which will be fixed soon. Once it is fixed, you&#39;ll be able to just use &lt;code&gt;require(&amp;quot;jquery&amp;quot;)&lt;/code&gt;. Because Backbone usually sets its &lt;code&gt;$&lt;/code&gt; based on the global environment, we need to set it up ourselves, so we simply set Backbone&#39;s &lt;code&gt;$&lt;/code&gt; property to be jQuery. Then, to prove it&#39;s working, we&#39;ll log out Backbone to the console.&lt;/p&gt;
&lt;p&gt;Create a basic HTML structure to hold our app (&lt;code&gt;app/index.html&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Backbone App&lt;/title&gt;
&lt;script src=&quot;http://www.jackfranklin.co.uk/bundle.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
Hello World
&lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;
&lt;p&gt;Notice that we link to &lt;code&gt;bundle.js&lt;/code&gt; in the HTML. It&#39;s time to generate that. Let&#39;s run Browserify:&lt;/p&gt;
&lt;p&gt;$ browserify app/app.js -o app/bundle.js&lt;/p&gt;
&lt;p&gt;Browserify will create &lt;code&gt;app/bundle.js&lt;/code&gt; with all our dependencies concatenated into one file.&lt;/p&gt;
&lt;h3&gt;Running the app&lt;/h3&gt;
&lt;p&gt;You should now be able to run &lt;code&gt;node index.js&lt;/code&gt;, visit &lt;code&gt;localhost:8080&lt;/code&gt; and see the Backbone object logged to the console. Congratulations! We&#39;ve just made a client-side JS app using npm modules and Browserify.&lt;/p&gt;
&lt;h3&gt;Creating Modules&lt;/h3&gt;
&lt;p&gt;Of course, in a real Backbone app you&#39;ll want to split everything out into its own file, and Browserify can handle that just fine. For example, say I have a simple Book model in &lt;code&gt;app/models/book.js&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;var Backbone = require(&amp;quot;backbone&amp;quot;);&lt;/p&gt;
&lt;p&gt;var Book = Backbone.Model.extend({
defaults: {
title: &amp;quot;A Book&amp;quot;
}
});&lt;/p&gt;
&lt;p&gt;module.exports = Book;&lt;/p&gt;
&lt;p&gt;The key here is the last line, which is used by Node (and consequently, Browserify) to know what to return where another file requires this one. That sets up that our &lt;code&gt;Book&lt;/code&gt; variable should be returned. We can now use this file in &lt;code&gt;app/app.js&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;var Backbone = require(&amp;quot;backbone&amp;quot;);
var $ = require(&#39;jquery/dist/jquery&#39;);
Backbone.$ = $;&lt;/p&gt;
&lt;p&gt;var Book = require(&amp;quot;./models/book&amp;quot;);&lt;/p&gt;
&lt;p&gt;console.log(new Book().get(&amp;quot;title&amp;quot;));&lt;/p&gt;
&lt;p&gt;If you rerun Browserify and start up the server once more, you should see the line &amp;quot;A Book&amp;quot; logged to your console.&lt;/p&gt;
&lt;h3&gt;Minifying Browserify&#39;s Output&lt;/h3&gt;
&lt;p&gt;Browserify by default doesn&#39;t minify the source code. We can get around this by using Uglify JS to do it. First, ensure you&#39;ve got that installed:&lt;/p&gt;
&lt;p&gt;$ npm install uglify-js -g&lt;/p&gt;
&lt;p&gt;Then we can run Browserify, piping the resulting JS through Uglify:&lt;/p&gt;
&lt;p&gt;$ browserify app/app.js | uglifyjs &amp;gt; app/bundle.js&lt;/p&gt;
&lt;p&gt;This takes Browserify&#39;s output and runs it through Uglify before storing that output into &lt;code&gt;bundle.js&lt;/code&gt;. During development, you may not want to do this, but of course on a production environment code should always be minified.&lt;/p&gt;
&lt;h3&gt;Automating Browserify&lt;/h3&gt;
&lt;p&gt;Something you probably noticed is the need to always run Browserify. This is where you might use something like Grunt, or another build mechanism, to watch for file changes and run it for you. I&#39;ll be covering this in the future, but for now I&#39;ll leave that as an exercise for you.&lt;/p&gt;
&lt;h3&gt;The Code&lt;/h3&gt;
&lt;p&gt;The code for this tutorial is available in full &lt;a href=&quot;https://github.com/javascript-playground/backbone-browserify&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope you enjoyed this tutorial, and any questions please do leave a comment.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Getters and Setters</title>
    <link href="http://www.jackfranklin.co.uk/blog/es5-getters-setters/"/>
    <updated>2013-12-23T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/es5-getters-setters/</id>
    <content type="html">&lt;p&gt;For the most part, in JavaScript, what you see is what you get. A value&#39;s a value; there are no tricks. Sometimes however, you want a value that&#39;s based on some other values: someone&#39;s full name, for example, is a concatenation of their first and last names. If you have a &lt;code&gt;person&lt;/code&gt; object, and you want the users of that object to be able to set the full, first or last name, and see that change immediately reflected in the other values, you&#39;d conventionally build it with functions:&lt;/p&gt;
&lt;p&gt;person.setLastName(&#39;Smith&#39;);
person.setFirstName(&#39;Jimmy&#39;);
person.getFullName(); // Jimmy Smith&lt;/p&gt;
&lt;p&gt;But this is ugly, and requires the users of your object to care that the properties are related; in a more complex example, that might not be as obvious as with names. Luckily, there&#39;s a better way, added in ECMAScript 5.&lt;/p&gt;
&lt;p&gt;Meet getters and setters.&lt;/p&gt;
&lt;h3&gt;How&lt;/h3&gt;
&lt;p&gt;Let&#39;s make that person object. We want to be able to set the first name, last name or full name, and have it update the other two automagically.&lt;/p&gt;
&lt;p&gt;var person = {
firstName: &#39;Jimmy&#39;,
lastName: &#39;Smith&#39;,
get fullName() {
return this.firstName + &#39; &#39; + this.lastName;
},
set fullName (name) {
var words = name.toString().split(&#39; &#39;);
this.firstName = words[0] || &#39;&#39;;
this.lastName = words[1] || &#39;&#39;;
}
}&lt;/p&gt;
&lt;p&gt;person.fullName = &#39;Jack Franklin&#39;;
console.log(person.firstName); // Jack
console.log(person.lastName) // Franklin&lt;/p&gt;
&lt;p&gt;So what&#39;s going on here?&lt;/p&gt;
&lt;p&gt;The get and set keywords are important. Following them is the property they relate to (&lt;code&gt;fullName&lt;/code&gt;) and a function body that defines the behaviour when the property is accessed (&lt;code&gt;name = person.fullName&lt;/code&gt;) or modified (&lt;code&gt;person.fullName = &#39;Some Name&#39;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;These two keywords define accessor functions: a getter and a setter for the &lt;code&gt;fullName&lt;/code&gt; property. When the property is accessed, the return value from the getter is used. When a value is set, the setter is called and passed the value that was set. It&#39;s up to you what you do with that value, but what is returned from the setter is the value that was passed in – so you don&#39;t need to return anything.&lt;/p&gt;
&lt;h3&gt;The official way: &lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Along with the inline method of declaring getters and setters, it can also be done more explicitly via &lt;code&gt;Object.defineProperty&lt;/code&gt; (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&quot;&gt;MDN Documentation&lt;/a&gt;). This method takes three arguments. The first is the object to add the property to, the second is the name of the property, and the third is an object that describes the property (known as the property&#39;s &lt;em&gt;descriptor&lt;/em&gt;). Here&#39;s an example that replicates the above example:&lt;/p&gt;
&lt;p&gt;var person = {
firstName: &#39;Jimmy&#39;,
lastName: &#39;Smith&#39;
};&lt;/p&gt;
&lt;p&gt;Object.defineProperty(person, &#39;fullName&#39;, {
get: function() {
return firstName + &#39; &#39; + lastName;
},
set: function(name) {
var words = name.split(&#39; &#39;);
this.firstName = words[0] || &#39;&#39;;
this.lastName = words[1] || &#39;&#39;;
}
});&lt;/p&gt;
&lt;p&gt;The advantage here isn&#39;t immediately apparent. Other than being able to add properties after creating the initial object, is there a real benefit?&lt;/p&gt;
&lt;p&gt;When you define a property this way, you can do much more than just define a setter or getter. You may also pass following keys:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;configurable&lt;/code&gt; (&lt;code&gt;false&lt;/code&gt; by default): if this is true, the property&#39;s configuration will be modifiable in future.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enumerable&lt;/code&gt; (&lt;code&gt;false&lt;/code&gt; by default): if true, the property will appear when looping over the object (&lt;code&gt;for (var key in obj)&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can also define properties that don&#39;t have explicit getters or setters:&lt;/p&gt;
&lt;p&gt;Object.defineProperty(person, &#39;age&#39;, {
value: 42
});&lt;/p&gt;
&lt;p&gt;This will create &lt;code&gt;person.age&lt;/code&gt;, and set it to the value 42. It&#39;s important to note that this property isn&#39;t writable. Calling &lt;code&gt;person.age = 99&lt;/code&gt; will &lt;strong&gt;have no effect&lt;/strong&gt;. In this way you can create read-only properties. If a property has a &lt;code&gt;value&lt;/code&gt; key set, it &lt;strong&gt;cannot&lt;/strong&gt; have a getter or setter. Properties can have values or accessors, not both.&lt;/p&gt;
&lt;p&gt;Not only that, but because the &lt;code&gt;enumerable&lt;/code&gt; property defaults to &lt;code&gt;false&lt;/code&gt;, this property will not appear when we loop over the object&#39;s keys.&lt;/p&gt;
&lt;p&gt;If we wanted to make a property writable, we would need to set the &lt;code&gt;writable&lt;/code&gt; property:&lt;/p&gt;
&lt;p&gt;Object.defineProperty(person, &#39;age&#39;, {
value: 42,
writable: true
});&lt;/p&gt;
&lt;p&gt;Now, &lt;code&gt;person.age = 99;&lt;/code&gt; will have the desired effect.&lt;/p&gt;
&lt;h3&gt;Overuse&lt;/h3&gt;
&lt;p&gt;Remember: just because a feature exists, it doesn&#39;t need to be used all the time. Getters and Setters have their use cases, but don&#39;t go over the top, or you&#39;ll most likely end up with a design that&#39;s confusing for those interacting with your objects. Used carefully, they&#39;re very powerful. But with great power comes great responsibility.&lt;/p&gt;
&lt;h3&gt;Browser support?&lt;/h3&gt;
&lt;p&gt;IE9 and above have full support for &lt;code&gt;Object.defineProperty&lt;/code&gt;, along with Safari 5+, Firefox 4+, Chrome 5+ and Opera 12+. If you’re working with Node.js, there&#39;s full support. Don&#39;t you just love Node?!&lt;/p&gt;
&lt;p&gt;This article was co-authored with &lt;a href=&quot;http://twitter.com/phuunet&quot;&gt;Tom Ashworth&lt;/a&gt;. Thanks to Tom for all his help putting this together.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2013 in Review</title>
    <link href="http://www.jackfranklin.co.uk/blog/2013-in-review/"/>
    <updated>2014-01-01T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/2013-in-review/</id>
    <content type="html">&lt;p&gt;Last year &lt;a href=&quot;http://www.jackfranklin.co.uk/blog/2013/01/2012-in-review/&quot;&gt;I wrote a post about the JS Playground in 2012&lt;/a&gt;, and I thought it would be nice to write a similar one reviewing 2013.&lt;/p&gt;
&lt;p&gt;So, I delved into Google Analytics and did some snooping.&lt;/p&gt;
&lt;h3&gt;Visitors&lt;/h3&gt;
&lt;p&gt;The site had 153,771 visits, from 109,282 unique visitors. This is slightly more than in 2012, which had 104,280 uniques, but then again the site only existed from April 2012, so it&#39;s not exactly fair to compare.&lt;/p&gt;
&lt;p&gt;There were 221,217 pageviews, which is actually &lt;em&gt;less&lt;/em&gt; than the 246,878 achieved in the 9 months of 2012. This reflects the fact that the posting rate has dropped significantly in 2013, for reasons I&#39;ll discuss later. 70.25% of the visits were new visits.&lt;/p&gt;
&lt;h3&gt;Browsers&lt;/h3&gt;
&lt;p&gt;Unsurprisingly given its content, Chrome was the most popular browser by some way. Of the 153,771 visits, Chrome made up a huge 104,169 of them. Second was Firefox with 25,654, then Safari with 13,927. Internet Explorer accounted for just 3,886 visits.&lt;/p&gt;
&lt;h3&gt;Blogging&lt;/h3&gt;
&lt;p&gt;There were &lt;strong&gt;31&lt;/strong&gt; new blog posts in 2013. This is down hugely from &lt;strong&gt;44&lt;/strong&gt; in 2012, and is a large reason in my mind that the site hasn&#39;t quite continued to grow as I would have liked. I put this down partly to writing a book, although that was finished by February 2013, and down to transitioning at work into doing a lot more Ruby work (I was primarily a Ruby developer), and doing little JavaScript daily. This didn&#39;t give me tonnes of ideas for content. In the second half of 2013, my University studies really took over any time I would usually dedicate to JavaScript Playground.&lt;/p&gt;
&lt;p&gt;Back in 2012 I said I was hoping for 4 posts per month in 2013, which I fell well short of. I am hoping that 2014 should be a bit calmer, but given that the first 6 months will be spent finishing a Computer Science degree, we&#39;ll see.&lt;/p&gt;
&lt;h3&gt;Thanks and Goals&lt;/h3&gt;
&lt;p&gt;As always, a huge thanks to everyone who shares the articles online, it&#39;s hugely appreciated. I&#39;ve also managed to get some other people to contribute to the post, so thanks to &lt;a href=&quot;http://twitter.com/phuu&quot;&gt;Tom Ashworth&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/javorszky&quot;&gt;Gabor Javorszky&lt;/a&gt; for their contributions. I would like to have more guests writing in 2014 (partly to try to up that blog post rate!), so if you&#39;d like to contribute, please drop me a line.&lt;/p&gt;
&lt;p&gt;Thanks also to the duo of &lt;a href=&quot;http://twitter.com/benhowdle&quot;&gt;Ben Howdle&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/martinbean&quot;&gt;Martin Bean&lt;/a&gt;, who were responsible for the lovely new design. Ben did the design, and Martin converted it into HTML and CSS. Many thanks to the both of you :)&lt;/p&gt;
&lt;p&gt;As for goals, the main one is to hit 500,000 visits before the JavaScript Playground turns 2 years old, which is on April 8th. The site currently sits on 460k, so I hope that if I can get a few posts out we can hit 500k+.&lt;/p&gt;
&lt;h3&gt;Most Popular Posts&lt;/h3&gt;
&lt;p&gt;The posts that got the most visits in 2013 were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jackfranklin.co.uk/blog/2012/07/requirejs-amd-tutorial-introduction/&quot;&gt;An introduction to RequireJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jackfranklin.co.uk/blog/2013/06/refactoring-js/&quot;&gt;Refactoring DOM Heavy JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jackfranklin.co.uk/blog/2012/05/javascript-templating-handlebars-tutorial/&quot;&gt;Templating with Handlebars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jackfranklin.co.uk/blog/2012/04/javascript-variable-scope-this/&quot;&gt;Scope and this in JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jackfranklin.co.uk/blog/2013/02/express-backbone-application-part1/&quot;&gt;ExpressJS and Backbone: Part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Topics&lt;/h3&gt;
&lt;p&gt;As always, I am always more than welcome to suggestions for topics, a particular library you&#39;d like me to write about, anything that you&#39;re struggling with or something you&#39;d like to see clarified. Please get in touch, and here&#39;s to 2014! Thanks as always for reading.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>An introduction to Gulp</title>
    <link href="http://www.jackfranklin.co.uk/blog/an-intro-to-gulp/"/>
    <updated>2014-02-07T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/an-intro-to-gulp/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/wearefractal/gulp&quot;&gt;Gulp&lt;/a&gt; has been doing the rounds recently online through Twitter as an alternative to Grunt in the JS build tooling space. Whilst I am a huge fan of Grunt, looking at other options never hurts, so I thought a quick introduction to Gulp might be fun to do.&lt;/p&gt;
&lt;p&gt;Gulp works with Node streams. Whereas Gruntfiles can often become very difficult to maintain and large, Gulp tries to avoid too much configuration and keep things simple. The base idea is that you glob for some files, and pipe them through a plugin, changing the output in some way or another. If you need a refresher on streams, the &lt;a href=&quot;https://github.com/substack/stream-handbook&quot;&gt;Streams handbook&lt;/a&gt; is the best place to go.&lt;/p&gt;
&lt;p&gt;You install Gulp just like you&#39;d expect, through npm:&lt;/p&gt;
&lt;p&gt;$ npm install -g gulp&lt;/p&gt;
&lt;p&gt;Much like Grunt looks for a Gruntfile, Gulp will look for a file called &lt;code&gt;Gulpfile.js&lt;/code&gt;. You&#39;ll also need to install Gulp locally in the project too:&lt;/p&gt;
&lt;p&gt;$ npm install --save-dev gulp&lt;/p&gt;
&lt;p&gt;Gulp comes with a very minimal set of tools, and everything else comes in the form of plugins. We&#39;re going to use the &lt;a href=&quot;https://github.com/wearefractal/gulp-jshint&quot;&gt;JSHint plugin&lt;/a&gt;, so let&#39;s install that too:&lt;/p&gt;
&lt;p&gt;$ npm install --save-dev gulp-jshint&lt;/p&gt;
&lt;p&gt;Now we&#39;re ready to write our &lt;code&gt;Gulpfile.js&lt;/code&gt;. It starts off by requiring gulp and jshint:&lt;/p&gt;
&lt;p&gt;var gulp = require(&amp;quot;gulp&amp;quot;);
var jshint = require(&amp;quot;gulp-jshint&amp;quot;);&lt;/p&gt;
&lt;p&gt;Whereas with Grunt we have to call &lt;code&gt;initConfig&lt;/code&gt;, passing in a huge object full of configuration, in Gulp we define tasks by calling &lt;code&gt;gulp.task&lt;/code&gt;. This takes two arguments, the name of a task, and a function which will be run when you call that task. In the case of Grunt, most plugins will define a task for you (For example, the Grunt JSHint plugin defines the &lt;code&gt;grunt jshint&lt;/code&gt; task for you), but in gulp plugins just provide methods to hook into. The tasks are all defined by you.&lt;/p&gt;
&lt;p&gt;Let&#39;s look at an example of a task. Here I&#39;ve written a &amp;quot;lint&amp;quot; task that will run JSHint against all files in the root of the &lt;code&gt;src/&lt;/code&gt; directory:&lt;/p&gt;
&lt;p&gt;gulp.task(&amp;quot;lint&amp;quot;, function() {
gulp.src(&amp;quot;./src/*.js&amp;quot;)
.pipe(jshint())
.pipe(jshint.reporter(&amp;quot;default&amp;quot;));
});&lt;/p&gt;
&lt;p&gt;Firstly, &lt;code&gt;gulp.src&lt;/code&gt; will return a representation of files that match the glob, that can be piped directly into plugins. Hence, we can take all those files and pipe them directly into &lt;code&gt;jshint()&lt;/code&gt;, which is the function made available by the &lt;code&gt;gulp-jshint&lt;/code&gt; plugin. This runs each file one by one through JSHint, and we then pipe the result of that through to the JSHint reporter, which is responsible for showing us the results.&lt;/p&gt;
&lt;p&gt;We can now run &lt;code&gt;gulp lint&lt;/code&gt; to see the result of this:&lt;/p&gt;
&lt;p&gt;git/jsplayground/gulp-intro gulp lint
[gulp] Using file /Users/jackfranklin/git/jsplayground/gulp-intro/Gulpfile.js
[gulp] Working directory changed to /Users/jackfranklin/git/jsplayground/gulp-intro
[gulp] Running &#39;lint&#39;...
[gulp] Finished &#39;lint&#39; in 0.004 seconds&lt;/p&gt;
&lt;p&gt;And if I make a file break a JSHint rule (such as missing a semi-colon), I&#39;ll see this:&lt;/p&gt;
&lt;p&gt;[gulp] Using file /Users/jackfranklin/git/jsplayground/gulp-intro/Gulpfile.js
[gulp] Working directory changed to /Users/jackfranklin/git/jsplayground/gulp-intro
[gulp] Running &#39;lint&#39;...
[gulp] Finished &#39;lint&#39; in 0.006 seconds
./src/one.js: line 1, col 29, Missing semicolon.&lt;/p&gt;
&lt;p&gt;1 error&lt;/p&gt;
&lt;p&gt;Gulp also has a default task, which will run when you run just &lt;code&gt;gulp&lt;/code&gt; on your command line:&lt;/p&gt;
&lt;p&gt;gulp.task(&amp;quot;default&amp;quot;, [&amp;quot;lint&amp;quot;]);&lt;/p&gt;
&lt;p&gt;Here I set up the default task to just run our &amp;quot;lint&amp;quot; task.&lt;/p&gt;
&lt;p&gt;We can also add a &lt;code&gt;watch&lt;/code&gt; task that will automatically run specific tasks when specific files change:&lt;/p&gt;
&lt;p&gt;gulp.task(&#39;watch&#39;, function() {
gulp.watch(&amp;quot;src/*.js&amp;quot;, [&amp;quot;lint&amp;quot;]);
});&lt;/p&gt;
&lt;p&gt;Now you can run &lt;code&gt;gulp watch&lt;/code&gt; in your command line, and the lint task will run whenever a JS file within the &lt;code&gt;src&lt;/code&gt; directory changes.&lt;/p&gt;
&lt;p&gt;Now, the big question here is which is best, Gulp or Grunt? The answer, as always, is that &lt;em&gt;it depends&lt;/em&gt;. I think it&#39;s good for more than one tool to occupy this space, for a while it was only Grunt, but now for there to be more than one tool to choose between is good. As for which is superior, that very much depends, not only on the project but also on your personal preference. A lot of people have been drawn to Gulp due to the fact that it feels more like just writing JavaScript, whereas Grunt takes the approach of configuration over code, and nearly all code written in a Gruntfile is settings for plugins. If you&#39;ve not tried either, I advise you to try out both before making a decision, and I&#39;m also excited to see how they develop over time.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Pub Sub with Event Emitter</title>
    <link href="http://www.jackfranklin.co.uk/blog/event-emitter/"/>
    <updated>2014-03-05T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/event-emitter/</id>
    <content type="html">&lt;p&gt;I&#39;m a big fan of the Pub Sub (Publish, Subscribe) design pattern, and it&#39;s one that I tend to reach for often. I&#39;ve &lt;a href=&quot;http://www.jackfranklin.co.uk/blog/2012/04/a-jquery-pub-sub-implementation/&quot;&gt;written previously&lt;/a&gt; about it, but that was using jQuery and was frontend specific. Today I&#39;d like to swap and look at using this pattern in Node.js environments.&lt;/p&gt;
&lt;p&gt;The idea behind the Pub Sub approach is that objects can publish events, and data associated with those events. Other objects (or the same one) can then subscribe to those events, and be notified when those events occur, and gain access to the data in the event too.&lt;/p&gt;
&lt;p&gt;The reason that this is a good thing is because it keeps modules decoupled. Module A can subscribe to the events Module B publishes, and vice versa, without the other one knowing that they have. The less an individual module knows about other modules, the better.&lt;/p&gt;
&lt;p&gt;It&#39;s nice and straight forward using Node&#39;s EventEmitter class, too:&lt;/p&gt;
&lt;p&gt;var EventEmitter = require(&#39;events&#39;).EventEmitter;&lt;/p&gt;
&lt;p&gt;var server = new EventEmitter();&lt;/p&gt;
&lt;p&gt;server.on(&#39;foo&#39;, function() {
console.log(&#39;got foo&#39;);
});&lt;/p&gt;
&lt;p&gt;server.emit(&#39;foo&#39;);&lt;/p&gt;
&lt;p&gt;In a system with multiple modules, I&#39;ve taken the approach of passing in my EventEmitter instance when creating my modules:&lt;/p&gt;
&lt;p&gt;var emitter = new EventEmitter();&lt;/p&gt;
&lt;p&gt;moduleA.init({
emitter: emitter
});&lt;/p&gt;
&lt;p&gt;moduleB.init({
emitter: emitter
});&lt;/p&gt;
&lt;p&gt;That way the two can publish and subscribe to the same instance.&lt;/p&gt;
&lt;p&gt;We can also create modules that inherit from the EventEmitter. This means that you can call EventEmitter methods like &lt;code&gt;on&lt;/code&gt; and &lt;code&gt;emit&lt;/code&gt; directly on your own modules:&lt;/p&gt;
&lt;p&gt;var EventEmitter = require(&#39;events&#39;).EventEmitter;
var util = require(&#39;util&#39;);&lt;/p&gt;
&lt;p&gt;var ModuleA = function() {
this.init();
};&lt;/p&gt;
&lt;p&gt;util.inherits(ModuleA, EventEmitter);&lt;/p&gt;
&lt;p&gt;ModuleA.prototype.init = function() {
this.on(&#39;done&#39;, function() {
console.log(&#39;done&#39;);
});
}&lt;/p&gt;
&lt;p&gt;ModuleA.prototype.doSomething = function() {
this.emit(&#39;done&#39;);
};&lt;/p&gt;
&lt;p&gt;var foo = new ModuleA();
foo.doSomething(); // =&amp;gt; logs &#39;done&#39;&lt;/p&gt;
&lt;p&gt;To do this, we can use Node&#39;s &lt;code&gt;util.inherits&lt;/code&gt;, which will in this case cause &lt;code&gt;ModuleA&lt;/code&gt; to inherit from &lt;code&gt;EventEmitter&lt;/code&gt;. Notice we can then call &lt;code&gt;this.on&lt;/code&gt; and &lt;code&gt;this.emit&lt;/code&gt; from within &lt;code&gt;ModuleA&lt;/code&gt;. This is a nice pattern to use if you&#39;ve got a module that&#39;s going to be firing a lot of events. You may chose to create your own EventEmitter object that extends Node&#39;s and adds some extra shared functionality relevant to the context of your application. As an additional bonus, you can also use Browserify on this code and run it in the browser, so if you&#39;re building a front end app and would like to use EventEmitters, you can.&lt;/p&gt;
&lt;p&gt;I highly encourage you to play with EventEmitters and the publish and subscribe pattern; once you&#39;re comfortable with it I find it&#39;s a great way to keep your code organised, decoupled and extensible with very little effort.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Embracing Command Line Tooling with Backbone Applications</title>
    <link href="http://www.jackfranklin.co.uk/blog/command-line-backbone-yeoman/"/>
    <updated>2014-03-31T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/command-line-backbone-yeoman/</id>
    <content type="html">&lt;p&gt;In this article I&#39;ll take you through how we can use command line tools such as &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt;, &lt;a href=&quot;http://bower.io/&quot;&gt;Bower&lt;/a&gt; and &lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt; to speed up our typical development workflow. Today I&#39;ll be using the example of a Backbone application, but it&#39;s easily applied to any other type of front-end application or web site you might be building.&lt;/p&gt;
&lt;p&gt;The use of tools on the command line has really increased over the past two years, particularly when it comes to tools for working on the front-end. We&#39;ve seen the rise of Node.js, enabling us to run JavaScript on the command line which consequently has seen developers write scripts to automate part of their workflow. You may already use some of these tools to run preprocessors such as &lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt;, &lt;a href=&quot;http://lesscss.org/&quot;&gt;LESS&lt;/a&gt;, &lt;a href=&quot;http://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt; or another.&lt;/p&gt;
&lt;p&gt;Embracing a tool like Yeoman lets you move away from a lot of the manual lifting that comes with setting up and then working on a project. For example, until I used Yeoman I would often create new projects from scratch; creating the folder structure, creating my initial JavaScript files and downloading any resources I needed manually by finding them online. Not only does this take time, but it&#39;s something us developers have to do so frequently, that it&#39;s silly not to automate this. Yeoman will set this up for you, along with a lot else. Things like upgrading to the latest version of a library, or minifying your JavaScript before deployment, can be done in an instant with a proper tool chain.&lt;/p&gt;
&lt;p&gt;Today we&#39;ll be using the modern workflow as defined on the &lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman site&lt;/a&gt;. This consists of three parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Yo&lt;/strong&gt;. Yo is the tool built by the Yeoman team to quickly generate a project and scaffolding out a new application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bower&lt;/strong&gt;. Bower is used for managing dependencies, so there&#39;s no longer any need to manually download library source files yourself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Grunt&lt;/strong&gt;. Grunt is a JavaScript task runner and contains tasks for running your app&#39;s tests, building a minified and ready for deployment version of your app, and much more that we&#39;ll see shortly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Yo&lt;/h2&gt;
&lt;p&gt;Before we can look at how Bower and Grunt work, we need to have a sample project to use. Thankfully, this is where Yo is perfect. To install Yo, you&#39;ll need to have NodeJS, npm (which usually comes as part of Node) and Git installed. You can install NodeJS through the installer on the &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS website&lt;/a&gt;. This also installs npm, the node package manager, for you. Similarly, you can install Git from the &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git website&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Installing Yo&lt;/h3&gt;
&lt;p&gt;Once you&#39;ve got that far, it&#39;s time to install Yo. Yo is a node module which we install via npm. It will provide us with a command line program that we can use to scaffold new applications. The first thing to do is load up your terminal and run:&lt;/p&gt;
&lt;p&gt;$ npm install --global yo&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;--global&lt;/code&gt; flag instructs npm to install the module &lt;em&gt;globally&lt;/em&gt;. By installing it globally, it will be available to use from everywhere on your machine, so you can run &lt;code&gt;yo&lt;/code&gt; regardless of the directory you are currently in. When you run that command you&#39;ll get a whole load of output, but once it&#39;s done Yo will be installed. To test it, run this command:&lt;/p&gt;
&lt;p&gt;$ yo --version
1.1.2&lt;/p&gt;
&lt;p&gt;If you see that, you can be confident that Yeoman is installed properly.&lt;/p&gt;
&lt;h3&gt;Generators&lt;/h3&gt;
&lt;p&gt;Generators are at the heart of Yo - they are what you run run to generate files and folders for projects. Yo doesn&#39;t come with any generators by default, but there are a vast number available that are &lt;a href=&quot;http://yeoman.io/community-generators.html&quot;&gt;listed on the Yeoman site&lt;/a&gt;. In this article we&#39;re going to use the Backbone generator. The Backbone generator is on &lt;a href=&quot;https://github.com/yeoman/generator-backbone&quot;&gt;Github&lt;/a&gt; and, just like Yo, is installed through npm. You can install it by running this command on your command line:&lt;/p&gt;
&lt;p&gt;$ npm install --global generator-backbone&lt;/p&gt;
&lt;p&gt;However, before we run the Backbone generator, let&#39;s see what happens if you simply run &lt;code&gt;yo&lt;/code&gt; on your command line. You&#39;ll see Yo give you a prompt, asking you what to do. It will list the generators you have installed, allow you to update your generators, search for a new generator, or get some help. If you ever forget what generators you have available, or want to update your installed generators, the &lt;code&gt;yo&lt;/code&gt; command is the easiest way to do this.&lt;/p&gt;
&lt;h3&gt;Yo Backbone&lt;/h3&gt;
&lt;p&gt;Yo will detect that the generator has been installed and we can now use it. So let&#39;s scaffold our new application! Create a new directory to host your application and navigate into it with this command:&lt;/p&gt;
&lt;p&gt;$ mkdir my-new-project &amp;amp;&amp;amp; cd $_&lt;/p&gt;
&lt;p&gt;Then run this command in your terminal:&lt;/p&gt;
&lt;p&gt;$ yo backbone library&lt;/p&gt;
&lt;p&gt;Yo will then prompt you to ask if you&#39;d like any other functionality. It will ask if you&#39;d like Twitter Bootstrap for Sass, CoffeeScript or RequireJS. To select these options, navigate up and down with your arrow keys and hit &#39;space&#39; to select the item. For the purposes of this tutorial, I&#39;m going to keep it simple and not use any extras.&lt;/p&gt;
&lt;p&gt;Once you&#39;re happy, hit &#39;enter&#39;. You&#39;ll see a whole load of output to your terminal as the generator creates the necessary files and folders. It will then run &lt;code&gt;npm install&lt;/code&gt; and install Grunt and Bower too, which we will look at in more detail shortly.&lt;/p&gt;
&lt;h3&gt;Other Generators&lt;/h3&gt;
&lt;p&gt;If you like the look of Yeoman but don&#39;t do much work with Backbone, don&#39;t worry, there&#39;s a huge list of generators out there, including ones for building &lt;a href=&quot;https://github.com/yeoman/generator-chromeapp#readme&quot;&gt;Chrome Apps&lt;/a&gt;, &lt;a href=&quot;https://github.com/yeoman/generator-angular#readme&quot;&gt;AngularJS&lt;/a&gt; and &lt;a href=&quot;https://github.com/yeoman/generator-ember#readme&quot;&gt;EmberJS&lt;/a&gt;, to name just a couple. The &lt;a href=&quot;http://yeoman.io/community-generators.html&quot;&gt;generators list&lt;/a&gt; previously linked is the best resource for finding a generator to fit your needs.&lt;/p&gt;
&lt;h3&gt;The Generated Code&lt;/h3&gt;
&lt;p&gt;A lot happened there so let&#39;s step through it, firstly by looking at the files that were created.&lt;/p&gt;
&lt;p&gt;You&#39;ll see that the following directories have been created:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;test/&lt;/code&gt; - this is where all your tests will go&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app/&lt;/code&gt; - this houses the main code in your application. It contains the Bower dependencies, images, CSS and most importantly a &lt;code&gt;scripts/&lt;/code&gt; folder, which is where most of your JavaScript should go.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node_modules&lt;/code&gt; - when &lt;code&gt;npm&lt;/code&gt; is used to install the dependencies listed in &lt;code&gt;package.json&lt;/code&gt;, this is where they will be installed to. You can typically ignore this folder - you should never have to directly interact withit yourself.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Along with those main directories it&#39;s also created some important files, the three most important of which are in the root directory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bower.json&lt;/code&gt; - this is where the Bower dependencies are listed. As you can see, by default we have a few dependencies:&lt;/p&gt;
&lt;p&gt;{
&amp;quot;name&amp;quot;: &amp;quot;app&amp;quot;,
&amp;quot;version&amp;quot;: &amp;quot;0.0.0&amp;quot;,
&amp;quot;dependencies&amp;quot;: {
&amp;quot;jquery&amp;quot;: &amp;quot;~2.1.0&amp;quot;,
&amp;quot;underscore&amp;quot;: &amp;quot;~1.6.0&amp;quot;,
&amp;quot;backbone&amp;quot;: &amp;quot;~1.1.0&amp;quot;,
&amp;quot;modernizr&amp;quot;: &amp;quot;~2.7.1&amp;quot;
},
&amp;quot;devDependencies&amp;quot;: {}
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When &lt;code&gt;bower install&lt;/code&gt; was run earlier, it downloaded jQuery, Underscore, Backbone and Modernizr for us, matching the version numbers specified above. If you find yourself needing another JS library, you should add it here and let Bower do the hard work of downloading it for you.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; - just like the &lt;code&gt;bower.json&lt;/code&gt; file names the JS dependencies, &lt;code&gt;package.json&lt;/code&gt; does the same for any Node dependencies. If you take a look, you&#39;ll see that there are a lot of Grunt plugins. These are all used with Grunt to create the build process for building and distributing our app.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Gruntfile.js&lt;/code&gt; - there is a lot going on here! Grunt is a JavaScript task runner and its tasks and plugins are configured in the Gruntfile. There is a lot going on here but this sets up our task runner for us. In a moment we will look at the tasks available and what they do.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&#39;s also some other files here that you might not have noticed because they start with a &lt;code&gt;.&lt;/code&gt;, and your editor may be hiding them. These are important:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.bowerrc&lt;/code&gt; - this is used to configure Bower. It contains a JSON object of configuration. The only code in the file sets the directory to which Bower will download the dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.editorconfig&lt;/code&gt; - this is a file used to configure your editor. It&#39;s part of &lt;a href=&quot;http://editorconfig.org/&quot;&gt;EditorConfig&lt;/a&gt;, which is designed to be an easy way for developers to use the same code settings, such as spaces/tabs and size of tabs, in a project. If you have the &lt;a href=&quot;http://editorconfig.org/#download&quot;&gt;EditorConfig plugin&lt;/a&gt; for your editor (Vim, Sublime Text, Notepad++, Emacs, and many more), your editor will update its settings to match the ones in this file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.jshintrc&lt;/code&gt; - the Yeoman generator adds in &lt;a href=&quot;http://www.jshint.com/&quot;&gt;JSHint&lt;/a&gt;, a code linter and quality checker, so we can check our code. Grunt has a task for JSHint, so we can run &lt;code&gt;grunt jshint&lt;/code&gt; to check our code. The settings JSHint will use when checking our code are defined in this file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Building an Application&lt;/h2&gt;
&lt;p&gt;Let&#39;s get to work on the application. It&#39;s going to be a simple library app, and the bit we&#39;ll build today will show a list of books in our library. First, we can see the application running. In your terminal, run &lt;code&gt;grunt serve&lt;/code&gt; and visit &lt;code&gt;http://localhost:9000&lt;/code&gt;. Bring up the console too, and you should see something that looks like below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/img/yobb-image3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you see this, Yeoman has set everything up properly and we&#39;re all ready to build our application.&lt;/p&gt;
&lt;p&gt;Hint: the &lt;code&gt;grunt serve&lt;/code&gt; task is set up to automatically refresh when it detects changes, so I suggest leaving it running in another tab, rather than stopping and starting it all the time.&lt;/p&gt;
&lt;h3&gt;Generating a Model&lt;/h3&gt;
&lt;p&gt;Previously we used the &lt;code&gt;yo backbone&lt;/code&gt; command to generate an entire Backbone application, but we can also use it to generate just specific components. Here, we can generate our book model:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yo backbone:model book
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create the file &lt;code&gt;app/scripts/models/book.js&lt;/code&gt;, which looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*global app, Backbone*/&lt;/span&gt;&lt;br&gt;&lt;br&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Models &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Models &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BookModel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Backbone&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice it attaches onto the &lt;code&gt;app&lt;/code&gt; global which is created within the &lt;code&gt;scripts/main.js&lt;/code&gt; file. Our &lt;code&gt;app&lt;/code&gt; object contains a blank object called &lt;code&gt;Models&lt;/code&gt; too, so we add &lt;code&gt;BookModel&lt;/code&gt; into that. Grunt takes care of loading this file in too, so we don&#39;t have to worry about that.&lt;/p&gt;
&lt;h3&gt;Testing a Model&lt;/h3&gt;
&lt;p&gt;Yeoman sets up everything you need to get started testing your Backbone entities. Let&#39;s write some tests for our new model. Load up &lt;code&gt;test/index.html&lt;/code&gt;, and add in &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags to load your application files. While we&#39;re here, I&#39;ll also add a &lt;code&gt;script&lt;/code&gt; tag for our spec file, which we&#39;ll create in a minute. Your &lt;code&gt;index.html&lt;/code&gt; file should look like so:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;doctype&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;utf-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;X-UA-Compatible&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;IE=edge,chrome=1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Mocha Spec Runner&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;lib/mocha/mocha.css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;mocha&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;lib/mocha/mocha.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;mocha&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;bdd&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- assertion framework --&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;lib/chai.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; expect &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; chai&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;expect&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bower_components/jquery/jquery.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bower_components/underscore/underscore.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bower_components/backbone/backbone.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- include source files here... --&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;../scripts/main.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;../scripts/models/book.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- include spec files here... --&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;spec/book_model.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;mocha&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&#39;s write our test. Create the file &lt;code&gt;test/spec/book_model.js&lt;/code&gt; and add write your test. You&#39;ll need to leave some comments at the top to tell JSHint which variables it should expect to be global too. For now, we&#39;ll write the typical starting test, and make sure 2 + 2 really is 4.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*global describe, it, app */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token string&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;BookModel&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;should pass&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you should be able to run &lt;code&gt;grunt test&lt;/code&gt; on your command line and see that you have 1 spec which is passing! Just for completeness&#39; sake, change &lt;code&gt;4&lt;/code&gt; to &lt;code&gt;5&lt;/code&gt; and run it again. You&#39;ll see this time you get a failure reported. Grunt&#39;s &lt;code&gt;test&lt;/code&gt; command is used in the default Grunt command which Yeoman set up for us, so it&#39;s impossible to ever fully build your app if the tests aren&#39;t working. I won&#39;t explictly talk about testing and what tests to write, but I encourage you to write tests as you develop.&lt;/p&gt;
&lt;h3&gt;Building the app&lt;/h3&gt;
&lt;p&gt;Let&#39;s continue on and define some properties in our model. I&#39;m expecting each book to have a &lt;code&gt;title&lt;/code&gt; and an &lt;code&gt;author&lt;/code&gt; property, and as such I&#39;d like to define a summary method, which returns a string summarising the book. It&#39;s effectively just the title and the author, joined with the word &amp;quot;by&amp;quot;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*global app, Backbone*/&lt;/span&gt;&lt;br&gt;&lt;br&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Models &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Models &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BookModel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Backbone&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function-variable function&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;title&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; by &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;author&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can write a test too, to make sure the summary method returns what we expect:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;BookModel&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;should have a summary method&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; book &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BookModel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;JavaScript: The Good Parts&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Douglas Crockford&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string&quot;&gt;&#39;JavaScript: The Good Parts by Douglas Crockford&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running &lt;code&gt;grunt test&lt;/code&gt; confirms the good news, we&#39;re all green! Now we can write a view so we can start to display this information on screen. Just like with our model, we can use Yeoman to generate it for us:&lt;/p&gt;
&lt;p&gt;yo backbone:view book&lt;/p&gt;
&lt;p&gt;This creates two files. The first is &lt;code&gt;scripts/views/book.js&lt;/code&gt;, which contains the boilerplate around our book:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*global app, Backbone, JST*/&lt;/span&gt;&lt;br&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Views &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Views &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Views&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BookView &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Backbone&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;View&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JST&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;app/scripts/templates/book.ejs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice, however, that it links to another file, a template. If you head to &lt;code&gt;scripts/templates/book.ejs&lt;/code&gt;, you&#39;ll see the following:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;Your content here.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;What&#39;s happening here is that Yeoman has made us a template, and it also has configured a Grunt task to manage these templates. It will compile the templates and inline them before your app runs. This is why we can refer to it within our view as &lt;code&gt;JST[&#39;app/scripts/templates/book.ejs&#39;]&lt;/code&gt;. The Grunt task will create a global &lt;code&gt;JST&lt;/code&gt; object containing our templates.&lt;/p&gt;
&lt;p&gt;Now we&#39;ll write a &lt;code&gt;render&lt;/code&gt; method for our book view, and then get something appearing in the browser.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*global app, Backbone, JST*/&lt;/span&gt;&lt;br&gt;&lt;br&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Views &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Views &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Views&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BookView &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Backbone&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;View&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JST&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;app/scripts/templates/book.ejs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function-variable function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; html &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;attributes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;html&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our &lt;code&gt;render&lt;/code&gt; method is very straight forward. It compiles the template by passing in the attributes of the model, then sets the HTML content of the view&#39;s element, before returning the view itself. Now we have this set up, we can render it on the page! Head to &lt;code&gt;scripts/main.js&lt;/code&gt; and add in some code to get everything going:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* global app*/&lt;/span&gt;&lt;br&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;Models&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;Views&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;Routers&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; book &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BookModel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;JavaScript The Good Parts&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Douglas Crockford&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; view &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;this&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Views&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BookView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; book &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;body&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;view&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we just create a new book and a new view instance. We pass that book into the view instance, and then append it to the body.&lt;/p&gt;
&lt;p&gt;Now for the moment of truth. Run &lt;code&gt;grunt server&lt;/code&gt; again and examine the resulting web page. You should see the text &amp;quot;Your content here&amp;quot; on the left hand side:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/img/yobb-image4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;That&#39;s great! It means that the view was rendered, it correctly used the template and grabbed the content. Let&#39;s change the template to the following:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&amp;lt;%= title %&amp;gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The opening &lt;code&gt;&amp;lt;%=&lt;/code&gt; and closing &lt;code&gt;%&amp;gt;&lt;/code&gt; signify to the templating engine that it should replace them with the value of the variable within them. When we compile the template we pass in the model&#39;s attributes, one of which is &lt;code&gt;title&lt;/code&gt;. If you go back to your browser, you&#39;ll see that it does indeed output &amp;quot;JavaScript The Good Parts&amp;quot;.&lt;/p&gt;
&lt;p&gt;Finally, let&#39;s use the &lt;code&gt;summary&lt;/code&gt; method we wrote earlier. To do this, we need to make one quick change to the book model. We need to add an &lt;code&gt;initialize&lt;/code&gt; method, which is called when we create the model, that will set a &lt;code&gt;summary&lt;/code&gt; attribute:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;summary&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then update our template to simply be:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&amp;lt;%= summary %&amp;gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;If you go back to your browser and refresh, you should see the new content.&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;I hope you&#39;ve seen in this tutorial the power that Yeoman can provide, and the time saved for rapidly getting a new project up and running. It can take some time to get used to the Yeoman mindset, but once you&#39;re comfortable harnessing the power of Yeoman, its generators and the Grunt configuration it creates, you can save yourself a huge amount of time.&lt;/p&gt;
&lt;p&gt;If you&#39;d like to go further into the world of Yeoman, the below resources should provide you with all you need.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yeoman.io/&quot;&gt;The Yeoman.io site&lt;/a&gt;. This should always be your starting point. There&#39;s plenty of documentation, help and links to other resources available.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/yeoman&quot;&gt;GitHub&lt;/a&gt;. If you happen to stumble upon a bug in Yeoman or a generator, the best place to report that is on the relevant GitHub repository. It&#39;s also a good place to see if the issue you&#39;ve found is already known.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/yeoman&quot;&gt;@yeoman&lt;/a&gt;. For the latest updates, new generators and other information, the Yeoman Twitter account is definitely worth following. Similarly, there is also the &lt;a href=&quot;https://plus.google.com/101063139999404044459&quot;&gt;Yeoman community&lt;/a&gt; on Google Plus.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Thanks to Addy Osmani, Sindre Sorhus and Pascal Hartig for their help reviewing and tweaking this article.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Real Life ES6 - Arrow Functions</title>
    <link href="http://www.jackfranklin.co.uk/blog/real-life-es6-arrow-fn/"/>
    <updated>2014-04-22T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/real-life-es6-arrow-fn/</id>
    <content type="html">&lt;p&gt;Some of the features soon to be at our fingertips with the growing support for ECMAScript 6 are absolutely fantastic, but often examples shown online are contrived. In this series of blog posts, we&#39;ll pick out a few ES6 features and show you some real code that&#39;s improved with new features of the language.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post was written in collaboration with &lt;a href=&quot;http://twitter.com/adamyeats&quot;&gt;Adam Yeats&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Support&lt;/h2&gt;
&lt;p&gt;ES6 support is mixed across platforms, so you shouldn&#39;t expect to start using this stuff today. Implementations are being added all the time, and I recommend using &lt;a href=&quot;http://kangax.github.io/es5-compat-table/es6/&quot;&gt;The ES6 Compatability Table&lt;/a&gt; to see the current state of affairs.&lt;/p&gt;
&lt;h2&gt;Traceur&lt;/h2&gt;
&lt;p&gt;All the code examples seen in this post were run through &lt;a href=&quot;https://github.com/google/traceur-compiler&quot;&gt;Traceur&lt;/a&gt;, a tool for compiling ES6 code into ES5 code which has a much better browser support at this time. It allows you to write ES6, compile it and use the result in environments where ES6 features are not implemented. Traceur is installed through npm:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --global traceur&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then used on a source file like so:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;traceur --out build.js --script my_source_file.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&#39;ll also need to include the Traceur runtime in your HTML. The runtime comes as part of the Node module, and is found in the &lt;code&gt;bin/runtime.js&lt;/code&gt; directory.&lt;/p&gt;
&lt;h2&gt;Arrow Functions&lt;/h2&gt;
&lt;p&gt;Today we&#39;ll focus exclusively on Arrow functions. One of the quickest of quick wins, arrow functions allow us to write less and achieve more. Let&#39;s take a look at an example of mapping over an array and performing the same task on each element. The code below maps over an array of objects and turns them into an array containing just one particular property from each object:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Ben&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Adam&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// [21, 23, 22]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s really nice, but also feels a little verbose having to type all that. With the new arrow functions, we can write it like so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Ben&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Adam&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// [21, 23, 22]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how much nicer that feels to read, as well as to type? It&#39;s much less code to achieve the same thing. We could then go about summing those ages:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Ben&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Adam&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// 66&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because &lt;code&gt;reduce&lt;/code&gt; takes two parameters, brackets are required to make it clear that the parameters are for the arrow function, not for the &lt;code&gt;reduce&lt;/code&gt; call.&lt;/p&gt;
&lt;p&gt;Arrow functions can have multiple statements within, in which case you need to use a block. You also need to use the &lt;code&gt;return&lt;/code&gt; keyword, whereas in the one line examples above, the return was implicit.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Ben&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Adam&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; agesDoubled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, once you get to this stage it&#39;s a good sign that you probably want to be using regular functions - the benefit of the arrow function is definitely for small, one line methods.&lt;/p&gt;
&lt;p&gt;Another handy feature of arrow functions is the lexical binding of &lt;code&gt;this&lt;/code&gt; to a function. As you&#39;ll probably know already, when you create a new function, the &lt;code&gt;this&lt;/code&gt; keyword is set to a value depending on the way a function is called, and the rules as to what &lt;code&gt;this&lt;/code&gt; might be defined as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;are notoriously convoluted&lt;/a&gt;. Let&#39;s see how arrow functions might help us out here, using a trivial example of creating an API wrapper that returns a Promise (another great ES6 feature that we&#39;ll cover very soon). Consider the following example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;uri &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;http://www.my-hipster-api.io/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// let&#39;s pretend this method gets all documents at&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// a specific RESTful resource...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token class-name&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// this doesn&#39;t work&lt;/span&gt;&lt;br&gt;    http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;uri &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; resource&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; api &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// by calling this method, we should be making a request to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// http://www.my-hipster-api.io/nuggets&lt;/span&gt;&lt;br&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nuggets&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what&#39;s wrong here? Well, aside from not being the best example of Promise usage in the world (it&#39;s generally considered a bit of an anti-pattern to wrap a callback function in this way), &lt;code&gt;this.uri&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt; so when we come to call our &lt;code&gt;http.get()&lt;/code&gt; method that we&#39;re wrapping, we can&#39;t properly form the URL we need. Why would this be? Well, when we call &lt;code&gt;new Promise()&lt;/code&gt;, we&#39;re calling a constructor of another object, which creates a new lexical &lt;code&gt;this&lt;/code&gt; in turn. Put simply, &lt;code&gt;this.uri&lt;/code&gt; is not in scope.&lt;/p&gt;
&lt;p&gt;Today, we can work around this in a few ways. We could have written something like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; self &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// a-ha! we&#39;ll assign to a local var&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// this works!&lt;/span&gt;&lt;br&gt;    http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;uri &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; resource&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...and, lo and behold, it works! By creating a variable that points to &lt;code&gt;this&lt;/code&gt;, we can access it from any of our inner functions. In fact, if we were to use Traceur to transpile our ES6 into ES5 compatible code, it actually outputs something very similar to the above pattern. But we shouldn&#39;t have to do this, right? Surely there must be a way for us to define &lt;code&gt;this&lt;/code&gt; ourselves? If we&#39;re working inside an environment where we have ES5 features (IE9 or above), we could use &lt;code&gt;.bind()&lt;/code&gt;, which is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;method on the &lt;code&gt;Function&lt;/code&gt; prototype&lt;/a&gt; that allows us to &amp;quot;bind&amp;quot; (funnily enough) a value a function&#39;s lexical &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// this works!&lt;/span&gt;&lt;br&gt;      http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;uri &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; resource&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works, but could be a little tidier. If we decide to nest a few callbacks within each other, and they all need access to the outer function&#39;s &lt;code&gt;this&lt;/code&gt; keyword, then we have to affix &lt;code&gt;.bind()&lt;/code&gt; to every nested function. There are also &lt;a href=&quot;http://stackoverflow.com/questions/18895305/will-function-prototype-bind-always-be-slow&quot;&gt;performance implications in using &lt;code&gt;.bind()&lt;/code&gt;&lt;/a&gt;, but likely (hopefully) these will be fixed in due time.&lt;/p&gt;
&lt;p&gt;Enter arrow functions! In ES6, the same function above could be defined like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;uri &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; resource&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It certainly looks a bit more concise, but what&#39;s the arrow doing? Well, it actually binds the context of the Promise&#39;s &lt;code&gt;this&lt;/code&gt; to the context of the function that contains it, so &lt;code&gt;this.uri&lt;/code&gt; resolves to the value we assigned in the constructor. This avoids having to use &lt;code&gt;bind&lt;/code&gt; or the dreaded &lt;code&gt;var self = this&lt;/code&gt; trick to keep a reference to the desired scope.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using ES6 Modules Today</title>
    <link href="http://www.jackfranklin.co.uk/blog/s6-modules-today/"/>
    <updated>2014-06-08T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/s6-modules-today/</id>
    <content type="html">&lt;p&gt;Continuing with the theme of playing with new features of ES6, today we&#39;re going to look at how we can use the new ES6 module syntax today, using Square&#39;s &lt;a href=&quot;https://github.com/square/es6-module-transpiler&quot;&gt;ES6 Module Transpiler&lt;/a&gt;. &lt;strong&gt;Remember, this syntax is not set in stone yet and could change&lt;/strong&gt;, but that&#39;s no reason to not have a play with the new syntax today.&lt;/p&gt;
&lt;p&gt;The transpiler takes the JavaScript and transpiles it into either the CommonJS format (which is what NodeJS uses) or AMD (using RequireJS). This means you write your code using the ES6 syntax, and then run it with CommonJS, RequireJS, or similar.&lt;/p&gt;
&lt;p&gt;It&#39;s easier to show with an example. Let&#39;s make &lt;code&gt;adder.js&lt;/code&gt;, which has a multiplier function:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;multiplier&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; multiplier &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;multiplier&lt;/code&gt; function takes an argument and returns a function that will multiply its argument by the initial argument. So &lt;code&gt;multiplier(2)(2)&lt;/code&gt; will return &lt;code&gt;4&lt;/code&gt;, and &lt;code&gt;multiplier(2)(4)&lt;/code&gt; gives us &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Notice the last line of the function:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; multiplier &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This uses the new ES6 syntax to export the &lt;code&gt;multiplier&lt;/code&gt; function from this file.&lt;/p&gt;
&lt;p&gt;Now let&#39;s write a second file, &lt;code&gt;app.js&lt;/code&gt;, and use our &lt;code&gt;adder&lt;/code&gt; module:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; multiplier &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./adder&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; timesTwo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;timesTwo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, pay particular attention to the top line:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; multiplier &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./adder&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is how we import exported objects from modules using the ES6 syntax.&lt;/p&gt;
&lt;p&gt;To run this code, first we need to compile it. Firstly, install the ES6 transpiler:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install -g es6-module-transpiler
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can transpile it. For this example, as we want to run the resulting code through Node, we will tell the transpiler to use the CommonJS syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;compile-modules app.js adder.js --to compiled --type cjs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This instructs the transpiler to transpile &lt;code&gt;app.js&lt;/code&gt; and &lt;code&gt;adder.js&lt;/code&gt; into the &lt;code&gt;compiled&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Let&#39;s take a look at &lt;code&gt;compiled/adder.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;multiplier&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;multiplier &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; multiplier&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how it has updated the exports code to the CommonJS style.&lt;/p&gt;
&lt;p&gt;Now let&#39;s check &lt;code&gt;compiled/app.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; multiplier &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./adder&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;multiplier&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; timesTwo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;timesTwo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once again, the import has been changed into a standard CommonJS &lt;code&gt;require&lt;/code&gt; call.&lt;/p&gt;
&lt;p&gt;Now we can run &lt;code&gt;node compiled/app.js&lt;/code&gt; and get &lt;code&gt;8&lt;/code&gt; as our output. It worked!&lt;/p&gt;
&lt;p&gt;Let&#39;s see what the output would be if we chose AMD support instead. Try running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;compile-modules app.js adder.js --to compiled --type amd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, &lt;code&gt;compiled/adder.js&lt;/code&gt; looks like so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;exports&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;__exports__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;multiplier&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  __exports__&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;multiplier &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; multiplier&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And &lt;code&gt;compiled/app.js&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./adder&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;__dependency1__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; multiplier &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; __dependency1__&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;multiplier&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; timesTwo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;multiplier&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;timesTwo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we were to setup RequireJS and require &lt;code&gt;app.js&lt;/code&gt;, this would work just fine in a browser.&lt;/p&gt;
&lt;p&gt;If you&#39;re not a fan of running the transpiler directly, you can find both &lt;a href=&quot;https://github.com/joefiorini/grunt-es6-module-transpiler&quot;&gt;Grunt&lt;/a&gt; and &lt;a href=&quot;https://github.com/ryanseddon/gulp-es6-module-transpiler&quot;&gt;Gulp&lt;/a&gt; plugins. I highly recommend having a play and exploring the module syntax - we&#39;ve not covered it all in this post and seeing as it will be standard fairly soon, it makes sense to be familiar with it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Unit testing ExpressJS route functions</title>
    <link href="http://www.jackfranklin.co.uk/blog/testing-express-routes/"/>
    <updated>2014-07-09T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/testing-express-routes/</id>
    <content type="html">&lt;p&gt;I&#39;ve recently been working on an application which has two distinct parts: an Angular front-end, and an API powered by ExpressJS. Something I was keen to do from the beginning was to look at how I could test these API endpoints - not through an integration test, where we fire up the app and make sure hitting an endpoint gives back a response, but through isolated unit tests, where we test the inputs and outputs of the endpoint functions.&lt;/p&gt;
&lt;p&gt;A typical route function in my application looks something like:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;response&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The steps to being able to test this are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define each route&#39;s function elsewhere, and then pass it into an &lt;code&gt;app.get&lt;/code&gt; call later. This lets us have access to the route function isolated from Express.&lt;/li&gt;
&lt;li&gt;Because all of my responses call &lt;code&gt;res.json&lt;/code&gt;, in our tests we will need to fake the method. We can pass in a method called &lt;code&gt;json&lt;/code&gt;, so the code will work, but in there we can add our own implementation that will test the JSON response is what we expect.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I like to split my routes up into different files, one for each grouping of endpoints. For example, the below code contains routes that will be used under the &lt;code&gt;/users&lt;/code&gt; endpoint. This is a good example of how I like to define my routes - completely independent of the Express framework.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; userRoutes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;get&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function-variable function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;hello world&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; userRoutes&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To test this, all we need to do is call the &lt;code&gt;fn&lt;/code&gt; method of the &lt;code&gt;/&lt;/code&gt; object within &lt;code&gt;userRoutes&lt;/code&gt;. We can pass in fake arguments to this function when we call it, and provide our own fake &lt;code&gt;json&lt;/code&gt; method which we can then make assertions on. By doing this we avoid having to load Express, or anything else. This is a big deal - as your app gets larger, loading it will take longer. Being able to test your components in isolation, away from your framework, helps keep test suites quick, which is vital to a good development workflow.&lt;/p&gt;
&lt;p&gt;Let&#39;s see this in action. Here I&#39;m using Mocha for &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;it&lt;/code&gt;, and I&#39;m using the &lt;a href=&quot;https://github.com/LearnBoost/expect.js/&quot;&gt;expect.js&lt;/a&gt; library for my expectations.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; expect &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;expect.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; userRoutes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../../routes/users&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;user routes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;index&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;returns hello world&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      userRoutes&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token function-variable function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;eql&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;hello world&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key bit of that is this section:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;userRoutes&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function-variable function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;eql&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;hello world&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we call the function, passing in an empty object for the request (if we needed to we could easily pass in fake data, if the function used the request object at all) and a fake &lt;code&gt;json&lt;/code&gt; method as part of the resonse object. The function under test calls this &lt;code&gt;json&lt;/code&gt; method, passing in the data we want to return. Hence, within the body of our fake &lt;code&gt;json&lt;/code&gt; method, we can define the expectation we&#39;re after, and check that the data the function returns matches what we expect.&lt;/p&gt;
&lt;p&gt;If you take just one thing away from this post, isolate your code from your framework as much as possible. Yes, it means a little more work to wire things up, but the speed gains from doing so really pay off, particularly as your app grows.&lt;/p&gt;
&lt;p&gt;PS - recently I&#39;ve created a JSPlayground Twitter account, so if you&#39;d like to be aware when new posts get released, the best way to do so is to &lt;a href=&quot;http://twitter.com/jsplayground_&quot;&gt;follow the site on Twitter&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Refactoring Tales book</title>
    <link href="http://www.jackfranklin.co.uk/blog/refactoring-tales/"/>
    <updated>2014-07-20T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/refactoring-tales/</id>
    <content type="html">&lt;p&gt;Something that I&#39;ve been researching into a lot recently is refactoring - one of the most popular posts on this blog was &lt;a href=&quot;http://javascriptplayground.com/blog/2013/06/refactoring-js/&quot;&gt;the one on refactoring&lt;/a&gt;. I really have enjoyed getting stuck into the principles of large systems development, and how to keep code maintainable over time and as it grows.&lt;/p&gt;
&lt;p&gt;I&#39;ve been collecting some examples of this from tutorials I&#39;ve written and real life code for a while, and have been writing them up into case studies. Today I finished my fourth write up, and I&#39;ve decided to parcel them up into a small book, which I&#39;ve called &amp;quot;The Refactoring Tales&amp;quot;.&lt;/p&gt;
&lt;p&gt;&amp;quot;The Refactoring Tales&amp;quot; is a collection of case studies (currently four examples, but more being written) that look at specific code examples and ways they can be improved, going through the stages of refactorings and the reasoning behind them. I also discuss some principles like coupling and single responsibility, along with many more.&lt;/p&gt;
&lt;h2&gt;Free Online&lt;/h2&gt;
&lt;p&gt;You can read the book in its entirety &lt;a href=&quot;http://www.jackfranklin.co.uk/the-refactoring-tales&quot;&gt;online here&lt;/a&gt;, and even check out the source &lt;a href=&quot;https://github.com/jackfranklin/the-refactoring-tales&quot;&gt;on GitHub&lt;/a&gt; if it interests you. Please remember that the book is &lt;strong&gt;not yet finished&lt;/strong&gt;, this is somewhat of a beta release. There is more content to come, along with refinements to the existing content too.&lt;/p&gt;
&lt;p&gt;If you&#39;d like to support the JavaScript Playground, you can purchase a digital download version for $15, which gives you access to the PDF, EPUB and MOBI versions of the book. Buying the book helps me dedicate more time to this site, but also ensures you full access to the current &lt;strong&gt;and all future&lt;/strong&gt; editions of the book.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;buynow&quot; href=&quot;https://transactions.sendowl.com/products/64361/A591CEA4/add_to_cart&quot; rel=&quot;nofollow&quot;&gt;Buy Kindle, iPad and PDF versions for $15&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you&#39;d like to try before you buy, you can read it online, and the content in the downloadable versions is identical to the content online.&lt;/p&gt;
&lt;p&gt;For more information, please &lt;a href=&quot;http://www.jackfranklin.co.uk/the-refactoring-tales&quot;&gt;see the book&#39;s page on this site&lt;/a&gt;, and if you have any questions please tweet &lt;a href=&quot;http://twitter.com/jsplayground_&quot;&gt;@jsplayground_&lt;/a&gt; or myself (&lt;a href=&quot;http://twitter.com/jack_franklin&quot;&gt;@jack_franklin&lt;/a&gt;) and I&#39;ll get back to you.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>An introduction to ES6 classes.</title>
    <link href="http://www.jackfranklin.co.uk/blog/introduction-to-es6-classes-tutorial/"/>
    <updated>2014-07-22T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/introduction-to-es6-classes-tutorial/</id>
    <content type="html">&lt;h2&gt;Support&lt;/h2&gt;
&lt;p&gt;ES6 support varies across environments and platforms, implementations get updated all the time and it&#39;s important to also note that the spec is in draft, so everything below has the potential to change. I recommend using &lt;a href=&quot;http://kangax.github.io/es5-compat-table/es6/&quot;&gt;The ES6 Compatability Table&lt;/a&gt; to see the current state of affairs.&lt;/p&gt;
&lt;h2&gt;Traceur&lt;/h2&gt;
&lt;p&gt;All the code examples seen in this post were run through &lt;a href=&quot;https://github.com/google/traceur-compiler&quot;&gt;Traceur&lt;/a&gt;, a tool for compiling ES6 code into ES5 code which has much better browser support. The beauty of Traceur is that it allows you to write ES6, compile it and use the result in environments where ES6 features are not implemented. Traceur is installed through npm:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --global traceur&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then used on a source file like so:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;traceur --out build.js --script my_source_file.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&#39;ll also need to include the Traceur runtime in your HTML. The runtime comes as part of the Node module, and is found in the &lt;code&gt;bin&lt;/code&gt; directory, called &lt;code&gt;traceur-runtime.js&lt;/code&gt; directory. If you&#39;d like to see an example of this, you can &lt;a href=&quot;https://github.com/javascript-playground/es6-classes&quot;&gt;check out the sample repo on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Classes&lt;/h2&gt;
&lt;p&gt;ES6 classes are syntactical sugar over the Objects and prototypes that we&#39;re used to working with. They simply offer a much nicer, cleaner and clearer syntax for creating these objects and dealing with inheritance.&lt;/p&gt;
&lt;p&gt;To show this in action we&#39;re going to build our own small (and very simplified) framework for building web applications to demonstrate using classes. We&#39;re going to have two classes, one to represent a view, and another to represent a model. Here&#39;s the &lt;code&gt;View&lt;/code&gt; class:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;template &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;template&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;template&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how we still set properties through &lt;code&gt;this.property&lt;/code&gt;, but defining methods on the class is done very differently to how you might be used to. Not a &lt;code&gt;function&lt;/code&gt; keyword in sight! Functions are defined by putting their name, followed by any arguments within brackets, and then a set of braces. That&#39;s it. Our view class is very simple, and provides just a simple &lt;code&gt;render()&lt;/code&gt; method, which takes the template (I&#39;m using Underscore here for templating) and the model object and then returns the compiled template.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;properties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; properties&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;toObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;properties&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our &lt;code&gt;Model&lt;/code&gt; class is equally as simple. It stores all the properties and provides the &lt;code&gt;toObject&lt;/code&gt; method that gives access to the properties.&lt;/p&gt;
&lt;p&gt;We can now use these to output some HTML:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; jack &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; view &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; jack&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello, &amp;lt;%= name %&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;view&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The classes are instantiated just as they are in the ES5 and below world, with the &lt;code&gt;new&lt;/code&gt; keyword used. The &lt;code&gt;constructor&lt;/code&gt; function is called automatically when an instance of the class is created.&lt;/p&gt;
&lt;p&gt;If you run the above code (remembering to run it through Traceur), you&#39;ll see &lt;code&gt;&amp;quot;Hello, jack&amp;quot;&lt;/code&gt; logged to the console.&lt;/p&gt;
&lt;h2&gt;Extending&lt;/h2&gt;
&lt;p&gt;Say we have some views where we actually just want the &lt;code&gt;render&lt;/code&gt; method not to return the compiled template, but to simply just &lt;code&gt;console.log&lt;/code&gt; the resulting rendered HTML. (This is a contrived example, but stick with me!). We might call this view &lt;code&gt;LogView&lt;/code&gt;, and we can implement it by extending our regular &lt;code&gt;View&lt;/code&gt; class. I&#39;ll explain the call to &lt;code&gt;super.render()&lt;/code&gt; shortly.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LogView&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; compiled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;compiled&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the &lt;code&gt;extends&lt;/code&gt; keyword to extend a class is a great example of where the simplicity of the class syntax shines. Extending &lt;code&gt;View&lt;/code&gt; means that &lt;code&gt;LogView&lt;/code&gt; inherits everything that &lt;code&gt;View&lt;/code&gt; has. If we were to just have:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LogView&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then &lt;code&gt;LogView&lt;/code&gt; functionality would be effectively identical to &lt;code&gt;View&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Instead though, we override the &lt;code&gt;render&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; compiled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;compiled&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We first call &lt;code&gt;super.render()&lt;/code&gt;. This calls the parent class&#39; &lt;code&gt;render()&lt;/code&gt; method, and returns the result. Using &lt;code&gt;super&lt;/code&gt;, you can access methods and properties available on the parent class. This means that the &lt;code&gt;render&lt;/code&gt; method on the &lt;code&gt;View&lt;/code&gt; class is first called, and the result is stored in the &lt;code&gt;compiled&lt;/code&gt; variable. We then simply log out the result.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; jack &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; view &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LogView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; jack&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello, &amp;lt;%= name %&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;view&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you rerun Traceur and refresh the browser, you&#39;ll still see &lt;code&gt;Hello, jack&lt;/code&gt; logged to the console, but this time the only &lt;code&gt;console.log&lt;/code&gt; call was from within the &lt;code&gt;LogView&lt;/code&gt; class.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope that serves as a nice introduction to ES6 classes. Just because they exist, it doesn&#39;t mean that you should immediately seek to change every object in your system to classes, but they certainly have some great use cases.&lt;/p&gt;
&lt;p&gt;The code I used in this post is &lt;a href=&quot;https://github.com/javascript-playground/es6-classes&quot;&gt;on GitHub&lt;/a&gt;, so feel free to check it out and have a play around.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;http://twitter.com/toddmotto&quot;&gt;@toddmotto&lt;/a&gt; for his help reviewing a draft of this piece.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Upcoming JavaScript Workshops</title>
    <link href="http://www.jackfranklin.co.uk/blog/workshops/"/>
    <updated>2014-09-02T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/workshops/</id>
    <content type="html">&lt;p&gt;Coming up in October and November I&#39;m doing two different workshops; the first in Bristol and the second in London.&lt;/p&gt;
&lt;h2&gt;Web Dev Conf&lt;/h2&gt;
&lt;p&gt;On the &lt;strong&gt;9th of October&lt;/strong&gt; I&#39;m doing a workshop on building web apps with NodeJS and Express in Bristol. It runs for about three hours in the afternoon and tickets cost £50. You can &lt;a href=&quot;http://2014.webdevconf.com/workshops/#jackfranklin&quot;&gt;buy them through the WDC site&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;White October Events&lt;/h2&gt;
&lt;p&gt;On the &lt;strong&gt;4th of November&lt;/strong&gt;, I&#39;m doing a full day workshop on JS Tooling with Grunt and Gulp. White October are the folks behind jQuery UK, one of the best conferences I&#39;ve attended before and I&#39;m sure they are going to do an awesome job with the workshops. Tickets for this full day workshop at Imperial College, London cost £270 + VAT and can be bought &lt;a href=&quot;http://www.whiteoctoberevents.co.uk/event/javascript-workshops/introduction-to-js-tooling/&quot;&gt;on the White October site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any questions about the workshops please get in touch, and I hope to see you at one of them!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Slides from &quot;An introduction to ES6&quot;</title>
    <link href="http://www.jackfranklin.co.uk/blog/es6-introduction/"/>
    <updated>2014-10-07T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/es6-introduction/</id>
    <content type="html">&lt;p&gt;I had the pleasure last weekend of speaking at &lt;a href=&quot;http://epic.frontendlondon.co.uk/&quot;&gt;Epic FEL&lt;/a&gt;, a single day, single track conference in the heart of London, run by &lt;a href=&quot;http://madebymany.com/&quot;&gt;Made by Many&lt;/a&gt;. They did an absolutely fantastic job and if you are ever in London, I recommend their monthly &lt;a href=&quot;http://www.frontendlondon.co.uk/&quot;&gt;Front End London meetup&lt;/a&gt; too.&lt;/p&gt;
&lt;p&gt;I spoke on introducing ES6, a topic that I&#39;ve been writing and speaking about more and more recently. I&#39;m really excited by the evolution of the language and some of the new features. You can find my slides below along with the video.&lt;/p&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;3cffd6802e29013233bc1ac45923d988&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;http://speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/mPq5S27qWW8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Below I have included a list of resources that I used when putting the talk together which may be useful if you&#39;d like to read more on any of the features in particular:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://kangax.github.io/compat-table/es6/&quot;&gt;ES6 Compat Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lukehoban/es6features&quot;&gt;ES6 Features Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/es6-repl/alploljligeomonipppgaahpkenfnfkn&quot;&gt;ES6 REPL Chrome Addon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Arrow Functions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://javascriptplayground.com/blog/2014/04/real-life-es6-arrow-fn/&quot;&gt;http://javascriptplayground.com/blog/2014/04/real-life-es6-arrow-fn/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Classes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://javascriptplayground.com/blog/2014/07/introduction-to-es6-classes-tutorial/&quot;&gt;http://javascriptplayground.com/blog/2014/07/introduction-to-es6-classes-tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Object Literals&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://maximilianhoffmann.com/posts/object-based-javascript-in-es6&quot;&gt;http://maximilianhoffmann.com/posts/object-based-javascript-in-es6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Generators&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/domenicdenicola/es6-the-awesome-parts&quot;&gt;http://www.slideshare.net/domenicdenicola/es6-the-awesome-parts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pag.forbeslindesay.co.uk/#/&quot;&gt;http://pag.forbeslindesay.co.uk/#/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jlongster.com/A-Study-on-Solving-Callbacks-with-JavaScript-Generators&quot;&gt;http://jlongster.com/A-Study-on-Solving-Callbacks-with-JavaScript-Generators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Template Strings&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tc39wiki.calculist.org/es6/template-strings/&quot;&gt;http://tc39wiki.calculist.org/es6/template-strings/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Destructuring&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ariya.ofilabs.com/2013/02/es6-and-destructuring-assignment.html&quot;&gt;http://ariya.ofilabs.com/2013/02/es6-and-destructuring-assignment.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Function Arguments&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://globaldev.co.uk/2013/10/es6-part-4/&quot;&gt;http://globaldev.co.uk/2013/10/es6-part-4/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Modules&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guybedford.com/practical-workflows-for-es6-modules&quot;&gt;http://guybedford.com/practical-workflows-for-es6-modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/esnext/es6-module-transpiler&quot;&gt;https://github.com/esnext/es6-module-transpiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.2ality.com/2014/09/es6-modules-final.html&quot;&gt;http://www.2ality.com/2014/09/es6-modules-final.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Promises&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.2ality.com/2014/09/es6-promises-foundations.html&quot;&gt;http://www.2ality.com/2014/09/es6-promises-foundations.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;ES6 Today&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/google/traceur-compiler&quot;&gt;https://github.com/google/traceur-compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.2ality.com/2014/08/es6-today.html&quot;&gt;http://www.2ality.com/2014/08/es6-today.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Block Scope&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Other Talks&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://es6isnigh.com/&quot;&gt;http://es6isnigh.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/anguscroll/es6-uncensored&quot;&gt;https://speakerdeck.com/anguscroll/es6-uncensored&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>ES6 Destructuring</title>
    <link href="http://www.jackfranklin.co.uk/blog/es6-destructuring/"/>
    <updated>2014-10-16T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/es6-destructuring/</id>
    <content type="html">&lt;p&gt;ES6 comes both with huge new features like generators or classes, but also packs in a lot of smaller features that are going to make a big difference to how your JavaScript looks. Today I want to explore some of the new destructuring abilities ES6 adds, and how it can reduce the amount of code we have to write.&lt;/p&gt;
&lt;p&gt;## Traceur
All the code examples seen in this post were run through &lt;a href=&quot;https://github.com/google/traceur-compiler&quot;&gt;Traceur&lt;/a&gt;, a tool for compiling ES6 code into ES5 code which has much better browser support. The beauty of Traceur is that it allows you to write ES6, compile it and use the result in environments where ES6 features are not implemented. Traceur is installed through npm:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --global traceur&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then used on a source file like so:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;traceur --out build.js --script my_source_file.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&#39;ll also need to include the Traceur runtime in your HTML. The runtime comes as part of the Node module, and is found in the &lt;code&gt;bin&lt;/code&gt; directory, called &lt;code&gt;traceur-runtime.js&lt;/code&gt; directory. If you&#39;d like to see an example of this, you can &lt;a href=&quot;https://github.com/javascript-playground/es6-classes&quot;&gt;check out this example repo on GitHub&lt;/a&gt;, which has Traceur set up.&lt;/p&gt;
&lt;h2&gt;Destructuring&lt;/h2&gt;
&lt;p&gt;The most common destructuring example is to pull values out of an array:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; 1&lt;/span&gt;&lt;br&gt;b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also miss out parts of the array too:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; 1&lt;/span&gt;&lt;br&gt;b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This lends itself well to splitting strings:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fullName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack Franklin&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;first&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; last&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fullName&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;first&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; &#39;Jack&#39;&lt;/span&gt;&lt;br&gt;last&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; &#39;Franklin&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is perhaps more useful is that we can perform this same type of destructuring on objects:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; &#39;Jack&#39;&lt;/span&gt;&lt;br&gt;age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; &#39;22&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is useful if you have a function that returns an object, and you want to get certain parts of the object only:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;about&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;about&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; &#39;Jack&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Functions that take objects&lt;/h2&gt;
&lt;p&gt;The above functionality is really useful, and will certainly come in handy, but we can go one step further.&lt;/p&gt;
&lt;p&gt;Because we can take in an object as the only argument to a function, we can destructure against that object.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;someFunc&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; name &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;someFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// &#39;Jack&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above function takes in an object and destructures it, declaring that whatever is passed in as the &lt;code&gt;name&lt;/code&gt; property of the object will then be available within the function as the &lt;code&gt;name&lt;/code&gt; variable. Suddenly we can rewrite this type of code:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;someFunc&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; opts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;someFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Into what we had earlier:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;someFunc&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; name &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;someFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This may take some getting used to in terms of reading the code, but it makes it much clearer what&#39;s going on. You can see exactly what the object expects.&lt;/p&gt;
&lt;p&gt;We can even go one step further though. In ES6 we also have some nice sugar for declaring properties on objects where the value is already defined in a variable by the same name. What this means is that we can take this code block:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; name &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And rewrite it as:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you have an object where the value of the property matches a variable of the same name, you can shorten it and only refer to it once, thus avoiding duplicating the same word twice. Taking that into account, our function from earlier:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;someFunc&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; name &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;someFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Becomes even more concise:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;someFunc&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;someFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope I&#39;ve shown you how ES6 destructuring can really clean up your code. It might take a while for you to get used to, and the syntax can look a little weird if you&#39;re not used to it, but once you&#39;re adjusted I think it really makes code but nicer to read and work with. It also makes code much more self documenting and clear in its intentions, in my opinion.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Modules and Dependencies with jspm</title>
    <link href="http://www.jackfranklin.co.uk/blog/js-modules-jspm-systemjs/"/>
    <updated>2014-11-10T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/js-modules-jspm-systemjs/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://jspm.io/&quot;&gt;jspm&lt;/a&gt; is a package manager for JavaScript applications that sits on top of the &lt;a href=&quot;https://github.com/systemjs/systemjs&quot;&gt;SystemJS&lt;/a&gt;. Both were written and are maintained by &lt;a href=&quot;http://twitter.com/guybedford&quot;&gt;Guy Bedford&lt;/a&gt;. SystemJS builds on top of the &lt;a href=&quot;https://github.com/ModuleLoader/es6-module-loader&quot;&gt;es6-module-loader&lt;/a&gt; and adds the capability to load in modules that are defined using a variety of syntaxes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CommonJS (for example, NodeJS modules)&lt;/li&gt;
&lt;li&gt;AMD (the spec that RequireJS follows)&lt;/li&gt;
&lt;li&gt;ES6 modules (using the &lt;a href=&quot;https://github.com/ModuleLoader/es6-module-loader&quot;&gt;ES6 module loader&lt;/a&gt; and &lt;a href=&quot;https://github.com/google/traceur-compiler&quot;&gt;Traceur&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Modules that export a global variable are also supported via a shim config.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think that ES6 modules are absolutely fantastic, and at &lt;a href=&quot;http://www.gocardless.com/&quot;&gt;GoCardless&lt;/a&gt;, we&#39;ve structured a large JS heavy application using SystemJS, allowing us to manage our application&#39;s modules entirely through ES6. Using jspm is the next logical step up from SystemJS. It manages our dependencies, lets us install third party ones and comes with tooling to build applications into one file for production.&lt;/p&gt;
&lt;p&gt;Today we will set up a very simple project using jspm, and in further posts we will explore more of its features.&lt;/p&gt;
&lt;h2&gt;Why not npm?&lt;/h2&gt;
&lt;p&gt;jspm is a package manager in the same ilk as npm, but with a key difference: it puts the browser loader first. This means it offers a seamless workflow for installing and using libraries in the browser with very little effort from the developer. The ability to load in modules that have been defined in a number of different syntaxes means it can offer the greatest support for front end libraries and more often than not with jspm, any module you wish to use will just work, with none or very little configuration required.&lt;/p&gt;
&lt;h2&gt;Installing jspm&lt;/h2&gt;
&lt;p&gt;jspm should be installed as a global tool through npm:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --global jspm&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s create a new project. Create a new directory and run &lt;code&gt;jspm install&lt;/code&gt;. The CLI will ask you a set of questions about your project, which you should answer. If the default answer is fine, you can just hit enter to continue onto the next question. Once the prompts have been answered, jspm is going to perform the following tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a &lt;code&gt;config.js&lt;/code&gt;, which contains the configuration for your modules. We will look at this in more depth shortly.&lt;/li&gt;
&lt;li&gt;create a &lt;code&gt;package.json&lt;/code&gt; file for your project. jspm stores your project&#39;s dependencies in here, under the &lt;code&gt;jspm&lt;/code&gt; key by default.&lt;/li&gt;
&lt;li&gt;Download some libraries that jspm needs: SystemJS, the es6-module-loader, Traceur and the Traceur runtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Running the App&lt;/h2&gt;
&lt;p&gt;To get this running we now need to create an HTML file, and load in a couple of scripts. Create &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;jspm_packages/system.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;config.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br&gt;      System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./app&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We first load in the SystemJS source, and then the &lt;code&gt;config.js&lt;/code&gt;, which jspm created for us. Then we can use &lt;code&gt;System.import&lt;/code&gt;, the proposed browser loader API for dynamically loading ES6 modules, polyfilled by the es6-module-loader, to import the file &lt;code&gt;app.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hello world&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you run the app locally (I recommend the npm module &lt;a href=&quot;https://www.npmjs.org/package/serve&quot;&gt;serve&lt;/a&gt; for this), you should be able to visit &lt;code&gt;index.html&lt;/code&gt; and see &#39;hello world&#39; logged.&lt;/p&gt;
&lt;h2&gt;Installing Dependencies&lt;/h2&gt;
&lt;p&gt;So far, jspm hasn&#39;t added much to the party. Most of the work to achieve what we have has been done by SystemJS. Let&#39;s say that your application requires jQuery for some piece of functionality. jspm will let us install modules from either GitHub or from npm, and jQuery is available on both, so we&#39;re good there. There is also a small &lt;a href=&quot;https://github.com/jspm/registry/blob/master/registry.json&quot;&gt;registry&lt;/a&gt; maintained for popular dependencies, and jQuery is one of them. Because of this, we can just run &lt;code&gt;jspm install jquery&lt;/code&gt;, and jspm will know how to resolve &amp;quot;jquery&amp;quot; into the right files to download. Run that now and see what happens:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; jspm &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; jquery&lt;br&gt;&lt;br&gt;     Updating registry cache&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;br&gt;&lt;br&gt;     Looking up github:components/jquery&lt;br&gt;ok   Installed jquery as github:components/jquery@^2.1.1 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2.1&lt;/span&gt;.1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;ok   Install complete&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;jspm has searched its registry for &amp;quot;jquery&amp;quot;, and found that it is mapped to &amp;quot;github:components/jquery&amp;quot;, and has gone and installed jQuery from that repository. Additionally, it has added jQuery to the &lt;code&gt;package.json&lt;/code&gt;, which means if you were to clone the repository and run &lt;code&gt;jspm install&lt;/code&gt;, jQuery will be downloaded and installed for you.&lt;/p&gt;
&lt;p&gt;If we take a look at &lt;code&gt;config.js&lt;/code&gt;, we can see jspm has modified it:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&#39;github:*&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;jspm_packages/github/*.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;jquery&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;github:components/jquery@^2.1.1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;versions&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&#39;github:components/jquery&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2.1.1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These paths and mappings tell SystemJS how to resolve a request for a module. Most of the time jspm will generate this for you and you won&#39;t have to edit it too much, however sometimes it can be useful to map a longer package name to a smaller one, as jspm has done with jQuery. You can actually generate these mappings automatically when you install a module:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;jspm &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;jquery&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Would install jQuery and set up a path so in your code you could load it in as &lt;code&gt;j&lt;/code&gt;. I don&#39;t recommend using such short names, but in some cases it can be useful to save on typing.&lt;/p&gt;
&lt;p&gt;Now we can use jQuery in our application. Head back to &lt;code&gt;app.js&lt;/code&gt; and load it in:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; $ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;jquery&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jquery&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember, SystemJS can deal with modules defined and loaded in using either AMD, CommonJS or ES6 modules. Here I&#39;ve chosen to use the CommonJS style just to show that it works. If you now run this in your browser, you will see &lt;code&gt;2.1.1&lt;/code&gt; logged to the console - &lt;code&gt;$.fn.jquery&lt;/code&gt; returns the current version of jQuery running.&lt;/p&gt;
&lt;h2&gt;Installing a dependency from npm&lt;/h2&gt;
&lt;p&gt;Let&#39;s now look at installing something from npm, namely &lt;a href=&quot;http://lodash.com/&quot;&gt;LoDash&lt;/a&gt;. Typically, if a dependency you need is on npm, you should install it from there rather than on GitHub. We can install it with jspm like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; jspm install lodash=npm:lodash


Updating registry cache...
Looking up npm:lodash
Looking up github:jspm/nodelibs
Looking up npm:Base64
Looking up npm:base64-js
Looking up npm:ieee754
Looking up npm:inherits
Looking up npm:pbkdf2-compat
Looking up npm:ripemd160
Looking up npm:sha.js
ok   Installed github:jspm/nodelibs@0.0.5 (0.0.5)
ok   Installed lodash as npm:lodash@^2.4.1 (2.4.1)

ok   Install complete
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don&#39;t worry that a lot of extra files got downloaded - these are dependencies that jspm has in order to install npm modules correctly. Notice how we install LoDash with the command &lt;code&gt;jspm install lodash=npm:lodash&lt;/code&gt;. This gets jspm to install LoDash from npm, but then set up a mapping so we can require it as &lt;code&gt;lodash&lt;/code&gt;, rather than the slightly more verbose &lt;code&gt;npm:lodash&lt;/code&gt;, which gets tiring to type very quickly.&lt;/p&gt;
&lt;p&gt;Now head into &lt;code&gt;app.js&lt;/code&gt; and load in LoDash.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; $ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;jquery&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; _ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;lodash&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jquery&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will see the current version of LoDash (&lt;code&gt;2.4.1&lt;/code&gt; at time of writing) in the console.&lt;/p&gt;
&lt;h2&gt;ES6 Syntax&lt;/h2&gt;
&lt;p&gt;To round off this tutorial, let&#39;s swap to using the ES6 module syntax:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; $ &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;jquery&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; _ &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;lodash&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jquery&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you load your browser again, you&#39;ll see that everything still works. If you need a primer on the ES6 module syntax, I covered it &lt;a href=&quot;http://javascriptplayground.com/blog/2014/06/es6-modules-today/&quot;&gt;previously on the site&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Advantages over RequireJS or Browserify&lt;/h2&gt;
&lt;p&gt;This approach of jspm + SystemJS offers a number of advantages over other solutions such as Require or Browserify. With RequireJS, you have to install it through a tool such as Bower, but then manage the mappings and namings of the modules manually. With jspm, you very rarely have to edit the configuration, it is just done for you. In the cases where jspm isn&#39;t able to do it all for you, you can manually override and add to the jspm registry, fixing the problem for you and for others.&lt;/p&gt;
&lt;p&gt;The primary benefit over Browserify is that you do not need any form of build tool or task running all the time every time you change a file. Because it&#39;s all run and compiled (in development, anyway), in the browser, there&#39;s much less tooling or set up required. Compilation through Traceur for your ES6 files is all done for you.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The combination of jspm and SystemJS is a powerful one, in particular when combined with the new module syntax in ES6. In future tutorials we will look more at structuring applications and defining your own modules and use jspm to bundle our application into one file that can be used in production.&lt;/p&gt;
&lt;p&gt;Thank you to &lt;a href=&quot;http://twitter.com/guybedford&quot;&gt;Guy Bedford&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/oliverjash&quot;&gt;Oliver Ash&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/theefer&quot;&gt;Sebastien Cevey&lt;/a&gt; for their time spent reviewing this blog post.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Embracing Promises in JavaScript</title>
    <link href="http://www.jackfranklin.co.uk/blog/promises/"/>
    <updated>2015-02-08T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/promises/</id>
    <content type="html">&lt;p&gt;In this post we will look at how we can embrace promises to lead to much nicer code when working asynchronously with JavaScript. This post is not a full, in-depth exploration of Promises. For that, &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/es6/promises/&quot;&gt;Jake Archibald&#39;s post on HTML5 Rocks&lt;/a&gt; has you covered. I highly recommend reading it.&lt;/p&gt;
&lt;p&gt;Throughout this post I will be working using the &lt;a href=&quot;https://github.com/jakearchibald/es6-promise&quot;&gt;es6-promise library&lt;/a&gt;, a polyfill for the native Promise implementation that will exist in ECMAScript 6. All my code examples will be run through Node.js, but they should behave identically when run in a browser environment. Whenever in the code you see &lt;code&gt;Promise&lt;/code&gt;, this will be using the above polyfill, but if you&#39;re reading this in a world where promises are widely implemented in browsers, you should still find everything here works exactly the same.&lt;/p&gt;
&lt;h2&gt;Dealing with Errors&lt;/h2&gt;
&lt;p&gt;The first subject to tackle is that of error handling with promises. This was something that a lot of people have asked about and something that trips a lot of people up, understandably. Take a look at the below code. When I run this, what do you expect to be logged?&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;someAsyncThing&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// this will throw, x does not exist&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;someAsyncThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;everything is great&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might expect an error to be thrown, because &lt;code&gt;x&lt;/code&gt; does not exist. That&#39;s what would happen if you wrote that code outside of a promise. However, running this code gives you absolutely nothing. Nothing is logged to the console, and no errors are thrown. Within a promise, any error that is thrown is swallowed up and treated as the promise rejecting. This means we have to catch the error to see it:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;someAsyncThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;everything is great&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;oh no&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, running this gives:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;oh no &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ReferenceError&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; x is not defined&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You also need to be comfortable with how errors are caught in a chain of promises. Take the below example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;someAsyncThing&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// this will throw, x does not exist&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;someOtherAsyncThing&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;something went wrong&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;someAsyncThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;someOtherAsyncThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;oh no&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we will still get &lt;code&gt;oh no [ReferenceError: x is not defined]&lt;/code&gt;, because &lt;code&gt;someAsyncThing&lt;/code&gt; rejected. However, if &lt;code&gt;someAsyncThing&lt;/code&gt; resolves successfully, we&#39;ll still see the error when &lt;code&gt;someOtherAsyncThing&lt;/code&gt; rejects:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;someAsyncThing&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;someOtherAsyncThing&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;something went wrong&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;someAsyncThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;someOtherAsyncThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;oh no&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we get &lt;code&gt;oh no something went wrong&lt;/code&gt;. When a promise rejects, the first &lt;code&gt;catch&lt;/code&gt; in the chain following that is called.&lt;/p&gt;
&lt;p&gt;Another important point is that there&#39;s nothing special about &lt;code&gt;catch&lt;/code&gt;. It&#39;s just a method to register a handler for when a promise rejects. It doesn&#39;t stop further execution:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;someAsyncThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;someOtherAsyncThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;oh no&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;carry on&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given the above code, once something rejects, &lt;code&gt;carry on&lt;/code&gt; will then be logged to the screen. Of course, if the code within the &lt;code&gt;catch&lt;/code&gt; throws an error, that is not the case:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;someAsyncThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;someOtherAsyncThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;oh no&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// y is not a thing!&lt;/span&gt;&lt;br&gt;    y &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;carry on&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the catch callback is executed, but &lt;code&gt;carry on&lt;/code&gt; is not, because the catch callback threw an error. Notice again that there is no record of the error, it is not logged, nor is anything thrown visibly. If you were to add another &lt;code&gt;catch&lt;/code&gt; onto the end, that &lt;code&gt;catch&lt;/code&gt; function would run, because when a callback function throws, the next &lt;code&gt;catch&lt;/code&gt; in the chain is called.&lt;/p&gt;
&lt;h2&gt;Chaining and Passing around Promises&lt;/h2&gt;
&lt;p&gt;This part is inspired by some work I did recently to add CSV exporting to our client-side application. In that case it was using the &lt;code&gt;$q&lt;/code&gt; framework within an AngularJS application, but I have replicated it here so we can use it as an example.&lt;/p&gt;
&lt;p&gt;The steps to export a CSV (the CSV itself is built in the browser using &lt;a href=&quot;https://github.com/eligrey/filesaver.js&quot;&gt;FileSaver&lt;/a&gt;) are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fetch the data from the API that will make up the CSV (this could mean multiple API requests)&lt;/li&gt;
&lt;li&gt;Pass that data into an object which does some editing of the data to make it CSV ready.&lt;/li&gt;
&lt;li&gt;Write the data to a CSV.&lt;/li&gt;
&lt;li&gt;Show the user a message confirming their CSV has been successfully created, or an error.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We won&#39;t go into the underlying specifics of how the code works, but I wanted to look at a high level how we used Promises to build a robust solution that handles errors too. In a complex operation like this, errors could easily occur at any stage of the process (the API might be down, or the code parsing the data might throw an error, or the CSV might not save properly) and we found that with promises we could handle this really nicely, using a sensible combination of &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As you&#39;ll see we also end up chaining promises heavily. The chaining of promises is something that really makes them shine in my opinion, but it does take some getting used to - the way they work can be a little odd at first. Jake Archibald (yup, him again!) puts this best:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you return something from a &amp;quot;then&amp;quot; callback, it&#39;s a bit magic. If you return a value, the next &amp;quot;then&amp;quot; is called with that value. However, if you return something promise-like, the next &amp;quot;then&amp;quot; waits on it, and is only called when that promise settles (succeeds/fails)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Again, for a real in-depth look at promises, I can&#39;t recommend &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/es6/promises/&quot;&gt;this blog post&lt;/a&gt; highly enough.&lt;/p&gt;
&lt;p&gt;Let&#39;s start with a really simple function that just returns some data. In a real application this would be a http call of some sort. In our case after 50ms, this promise will resolve with an array of users that we want to export to CSV:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;fetchData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Isaac&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Iain&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, there&#39;s the function that prepares this data for the CSV. In this case all it actually does is immediately resolve with the data its given, but in a real application it would do more work:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;prepareDataForCsv&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// imagine this did something with the data&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&#39;s something quite important to note here: in this example (and in the real app), none of the work &lt;code&gt;prepareDataForCsv&lt;/code&gt; does is async. There&#39;s no need for this to be wrapped in a promise. But when a function exists as part of a larger chain, I&#39;ve found it really beneficial to wrap it in a promise, because it means all your error handling can be done through promises. Else, you have to deal with error handling through promises in one area, but through good old &lt;code&gt;try {} catch&lt;/code&gt; in another.&lt;/p&gt;
&lt;p&gt;Finally, we have the function for writing to a CSV too:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;writeToCsv&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// write to CSV&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we can put them all together:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;prepareDataForCsv&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;writeToCsv&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;your csv has been saved&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s pretty succinct, and I think reads really well. It&#39;s clear what&#39;s going on and the order in which things happen. We can also tidy it up further though. If you have a function that just takes one argument, you can pass that directly to &lt;code&gt;then&lt;/code&gt; rather than calling it from a callback function:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prepareDataForCsv&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;writeToCsv&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;your csv has been saved&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bearing in mind how complex the underlying code is (at least, in the real application), the high level API reads really nicely. This is something I&#39;ve come to really appreciate with promises, once you get used to writing them and working with them, you can end up with some really nice looking code that&#39;s easy to follow.&lt;/p&gt;
&lt;p&gt;However, right now we don&#39;t have any error handling, but we can add it all with one extra piece of code:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;fetchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prepareDataForCsv&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;writeToCsv&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;your csv has been saved&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;something went wrong&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because of how the chaining of promises and errors work, as discussed earlier, it means that just one &lt;code&gt;catch&lt;/code&gt; at the end of the chain is guaranteed to catch any errors thrown along the way. This makes error handling really straight forward.&lt;/p&gt;
&lt;p&gt;To demonstrate this, I&#39;ll change &lt;code&gt;prepareDataForCsv&lt;/code&gt; so it rejects:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;prepareDataForCsv&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// imagine this did something with the data&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;data invalid&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now running the code logs the error. That&#39;s pretty awesome - &lt;code&gt;prepareDataForCsv&lt;/code&gt; is right in the middle of our promise chain but we didn&#39;t have to do any extra work or trickery to deal with the error. Plus, the &lt;code&gt;catch&lt;/code&gt; will not only catch errors that we trigger by making the promise reject, but also any that are thrown unexpectedly. This means even if a really unexpected edge case triggers a JS exception, the user will still have their error handled as expected.&lt;/p&gt;
&lt;p&gt;Another approach that we&#39;ve found to be very powerful is changing functions that expect some data to instead take a promise that will resolve to some data. Let&#39;s take &lt;code&gt;prepareDataForCsv&lt;/code&gt; as the example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;prepareDataForCsv&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;dataPromise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dataPromise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&#39;ve found this to be quite a nice pattern for tidying up code and keeping it more generic - it&#39;s often easier in an application where most of the work is async to pass promises around rather than waiting for them to resolve and pass the data.&lt;/p&gt;
&lt;p&gt;With the above change, the new code looks like so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;prepareDataForCsv&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetchData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;writeToCsv&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;your csv has been saved&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;something went wrong&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The beauty of this is that the error handling hasn&#39;t changed. &lt;code&gt;fetchData&lt;/code&gt; could reject in some form, and the error will still be dealt with in the last catch. Once it clicks in your mind, you&#39;ll find promises really nice to work with and even nicer to handle errors with.&lt;/p&gt;
&lt;h2&gt;Recursion in Promises&lt;/h2&gt;
&lt;p&gt;One of the problems we had to deal with was that sometimes to fetch the data from our API, you might have to make multiple requests. This is because we paginate all our API requests, so if you need to get more data than can fit in one response, you need to make multiple. Thankfully our API tells you if there is more data to fetch, and in this section I&#39;ll explain how we used recursion in conjunction with promises to load all this data.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    count&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;more&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;more&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;isaac&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Firstly, we have &lt;code&gt;http&lt;/code&gt;, which will serve as the fake HTTP calls to our API. (&lt;code&gt;Promise.resolve&lt;/code&gt; just creates a promise that immediately resolves with whatever you give it). The first time I make a request, it&#39;s going to respond with a user but also the &lt;code&gt;more&lt;/code&gt; flag set to true, which indicates there is more data to fetch (this isn&#39;t how the real life API responds, but it will do for the purposes of this post). The second time the request is made, it responds with a user but with the &lt;code&gt;more&lt;/code&gt; flag set to &lt;code&gt;false&lt;/code&gt;. Therefore to fetch all the data needed, we need to make two API calls. Let&#39;s write a function &lt;code&gt;fetchData&lt;/code&gt; that can deal with this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;fetchData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;goFetch&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;more&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;goFetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;goFetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;fetchData&lt;/code&gt; itself does very little except define and then call another function, &lt;code&gt;goFetch&lt;/code&gt;. &lt;code&gt;goFetch&lt;/code&gt; takes an array of users in (the initial call to &lt;code&gt;goFetch&lt;/code&gt; passes an empty array), and then calls &lt;code&gt;http()&lt;/code&gt;, which resolves with some data. The new user that is returned is pushed onto the array of users, and then the function looks at the &lt;code&gt;data.more&lt;/code&gt; field. If it&#39;s true, it calls itself again, passing in the new array of users. If it&#39;s false, and there is no more data to get, it just returns the array of users. The most important thing here and the reason this works is that at every stage something is &lt;code&gt;return&lt;/code&gt;ed. &lt;code&gt;fetchData&lt;/code&gt; returns &lt;code&gt;goFetch&lt;/code&gt;, which either returns itself or an array of users. It&#39;s the fact that everything returns itself that allows this recursive promise chain to be built up.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Promises are not going anywhere, and are going to become the standard approach for dealing with large amounts of asynchronous operations. However, I&#39;ve found them to generally offer a lot of benefits when working on complex sequences of operations where some are sync, and others async. If you&#39;ve not tried them yet I&#39;d really recommend it on your next project.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Writing Command Line Tools with Node</title>
    <link href="http://www.jackfranklin.co.uk/blog/node-command-line-tool/"/>
    <updated>2015-03-01T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/node-command-line-tool/</id>
    <content type="html">&lt;p&gt;Back in August 2012 I wrote a post on &lt;a href=&quot;http://www.jackfranklin.co.uk/blog/2012/08/writing-a-command-line-node-tool/&quot;&gt;building a command line tool in NodeJS&lt;/a&gt;. That post is now over two years old and plenty has changed, hence I thought it worth writing a new post building the same tool, showing how I&#39;d do it now.&lt;/p&gt;
&lt;p&gt;We&#39;re going to build the same tool, one that&#39;s used to search a directory for files that match a given string. This is not a very useful plugin, but will let me demonstrate the basics of building a CLI in NodeJS.&lt;/p&gt;
&lt;h2&gt;Creating the Project&lt;/h2&gt;
&lt;p&gt;First things first: let&#39;s create a new project. Create a directory for the project, enter it and run &lt;code&gt;npm init&lt;/code&gt; to initialise the new project with a &lt;code&gt;package.json&lt;/code&gt; file. Answer the prompts if you wish, or just hit enter a bunch of times to get a template &lt;code&gt;package.json&lt;/code&gt; file that you can fill out at your own leisure.&lt;/p&gt;
&lt;h2&gt;Editing package.json&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;package.json&lt;/code&gt; file is used by npm, Node&#39;s package manager, to know about your project, its dependencies and how it works. We need to make a couple of edits to it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;remove the &lt;code&gt;main&lt;/code&gt; entry: this is only used for modules that will be used through the module system (e.g. &lt;code&gt;var _ = require(&#39;underscore&#39;);&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;add &lt;code&gt;preferGlobal&lt;/code&gt; and set it to true, which means if someone installs this module through npm and doesn&#39;t use the &lt;code&gt;--global&lt;/code&gt; option, they will be warned that the module is designed to be installed globally.&lt;/li&gt;
&lt;li&gt;add the &lt;code&gt;bin&lt;/code&gt; object, which maps commands to files. This means when this module is installed, npm will set up the &lt;code&gt;filesearch&lt;/code&gt; executable to execute &lt;code&gt;index.js&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;filesearch&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;searches for files&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;echo &#92;&quot;Error: no test specified&#92;&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;JavaScript Playground&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ISC&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;preferGlobal&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;bin&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;filesearch&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Creating the Script&lt;/h2&gt;
&lt;p&gt;Create &lt;code&gt;index.js&lt;/code&gt; and add this to the top:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token hashbang comment&quot;&gt;#! /usr/bin/env node&lt;/span&gt;&lt;br&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;This is the filesearch script.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Installing the Script&lt;/h2&gt;
&lt;p&gt;Now in your project you can run &lt;code&gt;npm link&lt;/code&gt; to install the script on your system. This creates a symlink to your project so that you can run the project whilst working on it, with no need to keep reinstalling it over and over again.&lt;/p&gt;
&lt;p&gt;Once &lt;code&gt;npm link&lt;/code&gt; has run, you should be able to run &lt;code&gt;filesearch&lt;/code&gt; on the command line and see the string printed back:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~/git/filesearch &amp;gt; filesearch
This is the filesearch script.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Processing Arguments&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;filesearch&lt;/code&gt; is going to be called with one argument, which is going to be the pattern to search through files for. We need to get at that argument. When a Node.js script is executed on the command line, the &lt;code&gt;process.argv&lt;/code&gt; array contains all the arguments used to call that script.&lt;/p&gt;
&lt;p&gt;Change &lt;code&gt;index.js&lt;/code&gt; so it instead logs out this array:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now run the script again, this time with an argument:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~/git/filesearch &amp;gt; filesearch foo
[ &#39;node&#39;, &#39;/Users/jackfranklin/.nvm/v0.10.32/bin/filesearch&#39;, &#39;foo&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first argument is always &lt;code&gt;node&lt;/code&gt;, and the second is the path to the file that has been executed. Any following arguments are ones that the user has called your script with, and those are the ones we care about. We can use &lt;code&gt;slice&lt;/code&gt; to get an array of just the arguments we need:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; userArgs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; searchPattern &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; userArgs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have the one argument we need.&lt;/p&gt;
&lt;h2&gt;Searching for Files&lt;/h2&gt;
&lt;p&gt;We&#39;ll hand the actual searching of the files over to a combination of two Unix commands, &lt;code&gt;ls&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;. We can use &lt;code&gt;ls -a&lt;/code&gt; to list all files in the current directory, and pass them to &lt;code&gt;grep&lt;/code&gt; to search for our actual pattern.&lt;/p&gt;
&lt;p&gt;To run a command in the system we can use the &lt;code&gt;exec&lt;/code&gt; method of the &lt;code&gt;child_process&lt;/code&gt; module - a module that comes with Node and doesn&#39;t need to be separately installed - to execute the right command, passing in the search pattern the user passed in through to &lt;code&gt;grep&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; exec &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;child_process&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exec&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; child &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ls -a | grep &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; searchPattern&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token parameter&quot;&gt;err&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  stdout&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  stderr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stdout&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that is that! We can now run &lt;code&gt;filesearch&lt;/code&gt; and see the results:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~/git/filesearch &amp;gt; filesearch package
package.json
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;If this was a real module that I was working on publishing there&#39;s a couple of things I&#39;d do before hitting &lt;code&gt;npm publish&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ensure a good, well written README&lt;/li&gt;
&lt;li&gt;decide on an initial version number (I tend to go for &lt;code&gt;0.1.0&lt;/code&gt;) and then follow &lt;a href=&quot;http://semver.org/&quot;&gt;semver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When your module is ready, simply run &lt;code&gt;npm publish&lt;/code&gt; to push it onto npm. If you&#39;ve not registered on npm, you can run &lt;code&gt;npm adduser&lt;/code&gt; and follow the prompts to set up and authenticate yourself.&lt;/p&gt;
&lt;p&gt;Once published, users can then install your module using &lt;code&gt;npm install --global filesearch&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Predictions on JavaScript in the next 12 months</title>
    <link href="http://www.jackfranklin.co.uk/blog/the-state-of-javascript/"/>
    <updated>2015-05-30T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/the-state-of-javascript/</id>
    <content type="html">&lt;p&gt;Recently I gave a talk called &amp;quot;The State of JavaScript&amp;quot; at the inaugural meetup
of the &lt;a href=&quot;https://twitter.com/london_js&quot;&gt;London JS Community&lt;/a&gt;. You
can find the slides for this below:&lt;/p&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;d15b87038dbc468ba94e31d0fef5118f&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;http://speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;In this post I&#39;d like to focus specifically on the end of the talk, when I
discuss my predictions for what we&#39;ll see happen in the next 12 months or so
with JavaScript. Be warned this is quite opinionated, and I don&#39;t expect people to
agree with everything I say! You should read this as &amp;quot;what Jack thinks&amp;quot; rather
than &amp;quot;what will happen&amp;quot;. Find me &lt;a href=&quot;http://twitter.com/Jack_Franklin&quot;&gt;on Twitter&lt;/a&gt;
if you&#39;d like to discuss things further.&lt;/p&gt;
&lt;h1&gt;Predictions&lt;/h1&gt;
&lt;p&gt;I made 8 predictions on what I think we&#39;ll see in the next 12 months, and most
of these are influenced by the three core goals of ECMAScript 2015 (formerly
ES6), which hopes
to provide a better language for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;complex applications&lt;/li&gt;
&lt;li&gt;libraries&lt;/li&gt;
&lt;li&gt;code generation (languages that compile to JS)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are by no means the most bold of predictions, more so thoughts on what I
think will happen in the next year or so.&lt;/p&gt;
&lt;h3&gt;1: Fewer people will write JavaScript without a compilation step&lt;/h3&gt;
&lt;p&gt;We&#39;re seeing this trend already, libraries like
&lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; and &lt;a href=&quot;http://babeljs.io/&quot;&gt;Babel&lt;/a&gt;
have built on what &lt;a href=&quot;http://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt; showed people
wanted, by building on top of JavaScript and compiling down to JavaScript.
CoffeeScript deserves a lot of credit here: it was the first project that really
did this and showed that people were willing to trade a slightly more complex
workflow for additional functionality.&lt;/p&gt;
&lt;p&gt;Babel is slightly different in that all the new functionality it provides is
part of ECMAScript 2015 or beyond, so everything it implements in theory
will eventually be in the browser. Going forward, Babel, TypeScript and
&lt;a href=&quot;https://github.com/clojure/clojurescript&quot;&gt;ClojureScript&lt;/a&gt; will probably be the
three I&#39;d back to become even more popular.&lt;/p&gt;
&lt;p&gt;As an aside, I&#39;m really interested to see what becomes of types in JavaScript.
TypeScript has proven that there&#39;s not only a demand but a strong argument for
having types in the language, and libraries like
&lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;ImmutableJS&lt;/a&gt; have become very popular
too.&lt;/p&gt;
&lt;h3&gt;2: Smaller libraries (and the composing of) will be preferred over large frameworks&lt;/h3&gt;
&lt;p&gt;Alongside the larger, fully featured frameworks of Angular, Ember and others,
there&#39;s a myriad of smaller libraries that focus on doing one thing, and doing
it really well. You could even argue that ReactJS is a good example of this; as
a library it provides just the view layer for an application, and nothing more.
Given that npm provides a (relatively) easy way to install and manage all these
libraries, I think it will become more common for developers to construct their
own stacks of small libraries that can be swapped in and out, over using a large
framework where you&#39;re stuck with what it provides.&lt;/p&gt;
&lt;h3&gt;3: Focus on libraries that do one thing and one thing well&lt;/h3&gt;
&lt;p&gt;Related very much to the previous point, I think that there will be an even
bigger focus on the development and release of libraries that exist to solve one
problem, and do it very well. This feels like a natural process as an ecosystem
matures, and we figure out the best solutions to new problems (such as client
side &amp;quot;MVC&amp;quot; approaches). Why write an entire framework when you could write a
small library to plug the one problem you need to fix, and then couple it with
some other libraries that provide the rest of the functionality you need.&lt;/p&gt;
&lt;h3&gt;4: Large, fully-featured frameworks will remain rightly popular&lt;/h3&gt;
&lt;p&gt;The previous two thoughts might make you think that I&#39;m predicting the demise of
Angular, Ember and so on. This is definitely not the case. There will always be
(and quite rightly so) a use case and need for these larger frameworks.&lt;/p&gt;
&lt;h3&gt;5: The use of compilers (Babel etc.) will be abstracted for us by generic build tools&lt;/h3&gt;
&lt;p&gt;More and more developers will use compilers like Babel, but they won&#39;t do it by
directly installing and running Babel. Most will use it through some other
system like &lt;a href=&quot;http://jspm.io/&quot;&gt;jspm&lt;/a&gt; or &lt;a href=&quot;http://webpack.github.io/&quot;&gt;webpack&lt;/a&gt;,
generic tools that abstract away the compiling step and provide all the
functionality you could ever need.&lt;/p&gt;
&lt;h3&gt;6: Running the same JavaScript client and server side will be common&lt;/h3&gt;
&lt;p&gt;There are a lot of benefits to running the same application on your client and
server. At GoCardless, we just launched the new gocardless.com, a ReactJS
application that runs on client and server (we &lt;a href=&quot;https://gocardless.com/blog/how-we-built-the-new-gocardless.com/&quot;&gt;blogged about how we did
it&lt;/a&gt;) and it&#39;s
gone really well. I expect that tools will grow out to serve this demand and
that the approach will be refined over time.&lt;/p&gt;
&lt;h3&gt;7: As ES2015 implementations complete, we&#39;ll be writing ES7 already&lt;/h3&gt;
&lt;p&gt;Tools like Traceur and Babel (initially called 6to5) initially existed to let us
write ES2015 ahead of it being fully supported across browsers. However they
have since grown to support upcoming features of ECMAScript7 and beyond. I can&#39;t
see a time where we won&#39;t run our code through something like Babel, because by
the time ES2015 is fully implemented, the next version of the language will be
well under way. In fact, this is a good thing, because it should let new proposed
features be tested by developers before they are implemented. The feedback loop
should be quicker as a result of people writing ES7 way before release and that
can only be a benefit to everyone involved.&lt;/p&gt;
&lt;h3&gt;8: The rate of new frameworks will begin to slow down&lt;/h3&gt;
&lt;p&gt;Framework booms are to be expected when a new approach to web development comes
along. The swap to client side applications really began with BackboneJS, before
many others came along. Every week it felt like a new framework hit the internet
but recently to me it feels like that&#39;s slowed down a little. Angular and Ember
have emerged as the two most popular options, but we&#39;ve not seen as many new
options really catch on. I think as we&#39;ve figured out the best approaches for
building and architecting client side applications, we&#39;ve picked out frameworks
and stuck with them. That isn&#39;t to say another framework couldn&#39;t come along, but
I&#39;d be surprised if in 12 months the focus isn&#39;t still on the frameworks that
we&#39;re using at the moment.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;They&#39;re my thoughts on what we could see happen over the next 12 months or so,
and I&#39;d be keen to hear what everyone else thinks. I&#39;m pretty sure that I&#39;ll get
things wrong, too! There are also other things I&#39;m interested to see more of
once they are released, including Facebook&#39;s work on &lt;a href=&quot;http://facebook.github.io/react/blog/2015/02/20/introducing-relay-and-graphql.html&quot;&gt;Relay and
GraphQL&lt;/a&gt;.
It&#39;s hard to say much about the tools when they have yet to be fully open
sourced, but I&#39;ve no doubt they will have an impact when they are.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;My thanks to &lt;a href=&quot;https://twitter.com/maxalfiemurdoch&quot;&gt;Max Murdoch&lt;/a&gt; for his
reviewing of this post.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Array methods in ECMAScript 6</title>
    <link href="http://www.jackfranklin.co.uk/blog/es6-arrays/"/>
    <updated>2015-09-01T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/es6-arrays/</id>
    <content type="html">&lt;p&gt;I&#39;ve written at length about some of the new features coming to JavaScript with ES6, including arrow functions, classes, modules and destructuring. Today I&#39;d like to explore some of the smaller additions, starting with new methods that are being added to arrays. This isn&#39;t a comprehensive list, rather a selection of some that I&#39;ve found really useful.&lt;/p&gt;
&lt;p&gt;Rather that list compatability information here about what is and what isn&#39;t supported across transpilers and browsers, you should refer to the &lt;a href=&quot;https://kangax.github.io/compat-table/es6/#Array.prototype_methods&quot;&gt;relevant section of the Kangax compat table&lt;/a&gt;. Paul Miller&#39;s &lt;a href=&quot;https://github.com/paulmillr/es6-shim/&quot;&gt;ES6 Shim&lt;/a&gt; includes polyfills for a number of the methods I&#39;m going to mention today, too. All code examples below were run through Babel.&lt;/p&gt;
&lt;p&gt;We&#39;ll start with methods defined on the prototype before looking a couple of new static Array methods.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;Array.prototype.find&lt;/code&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find&quot;&gt;mdn&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt; lets you iterate through an array and get the first element back that causes the given callback function to return &lt;code&gt;true&lt;/code&gt;. Once an element has been found, the function immediately returns. It&#39;s an efficient way to get at just the first item that matches a given condition:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; numbers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; oddNumber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;oddNumber&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might think this is similar to &lt;code&gt;filter&lt;/code&gt; (an ES5 method), but whereas &lt;code&gt;filter&lt;/code&gt; always returns an array of matches (and will return multiple matches), &lt;code&gt;find&lt;/code&gt; always returns the actual element.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;Array.prototype.findIndex&lt;/code&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex&quot;&gt;mdn&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;findIndex&lt;/code&gt; behaves very similarly to &lt;code&gt;find&lt;/code&gt;, but instead of returning the element that matched, it returns the index of that element.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; people &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;jamie&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;isaac&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; jackIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; people&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;jackIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;code&gt;Array.prototype.entries&lt;/code&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries&quot;&gt;mdn&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;entries&lt;/code&gt; is a function that returns an &lt;code&gt;Array Iterator&lt;/code&gt; (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;mdn docs for interators&lt;/a&gt;) that can be used to loop through the array&#39;s keys and values. &lt;code&gt;entries&lt;/code&gt; will return an array of arrays, where each child array is an array of &lt;code&gt;[index, value]&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; people &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;jamie&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;isaac&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; entries &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; people&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entries&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [0, &#39;jamie&#39;]&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entries&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [1, &#39;jack&#39;]&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entries&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [2, &#39;isaac&#39;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also use the spread operator to get back an array of the entries in one go:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; people &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;jamie&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;isaac&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; entries &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; people&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;entries&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [[0, &#39;jamie&#39;], [1, &#39;jack&#39;], [2, &#39;isaac&#39;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although I won&#39;t mention them in any detail here, we also have the new &lt;code&gt;keys&lt;/code&gt; (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys&quot;&gt;mdn&lt;/a&gt;) and &lt;code&gt;values&lt;/code&gt; (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values&quot;&gt;mdn&lt;/a&gt;) methods, which return an iterator of the array keys and the array values respectively.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;Array.from&lt;/code&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from&quot;&gt;mdn&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Array.from&lt;/code&gt; takes many forms, &lt;a href=&quot;https://kangax.github.io/compat-table/es6/#Array_static_methods&quot;&gt;as the ES6 compat table shows&lt;/a&gt;, but its general function is to enable the creation of a new array from an array like object. As its first argument it can accept something that&#39;s array like (has &lt;code&gt;length&lt;/code&gt; and indexed items), along with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;iterable objects&lt;/a&gt;, like the newly added &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;Map&lt;/code&gt; in ES6.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hello&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]&lt;/span&gt;&lt;br&gt;&lt;br&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [1, 2, 3]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; namesSet &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;jamie&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;namesSet&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [&#39;jamie&#39;, &#39;jack&#39;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;from&lt;/code&gt; can also take a second argument, which is a map function to be applied to each element:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [1, 4, 9]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because the method can take array like objects, we can use it to generate arrays of values too:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;val&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [0, 1, 2, 3]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each time the mapping function gets called, the &lt;code&gt;val&lt;/code&gt; argument will be &lt;code&gt;undefined&lt;/code&gt;, as this object has no actual values, but the &lt;code&gt;key&lt;/code&gt; argument will be &lt;code&gt;0&lt;/code&gt;, then &lt;code&gt;1&lt;/code&gt; and so on. This lets us generate arrays of numbers, but we can also return whatever we&#39;d like from the mapping function:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [&#39;jack&#39;, &#39;jack&#39;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With its ability to take array like objects along with iterators, and a custom mapping function, &lt;code&gt;Array.from&lt;/code&gt; is incredibly versatile.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It&#39;s the addition of smaller methods like the ones I&#39;ve mentioned above, along with the larger features, that make ES6 such a pleasure to work with. Get familiar with the above methods, and similar additions across other JS built-ins, and you&#39;ll find yourself wondering how you ever coped without them.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The state of front end tooling</title>
    <link href="http://www.jackfranklin.co.uk/blog/state-of-frontend-tooling/"/>
    <updated>2015-10-12T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/state-of-frontend-tooling/</id>
    <content type="html">&lt;p&gt;There&#39;s been a lot of posts written recently on the web about the state of tooling in front-end development and the opinion that many share that the environment has become overwhelming both for the beginner developer and the more experienced developer.&lt;/p&gt;
&lt;p&gt;At &lt;a href=&quot;https://futureofwebapps.com/london-2015/&quot;&gt;Future of Web Apps 2015&lt;/a&gt; I watched a really interesting talk from &lt;a href=&quot;https://twitter.com/ppk&quot;&gt;Peter-Paul Koch&lt;/a&gt; in which he argued that our tooling problem has become an epidemic; and that we should stop encouraging the creation of new tools and libraries. After my talk at FOWA, in which I demoed building applications using &lt;a href=&quot;http://jspm.io/&quot;&gt;jspm&lt;/a&gt;, &lt;a href=&quot;https://github.com/systemjs/systemjs&quot;&gt;SystemJS&lt;/a&gt; and &lt;a href=&quot;http://babeljs.io/&quot;&gt;Babel&lt;/a&gt;, I had an attendee question if the addition of jspm was warranted. It&#39;s a perfectly reasonable question and one that got me thinking.&lt;/p&gt;
&lt;h2&gt;Tools for tool&#39;s sake&lt;/h2&gt;
&lt;p&gt;I explained to the attendee that I use jspm because it solves a problem that I don&#39;t want to have to deal with. In this case, jspm lets me install 3rd party modules from npm and GitHub without me having to deal with configuration or any form of additional build tool, and it also provides the bundling functionality when it comes to deploying my application. Yes, I pay the small overhead of adding another tool, but I can justify it.&lt;/p&gt;
&lt;p&gt;The problem and confusion comes from using tools just because they exist or because they&#39;re the &amp;quot;new shiny&amp;quot; toy that has come along. If you&#39;re adding a tool to your workflow just because someone on the internet said you should, you&#39;re going to hit difficulties. You need to strenuously vet tools before deciding that you&#39;re happy to have them as part of your set up. The way you would do this is by using a tool on a project ultimately, but not without doing some research first. Most projects will provide examples of using them and you should try to marry those up with your project. If you find yourself struggling to explain to a colleague why you think this tool will be a good addition, it&#39;s likely that it isn&#39;t. Don&#39;t force a tool upon an application that it&#39;s not suited for. This isn&#39;t just true for package managers like jspm, but frameworks, polyfills and any form of 3rd party item you might include.&lt;/p&gt;
&lt;p&gt;Additional criteria you might check to decide if a tool is right for you and your project might be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is the project active? This does not mean &amp;quot;committed to in the last three / six months&amp;quot;, but is there a community around it? An active Slack / IRC channel or some form of discussion? Are there many GitHub issues, and are new ones replied to relatively quickly?&lt;/li&gt;
&lt;li&gt;do you know other developers using it? Being able to speak to someone who is heavily invested in a tool is a great way to get information quickly. Additionally, you&#39;ll have more luck bringing other developers into your project if you&#39;re picking tools more people are behind and using.&lt;/li&gt;
&lt;li&gt;do resources exist to help you use it? Are there answers on Stack Overflow, tutorials on other blogs or conference talks you can use when you&#39;re first learning the tool?&lt;/li&gt;
&lt;li&gt;is it well implemented? You don&#39;t have to learn the source code in depth, but there&#39;s other ways to judge this. Has the library been split up into multiple files, are there some tests? Are any pull requests carefully considered before being merged? Does the maintainer carefully tag releases and version their releases properly?&lt;/li&gt;
&lt;li&gt;does the project&#39;s README provide a good starting point? It should explain the motivations behind the project, some examples of its use and links to thorough documentation, tutorials and more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should also forget about trying to &amp;quot;keep up&amp;quot; with the web as more and more tools come along. Tim Kadlec talks about this in his blog post &lt;a href=&quot;http://timkadlec.com/2015/09/the-fallacy-of-keeping-up/&quot;&gt;&amp;quot;The Fallacy of Keeping Up&amp;quot;&lt;/a&gt;, which I recommend reading. It&#39;s just not worth your time and effort to try every tool as they come out and chop and change. Recently someone asked me if they should leave Grunt to try something else like Gulp, and I asked them what problems they were having with Grunt. They weren&#39;t having any, but this person had been told by many that they should consider swapping over. Yes, it&#39;s true that if you&#39;re relying on a tool that&#39;s not been maintained for years you might consider moving over, but don&#39;t let that decision be a knee jerk reaction. We have a skewed view in this industry; an &amp;quot;unmaintained&amp;quot; project on GitHub is one that&#39;s not had a commit in three months. Think longer term, and don&#39;t be afraid to stick to the tools you trust. You should end up with a tried and trusted toolset that you rely on time after time. For me and the projects I work on that&#39;s jspm along with ESLint and a couple of others. For you it might be Grunt, JSHint and CoffeeScript. It doesn&#39;t matter, as long as you can justify each of them to me and spend the time to build up your knowledge and understanding of them.&lt;/p&gt;
&lt;h2&gt;Complexity is inevitable&lt;/h2&gt;
&lt;p&gt;It&#39;s been said time and time again that our tooling setup has gotten incredibly complex, and that it&#39;s made the web much more daunting for new developers. There&#39;s definitely some truth to this - when most of us started writing JavaScript we created an HTML file, added a &lt;code&gt;&amp;lt;script src=&amp;quot;app.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; and wrote our JavaScript in &lt;code&gt;app.js&lt;/code&gt;. We would then open that file in our browser of choice and that was that. If you search for beginner tutorials today a large number of them will introduce you to npm, Sass or some other framework that sits atop the base layer of HTML, CSS and JavaScript (ES5, not ECMAScript 2015).&lt;/p&gt;
&lt;p&gt;For me, that is &lt;strong&gt;still&lt;/strong&gt; the baseline and the one that we should adhere to when introducing new developers to the ecosystem. There&#39;s no doubt in my mind if I&#39;d have had to install Node, run Babel, or set up any other tool, I would probably have given up. I can remember struggling to install Ruby on my machine, something that today I take for granted. We all started from somewhere, and for new developers that somewhere should be an HTML file loaded into a modern browser with one JavaScript file. As that person grows in confidence and knowledge we can begin to layer these tools on top. Additionally, that person&#39;s new found knowledge will enable them to start being able to accurately judge if a particular tool is of interest to them and applicable to their project. Beginners don&#39;t know if a particular tool will suit their project, or if that tool is going to be one they can rely on. Being able to make that call is something that comes with experience, and we shouldn&#39;t force tools onto people until they&#39;re in a position to make the call themselves if it&#39;s a good decision or not.&lt;/p&gt;
&lt;p&gt;As we move more and more functionality to the client, part of the trade off is that we end up with a more complicated tooling set up. If you ever work on a server side language you&#39;ll meet a bunch of tools that have grown out of the requirement to tackle the requirements of authoring and working with a large application. Traditionally in the past we&#39;ve never had to deal with that, and hence there&#39;s never been much of a need for a complicated tool chain. Now we&#39;re building full, stateful applications in the client, it&#39;s inevitable that we&#39;ll need some extra tooling to help us, and we shouldn&#39;t be afraid of that.&lt;/p&gt;
&lt;h2&gt;The wrong type of tools&lt;/h2&gt;
&lt;p&gt;I don&#39;t think that we&#39;re creating too many tools - not only is it great to have a variety, it also encourages competition and improvement. ReactJS is a great example of this; since its introduction and adoption other frameworks like EmberJS have embraced React&#39;s virtual DOM model, and others will follow suit too.&lt;/p&gt;
&lt;p&gt;What&#39;s more interesting to me is the type of tools we&#39;re creating. I&#39;m a big believer of the Unix philosophy: each tool should do one thing, and do it well. This is definitely something we can take into our approach with web development tools. Every individual tool that you add to your project should be able to have its functionality summed up succinctly. We shouldn&#39;t look to use or to create tools that attempt to do everything. This is partly the reason ReactJS has been adopted so quickly - its surface area is very small, and the functionality it provides is well defined. This is partly the reason I&#39;ve stopped using task runners like Gulp or Grunt, and instead prefer to install many smaller modules that each provide a small piece of the puzzle. Of course, I could use Gulp given that all its functionality comes from plugins, but I don&#39;t need that additional complexity. You might, and if you do, that&#39;s great. I&#39;m not saying there&#39;s anything wrong with Gulp, larger frameworks like Angular, or tools that provide a range of features. As we go forwards though we should make a concerted effort to build tools with smaller surface areas. The benefits of this are huge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tools with smaller surface areas are much easier to pick up, and much easier to master&lt;/li&gt;
&lt;li&gt;using a variety of smaller tools means you can swap one out for another with less effort if you find a better option&lt;/li&gt;
&lt;li&gt;it&#39;s easier for people to create but more importantly maintain smaller tools&lt;/li&gt;
&lt;li&gt;it&#39;s much easier to experiment with a smaller tool - you don&#39;t have to rewrite huge parts of your application. This makes it easier to gauge quickly if a tool is right for you or not&lt;/li&gt;
&lt;li&gt;small tools can be composed together to create a larger system. Smaller tools are interopable by default, there is no larger ecosystem defining an API that everything must adhere to. Let each tool do its job, and compose them together to achieve the desired result.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope that this article provides some food for thought, and I&#39;d really love to hear what you think. Please feel free to &lt;a href=&quot;http://twitter.com/Jack_Franklin&quot;&gt;drop me a tweet&lt;/a&gt;, I&#39;d really like to discuss the issues of tooling and what we can do going forward to ensure we head in the right direction.&lt;/p&gt;
&lt;p&gt;Thanks to Alex Young, Shane Hudson, Adam Onishi, Ruth John and Peter Müller for their review of this blog post.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Authoring JavaScript modules with ES6</title>
    <link href="http://www.jackfranklin.co.uk/blog/authoring-modules-in-es6/"/>
    <updated>2015-10-15T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/authoring-modules-in-es6/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Update: this post was updated on 09/11/2015 to use Babel 6, rather than Babel 5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#39;ve spoken and written previously about using tools like &lt;a href=&quot;http://jspm.io/&quot;&gt;jspm&lt;/a&gt; to let you write web applications in ES6 and take care of the details, leaving you free to focus on writing your app and not the tooling around it. Today we&#39;re going to talk about how we can author and publish modules written in ES6, but doing so in a way that&#39;s generic enough to allow the consumer to use your module in Node or through a client side library like jspm, Webpack or Browserify.&lt;/p&gt;
&lt;p&gt;The process isn&#39;t as complicated as you might imagine; thankfully we can offload most of the work to Babel, and the only requirement on our part is to run our ES6 through Babel before publishing the module to npm.&lt;/p&gt;
&lt;p&gt;Let&#39;s get started by first creating a new project, and installing Babel as a developer dependency. We&#39;ll use Babel to convert our ES6 into ES5. This means that whilst we&#39;re able to embrace ES6 as the module author, if the person using our module is unable to, they don&#39;t have to. There&#39;s no extra burden on the end user to do extra work or configuration to use our module.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm init
npm install --save-dev babel-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As of Babel 6 it&#39;s been split into two modules. babel-cli is for using Babel from the command line, and babel-core is for use through NodeJS. We&#39;re going to run Babel on the command line, so we&#39;ll install the CLI.&lt;/p&gt;
&lt;p&gt;The module we&#39;re going to build is a tiny one that takes a GitHub username and uses the new &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/API/Fetch_API&quot;&gt;fetch API&lt;/a&gt; to make a request to the GitHub API for a list of repositories that the user owns. Note that at the time of writing, the fetch API is only supported in Chrome, &lt;a href=&quot;https://github.com/github/fetch&quot;&gt;but a polyfill exists&lt;/a&gt;. If you want a polyfill that works in both Node and in the browser, Matt Andrew&#39;s &lt;a href=&quot;https://github.com/matthew-andrews/isomorphic-fetch&quot;&gt;Isomorphic Fetch&lt;/a&gt; is your best bet.&lt;/p&gt;
&lt;p&gt;It&#39;s up to you if you want to include the polyfill in the module, or suggest to users that they use it. Personally I prefer to let the end user decide, they might not need a polyfill, or have a particular favourite, and I don&#39;t want to force that on them.&lt;/p&gt;
&lt;p&gt;Because we&#39;ll be converting our source code into code that we then publish, I like to create a directory, typically named &lt;code&gt;src&lt;/code&gt;, that holds our source code. Let&#39;s create &lt;code&gt;src/githubby.js&lt;/code&gt;, that exports the function I mentioned previously:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getReposForUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;https://api.github.com/users/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;username&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/repos&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code makes use of a few ES6 features, including ES6 modules, block scoping, template literals and arrow functions. This code won&#39;t run in many environments right now, and that makes our module pretty useless. We can use Babel&#39;s command line tool to convert this code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;babel -d lib src/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This tells Babel to take every JavaScript file in the &lt;code&gt;src&lt;/code&gt; directory, and output a corresponding compiled file into &lt;code&gt;lib&lt;/code&gt;. However, as of Babel 6, this won&#39;t do anything by default. Babel doesn&#39;t provide any transforms by default, you have to tell it what transforms you want it to perform. Luckily for us Babel also provides a number of presets to quickly configure things. One such preset is &lt;code&gt;babel-preset-es2015&lt;/code&gt;, which configures Babel 6 to transform our code into ECMAScript 5 code. First, install the preset:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev babel-preset-es2015
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then create a &lt;code&gt;.babelrc&lt;/code&gt; file to tell Babel to use that preset:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we run Babel 6, our code will be transformed as we expect. If we take a look at &lt;code&gt;lib/githubby.js&lt;/code&gt;, you&#39;ll see a file that looks similar to the below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;__esModule&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getReposForUser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; getReposForUser&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getReposForUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://api.github.com/users/&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; username &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/repos&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see that Babel has converted our code into JavaScript that is widely supported across browsers and environments like NodeJS.&lt;/p&gt;
&lt;p&gt;The final step is to set up our module such that when we publish it to npm, we first rerun Babel to generate the files in the &lt;code&gt;lib&lt;/code&gt; directory. We also need to tell npm which file it should load when our module is imported by another.&lt;/p&gt;
&lt;p&gt;Firstly, we can add an npm script called &lt;code&gt;prepublish&lt;/code&gt; in our &lt;code&gt;package.json&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;prepublish&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./node_modules/.bin/babel -d lib src/&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&#39;s a very good reason that we call this script &lt;code&gt;prepublish&lt;/code&gt;. When we want to push our module onto npm, we&#39;ll run &lt;code&gt;npm publish&lt;/code&gt;. This is a command built into npm. When we run &lt;code&gt;npm publish&lt;/code&gt;, it will first look for a script called &lt;code&gt;prepublish&lt;/code&gt;, and run that if it exists.&lt;/p&gt;
&lt;p&gt;To tell npm which file it should load by default, we need to edit the &lt;code&gt;main&lt;/code&gt; property in our &lt;code&gt;package.json&lt;/code&gt; file to point to our generated &lt;code&gt;lib/githubby.js&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;lib/githubby.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With both of those set up we can now run &lt;code&gt;npm publish&lt;/code&gt; to publish our module for all to use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jack/jsplayground-example &amp;gt; npm publish

&amp;gt; jsplayground-example@1.0.0 prepublish /Users/jackfranklin/git/jsplayground-example
&amp;gt; babel -d lib src/

src/githubby.js -&amp;gt; lib/githubby.js
+ jsplayground-example@1.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a module that we&#39;ve authored entirely in ES6 that is published in a way that makes it usable to as many different consumers as possible. Nothing in our module is specific to the browser or specific to Node, and a person using this module could be using it in the client or on the server, and it will work just as well on both. In a future article I&#39;ll look at the different ways we can consume this module. If you&#39;d like to grab the code and check out the module for yourself, &lt;a href=&quot;https://github.com/jackfranklin/authoring-es6-module-example&quot;&gt;you can check the example repository on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Elm for JavaScript Developers</title>
    <link href="http://www.jackfranklin.co.uk/blog/elm-for-javascript-developers/"/>
    <updated>2015-11-23T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/elm-for-javascript-developers/</id>
    <content type="html">&lt;p&gt;If you follow me on GitHub or Twitter you&#39;ll have noticed that I&#39;ve been doing a lot of work with &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; recently. Elm is a new language aimed at making it easier to build more robust, complex applications. It compiles to JavaScript but shares very little in common with the language, and its syntax will look familiar to anyone who&#39;s worked with Haskell. In the first of many posts about Elm, I&#39;ll talk through some of the major features of the language and why you should consider giving it a try. Don&#39;t be put off by its different syntax; once you get used to it you&#39;ll realise that it&#39;s a pleasure to work with.&lt;/p&gt;
&lt;h2&gt;Immutability and Pure Functions&lt;/h2&gt;
&lt;p&gt;Every single piece of data you have in your Elm application is immutable. This means that it can never be modified, and will always be set to the value it was given when it was created. What this means in practice is that code is much easier to follow, because you know it hasn&#39;t changed. As an example, think about the below JavaScript code:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;doSomethingWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Without executing that code, are you able to make any guarantees about the value of &lt;code&gt;person&lt;/code&gt; once &lt;code&gt;doSomethingWith&lt;/code&gt; has executed?&lt;/p&gt;
&lt;p&gt;None.&lt;/p&gt;
&lt;p&gt;Because objects in JavaScript are mutable, anything could have happened to &lt;code&gt;person&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a fruitful source of bugs in larger applications. Functions that modify the state of the world, by mutating variables available to it, are functions with &lt;strong&gt;side effects&lt;/strong&gt;. Functions like this are difficult to debug and harder to work with. They are also harder to test and you should aim to avoid them whenever possible.&lt;/p&gt;
&lt;p&gt;In Elm, every function is &lt;strong&gt;pure&lt;/strong&gt;. This means two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given an input X, it will always result in output Y. If you give a function the same value, it will always produce the same result.&lt;/li&gt;
&lt;li&gt;The function has no side effects, and does not mutate anything or change the state of the world around it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&#39;s entirely possible to create functions like this in JavaScript, and you can make it a rule in your application that functions should be pure. Elm enforces it due to its immutable nature, and this means it&#39;s impossible for impure functions to sneak into your code base, either through code you write or through code in a 3rd party library you&#39;re using.&lt;/p&gt;
&lt;p&gt;You might be wondering how you&#39;re expected to keep track of state in your application when you can&#39;t mutate values. This is entirely possible in Elm using Signals, and we&#39;ll visit it in a later article.&lt;/p&gt;
&lt;h2&gt;Types&lt;/h2&gt;
&lt;p&gt;Elm is a statically typed language. This might sound off-putting, but it actually leads to far more robust applications. In Elm every value has a type.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;Hello World&amp;quot; - String Type
True - Boolean type
3 - number type
3.14 - Float type
[1, 2, 3] - List number type
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might think this is similar to JavaScript, and you&#39;d be right. In JavaScript (and every other programming language), values have a particular type. The crucial difference comes when we pair this type system with functions. In JavaScript you might have a function that can take multiple types, and return multiple types:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;someMadeUpFn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;someMadeUpFn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Foo&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;someMadeUpFn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;jack&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additionally, JavaScripts type system is &lt;strong&gt;dynamic&lt;/strong&gt;, which means types are only decided at &lt;strong&gt;runtime&lt;/strong&gt;, when your code is executed. Elm&#39;s type system is &lt;strong&gt;static&lt;/strong&gt;, which means the compiler can figure out the types ahead of time. We&#39;ll come back to this later.&lt;/p&gt;
&lt;p&gt;In the code above there are no restrictions on the types of the arguments that &lt;code&gt;someMadeUpFn&lt;/code&gt; takes, and there&#39;s no restrictions on the type of the value it returns either. In Elm we have to explicitly declare all the types (actually, we could leave it up to the compiler to infer the types, but it&#39;s best practice to declare them). The below code creates a function &lt;code&gt;square&lt;/code&gt; that takes an integer and returns another.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;square : Int -&amp;gt; Int
square x = x * x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If I were to write the same function in JavaScript, I&#39;d write:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the first line of our Elm function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;square : Int -&amp;gt; Int
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a &lt;strong&gt;type annotation&lt;/strong&gt; that tells Elm that this function will take one argument which will be an integer, and return a value that&#39;s also an integer. That means if we try to call this function with a different data type, we&#39;ll get an error. Although this restriction can take some time to adjust to, it actually leads to much cleaner code that&#39;s easier to work with and follow. It also means you realise straight away if you&#39;re using a function incorrectly.&lt;/p&gt;
&lt;h2&gt;Compiling&lt;/h2&gt;
&lt;p&gt;Above we noted that trying to call a function with the wrong types causes an error. Even better, we get these errors at &lt;strong&gt;compile time&lt;/strong&gt;. Elm as a language compiles to JavaScript, and we need to run the compiler to generate JavaScript from our Elm code. Elm&#39;s compiler is smart, and is able to check the types of values when it compiles our code into JavaScript. For example, if I take this Elm code and try to compile it, we&#39;ll get an error. Don&#39;t worry about the specifics of the syntax, but know that this code will call the &lt;code&gt;square&lt;/code&gt; function with the argument &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;square : Int -&amp;gt; Int
square x = x * x

main =
  square &amp;quot;Hello&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&#39;s what the compiler gives me:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The argument to function `square` is causing a mismatch.

5│   square &amp;quot;Hello&amp;quot;
            ^^^^^^^
Function `square` is expecting the argument to be:

    Int

But it is:

    String
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How great is that?! The compiler detected our mistake, and rather than getting an odd error when we run the code in the browser, we instead see a much nicer error telling us of our mistake ahead of time.&lt;/p&gt;
&lt;h2&gt;Getting started with Elm&lt;/h2&gt;
&lt;p&gt;I hope that this post has peaked your interest in this language. In the coming weeks I&#39;ll be posting more about Elm and how to get started, but if this post has you eager for more here&#39;s some resources I&#39;d recommend:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://elm-lang.org/docs/from-javascript&quot;&gt;Comparison of Elm and JS Syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://elm-lang.org/docs/syntax&quot;&gt;Elm syntax introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pragmaticstudio.com/elm&quot;&gt;Elm video course ($24 but recommended)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jackfranklin/elm-game-of-life&quot;&gt;My Game of Life implementation in Elm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jackfranklin/elm-connect-four&quot;&gt;Connect Four in Elm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Better bundles with Rollup</title>
    <link href="http://www.jackfranklin.co.uk/blog/better-bundles-rollup/"/>
    <updated>2016-02-05T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/better-bundles-rollup/</id>
    <content type="html">&lt;p&gt;Recently I&#39;ve been hearing a lot about &lt;a href=&quot;https://github.com/rollup/rollup&quot;&gt;Rollup&lt;/a&gt;, a new JavaScript bundling tool that aims to produce smaller bundling sizes through &lt;em&gt;tree shaking&lt;/em&gt;, which is the process of taking an application and figuring out which code is actually used.&lt;/p&gt;
&lt;p&gt;Sam Saccone&#39;s &lt;a href=&quot;https://github.com/samccone/The-cost-of-transpiling-es2015-in-2016&quot;&gt;cost of transpiling ES2015&lt;/a&gt; repository also peaked my interest by comparing bundle sizes of popular bundling solutions. Rollup performed well in it and I was keen to give it a go!&lt;/p&gt;
&lt;h2&gt;What is Tree Shaking?&lt;/h2&gt;
&lt;p&gt;A bundler that supports tree shaking will &amp;quot;shake&amp;quot; your application when it bundles it to see which code is actually used. Think of this like shaking a tree branch and seeing which leaves stay on it. This is most effective when you&#39;re depending on a huge library, Lodash for example, but only use one or two of the methods in it. A bundling tool that can calculate which parts of the library are used and only include them will cut out the vast majority of the library, which is unused. With a large application that includes many 3rd party dependencies we can dramatically reduce the size of our bundle we ship to users.&lt;/p&gt;
&lt;h2&gt;Isn&#39;t this dead code elimination?&lt;/h2&gt;
&lt;p&gt;There&#39;s a subtle difference that the &lt;a href=&quot;https://github.com/rollup/rollup&quot;&gt;rollup README&lt;/a&gt; notes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rather than excluding dead code, we should be including live code (aka &#39;tree-shaking&#39;). That&#39;s only possible with ES6 modules.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;## ES2015 Modules required&lt;/p&gt;
&lt;p&gt;We need our application to be written in ES2015 modules because they allow us to only import parts of a module. That is, rather than:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; each &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;lodash&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;each&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which requires the entire module to be loaded, we can instead in ES2015 say:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; each &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;lodash&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ES2015 modules are &lt;em&gt;static&lt;/em&gt;, which means that their imports and exports are known without having to run the application. For example, the following isn&#39;t allowed in an ES2015 module:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;something&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rollup is able to parse your ES2015 application and its dependencies and eliminate any code that isn&#39;t used.&lt;/p&gt;
&lt;h2&gt;ES2015 TodoMVC&lt;/h2&gt;
&lt;p&gt;To demonstrate this in action I took the &lt;a href=&quot;https://github.com/tastejs/todomvc/tree/gh-pages/examples/vanilla-es6&quot;&gt;vanilla ES6 TodoMVC example&lt;/a&gt; as a base. To be clear, this is not a criticism of this project, it&#39;s well written and a great example ES2015 application. I picked it because it was a good sized project to experiment if Rollup would make a difference.&lt;/p&gt;
&lt;h2&gt;Bundling with Browserify&lt;/h2&gt;
&lt;p&gt;Out of the box that project comes with Babel 6 and Browserify for building. To try to be as fair as possible I updated the Browserify build process to include &lt;a href=&quot;https://github.com/hughsk/uglifyify&quot;&gt;Uglifyify&lt;/a&gt;, a Browserify transform which minifies code as it&#39;s run through Browserify. Uglifyify can make some extra optimisations due to being run on each file, so it&#39;s worth including. To generate the Browserify bundle I ran:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;babel src --presets es2015 --out-dir=dist &amp;amp;&amp;amp; browserify -t uglifyify dist/app.js | uglifyjs -c &amp;gt; dist/bundle.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This runs Babel with the ES2015 preset and then runs the processed code through Browserify, using the Uglifyify transform and then minifying again with UglifyJS to be most effective. &lt;strong&gt;If you have any ideas on how to optimise this further, please let me know and I&#39;ll update the post&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Running this on my machine gives me a file that&#39;s 15.8KB in size. Not bad, but can we do better?&lt;/p&gt;
&lt;h2&gt;Bundling with Rollup&lt;/h2&gt;
&lt;p&gt;There&#39;s a bit of extra work to get Rollup playing nicely. Rollup requires code written with ES2015, but Babel&#39;s default ES2015 plugin set will convert the code into CommonJS. Therefore we can&#39;t use that preset in order to transpile our code. Thankfully Rollup publishes its ES2015 preset that matches Babel&#39;s which the exclusion of the CommonJS plugin. First I installed that and Rollup itself, along with the Rollup Babel plugin and the Rollup Uglify plugin.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev babel-preset-es2015-rollup rollup rollup-plugin-babel rollup-plugin-uglify
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I also can&#39;t do everything I need to do with Rollup in a command line call, so I created &lt;code&gt;rollup-build.js&lt;/code&gt; to contain my code:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; rollup &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rollup&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; babel &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rollup-plugin-babel&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; uglify &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rollup-plugin-uglify&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;rollup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// tell rollup our main entry point&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;src/app.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// configure rollup-babel to use the ES2015 Rollup preset&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// and not transpile any node_modules files&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;node_modules/**&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;es2015-rollup&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// minify with uglify&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;uglify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// write bundle to a file and use the IIFE format so it executes immediately&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; bundle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;iife&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;dist/rollup-bundle.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Bundle created&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To run this code I first need to run it through Babel (this is optional, I could have written the above script using only features Node supports), so I&#39;ll install &lt;code&gt;babel-cli&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev babel-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then I can generate the Rollup bundle:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;babel-node --presets es2015 rollup-build.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That generates &lt;code&gt;dist/rollup-bundle.js&lt;/code&gt;, which comes in at 11.3KB in size, a saving of approximately 4.5KB.&lt;/p&gt;
&lt;h2&gt;Update&lt;/h2&gt;
&lt;p&gt;Rich Harris, the creator of Rollup, pointed out to me that you can indeed have a config file and use the command line version of Rollup. To do this create &lt;code&gt;rollup.config.js&lt;/code&gt; which looks like so:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; babel &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rollup-plugin-babel&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; uglify &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;rollup-plugin-uglify&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// tell rollup our main entry point&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;src/app.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;dist/rollup-bundle.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;node_modules/**&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;es2015-rollup&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;uglify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then we can run &lt;code&gt;rollup -c&lt;/code&gt; to achieve the same result.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Even on this small project with no external dependencies Rollup&#39;s build was able to save 4.5KB on an initial bundle of 15.8KB, which is a saving of over 33%. On a larger project with more dependencies and code I&#39;d be willing to bet Rollup would save more.&lt;/p&gt;
&lt;p&gt;In a future post I will do more exploring with Rollup and look at how we&#39;d configure it on a much larger project that contains npm dependencies, and modules written in CommonJS (that Rollup, without a plugin) can&#39;t parse.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Releases: ES2016 and Beyond</title>
    <link href="http://www.jackfranklin.co.uk/blog/es2016-and-beyond/"/>
    <updated>2016-02-08T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/es2016-and-beyond/</id>
    <content type="html">&lt;p&gt;ES2015 introduces a huge new set of features to the language, many of them welcomed, but does so at a huge cost: there&#39;s a vast amount for people to learn. From arrow functions to sets, maps, classes and destructuring, ES2015 is almost like learning an entirely new version of JavaScript. Quite understandably this has overwhelmed a lot of people and caused them to have concern about the future of the language.&lt;/p&gt;
&lt;p&gt;Thankfully it was widely recognised that big bang releases like ES2015 are not the way forward - going so long between releases has many issues and it also leads to an unwillingness from many sections of the community to pick up and learn the new additions until they are supported across most popular browsers.&lt;/p&gt;
&lt;h2&gt;ES2016&lt;/h2&gt;
&lt;p&gt;The good news if you&#39;ve been left feeling like you&#39;re entirely lost in the world of JavaScript is that the final feature set for ECMAScript 2016 was confirmed as two new additions: &lt;a href=&quot;http://www.2ality.com/2016/02/array-prototype-includes.html&quot;&gt;&lt;code&gt;Array.prototype.includes&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;http://www.2ality.com/2016/02/exponentiation-operator.html&quot;&gt;exponentiation operator&lt;/a&gt;. I&#39;ve linked to posts by Dr Axel Rauschmayer who explains the features thoroughly. This means when ES2016 comes into action there&#39;s two small, succinct additions to the language that shouldn&#39;t take long to pick up. Once more, this is how it&#39;s going to be for every JavaScript release going forward: once a year, containing any proposals that have made it to Stage 4, the final stage of the proposal process.&lt;/p&gt;
&lt;p&gt;If you&#39;re concerned that you&#39;ve barely got up to speed on ES2015 and now you have an entirely new version to learn, there&#39;s two reasons not to worry:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES2016 will have its full specification ratified in the summer and &lt;a href=&quot;http://kangax.github.io/compat-table/esnext/&quot;&gt;browser support isn&#39;t exactly huge yet&lt;/a&gt;, so if you don&#39;t want to care about it until there&#39;s more chance of using it, that&#39;s fine.&lt;/li&gt;
&lt;li&gt;If you do decide you&#39;d like to get up to speed there&#39;s only two features, and both are very self contained.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;JS Going Forward&lt;/h2&gt;
&lt;p&gt;Whilst we&#39;re still a little hungover from the efforts trying to get up to speed with ES2015 and its vast array of features and might be frustrated that a new release has appeared, going forward this bodes really well for the JavaScript community and the adoption of new features introduced to the language. Fast forward another year or two to a point where ES2015 is now history and we&#39;ll be in a place of yearly JS releases containing a small set of features to learn. There should be no more sense of sinking amidst new features or losing track with the progress of the language. I&#39;m personally really excited and confident that this new process will help everyone in the community feel more confident keeping up with JavaScript as it matures and changes.&lt;/p&gt;
&lt;h2&gt;Future Features in the Open&lt;/h2&gt;
&lt;p&gt;If you are someone who wants to keep up with language proposals and have a sense ahead of time of the features that could potentially make it into standard, you absolutely can. Another great thing about the new process is that it&#39;s all hosted in the open in GitHub repositories so anyone is able to take an interest.&lt;/p&gt;
&lt;p&gt;Proposals start at Stage 0, where they can be proposed by anyone who is a member of TC39 (the commmittee who oversee JavaScript) or a non member registered as a contributor. From there they progress through stage 1, 2, 3 and finally stage 4. Stage 4 is hit when there are two native implementations in browsers that are fully spec compliant, at which point the feature is ready to be included in the standard. &lt;a href=&quot;http://www.2ality.com/2015/11/tc39-process.html&quot;&gt;The 2Ality blog has a more thorough article on the details of this process&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The great news is that you can see all of this on GitHub:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tc39/ecma262/blob/master/stage0.md&quot;&gt;A repository of Stage 0 proposals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tc39/ecma262/blob/master/README.md&quot;&gt;A repository of Stage 1-4 proposals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By following those links you can read up more on any particular proposal and get a sense of where it&#39;s at in the process and how likely it is to be included in the specification.&lt;/p&gt;
&lt;p&gt;## Trying features&lt;/p&gt;
&lt;p&gt;With the rise of transpilers like Babel it&#39;s also now much easier to try new features out, whether those are features guaranteed to make it into a future addition, or ones that you&#39;re interested in and would like to try. Most proposals come with a Babel plugin which you can install and then make use of the feature. You should be wary of depending on too many proposals ahead of them making it to stage 3 and beyond (once a proposal gets to stage 3, it&#39;s likely to make it into the standard) but it&#39;s a really nice way to try new features.&lt;/p&gt;
&lt;h2&gt;ES6?&lt;/h2&gt;
&lt;p&gt;The infamous renaming of ES6 to ES2015 made no sense at the time, and lead more to confusion than anything else. However, now we have ES2016 in the works it makes much more sense to stick with the yearly naming than &amp;quot;ES6&amp;quot;, which becomes very ambigious given &amp;quot;ES2015&amp;quot; and &amp;quot;ES2016&amp;quot;. I will also be making an effort to avoid &amp;quot;ES7&amp;quot; as a term and prefer &amp;quot;ES next&amp;quot; or &amp;quot;ES2017 and beyond&amp;quot;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;ES2015 was a huge big bang release that provided equal parts excitement and confusion. Once we move past that the new yearly release cycle will make it much less overwhelming to keep up to date with the latest version of JavaScript and I&#39;m excited to see that happen.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Misconceptions of Tooling in JavaScript</title>
    <link href="http://www.jackfranklin.co.uk/blog/the-react-webpack-tooling-problem/"/>
    <updated>2016-02-24T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/the-react-webpack-tooling-problem/</id>
    <content type="html">&lt;p&gt;I wrote back in 2015 about the &lt;a href=&quot;http://javascriptplayground.com/blog/2015/10/state-of-frontend-tooling&quot;&gt;state of front end tooling&lt;/a&gt; and since that post it&#39;s continued to be a topic I follow with interest. I&#39;m particularly interested in other people&#39;s perceptions of where the JS community is up to in terms of tooling and what people expect to be provided when they start working with a library.&lt;/p&gt;
&lt;p&gt;A library that seems to see this problem most of any is React. I think &lt;a href=&quot;http://twitter.com/scott_riley&quot;&gt;Scott Riley&lt;/a&gt; put this best:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en-gb&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/Jack_Franklin&quot;&gt;@Jack_Franklin&lt;/a&gt; People need to talk about this more; React is becoming synonymous with ‘spending a week in Webpack before you write any code’&lt;/p&gt;&amp;mdash; Scott ☠ (@scott_riley) &lt;a href=&quot;https://twitter.com/scott_riley/status/697833161292701697&quot;&gt;February 11, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;http://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;What I struggle to understand most is &lt;em&gt;why&lt;/em&gt; there is an expectation that React should provide (or be easy) to get working very straightforwardly. I suspect this is partly because React has always been written using JSX and hence some form of transformation has always been required, even if you avoid using React&#39;s ES2015 &lt;code&gt;class&lt;/code&gt; syntax in favour of &lt;code&gt;React.createClass&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Additionally developers fairly new to React often have this misconception that they must set up a project using Webpack with hot reloading, file watching, ES2015 and so on. Don&#39;t get me wrong, Webpack is a fantastic tool and I love working in a project with hot reloading and all the extra developer features, but there&#39;s absolutely nothing wrong with working on a project that makes you have to refresh the page manually! Particularly when starting out with a new ecosystem, setting all that extra stuff up at first is only going to lead to frustration. Focus on writing the JavaScript, and add in the developer functionality you need as you feel more comfortable in the environment.&lt;/p&gt;
&lt;h2&gt;Getting started with React&lt;/h2&gt;
&lt;p&gt;To try to demonstrate how this tooling fascination is mostly avoidable when starting out, I want to show how I would set up a React project if someone new to the library wanted to get up and running and have a play around.&lt;/p&gt;
&lt;p&gt;In the past I would have done this by dropping Babel into an HTML file as a &lt;code&gt;script&lt;/code&gt; tag - something that would mean we could get started with no &lt;code&gt;npm&lt;/code&gt; required - but Babel 6 removed that functionality which means we do have to dive into Node land.&lt;/p&gt;
&lt;p&gt;Firstly I&#39;d set up an &lt;code&gt;index.html&lt;/code&gt; file that loads React, React DOM and then a JavaScript file that Babel will generate for us.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;My React App&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://fb.me/react-0.14.7.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://fb.me/react-dom-0.14.7.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bundle.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;d then create a folder &lt;code&gt;src&lt;/code&gt;, and create &lt;code&gt;src/app.js&lt;/code&gt;. Note that there&#39;s no ES2015 modules or any of that, we&#39;re just creating all our components globally &lt;em&gt;for now&lt;/em&gt;. I&#39;m focusing on getting up and running with a React project quickly and with as little friction as possible. Once the person gets more comfortable we could layer in additional functionality - starting probably with CommonJS modules.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;src/app.js&lt;/code&gt; is a straight forward component and then the &lt;code&gt;ReactDOM&lt;/code&gt; call:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; App &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello World&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;App &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;app&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to install the Babel CLI tool and run it on the files in the &lt;code&gt;src&lt;/code&gt; directory to produce &lt;code&gt;bundle.js&lt;/code&gt;. First I&#39;d install &lt;code&gt;babel-cli&lt;/code&gt; and &lt;code&gt;babel-preset-react&lt;/code&gt; locally. I always install CLI tools locally such that different projects are able to use different versions of tools if they need.&lt;/p&gt;
&lt;p&gt;Before doing the install I&#39;d first run &lt;code&gt;npm init -y&lt;/code&gt; to create a &lt;code&gt;package.json&lt;/code&gt; for us.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev babel-cli babel-preset-react
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can compile our files by calling &lt;code&gt;./node_modules/.bin/babel&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./node_modules/.bin/babel --presets babel-preset-react src --out-file bundle.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then we &lt;em&gt;don&#39;t even need a file server&lt;/em&gt; to run our app - simply opening &lt;code&gt;index.html&lt;/code&gt; in the browser does the trick.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Galeap0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;At this point we could stop now and tell the developer that every time they change their code they need to rerun the above command, but we can do so much better than that.&lt;/p&gt;
&lt;p&gt;Firstly, let&#39;s move this call into a &lt;code&gt;package.json&lt;/code&gt; script, which has two benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we can run it more easily with &lt;code&gt;npm run &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm&lt;/code&gt; will look in &lt;code&gt;./node_modules/.bin&lt;/code&gt; for us, so we can shorten the command a little&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;babel&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;babel --presets babel-preset-react src --out-file bundle.js&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now &lt;code&gt;npm run babel&lt;/code&gt; will get our app built. Babel&#39;s CLI also provides a &lt;code&gt;--watch&lt;/code&gt; flag, which will watch the files for changes and recompile them for us, so we can tack that onto the end of our command to get file watching sorted too:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;babel&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;babel --presets babel-preset-react src --out-file bundle.js --watch&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally if we wanted to avoid doing the manual page refreshes we could look to &lt;a href=&quot;https://github.com/tapio/live-server&quot;&gt;live-server&lt;/a&gt;, a great &lt;code&gt;npm&lt;/code&gt; package that provides us with live reloading out the box. It&#39;s important to note that this is entirely optional though, and I probably wouldn&#39;t do this immediately for someone brand new - having to manually refresh is no huge deal.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev live-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now I can add this as another &lt;code&gt;package.json&lt;/code&gt; script:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;live-server&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;live-server --port=3004&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with that I can run &lt;code&gt;npm run live-server&lt;/code&gt; to get my app running locally and being reloaded for me when files change.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Is the above what I&#39;d recommend for someone new to a library wanting to get started? Yes. Is it what I&#39;d recommend for a very experienced JS developer working on a large app? No. The key takeaway from this blog post is that you can &lt;strong&gt;layer tools and functionality&lt;/strong&gt; as you get more comfortable with the tools and the ecosystem you&#39;re working with. Whilst I&#39;ve used React as the example in this post this applies more generally across the board with any fairly modern JS library (with the exception of Ember and Ember CLI).&lt;/p&gt;
&lt;p&gt;You should start with nothing, and work your way up, rather than jumping in right at the deep end with some complex boilerplate project. Boilerplates are great if you&#39;re familiar with the environment, but a nightmare for a beginner. Taking time to understand exactly what the tools are doing and why we need them will give a greater understanding and appreciation. By introducing beginners with less complex tools we keep the barrier to entry low and hopefully their enjoyment of the language and libraries high.&lt;/p&gt;
&lt;p&gt;Finally, yes our tooling can get better and we can definitely make improvements to keep developers happier and more productive. If you&#39;re jumping into a complex React + ES2015 + JSX + whatever else environment, you have to be prepared to deal with the occasional rough edge and tool problem.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>ReactJS workshops in London</title>
    <link href="http://www.jackfranklin.co.uk/blog/react-workshops-london/"/>
    <updated>2016-02-26T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/react-workshops-london/</id>
    <content type="html">&lt;p&gt;If you&#39;ve ever been interested in learning more about React and getting to grips with the framework then I have some good news for you! I&#39;ve teamed up with &lt;a href=&quot;http://www.whiteoctoberevents.co.uk/&quot;&gt;White October Events&lt;/a&gt; to run two one day ReactJS workshops in London.&lt;/p&gt;
&lt;p&gt;These workshops will be a great chance for you to dive into React with a tonne of hands on exercises (you&#39;ll be writing lots of code!) covering not only the core concepts of React but some of the most popular libraries, including Redux and React Router.&lt;/p&gt;
&lt;p&gt;In addition we&#39;ll look at ES2015, Babel, Webpack and more as we dive into building complex applications with the React ecosystem.&lt;/p&gt;
&lt;p&gt;Tickets will cost £299 which includes lots of refreshements and lunch. The workshops are being run on two dates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.whiteoctoberevents.co.uk/event/reactjs-workshop-march-16/&quot;&gt;21st March 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.whiteoctoberevents.co.uk/event/reactjs-workshop-june-16/&quot;&gt;10th June 2016&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have any questions about the content please feel free to email me: jack at pusher dot com.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using ReactJS without Webpack</title>
    <link href="http://www.jackfranklin.co.uk/blog/react-no-webpack/"/>
    <updated>2016-04-25T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/react-no-webpack/</id>
    <content type="html">&lt;p&gt;Webpack is a fantastic tool but there&#39;s no doubting that as a newcomer to React it&#39;s can be a challenge to get started with. I&#39;ve met numerous developers who have been stumped in their efforts to learn React because they fell into the rabbit hole of Webpack and its configuration.&lt;/p&gt;
&lt;p&gt;To demonstrate how you can focus on learning React without needing ES2015, JSX compilation or Webpack I built a sample repository that you can find &lt;a href=&quot;https://github.com/jackfranklin/react-no-webpack-required&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The repository uses Gulp to concatenate and minify your files into one, and doesn&#39;t do anything to compile ES2015 or JSX. If you&#39;ve wanted to focus on React without anything else to get in your way, give it a try.&lt;/p&gt;
&lt;p&gt;To get started, clone the repository and run &lt;code&gt;npm install&lt;/code&gt; to get Gulp setup. You can then run &lt;code&gt;gulp build&lt;/code&gt; to get your app running and &lt;code&gt;gulp serve&lt;/code&gt; to run a live-server locally, which will refresh when your code changes. Running &lt;code&gt;gulp watch&lt;/code&gt; will rebuild your application everytime a file changes.&lt;/p&gt;
&lt;h2&gt;What, no JSX?&lt;/h2&gt;
&lt;p&gt;JSX is great and I like using it on projects; but it&#39;s another step that can get in the way of focusing on React concepts when getting started. Because JSX gets converted into &lt;code&gt;React.createElement&lt;/code&gt; calls, we can just use that directly instead:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;jack&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// equivalent:&lt;/span&gt;&lt;br&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Foo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;jack&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// equivalent:&lt;/span&gt;&lt;br&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;p&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;span&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, this gets pretty verbose quickly, so I included in the repository a global function &lt;code&gt;h&lt;/code&gt; that is a shorthand:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Foo name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;jack&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// equivalent:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Foo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// equivalent:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;p&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;span&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A natural improvement to this repo would be to add JSX support, but I&#39;ll leave that as an exercise to the reader.&lt;/p&gt;
&lt;h2&gt;No Modules&lt;/h2&gt;
&lt;p&gt;Because this repo avoids ES2015 and any transpilation there is no module system available. Instead we just have a global variable, &lt;code&gt;app&lt;/code&gt;, that contains all of our application. This isn&#39;t great, but storing everything in one global variable isn&#39;t particularly bad practice, and it means that no module system is required.&lt;/p&gt;
&lt;h2&gt;No dependency management&lt;/h2&gt;
&lt;p&gt;All dependencies are stored in &lt;code&gt;vendor&lt;/code&gt; and commited into Git, to avoid any package management confusions or overhead.&lt;/p&gt;
&lt;h2&gt;Should I use this in my big production React app?&lt;/h2&gt;
&lt;p&gt;No, you shouldn&#39;t. Tools like Webpack, ES2015 / JSX transpilation and dependency management are incredibly useful as your app scales, but they are not needed when you&#39;re working on a smaller app. If you&#39;re building a small React application for learning I recommend starting with my repository and then experimenting with adding ES2015, JSX, Webpack and so on as you get more familiar with the ecosystem.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Better data fetching with RemoteDataJS</title>
    <link href="http://www.jackfranklin.co.uk/blog/remote-data-js/"/>
    <updated>2016-06-21T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/remote-data-js/</id>
    <content type="html">&lt;p&gt;One of the things that most of us have to do in our applications is fetch data from a remote data source, typically an API that gives us back some JSON data. This is something that&#39;s pretty straight forward, particularly with the newer &lt;code&gt;fetch&lt;/code&gt; API, and I&#39;m willing to bet most developers would be quite happy writing the code to do this.&lt;/p&gt;
&lt;p&gt;However, something that&#39;s less obvious is how to deal with all the different states that a piece of remote data can be in. I reckon there&#39;s four distinct states:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not requested: no request has yet been made&lt;/li&gt;
&lt;li&gt;Pending: a request has been made, but no data has been returned&lt;/li&gt;
&lt;li&gt;Succeeded: a request has succeeded, and we have some data back&lt;/li&gt;
&lt;li&gt;Failed: a request was made, it went wrong, and we have an error&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dealing with all of those states in your application is tricky, and it&#39;s also dull. No one wants to deal with the error case, and writing the logic to show a spinner when a request is pending is really dull.&lt;/p&gt;
&lt;p&gt;Most of the time people will model their data with a flag that states if the request is loading or not, and then a &lt;code&gt;data&lt;/code&gt; key that is undefined initially and is populated when the request succeeds:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// later&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But then how do you deal with an error that you might want to keep around and store?&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suddenly your state has three keys on it that are all tightly related. In his post &lt;a href=&quot;http://blog.jenkster.com/2016/06/how-elm-slays-a-ui-antipattern.html&quot;&gt;&amp;quot;How Elm slays an antipattern&amp;quot;&lt;/a&gt;, Kris Jenkins describes how Elm&#39;s type system enables you to present data using one type, which he calls &lt;code&gt;RemoteData&lt;/code&gt;, that encapsulates every state that a request can be in. Today I&#39;m announcing my efforts on recreating this in JavaScript with my new library, &lt;a href=&quot;https://github.com/jackfranklin/remote-data-js&quot;&gt;RemoteDataJS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;## RemoteDataJS&lt;/p&gt;
&lt;p&gt;RemoteDataJS is a single object that encapsulates all of the logic and states involved in an HTTP request. You create it and tell it what URL it should make a request to (no request will be made until you tell it to, though):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; githubPerson &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RemoteData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;https://api.github.com/users/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;username&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;newPerson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition, you define an &lt;code&gt;onChange&lt;/code&gt; that will be called with a &lt;em&gt;new instance of &lt;code&gt;RemoteData&lt;/code&gt;&lt;/em&gt; every time the state changes.&lt;/p&gt;
&lt;p&gt;To make a request, you call &lt;code&gt;fetch&lt;/code&gt;, passing in any arguments needed to create the URL:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;githubPerson&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;jackfranklin&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your &lt;code&gt;onChange&lt;/code&gt; callback will then be called twice, first as the request transitions from the starting state of &lt;code&gt;NOT_ASKED&lt;/code&gt; to &lt;code&gt;PENDING&lt;/code&gt;, and then again from &lt;code&gt;PENDING&lt;/code&gt; to &lt;code&gt;SUCCESS&lt;/code&gt; (or, potentially &lt;code&gt;FAILURE&lt;/code&gt; instead).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;fetch&lt;/code&gt; call also returns a promise, and will throw if it fails:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;githubPerson&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;jackfranklin&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/*success!*/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/*fail!*/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Avoiding Mutation&lt;/h2&gt;
&lt;p&gt;Every time your &lt;code&gt;onChange&lt;/code&gt; function is called, or you chain to the promise returned by &lt;code&gt;fetch&lt;/code&gt;, the argument that is passed to your function is a &lt;strong&gt;brand new &lt;code&gt;RemoteData&lt;/code&gt; instance&lt;/strong&gt;. Rather than mutate the existing instance, &lt;code&gt;RemoteData&lt;/code&gt; constructs a new instance of itself, copying all its callback functions and information across, but defining the new state. This means nothing gets mutated and you can avoid weird mutation bugs.&lt;/p&gt;
&lt;h2&gt;With React&lt;/h2&gt;
&lt;p&gt;Because we avoid mutation and provide an &lt;code&gt;onChange&lt;/code&gt; function for you to listen to data changing, it&#39;s easy to tie &lt;code&gt;RemoteData&lt;/code&gt; in with React. First, define an instance of &lt;code&gt;RemoteData&lt;/code&gt; as state:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;githubPerson&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RemoteData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function-variable function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;https://api.github.com/users/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;username&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function-variable function&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;githubPerson&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; githubPerson &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how rather than have multiple keys on our state we can wrap all the logic up in an instance of &lt;code&gt;RemoteData&lt;/code&gt;. In the &lt;code&gt;onChange&lt;/code&gt; call we simply set the state to have the new remote data instance.&lt;/p&gt;
&lt;p&gt;We can then define a &lt;code&gt;render&lt;/code&gt; function that takes our &lt;code&gt;githubPerson&lt;/code&gt; and returns the right response based on the state:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;renderGithubPerson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isNotAsked&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;No Request Made&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isPending&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Loading data from GitHub&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isSuccess&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Name: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isFailure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Failure&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally we can bind a &lt;code&gt;click&lt;/code&gt; event to tell the instance to make the request:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;click() {
  this.state.githubPerson.fetch(&#39;jackfranklin&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://jsbin.com/yefuwapuja/1/edit?js,output&quot;&gt;You can see this example on JSBin&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Using RemoteDataJS&lt;/h2&gt;
&lt;p&gt;I hope the above gives you some context and reasoning about why I think &lt;code&gt;RemoteDataJS&lt;/code&gt; can clear up your data fetching logic and make it easier for you to deal with requests across all states that they can find themselves in.&lt;/p&gt;
&lt;p&gt;If you want to start using it you can &lt;a href=&quot;https://github.com/jackfranklin/remote-data-js&quot;&gt;check out the GitHub repository&lt;/a&gt; to find more thorough documentation and information. RemoteDataJS is available as &lt;code&gt;remote-data-js&lt;/code&gt; on npm for you to install. I&#39;d love to hear your feedback, bug reports and anything else, so please feel free to raise an issue.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Screencast: Creating a React and Webpack Project</title>
    <link href="http://www.jackfranklin.co.uk/blog/react-webpack-workflow-screencast/"/>
    <updated>2016-06-22T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/react-webpack-workflow-screencast/</id>
    <content type="html">&lt;p&gt;Last week at the &lt;a href=&quot;http://www.meetup.com/London-JavaScript-Community/events/227578573/&quot;&gt;London JavaScript Community Meetup&lt;/a&gt; I did a live coding presentation where I created a React project from scratch and configured Webpack to build my application. I also added hot loading to my development workflow and configured ES2015 and JSX support through Babel, along with building a production Webpack file too.&lt;/p&gt;
&lt;p&gt;Today I recorded a screencast of me doing this presentation so you can view even if you weren&#39;t able to make it to the meetup. In it I do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set up Webpack and the Webpack Dev Server.&lt;/li&gt;
&lt;li&gt;Configure Webpack to transpile ES2015 and JSX through Babel.&lt;/li&gt;
&lt;li&gt;Add the react-hot-loader plugin to enable hot reloading of React components.&lt;/li&gt;
&lt;li&gt;Build a small counter application to demonstrate and take advantage of hot loading.&lt;/li&gt;
&lt;li&gt;Create a production Webpack config that can bundle our application into production.&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/171783550&quot; width=&quot;630&quot; height=&quot;394&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/171783550&quot;&gt;A React and Webpack Workflow&lt;/a&gt; from &lt;a href=&quot;https://vimeo.com/javascript&quot;&gt;The JavaScript Playground&lt;/a&gt; on &lt;a href=&quot;https://vimeo.com/&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can find the repository containing all the code &lt;a href=&quot;https://github.com/jackfranklin/react-hot-load-webpack-boilerplate&quot;&gt;on GitHub&lt;/a&gt;. Feel free to fork it or raise an issue if you come across problems.&lt;/p&gt;
&lt;p&gt;In future videos I&#39;ll cover:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Testing React using Node, JSDOM and Tape&lt;/li&gt;
&lt;li&gt;Clever bundling using Webpack to create multiple files&lt;/li&gt;
&lt;li&gt;Quicker rebuilds with the Webpack DLL plugin&lt;/li&gt;
&lt;li&gt;And whatever else you&#39;d like to see :)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Setting up CSS Modules with React and Webpack</title>
    <link href="http://www.jackfranklin.co.uk/blog/css-modules-webpack-react/"/>
    <updated>2016-07-18T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/css-modules-webpack-react/</id>
    <content type="html">&lt;p&gt;One of the biggest problems that developers face with CSS is that CSS is global. Each CSS class gets exposed globally and it’s very easy to inadvertently break a piece of your site when editing or adding CSS for a new feature. In an era where many developers are building websites as components with a framework such as React, CSS is an even bigger problem.&lt;/p&gt;
&lt;p&gt;CSS Modules allow us to write &lt;em&gt;scoped&lt;/em&gt; CSS, just like a variable in JavaScript or any other programming language. We can write CSS for a component and be certain that it won’t leak into other components. You can also have confidence that adding a new component to your application won’t interfere with any other components on the system.&lt;/p&gt;
&lt;p&gt;CSS Modules are a fantastic idea and play particularly nicely with React, but at the time of writing there isn’t a good resource for getting started and setting up React, CSS Modules and Webpack to build everything correctly. In this article I’ll show you how I took a React application and added CSS modules, which Webpack plugins I used for this, and an example of CSS modules in action. If you’d like to get this running yourself you’ll find all the &lt;a href=&quot;https://github.com/jackfranklin/react-css-modules-webpack&quot;&gt;code available on GitHub&lt;/a&gt;. We’ll also look at how we can generate a production &lt;code&gt;bundle.css&lt;/code&gt; file which has all our CSS together and fully minified.&lt;/p&gt;
&lt;h2&gt;The goal&lt;/h2&gt;
&lt;p&gt;What we’re aiming for is to be able to write CSS on a per component basis. That is, for each component we have a corresponding &lt;code&gt;component.css&lt;/code&gt; file that will define the CSS for that component.&lt;/p&gt;
&lt;p&gt;For a component &lt;code&gt;App.js&lt;/code&gt;, we also have &lt;code&gt;app.css&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.app p&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; blue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then in the component we can import this CSS file, as if it was a JavaScript module:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; styles &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./app.css&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can reference the class name in our CSS file:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;This text will be blue&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;None of this works out of the box, but we’ll use Webpack with a couple of additional loaders to get this working. The beauty is that the actual class name in the generated CSS file won’t be &lt;code&gt;.app&lt;/code&gt; as above, but &lt;code&gt;.app-[some-hash]&lt;/code&gt;. By adding a hash to each class name it’s guaranteed that each CSS class declaration is unique (the hash is based on the contents - so if two classes clash it’s because they have the same styles).&lt;/p&gt;
&lt;h2&gt;Webpack Loaders&lt;/h2&gt;
&lt;p&gt;To set this up we’re going to dive into the wonderful world of Webpack loaders. These can be confusing at first, but in essence a Webpack loader is a plugin for Webpack that can apply extra transformations or manipulate files before they are bundled.&lt;/p&gt;
&lt;p&gt;There’s two we need to use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/webpack/style-loader&quot;&gt;&lt;code&gt;style-loader&lt;/code&gt;&lt;/a&gt; is a Webpack loader that can load some CSS and inject it into the document via a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/webpack/css-loader&quot;&gt;&lt;code&gt;css-loader&lt;/code&gt;&lt;/a&gt; is the loader that can parse a CSS file and apply various transforms to it. Crucially it has a CSS Modules mode that can take our CSS and hash the classes as mentioned above.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the project that I’m adding CSS Modules to we already have one loader defined for our JavaScript:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;&#92;.js$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;react-hot&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;babel&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;src&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This configures every JavaScript file to be run through the &lt;code&gt;react-hot&lt;/code&gt; loader, which configures hot module loading, and &lt;code&gt;babel&lt;/code&gt;, which will transpire ES2015 features and the JSX syntax.&lt;/p&gt;
&lt;p&gt;What we need to do is add another configuration for &lt;code&gt;.css&lt;/code&gt; files where we first configure &lt;code&gt;style-loader&lt;/code&gt;, and then &lt;code&gt;css-loader&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;&#92;.css$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;style-loader&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;&#92;.css$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;css-loader&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;localIdentName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;[name]__[local]___[hash:base64:5]&#39;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First we configure the &lt;code&gt;style-loader&lt;/code&gt;, which needs no extra configuration, so we’re set. Then we have to configure &lt;code&gt;css-loader&lt;/code&gt;. The important bit to this is the &lt;code&gt;query&lt;/code&gt; object, which defines two properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;modules: true&lt;/code&gt; turns on the CSS modules mode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localIdentName: &#39;[name]__[local]___[hash:base64:5]&#39;&lt;/code&gt; defines the structure of the generated CSS class should be. You don’t need to worry too much about this, other than knowing that this maps to the generated output. For example, our CSS from above with the class of &lt;code&gt;app&lt;/code&gt; will end up as &lt;code&gt;app__app___2x3cr&lt;/code&gt; in the browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Running Webpack&lt;/h2&gt;
&lt;p&gt;With the above changes to our Webpack configuration we’re done! You can now run Webpack (if you’re running the &lt;a href=&quot;https://github.com/jackfranklin/react-css-modules-webpack&quot;&gt;example repository&lt;/a&gt;, run &lt;code&gt;npm start&lt;/code&gt; to fire up the Webpack dev server) and have your CSS modules converted and working for you in the browser.&lt;/p&gt;
&lt;p&gt;If you’re using the dev server you’ll also note that the CSS is automatically updated when you change without a hard refresh in the browser which is useful during development.&lt;/p&gt;
&lt;h2&gt;Tidying up the Webpack configuration&lt;/h2&gt;
&lt;p&gt;One thing that irks me about the Webpack configuration in its current state is the fact that we have to configure loaders for &lt;code&gt;.css&lt;/code&gt; twice - once for the style loader, and once for the css loader. I’d much rather group these both up into one. However, once you configure multiple loaders you can’t pass in the &lt;code&gt;query&lt;/code&gt; object as we did above, and must use Webpack’s string configuration. In our case if we did that, our configuration would look like so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;&#92;.css$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;style-loader!css-loader?modules=true&amp;amp;localIdentName=[name]__[local]___[hash:base64:5]&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think this is pretty messy and much harder to follow.&lt;/p&gt;
&lt;p&gt;Thankfully I found &lt;a href=&quot;https://github.com/jsdf/webpack-combine-loaders&quot;&gt;webpack-combine-loaders&lt;/a&gt; which enables us to use the &lt;code&gt;query&lt;/code&gt; object syntax to configure a loader, but without having to repeat the &lt;code&gt;test: /&#92;.css$/&lt;/code&gt; line. Using this module our configuration becomes:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;&#92;.css$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;combineLoaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;style-loader&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;css-loader&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;localIdentName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;[name]__[local]___[hash:base64:5]&#39;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think this is cleaner because it’s clearer that we’re using both &lt;code&gt;style-loader&lt;/code&gt; and &lt;code&gt;css-loader&lt;/code&gt; on the same file type.&lt;/p&gt;
&lt;h2&gt;Deploying to Production&lt;/h2&gt;
&lt;p&gt;The final step is to update the production Webpack build to parse all our CSS and generate an outputted CSS file that contains all our CSS. We don’t want to have our CSS injected through Webpack in production, and we don’t want the CSS module transformations to run in the browser; instead we want to simply deploy a generated stylesheet that contains all our styles.&lt;/p&gt;
&lt;p&gt;To do this we can use the &lt;a href=&quot;https://github.com/webpack/extract-text-webpack-plugin&quot;&gt;&lt;code&gt;extract-text-plugin&lt;/code&gt;&lt;/a&gt; for Webpack that will take all files that match a regular expression (in our case we’ll look for CSS files as we did previously) and bundle them all into one file. We can also run them through the CSS Modules transform just like we did in our development config.&lt;/p&gt;
&lt;p&gt;To get started we first need to install the plugin:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install extract-text-webpack-plugin —save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we need to configure the plugin. First we’ll add an entry to the &lt;code&gt;plugins&lt;/code&gt; key in the Webpack configuration:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// at top of file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ExtractTextPlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;extract-text-webpack-plugin&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// in the webpack config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExtractTextPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;styles.css&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This configures the plugin to output to &lt;code&gt;styles.css&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then we will configure the module loader again to find all our CSS files and bundle them together. The configuration here looks similar, we call &lt;code&gt;ExtractTextPlugin.extract&lt;/code&gt;. This takes multiple arguments, where each argument is an individual loader to pass. We first pass &lt;code&gt;style-loader&lt;/code&gt;, and then use &lt;code&gt;combineLoaders&lt;/code&gt; again to generate a string version of the configuration for &lt;code&gt;css-loader&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// JS loader config&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;&#92;.css$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ExtractTextPlugin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string&quot;&gt;&#39;style-loader&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;combineLoaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;css-loader&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;localIdentName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;[name]__[local]___[hash:base64:5]&#39;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we run Webpack with this configuration we’ll have a JavaScript and a CSS file that we can use in production with CSS Modules fully transformed.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There’s a few final pieces we could do to tidy up, but I’m going to leave those as exercises for the reader. The main issue now is that we’re duplicating configuration for the CSS Loader across our development Webpack setup and our production Webpack setup. You might consider extracting a file that contains that configuration, rather than duplicating it.&lt;/p&gt;
&lt;p&gt;CSS Modules are a great way to organise your CSS in a component based system. Here I’ve used them with React but you’ll notice that none of the code in this tutorial is React specific - this approach can be used with other frameworks with no extra effort.&lt;/p&gt;
&lt;p&gt;If you’d like to use this tutorial as a starting point, don’t forget that you can &lt;a href=&quot;https://github.com/jackfranklin/react-css-modules-webpack&quot;&gt;find the repository on GitHub&lt;/a&gt;, and please get in touch if you have any questions. You can find more information on the &lt;a href=&quot;https://github.com/css-modules/css-modules&quot;&gt;CSS Modules repository&lt;/a&gt; and Glenn Maddern’s &lt;a href=&quot;http://glenmaddern.com/articles/css-modules&quot;&gt;“CSS Modules: Welcome to the Future”&lt;/a&gt; blog post.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using the HTML Webpack Plugin for generating HTML files</title>
    <link href="http://www.jackfranklin.co.uk/blog/webpack-html-plugin/"/>
    <updated>2016-07-21T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/webpack-html-plugin/</id>
    <content type="html">&lt;p&gt;Whilst most people use Webpack primarily for their JS scripts, there&#39;s always one final part of deploying that is forgotten: the HTML. In production we often have extra scripts we want to insert (such as Google Analytics) and also we want to insert a &lt;code&gt;script&lt;/code&gt; tag to the minified JavaScript and CSS, which probably will have a different filename each time as we generate files with a hash on the end.&lt;/p&gt;
&lt;p&gt;Recently I came across the &lt;a href=&quot;https://github.com/ampedandwired/html-webpack-plugin&quot;&gt;html-webpack-plugin&lt;/a&gt; and was amazed at how easy it was to add to an application to have all my HTML generated for me too, both in development with the Webpack Dev Server and in production. Following on from my &lt;a href=&quot;http://www.jackfranklin.co.uk/blog/2016/07/css-modules-webpack-react/&quot;&gt;last post about CSS Modules with Webpack&lt;/a&gt;, today I&#39;ll take that codebase and automate the HTML side of deploys using the HTML Webpack plugin.&lt;/p&gt;
&lt;h2&gt;Configuring for Production&lt;/h2&gt;
&lt;p&gt;The first step is to install the plugin, which is done through npm:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install html-webpack-plugin --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, to configure our production deploys, I&#39;ll edit my &lt;code&gt;webpack.config.prod.js&lt;/code&gt; file, first by requiring the plugin:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; HtmlWebpackPlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;html-webpack-plugin&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next I&#39;ll add an entry to the &lt;code&gt;plugins&lt;/code&gt; array where I instantiate the plugin with two properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;template&lt;/code&gt; defines the template that the plugin will use to generate the HTML. I&#39;ll create this shortly.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inject: body&lt;/code&gt; tells the plugin to inject any JavaScript into the bottom of the page, just before the closing &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag, rather than into the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;index.template.ejs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;body&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s the only configuration we need! The plugin will automatically include any files that you&#39;re using Webpack to generate. It supports both JS and CSS files so it&#39;s a great fit with our CSS Modules project.&lt;/p&gt;
&lt;p&gt;Finally I need to create my template. This uses the &lt;a href=&quot;http://www.embeddedjs.com/&quot;&gt;EJS&lt;/a&gt; templating system, which is useful if you need to pass any values into the plugin that should be outputted into the HTML. In our case we don&#39;t though, so our template looks like so:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Content-type&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/html; charset=utf-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Sample App&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#39;&lt;/span&gt;root&lt;span class=&quot;token punctuation&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s it! The resources generated from the bundle will be placed into the HTML at the right points. I can now run &lt;code&gt;webpack --config webpack.config.prod.js&lt;/code&gt; and see that three files are generated; my JS, my CSS and now an &lt;code&gt;index.html&lt;/code&gt; too.&lt;/p&gt;
&lt;p&gt;The generated HTML file looks like so:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Content-type&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/html; charset=utf-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Sample App&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;styles-4585896ecd058603fc99.css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#39;&lt;/span&gt;root&lt;span class=&quot;token punctuation&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/javascript&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;javascripts-4585896ecd058603fc99.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the CSS and the JS were placed into the file.&lt;/p&gt;
&lt;h3&gt;Configuring with Webpack Dev Server&lt;/h3&gt;
&lt;p&gt;Rather than have a template that&#39;s used for my production HTML and a static file I use in development, I&#39;d rather have the same template used for both, to stop my HTML getting out of sync between environments. You might prefer to keep them seperate, but for most of my projects I want the same HTML structure, and I&#39;m happy to trust the HTML Webpack Plugin to insert the right scripts into the right place.&lt;/p&gt;
&lt;p&gt;I can edit &lt;code&gt;webpack.config.dev.js&lt;/code&gt; to use the plugin:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; other requires here&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; HtmlWebpackPlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;html-webpack-plugin&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;dist&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bundle.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;publicPath&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;webpack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;HotModuleReplacementPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;index.template.ejs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;body&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is identical to before, but there&#39;s one change to the configuration that is easier to miss: I&#39;ve changed &lt;code&gt;output.publicPath&lt;/code&gt; from &lt;code&gt;/static&lt;/code&gt; to simply &lt;code&gt;/&lt;/code&gt;. This means that the dev server will generate the files at the root, which means I can load up &lt;code&gt;localhost:3000&lt;/code&gt; and see my generated HTML without having to visit &lt;code&gt;/static/index.html&lt;/code&gt;. It&#39;s a little messy to keep all my generated JavaScript and CSS at this root level, but I don&#39;t mind because I&#39;m using the dev server and the files aren&#39;t ever actually written to disk. If you wanted to keep all the files generated in a folder, you can set &lt;code&gt;publicPath&lt;/code&gt; to &lt;code&gt;/static&lt;/code&gt; (or whatever you&#39;d like) and use that URL when working on your application.&lt;/p&gt;
&lt;p&gt;Now, when I fire up the dev server, I see the generated HTML and everything works as before. Any time I need to change my HTML I can do so in the template and have my development and production HTML environments kept perfectly in sync!&lt;/p&gt;
&lt;p&gt;If you&#39;d like to check out this project in action you can see the &lt;a href=&quot;https://github.com/jackfranklin/react-css-modules-webpack&quot;&gt;react-css-modules-webpack&lt;/a&gt; repository where I&#39;ve added all the functionality described above.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Migrating to Webpack 2</title>
    <link href="http://www.jackfranklin.co.uk/blog/moving-to-webpack-2/"/>
    <updated>2016-10-21T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/moving-to-webpack-2/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt; is on the verge of having its latest major version released, and it&#39;s expected to drop very soon. However, the main thing holding the release back is documentation, and the code is mostly written. I recently took the time to update our work project from Webpack 1 to 2, and thought I&#39;d document the steps taken for anyone else who wants to make the move.&lt;/p&gt;
&lt;p&gt;You can also check out the &lt;a href=&quot;https://webpack.js.org/guides/migrating/&quot;&gt;Migrating from V1 to V2 guide on the Webpack documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Install Webpack 2&lt;/h2&gt;
&lt;p&gt;The first thing to do is install the latest version. Because it&#39;s not a stable release, you have to specify the exact beta version you&#39;d like. At the time of writing it&#39;s 2.1.0-beta.25:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev webpack@2.1.0-beta.25
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you&#39;re using any other Webpack plugins, be aware that they might need updating. For example, the &lt;a href=&quot;https://github.com/webpack/extract-text-webpack-plugin&quot;&gt;Extract Text Plugin has a v2 in beta also&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev extract-text-webpack-plugin@2.0.0-beta.4
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;code&gt;module.loaders&lt;/code&gt; =&amp;gt; &lt;code&gt;module.rules&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This is not a breaking change because &lt;code&gt;module.loaders&lt;/code&gt; will continue to be supported, but in the future it will be deprecated in favour of &lt;code&gt;module.rules&lt;/code&gt;. This is just an easy renaming step.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// before&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token literal-property property&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// after&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token literal-property property&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;code&gt;resolve.modulesDirectories&lt;/code&gt; =&amp;gt; &lt;code&gt;resolve.modules&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Another renaming step, the &lt;code&gt;resolve&lt;/code&gt; options have been renamed:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// before&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token literal-property property&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;modulesDirectories&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// after&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token literal-property property&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;No &lt;code&gt;webpack.optimize.OccurenceOrderPlugin&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;It&#39;s now included by default, so there is no need to have this in our config.&lt;/p&gt;
&lt;h2&gt;Configuring loaders&lt;/h2&gt;
&lt;p&gt;At work we&#39;re using postcss and &lt;a href=&quot;https://github.com/postcss/postcss-loader&quot;&gt;postcss-loader&lt;/a&gt; to load our CSS through Webpack. The loader used to expect a top level &lt;code&gt;postcss&lt;/code&gt; key in the Webpack config. As of Webpack 2 this is no longer allowed; we can instead define an &lt;code&gt;options&lt;/code&gt; key when we configure the loader. This replaces the &lt;code&gt;query&lt;/code&gt; option from Webpack 1. Any plugin that looked for top level configuration will have to be swapped to this style.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// before, in Webpack top level&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token literal-property property&quot;&gt;postcss&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// after&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token literal-property property&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;&#92;.scss$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;postcss-loader&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string&quot;&gt;&#39;sass-loader&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;ExtractTextPlugin changes&lt;/h2&gt;
&lt;p&gt;The above change to loader configuration also makes it way easier to configure multiple loaders; previously it would only be possible to pass an array of loaders in string form to some plugins, such as &lt;code&gt;ExtractTextPlugin&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Webpack 1&lt;/span&gt;&lt;br&gt;ExtractTextPlugin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;style-loader&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;css-loader!postcss-loader!sass-loader&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This quickly got very hard to work with if you had to pass options:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Webpack 1&lt;/span&gt;&lt;br&gt;ExtractTextPlugin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;style-loader&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&#39;css-loader?modules-true!postcss-loader!sass-loader&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But now Webpack 2 can deal with arrays of objects to configure loaders. We can replace the above with:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Webpack 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; loaders &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;css-loader&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;postcss-loader&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sass-loader&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whereas in Webpack 1 we used the key &lt;code&gt;query&lt;/code&gt; for configuring loaders, we now use &lt;code&gt;options&lt;/code&gt;. &lt;code&gt;ExtractTextPlugin&lt;/code&gt; can now take this array, rather than only allowing the string form:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Webpack 2&lt;/span&gt;&lt;br&gt;ExtractTextPlugin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;fallbackLoader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;style-loader&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; loaders&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Stop Babel from compiling ES2015 modules&lt;/h2&gt;
&lt;p&gt;Webpack 1 wasn&#39;t able to parse ES2015 modules, so Babel would convert them into CommonJS. Webpack 2 can parse ES2015 modules, and is able to eliminate dead code based on which modules are used, so it&#39;s recommended that you tell Babel not to convert modules into CommonJS. You can do this by changing your &lt;code&gt;.babelrc&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// before&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// after&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;modules&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&#39;ve seen a good file size saving by doing this, and hopefully this will continue to improve in the future!&lt;/p&gt;
&lt;h2&gt;Fin&lt;/h2&gt;
&lt;p&gt;Webpack 2 offers better performance, improved bundling and a much nicer experience when configuring it. Given that the code is so stable, despite its beta status, I highly recommend giving it a go on your projects when you can.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Authoring and publishing JavaScript modules with Flow</title>
    <link href="http://www.jackfranklin.co.uk/blog/npm-flowjs-javascript/"/>
    <updated>2017-01-04T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/npm-flowjs-javascript/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://flowtype.org/&quot;&gt;Flow&lt;/a&gt; is a static type checker for JavaScript which adds the ability to annotate our JavaScript code with extra information on what types we&#39;re expecting values to be, what types functions can return, and so on. Having done a lot of work in &lt;a href=&quot;https://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;, a language that is typed, I began to recently explore the popular options for adding types to JavaScript. Along with Flow there is also &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;, which is very popular and used extensively in the Angular 2 community.&lt;/p&gt;
&lt;p&gt;I started with Flow primarily because it&#39;s used a lot in the React community (unsurprising given Flow is a Facebook project) and it has built in knowledge of React and its types. Although we won&#39;t use Flow with React today, it&#39;s easy to do so and I&#39;m sure that I&#39;ll cover it in a future blog post. This post &lt;em&gt;is not&lt;/em&gt; me stating that I have a strong preference for Flow over TypeScript, or a post claiming Flow is better. I am just sharing my experience with Flow - so far it&#39;s been a very positive one.&lt;/p&gt;
&lt;h2&gt;Writing Typed JavaScript&lt;/h2&gt;
&lt;p&gt;To start with I needed an example project to work with; I picked &lt;a href=&quot;https://github.com/jackfranklin/util-fns&quot;&gt;util-fns&lt;/a&gt;. &lt;code&gt;util-fns&lt;/code&gt; is a small project I started working on that contains a bunch of tiny utility functions (much like Lodash or Underscore, but much smaller and less optimised!). It&#39;s primarily a dummy project for the sake of learning Flow and experimenting. I also chose this because it&#39;s a module that I have published to npm, and as such could explore how to publish the module in such a way that the types are not lost. This means any developers who run &lt;code&gt;npm install util-fns&lt;/code&gt; can access the type information and be notified if they use the library with the one arguments, assume incorrect return types, and so on.&lt;/p&gt;
&lt;h3&gt;Installing Flow&lt;/h3&gt;
&lt;p&gt;To get started with Flow, I first installed it as a local dependency. You need the &lt;code&gt;flow-bin&lt;/code&gt; package from npm:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev flow-bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could install this globally, but I like to have all project dependencies installed locally. This also covers you in the circumstance that you have different projects that want to use different versions of Flow.&lt;/p&gt;
&lt;p&gt;You then need to run &lt;code&gt;./node_modules/.bin/flow init&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I have the &lt;code&gt;./node_modules/.bin&lt;/code&gt; directory on my &lt;code&gt;$PATH&lt;/code&gt;, &lt;a href=&quot;https://github.com/jackfranklin/dotfiles/blob/master/zsh/zshrc#L101&quot;&gt;which you can find in my dotfiles&lt;/a&gt;. This is &lt;em&gt;slightly&lt;/em&gt; risky, as I could accidentally run any executable that&#39;s in that directory, but I&#39;m willing to take that risk because I know what&#39;s installed locally and it saves a lot of typing!&lt;/p&gt;
&lt;p&gt;By running &lt;code&gt;flow init&lt;/code&gt; you&#39;ll create a &lt;code&gt;.flowconfig&lt;/code&gt; file which will look like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ignore]

[include]

[libs]

[options]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don&#39;t worry about the slightly odd syntax here, or the fact that it&#39;s largely empty. That config is more than enough for now - I&#39;ve yet to really have to edit a Flow config - but if you need to there is &lt;a href=&quot;https://flowtype.org/docs/advanced-configuration.html&quot;&gt;extensive documentation on configuring Flow&lt;/a&gt; on the Flow site.&lt;/p&gt;
&lt;p&gt;By creating this file we&#39;re now able to run Flow and have it check our code. You can run &lt;code&gt;flow&lt;/code&gt; now to see what happens!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Launching Flow server for /Users/jackfranklin/git/flow-test
Spawned flow server (pid=30624)
Logs will go to /private/tmp/flow/zSUserszSjackfranklinzSgitzSflow-test.log
No errors!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing you&#39;ll see is that Flow launches a server. This server runs in the background and allows you to incrementally check Flow code as you work. By running on a server, Flow can cache the state of your files and only recheck them when the contents change. This makes it really quick to run Flow on files as you&#39;re working. For times when you do want to just check your entire project you can run &lt;code&gt;flow check&lt;/code&gt;, but in development you should always just run &lt;code&gt;flow&lt;/code&gt;. This will connect to the Flow server (or start one if there isn&#39;t one running) and be much more efficient about checking only the files that have changed.&lt;/p&gt;
&lt;p&gt;When you run Flow and see that you have no errors, that&#39;s because we don&#39;t actually have any code that Flow will check, yet! Flow is designed to be able to be dropped into an existing JavaScript project and not cause a heap of errors, so it only runs on files that have the following comment at the top of the page:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// @flow&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means you can incrementally move files over to Flow, which is a big plus point for me. We&#39;re considering adding it to our large JS codebase at work and if we couldn&#39;t do it incrementally we wouldn&#39;t even be able to consider including it in the project.&lt;/p&gt;
&lt;h3&gt;Stripping types with Babel&lt;/h3&gt;
&lt;p&gt;One final piece of admin: Flow is only a type checker, it won&#39;t strip the types out of your code and produce JavaScript for production. To do this I recommend using the Babel plugin &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-flow-strip-types/&quot;&gt;&lt;code&gt;transform-flow-strip-types&lt;/code&gt;&lt;/a&gt;, which tells Babel to remove the types when you compile the code. We&#39;ll look at how we then deploy this code to npm later.&lt;/p&gt;
&lt;h3&gt;Writing some Flow!&lt;/h3&gt;
&lt;p&gt;We&#39;re now ready to write some code! Let&#39;s start with a &lt;code&gt;sum&lt;/code&gt; function. It can take an array of numbers and will produce the sum of all of these numbers. Here&#39;s the JavaScript implementation I came up with:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; sum&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&#39;s nothing too crazy going on here - by using &lt;code&gt;reduce&lt;/code&gt; we can iterate through the array and add up the numbers as we go. Now I&#39;ll use Flow&#39;s type annotations to annotate this function. First let&#39;s annotate the arguments that this function takes, by declaring that the input argument should be an &lt;code&gt;Array&lt;/code&gt; of type &lt;code&gt;number&lt;/code&gt;. This means that &lt;code&gt;input&lt;/code&gt; will be an array where all the values are of type &lt;code&gt;number&lt;/code&gt;, and the syntax for this in Flow is &lt;code&gt;Array&amp;lt;number&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// @flow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Array&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;number&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; sum&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that I&#39;ve also added the &lt;code&gt;// @flow&lt;/code&gt; comment so that Flow will start type checking my code. I&#39;ll now declare that the return type of this function is a &lt;code&gt;number&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// @flow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Array&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;number&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; sum&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you run &lt;code&gt;flow&lt;/code&gt; again, you&#39;ll see that there are still no errors. This means that Flow has confirmed that our code is conforming to the types we told it about.&lt;/p&gt;
&lt;p&gt;Let&#39;s say we make a mistake (obvious to spot on this small code - but imagine if this was a real life application with much more going on):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// @flow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Array&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;number&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you run &lt;code&gt;flow&lt;/code&gt;, you will see an error (you may need to scroll the codebox to see the full error):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;3:   return input.reduce((a, b) =&amp;gt; a + &#39;b&#39;)
                                   ^^^^^^^ string.
                                   This type is incompatible with the expected param type of
2: const sum = (input: Array&amp;lt;number&amp;gt;): number =&amp;gt; {
                             ^^^^^^ number
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Flow has correctly spotted that our &lt;code&gt;reduce&lt;/code&gt; call is adding the string &lt;code&gt;&#39;b&#39;&lt;/code&gt; to the number &lt;code&gt;a&lt;/code&gt; and is telling us that it is invalid. It knows &lt;code&gt;a&lt;/code&gt; is a &lt;code&gt;number&lt;/code&gt; because we specified that &lt;code&gt;input&lt;/code&gt; is of type &lt;code&gt;Array&amp;lt;number&amp;gt;&lt;/code&gt;, and therfore it can spot the issue.&lt;/p&gt;
&lt;p&gt;Flow is really good generally at picking up silly mistakes like this and you&#39;ll find once you get into the habit of using it that any silly mistakes you make are automatically picked up by Flow, and you&#39;ll realise them before you&#39;ve gone into your browser, refreshed the page and spotted an error.&lt;/p&gt;
&lt;p&gt;What&#39;s even nicer about Flow is that once you&#39;ve annotated a function with types, Flow can spot when you then use that function wrong in other places in your codebase.&lt;/p&gt;
&lt;p&gt;Let&#39;s say in 6 months time you&#39;re using the &lt;code&gt;sum&lt;/code&gt; function that we wrote earlier and you forget that you have to pass an array of numbers. Instead of &lt;code&gt;sum([1, 2, 3])&lt;/code&gt; you call &lt;code&gt;sum(1, 2, 3)&lt;/code&gt;. An easy mistake to make but it will have you digging in the browser console or digging into the source code to see what &lt;code&gt;sum&lt;/code&gt; expects. With Flow checking our code though, we get a much nicer errror:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;8: sum(1, 2, 3)
       ^ number. This type is incompatible with the expected param type of
2: const sum = (input: Array&amp;lt;number&amp;gt;): number =&amp;gt; {
                       ^^^^^^^^^^^^^ array type
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This saves a lot of time and energy digging into hard to follow console errors, and enables you to spot mistakes as soon as they happen. There are also plugins available for Flow and most popular code editors, so you can have these errors appear the moment you type the incorrect code.&lt;/p&gt;
&lt;p&gt;This tutorial has barely even begun to scratch the surface of the type system in Flow and what it can do, but for now we&#39;re going to move on and look at how we can publish code to npm that&#39;s written in Flow. The &lt;a href=&quot;https://flowtype.org/docs/getting-started.html#_&quot;&gt;Flow docs&lt;/a&gt; have much more information on all that Flow can do for you, and be sure to keep an eye out for future articles on Flow.&lt;/p&gt;
&lt;h2&gt;Publishing Typed JavaScript modules&lt;/h2&gt;
&lt;p&gt;So my small &lt;code&gt;util-fns&lt;/code&gt; library is ready to be published to npm for the whole world to download and use. I&#39;ve got a tonne of types throughout my code, and I&#39;ve also written all the code using ES2015. For publishing in the browser I&#39;m going to use Babel to strip the types and also compile the code into ES5, so it&#39;s usable across more browsers. However, it&#39;s silly to spend a lot of time and energy adding types to our code, only to strip them from the published module so that no other developers can benefit from them.&lt;/p&gt;
&lt;p&gt;Instead, I&#39;d like developers who are using Flow to be able to see the type information for the functions that my module is providing, so if they use them incorrectly, Flow can tell them so. I also want users who don&#39;t use Flow to be able to use my module out of the box too, without the need for any additional compilation steps.&lt;/p&gt;
&lt;p&gt;The solution here is to publish two versions of the code within one module. One version will be fully compiled with Babel and have all types stripped. The other will be the original code, with all the types left in it. When researching approaches for publishing types to npm, I discovered that when a file is imported, Flow will look not only for that file but for the same file name with &lt;code&gt;.flow&lt;/code&gt; added on the end. That is, if my code has:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; foo &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./my-module&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Flow will first see if &lt;code&gt;my-module.js.flow&lt;/code&gt; exists, and use that if it does, before using &lt;code&gt;my-module.js&lt;/code&gt;. Of course, all other tools will use &lt;code&gt;my-module.js&lt;/code&gt;, and ignore the file with the &lt;code&gt;.flow&lt;/code&gt; extension.&lt;/p&gt;
&lt;p&gt;What we need to do is publish two versions of each file in our project. So, for the file &lt;code&gt;sum.js&lt;/code&gt;, we should publish:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lib/sum.js&lt;/code&gt;, which is compiled with Babel and stripped of types.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib/sum.js.flow&lt;/code&gt;, which is the original file, with types left in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Configuring Babel&lt;/h3&gt;
&lt;p&gt;Configuring Babel to strip Flow types is a matter of creating a &lt;code&gt;.babelrc&lt;/code&gt; with the &lt;code&gt;transform-flow-strip-types&lt;/code&gt; plugin enabled, along with any others you might be using.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;transform-flow-strip-types&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can then tell Babel to take each file in the &lt;code&gt;src&lt;/code&gt; directory and output a compiled version in the &lt;code&gt;lib&lt;/code&gt; directory with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;babel src/ -d lib
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Typically you&#39;ll want to add the &lt;code&gt;lib&lt;/code&gt; directory to your &lt;code&gt;.gitignore&lt;/code&gt;, as we don&#39;t want compiled code in Git.&lt;/p&gt;
&lt;h3&gt;Telling npm to use the &lt;code&gt;lib&lt;/code&gt; directory&lt;/h3&gt;
&lt;p&gt;We also need to tell npm that it should publish files in the &lt;code&gt;lib&lt;/code&gt; directory when we publish this package. If you&#39;ve added the &lt;code&gt;lib&lt;/code&gt; directory to your &lt;code&gt;.gitignore&lt;/code&gt;, npm by default will respect that and not push the &lt;code&gt;lib&lt;/code&gt; directory. However, the &lt;code&gt;lib&lt;/code&gt; directory is actually where the code that we want users to run lives, so in our case we need it published.&lt;/p&gt;
&lt;p&gt;My preferred method of doing this is to add a &lt;code&gt;files&lt;/code&gt; entry to the &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;files&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;lib&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally, we need to update our package&#39;s &lt;code&gt;main&lt;/code&gt; property. This is the file that will be loaded when the user imports our module (via &lt;code&gt;import utils from &#39;util-fns&#39;&lt;/code&gt;). In the case of this project, the file that I&#39;d like to be loaded is &lt;code&gt;lib/index.js&lt;/code&gt;, so I&#39;ll update my &lt;code&gt;package.json&lt;/code&gt; will that:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;lib/index.js&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Generating &lt;code&gt;.flow&lt;/code&gt; files&lt;/h3&gt;
&lt;p&gt;So now we have a &lt;code&gt;lib&lt;/code&gt; directory full of compiled JavaScript files, but I also want to keep the original files in there, albeit with a &lt;code&gt;.flow&lt;/code&gt; extension. Luckily I&#39;m not the first to want this, and I found the &lt;a href=&quot;https://github.com/AgentME/flow-copy-source&quot;&gt;flow-copy-source&lt;/a&gt; project on Github exactly what&#39;s needed. I can install this as a developer dependency:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save-dev flow-copy-source
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now to run it I simply run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;flow-copy-source src lib
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once I run that, it will take each file in &lt;code&gt;src&lt;/code&gt; and copy it to &lt;code&gt;lib&lt;/code&gt;, adding a &lt;code&gt;.flow&lt;/code&gt; extension on the end. Now my &lt;code&gt;lib&lt;/code&gt; directory looks like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lib
├── index.js
├── index.js.flow
├── ...and so on
├── sum.js
└── sum.js.flow
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Building when publishing&lt;/h3&gt;
&lt;p&gt;We&#39;re almost there now and ready to publish the module to npm, but the final step is to make sure that when publishing we don&#39;t forget any of the above steps. I can define a &lt;code&gt;prepack&lt;/code&gt; script in my &lt;code&gt;package.json&lt;/code&gt; that npm will run automatically when I run &lt;code&gt;npm publish&lt;/code&gt;. By doing this I&#39;ll ensure my project is all up to date and fully built when I publish new versions to the repository. Typically I&#39;ll split up my npm scripts into smaller ones, so I create a new script for running Babel, and another for running flow-copy-source, and make &lt;code&gt;prepack&lt;/code&gt; run the both of them:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;prepack&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;npm run prepack:babel &amp;amp;&amp;amp; npm run prepack:flow&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;prepack:babel&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;babel src/ -d lib&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;prepack:flow&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;flow-copy-source src lib&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we&#39;re ready to publish our module! I can run &lt;code&gt;npm publish&lt;/code&gt; to push a module to the repository, and when I do npm will run my &lt;code&gt;prepack&lt;/code&gt; script and generate the compiled files and the &lt;code&gt;.flow&lt;/code&gt; files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; npm run prepack:babel &amp;amp;&amp;amp; npm run prepack:flow

&amp;gt; util-fns@0.1.3 prepack:babel /Users/jackfranklin/git/util-fns
&amp;gt; babel src/ -d lib

src/index.js -&amp;gt; lib/index.js
...and so on
src/sum.js -&amp;gt; lib/sum.js

&amp;gt; util-fns@0.1.3 prepack:flow /Users/jackfranklin/git/util-fns
&amp;gt; flow-copy-source src lib
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Using our new module&lt;/h2&gt;
&lt;p&gt;To check that the types are working properly in our published code, we can install our newly published &lt;code&gt;util-fns&lt;/code&gt; module in another project that&#39;s configured with Flow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save util-fns
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&#39;s say we&#39;ve gotten confused about the API again, and we try to use a method that doesn&#39;t exist:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// @flow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; utils &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;util-fns&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;utils&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Flow can detect that &lt;code&gt;getSum&lt;/code&gt; isn&#39;t a function that exists in the module:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4: console.log(utils.getSum([1, 2, 3]))
                     ^^^^^^ property `getSum`. Property not found in
4: console.log(utils.getSum([1, 2, 3]))
                 ^^^^^ object literal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now imagine I remember that the function is called &lt;code&gt;sum&lt;/code&gt;, but I forget that I have to pass an array:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// @flow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; utils &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;util-fns&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;utils&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Flow will pick up on this too, but &lt;em&gt;only&lt;/em&gt; because we included those extra &lt;code&gt;.flow&lt;/code&gt; files in our package. Notice that it also tells us which file to go and look in to find the source for the &lt;code&gt;sum&lt;/code&gt; function if we want to dig into the types:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4: console.log(utils.sum(1, 2, 3))
                         ^ number. This type is incompatible with the expected param type of
2: const sum = (input: Array&amp;lt;number&amp;gt;): number =&amp;gt; {
                         ^^^^^^^^^^^^^ array type.
                         See: node_modules/util-fns/lib/sum.js.flow:2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is &lt;em&gt;brilliant&lt;/em&gt; as a developer working with a lot of libraries whose APIs I forget a lot. It means that I&#39;m quickly alerted to mistakes and I have hinting and help in my editor telling me what arguments functions accept and what types they are. You can see that a little extra effort as the author of the &lt;code&gt;util-fns&lt;/code&gt; package leads to a nicer experience for any developers working with my package in a Flow environment.&lt;/p&gt;
&lt;h2&gt;Working with libraries without definitions&lt;/h2&gt;
&lt;p&gt;Although in this case we published the &lt;code&gt;util-fns&lt;/code&gt; function with type definitions, not all libraries that you&#39;ll work with have these built in. There are many, many libraries out there that are not written with Flow, but with plain JavaScript, and it&#39;s a shame to not have any type information on those available.&lt;/p&gt;
&lt;p&gt;Luckily, &lt;a href=&quot;https://github.com/flowtype/flow-typed&quot;&gt;flow-typed&lt;/a&gt; is here to help you out. It&#39;s an amazing repository full of type declarations for many, many popular libraries, both for NodeJS and client-side JavaScript, including Express, Lodash, Enzyme, Jest, Moment, Redux and more.&lt;/p&gt;
&lt;p&gt;You can install &lt;code&gt;flow-typed&lt;/code&gt; through npm, and then once you do you simply run &lt;code&gt;flow-typed install&lt;/code&gt; within your project. This will look through your &lt;code&gt;package.json&lt;/code&gt; for all your dependencies and, for each one, try to install the corresponding type definitions from its repository. This means you can still enjoy type information for libraries like Lodash, even though they are not written using Flow.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope this blog post gives you a look into the world of writing typed JavaScript with Flow. In terms of the type system itself this blog post barely touches the power of Flow, and it&#39;s something I&#39;ll be writing more about as I get more comfortable with it and learn more. If you&#39;re a library author I&#39;d encourage you to try writing in Flow, it&#39;s a great experience whilst developing a library and can help prevent bugs. It&#39;s also great to include those type definitions when publishing your library; your users will benefit hugely from having Flow able to nudge them when using your library wrong, and it also means Flow can pick up on API changes and inform users when the types change.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to contribute to open source with Webpack</title>
    <link href="http://www.jackfranklin.co.uk/blog/contributing-to-webpack-javascript/"/>
    <updated>2017-01-11T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/contributing-to-webpack-javascript/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://github.com/webpack/webpack&quot;&gt;Webpack&lt;/a&gt; is one of the most prominent open source projects in the JavaScript and they are always looking for more people to help contribute back to the project. Speaking from personal experience, it&#39;s incredibly daunting to even think about contributing back to such a large project, but in this video we&#39;ll demonstrate that it&#39;s actually no where near as tricky as you might imagine.&lt;/p&gt;
&lt;p&gt;I invited Webpack core team member &lt;a href=&quot;http://twitter.com/thelarkinn&quot;&gt;Sean Larkin&lt;/a&gt; onto a Google Hangouts session as we paired on contributing to Webpack. You&#39;ll see how to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clone Webpack and get it running locally on your machine.&lt;/li&gt;
&lt;li&gt;How to find code in the Webpack repository that&#39;s good for a pull request.&lt;/li&gt;
&lt;li&gt;How to run the Webpack tests to ensure your work hasn&#39;t broken anything.&lt;/li&gt;
&lt;li&gt;How to run ESLint to ensure you&#39;re following the code standards of the project.&lt;/li&gt;
&lt;li&gt;How to open a pull request against Webpack.&lt;/li&gt;
&lt;li&gt;Sean&#39;s workflow for reviewing pull requests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even if you don&#39;t want to contribute directly to Webpack, this video should help you contribute to any open source project that you&#39;re interested in.&lt;/p&gt;
&lt;p&gt;PS: it&#39;s definitely worth making the video fullscreen or viewing &lt;a href=&quot;https://www.youtube.com/watch?v=ePdXHF2DfeY&amp;amp;feature=youtu.be&quot;&gt;on Youtube&lt;/a&gt; so you can see things more clearly.&lt;/p&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/ePdXHF2DfeY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;br&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/webpack/webpack/pull/3799&quot;&gt;You can find the pull request I opened on GitHub&lt;/a&gt;. Once again, huge thanks to Sean for taking the time to do the video with me. Happy contributing!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Loading data from APIs in React</title>
    <link href="http://www.jackfranklin.co.uk/blog/http-requests-reactjs/"/>
    <updated>2017-01-19T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/http-requests-reactjs/</id>
    <content type="html">&lt;p&gt;ReactJS is a brilliant framework to work in, and something that I get asked a lot by people new to the framework is how best to deal with loading data from an external source, such as an API. In today&#39;s 10 minute video I show you how to create a component that can fetch data from an API and render it onto the page.&lt;/p&gt;
&lt;p&gt;You&#39;ll learn about the React lifecycle and which method is best for making HTTP requests, how to use the &lt;code&gt;fetch&lt;/code&gt; API to get JSON from an API, and how to deal with errors as well as successful responses.&lt;/p&gt;
&lt;p&gt;PS: it&#39;s definitely worth making the video fullscreen or viewing &lt;a href=&quot;https://www.youtube.com/watch?v=MjavMX8fUAE&quot;&gt;on Youtube&lt;/a&gt; so you can see things more clearly.&lt;/p&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/MjavMX8fUAE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;br&gt;
&lt;p&gt;If you&#39;d like to play with this code, &lt;a href=&quot;https://github.com/javascript-playground/remote-data-react-screencasts&quot;&gt;you can find the repository on GitHub&lt;/a&gt;, and look out for the follow up episode in a few weeks where we look at some libraries that can make fetching external data much nicer.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Setting up Vim for modern JavaScript Development</title>
    <link href="http://www.jackfranklin.co.uk/blog/vim-for-javascript/"/>
    <updated>2017-01-30T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/vim-for-javascript/</id>
    <content type="html">&lt;p&gt;I&#39;ve been using Vim solidly for about six years now, and do all of my editing in it. This blog post, all the open source code on GitHub, and all my code at work is written in Vim. I keep all my configuration in my &lt;a href=&quot;http://github.com/jackfranklin/dotfiles&quot;&gt;dotfiles repo on GitHub&lt;/a&gt; which means it&#39;s easily synced between computers, and I&#39;m really happy with this set up.&lt;/p&gt;
&lt;p&gt;I toy with my Vim configuration on a fairly frequent basis but I&#39;ve now settled on a set of JavaScript plugins and configuration that&#39;s allowing me to be really productive, and integrate with tools like ESLint and Flow, and today I&#39;ll walk through the key parts of that workflow.&lt;/p&gt;
&lt;h2&gt;JavaScript Syntax&lt;/h2&gt;
&lt;p&gt;The main plugin I use here is &lt;a href=&quot;http://github.com/pangloss/vim-javascript&quot;&gt;pangloss/vim-javascript&lt;/a&gt;. There&#39;s many options for JS highlighting in Vim but I&#39;ve found this to be the most reliable. This plugin also has support for Flow and its types, and you can enable that by turning it on in your vimrc:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let g:javascript_plugin_flow = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition I use &lt;a href=&quot;http://github.com/mxw/vim-jsx&quot;&gt;mxw/vim-jsx&lt;/a&gt; to add syntax support for JSX to my JavaScript files. It&#39;s important to note that this plugin expects your JSX files to have a &lt;code&gt;.jsx&lt;/code&gt; extension, but often I just stick with &lt;code&gt;.js&lt;/code&gt;. If you&#39;re doing the same, you&#39;ll want to add the following to your config:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let g:jsx_ext_required = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I also use &lt;a href=&quot;http://github.com/leshill/vim-json&quot;&gt;leshill/vim-json&lt;/a&gt; which improves the syntax highlighing for JSON files.&lt;/p&gt;
&lt;p&gt;In terms of colour theme, I keep trying others but keep coming back to the &lt;a href=&quot;https://github.com/ajh17/Spacegray.vim&quot;&gt;Spacegray theme&lt;/a&gt;, which I&#39;ve now had for a long time and I&#39;m very happy with it.&lt;/p&gt;
&lt;h2&gt;Finding files and navigating&lt;/h2&gt;
&lt;p&gt;There are numerous options for fuzzy finding, but the one that I&#39;ve found works best is &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;FZF&lt;/a&gt; and the corresponding &lt;a href=&quot;http://github.com/junegunn/fzf.vim&quot;&gt;FZF.vim&lt;/a&gt; plugin. This lets me quickly navigate through projects to find the files I&#39;m after. Not JS specific, but definitely worth a mention.&lt;/p&gt;
&lt;h2&gt;Snippets&lt;/h2&gt;
&lt;p&gt;I have to say that I probably don&#39;t utilise snippets as much as I should, but when I do I&#39;m still a fan of &lt;a href=&quot;https://github.com/SirVer/ultisnips&quot;&gt;UltiSnips&lt;/a&gt;. This doesn&#39;t come with snippets by default, and whilst you can rely on another plugin to give you snippets, I&#39;ve just &lt;a href=&quot;https://github.com/jackfranklin/dotfiles/blob/master/vim/vim/UltiSnips/javascript.snippets&quot;&gt;got my own snippets file&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;ESLint + Flow Integration&lt;/h2&gt;
&lt;p&gt;The two command line tools that I use most are ESLint and Flow. Both of these continually check my code as I&#39;m working to ensure that I&#39;m writing code that is typed correctly, or formatted correctly based on ESLint.&lt;/p&gt;
&lt;p&gt;Until recently, integrating these with Vim was far from ideal, for two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Something I always do is to install command line tools locally, rather than globally. By doing this it means that I can have projects run different versions of the same tool without them colliding. When you do this, npm puts the executable in &lt;code&gt;./node_modules/.bin&lt;/code&gt;. This can break editor integrations, because they expect to have the executable available, so try running &lt;code&gt;eslint&lt;/code&gt;, rather than &lt;code&gt;./node_modules/.bin/eslint&lt;/code&gt;, for example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Up until the release of Vim 8, Vim didn&#39;t have support for async, background jobs. This meant when you saved your file, and ESLint ran, the editor would be unresponsive for a second or two, until ESLint returned. This is only a small amount of lag but it&#39;s really noticable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thankfully, both of these problems have been solved recently thanks to Vim 8 and the &lt;a href=&quot;https://github.com/w0rp/ale&quot;&gt;Ale plugin&lt;/a&gt;, an asynchronous linting plugin for Vim. Upgrading to Vim 8 (if you&#39;re on a Mac, I recommend doing this via Homebrew) is easy, but unless you have the plugins, you don&#39;t really gain anything out of the box.&lt;/p&gt;
&lt;p&gt;Ale is a linting plugin that comes out the box with support for a variety of linting tools for different filetypes and languages, and most importantly for me that includes ESLint and Flow. Once more, it even has support for using the locally installed version of a linter by default, so it&#39;s perfect for my needs. It automatically detects which linters to run and you really don&#39;t need to configure it at all.&lt;/p&gt;
&lt;p&gt;The only change I made was to run the linters when I save the file, rather than continuously as I type, which is the default behaviour. This is just personal preference.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;I run Vim from within a tmux session, which means I can split my terminal into two (much like split panes in any modern Terminal application), and have Vim on the one panel and a command line on the other. Usually I&#39;ll just do this and then run &lt;code&gt;npm test&lt;/code&gt; on the command line, in watch mode. That way my tests are running side by side to my code.&lt;/p&gt;
&lt;p&gt;To make navigating between Vim and Tmux windows easier, I use Chris Toomey&#39;s excellent &lt;a href=&quot;https://github.com/christoomey/vim-tmux-navigator&quot;&gt;vim-tmux-navigator&lt;/a&gt;. You can read more about this set up in &lt;a href=&quot;https://robots.thoughtbot.com/seamlessly-navigate-vim-and-tmux-splits&quot;&gt;this post from Thoughtbot&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Editor Config&lt;/h2&gt;
&lt;p&gt;I also include the &lt;a href=&quot;https://github.com/editorconfig/editorconfig-vim&quot;&gt;EditorConfig vim plugin&lt;/a&gt; in my setup, so as I swap to any JS project that might have different space/tabs than my preference, Vim will automatically switch for me. This is particularly useful for contributing to open source projects (Webpack for example, uses tabs, whereas I use spaces). Having Vim swap for me is really handy.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Everyone has a different preference with editors, and Vim in particular is hugely configurable. If you&#39;ve got any suggestions or different plugins that you like to use, please let me know, and I hope this post helps you speed up your Vim and JavaScript workflow.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Context in ReactJS Applications</title>
    <link href="http://www.jackfranklin.co.uk/blog/context-in-reactjs-applications/"/>
    <updated>2017-02-13T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/context-in-reactjs-applications/</id>
    <content type="html">&lt;p&gt;There is a lot of confusion amongst React developers on what context is, and why it exists. It&#39;s also a feature that&#39;s been hidden in the React documentation in the past and, &lt;a href=&quot;https://facebook.github.io/react/docs/context.html&quot;&gt;although it is now documented on the React site&lt;/a&gt; I thought a post on its usage and when to use it would be of use.&lt;/p&gt;
&lt;p&gt;The short answer is that you should &lt;strong&gt;very rarely, if ever&lt;/strong&gt; use context in your own React components. However, if you&#39;re writing a library of components, it can come in useful, and we&#39;ll discuss why this is later.&lt;/p&gt;
&lt;h2&gt;What is context in React, and how does it work?&lt;/h2&gt;
&lt;p&gt;In React the primary mechanism for communication between your components is through properties, or &lt;code&gt;props&lt;/code&gt;, for short. Parent components can pass properties down to their children:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ParentComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ChildComponent foo&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, the parent component &lt;code&gt;ParentComponent&lt;/code&gt; passes the prop &lt;code&gt;foo&lt;/code&gt; through to its child, &lt;code&gt;ChildComponent&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here, a &lt;em&gt;child component&lt;/em&gt; is a component that another component renders. A &lt;em&gt;parent component&lt;/em&gt; is a component that directly renders another.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If a child component wants to communicate back to its parent, it can do so through props, most commonly by its parent providing a &lt;em&gt;callback property&lt;/em&gt; that the child can call when some event happens:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ParentComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;letMeKnowAboutSomeThing&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;something happened!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ChildComponent letMeKnowAboutSomeThing&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;letMeKnowAboutSomeThing&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ChildComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;onClick&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;letMeKnowAboutSomeThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;a onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;onClick&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Click me&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key thing about this communication is that it&#39;s &lt;em&gt;explicit&lt;/em&gt;. Looking at the code above, you know how the components are communicating, where the &lt;code&gt;letMeKnowAboutSomeThing&lt;/code&gt; function comes from, who calls it, and which two components are in communication. &lt;a href=&quot;http://codepen.io/jackfranklin/pen/vgvYOa?editors=0011&quot;&gt;You can see this in action on CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This property of React, its explicitness of data passing between components, is one of its best features. React is very explicit as a rule, and this is in my experience leads to clearer code that&#39;s much easier to maintain and debug when something goes wrong. You simply have to follow the path of props to find the problem.&lt;/p&gt;
&lt;p&gt;This diagram shows how props keep communication clear but can get a little excessive as you gain many layers in your application; each component has to explictly pass props down to any children.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/img/posts/context-in-react/props.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;One issue you might find in big apps is that you might need to pass props from a top level &lt;code&gt;ParentComponent&lt;/code&gt; to a deeply nested &lt;code&gt;ChildComponent&lt;/code&gt;. The components in between will probably have no use the these props and should probably not even know about them. When this situation arises, you can consider using React&#39;s context feature.&lt;/p&gt;
&lt;p&gt;Context acts like a portal in your application in which components can make data available to other components further down the tree without being passed through explictly as props.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/img/posts/context-in-react/context.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;When a component defines some data onto its &lt;em&gt;context&lt;/em&gt;, any of its descendants can access that data. That means any child further down in the component tree can access data from it, without being passed it as a property. Let&#39;s take a look at context in action.&lt;/p&gt;
&lt;h2&gt;How to use &lt;code&gt;context&lt;/code&gt; in React applications&lt;/h2&gt;
&lt;p&gt;First, on the &lt;em&gt;parent component&lt;/em&gt;, we define two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A function, &lt;code&gt;getChildContext&lt;/code&gt;, which defines what context is exposed to its descendants.&lt;/li&gt;
&lt;li&gt;A static property, &lt;code&gt;childContextTypes&lt;/code&gt;, which defines the types of the objects that &lt;code&gt;getChildContext&lt;/code&gt; returns.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For a component to provide context to its descendants, it must define both of the above. Here, &lt;code&gt;ParentComponent&lt;/code&gt; exposes the property &lt;code&gt;foo&lt;/code&gt; on its context:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ParentComponent&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;getChildContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bar&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ChildComponent &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;ParentComponent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;childContextTypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ChildComponent&lt;/code&gt; can now gain access to the &lt;code&gt;foo&lt;/code&gt; property by defining a static property &lt;code&gt;contextTypes&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ChildComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;The value &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; foo is&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;ChildComponent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;contextTypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;In a functional, stateless component, &lt;code&gt;context&lt;/code&gt; is accessed via the second argument to the function. In a standard class component, it&#39;s available as &lt;code&gt;this.context&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What&#39;s important here though is that any component that &lt;code&gt;ChildComponent&lt;/code&gt; renders, or any component its children render, and so on, are able to access the same context just by defining &lt;code&gt;contextTypes&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Why you should avoid context&lt;/h2&gt;
&lt;p&gt;There&#39;s a few reasons why you would want to avoid using context in your own code.&lt;/p&gt;
&lt;h4&gt;1. Hard to find the source.&lt;/h4&gt;
&lt;p&gt;Imagine that you&#39;re working on a component on a large application that has hundreds of components. There&#39;s a bug in one of them, so you go hunting and you find some component that uses context, and the value it&#39;s outputting is wrong.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;SomeAppComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hey user&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; the current value &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; something is &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;a onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onSomeClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Click here to change it&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;SomeAppComponent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;contextTypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;onSomeClick&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;func&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The bug is related to the click event not updating the right value, so you now go looking for the definition of that function. If it was being passed as a property, you could go immediately to the place where this component is rendered (which is usually just a case of searching for its name), and start debugging. In the case that you&#39;re using context, you have to search for the function name and hope that you find it. This could be found easily, granted, but it also could be a good few components up the chain, and as your apps get larger the chances of you finding the source quickly gets smaller.&lt;/p&gt;
&lt;p&gt;It&#39;s similar to the problem when you work in an object oriented language and inherit from classes. The more classes you inherit from (or in React, the further down the component tree you get), it&#39;s harder to find the source for a particular function that&#39;s been inherited.&lt;/p&gt;
&lt;h4&gt;2. Binds components to a specific parent&lt;/h4&gt;
&lt;p&gt;A component that expects only properties (or no properties at all) can be used anywhere. It is entirely reusable and a component wanting to render it need only pass in the properties that it expects. If you need to use the component elsewhere in your application you can do easily; just by supplying the right properties.&lt;/p&gt;
&lt;p&gt;However, if you have a component that needs specific context, you couple it to having to be rendered by a parent that supplies some context. It&#39;s then harder to pick up and move, because you have to move the original component and then make sure that its new parent (or one of its parents) provides the context required.&lt;/p&gt;
&lt;h4&gt;3. Harder to test&lt;/h4&gt;
&lt;p&gt;Related to the previous point, components that need context are much harder to test. Here&#39;s a test, using &lt;a href=&quot;http://airbnb.io/enzyme/&quot;&gt;Enzyme&lt;/a&gt;, that tests a component that expects a &lt;code&gt;foo&lt;/code&gt; prop:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; wrapper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SomeComponent foo&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bar&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here&#39;s that same test when we need &lt;code&gt;SomeComponent&lt;/code&gt; to have a specific piece of context:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ParentWithContext&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;getChildContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SomeComponent &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;ParentWithContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;childContextTypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; wrapper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ParentWithContext &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s harder here because we have to build the right parent component - it&#39;s messier and quite verbose just to set up the component in the right context for testing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can actually use Enzyme&#39;s &lt;a href=&quot;http://airbnb.io/enzyme/docs/api/ReactWrapper/setContext.html&quot;&gt;setContext&lt;/a&gt; to set context for these tests - but I tend to try to avoid any methods like this that breaks the React abstraction. You also wouldn&#39;t be able to do this so easily in other testing frameworks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;4. Unclear semantics around context value changes and rerenders.&lt;/h4&gt;
&lt;p&gt;With properties and state, it&#39;s very clear to React when it should rerender a component:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When a component&#39;s properties change.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;this.setState&lt;/code&gt; is called.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;getChildContext&lt;/code&gt; function is called whenever state or properties change, so in theory you can rely on components that use &lt;code&gt;context&lt;/code&gt; values reliably updating. The problem though is &lt;code&gt;shouldComponentUpdate&lt;/code&gt;. Any component can define &lt;code&gt;shouldComponentUpdate&lt;/code&gt;, making it return &lt;code&gt;false&lt;/code&gt; if it knows that it doesn&#39;t need to be re-rendered. If an interim component does this, a child component won&#39;t update, even if a context value changes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TopLevelComponent
- defines context.foo

    MidLevelComponent
    - defines `shouldComponentUpdate` to return `false`

        ChildComponent
        - renders `context.foo` into the DOM
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above example, if &lt;code&gt;context.foo&lt;/code&gt; changes, &lt;code&gt;ChildComponent&lt;/code&gt; will not render, because its parent returned &lt;code&gt;false&lt;/code&gt; from &lt;code&gt;shouldComponentUpdate&lt;/code&gt;. This makes bugs possible and leaves us with no reliable way to update context and ensure renders, so this is a very good reason to avoid using &lt;code&gt;context&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;When to use context&lt;/h2&gt;
&lt;p&gt;If you&#39;re a library author, context is useful. Libraries like &lt;a href=&quot;https://github.com/ReactTraining/react-router/blob/v4/packages/react-router/modules/Router.js#L13&quot;&gt;React Router use context&lt;/a&gt; to allow the components that they provide application developers to communicate. When you&#39;re writing a library that provides components that need to talk to each other, or pass values around, &lt;code&gt;context&lt;/code&gt; is perfect. Another famous library that makes use of context is &lt;a href=&quot;https://github.com/reactjs/react-redux/blob/master/src/components/Provider.js#L23&quot;&gt;react-redux&lt;/a&gt;. I encourage you to look through the source code for both React Router and React Redux, you can learn a lot about React by doing so.&lt;/p&gt;
&lt;p&gt;Let&#39;s build our own router library, &lt;code&gt;RubbishRouter&lt;/code&gt;. It will define two components: &lt;code&gt;Router&lt;/code&gt; and &lt;code&gt;Route&lt;/code&gt;. The &lt;code&gt;Router&lt;/code&gt; component needs to expose a &lt;code&gt;router&lt;/code&gt; object onto the context, so our &lt;code&gt;Route&lt;/code&gt; components can pick up on it and use it to function as expected.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Router&lt;/code&gt; will be used to wrap our entire application, and the user will use multiple &lt;code&gt;Route&lt;/code&gt; components to define parts of the app that should only render if the URL matches. To do this, each &lt;code&gt;Route&lt;/code&gt; will take a &lt;code&gt;path&lt;/code&gt; property, indicating the path that they should match before rendering.&lt;/p&gt;
&lt;p&gt;First, &lt;code&gt;Router&lt;/code&gt;. It exposes the &lt;code&gt;router&lt;/code&gt; object on the context, and other than that it simply renders the children that it&#39;s given:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; PropTypes &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Router&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;getChildContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;registered route!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; router &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;Router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;childContextTypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Route&lt;/code&gt; expects to find &lt;code&gt;this.context.router&lt;/code&gt;, and it registers itself when it&#39;s rendered:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;componentWillMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt; am the route &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;Route&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;contextTypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can use the &lt;code&gt;Router&lt;/code&gt; and &lt;code&gt;Route&lt;/code&gt; components in our own app:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Route path&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/foo&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Route path&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/bar&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Route path&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/baz&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The beauty of context in this situation is that as library authors we can provide components that can work in any situation, regardless of where they are rendered. As long as all &lt;code&gt;Route&lt;/code&gt; components are within a &lt;code&gt;Router&lt;/code&gt;, it doesn&#39;t matter at what level, and we don&#39;t tie application developers to a specific structure.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hopefully this blog post has shown you how and when to use context in React, and why more often than not you&#39;d be better eschewing it in favour of props.&lt;/p&gt;
&lt;p&gt;Thank you to the following blog posts and documentation for providing great material whilst putting this blog post together:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/context.html&quot;&gt;React docs on context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@mweststrate/how-to-safely-use-react-context-b7e343eff076&quot;&gt;How to safely use React context&lt;/a&gt; by Michel Weststrate.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you also to &lt;a href=&quot;https://twitter.com/ArnaudRinquin&quot;&gt;Arnaud Rinquin&lt;/a&gt; for taking the time to review this post.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Dealing with APIs in React with ReactRemoteData</title>
    <link href="http://www.jackfranklin.co.uk/blog/remote-data-react-components/"/>
    <updated>2017-03-02T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/remote-data-react-components/</id>
    <content type="html">&lt;p&gt;Last year I wrote about &lt;a href=&quot;http://javascriptplayground.com/blog/2016/06/remote-data-js/&quot;&gt;RemoteDataJS&lt;/a&gt;, a &lt;a href=&quot;https://github.com/jackfranklin/remote-data-js&quot;&gt;library I released on GitHub&lt;/a&gt; that made it really easy to deal with data from APIs in JavaScript.&lt;/p&gt;
&lt;p&gt;This library lets you represent remote pieces of data properly, dealing with all the different states it can be in, and any errors that might occur. Since writing that library I&#39;ve been doing a lot of work with React, which has fast become my framework of choice, and I&#39;ve now written a React library for RemoteData.&lt;/p&gt;
&lt;h2&gt;React Remote Data&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jackfranklin/react-remote-data&quot;&gt;React Remote Data&lt;/a&gt; provides a React component that will deal with loading some data and showing you the results. You tell it what to render for each possible state that your data might be in, and it does the rest.&lt;/p&gt;
&lt;p&gt;You can install the library from npm by running &lt;code&gt;npm install react-remote-data-js&lt;/code&gt;. Let&#39;s see how we can use this component, by writing a component that renders your data from the GitHub API.&lt;/p&gt;
&lt;p&gt;You have to give the &lt;code&gt;RemoteData&lt;/code&gt; five props:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;, which is the URL that should be fetched. This can be a function instead, but we&#39;ll tackle that later.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The other four props all map to the states of the API request, which can be one for states:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;notAsked&lt;/code&gt; - the request has not been made yet&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pending&lt;/code&gt; - the request is in progress&lt;/li&gt;
&lt;li&gt;&lt;code&gt;success&lt;/code&gt; - the request has succeeded&lt;/li&gt;
&lt;li&gt;&lt;code&gt;failure&lt;/code&gt; - the request has failed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;RemoteData&lt;/code&gt; component expects a function for each of these possible states, and it will render the right component based on the right state.&lt;/p&gt;
&lt;p&gt;First, let&#39;s define a function for the &lt;code&gt;notAsked&lt;/code&gt; state. This gets called with a prop called &lt;code&gt;fetch&lt;/code&gt;, which is the function called to trigger the request. Our &lt;code&gt;notAsked&lt;/code&gt; function looks like so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;notAsked&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fetch&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Make Request&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we&#39;ll write a function for the &lt;code&gt;pending&lt;/code&gt; state, which will simply show some loading text (you could render a spinner here, for example):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;pending&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Loading&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, our &lt;code&gt;success&lt;/code&gt; case. When a request has succeeded the data will be provided via the &lt;code&gt;request&lt;/code&gt; prop, which contains all the information about the request, including a &lt;code&gt;data&lt;/code&gt; key, which has the parsed data as JSON, which we can render:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;login&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case one of the properties that Github gives us is &lt;code&gt;login&lt;/code&gt;, so I&#39;ll render that onto the screen.&lt;/p&gt;
&lt;p&gt;Finally, we can deal with the failure case by logging an error. In this case, &lt;code&gt;request.data&lt;/code&gt; will be the HTTP error, and we can output the &lt;code&gt;message&lt;/code&gt; property:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;failure&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Error&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with that we now have all the properties required to create the &lt;code&gt;RemoteData&lt;/code&gt; instance:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; RemoteData &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react-remote-data-js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;GithubData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;RemoteData&lt;br&gt;    url&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;http://api.github.com/users/jackfranklin&quot;&lt;/span&gt;&lt;br&gt;    notAsked&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;notAsked&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    pending&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;pending&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    success&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;success&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    failure&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;failure&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Under the hood, &lt;code&gt;RemoteData&lt;/code&gt; keeps track of the request&#39;s state and ensures that the component renders the correct function depending on the state of the HTTP request.&lt;/p&gt;
&lt;h2&gt;Thoughts on creating &lt;code&gt;ReactRemoteData&lt;/code&gt; and abstracting with React&lt;/h2&gt;
&lt;p&gt;I think that this library also shows just how powerful React is and how we can use it to abstract libraries behind components. The &lt;a href=&quot;https://github.com/jackfranklin/react-remote-data/blob/master/src/index.js&quot;&gt;entire source of the library&lt;/a&gt; is only 55 lines long, and I&#39;ve come to really enjoy using React in this way. Hiding complexity in components that are then easily reused is a great way to help developers build applications quicker and with more clarity, because you can read the components being used in the code and take an educated guess on what they do.&lt;/p&gt;
&lt;p&gt;Another benefit of creating components like this is that it&#39;s very easy for you to create customised versions of them. Let&#39;s say you have a standard &lt;code&gt;HttpError&lt;/code&gt; component, that takes an error and shows a nice message to the user. You want to add &lt;code&gt;ReactRemoteData&lt;/code&gt; to your app, and you want every single instance of it to render your &lt;code&gt;HttpError&lt;/code&gt; component when something goes wrong. You can simply wrap &lt;code&gt;ReactRemoteData&lt;/code&gt; with your own version:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import HttpError from &#39;your/app/components&#39;

const MyRemoteData = props =&amp;gt; (
  &amp;lt;ReactRemoteData {...props} failure={props =&amp;gt; &amp;lt;HttpError {...props} /&amp;gt;} /&amp;gt;
)

export default MyRemoteData
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes it easy to deal with errors in one place, and be able to change it in just one place if your requirements change later on.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you&#39;d like an easy library that takes all the hassle out of remote HTTP requests, then I think &lt;code&gt;ReactRemoteData&lt;/code&gt; might be for you. You can find further instructions on its usage &lt;a href=&quot;https://github.com/jackfranklin/react-remote-data&quot;&gt;on the GitHub repository&lt;/a&gt; and I&#39;d love to hear any of your thoughts via Twitter or as a GitHub issue.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Functional Stateless Components in React</title>
    <link href="http://www.jackfranklin.co.uk/blog/functional-stateless-components-react/"/>
    <updated>2017-03-07T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/functional-stateless-components-react/</id>
    <content type="html">&lt;h2&gt;What are functional, stateless components?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#stateless-functional-components&quot;&gt;React 0.14 introduced functional, stateless components&lt;/a&gt; as a way to define React components as a function, rather than as an ES2015 class or via &lt;code&gt;React.createClass&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Prior to React 0.14, writing a presentational component (that is, one that just renders props, and doesn&#39;t have state), could be fairly verbose:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Username &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;The logged &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; user is&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// OR:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Username&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;The logged &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; user is&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;React 0.14 introduced functional stateless components (or, from now on, FSCs), which lets you express the above more succinctly:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Username&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;The logged &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; user is&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which, via ES2015 arrow functions, destructuring and implicit returns can be cut down really nicely:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Username&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; username &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;The logged &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; user is&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;FSCs not only provide a cleaner syntax but also have some other benefits that I&#39;d like to talk about today, along with a couple of gotchas and things to look out for.&lt;/p&gt;
&lt;p&gt;It&#39;s also important to note that you can have stateless class components, and that in the future we might be able to have functional, &lt;em&gt;stateful&lt;/em&gt; components. &lt;a href=&quot;https://tylermcginnis.com/functional-components-vs-stateless-functional-components-vs-stateless-components/&quot;&gt;Tyler McGinnis&#39; post on the different types of components&lt;/a&gt; does a great job of laying out all the different terminology.&lt;/p&gt;
&lt;p&gt;I think the primary benefit of FSCs is simplicity, and to me they act as a visual signal: &amp;quot;this component is solely props in, rendered UI out&amp;quot;. If I see a class component, I do have to scan through to see what lifecycle methods it may be using, and what callbacks it may have. If I see an FSC, I know it isn&#39;t doing anything fancy. There are definitely times I&#39;ll write a stateless class component so I can define callback methods as class properties (especially if I&#39;m passing prop values into a callback prop), but I&#39;ll write FSCs to signal that &amp;quot;this is a very straightforward rendering component&amp;quot;.&lt;/p&gt;
&lt;h2&gt;FSCs lead to simplicity and offer visual cues&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.twitter.com/acemarke&quot;&gt;Mark&lt;/a&gt;, who I asked to review this post, made a &lt;a href=&quot;https://github.com/jackfranklin/javascriptplayground.com/pull/70#issuecomment-284192694&quot;&gt;great point in his review&lt;/a&gt; that FSCs offer visual cues that a component is solely taking some props and rendering output. If you have a class component, you have to read through the code to see if it deals with state, has lifecycle hooks, and so on. FSCs by definition have to be simple and that can save you time as a developer.&lt;/p&gt;
&lt;p&gt;If you do have a component that doesn&#39;t have any state, but needs to define lifecycle methods, or have many event handlers, you should still prefer class components, even if they don&#39;t use state, but for presentational components FSCs are a perfect fit.&lt;/p&gt;
&lt;h2&gt;The syntax of FSCs encourages stateless components&lt;/h2&gt;
&lt;p&gt;Stateless components (also known as presentational components) should make up the bulk of your React applications. As a general rule of thumb, the less stateful components your application has, the better. Stateless components are easier to test, because you never have to interact or set up state. You can pass them props and assert on their output, and never have to test user interactions. They will generally have fewer bugs in them; in my experience components that have and change state over time are where most bugs will occur.&lt;/p&gt;
&lt;h2&gt;It&#39;s hard to convert a FSC to a stateful component&lt;/h2&gt;
&lt;p&gt;Imagine you have a component that you think you might need to add state to. It&#39;s actually a fair bit of manual work to convert a FSC to a stateful component, regardless of if you&#39;re using ES2015 classes or &lt;code&gt;React.createClass&lt;/code&gt;. Although this used to really frustrate me, I&#39;ve come to appreciate this because it makes you think about if you really want to add state to the component. When you have a class component with just a &lt;code&gt;render&lt;/code&gt; method, it&#39;s trivial to add state, but with a FSC it needs to be converted. Making it harder to quickly add state to a component is a good thing; you should carefully consider if you really need to.&lt;/p&gt;
&lt;p&gt;To be clear; there are times when you can convert a FSC to a stateful component with good reason, but make sure you have that reason first and you&#39;ve fully thought it through.&lt;/p&gt;
&lt;h2&gt;FSCs are not bound to React&lt;/h2&gt;
&lt;p&gt;In the world of JavaScript a new framework comes and goes every day; we&#39;ve all seen the satirical blog posts about frameworks and version numbers of frameworks. But a FSC is not tied to React at all, other than the fact that it uses the JSX syntax. If you wanted to switch to another framework, or one day React stopped being worked on, it would be easy for another framework to add support for FSCs and make the adoption path easy. There&#39;s no reason React will cease to exist - but in general I&#39;ve found the less code in your app that&#39;s bound to a specific framework, the better.&lt;/p&gt;
&lt;h2&gt;FSCs are great for styling (particularly on smaller projects)&lt;/h2&gt;
&lt;p&gt;In smaller projects, or small hack days, I&#39;ve found that I will often use FSCs to very quickly create components that are used purely for styling:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;MyBlueButton&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; styles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;blue&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;white&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;In the future, FSCs may be optimised for performance by React&lt;/h2&gt;
&lt;p&gt;In the release for React 0.14, it was noted that in the future there are potential optimisations that React can make for FSCs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the future, we’ll also be able to make performance optimizations specific to these components by avoiding unnecessary checks and memory allocations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whilst this is still work that is on going, clearly the React team are heavily behind FSCs as the building blocks of your applications:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This pattern is designed to encourage the creation of these simple components that should comprise large portions of your apps.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not only should you use FSCs because the React team encourages it, but in a future release of React you may see good performance increases by doing so. &lt;strong&gt;Note that currently there is no optimisations done on FSCs&lt;/strong&gt;. Whilst it is planned after the work on React Fiber, there is currently no difference in performance.&lt;/p&gt;
&lt;h2&gt;Event handlers and FSCs&lt;/h2&gt;
&lt;p&gt;It&#39;s a bit of a misconception that FSCs don&#39;t allow you to define event handlers. You can just define them in-line:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;SomeButton&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;onClick&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;onClick&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Click me&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s important to note that this isn&#39;t the most efficient way of doing this; every time the component is run to potentially be rerendered, the &lt;code&gt;onClick&lt;/code&gt; function will be redefined. This is work that you might want to avoid - and in some performance critical applications you might see this make a small difference. You&#39;ll find many blog posts online saying you should never do this, but the reality is for most applications that the optimisations will not be noticed. You should be aware of this and know that in certain situations it might really hurt performance, but don&#39;t shy away from adding an event handler in an FSC because of it.&lt;/p&gt;
&lt;p&gt;If you do really want to avoid this, you have two choices. You either need to turn the component into a full component, or you can pull the event handler out of the FSC (only if you don&#39;t want to refer to the component&#39;s &lt;code&gt;props&lt;/code&gt;, which means this often isn&#39;t feasible):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;onClick&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;SomeButton&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;onClick&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Click me&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;You can still define &lt;code&gt;propTypes&lt;/code&gt; and &lt;code&gt;defaultProps&lt;/code&gt; in FSCs&lt;/h2&gt;
&lt;p&gt;When using FSCs, you define &lt;code&gt;propTypes&lt;/code&gt; and &lt;code&gt;defaultProps&lt;/code&gt; on the function itself:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Username&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;Username&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;propTypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;Username&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;defaultProps &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Context in FSCs&lt;/h2&gt;
&lt;p&gt;Although you should generally be wary of context in React, &lt;a href=&quot;http://javascriptplayground.com/blog/2017/02/context-in-reactjs-applications/&quot;&gt;as I blogged about recently&lt;/a&gt;, FSCs do still support context if you need them to. When using context, it&#39;s simply passed in as the second argument:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Username&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Username is &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;FooComponent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;contextTypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On the whole I advise mostly against context, for reasons documented in the above blog post, but it&#39;s good to know that if you need it, you are able to use it.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To conclude, I would actively encourage you to think about using FSCs for as much of your application as you can. They are cleaner, have the potential to be more performant as React develops, and encourage good patterns in your React codebase that will lead to a more maintainable application as it grows.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Huge thanks to &lt;a href=&quot;https://twitter.com/acemarke&quot;&gt;Mark Erikson&lt;/a&gt; for taking time to review this blog post.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Building Langton&#39;s Ant in Elm</title>
    <link href="http://www.jackfranklin.co.uk/blog/langtons-ant-elm-lang/"/>
    <updated>2017-03-14T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/langtons-ant-elm-lang/</id>
    <content type="html">&lt;p&gt;Last week I attended the &lt;a href=&quot;https://www.meetup.com/Elm-London-Meetup/&quot;&gt;Elm London meetup&lt;/a&gt;, arranged by &lt;a href=&quot;http://twitter.com/krisajenkins&quot;&gt;Kris Jenkins&lt;/a&gt;, who always produces a great selection of challenges for people to take on for all skill levels. Along with &lt;a href=&quot;http://twitter.com/isaacseymour&quot;&gt;Isaac&lt;/a&gt;, we decided to take on Kris&#39; challenge to build Langton&#39;s Ant in Elm.&lt;/p&gt;
&lt;h2&gt;Langton&#39;s Ant&lt;/h2&gt;
&lt;p&gt;Langton&#39;s Ant is a game similar to &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway&#39;s_Game_of_Life&quot;&gt;Conway&#39;s Game of Life&lt;/a&gt; in that cells on a game board change from being alive to dead based on their surroundings and certain criteria. In Langton&#39;s Ant there is a small ant on the board that moves and changes squares as it goes. The ant starts on any random square, and on each move it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Based on the colour of the square, it either turns 90 degrees right, or 90 degrees left.&lt;/li&gt;
&lt;li&gt;Changes the colour of the square it&#39;s on from black to white, or vice versa.&lt;/li&gt;
&lt;li&gt;Moves forward one square in the direction it&#39;s facing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The fact that the game has well defined rules makes it perfect for a short hack event, so we set about building it in Elm.&lt;/p&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;I used &lt;a href=&quot;https://github.com/halfzebra/create-elm-app&quot;&gt;create-elm-app&lt;/a&gt; to quickly get the app going. It&#39;s a really handy way to get a working application and local server up without having to think about it, and I highly recommend it.&lt;/p&gt;
&lt;h2&gt;Defining types&lt;/h2&gt;
&lt;p&gt;When working in Elm the first thing I always do is define the types for the key concepts of the application. Looking through Langton&#39;s ant, we could see we&#39;d need to model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The concept of an &lt;code&gt;Ant&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cell&lt;/code&gt;s on a game &lt;code&gt;Board&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Coord&lt;/code&gt;s which cells are positioned at on the board.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Direction&lt;/code&gt; of the ant.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Colour&lt;/code&gt; of a cell.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Starting with the easier ones, a &lt;code&gt;Direction&lt;/code&gt; is a union type that can be one of &lt;code&gt;Up&lt;/code&gt;, &lt;code&gt;Down&lt;/code&gt;, &lt;code&gt;Left&lt;/code&gt; or &lt;code&gt;Right&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Direction&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Up&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Down&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Left&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Right&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And similarly, a &lt;code&gt;Colour&lt;/code&gt; is either &lt;code&gt;White&lt;/code&gt; or &lt;code&gt;Black&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Colour&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;White&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Black&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And a coordinate, or &lt;code&gt;Coord&lt;/code&gt;, is a tuple of &lt;code&gt;(x, y)&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Coord&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you have these, it&#39;s easy to combine them to make up the &amp;quot;bigger&amp;quot; types. A &lt;code&gt;cell&lt;/code&gt; is a record that has a coordinate pair and a colour:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Cell&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Coord&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Colour&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the &lt;code&gt;Ant&lt;/code&gt; is a record with a position and a direction:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Ant&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Coord&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Direction&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The board is then a dictionary (quite similar to a JavaScript object, or a Ruby hash) that has coordinates as its keys, and then &lt;code&gt;Cell&lt;/code&gt;s as its values. There&#39;s a bit of duplication here because you&#39;re using the coordinates for the keys of the dictionary, and then storing the keys in the cell, but we left it like that because it&#39;s nice to be able to have a cell tell you its position, without having to keep a reference to the coordinates around.&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Board&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token constant&quot;&gt;Dict&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Coord&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Cell&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, the &lt;code&gt;Model&lt;/code&gt; has a &lt;code&gt;board&lt;/code&gt; and an &lt;code&gt;ant&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Board&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;ant&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Ant&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method of defining the types is such a good way to think about your application and I highly recommend doing so. Even if you realise that you haven&#39;t quite modelled your types right later, it&#39;s easy to change them and let the compiler walk you through fixing them. They say if you define your types right, the rest of your application easily falls into place, and I&#39;d say that&#39;s definitely true of Elm.&lt;/p&gt;
&lt;h2&gt;Initial State&lt;/h2&gt;
&lt;p&gt;The initial state of the world is an ant at position &lt;code&gt;(0, 0)&lt;/code&gt; facing &lt;code&gt;Left&lt;/code&gt; (you could pick any direction, it doesn&#39;t matter) and an empty list of cells:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;initialCells&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Board&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;initialCells&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;Dict&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;empty&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;initialAnt&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Ant&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;initialAnt&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token constant&quot;&gt;Ant&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Left&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token builtin&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token builtin&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;initialCells&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;initialAnt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Cmd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;none&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason we have no cells to start with is because we don&#39;t actually need a cell to exist until the ant moves off it. When an ant reaches a square, it will turn the cell black if it&#39;s white, or white if it&#39;s black, and by default all cells are white. That means if there&#39;s no cell under the ant, we can just create a white one, and go from there.&lt;/p&gt;
&lt;h2&gt;Moving on a tick&lt;/h2&gt;
&lt;p&gt;There is no user input in Langton&#39;s Ant, and as such we needed a way to run the game every millisecond to advance it to the next stage. We can use subscriptions in Elm to do this.&lt;/p&gt;
&lt;p&gt;In The Elm Architecture we define a &lt;code&gt;subscriptions&lt;/code&gt; function which we can use to subscribe to events. Elm&#39;s &lt;code&gt;Time&lt;/code&gt; module provides a way to send a &lt;code&gt;Msg&lt;/code&gt; at defined time intervals:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Msg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;subscriptions&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;Time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;every&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;millisecond&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Tick&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This instructs Elm&#39;s runtime to send a &lt;code&gt;Tick&lt;/code&gt; message every millisecond.&lt;/p&gt;
&lt;h2&gt;Dealing with a Tick&lt;/h2&gt;
&lt;p&gt;The first thing to do is define our &lt;code&gt;Msg&lt;/code&gt; type, that is, the types of messages we expect to flow through our system. In our case it&#39;s just one, &lt;code&gt;Tick&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Msg&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Tick&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Time&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When &lt;code&gt;Time.every&lt;/code&gt; sends a &lt;code&gt;Tick&lt;/code&gt; it will also send the current time with it, which we&#39;ll ignore, but we have to define our &lt;code&gt;Msg&lt;/code&gt; type as &lt;code&gt;Tick Time&lt;/code&gt; to keep the compiler happy. In our &lt;code&gt;update&lt;/code&gt; function we&#39;ll simply hand off to a &lt;code&gt;tick&lt;/code&gt; function that will run the actual game:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Cmd&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token constant&quot;&gt;Tick&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;tick&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Cmd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;none&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Defining &lt;code&gt;tick&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Recall that there are three parts to a move in Langton&#39;s Ant:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Based on the colour of the square, it either turns 90 degrees right, or 90 degrees left.&lt;/li&gt;
&lt;li&gt;Changes the colour of the square it&#39;s on from black to white, or vice versa.&lt;/li&gt;
&lt;li&gt;Moves forward one square in the direction it&#39;s facing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Breaking that into code, the first thing we need to do is get the current cell that the ant is on. We can do that because an &lt;code&gt;Ant&lt;/code&gt; has a &lt;code&gt;position&lt;/code&gt; key that is a coordinate pair, so we can write a function that gets the cell for the ant:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;getCell&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Board&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Coord&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Cell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;getCell&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;coord&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;Dict&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;coord&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Maybe&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;withDefault&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Cell&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;coord&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;White&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We try to get the cell for the given coordinates, and if it doesn&#39;t exist, we&#39;ll just default to a &lt;code&gt;White&lt;/code&gt; cell at those coordinates.&lt;/p&gt;
&lt;p&gt;Once we have that cell, we need to flip it&#39;s colour:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;tick&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Model&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;tick&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;ant&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token hvariable&quot;&gt;currentCell&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token hvariable&quot;&gt;getCell&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;ant&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;position&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token hvariable&quot;&gt;newCell&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;currentCell&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;flipColour&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;currentCell&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where &lt;code&gt;flipColour&lt;/code&gt; just swaps &lt;code&gt;Black&lt;/code&gt; to &lt;code&gt;White&lt;/code&gt; and vice-versa:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;flipColour&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Colour&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Colour&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;flipColour&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token constant&quot;&gt;Black&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token constant&quot;&gt;White&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token constant&quot;&gt;White&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token constant&quot;&gt;Black&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we have the new cell we use &lt;code&gt;Dict.insert&lt;/code&gt; to insert it back onto our board. &lt;code&gt;Dict.insert&lt;/code&gt; will overwrite a cell if one already exists, so it&#39;s perfect because we don&#39;t need any custom logic depending on if the cell exists or not.&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;newCell&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;currentCell&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;flipColour&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;currentCell&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;newBoard&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;Dict&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;insert&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;ant&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;newCell&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;board&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we need to deal with the ant. Depending on the colour of the cell when the ant arrived on it, it needs to either flip itself 90 degrees left or right, so we can update the ant and change its direction:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;newAnt1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;ant&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;getNextDirection&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;ant&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;currentCell&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where &lt;code&gt;getNextDirection&lt;/code&gt; looks like so:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;getNextDirection&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Ant&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Cell&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Direction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;getNextDirection&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;colour&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;White&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Up&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token constant&quot;&gt;Right&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;White&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token constant&quot;&gt;Down&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;White&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Down&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token constant&quot;&gt;Left&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;White&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token constant&quot;&gt;Up&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Black&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Up&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token constant&quot;&gt;Left&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Black&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token constant&quot;&gt;Up&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Black&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Down&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token constant&quot;&gt;Right&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Black&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token constant&quot;&gt;Down&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the arguments note how we destructure the ant, pulling out just the &lt;code&gt;direction&lt;/code&gt;, and do the same with the cell to pull its &lt;code&gt;direction&lt;/code&gt;. We then combine them into a tuple and pattern match on them, encoding the rules of the ant and how it flips based on the colour.&lt;/p&gt;
&lt;p&gt;Finally, now we have the ant facing the right direction, we need to update its positional coordinates to move it in the right direction:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;newAnt2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;newAnt1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;getCoordInFront&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;newAnt1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where &lt;code&gt;getCoordInFront&lt;/code&gt; maps the ant&#39;s positional coordinates, changing either the &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; by one, positively or negatively depending on the direction:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;getCoordInFront&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Ant&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Coord&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;getCoordInFront&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token constant&quot;&gt;Up&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token hvariable&quot;&gt;Tuple&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mapSecond&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;position&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token constant&quot;&gt;Down&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token hvariable&quot;&gt;Tuple&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mapSecond&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;position&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token constant&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token hvariable&quot;&gt;Tuple&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mapFirst&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;position&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token constant&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token hvariable&quot;&gt;Tuple&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mapFirst&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;position&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here &lt;code&gt;Tuple.mapFirst&lt;/code&gt; and &lt;code&gt;Tuple.mapSecond&lt;/code&gt; come in really handy to tidy this code up and keep it nice and succinct. We could have written &lt;code&gt;(&#92;x -&amp;gt; x + 1)&lt;/code&gt; as &lt;code&gt;((+) 1)&lt;/code&gt;, but we didn&#39;t because doing &lt;code&gt;((-1) x)&lt;/code&gt; ends up as &lt;code&gt;-1 + x&lt;/code&gt; which is not what we want, so here we prefer the longer form to keep it clear.&lt;/p&gt;
&lt;p&gt;With that, our &lt;code&gt;tick&lt;/code&gt; function is done and we have the new model being generated. Next up, we&#39;ll render it onto the page.&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;tick&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Model&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;tick&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;ant&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token hvariable&quot;&gt;currentCell&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token hvariable&quot;&gt;getCell&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;ant&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;position&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token hvariable&quot;&gt;newCell&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;currentCell&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;flipColour&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;currentCell&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token hvariable&quot;&gt;newBoard&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token hvariable&quot;&gt;Dict&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;insert&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;ant&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;newCell&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;board&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token hvariable&quot;&gt;newAnt1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;ant&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;getNextDirection&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;ant&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;currentCell&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token hvariable&quot;&gt;newAnt2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;newAnt1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;getCoordInFront&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;newAnt1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token constant&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;newBoard&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;newAnt2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Rendering the board&lt;/h2&gt;
&lt;p&gt;Rather than use HTML, we chose to use &lt;a href=&quot;http://package.elm-lang.org/packages/elm-lang/svg/latest/Svg&quot;&gt;elm-lang/svg&lt;/a&gt; for our board.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;view&lt;/code&gt; function looks like so:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Html&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Msg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;ant&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;600&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;600&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;viewBox&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-500 -500 1000 1000&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;renderCells&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;board&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;renderAnt&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;ant&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By creating the SVG with a &lt;code&gt;viewBox&lt;/code&gt; attribute of &lt;code&gt;-500 -500 1000 1000&lt;/code&gt; we create an SVG element that puts an element with &lt;code&gt;x &amp;quot;0&amp;quot;, y &amp;quot;0&amp;quot;&lt;/code&gt; in the middle of the box. This means when we render our first cell at &lt;code&gt;(0, 0)&lt;/code&gt;, it will go in the middle of the SVG. &lt;a href=&quot;https://css-tricks.com/scale-svg/&quot;&gt;You can read more about scaling SVGs on CSS Tricks&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Rendering the cells&lt;/h2&gt;
&lt;p&gt;To render the cells, we map over all the values using &lt;code&gt;Dict.values&lt;/code&gt; and render each one:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;renderCell&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Cell&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Svg&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Msg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;renderCell&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;renderItem&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;colourToSvgFill&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;colour&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;renderCells&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Board&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Svg&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Msg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;renderCells&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Dict&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;values&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;renderCell&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how we use the SVG element &lt;code&gt;g&lt;/code&gt; to group elements up. &lt;code&gt;g&lt;/code&gt; is really handy for grouping related elements without it applying any extra styling or behaviour. It&#39;s akin to a &lt;code&gt;div&lt;/code&gt; in HTML.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;renderCell&lt;/code&gt; calls the generic &lt;code&gt;renderItem&lt;/code&gt; function, passing in the position of the cell and the colour. &lt;code&gt;colourToSvgFill&lt;/code&gt; just maps the type &lt;code&gt;Black&lt;/code&gt; to &lt;code&gt;&amp;quot;black&amp;quot;&lt;/code&gt;, and the same with &lt;code&gt;White&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;renderCell&lt;/code&gt; produces an SVG &lt;code&gt;rect&lt;/code&gt;element with the right width, height and positions applied:&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;renderItem&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Coord&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Svg&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Msg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;renderItem&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;xPos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;yPos&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;colour&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;rect&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;stroke&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;black&quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;fill&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;colour&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;xPos&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;toString&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;yPos&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;renderAnt&lt;/code&gt; function also uses &lt;code&gt;renderItem&lt;/code&gt;, just passing in a different colour depending on the ant&#39;s direction (which you don&#39;t need to do, we just did it so we could see the direction the ant was heading). &lt;code&gt;colourForAnt&lt;/code&gt; just maps the ant&#39;s colour to a direction.&lt;/p&gt;
&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;renderAnt&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Ant&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Svg&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Msg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;renderAnt&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;renderItem&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;colourForAnt&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Fin&lt;/h2&gt;
&lt;p&gt;And with that, we have our ant!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/img/posts/langtons-ant/langtons-ant.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you&#39;d like to find the full code, you can &lt;a href=&quot;https://github.com/jackfranklin/langtons-ant-elm&quot;&gt;find it on Github&lt;/a&gt;. I&#39;d encourage you to have a try at building Langton&#39;s Ant, it&#39;s a well defined, contained challenge that has some really interesting parts. Elm&#39;s type system makes it a perfect fit for a challenge like this, and it was a neat way to explore and learn more about the language.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Getting started with TypeScript and React</title>
    <link href="http://www.jackfranklin.co.uk/blog/react-typescript/"/>
    <updated>2017-04-24T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/react-typescript/</id>
    <content type="html">&lt;p&gt;I&#39;ve recently been getting into TypeScript following a lot of positive blogs about it from &lt;a href=&quot;https://medium.com/@tomdale/glimmer-js-whats-the-deal-with-typescript-f666d1a3aad0&quot;&gt;Tom Dale&lt;/a&gt; and others. Today I&#39;ll show you how I&#39;ve set up a TypeScript project from scratch that uses React, and Webpack for managing the build process. I&#39;ll also discuss my initial impressions of TypeScript and in particular working with TypeScript and ReactJS.&lt;/p&gt;
&lt;p&gt;I won&#39;t be going into detail on the specifics of TypeScript&#39;s syntax, but you can read either the &lt;a href=&quot;https://www.typescriptlang.org/docs/tutorial.html&quot;&gt;TypeScript handbook&lt;/a&gt; or the free book &lt;a href=&quot;https://basarat.gitbooks.io/typescript/content/docs/getting-started.html&quot;&gt;TypeScript Deep Dive&lt;/a&gt; which will also give you a great introduction to the language.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; If you&#39;d like to read this post in German, you can do so &lt;a href=&quot;https://reactx.de/artikel/reactjs-typescript/&quot;&gt;thanks to the awesome folks at Reactx.de&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installing TypeScript and configuring it&lt;/h2&gt;
&lt;p&gt;The first thing to do was install TypeScript locally into my &lt;code&gt;node_modules&lt;/code&gt; directory, which I did using Yarn, first using &lt;code&gt;yarn init&lt;/code&gt; to create a new project:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn init
yarn add typescript
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you install TypeScript you get the &lt;code&gt;tsc&lt;/code&gt; command line tool which can compile TypeScript but also create a starting &lt;code&gt;tsconfig.json&lt;/code&gt; for you to edit. You can get this by running &lt;code&gt;tsc --init&lt;/code&gt; - if you&#39;ve installed TypeScript locally you&#39;ll need to run &lt;code&gt;./node_modules/.bin/tsc --init&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I have the &lt;code&gt;./node_modules/.bin&lt;/code&gt; directory on my &lt;code&gt;$PATH&lt;/code&gt;, &lt;a href=&quot;https://github.com/jackfranklin/dotfiles/blob/master/zsh/zshrc#L101&quot;&gt;which you can find in my dotfiles&lt;/a&gt;. This is &lt;em&gt;slightly&lt;/em&gt; risky, as I could accidentally run any executable that&#39;s in that directory, but I&#39;m willing to take that risk because I know what&#39;s installed locally and it saves a lot of typing!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tsc --init&lt;/code&gt; generates a &lt;code&gt;tsconfig.json&lt;/code&gt; which is where all the config for TypeScript&#39;s compiler lives. There&#39;s a few changes I&#39;ve made to the default config, and the one I&#39;m using is below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;es6&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// use ES2015 modules&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;es6&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// compile to ES2015 (Babel will do the rest)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;allowSyntheticDefaultImports&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// see below&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;baseUrl&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// enables you to import relative to this folder&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;sourceMap&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// make TypeScript generate sourcemaps&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;outDir&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ts-build&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// output directory to build to (irrelevant because we use Webpack most of the time)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;jsx&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;preserve&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// enable JSX mode, but &quot;preserve&quot; tells TypeScript to not transform it (we&#39;ll use Babel)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;strict&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;exclude&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;node_modules&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// don&#39;t run on any code in the node_modules directory&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;code&gt;allowSyntheticDefaultImports&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This rule allows you to use ES2015 style default imports even when the code you&#39;re importing doesn&#39;t have an ES2015 default export.&lt;/p&gt;
&lt;p&gt;This happens when you import, for example, React, whose code is not written in ES2015 (the source code is, but React ships a built version). This means that it technically doesn&#39;t have an ES2015 default export, so TypeScript will tell you so when you import it. However, build tools like Webpack are able to import the right thing, so I turn this option on because I prefer &lt;code&gt;import React from &#39;react&#39;&lt;/code&gt; over &lt;code&gt;import * as React from &#39;react&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;strict&lt;/code&gt;: true&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/What&#39;s-new-in-TypeScript#new---strict-master-option&quot;&gt;TypeScript version 2.3&lt;/a&gt; introduced a new config option, &lt;code&gt;strict&lt;/code&gt;. When turned on this configures TypeScript&#39;s compiler to be as strict as possible - this might not be what you want if you&#39;re porting some JS to TS, but for new projects it makes sense to be as strict as possible out of the box. This turns on a few different settings, the most notable of which are &lt;code&gt;noImplicitAny&lt;/code&gt; and &lt;code&gt;strictNullChecks&lt;/code&gt;:&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;noImplicitAny&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Often when you want to add TypeScript to an existing project TypeScript makes it easy by not throwing an error when you don&#39;t declare the types of variables. However, when I&#39;m creating a new TypeScript project from scratch I&#39;d like the compiler to be as strict as possible.&lt;/p&gt;
&lt;p&gt;One of the things TypeScript does by default is implicitly add the &lt;code&gt;any&lt;/code&gt; type to variables. &lt;code&gt;any&lt;/code&gt; is effectively an escape hatch in TypeScript to say &amp;quot;don&#39;t type-check this, it can be any value&amp;quot;. That&#39;s useful when you&#39;re porting JavaScript, but it&#39;s better to be strict when you can. With this setting set to &lt;code&gt;true&lt;/code&gt;, you can&#39;t miss any declarations. For example, this code will error when &lt;code&gt;noImplicitAny&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function log(thing) {
  console.log(&#39;thing&#39;, thing)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can read more about this in the &lt;a href=&quot;https://basarat.gitbooks.io/typescript/docs/options/noImplicitAny.html&quot;&gt;TypeScript Deep Dive&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;strictNullChecks&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This is another option that makes TypeScript&#39;s compiler stricter. The TypeScript Deep Dive book has a &lt;a href=&quot;https://basarat.gitbooks.io/typescript/docs/options/strictNullChecks.html&quot;&gt;great section on this option&lt;/a&gt;. With this option on, TypeScript will spot more occasions where you&#39;re referencing a value that might be undefined, it will error at you. For example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;code&gt;strictNullChecks&lt;/code&gt;, if TypeScript thinks that &lt;code&gt;person&lt;/code&gt; or &lt;code&gt;person.age&lt;/code&gt; might be &lt;code&gt;undefined&lt;/code&gt;, it will error and make sure you deal with it. This prevents runtime errors so it seems like a pretty good option to enable from the get go.&lt;/p&gt;
&lt;h2&gt;Setting up Webpack, Babel and TypeScript&lt;/h2&gt;
&lt;p&gt;I&#39;m a big Webpack fan; I enjoy the ecosystem of plugins available, I like the developer workflow and it&#39;s good at managing complex applications and their build pipeline. Therefore, even though we could just use TypeScript&#39;s compiler, I&#39;d still like to add Webpack in. We&#39;ll also need Babel because the TypeScript compiler is going to output ES2015 + React for us, so we&#39;ll get Babel to do the work. Let&#39;s install Webpack, Babel and the relevant presets, along with &lt;a href=&quot;https://github.com/TypeStrong/ts-loader&quot;&gt;ts-loader&lt;/a&gt;, the Webpack plugin for TypeScript.&lt;/p&gt;
&lt;p&gt;There is also &lt;a href=&quot;https://github.com/s-panferov/awesome-typescript-loader&quot;&gt;awesome-typescript-loader&lt;/a&gt;, but I found &lt;code&gt;ts-loader&lt;/code&gt; first and so far it&#39;s been great. I would love to hear from anyone who uses the &lt;code&gt;awesome-typescript-loader&lt;/code&gt;, and how it compares.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add webpack babel-core babel-loader babel-preset-es2015 babel-preset-react ts-loader webpack-dev-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point I have to thank Tom Duncalf, whose &lt;a href=&quot;http://blog.tomduncalf.com/posts/setting-up-typescript-and-react/&quot;&gt;blog post on TypeScript 1.9 + React&lt;/a&gt; was a brilliant starting point for me and I highly recommend it.&lt;/p&gt;
&lt;p&gt;There&#39;s nothing too surprising in the Webpack config, but I&#39;ve left some comments in the code to explain it:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; webpack &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;webpack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;path&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// put sourcemaps inline&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;devtool&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;eval&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// entry point of our application, within the `src` directory (which we add to resolve.modules below):&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;index.tsx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// configure the output directory and publicPath for the devServer&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;app.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;publicPath&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;dist&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;dist&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// configure the dev server to run&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;devServer&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;historyApiFallback&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// tell Webpack to load TypeScript files&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Look for modules in .ts(x) files first, then .js&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.ts&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.tsx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// add &#39;src&#39; to the modules, so that when you import files you can do so with &#39;src&#39; as the relative route&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;src&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;node_modules&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// .ts(x) files should first pass through the Typescript loader, and then through babel&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;&#92;.tsx?$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;babel-loader&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ts-loader&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;src&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We configure the loaders so that any &lt;code&gt;.ts(x)&lt;/code&gt; file is first passed through &lt;code&gt;ts-loader&lt;/code&gt;. This compiles it with TypeScript using the settings in our &lt;code&gt;tsconfig.json&lt;/code&gt; - and emits &lt;code&gt;ES2015&lt;/code&gt;. We then use Babel to convert that down to ES5. To do this I create a &lt;code&gt;.babelrc&lt;/code&gt; that contains the presets that we need:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with that, we&#39;re now ready to write our TypeScript application.&lt;/p&gt;
&lt;h2&gt;Writing a TypeScript React component&lt;/h2&gt;
&lt;p&gt;Now we are ready to create &lt;code&gt;src/index.tsx&lt;/code&gt;, which will be our application&#39;s entry point. For now we can create a dummy component and render it to check it&#39;s all working.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react-dom&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello world&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;App &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;app&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you run Webpack now against this code you&#39;ll see some errors:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ERROR in ./src/index.tsx
(1,19): error TS2307: Cannot find module &#39;react&#39;.

ERROR in ./src/index.tsx
(2,22): error TS2307: Cannot find module &#39;react-dom&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This happens because TypeScript is trying to figure out the type of React, and what it exports, and is trying to do the same for React DOM. React isn&#39;t authored in TypeScript so it doesn&#39;t contain that information, but thankfully for this situation the community has created &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped&quot;&gt;DefinitelyTyped&lt;/a&gt;, a large repository of types for modules.&lt;/p&gt;
&lt;p&gt;The installation mechanism changed recently; all the types are published under the npm &lt;code&gt;@types&lt;/code&gt; scope, so to get the types for React and ReactDOM we run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add @types/react
yarn add @types/react-dom
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with that the errors go away. Whenever you install a dependency you can always try installing the &lt;code&gt;@types&lt;/code&gt; package too, or if you want to see if it has types available, you can use the &lt;a href=&quot;https://microsoft.github.io/TypeSearch/&quot;&gt;TypeSearch&lt;/a&gt; website to do so.&lt;/p&gt;
&lt;h2&gt;Running the app locally&lt;/h2&gt;
&lt;p&gt;To run the app locally we just run the &lt;code&gt;webpack-dev-server&lt;/code&gt; command. I set up a script, &lt;code&gt;start&lt;/code&gt;, that will do just that:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;webpack-dev-server&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The dev server will find the &lt;code&gt;webpack.config.json&lt;/code&gt; file and use it to build our application.&lt;/p&gt;
&lt;p&gt;If you run &lt;code&gt;yarn start&lt;/code&gt; you will see the output from the server, including the &lt;code&gt;ts-loader&lt;/code&gt; output that confirms it&#39;s all working.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ webpack-dev-server
Project is running at http://localhost:3000/
webpack output is served from /dist
404s will fallback to /index.html
ts-loader: Using typescript@2.3.0 and /Users/jackfranklin/git/interactive-react-introduction/tsconfig.json
Version: webpack 2.4.1
Time: 6077ms
 Asset     Size  Chunks                    Chunk Names
app.js  1.14 MB       0  [emitted]  [big]  main
webpack: Compiled successfully.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To view it locally I just create an &lt;code&gt;index.html&lt;/code&gt; file that loads our compiled code:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;UTF-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;My Typescript App&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;dist/app.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see &lt;code&gt;Hello world!&lt;/code&gt; on port 3000, and we have TypeScript working!&lt;/p&gt;
&lt;h2&gt;Typing a module&lt;/h2&gt;
&lt;p&gt;For a project I was working on I wanted to use the &lt;a href=&quot;https://github.com/securingsincity/react-ace&quot;&gt;React Ace module&lt;/a&gt; to include a code editor in my project. However, the module doesn&#39;t provide types for it, and there is no &lt;code&gt;@types/react-ace&lt;/code&gt; either. In this case, we have to add the types to our application so TypeScript knows how to type it. Whilst this can seem annoying, the benefits of having TypeScript at least know a little about all your third party dependencies will save you debugging time.&lt;/p&gt;
&lt;p&gt;To define a file that has just types in, you suffix it &lt;code&gt;.d.ts&lt;/code&gt; (the &#39;d&#39; is for &#39;declaration&#39;) and you can read more about them on the &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/declaration-files/introduction&quot;&gt;TypeScript docs&lt;/a&gt;. TypeScript will automatically find these files in your project, you don&#39;t need to explicitly import them.&lt;/p&gt;
&lt;p&gt;I created the file &lt;code&gt;react-ace.d.ts&lt;/code&gt;, and added the following code that creates the module and defines its default export as a React component:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;declare module &lt;span class=&quot;token string&quot;&gt;&#39;react-ace&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ReactAceProps&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string&lt;br&gt;      editorProps&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      showPrintMargin&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; boolean&lt;br&gt;      minLines&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; number&lt;br&gt;      maxLines&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; number&lt;br&gt;      wrapEnabled&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; boolean&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string&lt;br&gt;      highlightActiveLine&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; boolean&lt;br&gt;      width&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string&lt;br&gt;      fontSize&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; number&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;ReactAce&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ComponentClass&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ReactAceProps&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ReactAce&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I first create a TypeScript interface for the properties that the component takes, and then the line &lt;code&gt;export = ReactAce&lt;/code&gt; declares that the component is the object exported by the module. By typing the properties, TypeScript will tell me if I typo a property or forget to pass one, which is really valuable.&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;Finally, I also wanted to have a good testing set up with TypeScript. I&#39;m a huge fan of Facebook&#39;s &lt;a href=&quot;https://facebook.github.io/jest/&quot;&gt;Jest&lt;/a&gt;, and did some googling to find out if I could run it with TypeScript. Turns out it&#39;s very possible, and there&#39;s even the &lt;a href=&quot;https://www.npmjs.com/package/ts-jest&quot;&gt;ts-jest&lt;/a&gt; package available which does all the heavy lifting. In addition, there is a &lt;code&gt;@types/jest&lt;/code&gt; package so you can have all your tests type-checked too.&lt;/p&gt;
&lt;p&gt;Huge thanks to RJ Zaworski, &lt;a href=&quot;https://rjzaworski.com/2016/12/testing-typescript-with-jest&quot;&gt;whose post on TypeScript and Jest&lt;/a&gt; got me started on this topic. Once you install &lt;code&gt;ts-jest&lt;/code&gt;, you just have to configure Jest, which is done in the &lt;code&gt;package.json&lt;/code&gt;, with some settings:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;jest&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;moduleFileExtensions&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;tsx&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;js&quot;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;transform&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;&#92;&#92;.(ts|tsx)$&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;rootDir&gt;/node_modules/ts-jest/preprocessor.js&quot;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;testRegex&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/*.spec.(ts|tsx|js)$&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first setting tells Jest to look for &lt;code&gt;.ts&lt;/code&gt; and &lt;code&gt;.tsx&lt;/code&gt; files. The &lt;code&gt;transform&lt;/code&gt; object tells Jest to run any TypeScript files through the ts-jest preprocessor, which runs them through the TypeScript compiler and produces JavaScript that Jest can consume. Finally, I updated the &lt;code&gt;testRegex&lt;/code&gt; setting to look for any &lt;code&gt;*.spec.ts(x)&lt;/code&gt; files, which is my preferred naming convention for tests.&lt;/p&gt;
&lt;p&gt;With this, I can just run &lt;code&gt;jest&lt;/code&gt; and have everything work as expected.&lt;/p&gt;
&lt;h2&gt;Linting with TSLint&lt;/h2&gt;
&lt;p&gt;Although TypeScript gives you a lot of checks on your code, I still wanted a linter to enforce some code style and quality checks. Much like ESLint to JavaScript, &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt; is the best option for checking TypeScript files. It works in the same way as ESLint - with a set of rules that you enable or disable, and there&#39;s also a &lt;a href=&quot;https://github.com/palantir/tslint-react&quot;&gt;TSLint-React&lt;/a&gt; package to add React specific rules.&lt;/p&gt;
&lt;p&gt;You can configure TSLint via a &lt;code&gt;tslint.json&lt;/code&gt; file and mine is below. I use both the &lt;code&gt;tslint:latest&lt;/code&gt; and &lt;code&gt;tslint-react&lt;/code&gt; presets, which enables a bunch of rules. I disagree with some of the defaults though so I override them - you might choose to do differently - this is up to you!&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;defaultSeverity&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;tslint:latest&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;tslint-react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;jsRules&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// use single quotes, but enforce double quotes in JSX&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;quotemark&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;single&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;jsx-double&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// I prefer no semi colons :)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;semicolon&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;never&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// This rule makes each Interface be prefixed with &#39;I&#39; which I don&#39;t like&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;interface-name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;never-prefix&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// This rule enforces objects to always have keys in alphabetical order&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;object-literal-sort-keys&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;rulesDirectory&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I can then run &lt;code&gt;tslint --project tsconfig.json&lt;/code&gt; to lint my project.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In summary, I&#39;ve found TypeScript to be a joy to work with so far. I&#39;ll definitely be blogging more about the specifics of the language and how I&#39;m using it, but in terms of setting up a build process, configuring all the tools and getting started with types, it&#39;s been a real joy. I&#39;d highly recommend giving it a go if you&#39;re looking for a bit more structure in your JS applications and want a strong compiler to help you avoid mistakes and spend less time debugging.&lt;/p&gt;
&lt;p&gt;If you&#39;d like to browse the code or get started from what I created in this post, I &lt;a href=&quot;https://github.com/javascript-playground/react-typescript-jest-demo&quot;&gt;pushed an example repo to GitHub&lt;/a&gt; that you can use as a starting point. Feel free to raise an issue on that repo if you have any questions about it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Refactoring React with Tests</title>
    <link href="http://www.jackfranklin.co.uk/blog/refactoring-react-tests/"/>
    <updated>2017-06-30T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/refactoring-react-tests/</id>
    <content type="html">&lt;p&gt;As you work on a React application it&#39;s highly likely that you&#39;ll encounter components that have grown over time. They may have started with just one particular use case in mind, but will have been added to since. This can lead to complex &lt;code&gt;render&lt;/code&gt; methods and code that&#39;s hard to follow.&lt;/p&gt;
&lt;p&gt;In this video you&#39;ll see how to spot components that need some work doing, how we test these components, and how we use the tests to guide us, splitting one component into two much more straightforward ones.&lt;/p&gt;
&lt;p&gt;PS: it&#39;s definitely worth making the video fullscreen or viewing &lt;a href=&quot;https://youtu.be/VTpMF7vbkFw&quot;&gt;on Youtube&lt;/a&gt; so you can see things more clearly.&lt;/p&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/VTpMF7vbkFw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;br&gt;
&lt;p&gt;If you&#39;d like to play with this code, &lt;a href=&quot;https://github.com/javascript-playground/react-refactoring-with-tests&quot;&gt;you can find the repository on GitHub&lt;/a&gt;, and feel free to raise any questions via GitHub issues on that repository.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Extracting Logic from React Components</title>
    <link href="http://www.jackfranklin.co.uk/blog/react-extracting-logic/"/>
    <updated>2017-07-17T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/react-extracting-logic/</id>
    <content type="html">&lt;p&gt;In the &lt;a href=&quot;https://javascriptplayground.com/blog/2017/06/refactoring-react-tests/&quot;&gt;previous screencast&lt;/a&gt; we took a React component that was doing too much and refactored it, splitting it into two components that are easier to maintain, use and test. Although I&#39;d recommend watching that video first, you don&#39;t need to have watched it to read this blog post. &lt;a href=&quot;https://github.com/javascript-playground/react-refactoring-with-tests&quot;&gt;You can find all the code on GitHub&lt;/a&gt; if you&#39;d like to run it locally.&lt;/p&gt;
&lt;h2&gt;The starting point&lt;/h2&gt;
&lt;p&gt;Let&#39;s start by looking at the &lt;code&gt;Money&lt;/code&gt; component, that takes some value and formats it onto the page:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; propTypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;getCurrencyData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token constant&quot;&gt;GBP&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;£&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token constant&quot;&gt;USD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currency&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;formatAmount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;amount&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; base&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseFloat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;amount &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; base&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toFixed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; currency &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCurrencyData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currency&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; symbol&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; base &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; currency&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; formatted &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;formatAmount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;amount&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; base&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;symbol&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;formatted&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;amount&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&#39;s two parts of functionality here that I would look at extracting into a separate class:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getCurrencyData&lt;/code&gt; fetches information on the given currency that is used for formatting the output. In reality this would be much larger and support more languages; so this is a good candidate to pull into a separate module.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;formatAmount&lt;/code&gt; takes the amount and the base and produces a formatted value. Sure, the logic is straightforward for now, but once we expand our application to support more languages, you can imagine this getting much more complex.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reason that I want to extract these is so I can test them in complete isolation. Right now to test formatting of amounts I have to create and mount a React component, but I should be able to just call that function and check the result.&lt;/p&gt;
&lt;h2&gt;Extracting amount formating&lt;/h2&gt;
&lt;p&gt;Let&#39;s create &lt;code&gt;src/format-currency.js&lt;/code&gt; which will house the &lt;code&gt;formatAmount&lt;/code&gt; function that is currently in our &lt;code&gt;Money&lt;/code&gt; component.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;formatAmount&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;amount&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; base&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseFloat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;amount &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; base&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toFixed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;ve just lifted the function in its entirety to the new file and added an &lt;code&gt;export&lt;/code&gt; to the beginning.&lt;/p&gt;
&lt;p&gt;To test this, we can replace the body of &lt;code&gt;Money&lt;/code&gt;&#39;s &lt;code&gt;formatAmount&lt;/code&gt; so that it just calls the new function from our &lt;code&gt;format-currency.js&lt;/code&gt; module:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; formatAmount &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./format-currency&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;formatAmount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;amount&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; base&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;formatAmount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;amount&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; base&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that I&#39;ve still left the &lt;code&gt;formatAmount&lt;/code&gt; function defined on &lt;code&gt;Money&lt;/code&gt;; when pulling code apart like this you should do it in small steps; doing it like this decreases the chance of inadvertently breaking the code and also makes it easier to retrace your steps if something does go wrong.&lt;/p&gt;
&lt;p&gt;Because these components are well tested, I can run &lt;code&gt;yarn test&lt;/code&gt; to ensure everything passes, which it does.&lt;/p&gt;
&lt;p&gt;Next up, I&#39;ll remove the &lt;code&gt;formatAmount&lt;/code&gt; function from &lt;code&gt;Money&lt;/code&gt; and update the &lt;code&gt;render&lt;/code&gt; function to call our external function directly:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// inside Money component&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; currency &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCurrencyData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currency&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; symbol&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; base &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; currency&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// this used to say this.formatAmount&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; formatted &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;formatAmount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;amount&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; base&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;symbol&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;formatted&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;amount&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once again, &lt;code&gt;yarn test&lt;/code&gt; confirms that we are good. Now all our original tests are passing, we can add some new tests to test `formatAmount in isolation. It&#39;s important to always do it this way round - get all your existing tests green before adding new ones.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; formatAmount &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./format-currency&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;it formats the amount to 2 dp&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;formatAmount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;20.00&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;respects the base&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;formatAmount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;200.00&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;it deals with decimal places correctly&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;formatAmount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2050&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;20.50&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have thorough tests for formatting amounts that are not attached to our React component at all. Sure, the &lt;code&gt;formatAmount&lt;/code&gt; function is very straightforward for now, but as it grows we can now test it very easily without any need to fire up a React component to do so.&lt;/p&gt;
&lt;h2&gt;Extracting the currency data&lt;/h2&gt;
&lt;p&gt;One down, one to go! Let&#39;s now pull out &lt;code&gt;getCurrencyData&lt;/code&gt; using a very similar method to above. First, I&#39;ll create &lt;code&gt;currency-data.js&lt;/code&gt; and pull our function over:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getCurrencyData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token constant&quot;&gt;GBP&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;£&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token constant&quot;&gt;USD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currency&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But wait! There&#39;s a bug - the function takes in a &lt;code&gt;currency&lt;/code&gt; argument but actually completely ignores it in favour of &lt;code&gt;this.props.currency&lt;/code&gt;. This is entirely accidental but shows the value of separating business logic from component UI logic. In a React component it&#39;s too easy to refer to &lt;code&gt;this.props&lt;/code&gt; or &lt;code&gt;this.state&lt;/code&gt; and it becomes hard to track which functions use which values. Pulling them out into their own modules forces you to pass arguments through, which in turn helps clarify the API and help you think about what data the function really needs.&lt;/p&gt;
&lt;p&gt;Once I fix up that bug by making sure we call &lt;code&gt;getCurrencyData&lt;/code&gt; with the right value, and update the function to refer to the &lt;code&gt;currency&lt;/code&gt; argument, not &lt;code&gt;this.props.currency&lt;/code&gt;, we can make &lt;code&gt;Money&lt;/code&gt;&#39;s &lt;code&gt;getCurrencyData&lt;/code&gt; delegate to the new function:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; getCurrencyData &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./currency-data&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;getCurrencyData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCurrencyData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currency&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; currency &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCurrencyData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currency&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And once again &lt;code&gt;yarn test&lt;/code&gt; confirms that nothing has broken. Now we can make the next step of entirely deleting &lt;code&gt;getCurrencyData&lt;/code&gt; in &lt;code&gt;Money&lt;/code&gt; and just call the external function from &lt;code&gt;render&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; currency &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCurrencyData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currency&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&#39;s write somet tests for &lt;code&gt;getCurrencyData&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; getCurrencyData &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./currency-data&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;for GBP it returns the right data&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCurrencyData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;GBP&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;£&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the sake of this tutorial - and also due to the data being simplified - I&#39;ll leave it there for tests for this function, but in a more complex situation we would write a full suite of tests as required.&lt;/p&gt;
&lt;h2&gt;Slimming down the money component&lt;/h2&gt;
&lt;p&gt;Now, with everything passing, take a look at the &lt;code&gt;Money&lt;/code&gt; implementation:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; PropTypes &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;prop-types&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; formatAmount &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./format-currency&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; getCurrencyData &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./currency-data&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; propTypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; currency &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCurrencyData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currency&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currency&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; symbol&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; base &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; currency&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; formatted &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;formatAmount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;amount&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; base&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;symbol&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;formatted&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;amount&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Money&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Money&lt;/code&gt; has now just a single method, &lt;code&gt;render&lt;/code&gt;, implemented. This is a great chance to move &lt;code&gt;Money&lt;/code&gt; to a functional, stateless component (FSC). If you are not familiar with the how, whats and whys of FSCs, you can &lt;a href=&quot;https://javascriptplayground.com/blog/2017/03/functional-stateless-components-react/&quot;&gt;read a previous blog post on the subject&lt;/a&gt;. I can now rewrite &lt;code&gt;Money&lt;/code&gt; in this way:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; PropTypes &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;prop-types&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; formatAmount &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./format-currency&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; getCurrencyData &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./currency-data&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; currency&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; amount &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; currencyData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getCurrencyData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currency&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currencyData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; symbol&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; base &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; currencyData&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; formatted &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;formatAmount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;amount&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; base&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;symbol&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;formatted&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;amount&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;Money&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;propTypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Money&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I am a huge fan of FSCs; they encourage simple components and the separation of logic from UI, and it&#39;s no coincidence that by doing this refactoring today we&#39;ve come to realise that our &lt;code&gt;Money&lt;/code&gt; component can be written in this way.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;By looking through our components and finding standalone functions that we can pull out, we&#39;ve greatly simplified our component whilst increasing our test coverage and clarity of our application greatly. I highly encourage you to think twice about adding arbitrary methods onto React components; it&#39;s too easy to refer to &lt;code&gt;this.props.X&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By pulling the functions into their own modules you are forced to consider which props are needed and how your function will work. It makes code clearer, it&#39;s easier to see which props are used where and it means as your business logic gets more complex you can test it without having to get your UI components involved.&lt;/p&gt;
&lt;p&gt;If you&#39;d like to play with the code yourself, &lt;a href=&quot;https://github.com/javascript-playground/react-refactoring-with-tests&quot;&gt;it&#39;s all on GitHub&lt;/a&gt;. Feel free to raise an issue if you have any questions.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Migrating complex JavaScript applications</title>
    <link href="http://www.jackfranklin.co.uk/blog/migrating-complex-javascript-angular-react/"/>
    <updated>2017-08-08T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/migrating-complex-javascript-angular-react/</id>
    <content type="html">&lt;p&gt;This blog post is a write up of a talk I&#39;ve gave at Front Trends in Poland, May 2017. You can find the slides and video below, along with a full write up of the talk, if you&#39;d rather read than watch.&lt;/p&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/QVna1-9yMuA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;You can also &lt;a href=&quot;https://speakerdeck.com/jackfranklin/front-trends-migrating-complex-software&quot;&gt;find the slides on SpeakerDeck&lt;/a&gt;,&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;The application I worked on was a business critical ticketing platform that sold tickets to music gigs. You don&#39;t need to know any more about it to enjoy this blog post; the most important thing to note is that we had to be in a position to deal with sudden bug reports and new features that might be needed. This immediately ruled out any big bang rewrite, and instead we decided to build new components in React, and migrate existing Angular ones to React one by one. Since starting this project a year ago, I&#39;ve learned a lot across a lot of different areas and that&#39;s what the talk and this blog post are about.&lt;/p&gt;
&lt;p&gt;It&#39;s split up into the four t&#39;s: Tech, Tests, Team and Talking.&lt;/p&gt;
&lt;h2&gt;Tech&lt;/h2&gt;
&lt;p&gt;The first decision we made was the one to move away from the existing Angular 1 codebase in the first place. We did not do this because we actively disliked Angular; I&#39;ve worked with it before and very much enjoyed it, and Angular 2+ has made a lot of improvements. Our reasons for considering the migration were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lack of expertise; both developers who had built the Angular app had moved on from the company.&lt;/li&gt;
&lt;li&gt;Lack of confidence; because we hadn&#39;t built the app, it was hard to have confidence that when we changed code we weren&#39;t introducing new bugs or breaking other features.&lt;/li&gt;
&lt;li&gt;Angular 1 is not the latest version of Angular and although it is going to be maintained by the Angular team for a while yet, it does not have the longevity we were looking for.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We picked React primarily because we all knew it well, but also because it fits the component model that we were betting on; that we could build our app incrementally, starting with very small components and then moving into larger ones as we gained confidence.&lt;/p&gt;
&lt;h3&gt;Strangling Angular&lt;/h3&gt;
&lt;p&gt;We could either do a big bang rewrite, and start again entirely from scratch in React, or find some way to run Angular and React side by side as we migrated incrementally. As mentioned above, we had to do this because a big rewrite was out of the question.&lt;/p&gt;
&lt;p&gt;There&#39;s another benefit of incremental migrations: you start to add value immediately. In a big rewrite, you only add value at the end of the migration, when everything is done. If you migrate piece by piece you add value every time you deploy some migrated code. This approach is known as the strangler approach, a term coined by Martin Fowler but one that I became aware of after a talk from &lt;a href=&quot;https://www.youtube.com/watch?v=1QPEflWn1WU&amp;amp;list=PLBzScQzZ83I81fnpqX2AkYD5c5cKgrqc2&amp;amp;index=10&quot;&gt;Sabrina Leandro at Lead Dev&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/img/posts/migrating/value.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;This approach of migrating from the inside out was made possible by &lt;a href=&quot;https://github.com/ngReact/ngReact&quot;&gt;ngReact&lt;/a&gt;, an Angular plugin that lets you render React from within Angular applications. Our approach was to start with very small components, and then work our way up the tree of components, replacing each part as we went.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/img/posts/migrating/tree.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;By taking this approach, we were able to ship aggressively - the first part of our codebase to be written in React was shipped on day two of the migration.&lt;/p&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;p&gt;Throughout the process we needed to ensure that we didn&#39;t break the application. It&#39;s not possible to deploy migrated code multiple times a week without a suite of tests to confirm that functionality hasn&#39;t broken. The existing Angular app had a lot of tests which helped; and we were able to convert tests from Angular to React (written using Jest and Enzyme - &lt;a href=&quot;https://www.sitepoint.com/test-react-components-jest/&quot;&gt;which you can read more about here&lt;/a&gt;). However, when you&#39;ve migrated tests over, that doesn&#39;t confirm that you&#39;ve not broken anything in the process of migrating. What was really valuable to us was a set of end to end tests, written using &lt;a href=&quot;http://www.protractortest.org/#/&quot;&gt;Protractor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We were even able to run these tests in IE11, checking that we were supporting IE correctly and not inadvertently causing cross browser bugs during the migration. The advantage of these tests is that they are entirely decoupled from the code; they care not if the UI they are interacting with is Angular or React based and that&#39;s the best thing about them. The downside of these tests is that they are slow - so we stuck to having five tests that covered the core user journey and interactions. It&#39;s important to find a balance of test coverage versus test speed.&lt;/p&gt;
&lt;h2&gt;Team&lt;/h2&gt;
&lt;p&gt;One of the biggest areas of learning for me in this project - and one that I don&#39;t tend to blog about much - was the lessons learned about working in a team on one project for such a long period of time. Working for an entire year on the same project was a new experience - normally I work on teams that work on a particular goal for 2-3 weeks and then move onto the next.&lt;/p&gt;
&lt;p&gt;One of the most important aspects of this was knowing what to work on. We had a vast codebase to pick from and ultimately everything needed migrating. How should we pick and choose what parts to tackle first? The first step was to vet every single feature and check that it was still something that we needed to support. We found a fair few parts of the codebase that had never been used, or supported features we no longer needed, and this lead to us deleting a lot of code. This took time to go through and decide which features were needed, but that time was very effective compared to the alternative; migrating features that would never be used would have been no good to anyone.&lt;/p&gt;
&lt;p&gt;After we&#39;d got rid of all the code we didn&#39;t need, we based prioritising components on three factors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the bug rate - a buggier feature got higher priority as we could fix bugs as part of the migration.&lt;/li&gt;
&lt;li&gt;the code quality - code that we didn&#39;t understand was higher priority; getting rid of code no one understood was a large motivation for the entire migration.&lt;/li&gt;
&lt;li&gt;the churn rate - that is, how many times per week that a particular part of the codebase was used. Code that is touched more by more developers is more important to migrate - we want to spend as little time as possible working with or maintaining old Angular code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given these three factors we could prioritise work:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/img/posts/migrating/churn.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;We also made sure to mix up different types of work. Some parts of the migration were more visual based - moving one small Angular component to React - and some were more &amp;quot;under the hood&amp;quot;, such as moving the HTTP layer from Angular&#39;s &lt;code&gt;$http&lt;/code&gt; service to using the &lt;code&gt;fetch&lt;/code&gt; API. Others were purely tooling based; we used the migration as a good excuse to bring the tooling up to speed and moved from Browserify to Webpack, and migrated tests from Karma to Jest. We made sure that as a team each developer got as much variety in the work as they could (based on their preferences, too) because otherwise we risked the work becoming very monotonous; there&#39;s only so many times you can migrate small components from Angular to React without feeling a bit bored!&lt;/p&gt;
&lt;p&gt;One key to keeping the team motivated was to ensure we kept our momentum up at all times. To do this we would aggressively ship new React code on an almost daily basis, backed by our test suite to ensure no breakages as we deployed. This enabled us to really feel like we were making progress and even on larger pieces of work we would try to deploy in stages to keep things ticking over. This also reduces the risk significantly - if you&#39;re deploying small pieces one at a time and something breaks, you know exactly which deploy (and therefore which code change) caused it.&lt;/p&gt;
&lt;p&gt;To help us visualise the change we had a variety of scripts that would give us very rough metrics on the codebase. One would grep the codebase for files that imported React, and another did the same for Angular. This gave us an (incredibly rough) overview of our progress, and whilst not scientific, it was great as a team to see the numbers change as we worked.&lt;/p&gt;
&lt;h2&gt;Talking&lt;/h2&gt;
&lt;p&gt;When we first started considering a large software migration we communicated throughout the tech team as to the reasons why and how long it would take. When communicating amongst the tech team, it&#39;s natural to use specific terminology and discuss to a fairly in-depth technical level. Where we made a mistake initially was not communicating clearly with the teams outside of engineering. These teams are arguably more important to get onside; they are the ones who deal with angry customers who couldn&#39;t buy tickets, or deal with management teams who want to use our product. They are the ones who get regular feedback on the negative aspects to our product, and they are the ones who get angry phone calls if a certain feature doesn&#39;t work right. Early on we didn&#39;t communicate our motivations for the migration in a clear manner, and as such didn&#39;t get much support outside of engineering. Most people were (understandably) frustrated when they were told that for a year we would primarily be keeping our product the same and just changing the underlying code.&lt;/p&gt;
&lt;p&gt;To fix this it&#39;s important to switch your communication to be from their team&#39;s point of view; rather than discussing the pros of React versus the cons of Angular, it&#39;s important to explain the impact doing this migration will have on them. To do this we explained how bugs that are harder to fix now would be made easier when we moved to a framework and codebase we understood more; we explained how we could lose some of the bulky code that led to the product loading slowly on mobile devices, and we explained how we&#39;ll have greater confidence in the system and be able to react much more quickly to urgent requests, bug fixes and features. This really helped people outside of tech understand what we were doing and why we were doing it.&lt;/p&gt;
&lt;p&gt;Our method for prioritising migrations based on bugs also paid off here - we were able to take long-standing bugs that had caused customer support (and our customers) pain, and fix them whilst migrating from Angular to React. One such bug that caused us issues constantly had existed for nearly a year, unable to be hunted down, and was eradicated when we migrated the relevant components over to React. This made us happy and made customer support even happier! Fixing bugs that caused other teams pain clearly presented to them the benefits of doing this work, and why the downside of not building as many new features was worth it in the long run.&lt;/p&gt;
&lt;p&gt;Another area of communication that we put a lot of time and effort into was communicating when things went wrong. Ultimately on a complex project over a relatively long time period there would be bugs caused by the migration.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;There are two types of ops people: those who have fucked up production, and those who are about to. &lt;a href=&quot;https://twitter.com/petecheslock&quot;&gt;@petecheslock&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/monitorama?src=hash&quot;&gt;#monitorama&lt;/a&gt; &lt;a href=&quot;https://t.co/TMpdvW1Wqs&quot;&gt;pic.twitter.com/TMpdvW1Wqs&lt;/a&gt;&lt;/p&gt;&amp;mdash; (╯°□°）╯︵ ┻━┻ sdoɹǝǝq (@beerops) &lt;a href=&quot;https://twitter.com/beerops/status/866808660030345218&quot;&gt;May 23, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;http://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;This is frustrating to everyone but the artist services team who get phone calls from angry clients about the site being down really get it more than anyone else, so would understandably be very upset when this happened. Every time we caused an issue we did a full internal retrospective and discussed how it happened. We asked:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What&lt;/strong&gt; went wrong?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why&lt;/strong&gt; did we not catch it before deployment?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How&lt;/strong&gt; did we fix it?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How&lt;/strong&gt; will we prevent this happening again?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Importantly this was entirely blameless - if a bug made it out to production it wasn&#39;t the responsibility of the person who wrote the code, but the entire team. Often we&#39;d find that bugs highlighted a gap in our testing, or some manual testing that needed to be done before certain deploys (one particular date bug only showed itself on the New York time zone, so tracking that down in London was hard!).&lt;/p&gt;
&lt;p&gt;The lessons learned would then be communicated to the rest of the business, to show them that not only did we take issues on the platform very seriously, but we spent a lot of time and effort making sure the same bug never happened again.&lt;/p&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;In summary, there are 7 key lessons learned that you should have in mind if you&#39;re ever thinking of migrating a project:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Never migrate just for the sake of it - if our only motivation had been because the product was on Angular 1, we wouldn&#39;t have done it. There were multiple factors that lead to us migrating. Don&#39;t take this decision lightly!&lt;/li&gt;
&lt;li&gt;Plan, plan and plan again. We spent many hours in front of a whiteboard breaking the product down and prioritising features. Have the prioritised work visible to the team (we used Trello), so you don&#39;t ever lose focus, which is easily done on such a complex, long running project.&lt;/li&gt;
&lt;li&gt;Cross business communication is vital.&lt;/li&gt;
&lt;li&gt;Prioritise based on current pain points in your application, which helps with motivation and keeping the rest of the company onside.&lt;/li&gt;
&lt;li&gt;Mix up different types of work to keep the work interesting for all team members.&lt;/li&gt;
&lt;li&gt;Have some metrics, however rough, for the migration, so you can easily get a sense of where you are and your progress.&lt;/li&gt;
&lt;li&gt;Don&#39;t expect to migrate perfectly the first time - you can refactor after migrating.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you have any questions, I&#39;d love to answer them! Feel free to &lt;a href=&quot;http://twitter.com/Jack_Franklin&quot;&gt;grab me on Twitter&lt;/a&gt; or &lt;a href=&quot;https://github.com/jackfranklin/angular-react-talk&quot;&gt;open an issue on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>An introduction to styled-components with Glen Maddern</title>
    <link href="http://www.jackfranklin.co.uk/blog/introduction-to-styled-components-react/"/>
    <updated>2017-08-29T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/introduction-to-styled-components-react/</id>
    <content type="html">&lt;p&gt;CSS in JavaScript has been something I&#39;ve been meaning to explore for a while now; it&#39;s also one the questions I get asked most when I talk about my experience with React.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/styled-components/styled-components&quot;&gt;styled-components&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/glenmaddern&quot;&gt;Glen Maddern&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/mxstbr&quot;&gt;Max Stoiber&lt;/a&gt; is a library aimed at making it really easy to use CSS in React components (and also supports Preact out of the box). Rather than tackle this post alone, I invited Glen to join me to record an introduction to using styled-components.&lt;/p&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/fmotV1PQac8?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;You can also &lt;a href=&quot;https://www.youtube.com/watch?v=fmotV1PQac8&quot;&gt;watch the video directly on YouTube&lt;/a&gt; if you prefer.&lt;/p&gt;
&lt;p&gt;A huge thanks to Glen for taking the time to talk to me. His videos on &lt;a href=&quot;https://frontend.center/&quot;&gt;Frontend Center&lt;/a&gt; are absolutely excellent and I highly recommend subscribing.&lt;/p&gt;
&lt;p&gt;You can find all the code from this video on &lt;a href=&quot;https://github.com/javascript-playground/styled-components-screencast&quot;&gt;the GitHub repository&lt;/a&gt;; if you have any questions feel free to raise an issue there. If you have any thoughts on other videos you&#39;d like to see, please let me know.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Moving away from Vim for front-end development</title>
    <link href="http://www.jackfranklin.co.uk/blog/editors-for-front-end-development/"/>
    <updated>2017-09-10T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/editors-for-front-end-development/</id>
    <content type="html">&lt;p&gt;I&#39;ve been a Vim user now consistently for about 6 years. My extensive &lt;a href=&quot;https://github.com/jackfranklin/dotfiles&quot;&gt;dotfiles&lt;/a&gt; repository and (now badly outdated) blog on &lt;a href=&quot;http://tilvim.com/&quot;&gt;TIL Vim&lt;/a&gt; demonstrate pretty well that I&#39;ve spent a lot of time using, learning and tweaking my Vim set up to be exactly how I&#39;d like.&lt;/p&gt;
&lt;p&gt;However, as I&#39;ve moved more and more into almost exclusively front-end development I&#39;ve been starting to be tempted by other developers. The simple reason why is that the front-end community isn&#39;t as active on Vim as it is on other editors such as VS Code and Atom. There are fewer developers in front-end using Vim, and therefore sometimes the plugins and eco-system around it aren&#39;t quite as plentiful as other editors. To that end, I&#39;ve decided to spend some time trying out other editors to see how I get on.&lt;/p&gt;
&lt;p&gt;I tried VSCode a couple of months ago and didn&#39;t find it quite how I wanted - although I&#39;m willing to give it another go - so for now I&#39;ve picked &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; to trial for a few weeks. If you&#39;re an Atom user, I&#39;d love to hear from you with any recommended settings, plugins and so on. Here&#39;s the ones I&#39;ve picked up so far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I will never not edit text without Vim keybindings, so &lt;a href=&quot;https://github.com/t9md/atom-vim-mode-plus&quot;&gt;vim-mode-plus&lt;/a&gt; was the first plugin I installed. So far it seems very solid - I haven&#39;t found anything I can&#39;t do yet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I&#39;ve also set up &lt;a href=&quot;https://atom.io/packages/sync-settings&quot;&gt;sync-settings&lt;/a&gt; so I can keep everything synced across my work and personal computer. I wish I could do this directly via my dotfiles repo (I may well be able to) but for now this is a low friction way to get it set up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/language-babel&quot;&gt;language-babel&lt;/a&gt; seems like a no brainer - it improves and adds syntax highlighting for a bunch of languages, including Flow and a bunch of JSX features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://atom.io/packages/git-plus&quot;&gt;git plus&lt;/a&gt; looks like it will make it much easier to do all my &lt;code&gt;git&lt;/code&gt;ing from within Atom - complemented by &lt;a href=&quot;https://atom.io/packages/split-diff&quot;&gt;split-diff&lt;/a&gt; to easily see file changes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&#39;s many more that I&#39;ve installed, including the obvious ones like plugins for linting code with Prettier, Flow and ESLint.&lt;/p&gt;
&lt;p&gt;I&#39;ve also managed to completely hide scrollbars from this &lt;a href=&quot;https://coderwall.com/p/h_zpfa/hide-scrollbars-in-atom&quot;&gt;handy tip on Coderwall&lt;/a&gt;, and have applied this CSS to remove all the linting output from the gutters (I prefer a more narrow gutter and the linting tools also mostly underline the suspect code anyway):&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.gutter[gutter-name=&#39;linter-ui-default&#39;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main challenge for me is getting used to not having the terminal so accessible to me - normally I run Vim within a terminal so I can easily run commands in the background. However, most of the time I just run &lt;code&gt;yarn run dev&lt;/code&gt; and leave it, so I think I just need to adjust to this over time.&lt;/p&gt;
&lt;p&gt;I&#39;ll try to blog again in a few weeks once I&#39;ve had more time to explore Atom and learn its quirks, but in the mean time if you have any recommendations please do let me know!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Adding URL support to an Elm app with elm-lang/navigation</title>
    <link href="http://www.jackfranklin.co.uk/blog/navigation-routing-in-elm/"/>
    <updated>2017-10-03T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/navigation-routing-in-elm/</id>
    <content type="html">&lt;p&gt;In today&#39;s video I took an existing Elm application and add first class URL support via &lt;a href=&quot;https://github.com/elm-lang/navigation&quot;&gt;Elm&#39;s Navigation package&lt;/a&gt;.&lt;/p&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/ZgAwrJ3EdT4?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;You can find all the source code &lt;a href=&quot;https://github.com/jackfranklin/do-you-even-elm&quot;&gt;on the GitHub repo&lt;/a&gt;, and &lt;a href=&quot;https://github.com/jackfranklin/do-you-even-elm/pull/5&quot;&gt;the pull request I made after this video&lt;/a&gt; is also available.&lt;/p&gt;
&lt;p&gt;If you have any questions feel free to raise them on that GitHub PR and I&#39;ll get back to you.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>An introduction to testing React components with Enzyme 3</title>
    <link href="http://www.jackfranklin.co.uk/blog/introduction-to-react-tests-enzyme/"/>
    <updated>2017-12-12T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/introduction-to-react-tests-enzyme/</id>
    <content type="html">&lt;p&gt;In today&#39;s post we&#39;ll introduce the AirBnB library Enzyme for testing React
applications. We&#39;ll do this using a test driven development (TDD) approach. That
is, we&#39;ll write the tests first, watch them fail, and then build the React
component out to fix the tests, before then writing more. We&#39;ll then consider
how we can refactor code whilst running the tests to confirm we haven&#39;t made any
errors.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In reality, I don&#39;t often write components from scratch in a TDD way, however
I will often use TDD to replicate an existing bug in a component to first see
the bug in action, and then fixing it. Feedback via test results on the
command line is often much quicker than browser refreshes and manual
interactions, so writing tests can be a very productive way to improve or fix
a component&#39;s behaviour.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Set up&lt;/h2&gt;
&lt;p&gt;I&#39;ll be using a brand new React app for this tutorial, which I&#39;ve created with
&lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;create-react-app&lt;/a&gt;. This
comes complete with &lt;a href=&quot;https://facebook.github.io/jest/&quot;&gt;Jest&lt;/a&gt;, a test runner
built and maintained by Facebook.&lt;/p&gt;
&lt;p&gt;There&#39;s one more dependency we&#39;ll need for now -
&lt;a href=&quot;https://github.com/airbnb/enzyme&quot;&gt;Enzyme&lt;/a&gt;. Enzyme is a suite of test utilities
for testing React that makes it incredibly easy to render, search and make
assertions on your components, and we&#39;ll use it extensively today. Enzyme also
needs &lt;code&gt;react-test-renderer&lt;/code&gt; to be installed (it doesn&#39;t have it as an explicit
dependency because it only needs it for apps using React 15.5 or above, which we
are). In addition, the newest version of Enzyme uses an adapter based system
where we have to install the adapter for our version of React. We&#39;re rocking
React 16 so I&#39;ll install the adapter too:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add -D enzyme react-test-renderer enzyme-adapter-react-16
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;-D&lt;/code&gt; argument tells Yarn to save these dependencies as developer
dependencies.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can read more about
&lt;a href=&quot;http://airbnb.io/enzyme/docs/installation/index.html&quot;&gt;installing Enzyme in the docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Enzyme setup&lt;/h2&gt;
&lt;p&gt;You also need to perform a small amount of setup for Enzyme to configure it to
use the right adapter. This is all documented in the link above; but when we&#39;re
working with an application created by create-react-app, all we have to do is
create the file &lt;code&gt;src/setupTests.js&lt;/code&gt;. create-react-app is automatically
configured to run this file before any of our tests.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; configure &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;enzyme&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Adapter &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;enzyme-adapter-react-16&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Adapter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&#39;re using an older version of React in your projects but still want to
use Enzyme, make sure you use the right Enzyme adapter for the version of
React you&#39;re using. You can find more on the
&lt;a href=&quot;https://github.com/airbnb/enzyme#installation&quot;&gt;Enzyme installation docs&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;create-react-app is configured to run this file for us automatically when we run
&lt;code&gt;yarn test&lt;/code&gt;, so before our tests are run it will be executed and set up Enzyme
correctly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&#39;re not using create-react-app, you can configure Jest yourself to run
this file using the
&lt;a href=&quot;https://facebook.github.io/jest/docs/en/configuration.html#setuptestframeworkscriptfile-string&quot;&gt;&lt;code&gt;setupTestFrameworkScriptFile&lt;/code&gt;&lt;/a&gt;
configuration option.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The &lt;code&gt;Hello&lt;/code&gt; component&lt;/h2&gt;
&lt;p&gt;Let&#39;s build a component that takes a &lt;code&gt;name&lt;/code&gt; prop and renders &lt;code&gt;&amp;lt;p&amp;gt;Hello, name!&amp;lt;/p&amp;gt;&lt;/code&gt; onto the screen. As we&#39;re writing tests first, I&#39;ll create
&lt;code&gt;src/Hello.test.js&lt;/code&gt;, following the convention for test files that
&lt;code&gt;create-react-app&lt;/code&gt; uses (in your own apps you can use whichever convention you
prefer). Here&#39;s our first test:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Hello &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./Hello&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; shallow &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;enzyme&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;renders&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; wrapper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;shallow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Hello name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Jack&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wrapper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;p&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello, Jack!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use Enzyme&#39;s
&lt;a href=&quot;https://github.com/airbnb/enzyme/blob/master/docs/api/shallow.md&quot;&gt;shallow rendering API&lt;/a&gt;.
Shallow rendering will only render one level of components deep (that is, if our
&lt;code&gt;Hello&lt;/code&gt; component rendered the &lt;code&gt;Foo&lt;/code&gt; component, it would not be rendered). This
helps you test in isolation and should be your first point of call for testing
React components.&lt;/p&gt;
&lt;p&gt;You can run &lt;code&gt;yarn test&lt;/code&gt; in a React app to run it and have it rerun on changes.
If you do that now, you&#39;ll see our first error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Cannot find module &#39;./Hello&#39; from &#39;Hello.test.js&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So let&#39;s at least define the component and give it a shell that renders nothing:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Hello&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we get a slightly cryptic error:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Method “text” is only meant to be run on a single node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; found instead&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you&#39;ve used Enzyme a couple of times this becomes much clearer; this is
happening because we&#39;re calling &lt;code&gt;wrapper.find(&#39;p&#39;)&lt;/code&gt; and then calling &lt;code&gt;text()&lt;/code&gt; on
that to get the text, but the component is not rendering a paragraph. Let&#39;s fix
that:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello World&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&#39;re much closer!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;expect(received).toEqual(expected)

Expected value to equal:
  &amp;quot;Hello, Jack!&amp;quot;
Received:
  &amp;quot;Hello World&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we can make the final leap to a green test:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next up, let&#39;s write a test to ensure that if we don&#39;t pass in a name, it
defaults to &amp;quot;Unknown&amp;quot;. At this point I&#39;ll also update our first test, because
&lt;code&gt;it(&#39;renders&#39;, ...)&lt;/code&gt; is not very descriptive. It&#39;s good to not care too much
about the name of the first test you write, and focus on the implementation, but
once you&#39;re more comfortable with what you&#39;re testing and beginning to expand
your test suite, you should make sure you keep things organised.&lt;/p&gt;
&lt;p&gt;With our second test, we&#39;re failing again:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;renders the name given&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;uses &quot;Unknown&quot; if no name is passed in&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; wrapper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;shallow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Hello &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wrapper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;p&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello, Unknown!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;expect(received).toEqual(expected)

Expected value to equal:
  &amp;quot;Hello, Unknown!&amp;quot;
Received:
  &amp;quot;Hello, !&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we can now write our first pass at the implementation to fix it:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Unknown&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now the test is green we&#39;re free to refactor. The above is perfectly fine
but not the way it&#39;s usually done in React. Some might choose to destructure the
&lt;code&gt;props&lt;/code&gt; argument and give &lt;code&gt;name&lt;/code&gt; a default value:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Hello &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Unknown&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But most of the time when working with React components I&#39;ll use the
&lt;code&gt;defaultProps&lt;/code&gt; object to define the defaults. I&#39;ll also set the component&#39;s
&lt;code&gt;propTypes&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; PropTypes &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;prop-types&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;propTypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;defaultProps &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Unknown&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Hello&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And all our tests are still passing.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That brings our first look at testing React with Enzyme 3 to an end. In future
tutorials we&#39;ll dive further into what Enzyme has to offer and see how we can
test components of increasing complexity.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using React Fragments for the first time</title>
    <link href="http://www.jackfranklin.co.uk/blog/react-fragments/"/>
    <updated>2017-12-18T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/react-fragments/</id>
    <content type="html">&lt;p&gt;React v16 was a very exciting release for React, and included many new features. In the recent &lt;a href=&quot;https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html&quot;&gt;React 16.2 release&lt;/a&gt;, improved support for Fragments was announced, and it&#39;s this feature that I want to talk about today.&lt;/p&gt;
&lt;h2&gt;The problem that fragments solve&lt;/h2&gt;
&lt;p&gt;Up until React 16 each component had to return a single element:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// will error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Demo&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;foo&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;bar&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// OK!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Demo&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;foo&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;bar&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the release of React 16, you were able to return an array of elements that a component would render:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// allowed in React 16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// but you&#39;ll get a warning about keys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Demo&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;foo&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;bar&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is OK; but it has two problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It breaks the JSX abstraction; it&#39;s odd to now have a component returning an array containing JSX elements. Whenever I do this I always forget the commas after each array item because I&#39;m not used to using them in JSX.&lt;/li&gt;
&lt;li&gt;You have to add a &lt;code&gt;key&lt;/code&gt; property to each element to avoid React warnings, which can make the &lt;code&gt;render&lt;/code&gt; function verbose and less easy to follow.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Because returning arrays didn&#39;t feel that natural in React 16, it was far more common to eschew them in favour of wrapping elements in one containing element; most normally a &lt;code&gt;div&lt;/code&gt; or a &lt;code&gt;span&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On a large application with a suite of components this can very quickly lead to a set of wrapping elements that can produce a big set of HTML soup. Fragments solve this problem.&lt;/p&gt;
&lt;h2&gt;Fragments in React 16.2&lt;/h2&gt;
&lt;p&gt;React 16.2 introduced the &lt;code&gt;Fragment&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fragments look like empty JSX tags. They let you group a list of children without adding extra nodes to the DOM:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-- &lt;a href=&quot;https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html&quot;&gt;React 16.2 release&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Fragment&lt;/code&gt; element is imported from the &lt;code&gt;react&lt;/code&gt; module, and can be used just like any other JSX element. The difference is that a &lt;code&gt;Fragment&lt;/code&gt; component doesn&#39;t end up adding any extra markup into the DOM:&lt;/p&gt;
&lt;h2&gt;Using a Fragment&lt;/h2&gt;
&lt;p&gt;First, we import &lt;code&gt;Fragment&lt;/code&gt; just like we import &lt;code&gt;Component&lt;/code&gt; from &lt;code&gt;react&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Fragment &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then we use it just like any other React component:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Fragment&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;foo&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;bar&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Fragment&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key here is that the resulting DOM from the &lt;code&gt;App&lt;/code&gt; component will look like so:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;foo&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;bar&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;A special fragment syntax&lt;/h2&gt;
&lt;p&gt;React 16.2 also introduced a syntactical sugar for &lt;code&gt;Fragment&lt;/code&gt;s. For example, the code below creates the exact same result as the &lt;code&gt;App&lt;/code&gt; component above:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;foo&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;bar&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;m not sure if I&#39;ll use this syntax over the more explicit &lt;code&gt;Fragment&lt;/code&gt; syntax; but I think this comes down to personal preference.&lt;/p&gt;
&lt;p&gt;It&#39;s worth noting that if you need to pass a &lt;code&gt;Fragment&lt;/code&gt; any props (most likely a &lt;code&gt;key&lt;/code&gt; prop if you&#39;re iterating over a list), you can&#39;t use this special syntax; if you have to pass props you need to use &lt;code&gt;Fragment&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;A use case for fragments&lt;/h2&gt;
&lt;p&gt;At &lt;a href=&quot;https://thread.com/&quot;&gt;Thread&lt;/a&gt; we&#39;re building a site for finding and buying clothing and I was working on a component that allows users to select their size from a dropdown. If the item is out of stock or low on stock, we wanted to show that along side their size. So a dropdown might look like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- S
- M - Low stock
- L - Out of stock
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we&#39;re looping over an array of data to generate the &lt;code&gt;option&lt;/code&gt;s for the &lt;code&gt;select&lt;/code&gt; dropdown. The data looks like so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sizes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;S&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;stockDisplay&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;In stock&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;stockLevel&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;IN_STOCK&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;stockDisplay&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Low stock&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;stockLevel&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;LOW_STOCK&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;L&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;stockDisplay&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Out of stock&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;stockLevel&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;OUT_OF_STOCK&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Initially the code for this looked like so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;generateOptionForSize&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;option&lt;br&gt;    key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    disabled&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stockLevel &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;OUT_OF_STOCK&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stockLevel &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;IN_STOCK&#39;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stockDisplay&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;option&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This worked fine but I felt like it could be a little cleaner, particularly the conditional for deciding if to show the extra information or not. In addition, I wanted to replace the hyphen with an &lt;a href=&quot;http://www.html.am/html-codes/character-codes/html-em-dash-code.cfm&quot;&gt;&lt;code&gt;mdash&lt;/code&gt;&lt;/a&gt;, and because I was returning the contents of the &lt;code&gt;option&lt;/code&gt; as a string, that was hard to do. If I did:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stockLevel &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;IN_STOCK&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &amp;amp;mdash; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stockDisplay&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;React would sanitise the string and output the literal &lt;code&gt;&amp;amp;mdash;&lt;/code&gt; text into the page.&lt;/p&gt;
&lt;p&gt;However, swapping out the string interpolation using ES2015 template strings for a React &lt;code&gt;Fragment&lt;/code&gt; suddenly made the entire code easier to follow, and allowed me to use an HTML entity:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;generateOptionForSize&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;option&lt;br&gt;    key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    disabled&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stockLevel &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;OUT_OF_STOCK&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stockLevel &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;IN_STOCK&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Fragment&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;mdash&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stockDisplay&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Fragment&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;option&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is now easier to follow and allows me to use HTML entities and have them work as expected.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You could have used a literal mdash here but we prefer to use the &lt;code&gt;&amp;amp;mdash;&lt;/code&gt; version and hence Fragments provided a nice solution for us.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I can already see many more places through our app which could be made more straightforward and easier to work with as a result of &lt;code&gt;Fragment&lt;/code&gt;s and I&#39;m excited to continue using them. Not only do they clear up a lot of component code, but the fact that they have no output into the DOM should lead to fewer superfluous &lt;code&gt;div&lt;/code&gt; and &lt;code&gt;span&lt;/code&gt; elements that a lot of React applications are littered with.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Moving the JS Playground from GitHub Pages to Netlify</title>
    <link href="http://www.jackfranklin.co.uk/blog/moving-to-netlify/"/>
    <updated>2018-01-08T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/moving-to-netlify/</id>
    <content type="html">&lt;p&gt;Over the weekend I moved this blog from GitHub Pages to Netlify and in this blog
post I want to talk about why.&lt;/p&gt;
&lt;h2&gt;Github Pages and the JavaScript Playground&lt;/h2&gt;
&lt;p&gt;Ever since the first blog post on this site in April 2012 I&#39;ve used GitHub Pages
to host the site and it&#39;s served me well. The site is a pretty standard
&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll website&lt;/a&gt; and as such I&#39;ve never needed more power
than GitHub provided.&lt;/p&gt;
&lt;p&gt;In the future that may not be the case. I have some big plans for this blog this
year (firstly a video series on testing React) and I was beginning to feel that
GitHub Pages was limiting me; you are able to depend on a small subset of Jekyll
plugins and that you couldn&#39;t configure redirects, extra headers or any of your
server&#39;s behaviour.&lt;/p&gt;
&lt;p&gt;Couple the above frustrations with the fact that
&lt;a href=&quot;https://twitter.com/philhawksworth&quot;&gt;Phil Hawksworth&lt;/a&gt;, who I&#39;ve been lucky
enough to share a stage with at a conference, joined
&lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt;, and I felt that the time was right to try
something different.&lt;/p&gt;
&lt;p&gt;Netlify takes the idea of publishing static code but wraps it in a powerful
application that supports continuous deployment, redirect, headers control, and
much more out of the box. Even better, you pay for more features, rather than
per users on your site, and so the free plan is more than enough for this site.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(There is a soft limit of 100GB per month on the free accounts; but as this is
a text based blog, that&#39;s not going to be an issue.)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Moving to Netlify&lt;/h2&gt;
&lt;p&gt;If you want to follow along fully, you can see the
&lt;a href=&quot;https://github.com/jackfranklin/javascriptplayground.com/pull/89&quot;&gt;changes I made on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Moving to Netlify involved the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Update the blog&#39;s &lt;code&gt;Gemfile&lt;/code&gt; to remove the &lt;code&gt;github-pages&lt;/code&gt; gem in favour of
&lt;code&gt;jekyll&lt;/code&gt; directly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sign up / in with Netlify and configure it to build this repository. Netlify
lets you specify the build command (in this case, &lt;code&gt;jekyll build&lt;/code&gt;) and the
folder to deploy (&lt;code&gt;_site&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tell Netlify which branches to deploy. You can have it deploy lots of
branches but I told Netlify to track the &lt;code&gt;master&lt;/code&gt; branch for now.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And with that, I had Netlify deploying the blog!&lt;/p&gt;
&lt;h2&gt;Updating the custom domain&lt;/h2&gt;
&lt;p&gt;As part of the free Netlify package you are also able to add custom domains. The
process of moving the domain to being hosted by Netlify was straight forward:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Disable Cloudflare on the domain. I used this for SSL, but Netlify provides
that out of the box too (via &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let&#39;s Encrypt&lt;/a&gt;). In
hindsight I should have done this last because it meant for a while there
were security warnings on the site.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Netlify&#39;s admin panel to create a DNS zone for the domain, which allows
Netlify to fully control the domain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Netlify then provides the new nameservers, which I was able to login to my
domain provider and update.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that&#39;s about it! Bar the time spent waiting for DNS propagation, that was me
done.&lt;/p&gt;
&lt;h2&gt;Simplifying URLs and Netlify redirects&lt;/h2&gt;
&lt;p&gt;I also took some extra steps as I decided to simplify down the URL structure of
the blog. Rather than the URL for posts being:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/blog/2018/01/moving-to-netlify
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wanted to instead change it to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/moving-to-netlify
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Making this change on the Jekyll site was easy; I updated my &lt;code&gt;_config.yml&lt;/code&gt; to
include &lt;code&gt;permalink: /:title/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If I left it like this and deployed, any links on the web to any of my previous
blog posts would break, which isn&#39;t ideal for users. Netlify offers the ability
to &lt;a href=&quot;https://www.netlify.com/docs/redirects/&quot;&gt;configure redirects&lt;/a&gt; to prevent
this from happening.&lt;/p&gt;
&lt;p&gt;To do this I created a &lt;code&gt;_redirects&lt;/code&gt; file and put the following line into it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/blog/:year/:month/:title  /:title
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will set up an HTTP 301 redirect from any URL that matches
&lt;code&gt;/blog/:year/:month/:title&lt;/code&gt; to &lt;code&gt;/:title&lt;/code&gt;. By using the &lt;code&gt;:title&lt;/code&gt; syntax Netlify
matches the text and can generate the right URL to redirect the user to.&lt;/p&gt;
&lt;p&gt;Whilst I hope to not have to be changing my URLs on a regular basis having the
ability to do so with Netlify is fantastic.&lt;/p&gt;
&lt;h2&gt;The future of JS Playground&lt;/h2&gt;
&lt;p&gt;Moving to a platform that gives more control will enable much more on this site,
and along with some of the upcoming video and written content, I&#39;m hopeful that
it will be a great year for this blog.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Testing React with Enzyme and Jest: a new video course</title>
    <link href="http://www.jackfranklin.co.uk/blog/testing-react/"/>
    <updated>2018-02-12T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/testing-react/</id>
    <content type="html">&lt;p&gt;Today I&#39;m releasing my brand new video series titled &amp;quot;Testing React with Jest
and Enzyme&amp;quot;.&lt;/p&gt;
&lt;p&gt;I&#39;ve been working with, writing tutorials, and speaking about React for a few
years now and something that I get asked more often than not is how to test
React components.&lt;/p&gt;
&lt;p&gt;There are many great courses out there to help you learn React, but this course
is specifically for those who have written React components and would like to know
how best to test them. Not only the specifics of &lt;em&gt;how&lt;/em&gt; to test, configuring
Jest, using Enzyme&#39;s API, but also &lt;em&gt;what&lt;/em&gt; to test.&lt;/p&gt;
&lt;p&gt;When is is right to reach for a snapshot test? When should we pull logic out of
components and test it separately? How do I test components that are connected
to Redux?&lt;/p&gt;
&lt;p&gt;This series consists of eleven videos, each ranging from 5-10 minutes in length.
They are purposefully designed to be easily watchable on a commute, on a quick
break from work or when you&#39;ve got a spare half hour over a weekend. The first
five videos in the series are free and you can purchase the rest for $20.&lt;/p&gt;
&lt;p&gt;By purchasing the videos you&#39;ll also get access to all the source code, any
updates over time and the ability to email me with questions about the course.&lt;/p&gt;
&lt;p&gt;If this sounds interesting, you can watch the first video below, and head to the
&lt;a href=&quot;http://www.jackfranklin.co.uk/testing-react-enzyme-jest&quot;&gt;Testing React page&lt;/a&gt; for the rest of the videos and
to buy the full package.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/aSQ8v9JH5C8&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
  </entry>
  
  <entry>
    <title>Preferring code over comments</title>
    <link href="http://www.jackfranklin.co.uk/blog/prefer-code-over-comments/"/>
    <updated>2018-02-15T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/prefer-code-over-comments/</id>
    <content type="html">&lt;p&gt;I think we&#39;d all agree that code comments are a good way to document code that
is otherwise hard to follow. Sometimes there&#39;s just no way to make the code as
clear as you&#39;d like and a comment is a good solution.&lt;/p&gt;
&lt;p&gt;That said, comments have one large issue: they can get out of date. An outdated
comment that is incorrect could cause you to lose a lot of time to debugging.
You may set out with the best intentions of keeping the code and comment in sync
but realistically over time it won&#39;t happen.&lt;/p&gt;
&lt;p&gt;Whenever possible it&#39;s best to remove comments if you can make the code more
explicit. I came across a nice example of this recently that shows this in
action.&lt;/p&gt;
&lt;h2&gt;The problem with comments in action&lt;/h2&gt;
&lt;p&gt;I was working with an API that would respond with a custom &lt;code&gt;code&lt;/code&gt; property on
each response. This API was taking a query and returning search results, and the
&lt;code&gt;code&lt;/code&gt; in the response would signify if the response was successful, or if no
results were found, or if there was an API error. I wrote a first pass at a
small JavaScript module to wrap this API and ended up with code that looked like
so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;makeRequestToLibrary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; code &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// 2000 is the success code&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4040&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// 4040 = our request returned no results&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4020&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; code &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4021&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// 4020 and 4021 are API issues - invalid key, invalid request, etc&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works well, and is reasonably clear, but is leaving itself wide open to the
outdated comments problem. It would be very easy for a developer to add in a new
code we need to deal with and not update the comments, or the API to change its
codes, or a combination of both of them. You&#39;d be in danger of ending up with
something that looked like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4030&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// 4020 and 4021 are API issues - invalid key, invalid request, etc&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the comment bears no relation to the error - is it the case that &lt;code&gt;4030&lt;/code&gt; is
the new error code, or is it the case that we should handle &lt;code&gt;4020&lt;/code&gt; instead of
&lt;code&gt;4030&lt;/code&gt; and we made a typo with the number? It&#39;s impossible to tell.&lt;/p&gt;
&lt;h2&gt;Removing comments for code&lt;/h2&gt;
&lt;p&gt;Instead of comments we can encode the knowledge that maps status codes to
responses such that the code becomes self documenting and we can remove the
comments whilst maintaining the clarity that we were aiming for.&lt;/p&gt;
&lt;p&gt;To do this we can create an object that maps a response type to the code:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;API_RESPONSES&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token constant&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token constant&quot;&gt;NO_RESULTS&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4040&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token constant&quot;&gt;INVALID_KEY&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4020&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token constant&quot;&gt;INVALID_REQUEST&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4021&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now update our code (for now I&#39;ve left the comments in place):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;makeRequestToLibrary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; code &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;API_RESPONSES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// 2000 is the success code&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;API_RESPONSES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NO_RESULTS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// 4040 = our request returned no results&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;API_RESPONSES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INVALID_KEY&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; code &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;API_RESPONSES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INVALID_REQUEST&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// 4020 and 4021 are API issues - invalid key, invalid request, etc&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how now our comments are effectively duplicating what the code is telling
the reader. Any person curious to learn the code that maps to each response type
need only jump to the definition of &lt;code&gt;API_RESPONSES&lt;/code&gt; and find it. We can remove
the comments and not lose any clarity:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;makeRequestToLibrary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; code &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;API_RESPONSES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;API_RESPONSES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NO_RESULTS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;API_RESPONSES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INVALID_KEY&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; code &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;API_RESPONSES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INVALID_REQUEST&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Comments aren&#39;t always bad&lt;/h2&gt;
&lt;p&gt;Please don&#39;t misunderstand me; I&#39;m not saying that all comments are bad.
Sometimes the nature of code is that it a comment can make it much clearer.
Sometimes though a feeling of wanting to add an explanatory comment can be a
hint of a change to your code that could make things clearer and more self
documenting.&lt;/p&gt;
&lt;p&gt;Use comments when you need to, but first take a moment to think if you can make
a code change first.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Habits of Successful React components</title>
    <link href="http://www.jackfranklin.co.uk/blog/habits-of-successful-react-components/"/>
    <updated>2018-03-07T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/habits-of-successful-react-components/</id>
    <content type="html">&lt;p&gt;One of the best features of React, and one of the reasons I think so many people
love using it, is that it gives you the freedom to choose what approach you&#39;re
going to take. As a primarily view based library, React provides no out-the-box
opinions on how you make HTTP requests, how you style your components, what
naming conventions to use, and so on. It leaves all those decisions up to you.
This is a good thing in my experience; often a set of conventions that worked
well for one of your applications might not work so well for another and having
that flexibility is something I&#39;ve come to appreciate.&lt;/p&gt;
&lt;p&gt;That said, over the last few years of writing React components I&#39;ve come up with
a set of guidelines that I tend to follow, and in this post I wanted to share
those below. I&#39;d love to hear if you disagree with any of these (all of these
are personal preference) or if you have any more to add to the list.&lt;/p&gt;
&lt;h2&gt;1. Has a single job or responsibility&lt;/h2&gt;
&lt;p&gt;If you picked one rule out of this list to follow, it would be this one. The
approach I try to take here is to have as many React components as I need and to
never feel like I&#39;ve got too many. Components are made to be composed together
and as such you should compose them whenever it makes sense to avoid any one
component doing too much.&lt;/p&gt;
&lt;p&gt;A good indication of this in action is if a component has a very long &lt;code&gt;render&lt;/code&gt;
method (see Point 5 for more). That will often hint that it&#39;s doing too much
that could be delegated. A similar indicator is a component with a lot of state
or props. If you&#39;re having to store a huge amount of data on a component, or
take 10 props to ensure it can be configured correctly, then maybe you should
instead have more components that take fewer props.&lt;/p&gt;
&lt;p&gt;Take for example, a component that fetches users from an API, lists them and
lets you click on them to see the active user. It would have three distinct
functions that would make up the component. Firstly, the HTTP logic in
&lt;code&gt;componentDidMount&lt;/code&gt; (I&#39;ve left out error handling for the example but imagine
it&#39;s there):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;fetchUsersFromMyApi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; users &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&#39;d then have the code to list these users, either directly in &lt;code&gt;render&lt;/code&gt; or in
another method that you call from &lt;code&gt;render&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;renderUsers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br&gt;         &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;li key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;viewUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;li&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ul&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then you&#39;d need the logic for setting the active user in the state:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;viewUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;activeUser&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;userId&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the relevant logic in the &lt;code&gt;render&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderUsers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;activeUser &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;output user things here&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This component is now doing a lot of work! Imagine having to write tests for
this component, you&#39;d have to mock out the HTTP call, test that it handles with
success and error cases, check that it lists the right users, and test that it
can show a user when you click on them. That&#39;s a lot to test. Instead, let&#39;s
imagine we had a suite of components that we could compose together.&lt;/p&gt;
&lt;p&gt;The first component, named something like &lt;code&gt;UsersContainer&lt;/code&gt;, could be responsible
for fetching the users and then passing them down into &lt;code&gt;UserList&lt;/code&gt;, which in turn
could render a &lt;code&gt;User&lt;/code&gt; component.&lt;/p&gt;
&lt;p&gt;By doing this you end up with a tree of components, where each one has one job
and then passes the rest of the work down to the child:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UsersContainer&lt;/code&gt;: fetch data, show loading spinner / errors, pass data down&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UserList&lt;/code&gt;: lists the users, delegating the rendering to &lt;code&gt;User&lt;/code&gt;. Keeps track
of the active user.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;User&lt;/code&gt; can render an individual user and deal with UI interactions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. Delegates data processing to an external module&lt;/h2&gt;
&lt;p&gt;As a general rule I like to keep my React components as succinct as they can be,
and one of the best ways of doing that is to pull logic out into external
modules. Taking the list of users example from above, imagine the component had
to make the request and then process the data:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchUsers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;processUsersFromApi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;users&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;processUsersFromApi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// some data processing here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// render some things!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To test this code we have to always go through the component. It&#39;s also harder
if we want to reuse this processing logic (you could imagine more than one place
in our code having to process data from our users API), and makes the React
component contain a substantial amount of code that isn&#39;t specific to UI.&lt;/p&gt;
&lt;p&gt;Instead, we&#39;re much better off extracting that code into a separate module:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; processUsersFromApi &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./process-users-from-api&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchUsers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;processUsersFromApi&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// render some things!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now the component is shorter and contains much less logic that we have to
understand to work on it. Another advantage is that we can test our business
logic in isolation now without having to mount React components in test to do
so.&lt;/p&gt;
&lt;h2&gt;3. Uses PropTypes consistently (or TypeScript/Flow)&lt;/h2&gt;
&lt;p&gt;It&#39;s tempting when you&#39;re writing a component to not use PropTypes. They involve
extra effort both to write initially, and then to maintain as you develop your
component. However, they offer a lot of value to people who use your component,
and other people on your team who have to maintain the code. You&#39;ll thank
yourself if you come back to a component in six months and have to figure out
how to use it!&lt;/p&gt;
&lt;p&gt;Documenting the prop types also means a typo is spotted much quicker than it
would be otherwise:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;UserComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;UserComponent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;propTypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;isAuthenticated&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// later...&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// causes error about missing prop isAuthenticated in console&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;UserComponent isAuthenticatd&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;4. Has a concise &lt;code&gt;render&lt;/code&gt; method&lt;/h2&gt;
&lt;p&gt;A good sign that a component is taking on too much responsibility is if its
render method becomes hard to understand. A component should ideally render a
small amount of DOM, or delegate parts of its rendering to other components.&lt;/p&gt;
&lt;p&gt;For example, let&#39;s take a component that shows a user form. It shows a few text
fields (to keep the example a bit shorter I&#39;ve omitted some of the fields) and a
search button. The search button&#39;s outputs and classes depend on if we&#39;ve
submitted the form or not, and we make use of the excellent
&lt;a href=&quot;https://github.com/JedWatson/classnames&quot;&gt;classnames&lt;/a&gt; package to conditionally
set classes.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;form onSubmit&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onSubmit&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;            Your name&lt;br&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;br&gt;              type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;br&gt;              value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;              placeholder&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Enter your name&quot;&lt;/span&gt;&lt;br&gt;              onChange&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onChange&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;label&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* imagine a few more text fields, labels, and so on...*/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;br&gt;            type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;br&gt;            className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;classNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;btn&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;btn-primary&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;              &lt;span class=&quot;token literal-property property&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;              &lt;span class=&quot;token literal-property property&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;input &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loading &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Loading...&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Go&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;form&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Already, even in this example, this component takes some effort to understand.
And this is with some of the code omitted to avoid this blog post being too
long! React and JSX is very expressive and on the whole easy to follow, but once
your render method has some extra functionality or conditionals, they can
occasionally become hard to follow.&lt;/p&gt;
&lt;p&gt;As a first pass you could pull out another render function to just handle the
button:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;renderSubmit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;br&gt;        type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;br&gt;        className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;classNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;btn&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;btn-primary&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;input &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loading &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Loading...&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Go&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;form onSubmit&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onSubmit&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;            Your name&lt;br&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;br&gt;              type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;br&gt;              value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;              placeholder&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Enter your name&quot;&lt;/span&gt;&lt;br&gt;              onChange&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onChange&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;label&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* imagine a few more text fields, labels, and so on...*/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderSubmit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;form&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works, and is a valid step to take, but now whilst the &lt;code&gt;render&lt;/code&gt; method is
smaller, all you&#39;ve done is move some of it into another function. There are
times where this is enough to add clarity, but one confusing aspect is that it&#39;s
harder to see what props and/or state the submit button uses. So to make that
clearer we could pass them in as arguments:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;renderSubmit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; inputValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;br&gt;        type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;br&gt;        className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;classNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;btn&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;btn-primary&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; inputValue &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;loading &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Loading...&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Go&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;form onSubmit&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onSubmit&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;            Your name&lt;br&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;br&gt;              type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;br&gt;              value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;              placeholder&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Enter your name&quot;&lt;/span&gt;&lt;br&gt;              onChange&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onChange&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;label&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* imagine a few more text fields, labels, and so on...*/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderSubmit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loading&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;form&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is certainly nicer because it&#39;s explicit about the values the submit button
needs, but there&#39;s nothing to stop a developer by-passing this mechanism and
just referring to &lt;code&gt;this.props&lt;/code&gt; or &lt;code&gt;this.state&lt;/code&gt; directly.&lt;/p&gt;
&lt;p&gt;The final, best step, is to instead embrace React to the fullest and extract a
submit button component.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;form onSubmit&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onSubmit&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;            Your name&lt;br&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;br&gt;              type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;br&gt;              value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;              placeholder&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Enter your name&quot;&lt;/span&gt;&lt;br&gt;              onChange&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onChange&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;label&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Button&lt;br&gt;            loading&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loading&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;            disabled&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;input &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;form&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a smaller component and we&#39;ve ended up with a reusable button
component that should be save us time the next time we build out a form.&lt;/p&gt;
&lt;h2&gt;5. Does not store state that can be calculated from &lt;code&gt;props&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;One common mistake that beginners make with React is to set far too many
attributes onto the state and spend a lot of effort keeping them in sync. A good
hint that you&#39;re doing this is that you find yourself continuously having to use
&lt;a href=&quot;https://reactjs.org/docs/react-component.html#componentwillreceiveprops&quot;&gt;&lt;code&gt;componentWillReceiveProps&lt;/code&gt;&lt;/a&gt;
to react to property changes and update your state. To be clear: there are times
when you will need to use this method, but on the whole you should be trying to
avoid it.&lt;/p&gt;
&lt;p&gt;If you need to do some async work (such as making HTTP requests) when the
component does update, you should use
&lt;a href=&quot;https://reactjs.org/docs/react-component.html#componentdidupdate&quot;&gt;&lt;code&gt;componentDidUpdate&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are a couple of rules I try to follow that help to avoid these issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If a piece of data can be computed purely from properties, it should not be
kept in state.&lt;/li&gt;
&lt;li&gt;Any data that a component has as its state should be data that &lt;em&gt;the component
itself changes&lt;/em&gt;. A hint that you might not have quite the right state is if
you find yourself referring to &lt;code&gt;this.state.userName&lt;/code&gt; without ever having a
&lt;code&gt;this.setState&lt;/code&gt; call within a component.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the first case, a good example here is a component that takes &lt;code&gt;firstName&lt;/code&gt;
and &lt;code&gt;lastName&lt;/code&gt; properties:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;UserProfileLink firstName&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Jack&quot;&lt;/span&gt; lastName&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Franklin&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Inside this component we might decide to store a &lt;code&gt;fullName&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserProfileLink&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstName &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lastName &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now in our render method we can refer to &lt;code&gt;this.state.fullName&lt;/code&gt; to show the
user&#39;s full name, and we now have state that is never changed within our
component, and we&#39;ll have to use &lt;code&gt;componentWillReceiveProps&lt;/code&gt; to keep it in sync.&lt;/p&gt;
&lt;p&gt;Keeping data in sync is hard; and it&#39;s a problem that the framework should solve
for you. Rather than trying to manually do this work, we can instead just
compute the &lt;code&gt;fullName&lt;/code&gt; in our &lt;code&gt;render&lt;/code&gt; call:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserProfileLink&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fullName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lastName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;fullName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the computation is more expensive, and you want to ensure you&#39;re not
regenerating the value even if the properties that make it up haven&#39;t changed,
you could look into a technique called &amp;quot;memoization&amp;quot;. This
&lt;a href=&quot;https://addyosmani.com/blog/faster-javascript-memoization/&quot;&gt;old but still excellent blog post&lt;/a&gt;
by Addy Osmani is a good introduction into it. There are plenty of libraries
available to you too on npm that will help with this.&lt;/p&gt;
&lt;h2&gt;6. Has consistently named event handlers&lt;/h2&gt;
&lt;p&gt;A short point, but one that I&#39;ve fallen foul to many times! It&#39;s very easy to
pick names for event handling methods in your React component with no real
convention and on a smaller component or app that would not be an issue, but on
larger apps you&#39;ll thank yourself for coming up with a convention that makes
things easier.&lt;/p&gt;
&lt;p&gt;I&#39;ve taken to prefixing all my event handling methods with &lt;code&gt;on&lt;/code&gt;, so that it&#39;s
clear when looking through a component which methods are event handlers. It also
means you can search a file for &lt;code&gt;on&lt;/code&gt; and find the methods fairly easily.&lt;/p&gt;
&lt;p&gt;This is a small point but one that will add up each time you use it in a
component that you&#39;re working on. Having a variety of event handler names (I&#39;ve
written components that use &lt;code&gt;onUserClick&lt;/code&gt; and &lt;code&gt;userSubmittedForm&lt;/code&gt;, for example)
makes it harder to work on the code. The exact convention doesn&#39;t matter, but
having one will definitely improve your component&#39;s maintainability.&lt;/p&gt;
&lt;h2&gt;7. Uses class properties for event handlers&lt;/h2&gt;
&lt;p&gt;With the &lt;a href=&quot;https://github.com/tc39/proposal-class-fields&quot;&gt;class fields proposal&lt;/a&gt;
now at Stage 3 of the ECMA process (meaning it&#39;s very likely to end up as part
of JavaScript) and there being a
&lt;a href=&quot;https://babeljs.io/docs/plugins/transform-class-properties/&quot;&gt;babel plugin available for this proposal&lt;/a&gt;,
it&#39;s become very common in the React community to define event handlers as arrow
functions. This helps differentiate them from regular methods (which compliments
Point 6 nicely) and ensures that they are bound correctly, so you don&#39;t have to
explicitly call &lt;code&gt;.bind(this)&lt;/code&gt; to ensure that they are called with the right
scope.&lt;/p&gt;
&lt;p&gt;Coupled with a solid naming convention, this makes event handlers very easy to
distinguish:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;onUserSubmitForm&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// do things&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;otherNonEventMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// do other things&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s worth noting that there
&lt;a href=&quot;https://medium.com/@charpeni/arrow-functions-in-class-properties-might-not-be-as-great-as-we-think-3b3551c440b1&quot;&gt;are some issues with arrow functions that it&#39;s worth being aware of&lt;/a&gt;,
but in my opinion they present the best option available to us now. If and when
the &lt;a href=&quot;https://tc39.github.io/proposal-decorators/&quot;&gt;Decorator Proposal&lt;/a&gt; makes it
into the language, we may end up being able to use a decorator on event handlers
to bind them to the right scope, but until then arrow functions are a good
alternative.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;By no means an exhaustive list; these are seven traits that I think represent
React components that tend to be more reliable, more maintainable, more testable
and more fun to work on. I&#39;d love to know if you have any to add to this list,
or if you have any that you do differently. The great thing about React is that
it gives you a lot of alternative approaches, so it&#39;s always great to see how
others are doing it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Getting started with JSON Decoding in Elm</title>
    <link href="http://www.jackfranklin.co.uk/blog/json-decoding-in-elm/"/>
    <updated>2018-04-19T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/json-decoding-in-elm/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;This post was first published on ElmPlayground.com but has now been updated and
moved to this blog.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Something that continually trips beginners up in Elm is dealing with JSON
responses from a third party API. I think this is because it&#39;s a completely new
concept to those picking up Elm from JavaScript. It certainly took me a long
time to get comfortable with Elm.&lt;/p&gt;
&lt;p&gt;Today, we&#39;ll look at using JSON decoders in Elm to deal with data from an API.
I&#39;ve purposefully made some of the data awkward to show some of the more complex
parts of decoding JSON. Hopefully the APIs you&#39;re working with are much better
than my fake one, but this post should have you covered if not!&lt;/p&gt;
&lt;p&gt;Before we get into that though, let&#39;s go through the basics of Elm decoders.&lt;/p&gt;
&lt;h2&gt;What is an Elm JSON decoder?&lt;/h2&gt;
&lt;p&gt;A decoder is a function that can take a piece of JSON and decode it into an Elm
value, with a type that matches a type that Elm knows about. For example, if we
have this JSON:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Jack&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I need to tell Elm that the value at the &lt;code&gt;name&lt;/code&gt; field is a string, so it
can parse the JSON value &lt;code&gt;&amp;quot;Jack&amp;quot;&lt;/code&gt; and turn it into the Elm string &lt;code&gt;&amp;quot;Jack&amp;quot;&lt;/code&gt;. Elm
ships with many decoders for all of the built in types in Elm, and also the
ability for us to make our own decoders, which is of more interest to us, as
more often than not you&#39;ll be taking an object and converting it into an Elm
record.&lt;/p&gt;
&lt;h2&gt;Layering decoders&lt;/h2&gt;
&lt;p&gt;The real power of Elm&#39;s decoders, which is also why they can be pretty
complicated to work with, is that you can combine them to make other decoders.
This is something Brian Hicks wrote about in his
&lt;a href=&quot;https://www.brianthicks.com/post/2016/10/17/composing-decoders-like-lego/&quot;&gt;post on Elm decoders being like Lego&lt;/a&gt;,
which I highly recommend reading. For example, Elm ships with a decoder for
decoding an object with one field, called &lt;code&gt;JSON.Decode.map&lt;/code&gt;. Its type signature
is:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Decoder&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Decoder&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;value&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What&#39;s important to remember is that all these decoder functions &lt;em&gt;return new
decoders&lt;/em&gt;. You have to layer the decoders together to match your JSON. In the
case of &lt;code&gt;map&lt;/code&gt;, its arguments are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(a -&amp;gt; value)&lt;/code&gt; a function that will take the decoded value, and should return
data of the type &lt;code&gt;value&lt;/code&gt;, which is the Elm data you want to get out of your
JSON.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Decoder a&lt;/code&gt; is a decoder that can decode the given JSON and pull out a value
of type &lt;code&gt;a&lt;/code&gt;, which will be passed into the function given as the first
argument.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, taking the JSON that we had earlier:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Jack&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s say we want to decode this into the following Elm record:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Jack&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first step is to create our decoder. We&#39;re going to use &lt;code&gt;map&lt;/code&gt;, because we
want to decode a JSON object where we only care about one field. The JSON we&#39;re
decoding could have &lt;em&gt;any number of fields&lt;/em&gt;, but we use &lt;code&gt;map&lt;/code&gt; because &lt;em&gt;we only
care about one field&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: through the following code examples I&#39;ve imported the JSON decoding
module as &lt;code&gt;import Json.Decode as Decode&lt;/code&gt;, so I&#39;ll refer to functions as
&lt;code&gt;Decode.map&lt;/code&gt;, &lt;code&gt;Decode.string&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;p&gt;First I&#39;ll define my decoder. The first argument is an object that takes the
decoded value and turns it into the thing I want to end up with. The second is a
decoder that can take a value at a particular field, and decode it. To do that I
use &lt;code&gt;Decode.at&lt;/code&gt;, which plucks an item out of the object and applies the given
decoder to it:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token hvariable&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&#92;&lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before we go on, can you guess what the type of &lt;code&gt;userDecoder&lt;/code&gt; is here?&lt;/p&gt;
&lt;p&gt;It is:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Decode.Decoder&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because it&#39;s a decoder that returns an Elm record with a &lt;code&gt;name&lt;/code&gt; property of type
&lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now let&#39;s run this decoder and see what we get. We can run a decoder using
&lt;code&gt;Decode.decodeString&lt;/code&gt;, which takes a decoder and input. It returns an Elm
result, which will be &lt;code&gt;Ok&lt;/code&gt; if we were successful, or &lt;code&gt;Err&lt;/code&gt; if we had an issue.
Normally, if you&#39;re decoding HTTP responses and so on, you won&#39;t ever call this
function manually, the library you&#39;re using will do it for you. It is really
useful for testing decoders though!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you&#39;re more familiar with Elm decoding you might be aware of some
extra Elm packages that exist to make JSON decoding easier. We&#39;ll cover those in
a future tutorial; for now I&#39;m sticking to the core Elm library only.&lt;/p&gt;
&lt;p&gt;I can run my decoder like so:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.decodeString&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&quot;{&quot;name&quot;: &quot;Jack&quot;}&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By wrapping the JSON input with three quotes on each side, I avoid having to
escape the quotes in the JSON (three quotes is a multiline string in Elm where
you can use double quotes without escaping them). This gives us back:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Jack&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which is perfect, and exactly what we want!&lt;/p&gt;
&lt;h2&gt;Type aliasing&lt;/h2&gt;
&lt;p&gt;It&#39;s pretty dull to have to repeat the type &lt;code&gt;{ name : String }&lt;/code&gt; throughout this
imaginary example, so I can instead type alias it:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you define a type alias in Elm, you not only get the alias but &lt;code&gt;User&lt;/code&gt; is a
constructor function:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that I can call:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;jack&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And get back:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Jack&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use this to our advantage. Recall that our &lt;code&gt;userDecoder&lt;/code&gt; looks like so:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Decode.Decoder&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;Decode.map&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&#92;&lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Firstly, we can change the type annotation:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Decode.Decoder&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;Decode.map&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&#92;&lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then we can update the function that creates our &lt;code&gt;User&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Decode.Decoder&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;Decode.map&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&#92;&lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But whenever you have something of the form:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&#92;&lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, more generically:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&#92;&lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can replace that by just passing the function we&#39;re calling directly, leaving
us with the decoder:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Decode.Decoder&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;Decode.map&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the most common pattern you&#39;ll see when dealing with decoding in Elm.
The first argument to an object decoder is nearly always a constructor for a
type alias. Just remember, it&#39;s a function that takes all the decoded values and
turns them into the thing we want to end up with.&lt;/p&gt;
&lt;h2&gt;An alternative to &lt;code&gt;Decode.at&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The decoding library also provides &lt;code&gt;Decode.field&lt;/code&gt;, which reads out the value in
a particular field.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Decode.field &amp;quot;foo&amp;quot; Decode.string&lt;/code&gt; is the equivalent of
&lt;code&gt;Decode.at [&amp;quot;foo&amp;quot;] Decode.string&lt;/code&gt;, but some find it reads a bit nicer.
&lt;code&gt;Decode.at&lt;/code&gt; has the advantage of accepting a list to access nested fields, but
if you don&#39;t need that you could use &lt;code&gt;Decode.field&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;-- these two decoders are equivalent&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Decode.Decoder&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;Decode.map&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Decode.Decoder&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;Decode.map&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.field&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Decoding a more complex JSON structure&lt;/h2&gt;
&lt;p&gt;Now we&#39;re a bit more familiar with decoders, let&#39;s look at our API and dealing
with the data it gives us.&lt;/p&gt;
&lt;h2&gt;The User Type&lt;/h2&gt;
&lt;p&gt;Our application is dealing with a &lt;code&gt;User&lt;/code&gt; type that looks like so:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;languages&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;playsFootball&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only piece of data a user might be missing is &lt;code&gt;description&lt;/code&gt;, which is why
it&#39;s modelled as a &lt;code&gt;Maybe String&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;The Data&lt;/h2&gt;
&lt;p&gt;Keeping in mind the above type we&#39;ve got, here&#39;s the API response we&#39;re working
with:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Jack&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;A person who writes Elm&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;languages&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;elm&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;javascript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;sports&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string-property property&quot;&gt;&quot;football&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;languages&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ruby&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;scala&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;sports&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Alice&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Alice sends secrets to Bob&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;languages&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;scala&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;elm&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&quot;sports&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string-property property&quot;&gt;&quot;football&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Immediately you should notice some important features of this response:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All the data is nested under the &lt;code&gt;users&lt;/code&gt; key&lt;/li&gt;
&lt;li&gt;Not every user has a &lt;code&gt;description&lt;/code&gt; field.&lt;/li&gt;
&lt;li&gt;Every user has a &lt;code&gt;sports&lt;/code&gt; object, but it doesn&#39;t always have the &lt;code&gt;football&lt;/code&gt;
key.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Granted, this example is a little extreme, but it&#39;s not that common to see APIs
that have data like this. The good news is that if you have a nice, friendly,
consistent API, then this blog post will hopefully still help, and you&#39;ll have
less work!&lt;/p&gt;
&lt;p&gt;When dealing with data like this, I like to start with the simplest piece of the
puzzle and work up to the most complicated. Looking at the data we have, most of
the fields are always present, and always of the same type, so let&#39;s start with
that and ignore the rest of the fields.&lt;/p&gt;
&lt;p&gt;Let&#39;s create the &lt;code&gt;userDecoder&lt;/code&gt; that can decode a user object. We know we have
five fields, so we can use &lt;code&gt;Decode.map5&lt;/code&gt; to do that. The first argument we&#39;ll
give it is the &lt;code&gt;User&lt;/code&gt; type, which will be the function that constructs a user
for us. We can easily decode the &lt;code&gt;name&lt;/code&gt; field, which is always a string:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;Decode.map5&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;-- more fields to come here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we can do the same for &lt;code&gt;age&lt;/code&gt;, which is an integer:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;Decode.map5&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;age&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;-- other fields to come, hold tight!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we can do the same for &lt;code&gt;languages&lt;/code&gt;. &lt;code&gt;languages&lt;/code&gt; is a list of strings, and we
can decode that by using the &lt;code&gt;Decode.list&lt;/code&gt; decoder, which takes another decoder
which it will use for each individual item. So &lt;code&gt;Decode.list Decode.string&lt;/code&gt;
creates a decoder that can decode a list of strings:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;Decode.map5&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;age&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;-- we&#39;ll decode the description field here in a mo&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;languages&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.list&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;-- we&#39;ll decode the sports object here in a mo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A top tip when you want to test decoders incrementally is that you can use
&lt;code&gt;Decode.succeed&lt;/code&gt; to have a decoder pay no attention to the actual JSON and just
succeed with the given value. So to finish our decoder we can simply fill in our
missing fields with &lt;code&gt;Decode.succeed&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;Decode.map5&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;age&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.succeed&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Nothing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;languages&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.list&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.succeed&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That makes our decoded &lt;code&gt;description&lt;/code&gt; value always &lt;code&gt;Nothing&lt;/code&gt; (recall that
&lt;code&gt;description&lt;/code&gt; is a &lt;code&gt;Maybe&lt;/code&gt;), and our &lt;code&gt;playsFootball&lt;/code&gt; value always &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Order of decoders&lt;/h2&gt;
&lt;p&gt;Something that I failed to realise early on when I was getting used to JSON
decoding is why the decoders above are ordered as such. It&#39;s because they match
the ordering of values in the &lt;code&gt;User&lt;/code&gt; type alias.&lt;/p&gt;
&lt;p&gt;Because the &lt;code&gt;User&lt;/code&gt; fields are defined in this order:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;languages&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;playsFootball&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have to decode in that order, too.&lt;/p&gt;
&lt;h2&gt;Decoding maybe values&lt;/h2&gt;
&lt;p&gt;If we have a key that is not always present, we can decode that with
&lt;code&gt;Decode.maybe&lt;/code&gt;. This takes another decoder, and if that decoder fails because
the key it&#39;s looking for isn&#39;t present, it will be decoded to &lt;code&gt;Nothing&lt;/code&gt;. Else,
it will be decoded to &lt;code&gt;Just val&lt;/code&gt;, where &lt;code&gt;val&lt;/code&gt; is the value that was decoded.&lt;/p&gt;
&lt;p&gt;What this means in practice is that to decode a &lt;code&gt;maybe&lt;/code&gt; you simply write the
decoder you would write if the field was always present, in our case:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;description&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we then wrap it in &lt;code&gt;Decode.maybe&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.maybe&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;description&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&#39;s it! We&#39;re now nearly done with our decoder:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Decode.Decoder&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;userDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;Decode.map5&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;age&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.maybe&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;description&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;languages&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.list&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.succeed&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;-- just this one to go!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;code&gt;Decode.map&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;It&#39;s time to get a bit more complex and decode the sports object. Remember that
we just want to pull out the &lt;code&gt;football&lt;/code&gt; field, if it&#39;s present, but set it to
&lt;code&gt;False&lt;/code&gt; if it&#39;s not present.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sports&lt;/code&gt; key will be one of three values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ &amp;quot;football&amp;quot;: true }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ &amp;quot;football&amp;quot;: false }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And we use it to set the &lt;code&gt;playsFootball&lt;/code&gt; boolean to &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. In the
case where the &lt;code&gt;football&lt;/code&gt; key isn&#39;t set, we want to default it to &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Before dealing with the case where it&#39;s missing, let&#39;s pretend it&#39;s always
present, and see how we would decode that. We&#39;d create a decoder that pulls out
the &lt;code&gt;football&lt;/code&gt; field, and decodes it as a boolean:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sports&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;football&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.bool&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That would pull out the &lt;code&gt;football&lt;/code&gt; key in the &lt;code&gt;sports&lt;/code&gt; object, and decode it as
a boolean. However, we need to deal with the &lt;code&gt;football&lt;/code&gt; key being missing. The
first thing I&#39;m going to do is define another decoder, &lt;code&gt;sportsDecoder&lt;/code&gt;, which
will take the &lt;code&gt;sports&lt;/code&gt; object and decode it:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sports&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;sportsDecoder&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token hvariable&quot;&gt;sportsDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;football&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.bool&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is equivalent to the previous example but we&#39;ve now split the code up a
little. Remember earlier that we used &lt;code&gt;Decode.succeed&lt;/code&gt; to make a JSON decoder
succeed with a given value? That&#39;s what we need to use here. We effectively want
to try to decode it first, but if it goes wrong, just return &lt;code&gt;False&lt;/code&gt;. If we were
writing our decoder out in English, we&#39;d say:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Try to find the value in the &lt;code&gt;football&lt;/code&gt; field and decode it as boolean.&lt;/li&gt;
&lt;li&gt;If something goes wrong, don&#39;t worry about it, just set the value to &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It turns out that Elm gives us &lt;code&gt;Decode.oneOf&lt;/code&gt;, which does exactly that!
&lt;code&gt;Decode.oneOf&lt;/code&gt; takes a list of decoders and will try each of them in turn. If
anything goes wrong it will try the next decoder in the list. Only if none of
the decoders work will it fail.&lt;/p&gt;
&lt;p&gt;So the first thing we can do is wrap our existing &lt;code&gt;sportsDecoder&lt;/code&gt; in a
&lt;code&gt;Decode.oneOf&lt;/code&gt; call:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;sportsDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.oneOf&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;football&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.bool&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That will work when the field is present, but now we need to cover the other
case and always return &lt;code&gt;False&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-elm&quot;&gt;&lt;code class=&quot;language-elm&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;sportsDecoder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;Decode.oneOf&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.at&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;football&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.bool&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;Decode.succeed&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;False&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that change, we decode the value if it exists, or we set it to &lt;code&gt;False&lt;/code&gt;.
We&#39;re done!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope this article has gone some way to showing that Elm&#39;s decoding isn&#39;t quite
as scary as it first seems. Yes, it&#39;s not always immediately intuitive, and
takes time to get used to, but once you get the hang of it I think you&#39;ll find
it really nice to be able to so explicitly deal with JSON and decode it into
your application&#39;s types.&lt;/p&gt;
&lt;p&gt;If you&#39;d like to look at the code, I&#39;ve
&lt;a href=&quot;https://github.com/jackfranklin/elm-json-decoding&quot;&gt;got a small app on Github&lt;/a&gt;
that uses the decoders in this article, and you can
&lt;a href=&quot;http://twitter.com/Jack_Franklin&quot;&gt;find me on Twitter&lt;/a&gt; (or the Elm slack
channel!) if you have any questions.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Enabling VSCode&#39;s &quot;Go to Definition&quot; for JSX imports</title>
    <link href="http://www.jackfranklin.co.uk/blog/vscode-go-to-definition-jsx/"/>
    <updated>2018-06-13T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/vscode-go-to-definition-jsx/</id>
    <content type="html">&lt;p&gt;I have recently been trialling using Microsoft&#39;s VSCode editor as my primary code editor, and so far I&#39;ve been very happy with it. One feature that I&#39;ve particularly enjoyed is &amp;quot;Go to Definition&amp;quot;. This lets you hover over any variable/class/object/etc and be taken to the place where it is defined, even if it&#39;s in another file.&lt;/p&gt;
&lt;p&gt;This is particularly useful for me in JavaScript imports. If I have this line:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Foo &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./foo&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I can right click on &lt;code&gt;Foo&lt;/code&gt; (or hit the shortcut, &lt;code&gt;F12&lt;/code&gt; by default), and click &amp;quot;Go to Definition&amp;quot;, and be taken to &lt;code&gt;foo.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One problem I found though is that by default, if the file is &lt;code&gt;foo.jsx&lt;/code&gt;, not &lt;code&gt;foo.js&lt;/code&gt; (at work we put React components in &lt;code&gt;.jsx&lt;/code&gt; to differentiate them easily from plain JS files), this won&#39;t work. We have Webpack configured to look for both &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.jsx&lt;/code&gt; files, but need to tell VSCode to do the same.&lt;/p&gt;
&lt;p&gt;The solution here is to define a &lt;a href=&quot;https://code.visualstudio.com/docs/languages/jsconfig&quot;&gt;&lt;code&gt;jsconfig.json&lt;/code&gt;&lt;/a&gt;, which is a file that you can define to configure how VSCode understands your projects. We can tell VSCode that we&#39;re working with JSX by adding &lt;code&gt;&amp;quot;jsx&amp;quot;: &amp;quot;react&amp;quot;&lt;/code&gt; to our &lt;code&gt;jsconfig.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;baseUrl&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;jsx&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;exclude&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;node_modules&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that &lt;code&gt;exclude&lt;/code&gt; is important: here I&#39;ve defined &lt;code&gt;node_modules&lt;/code&gt; and also &lt;code&gt;build&lt;/code&gt;, which is the directory that Webpack builds to. I&#39;m doing this to stop VSCode wasting time trying to parse files in these directories.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once you&#39;ve updated this, you&#39;ll find that &amp;quot;Go to Definition&amp;quot; works just fine on imports from &lt;code&gt;.jsx&lt;/code&gt; files, as well as &lt;code&gt;.js&lt;/code&gt; files.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Introducing VSCode GoToFile</title>
    <link href="http://www.jackfranklin.co.uk/blog/vscode-go-to-file-extension/"/>
    <updated>2018-06-21T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/vscode-go-to-file-extension/</id>
    <content type="html">&lt;p&gt;As mentioned in &lt;a href=&quot;http://www.jackfranklin.co.uk/vscode-go-to-definition-jsx/&quot;&gt;my last post on VSCode&lt;/a&gt;, I&#39;ve
recently been trialling it as my editor of choice and so far have found the
experience to be excellent. Coupled with the
&lt;a href=&quot;https://github.com/aioutecism/amVim-for-VSCode&quot;&gt;amVim plugin&lt;/a&gt;, it&#39;s really
suited me well.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I know many people use &lt;a href=&quot;https://github.com/VSCodeVim/Vim&quot;&gt;VSCodeVim&lt;/a&gt;, but I
was never able to get it running as smoothly as amVim.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of the features that amVim doesn&#39;t provide is &lt;code&gt;gf&lt;/code&gt;, which in Vim means &amp;quot;go
to file&amp;quot;. If your cursor was over a string, and you hit &lt;code&gt;gf&lt;/code&gt; on the keyboard,
Vim would try to go to that file.&lt;/p&gt;
&lt;h2&gt;Existing Plugins&lt;/h2&gt;
&lt;p&gt;I started searching for a plugin that might do this, and came across
&lt;a href=&quot;https://github.com/fr43nk/seito-openfile&quot;&gt;seito-openfile&lt;/a&gt;, which worked for
most of my cases, but I really wanted one that I could customise more to work
for me. In particular we use a lot of aliases on our large codebase at work, and
I wanted to build a plugin that could support them.&lt;/p&gt;
&lt;p&gt;I couldn&#39;t quite find one that did exactly what I wanted, so I decided to bite
the bullet and build one!&lt;/p&gt;
&lt;h2&gt;Presenting vscode-go-to-file&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jackfranklin/vscode-go-to-file&quot;&gt;VSCode GoToFile&lt;/a&gt; is my
attempt at recreating Vim&#39;s &lt;code&gt;gf&lt;/code&gt; functionality in VSCode. It will also parse
aliases from your &lt;code&gt;jsconfig.json&lt;/code&gt;, and is clever enough to try a few common
extensions if the file path doesn&#39;t have one (&lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.jsx&lt;/code&gt;, &lt;code&gt;.css&lt;/code&gt; and
&lt;code&gt;.scss&lt;/code&gt;). Working on this plugin also enabled me to experience plugin
development for the first time and I&#39;ve been really impressed, VSCode offers a
great
&lt;a href=&quot;https://code.visualstudio.com/docs/extensionAPI/vscode-api&quot;&gt;API that is really well documented&lt;/a&gt;
and a
&lt;a href=&quot;https://code.visualstudio.com/docs/extensions/overview&quot;&gt;great tutorial for getting started&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Reporting issues&lt;/h2&gt;
&lt;p&gt;If you&#39;d like to give this plugin a try, I&#39;d be grateful for any feedback you
may have. I&#39;m sure there are many improvements to be made and I&#39;d love you to
&lt;a href=&quot;https://github.com/jackfranklin/vscode-go-to-file/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc&quot;&gt;open an issue&lt;/a&gt;
if you find a problem.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Reading and updating query params with URLSearchParams</title>
    <link href="http://www.jackfranklin.co.uk/blog/url-search-params/"/>
    <updated>2018-07-23T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/url-search-params/</id>
    <content type="html">&lt;p&gt;One of the most common tasks in building a frontend application is to update
query parameters. A quick search for
&lt;a href=&quot;https://www.npmjs.com/search?q=query%20string&quot;&gt;query string on npm&lt;/a&gt; reveals
many options that people have built for tackling this task. But what fewer
people seem to be aware of is that there is now an API for working with query
parameters baked right into the browser and it&#39;s called
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams&quot;&gt;&lt;code&gt;URLSearchParams&lt;/code&gt;&lt;/a&gt;.
In this post we&#39;ll have a quick play with the API to see how easy it makes
working with query params.&lt;/p&gt;
&lt;h2&gt;Browser Support&lt;/h2&gt;
&lt;p&gt;At the time of writing,
&lt;a href=&quot;https://caniuse.com/#feat=urlsearchparams&quot;&gt;browser support for &lt;code&gt;URLSearchParams&lt;/code&gt;&lt;/a&gt;
is very good. IE11 is the main offender, along with Opera Mini. The good news is
that there is an
&lt;a href=&quot;https://github.com/WebReflection/url-search-params&quot;&gt;excellent polyfill&lt;/a&gt; that
you can use to ensure your application will continue to work in browsers that
don&#39;t support it natively 👍.&lt;/p&gt;
&lt;h2&gt;Using &lt;code&gt;URLSearchParams&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;URLSearchParams&lt;/code&gt; expects to be given a string of query parameters (with or
without the initial &lt;code&gt;?&lt;/code&gt;). If you&#39;ve got a full URL that you&#39;d like to parse
query params from, you can use &lt;code&gt;location.search&lt;/code&gt; to pull those out:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Working with the current URL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// URL: buy-shirts-here.com/filter?size=M&amp;amp;colour=red&amp;amp;sleeves=short&lt;/span&gt;&lt;br&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;search &lt;span class=&quot;token comment&quot;&gt;//=&gt; ?size=M&amp;amp;colour=red&amp;amp;sleeves=short&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Creating an instance of new URL from scratch works too...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://buy-shirts-here.com/filter?filter?size=M&amp;amp;colour=red&amp;amp;sleeves=short&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;search &lt;span class=&quot;token comment&quot;&gt;//=&gt; ?size=M&amp;amp;colour=red&amp;amp;sleeves=short&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now that that &lt;code&gt;location.search&lt;/code&gt; and pass it to the &lt;code&gt;URLSearchParams&lt;/code&gt;
constructor:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; params &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Querying for parameters&lt;/h3&gt;
&lt;p&gt;We can use &lt;code&gt;has&lt;/code&gt; to see if a particular query param is present:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;size&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; true&lt;/span&gt;&lt;br&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;button-style&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to read the values out of a query parameter, you can use &lt;code&gt;get&lt;/code&gt;. If
no query parameter exists, you&#39;ll get &lt;code&gt;null&lt;/code&gt; back.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;size&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; &#39;M&#39;&lt;/span&gt;&lt;br&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;button-style&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; null&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I often find rather than use &lt;code&gt;has&lt;/code&gt; to check, and then &lt;code&gt;get&lt;/code&gt; to fetch the value,
I can just use &lt;code&gt;get&lt;/code&gt; and check that the value is not &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;get&lt;/code&gt; vs &lt;code&gt;getAll&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;There&#39;s one gotcha with &lt;code&gt;get&lt;/code&gt; that you need to be aware of. One of the
behaviours of query parameters is that they can have multiple values:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// URL: buy-shirts-here.com/filter?size=M&amp;amp;size=L&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a perfectly valid URL. When we pass that into &lt;code&gt;URLSearchParams&lt;/code&gt;, it will
understand that &lt;code&gt;size&lt;/code&gt; has multiple values. This is where the behaviour of &lt;code&gt;get&lt;/code&gt;
is important: &lt;code&gt;get&lt;/code&gt; will &lt;em&gt;only return the first value for the query parameter&lt;/em&gt;.
If you want all of them, you need to use &lt;code&gt;getAll&lt;/code&gt; which always returns an array:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// URL: buy-shirts-here.com/filter?size=M&amp;amp;size=L&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; params &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;size&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; &#39;M&#39;&lt;/span&gt;&lt;br&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;size&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; [&#39;M&#39;, &#39;L&#39;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Iterating on parameters&lt;/h3&gt;
&lt;p&gt;You can iterate through all the parameters in a few different ways. The first if
using &lt;code&gt;for of&lt;/code&gt;. Once again, be wary of parameters will multiple values, they
will appear twice!&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// URL: buy-shirts-here.com/filter?size=M&amp;amp;size=L&amp;amp;colour=red&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; params &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; p &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// =&gt; [&#39;size&#39;, &#39;M&#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// =&gt; [&#39;size&#39;, &#39;L&#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// =&gt; [&#39;colour&#39;, &#39;red&#39;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also use &lt;code&gt;.keys()&lt;/code&gt; to get an iterator of all the keys in the params, or
&lt;code&gt;.values()&lt;/code&gt; to get all the values:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// URL: buy-shirts-here.com/filter?size=M&amp;amp;size=L&amp;amp;colour=red&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; params &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; [&#39;size&#39;, &#39;size&#39;, &#39;colour&#39;]&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; [&#39;M&#39;, &#39;L&#39;, &#39;red&#39;]&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; [[&#39;size&#39;, &#39;M&#39;], [&#39;size&#39;, &#39;L&#39;], [&#39;colour&#39;, &#39;red&#39;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Modifying parameters&lt;/h3&gt;
&lt;p&gt;The first thing to note is that all these methods mutate the existing
&lt;code&gt;URLSearchParams&lt;/code&gt; object, rather than return a new one.&lt;/p&gt;
&lt;p&gt;You can use &lt;code&gt;.delete()&lt;/code&gt; to delete a query parameter. Note that this deletes all
values of it, if it has multiple:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// URL: buy-shirts-here.com/filter?size=M&amp;amp;size=L&amp;amp;colour=red&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; params &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;size&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; [&#39;colour&#39;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use &lt;code&gt;.append()&lt;/code&gt; to add a new key/value pair. If the value already exists,
&lt;code&gt;append&lt;/code&gt; will append the new one on, as its name suggests:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// URL: buy-shirts-here.com/filter?size=M&amp;amp;colour=red&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; params &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;size&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;L&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; [&#39;size&#39;, &#39;size&#39;, &#39;colour&#39;]&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; [&#39;M&#39;, &#39;L&#39;, &#39;red&#39;]&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; [[&#39;size&#39;, &#39;M&#39;], [&#39;size&#39;, &#39;L&#39;], [&#39;colour&#39;, &#39;red&#39;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to set a new value for the parameter and remove all other existing
values, you can use &lt;code&gt;.set&lt;/code&gt; to do just that:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// URL: buy-shirts-here.com/filter?size=M&amp;amp;colour=red&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; params &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;size&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;L&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; [&#39;size&#39;, &#39;colour&#39;]&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; [&#39;L&#39;, &#39;red&#39;]&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; [[&#39;size&#39;, &#39;L&#39;], [&#39;colour&#39;, &#39;red&#39;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Getting the URL back out&lt;/h3&gt;
&lt;p&gt;After you&#39;ve done all this reading and updating of query parameters, you&#39;ll
probably want to pull it back out as a URL so you can update the URL in the
browser. To do this, just call &lt;code&gt;.toString()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// URL: buy-shirts-here.com/filter?size=M&amp;amp;colour=red&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; params &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;size&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;L&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;colour&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; &#39;size=L&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that &lt;code&gt;toString&lt;/code&gt; does not add the &lt;code&gt;?&lt;/code&gt; at the beginning, so make sure you
remember to add that if you need it.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;URLSearchParams&lt;/code&gt; is a great API that you can use to clearly update your query
parameters without having to worry about any additional libraries to parse query
params, or to convert them back into a string at the end. I highly recommend
using it next time you need to do some query parameter parsing or updating, and
with it being very well supported in most browsers alongside many polyfills
being available, I don&#39;t see a good reason to not use it in your next project!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>React in Five: a new video course to level up your React</title>
    <link href="http://www.jackfranklin.co.uk/blog/react-in-five-release/"/>
    <updated>2018-08-14T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/react-in-five-release/</id>
    <content type="html">&lt;p&gt;Today I&#39;m releasing my brand new video series titled &amp;quot;React in Five&amp;quot;&lt;/p&gt;
&lt;p&gt;I&#39;ve been working with, writing tutorials, and speaking about React for a few
years now and something that I get asked fairly often is how to improve as a
React developer.&lt;/p&gt;
&lt;p&gt;The first answer is to spend time building React applications, but often people
will miss out on the small tricks, tips, or lesser known parts of React that can
make a big difference. That&#39;s what this course is all about. Every video is
&lt;em&gt;less than five minutes long&lt;/em&gt; and covers a small part of React that you may or
may not have come across, but will have an impact on how you build React
applications.&lt;/p&gt;
&lt;p&gt;The series is made up of ten videos, purposefully designed to be easily
watchable on a commute, on a quick break from work or when you&#39;ve got a spare
five minutes over a weekend. The first four videos in the series are free and
you can purchase the rest for $20.&lt;/p&gt;
&lt;p&gt;PS: if you purchased the testing course, or you&#39;re subscribed to the mailing
list, keep an eye out for a little discount code heading your way.&lt;/p&gt;
&lt;p&gt;By purchasing the videos you&#39;ll also get access to all the source code, any
updates over time and the ability to email me with questions about the course.&lt;/p&gt;
&lt;p&gt;If this sounds interesting, you can watch the first video below, and head to the
&lt;a href=&quot;http://www.jackfranklin.co.uk/react-in-five&quot;&gt;React in Five course page&lt;/a&gt; for the rest of the videos and to
buy the full package.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/8gwpTaCDDzg&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
  </entry>
  
  <entry>
    <title>Testing React with Kent C. Dodds</title>
    <link href="http://www.jackfranklin.co.uk/blog/testing-react-with-kent-c-dodds/"/>
    <updated>2018-09-17T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/testing-react-with-kent-c-dodds/</id>
    <content type="html">&lt;p&gt;I&#39;m sure that &lt;a href=&quot;http://twitter.com/kentcdodds&quot;&gt;Kent&lt;/a&gt; needs no introduction, he&#39;s a prolific contributor to the React community and ecosystem. One of the things he talks a lot about is testing, which just so happens to be one of my favourite topics, too!&lt;/p&gt;
&lt;p&gt;In this hour long hangout, Kent and I compared our approaches, both where they align and where we have slightly different opinions. If you&#39;re interested in hearing a deep dive on how to test React applications, this should really help. We mention different approaches, libraries and resources that have helped us get started with and improve our respective testing philosophies.&lt;/p&gt;
&lt;p&gt;Don&#39;t forget, if you are after some more testing resources, that my &lt;a href=&quot;https://javascriptplayground.com/testing-react-enzyme-jest/&quot;&gt;Testing React with Enzyme and Jest&lt;/a&gt; course is available now!&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/z4DNlVlOfjU&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
  </entry>
  
  <entry>
    <title>Black Friday sale on my React video courses</title>
    <link href="http://www.jackfranklin.co.uk/blog/black-friday-react-sale/"/>
    <updated>2018-11-22T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/black-friday-react-sale/</id>
    <content type="html">&lt;p&gt;In the past year I&#39;ve launched two video courses on React, and today I&#39;m offering 40% off them over the Black Friday period.&lt;/p&gt;
&lt;p&gt;You can use the coupon code &lt;code&gt;JACKFRIDAY&lt;/code&gt; to take 40% off, and it works on both courses.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jackfranklin.co.uk/react-in-five&quot;&gt;Buy React in Five here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Or &lt;a href=&quot;http://www.jackfranklin.co.uk/testing-react-enzyme-jest&quot;&gt;Testing React with Enzyme and Jest here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Buying the courses not only gets you access to the current content, but any updates to them forever, and I assure you that there&#39;s updates planned in the near future, with some more testing content on its way.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Adventures with ReasonML</title>
    <link href="http://www.jackfranklin.co.uk/blog/adventures-with-reasonml/"/>
    <updated>2019-01-23T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/adventures-with-reasonml/</id>
    <content type="html">&lt;p&gt;If you follow me on Twitter, or have read this blog for a while, you&#39;ll probably
know that I&#39;m a big fan of &lt;a href=&quot;https://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;. It&#39;s a functional,
strictly typed language that compiles to JavaScript and is a great alternative
to JavaScript for building web applications.&lt;/p&gt;
&lt;p&gt;That said, it&#39;s not the only contender in this space.
&lt;a href=&quot;https://reasonml.github.io/&quot;&gt;Reason&lt;/a&gt; is also a very popular option that has
gained a lot of traction recently. I&#39;ve always been interested in trying it out,
and &lt;a href=&quot;https://adventofcode.com/&quot;&gt;Advent of Code&lt;/a&gt;, a series of coding challenges
posted each day leading up to Christmas, gave me a great excuse.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&#39;re into Elm, you might also be interested to know that I&#39;ve done two
videos completing Advent of Code challenges in Elm that you can find
&lt;a href=&quot;https://www.youtube.com/watch?v=pF8gSF5QlP8&quot;&gt;on Youtube&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you&#39;re eager to skip ahead into the code, you can
&lt;a href=&quot;https://github.com/jackfranklin/advent-of-code-2018/tree/master/day-two-reason-ml&quot;&gt;find it all on GitHub&lt;/a&gt;.
In the rest of this post I&#39;ll talk you through my approach to getting up and
running with Reason, and my thoughts on the language after trying it. I am &lt;em&gt;not&lt;/em&gt;
a Reason expert, so if you spot any errors or things I&#39;ve misunderstood, please
let me know! Equally, there might be better ways of solving the task, so if you
have any suggestions please get in touch.&lt;/p&gt;
&lt;p&gt;The first part of this blog post talks through my approach and how I solved the
problem, and then we end with a list of my good and bad parts of trying Reason.&lt;/p&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;I followed the official
&lt;a href=&quot;https://reasonml.github.io/docs/en/installation&quot;&gt;Installation and getting started&lt;/a&gt;
guide to get easily up and running. It involved installing the compiler,
&lt;a href=&quot;https://bucklescript.github.io/&quot;&gt;BuckleScript&lt;/a&gt;, which is what takes Reason and
produces JavaScript.&lt;/p&gt;
&lt;p&gt;That let me run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bsb -init my-new-project -theme basic-reason
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get a basic project up and running! I also installed
&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=jaredly.reason-vscode&quot;&gt;reason-vscode&lt;/a&gt;
so that I had nice error highlighting and type hinting as I coded. I find this
particularly useful when working with a new language/framework that I&#39;m not
super familiar with.&lt;/p&gt;
&lt;h2&gt;Writing tests&lt;/h2&gt;
&lt;p&gt;I didn&#39;t want to build a UI to solve the Advent of Code problem; so I did a bit
of googling to see if I could use Reason to write some unit tests, and solve the
problem in a TDD style. I managed to find
&lt;a href=&quot;https://github.com/glennsl/bs-jest&quot;&gt;bs-jest&lt;/a&gt;, a library that adds bindings to
BuckleScript to the JS testing framework Jest. This lets us write Reason, but
have it compiled into JavaScript that we can then run with Jest as normal. So
we&#39;ll write a &lt;code&gt;tests.re&lt;/code&gt; file, have it compiled into &lt;code&gt;tests.js&lt;/code&gt;, and then run
&lt;code&gt;jest tests.js&lt;/code&gt;. Setting this up was just a case of following the instructions
in the README, and it worked perfectly.&lt;/p&gt;
&lt;h2&gt;The Advent of Code challenge&lt;/h2&gt;
&lt;p&gt;I was taking on &lt;a href=&quot;https://adventofcode.com/2018/day/2&quot;&gt;Day Two&lt;/a&gt;, and for this
exercise only completed Part One. I&#39;ll leave Part Two as an exercise for you!&lt;/p&gt;
&lt;p&gt;The first part of the exercise needed me to take a string, such as &lt;code&gt;bababc&lt;/code&gt;, and
calculate the frequencies that letters occur. So for this string, we&#39;d end up
with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{ a: 2, b: 3, c: 1 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So that was the first thing I set out to write. I discovered that BuckleScript
provides a
&lt;a href=&quot;https://bucklescript.github.io/bucklescript/api/Js.Dict.html&quot;&gt;&lt;code&gt;Js.Dict&lt;/code&gt;&lt;/a&gt; module
that is the equivalent of a native JS object, and I could use that. It also
provides
&lt;a href=&quot;https://bucklescript.github.io/bucklescript/api/Js.Array.html&quot;&gt;&lt;code&gt;Js.Array&lt;/code&gt;&lt;/a&gt;, and
&lt;a href=&quot;https://bucklescript.github.io/bucklescript/api/Js.String.html&quot;&gt;&lt;code&gt;Js.String&lt;/code&gt;&lt;/a&gt;.
Using a combination of methods from these modules, I could split my input, and
loop over it, updating a dict with new frequencies as I go through each letter.&lt;/p&gt;
&lt;p&gt;I decided to store the frequencies in a dictionary. In Reason you have to decide
what the types of the values are in a dictionary, so I went with integers, given
we&#39;re counting frequencies.&lt;/p&gt;
&lt;p&gt;I first set out to write a function that could take a dictionary and a letter,
and update the frequency for that letter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the letter has no entry in the dictionary, create one and set the frequency
to one.&lt;/li&gt;
&lt;li&gt;If the letter has a frequency, update the count by one.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Defining this function looks very similar to JavaScript:&lt;/p&gt;
&lt;pre class=&quot;language-reason&quot;&gt;&lt;code class=&quot;language-reason&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; incrementOrSetFrequency &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frequencies&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The bit that Reason adds is the type annotations. After each of the two
arguments, we declare the types. We don&#39;t have to do this - Reason will be able
to infer them for us - but I find it helps me work with code if I&#39;ve documented
the type, and very rarely the compiler can infer a type slightly differently to
what you actually want it to be.&lt;/p&gt;
&lt;p&gt;The type annotation above says that &lt;code&gt;frequencies&lt;/code&gt; is a &lt;code&gt;Js.Dict.t(int)&lt;/code&gt;, which
means a dictionary where each value is an &lt;code&gt;int&lt;/code&gt; type. &lt;code&gt;letter&lt;/code&gt; is a &lt;code&gt;string&lt;/code&gt;.
After the arguments we have the return type, which is also a dict, as we want to
take the dict, update it, and then return it again.&lt;/p&gt;
&lt;p&gt;The first thing we need to do is check to see if &lt;code&gt;letter&lt;/code&gt; is in the dictionary,
and we can use &lt;code&gt;Js.Dict.get(frequencies, letter)&lt;/code&gt; to do this. It doesn&#39;t return
the value or &lt;code&gt;undefined&lt;/code&gt; though, like you would expect in JavaScript. Instead,
it returns something that&#39;s an &lt;code&gt;Option&lt;/code&gt; type. This is Reason&#39;s way of trying to
avoid unexpected &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;s in your application. You can read more
about
&lt;a href=&quot;https://reasonml.github.io/docs/en/null-undefined-option&quot;&gt;&lt;code&gt;Option&lt;/code&gt; on the Reason docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you have a function that returns an &lt;code&gt;Option&lt;/code&gt; type, you can use
&lt;a href=&quot;https://reasonml.github.io/docs/en/pattern-matching&quot;&gt;pattern matching&lt;/a&gt; to see
what the value is, and act accordingly. So if we look in our dictionary for our
letter and it returns &lt;code&gt;None&lt;/code&gt;, we need to add the letter. If it returns
&lt;code&gt;Some(int)&lt;/code&gt;, we want to increment it by one:&lt;/p&gt;
&lt;pre class=&quot;language-reason&quot;&gt;&lt;code class=&quot;language-reason&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; incrementOrSetFrequency &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frequencies&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frequencies&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token constructor&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;set&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frequencies&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    frequencies&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token constructor&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;set&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frequencies&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; letter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    frequencies&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Getting our first test passing&lt;/h2&gt;
&lt;p&gt;At this point I decided I&#39;d figured out enough Reason to be dangerous, and
wanted to write a test so I could work towards getting it passing. I created
&lt;code&gt;__tests__/daytwo_test.re&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-reason&quot;&gt;&lt;code class=&quot;language-reason&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;token constructor&quot;&gt;Jest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;describe&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;DayTwo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;token constructor&quot;&gt;Expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  test&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;letterFrequencies&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br&gt;    expect&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;DayTwo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;letterFrequencies&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bababc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; toEqual&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fromList&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you&#39;ve written JS tests with Jest, you&#39;ll probably find the above quite
intuitive, and I was able to use &lt;code&gt;Js.Dict.fromList&lt;/code&gt; to take a list of tuples and
create the dictionary that I needed for the test. The compiler compiled this
into a JS file that I could run using the regular Jest CLI. This was one thing I
liked about Reason; I can use the regular Jest CLI, rather than having to use a
special one specifically for Reason. Jest&#39;s CLI is so good that it makes total
sense to work on top of it rather than creating a language specific one from
scratch.&lt;/p&gt;
&lt;p&gt;To get the test passing we needed to take our input string, split it into a list
of letters, and run each one through our &lt;code&gt;incrementOrSetFrequency&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&quot;language-reason&quot;&gt;&lt;code class=&quot;language-reason&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; letterFrequencies &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; frequencies &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;empty&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  input&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reduce&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;       &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; currentValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; incrementOrSetFrequency&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; currentValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;       frequencies&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;     &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with that the test is passing!&lt;/p&gt;
&lt;h2&gt;Getting frequencies for our entire puzzle input&lt;/h2&gt;
&lt;p&gt;Next we need to take our full puzzle input, which is a series of strings, and
run the above function on each of them, so we can start to work towards the
final answer that we need.&lt;/p&gt;
&lt;p&gt;Once again, I start by writing a test. I replicate the input that the real
puzzle provides by putting each entry on its own line. I want to make sure we
get the logic for splitting lines works properly.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;{|string here|}&lt;/code&gt; allows us to define a multi-line string.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test(&amp;quot;checksum&amp;quot;, () =&amp;gt; {
   let puzzleInput = {|
     abcdef
     bababc
     abbcde
     abcccd
     aabcdd
     abcdee
     ababab
   |};

   expect(DayTwo.checksum(puzzleInput)) |&amp;gt; toEqual(12);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use the familiar &lt;code&gt;Js.String.split&lt;/code&gt; once again here, but pass it &lt;code&gt;&amp;quot;&#92;n&amp;quot;&lt;/code&gt; as
the thing to split on. We then map the resulting lines over &lt;code&gt;String.trim&lt;/code&gt;, which
trims any whitespace and removes it. Note that we&#39;re &lt;em&gt;not&lt;/em&gt; using
&lt;code&gt;Js.String.trim&lt;/code&gt; here, this is the
&lt;a href=&quot;https://reasonml.github.io/api/String.html&quot;&gt;ReasonML module &lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;em&gt;not&lt;/em&gt;
the
&lt;a href=&quot;https://reasonml.github.io/api/String.html&quot;&gt;BuckleScript &lt;code&gt;Js.String&lt;/code&gt; module&lt;/a&gt;.
This was one of the things I found most confusing when learning Reason. It
wasn&#39;t clear why some of the functions we use are Reason modules, and others are
provided by BuckleScript.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&#39;re familiar with Reason and can clarify the above confusion, I&#39;d love
to talk it through and update the blog post to include it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, the first part of the &lt;code&gt;checksum&lt;/code&gt; function is to take the multi-line input,
split it, and then ensure that we don&#39;t have any blanks:&lt;/p&gt;
&lt;pre class=&quot;language-reason&quot;&gt;&lt;code class=&quot;language-reason&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; checksum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; int &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  input&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&#92;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;trim&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;filter&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// note: this is invalid (we&#39;re not returning an int)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once I&#39;ve split the lines and given them a trim, I then use &lt;code&gt;Js.Array.filter&lt;/code&gt; to
remove any strings that are entirely empty. Now we are working with an array of
letter frequencies that looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
  &amp;quot;abcdef&amp;quot;,
  &amp;quot;bababc&amp;quot;,
  &amp;quot;abbcde&amp;quot;,
  &amp;quot;abcccd&amp;quot;,
  &amp;quot;aabcdd&amp;quot;,
  &amp;quot;abcdee&amp;quot;,
  &amp;quot;ababab&amp;quot;,
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we want to take each one and pass it into the &lt;code&gt;letterFrequencies&lt;/code&gt; function
that we have defined:&lt;/p&gt;
&lt;pre class=&quot;language-reason&quot;&gt;&lt;code class=&quot;language-reason&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; checksum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; int &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  input&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&#92;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;trim&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;filter&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;letterFrequencies&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// note: this is invalid (we&#39;re not returning an int)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&#39;ve turned that list of strings into a list of frequencies. This code
sample highlights one of my favourite Reason features (I&#39;m biased as it&#39;s also a
favourite feature of mine from other functional languages like Elm and Elixir),
the pipeline operator. The pipeline operator takes the thing on the left and
passes it as the last argument to the function on the right. It means fewer
parentheses around everything and lends itself to creating really readable code.&lt;/p&gt;
&lt;h2&gt;Calculating frequency occurrences&lt;/h2&gt;
&lt;p&gt;Now we have a list of frequency dictionaries, we need to take them and figure
out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how many of them contain a letter exactly 3 times&lt;/li&gt;
&lt;li&gt;how many of them contain a letter exactly 2 times&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result for each of those is what we&#39;ll need to multiply together to get our
checksum, which is the solution to our puzzle.&lt;/p&gt;
&lt;p&gt;What I&#39;d like to do is take our list of frequencies and map it into a list of
Reason objects that contain two properties, &lt;code&gt;twice&lt;/code&gt; and &lt;code&gt;thrice&lt;/code&gt;. These will be
booleans and correspond to if a word contains a letter twice or thrice. To help
the compiler give me good type errors if I make a mistake, I create a custom
type:&lt;/p&gt;
&lt;pre class=&quot;language-reason&quot;&gt;&lt;code class=&quot;language-reason&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; twiceAndThriceFrequency &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  twice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bool&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  thrice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bool&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This declares a type, &lt;code&gt;twiceAndThriceFrequency&lt;/code&gt;, which is an object with two
properties that are both booleans. I can then create a function that will take a
frequencies dictionary and convert it into one of these objects. Now I have this
custom type, I can use it in the type annotation too:&lt;/p&gt;
&lt;pre class=&quot;language-reason&quot;&gt;&lt;code class=&quot;language-reason&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; findTwicesAndThrices &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frequencies&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; twiceAndThriceFrequency &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;twice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; thrice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For now I&#39;ve hardcoded the values to both be &lt;code&gt;true&lt;/code&gt;, we will fill those in
shortly. Notice how having the custom type defined makes the type annotation
read really nicely and clearly.&lt;/p&gt;
&lt;p&gt;To figure out the value of the &lt;code&gt;twice&lt;/code&gt; and &lt;code&gt;thrice&lt;/code&gt; keys, we need to see if the
frequencies dictionary has any values of &lt;code&gt;2&lt;/code&gt; or &lt;code&gt;3&lt;/code&gt; in it. For this problem, we
don&#39;t actually care about &lt;em&gt;which&lt;/em&gt; letter occurs two or three times, we just need
to know if any of them do.&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;Js.Dict.values&lt;/code&gt;, which takes a dictionary and returns an array of
the values inside it. It&#39;s just like &lt;code&gt;Object.values()&lt;/code&gt; in JavaScript. We can
then use &lt;code&gt;Js.Array.some&lt;/code&gt;, which takes an array and a function and tells us if
any items in the array satisfy it. Therefore, we can define the functions
&lt;code&gt;hasTwices&lt;/code&gt; and &lt;code&gt;hasThrices&lt;/code&gt; like so:&lt;/p&gt;
&lt;pre class=&quot;language-reason&quot;&gt;&lt;code class=&quot;language-reason&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; hasTwices &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frequencies&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bool &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  frequencies &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;values &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; v &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; hasThrices &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frequencies&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bool &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  frequencies &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;values &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; v &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that in this solution I&#39;m not worrying about performance. If I was, we&#39;d
be doing this differently to reduce the number of times we iterate over the
&lt;code&gt;frequencies&lt;/code&gt; array. I&#39;ll leave it as an exercise to the reader to improve
that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Mapping to our &lt;code&gt;twiceAndThriceFrequency&lt;/code&gt; type&lt;/h2&gt;
&lt;p&gt;Now we have these functions, we can define a function that will take a
frequencies dictionary and return a &lt;code&gt;twiceAndThriceFrequency&lt;/code&gt; type:&lt;/p&gt;
&lt;pre class=&quot;language-reason&quot;&gt;&lt;code class=&quot;language-reason&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; findTwicesAndThrices &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frequencies&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; twiceAndThriceFrequency &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;twice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; hasTwices&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frequencies&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; thrice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; hasThrices&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frequencies&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Notice that we don&#39;t need the &lt;code&gt;return&lt;/code&gt; keyword in Reason. The last expression
in a function is automatically returned for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And once we have this function, we can update our main &lt;code&gt;checksum&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&quot;language-reason&quot;&gt;&lt;code class=&quot;language-reason&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; checksum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; int &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  input&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&#92;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;trim&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;filter&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;letterFrequencies&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;findTwicesAndThrices&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// note: this is invalid (we&#39;re not returning an int)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Calculating our checksum&lt;/h2&gt;
&lt;p&gt;At this point we are working with a list of objects that have
&lt;code&gt;{ twice: true/false, thrice: true/false }&lt;/code&gt; within them. We want to go through
this list and reduce it down to two values: the number of times that we have a
letter occurring twice, and the number of times we have a letter occurring three
times. So if we have this list:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
  { twice: true, thrice: false },
  { twice: false, thrice: false },
  { twice: true, thrice: true },
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want to end up with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{ twice: 2, thrice: 1 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s then these two numbers that we multiply to find our checksum.&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;Js.Array.reduce&lt;/code&gt; to do this. It will take our array and loop through
each value in turn, allowing us to check the values of &lt;code&gt;twice&lt;/code&gt; and &lt;code&gt;thrice&lt;/code&gt; and
increment our accumulator accordingly. Our starting accumulator will be an
object, which I also define a type for:&lt;/p&gt;
&lt;pre class=&quot;language-reason&quot;&gt;&lt;code class=&quot;language-reason&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; twiceAndThriceCounter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  twice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; int&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  thrice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; int&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we can start planning our &lt;code&gt;reduce&lt;/code&gt; call:&lt;/p&gt;
&lt;pre class=&quot;language-reason&quot;&gt;&lt;code class=&quot;language-reason&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reduce&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; twiceAndThriceCounter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; currentValue&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; twiceAndThriceFrequency&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; acc&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;twice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; thrice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Inside the body of the callback function, we need to check the &lt;code&gt;currentValue&lt;/code&gt;
and check the values of &lt;code&gt;twice&lt;/code&gt; and &lt;code&gt;thrice&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a case where Reason&#39;s
&lt;a href=&quot;https://reasonml.github.io/docs/en/pattern-matching&quot;&gt;pattern matching&lt;/a&gt; comes in
really handy. We can write code that pattern matches against the object and its
values:&lt;/p&gt;
&lt;pre class=&quot;language-reason&quot;&gt;&lt;code class=&quot;language-reason&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;twice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; thrice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      twice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; acc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;twice &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      thrice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; acc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;thrice &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;twice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; thrice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      twice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; acc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;twice &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      thrice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; acc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;thrice&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;twice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; thrice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      twice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; acc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;twice&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      thrice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; acc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;thrice &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;twice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; thrice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; acc&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each case that we&#39;re matching against starts with the pipe (&lt;code&gt;|&lt;/code&gt;) and then we
match against the &lt;code&gt;twice&lt;/code&gt; and &lt;code&gt;thrice&lt;/code&gt; values within &lt;code&gt;currentValue&lt;/code&gt;. So the
first will match only if &lt;code&gt;currentValue&lt;/code&gt; has both values set to true, in which
case we increment both of our counters. In the case of one of &lt;code&gt;twice&lt;/code&gt; or
&lt;code&gt;thrice&lt;/code&gt; being true, we increment the appropriate counter and if both values are
&lt;code&gt;false&lt;/code&gt;, we do nothing.&lt;/p&gt;
&lt;p&gt;Pattern matching is my favourite feature of Reason (it&#39;s also one of my
favourite parts of Elm), and it leads to some really nice, expressive code.
What&#39;s also nice is that if we don&#39;t write code that deals with every possible
case, we get a compiler error. In the example below, I&#39;ve removed the case that
deals with both values being &lt;code&gt;true&lt;/code&gt;. You can see the compiler spot this and tell
me:&lt;/p&gt;
&lt;pre class=&quot;language-reason&quot;&gt;&lt;code class=&quot;language-reason&quot;&gt;  &lt;span class=&quot;token constructor&quot;&gt;Warning&lt;/span&gt; number &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token constructor&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;jackfranklin&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;git&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;advent&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;code&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;day&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;two&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;reason&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ml&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;src&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;DayTwo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;re &lt;span class=&quot;token number&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token number&quot;&gt;53&lt;/span&gt; ┆ &lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reduce&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token number&quot;&gt;54&lt;/span&gt; ┆      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;acc&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; twiceAndThriceCounter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; currentValue&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; twiceAndThriceFrequenc&lt;br&gt;       y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token number&quot;&gt;55&lt;/span&gt; ┆        &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token number&quot;&gt;56&lt;/span&gt; ┆        &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;twice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; thrice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;   &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; ┆ &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt; ┆        &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;twice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; thrice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; acc&lt;br&gt;  &lt;span class=&quot;token number&quot;&gt;65&lt;/span&gt; ┆        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token number&quot;&gt;66&lt;/span&gt; ┆      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;twice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; thrice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token number&quot;&gt;67&lt;/span&gt; ┆    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token constructor&quot;&gt;You&lt;/span&gt; forgot &lt;span class=&quot;token keyword&quot;&gt;to&lt;/span&gt; handle a possible value here&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; example&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;twice&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; thrice&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means you can never end up with code in production that doesn&#39;t deal with
all possible cases, which is fantastic. It also means if you refactor and now
your pattern matching is out of date, the compiler will tell you.&lt;/p&gt;
&lt;p&gt;Once we have this reduce done, it&#39;s going to end up turning our array of
frequencies into one object with two values. The solution to the puzzle (and
what we need to get our test passing) is to take these values and multiply them.
We can do this by piping our object into an anonymous function that does just
this:&lt;/p&gt;
&lt;pre class=&quot;language-reason&quot;&gt;&lt;code class=&quot;language-reason&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;twice &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;thrice&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with this, our tests are back to green!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; PASS  __tests__/daytwo_test.bs.js
  DayTwo
    ✓ letterFrequencies (6ms)
    ✓ checksum (1ms)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&#39;s one small refactor we can make here though. Much like JavaScript and its
ES2015 destructuring, we can destructure an object into the keys when it&#39;s
passed into a function. So we can rewrite our final line as:&lt;/p&gt;
&lt;pre class=&quot;language-reason&quot;&gt;&lt;code class=&quot;language-reason&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;|&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;twice&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; thrice&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; twice &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; thrice&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which I think reads a bit more clearly. And with that, our puzzle is solved!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was literally the first time I&#39;d written Reason and after finishing the
Advent of Code challenge I took a moment to think through what I found good, and
what I struggled with, from the perspective of a beginner using a new language.&lt;/p&gt;
&lt;p&gt;It&#39;s also worth noting that my experience with Elm almost certainly makes it
easier for me to learn Reason, there are similarities between the two.&lt;/p&gt;
&lt;h2&gt;Things I liked&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The tight interopability between Reason and JavaScript is very compelling. I
could easily see myself writing one module in Reason in an existing JS
application because the interop is so smooth and easy.&lt;/li&gt;
&lt;li&gt;Continuing from the previous point, the fact that Reason can use Jest for its
test runner is excellent. Not having to learn how to run another test runner
was a major bonus. It also helps that Jest is absolutely exceptional and packs
in a tonne of useful features, so it makes perfect sense that Reason would
lean on that rather than build out a brand new test runner.&lt;/li&gt;
&lt;li&gt;On the whole I found compiler errors clear and obvious. One of my main gripes
with TypeScript is that some of the compiler messages were hard to parse, but
Reason gave me understandable messages that I really appreciated, particularly
as a beginner.&lt;/li&gt;
&lt;li&gt;The documentation on the Reason site is excellent. Take
&lt;a href=&quot;https://reasonml.github.io/docs/en/pattern-matching&quot;&gt;this page on pattern matching&lt;/a&gt;
as an example: it&#39;s clear, the code samples are easy to follow, and it
explains things thoroughly. It also avoids any complex jargon and doesn&#39;t
attempt to sound super clever.&lt;/li&gt;
&lt;li&gt;This one is editor specific, but the
&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=jaredly.reason-vscode&quot;&gt;reason-vscode&lt;/a&gt;
plugin gives a really good developer experience. It was easy to quickly get
formatting, syntax highlighting, compiler errors and so on in my editor. (If
you use another editor, there are
&lt;a href=&quot;https://reasonml.github.io/docs/en/editor-plugins&quot;&gt;links to plugins on the Reason site&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Reason includes &lt;code&gt;refmt&lt;/code&gt;, a code formatter for Reason code. Much like Prettier
for JavaScript, this runs and formats your code. What&#39;s great about this is
that all Reason projects use this, so all Reason code is formatted the same,
and that as a beginner any worries about conventions or how to format
something are gone. I just run the formatter! The VSCode plugin runs this for
me when I save, so I just didn&#39;t have to think about it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Things I found confusing&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Please remember that I am writing this as a Reason beginner, not an authority!
If I&#39;ve misunderstood something or made a mistake, please let me know and I&#39;d
be happy to update the blog post and give credit accordingly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;I&#39;ve struggled in my head to fully understand the iteraction between Reason,
OCaml and BuckleScript. In my head Reason is a syntax on top of OCaml, and
BuckleScript is the compiler that can produce JavaScript. I&#39;m not sure if my
mental model stacks up though, and I found it hard to get clarity on this
online. &lt;em&gt;Update!&lt;/em&gt;: &lt;a href=&quot;https://twitter.com/rauschma&quot;&gt;Axel&lt;/a&gt; was kind enough to
share
&lt;a href=&quot;http://reasonmlhub.com/exploring-reasonml/ch_about-reasonml.html&quot;&gt;this diagram&lt;/a&gt;
which I think makes things clearer and provides a nice picture.&lt;/li&gt;
&lt;li&gt;I also found it confusing where to look for documentation for available
modules. For example, when wanting to split a string, I found the
&lt;a href=&quot;https://reasonml.github.io/api/Str.html&quot;&gt;Str&lt;/a&gt; Reason module. However, this
isn&#39;t available when compiling with BuckleScript, so I ended up using the docs
from the BuckleScript API for
&lt;a href=&quot;https://bucklescript.github.io/bucklescript/api/Js.String.html&quot;&gt;Js.String&lt;/a&gt;.
After this I was confused as to which one I should use, and why some modules
exist in BuckleScript, but others in Reason. This is still a big point of
confusion for me - if you can help me understand it I&#39;d love to chat and also
update this blog post!&lt;/li&gt;
&lt;li&gt;I think this is me being strongly biased based on my Elm experience, but I
didn&#39;t love that methods like
&lt;a href=&quot;https://reasonml.github.io/api/Array.html&quot;&gt;Array.get&lt;/a&gt; may raise an exception
if the item at the given index isn&#39;t present. I think here I&#39;m projecting my
expectations from Elm onto Reason, and actually the approach Reason has taken
probably is an easier entry point for JS programmers, but I&#39;d rather they all
return the &lt;code&gt;Option&lt;/code&gt; type, which
&lt;a href=&quot;https://reasonml.github.io/docs/en/null-undefined-option&quot;&gt;Reason does support and use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All in all, I&#39;d really recommend giving Reason a go! I&#39;m excited to see where
the language and ecosystem goes in 2019 and beyond, and I&#39;ll definitely be
playing with it some more, maybe next time on an actual frontend project, rather
than just a coding exercise.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Configuring ESLint on a TypeScript project</title>
    <link href="http://www.jackfranklin.co.uk/blog/typescript-eslint/"/>
    <updated>2019-01-28T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/typescript-eslint/</id>
    <content type="html">&lt;p&gt;Whenever I&#39;ve used TypeScript in the past, I&#39;ve set up
&lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt; as my linting tool of choice.
However, I&#39;ve always wished I could use &lt;a href=&quot;https://eslint.org/&quot;&gt;ESLint&lt;/a&gt; instead,
for a few reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I am more familiar with ESLint, and I know its rules better and have my
preferred set of plugins.&lt;/li&gt;
&lt;li&gt;All the JS projects I work on use ESLint, so having all my projects use the
same linter is beneficial.&lt;/li&gt;
&lt;li&gt;I already have an ESLint plugin in my editor, so I don&#39;t have to configure
the TSLint plugin in addition.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I was therefore thrilled to read a
&lt;a href=&quot;https://eslint.org/blog/2019/01/future-typescript-eslint&quot;&gt;post on the ESLint blog&lt;/a&gt;
about the future of TypeScript and ESLint, with the
&lt;a href=&quot;https://github.com/Microsoft/TypeScript/issues/29288&quot;&gt;TypeScript 2019 roadmap&lt;/a&gt;
mentioning them transitioning to ESLint and contributing to the project.&lt;/p&gt;
&lt;p&gt;I had to set up a new frontend project this week and I decided to use TypeScript
and try ESLint for the first time. I thought it would be useful to document the
process to help others get started!&lt;/p&gt;
&lt;h2&gt;Installing dependencies&lt;/h2&gt;
&lt;p&gt;First up, we&#39;re going to need to install some packages. We&#39;ll install &lt;code&gt;eslint&lt;/code&gt;
itself, but also two plugins we need to allow ESLint to lint TypeScript: a
parser (so ESLint can understand TypeScript&#39;s syntax) and the plugin (to enable
linting on TS files):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add --dev eslint
yarn add --dev @typescript-eslint/eslint-plugin
yarn add --dev @typescript-eslint/parser
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Configuring ESLint&lt;/h2&gt;
&lt;p&gt;That gives us enough to set up ESLint. Let&#39;s create a &lt;code&gt;.eslintrc.js&lt;/code&gt; file and
configure the parser and the plugin:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I much prefer using &lt;code&gt;.eslintrc.js&lt;/code&gt; over a JSON file, primarily because it lets
you leave comments in your configuration!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;@typescript-eslint/parser&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;@typescript-eslint&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that ESLint is all set up to run on TS files, but we haven&#39;t enabled any
rules! You can find all the
&lt;a href=&quot;https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin/docs/rules&quot;&gt;rules and documentation on GitHub&lt;/a&gt;,
but I decided to enable the recommended set of rules that the plugin provides,
by using the &lt;code&gt;extends&lt;/code&gt; configuration key:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;@typescript-eslint/parser&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;@typescript-eslint&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;plugin:@typescript-eslint/recommended&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;At the time of writing there isn&#39;t a website with these rules documented yet,
but I&#39;m sure there will be soon, and I&#39;ll update this post when that happens.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And with that, we&#39;re set! The beauty of this is that you can continue to use any
other ESLint configurations you like (for example, I always
&lt;a href=&quot;https://prettier.io/docs/en/eslint.html&quot;&gt;integrate Prettier into my ESLint setup&lt;/a&gt;)
and now I can do that whilst also linting TypeScript, too!&lt;/p&gt;
&lt;h2&gt;Enabling ESLint on TS files in VSCode&lt;/h2&gt;
&lt;p&gt;One final note for all you VSCode users out there - by default the ESLint plugin
only runs on &lt;code&gt;javascript&lt;/code&gt; and &lt;code&gt;javascriptreact&lt;/code&gt; files. To tell it to run on TS
files, you need to update the &lt;code&gt;eslint.validate&lt;/code&gt; setting to:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;eslint.validate&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;javascript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;javascriptreact&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;typescript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;typescriptreact&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that will get you nice linting errors in your editor.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Refactoring a component to use React hooks</title>
    <link href="http://www.jackfranklin.co.uk/blog/refactoring-to-react-hooks/"/>
    <updated>2019-02-20T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/refactoring-to-react-hooks/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://reactjs.org/blog/2019/02/06/react-v16.8.0.html&quot;&gt;React 16.8&lt;/a&gt; introduced
&lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;hooks&lt;/a&gt;; a new way to work with
effects and state in React. No longer do React components that have state need
to be ES2015 classes that extend &lt;code&gt;React.Component&lt;/code&gt; - hooks let us write
components as functions and still have all the functionality of class based
components.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&#39;s important to note that React will continue to support class based
components for a long time yet. It&#39;s advised that you consider hooks going
forward, but there&#39;s no need to instigate a big migration of your code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I wanted to get familiar with hooks and try them on some real life code, and
this blog post is the result of doing that and writing down how I find it, and
comparing the before and after code. This is far from a deep dive into hooks,
but more a quick look at my first experience refactoring to use them. I hope you
find it useful!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Although I&#39;ve simplified the code for this example, I did really do this at
work first on a real component that we shipped!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The component we are working with.&lt;/h2&gt;
&lt;p&gt;The component we&#39;re going to refactor takes an &lt;code&gt;id&lt;/code&gt; as a prop, and makes a
request to an API to fetch data for the user with that given ID. Its &lt;code&gt;id&lt;/code&gt; prop
can change at any time, so we also have to fetch the user data again if the ID
changes. Therefore we have &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentDidUpdate&lt;/code&gt; to deal
with the first render and any subsequent prop changes. The &lt;code&gt;render&lt;/code&gt; for this
example just dumps the user data out, but in real life this would render a
meaningful UI.&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Demo&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;fetchUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; user &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;componentDidUpdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;prevProps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; prevProps&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;fetchUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; user &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;pre&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br&gt;        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;pre&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&#39;t worry about the definition of &lt;code&gt;fetchUser&lt;/code&gt; - it&#39;s a small wrapper around
&lt;code&gt;fetch&lt;/code&gt; that talks to our API.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Refactoring to hooks&lt;/h2&gt;
&lt;p&gt;Let&#39;s start thinking about how we will refactor this to use hooks. There are two
hooks we&#39;re going to use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/hooks-state.html&quot;&gt;&lt;code&gt;useState&lt;/code&gt;&lt;/a&gt;, which lets us hold a
piece of state in our component. We&#39;ll use this to hold the &lt;code&gt;user&lt;/code&gt; data that
we fetch from our API.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/hooks-effect.html&quot;&gt;&lt;code&gt;useEffect&lt;/code&gt;&lt;/a&gt;. This lets us run
&lt;em&gt;side effects&lt;/em&gt; in our components. That is, things that happen as a result of a
React component being rendered. You can map this roughly onto the old React
lifecycle methods - in fact the documentation says just that:
&lt;blockquote&gt;
&lt;p&gt;If you’re familiar with React class lifecycle methods, you can think of
useEffect Hook as componentDidMount, componentDidUpdate, and
componentWillUnmount combined.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because we&#39;re using hooks, we will also rewrite our component as a function. So
we can start with our shell:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useEffect &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;DemoWithHooks&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setUser&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// TODO&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;pre&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;pre&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we call &lt;code&gt;useState&lt;/code&gt; we get back an array with two items in. The first is the
actual value of the state, and the second is a function used to update that
value. You can call these whatever you&#39;d like, although the &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;setUser&lt;/code&gt;
style is becoming convention. We&#39;re using
&lt;a href=&quot;http://www.jackfranklin.co.uk/es6-destructuring/&quot;&gt;ES2015 destructuring&lt;/a&gt; to keep the boilerplate down, but
you could write it as:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; userState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; userState&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; setUser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; userState&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The value passed to &lt;code&gt;useState&lt;/code&gt; is the original value. This is needed for the
first render. Here I&#39;ve explicitly passed in &lt;code&gt;undefined&lt;/code&gt; so it&#39;s clear that when
this component runs we don&#39;t have a user yet. To get a user, we need to move on
to the &lt;code&gt;useEffect&lt;/code&gt; hook.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;useEffect&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;useEffect&lt;/code&gt; takes a function and runs it when the component renders. This means
it will run both when the component first mounts, &lt;em&gt;and&lt;/em&gt; when the component is
re-rendered. Don&#39;t worry though, we are able to have control over exactly when
it is executed, and we&#39;ll see that shortly.&lt;/p&gt;
&lt;p&gt;Let&#39;s fill our &lt;code&gt;useEffect&lt;/code&gt; call in with a function that fetches our user and
updates the state. Note that we call &lt;code&gt;setUser&lt;/code&gt; from within &lt;code&gt;useEffect&lt;/code&gt;. This is
common if you&#39;ve got some state that you&#39;re setting by making an HTTP request.&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;fetchUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;setUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When used in this manner, the function given to &lt;code&gt;useEffect&lt;/code&gt; will be called:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when the component first renders&lt;/li&gt;
&lt;li&gt;anytime the component is subsequently rendered&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As it happens, for our component this is OK, because we only have one prop that
could cause an update - &lt;code&gt;id&lt;/code&gt;. And every time that property changes, we do want
to fetch the user&#39;s data again.&lt;/p&gt;
&lt;p&gt;But, what if this component took many props, or had other bits of state? In that
case, whenever any of those props changed, and the component was rendered again,
our &lt;code&gt;fetchUser&lt;/code&gt; code would run. It would do this even if &lt;code&gt;props.id&lt;/code&gt; hadn&#39;t
changed, and that&#39;s just a wasted network request if we already have the data
for that user.&lt;/p&gt;
&lt;p&gt;In a class based component we would tackle this by adding a conditional to our
&lt;code&gt;componentDidUpdate&lt;/code&gt; code:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token function&quot;&gt;componentDidUpdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;prevProps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; prevProps&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;fetchUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; user &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This ensures we only make the network request when the data we care about has
changed. We can do the same with &lt;code&gt;useEffect&lt;/code&gt; by passing a second argument which
is an array of data that has to change for the effect to rerun:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;fetchUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;setUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now our effect will run on first render, and also whenever &lt;code&gt;props.id&lt;/code&gt; changes.
If any other data changes, it won&#39;t trigger the effect.&lt;/p&gt;
&lt;h2&gt;The final component&lt;/h2&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;DemoWithHooks&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setUser&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;fetchUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;setUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;pre&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;pre&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you compare the code above to the starting component at the top of the post,
I think it&#39;s much cleaner. The first component has some near-duplicated code in
the &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentDidUpdate&lt;/code&gt;, which is entirely removed as
&lt;code&gt;useEffect&lt;/code&gt; lets us express everything in one function. We also avoid the
awkward comparison of props in &lt;code&gt;componentDidUpdate&lt;/code&gt;; something that&#39;s easy to
get subtly wrong, especially in complex components, and cause bugs or pointless
network requests. &lt;code&gt;useEffect&lt;/code&gt; lets us define the effect and what should cause it
to rerun really concisely.&lt;/p&gt;
&lt;p&gt;If you&#39;re using hooks, I also recommend the
&lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-react-hooks&quot;&gt;eslint-plugin-react-hooks&lt;/a&gt;
package, which will give you handy linter errors or warnings for some common
mistakes when using hooks. I&#39;ve been finding it particularly useful for catching
things I get slightly wrong as I adjust to using hooks over class based
components.&lt;/p&gt;
&lt;p&gt;If you&#39;re not sure where to start with hooks in your codebase, I&#39;d really
recommend this approach of picking one straightforward component and refactoring
it. It&#39;s low risk, and a component with just one or two pieces of local state
shouldn&#39;t take long to refactor. It&#39;s a great learning exercise and a good way
of sharing knowledge of hooks across your team.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The perfect unit test</title>
    <link href="http://www.jackfranklin.co.uk/blog/the-perfect-javascript-unit-test/"/>
    <updated>2019-04-12T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/the-perfect-javascript-unit-test/</id>
    <content type="html">&lt;p&gt;There&#39;s a common theme I find with people who tell me that they don&#39;t find unit
testing useful, and it&#39;s normally that they are writing bad tests. This is
completely understandable, particularly if you&#39;re newer to unit testing. It&#39;s
&lt;em&gt;hard&lt;/em&gt; to write good tests and it takes practice to get there. All the things
we&#39;re going to talk about today were learned the hard way; the pain of bad unit
tests lead me to creating my own rules for how to write a good unit test. It&#39;s
these rules that we&#39;re going to talk about today.&lt;/p&gt;
&lt;h2&gt;Why are bad tests so bad?&lt;/h2&gt;
&lt;p&gt;When you have application code that is messy, it&#39;s hard to work with. But
hopefully you have some tests alongside it, and those help you. It&#39;s OK to work
with hard code if you&#39;ve got tests backing you up. That confidence tests give
you can go along way to erasing the effect of bad code.&lt;/p&gt;
&lt;p&gt;Bad tests don&#39;t have any code to help you work with them. You don&#39;t write tests
for your tests. You &lt;em&gt;could&lt;/em&gt;, but then you&#39;d have to write tests for your tests
for your tests and that&#39;s a spiral none of us want to go down...&lt;/p&gt;
&lt;h2&gt;Characteristics of bad tests&lt;/h2&gt;
&lt;p&gt;It&#39;s hard to define a set of traits that make a bad test, because a bad test is
really any test that doesn&#39;t follow the rules we&#39;re about to talk about.&lt;/p&gt;
&lt;p&gt;If you&#39;ve ever looked at a test and had no idea what it&#39;s testing, or you can&#39;t
obviously spot the assertion, that&#39;s a bad test. A test with a poorly written
description (&lt;code&gt;it(&#39;works&#39;)&lt;/code&gt; is a personal favourite) is a bad test.&lt;/p&gt;
&lt;p&gt;Tests are bad if &lt;em&gt;you don&#39;t find them useful&lt;/em&gt;. The &lt;em&gt;entire point&lt;/em&gt; of having
tests is to increase your productivity, workflow and confidence in your
codebase. If a test isn&#39;t doing that (or actively making it worse), it&#39;s a bad
test.&lt;/p&gt;
&lt;p&gt;I firmly believe that bad tests &lt;em&gt;are worse&lt;/em&gt; than no tests.&lt;/p&gt;
&lt;h2&gt;A good test starts with a good name&lt;/h2&gt;
&lt;p&gt;The good news is that the rules of a good test are easy to remember and very
intuitive once you&#39;ve got used to them!&lt;/p&gt;
&lt;p&gt;A good test has a &lt;em&gt;succinct, descriptive name&lt;/em&gt;. If you can&#39;t come up with a
short name, prefer clarity over saving on line length.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;filters products based on the query-string filters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should be able to know just from the description what a test&#39;s purpose is
for. You&#39;ll sometimes see people name &lt;code&gt;it&lt;/code&gt; tests based on the method it tests
instead:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;#filterProductsByQueryString&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this doesn&#39;t help - imagine being new to this code and trying to figure out
exactly what the function does. In this case the name is pretty descriptive, but
an actual human readable string is always better if you can come up with one.&lt;/p&gt;
&lt;p&gt;Another guide line for naming tests is to ensure you can read the sentence with
the &lt;code&gt;it&lt;/code&gt; at the beginning. So if I&#39;m reading the test below, in my head I read
one big sentence:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;it filters products based on the query-string filters&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;filters products based on the query-string filters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tests that don&#39;t do this, even if the string is descriptive, feel clunky:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;the query-string is used to filter products&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;The three parts of a good test&lt;/h2&gt;
&lt;p&gt;Once you&#39;ve got your test named well it&#39;s time to focus on the body. A good test
follows the same pattern every single time:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;filters products based on the query-string filters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// STEP ONE: SETUP&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// STEP TWO: INVOKE CODE&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// STEP THREE: ASSERT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s go through each of those steps in turn.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;The first stage of any unit test is the setup: this is where you get your test
data in order, or mock any functions that you might need to for this test to
run.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;filters products based on the query-string filters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// STEP ONE: SETUP&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queryString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;?brand=Nike&amp;amp;size=M&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; products &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nike&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;L&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sweater&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Adidas&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;tracksuit&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nike&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;t-shirt&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// STEP TWO: INVOKE CODE&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// STEP THREE: ASSERT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The set up should establish &lt;em&gt;everything you need&lt;/em&gt; to perform the test. In this
case I&#39;m creating the query string and the list of products that I&#39;m going to
use to test against. Notice my choice of data for the products too: I&#39;ve got
items that deliberately don&#39;t match the query string, along with one that does.
If I only had products that matched the query string, this test wouldn&#39;t prove
that the filtering works.&lt;/p&gt;
&lt;h2&gt;Invoke code&lt;/h2&gt;
&lt;p&gt;This step is normally the shortest: you should call the function that you need
to test. Your test data will have been created by the first step, so you should
just be passing variables into a function at this point.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;filters products based on the query-string filters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// STEP ONE: SETUP&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queryString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;?brand=Nike&amp;amp;size=M&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; products &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nike&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;L&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sweater&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Adidas&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;tracksuit&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nike&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;t-shirt&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// STEP TWO: INVOKE CODE&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;filterProductsByQueryString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;products&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; queryString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// STEP THREE: ASSERT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;If the test data is very short, I might merge step one and two, but most of
the time I find the value in splitting the steps out very explicitly to be
worth the extra lines it takes up.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Assert&lt;/h2&gt;
&lt;p&gt;This is the best step! It&#39;s where all your hard work pays off and we check that
what we&#39;re expecting to happen actually did.&lt;/p&gt;
&lt;p&gt;I call this the assert step as we&#39;re making assertions, but these days I tend to
use Jest and it&#39;s &lt;code&gt;expect&lt;/code&gt; function, so you could call this the &amp;quot;Expectation
Step&amp;quot; too if you wanted.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;filters products based on the query-string filters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// STEP ONE: SETUP&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queryString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;?brand=Nike&amp;amp;size=M&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; products &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nike&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;L&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sweater&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Adidas&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;tracksuit&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nike&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;t-shirt&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// STEP TWO: INVOKE CODE&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;filterProductsByQueryString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;products&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; queryString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// STEP THREE: ASSERT&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nike&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;t-shirt&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with that, we have a perfect unit test:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It has a descriptive name that reads clearly and is succinct.&lt;/li&gt;
&lt;li&gt;It has a clear setup phase where we construct test data.&lt;/li&gt;
&lt;li&gt;The invoking step is limited to simply calling our function with our test
data.&lt;/li&gt;
&lt;li&gt;Our assertion is clear and demonstrates the behaviour we&#39;re testing clearly.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Small improvements&lt;/h2&gt;
&lt;p&gt;Whilst I wouldn&#39;t actually include the &lt;code&gt;// STEP ONE: SETUP&lt;/code&gt; comments in my real
tests, I do find it useful to put a blank line between all three parts. So if
this test was in my codebase for real, it would look like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;filters products based on the query-string filters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queryString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;?brand=Nike&amp;amp;size=M&#39;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; products &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nike&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;L&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sweater&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Adidas&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;tracksuit&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nike&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;t-shirt&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;filterProductsByQueryString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;products&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; queryString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nike&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;t-shirt&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we&#39;re building a system that has products in it, I&#39;d look to create an easier
way to create these products. I created the
&lt;a href=&quot;https://github.com/jackfranklin/test-data-bot&quot;&gt;test-data-bot&lt;/a&gt; library to do
exactly this. I won&#39;t dive into how it works, but it lets you easily create
&lt;em&gt;factories&lt;/em&gt; to create test data. If we had that setup (the &lt;code&gt;README&lt;/code&gt; has full
instructions) we could have this test like so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;filters products based on the query-string filters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queryString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;?brand=Nike&amp;amp;size=M&#39;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; productThatMatches &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;productFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nike&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; products &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;productFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Nike&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;L&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;productFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Adidas&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    productThatMatches&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;filterProductsByQueryString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;products&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; queryString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;productThatMatches&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By doing this we remove all the details of products that are irrelevant to this
test (notice how the &lt;code&gt;type&lt;/code&gt; field is not present in our test now) and lets us
easily keep our test data in sync with the real data by updating our factory.&lt;/p&gt;
&lt;p&gt;I also pull the product that I want to match out into its own constant so we can
reuse it in the assertion step. This avoids duplication and makes the test
clearer - having a piece of test data titled &lt;code&gt;productThatMatches&lt;/code&gt; is a strong
hint that it&#39;s what we&#39;re expecting our function to return.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you have these rules in mind whilst writing unit tests I&#39;m confident that
you&#39;ll find your tests easier to work with and more useful in your development
workflow. Testing is just like anything else: it takes time and practice.
Remember the three steps: &lt;code&gt;setup&lt;/code&gt;, &lt;code&gt;invoke&lt;/code&gt;, &lt;code&gt;assert&lt;/code&gt; and you&#39;ll be writing
perfect unit tests before you know it 👌.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Hiding implementation details with React hooks</title>
    <link href="http://www.jackfranklin.co.uk/blog/hiding-implementation-details-react-hooks/"/>
    <updated>2019-05-28T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/hiding-implementation-details-react-hooks/</id>
    <content type="html">&lt;p&gt;It&#39;s fair to say that the
&lt;a href=&quot;https://reactjs.org/blog/2019/02/06/react-v16.8.0.html&quot;&gt;introduction of hooks in React 16.8&lt;/a&gt;
has really changed how we build React components. They certainly take some
getting used to, but once the concept clicks in your head it becomes clear that
they are a superior mechanism for building complex components when compared to
the old lifecycle methods.&lt;/p&gt;
&lt;p&gt;One area where hooks shines is in reusing code across components. Those of you
who have been doing React for a long time will remember mixins (if you don&#39;t
it&#39;s not a problem as they are now removed from React!), which attempted to
solve sharing functionality across two components. After that people tackled the
problem of code-reuse with
&lt;a href=&quot;https://reactjs.org/docs/higher-order-components.html&quot;&gt;Higher-Order Components&lt;/a&gt;
and also &lt;a href=&quot;https://reactjs.org/docs/render-props.html&quot;&gt;Render Props&lt;/a&gt;, but those
came with their own problems. I think that hooks are the best solution yet.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Both Higher-Order Components and Render Props still have their place and use
cases and they are still good patterns to have in your toolbox.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Custom hooks can use hooks&lt;/h2&gt;
&lt;p&gt;The real moment for me was realising two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;custom hooks are just JavaScript functions and nothing more&lt;/li&gt;
&lt;li&gt;custom hooks can &lt;em&gt;call React hooks&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Suddenly, code reuse with hooks becomes as simple as &lt;em&gt;writing functions&lt;/em&gt;. We&#39;ve
all been doing this since we started programming; spotting some code that&#39;s
duplicated and wrapping it in a function. Custom hooks are just functions with a
convention that they start with the word &lt;code&gt;use&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;useCounter&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;clearTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; count&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;You can see this running &lt;a href=&quot;https://codesandbox.io/s/f7552&quot;&gt;on CodeSandbox&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Compare this to how you&#39;d write a &amp;quot;regular&amp;quot; JS function:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; count&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see that whilst the hook version contains some React specifics (namely
the &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; calls), the logic is largely the same.&lt;/p&gt;
&lt;h2&gt;The benefits of hidden implementation details&lt;/h2&gt;
&lt;p&gt;Until now in this post I&#39;ve focused purely on the reuse benefits that hooks
provide. Continuing with the above example, now any component in our system can
easily use the &lt;code&gt;useCounter&lt;/code&gt; hook and if we want to update that logic we can do
it in just one place. You can imagine this being a hook that provides logic for
user authentication, for example, rather than a slightly contrived blog post
demo.&lt;/p&gt;
&lt;p&gt;There is another benefit to hooks (which also applies to JS functions): &lt;em&gt;hidden
implementation details&lt;/em&gt;. The reason I think this is such a big benefit is
because when you&#39;re working on a codebase, you likely have a million things in
your head that you&#39;re thinking about. Say you&#39;re working on a component that
happens to use the &lt;code&gt;useCounter&lt;/code&gt; hook, amongst other things, and this component
was written by your colleague. This is the first time you&#39;ve worked with this
component so you&#39;re skimming the code to build up a picture in your head of what
it does. The beauty of seeing the &lt;code&gt;useCounter&lt;/code&gt; hook is that &lt;em&gt;you do not have to
care or worry about how it works&lt;/em&gt;. You can tell from seeing this line:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useCounter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That it&#39;s going to give you a count, and from seeing it in the browser you&#39;ll
know that it increments. Compare that one line to the 10 lines above that
implement the &lt;code&gt;useCounter&lt;/code&gt; hook. Reading the line that calls the hook is 10% of
the lines of code that the full hook implementation is, so you&#39;ve just saved
yourself a bunch of space in your brain for something more important (and this
gap gets bigger with larger hooks).&lt;/p&gt;
&lt;p&gt;The beauty of hooks is that they &lt;em&gt;let you lean on functionality without caring
about how it works&lt;/em&gt;. Higher-Order Components and Render Props do this too, but
they introduce more ceremony and work to do it. Hooks are &lt;em&gt;just function calls&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;When to extract a custom hook&lt;/h2&gt;
&lt;p&gt;As always in programming, the rules aren&#39;t clearcut. My advice for creating
custom hooks would be to feel the pain first: until you have logic that&#39;s
&lt;em&gt;exactly&lt;/em&gt; the same in &lt;em&gt;at least two components&lt;/em&gt;, don&#39;t create a hook.
Pre-emptively creating one and trying to predict how you&#39;re going to use it is
probably going to leave you with an overcomplicated hook that doesn&#39;t do an
elegant job of solving your problems.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Making unit tests fail when PropTypes error</title>
    <link href="http://www.jackfranklin.co.uk/blog/failing-tests-on-react-proptypes/"/>
    <updated>2019-06-03T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/failing-tests-on-react-proptypes/</id>
    <content type="html">&lt;p&gt;PropTypes are a great way to document your components and I generally advise
that everyone do this fairly strictly. In fact, we have an ESLint rule that
ensures all PropTypes are declared.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&#39;re using TypeScript/Flow, you don&#39;t need to be using PropTypes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I always appreciate a PropTypes warning in the browser; it normally makes me
aware of a mistake I&#39;ve made way before I&#39;ve noticed it myself and I&#39;m confident
that over the years PropTypes have saved me a lot of time debugging.&lt;/p&gt;
&lt;h2&gt;Missing PropType warnings in test runs&lt;/h2&gt;
&lt;p&gt;When running our test suite with Jest, I noticed that I&#39;d often miss the console
warnings that the PropTypes library emits if some tests fail, particularly if
I&#39;m running multiple tests and so recently I set about trying to improve this. I
wanted to make the errors as obvious as possible, so you couldn&#39;t miss them.&lt;/p&gt;
&lt;p&gt;For our test today we&#39;re using a &lt;code&gt;ProductPrice&lt;/code&gt; component we have at work which
(you guessed it!) shows the price of an item to the user. IT also has some logic
to show the previous price crossed out, so users are shown if the item is on
sale.&lt;/p&gt;
&lt;p&gt;Here&#39;s the test we&#39;ll be working with (we&#39;re using Enzyme for this test, but you
can use whichever library you&#39;d like):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ProductPrice&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Shows previous price&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; props &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;pricing&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;GBP&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;fullPrice&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;GBP&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; wrapper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ProductPrice &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; priceMatchUrl&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/price-match&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wrapper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;strike&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;£54&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&#39;s deliberately break this test, by removing the &lt;code&gt;pricing.price&lt;/code&gt; prop,
and see what the output looks like from Jest (I&#39;ve removed some output to keep
this post a bit shorter!):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; FAIL  frontend/components/product/price.test.jsx
  ● ProductPrice › Shows previous price

    Method “text” is meant to be run on 1 node. 0 found instead.

      29 |     );
      30 |
    &amp;gt; 31 |     expect(wrapper.find(&#39;strike&#39;).text()).toEqual(&#39;£54&#39;);
         |                                   ^
      32 |   });
      33 | });
      34 |

      at ReactWrapper.single (../node_modules/enzyme/build/ShallowWrapper.js:1958:17)

  console.error node_modules/prop-types/checkPropTypes.js:20
    Warning: Failed prop type: The prop `pricing.price.currency` is marked as required in `ProductPrice`, but its value is `undefined`.
        in ProductPrice
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that we do get the PropTypes warning appear, but it&#39;s right at the
bottom. It&#39;s easy to spot in this small example where I&#39;m running a single test,
but normally I&#39;m running a whole file as I&#39;m building or editing something, and
if you have a few failures it can be hard to trace back the PropTypes warnings
to the specific test that caused them. The main bit of output that I&#39;m drawn to
is the main test error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Method “text” is meant to be run on 1 node. 0 found instead.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this isn&#39;t telling me too much; it tells me that &lt;code&gt;wrapper.find(&#39;strike&#39;)&lt;/code&gt;
didn&#39;t succeed, but I don&#39;t know the root cause. I can go digging around, but if
this clearly told me I&#39;d missed a PropType, that would give me a clear first
instruction that fixing the PropTypes would be a solid first step.&lt;/p&gt;
&lt;h2&gt;Failing unit tests for PropTypes warnings&lt;/h2&gt;
&lt;p&gt;By default a PropType warning, which is just a &lt;code&gt;console.error&lt;/code&gt; call, will never
fail a test. But that&#39;s what I&#39;d like it to do. I want to fail a test on a
PropType warning every time. Not only does it help with debugging, it also means
our PropTypes are being used and are up to date with the real props we&#39;re
passing.&lt;/p&gt;
&lt;p&gt;To do this we can create a setup file that Jest will run before tests and use
Jest&#39;s spying mechanism to spy on &lt;code&gt;console.error&lt;/code&gt; calls, and check for calls
that look like PropType errors:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; originalConsoleError &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; global&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  global&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; propTypeFailures &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;Failed prop type&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;Warning: Received&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;propTypeFailures&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;originalConsoleError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By swapping &lt;code&gt;global.console.error&lt;/code&gt; for our own version we can track any calls.
If we find one that matches what we suspect is a PropType issue, we can
immediately throw an error. Throwing an error in a &lt;code&gt;beforeEach&lt;/code&gt; will make Jest
fail that test, so this does the trick.&lt;/p&gt;
&lt;p&gt;When we run the tests again, our output looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; FAIL  frontend/components/product/price.test.jsx
  ProductPrice
    ✕ Shows previous price (4ms)

  ● ProductPrice › Shows previous price

    Warning: Failed prop type: The prop `pricing.price.currency` is marked as required in `ProductPrice`, but its value is `undefined`.
        in ProductPrice

      28 |
      29 |     if (propTypeFailures.some(p =&amp;gt; p.test(args[0]))) {
    &amp;gt; 30 |       throw new Error(args[0]);
         |             ^
      31 |     }
      32 |
      33 |     originalConsoleError(...args);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whilst this isn&#39;t perfect (the stack trace for example is useless here), having
the warning front and centre right by the test failure makes it impossible to
miss. We can also go a bit further if we like by using
&lt;a href=&quot;https://www.npmjs.com/package/chalk&quot;&gt;Chalk&lt;/a&gt; to add some bold, red highlighting
to the error:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;propTypeFailures&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;chalk&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;red&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;PropTypes caused test failure:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; chalk&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string&quot;&gt;&#39;&#92;n&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We&#39;ve been very happy at work with this change; it&#39;s saved me from some
confusing debugging on multiple occasions. Regardless of if you want to do this
for your tests for PropTypes, I&#39;d encourage you to look for ways that your test
output makes thing slightly less clear than it should be, and improve it.&lt;/p&gt;
&lt;p&gt;Your tests are a tool for you and your team; if they are not working as well as
they could be for you a technique like the one we&#39;ve used today for PropTypes
can be a great way to improve them.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Converting a JS library to TypeScript: Part 1</title>
    <link href="http://www.jackfranklin.co.uk/blog/typescript-videos-test-data-bot/"/>
    <updated>2019-06-05T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/typescript-videos-test-data-bot/</id>
    <content type="html">&lt;p&gt;I&#39;ve been wanting a project to dive into to help me learn TypeScript, and the
other day on an issue for
&lt;a href=&quot;https://github.com/jackfranklin/test-data-bot&quot;&gt;test-data-bot&lt;/a&gt;, someone asked if
TypeScript definitions were available. I decided this was a good way for me to
dive in and try converting a library to TS, and I decided to record it and share
for anyone else wondering what the process looks like!&lt;/p&gt;
&lt;p&gt;Rather than create streamlined, snappy, short videos like I do for my paid
courses, these videos will be ~15 minutes long and show you a much less edited
version of how I work. You&#39;ll see how I use my editor, how I go about driving
code with tests and how I debug when I get stuck. I&#39;m not a TypeScript expert,
so there&#39;s a fair amount of time spent figuring out TypeScript together!&lt;/p&gt;
&lt;p&gt;You can watch it on YouTube, either by
&lt;a href=&quot;https://www.youtube.com/watch?v=XdPltW0a-fg&quot;&gt;clicking here to view it directly&lt;/a&gt;
or using the embedded player below. I filmed the video in 1080p so it should be
crystal clear 👌.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/XdPltW0a-fg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
  </entry>
  
  <entry>
    <title>Things I was wrong about when I started programming</title>
    <link href="http://www.jackfranklin.co.uk/blog/things-i-was-wrong-about-javascript/"/>
    <updated>2019-06-10T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/things-i-was-wrong-about-javascript/</id>
    <content type="html">&lt;p&gt;When I got my first job after university I was ready to get stuck in. Through
university and side projects I&#39;d done a good amount of programming and thought
that I was more than ready for my full time career to start. Recently I&#39;ve been
looking back and thinking that I definitely had some misconceptions, weird
approaches and inefficient ways of working. These are all things I wish I could
go back and tell myself - it would have saved a bunch of time having to learn
them the hard way!&lt;/p&gt;
&lt;p&gt;I was inspired by a
&lt;a href=&quot;https://monicalent.com/blog/2019/06/03/absolute-truths-unlearned-as-junior-developer/&quot;&gt;post on a similar subject by Monica Lent&lt;/a&gt;
and thought it would be a good idea to write these down to share them with you
all.&lt;/p&gt;
&lt;p&gt;Although these are things I ended up changing my opinion on, I&#39;m still happy
that I made these mistakes. The best way for me to learn is to see one strategy
fail, reflect on why, and do it differently next time. If you&#39;re starting out,
don&#39;t be afraid of making mistakes. They are a great way to learn and improve.&lt;/p&gt;
&lt;h2&gt;1: Less code is not always better&lt;/h2&gt;
&lt;p&gt;When I started coding I had some hard rules about what constituted &amp;quot;good&amp;quot; code.
One of those rules was conciseness: if I could fit the same functionality into
fewer lines, that was an improvement. I&#39;ve drastically changed my mind on this,
partly because I&#39;d find myself revisiting code I wrote six months prior that
turned out to be a nightmare to understand.&lt;/p&gt;
&lt;p&gt;Typically I find code that&#39;s been squashed up is more complex, uses tricks that
aren&#39;t common knowledge, and is also very hard to change. Given that most of a
developer&#39;s job is changing code, this matters. I am now very eager to extend a
function&#39;s body by a line or two if I can introduce more clarity to the code to
help me and my teammates understand it.&lt;/p&gt;
&lt;h2&gt;2: Work smarter, not harder&lt;/h2&gt;
&lt;p&gt;I worked &lt;em&gt;way too many hours&lt;/em&gt; in my first job. This wasn&#39;t the fault of the
company, it was solely my choice. I would work long into the night determined to
get that ticket finished before I went home. I then realised (and had feedback
from my manager) that I wasn&#39;t working smart; I was trying to take on a lot at
once, and ended up trying to do too many things and not focusing on any of them
fully. This would lead to all of them taking way longer than anticipated.&lt;/p&gt;
&lt;p&gt;Once I was aware of this I was able to focus on doing fewer things well and
efficiently. I worked hard to get better at focusing in and being productive
during work hours so I got things done. I reduced my hours in the office by &lt;em&gt;a
lot&lt;/em&gt; but actually increased my output at the same time!&lt;/p&gt;
&lt;h2&gt;3: Some technical debt is OK&lt;/h2&gt;
&lt;p&gt;I came out of university thinking that only bad developers could create
technical debt. That in the real world all companies with good developers had
this beautiful codebase full of code that&#39;s easy to understand and follow. &lt;em&gt;How
wrong I was!&lt;/em&gt; At first I was intolerant of technical debt before learning that
every developer will be responsible for some during their career and that it&#39;s
an inevitable part of being an engineer.&lt;/p&gt;
&lt;p&gt;I would come across &amp;quot;bad&amp;quot; code and immediately want to fix it or rewrite it. I
lost many hours doing just that. What I wasn&#39;t good at is &lt;em&gt;judging the impact&lt;/em&gt;
of technical debt. Tech debt that&#39;s isolated to part of the codebase that
doesn&#39;t get touched much is fine, and you should just leave it there. Bad code
isn&#39;t bad code because it&#39;s written badly; it&#39;s bad code if it slows you down,
causes bugs for users, or constantly breaks. That&#39;s the code you need to fix.&lt;/p&gt;
&lt;h2&gt;4: Bad code isn&#39;t always the original developer&#39;s fault&lt;/h2&gt;
&lt;p&gt;This point is related to the one above; I would encounter bad code and my
immediate thought would be to lay the blame on the developer(s) who wrote it.
But this isn&#39;t fair; although when you come across bad code, it&#39;s easy to
&lt;code&gt;git blame&lt;/code&gt; and hunt down the &amp;quot;culprit&amp;quot;, it doesn&#39;t take into account the
&lt;em&gt;context in which the code was written&lt;/em&gt;. Sure, that code might be bad, but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;there might have been a must-hit deadline which meant the usual review process
was skipped. Granted, if this happens often this would be an issue, but we&#39;ve
all had one-off deadlines that must be hit at all costs.&lt;/li&gt;
&lt;li&gt;the code might have been introduced as an emergency stop gap to fix a critical
bug that was stopping users checking out, so quality was less important than
fixing it.&lt;/li&gt;
&lt;li&gt;the code may have been written with future modifications in mind that never
happened due to other work getting prioritised&lt;/li&gt;
&lt;li&gt;or the developer simply had an off day; I&#39;ve come in to work and looked at
code I wrote the day before in disdain before, it happens! We&#39;re all human and
have off days.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;5: Working is better than perfect&lt;/h2&gt;
&lt;p&gt;Due to the aforementioned misconceptions of technical debt and how it exists in
a codebase, I was always worried about introducing it myself. So when asked to
build a new feature I&#39;d spend far too long trying to build &lt;em&gt;the perfect
solution&lt;/em&gt;. This is incredibly inefficient - when trying to solve a problem you
are constantly learning more about the problem as you solve it - so the first
attempt is nearly always not going to hit the mark. It&#39;s far better to &lt;em&gt;get
something functional&lt;/em&gt; in place - and cover it with tests - before refactoring
and working towards a better solution.&lt;/p&gt;
&lt;p&gt;It&#39;s also important to realise that &lt;em&gt;the perfect solution does not exist&lt;/em&gt;. Any
solution will have pros and cons and the challenge we have as developers is
deciding on the best solution for the task at hand.&lt;/p&gt;
&lt;h2&gt;6: Software development is all about tradeoffs&lt;/h2&gt;
&lt;p&gt;I used to think that the best solution to a problem would have no problems. That
for every ticket or piece of work I was asked to do, I could solve it in a way
that had no negatives. Now I&#39;m a bit older (and &lt;em&gt;maybe a tiny bit wiser&lt;/em&gt;) I&#39;ve
realised that there is no such thing as the perfect solution. The job of a
developer is to know what tradeoffs to make, because there are always going to
be tradeoffs. The best developers make the right tradeoffs that solve the
problems at hand and don&#39;t cause issues further down the line. &lt;em&gt;But&lt;/em&gt; they can
only make those tradeoffs and foresee problems &lt;em&gt;because they&#39;ve made the wrong
choice many times&lt;/em&gt;. So don&#39;t fret if you&#39;ve made a refactoring that you thought
was great, but ended up causing problems, or implemented a bug fix which caused
your colleague hours of grief down the road. &lt;em&gt;We all have!&lt;/em&gt; The single most
important skill for a developer in my opinion is to be humble, willing to admit
that you made a mistake, but be eager to understand why your choice was wrong,
how you could have realised that sooner, and learn from it. If you do that
you&#39;ll be in a very good place.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Converting a JS library to TypeScript: Part 2</title>
    <link href="http://www.jackfranklin.co.uk/blog/test-data-bot-in-typescript-part-2/"/>
    <updated>2019-06-14T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/test-data-bot-in-typescript-part-2/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;If you missed part one, you can
&lt;a href=&quot;http://www.jackfranklin.co.uk/typescript-videos-test-data-bot/&quot;&gt;find it here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Today we&#39;re implementing more of test-data-bot&#39;s API in TypeScript and diving
more into types, interfaces and figuring out how best to model our API through
TypeScript. I talk through the pros and cons and my thought process as we figure
out the right approach.&lt;/p&gt;
&lt;p&gt;You can watch it on YouTube, either by
&lt;a href=&quot;https://youtu.be/Nqbik4MYqfw&quot;&gt;clicking here to view it directly&lt;/a&gt; or using the
embedded player below. I filmed the video in 1080p so it should be crystal clear
👌.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Nqbik4MYqfw&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
  </entry>
  
  <entry>
    <title>Avoiding recursive useEffect hooks in React</title>
    <link href="http://www.jackfranklin.co.uk/blog/avoiding-recursive-use-effect-hooks-react/"/>
    <updated>2019-06-20T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/avoiding-recursive-use-effect-hooks-react/</id>
    <content type="html">&lt;p&gt;It&#39;s fair to say that React 16.8 and the introduction of
&lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;hooks&lt;/a&gt; has really changed how we
write React. Hooks are one of those APIs that make you realise the flaws of the
previous approach &lt;em&gt;after&lt;/em&gt; you stop using it. I remember being very skeptical of
hooks when they were first released, not thinking that the previous class based
design had many flaws, but I&#39;ve since come to realise I was very wrong, and
hooks are a vast improvement on how we build React components. If you&#39;re
interested in comparing the old vs the new, I wrote a
&lt;a href=&quot;http://www.jackfranklin.co.uk/refactoring-to-react-hooks/&quot;&gt;blog post refactoring a component to use hooks&lt;/a&gt;
that offers a nice comparison.&lt;/p&gt;
&lt;p&gt;One area that has taken me some time to get used to is the dependency array of
the &lt;code&gt;useEffect&lt;/code&gt; hook. This lets you tell React when it should rerun the effect:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;I run when `a` changes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;useEffect&lt;/code&gt; will be run:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when the component is first mounted&lt;/li&gt;
&lt;li&gt;whenever the variable &lt;code&gt;a&lt;/code&gt; changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But this lead me to quite often end up with recursive calls to &lt;code&gt;setEffect&lt;/code&gt;,
where I&#39;d need to rely on some state in order to update its value:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// this is going to go on forever&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// because the effect relies on the `count` variable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// and then updates the `count` variable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// which triggers the effect&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// and so on...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a contrived example for the purpose of demonstration, but I also had
bigger examples where we had an object in state with many keys and values, and
we needed to read in the object and update one part of it:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;userData&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setUserData&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;alice&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bob&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// also runs infinitely for the same reasons as above&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newUser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;userData&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;userData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;friends&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;charlie&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;setUserData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;userData&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The solution lies in how we call the set state functions (in the prior code
example, &lt;code&gt;setUserData&lt;/code&gt; is the &amp;quot;set state&amp;quot; function). There are two forms to
these functions:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;setUserData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;setUserData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;oldUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newUser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; newUser&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first takes the new value and sets it. The second takes &lt;em&gt;a function that is
called with the old value&lt;/em&gt; and is expected &lt;em&gt;to return the new value&lt;/em&gt;. Let&#39;s take
the previous &lt;code&gt;useEffect&lt;/code&gt; code example and update it to use the second form of
the set state function:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;userData&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setUserData&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;alice&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bob&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// doesn&#39;t run infinitely! 👌&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;setUserData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;oldUser&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newUser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;oldUser&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;oldUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;friends&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;charlie&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; newUser&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do you notice what&#39;s different here? We no longer have to depend on &lt;code&gt;userData&lt;/code&gt;,
because we read it from the callback function that we give to the set state
function! This means that our &lt;code&gt;useEffect&lt;/code&gt; call is free to modify and set the new
user data without fear of recursion because it reads the old value by being
given it via the set state function. Therefore we can lose it from our
&lt;code&gt;useEffect&lt;/code&gt; dependencies array, meaning that &lt;code&gt;useEffect&lt;/code&gt; won&#39;t rerun when it
changes!&lt;/p&gt;
&lt;p&gt;My experience of this was that once I spotted this trick it made the &lt;code&gt;useEffect&lt;/code&gt;
hook really click in my head. I&#39;ve come to use the set state function variant
much more frequently - in fact, nearly exclusively inside &lt;code&gt;useEffect&lt;/code&gt; calls, and
I recommend giving it a go.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Converting a JS library to TypeScript: Part 3</title>
    <link href="http://www.jackfranklin.co.uk/blog/test-data-bot-in-typescript-part-3/"/>
    <updated>2019-06-28T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/test-data-bot-in-typescript-part-3/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;If you missed the prior videos, you can find them here:
&lt;a href=&quot;http://www.jackfranklin.co.uk/typescript-videos-test-data-bot/&quot;&gt;Part 1&lt;/a&gt; and
&lt;a href=&quot;http://www.jackfranklin.co.uk/test-data-bot-in-typescript-part-2/&quot;&gt;Part 2&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Today we&#39;re implementing more of test-data-bot&#39;s API in TypeScript and diving
into using 3rd party libraries, specifically the FakerJS library. We&#39;ll see how
best to think about and model types by recognising a situation where our first
typed approach has failed to provide clarity, and see how time thinking about
remodelling types really pays off.&lt;/p&gt;
&lt;p&gt;You can watch it on YouTube, either by
&lt;a href=&quot;https://www.youtube.com/watch?v=3uK52uLEjJs&amp;amp;feature=youtu.be&quot;&gt;clicking here to view it directly&lt;/a&gt;
or using the embedded player below. I filmed the video in 1080p so it should be
crystal clear 👌.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/3uK52uLEjJs&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
  </entry>
  
  <entry>
    <title>Structuring React applications</title>
    <link href="http://www.jackfranklin.co.uk/blog/structuring-react-applications/"/>
    <updated>2019-07-08T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/structuring-react-applications/</id>
    <content type="html">&lt;p&gt;One of the best features of React is that it doesn&#39;t force much convention and
leaves a lot of decisions up to the developer. This is different from say,
EmberJS or Angular, which provide more out of the box for you, including
conventions on where and how different files and components should be named.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;My personal preference is the React approach as I like the control, but there
are many benefits to the Angular approach too. This comes down to what you and
your team prefer to be working with.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Over the years I&#39;ve been working with React I&#39;ve tried many different ways of
structuring my applications. Some of these ideas turned out to be be better than
others, so in today&#39;s post I am going to share all the things that have worked
well for me and hopefully they will help you too.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is not written as the &amp;quot;one true way&amp;quot; to structure your apps: feel free to
take this and change it to suit you, or to disagree and stick to what you&#39;re
working with. Different teams building different applications will want to do
things differently.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&#39;s important to note that if you loaded up the
&lt;a href=&quot;https://www.thread.com/&quot;&gt;Thread&lt;/a&gt; frontend, you would find places where all of
these rules are broken! Any &amp;quot;rules&amp;quot; in programming should be thought of as
guidelines - it&#39;s hard to create blanket rules that always make sense, and you
should have the confidence to stray from the rules if you think it&#39;s going to
improve the quality of what you&#39;re working on.&lt;/p&gt;
&lt;p&gt;So, without further ado, here&#39;s all I have to say on structuring React
applications, in no particular order.&lt;/p&gt;
&lt;h2&gt;Don&#39;t worry too much&lt;/h2&gt;
&lt;p&gt;This might seem like an odd point to get started on but I genuinely mean it when
I say that I think the biggest mistake people make is to stress too much about
this. This is especially true if you&#39;re starting a new project: it&#39;s impossible
to know the best structure as you create your first &lt;code&gt;index.jsx&lt;/code&gt; file. As it
grows you should naturally end up with some file structure which will probably
do the job just fine, and you can tweak it as pain points start to arise.&lt;/p&gt;
&lt;p&gt;If you find yourself reading this post and thinking &amp;quot;but our app doesn&#39;t do any
of these!&amp;quot; that&#39;s &lt;em&gt;not a problem&lt;/em&gt;! Each app is different, each team is
different, and you should work together to agree on a structure and approach
that makes sense and helps you be productive. Don&#39;t worry about changing
immediately how others are doing it, or what blog posts like this say is most
effective. My tactic has always been to have my own set of rules, but read posts
on how others are doing it and crib bits from it that I think are a good idea.
This means over time you improve your own approach but without any big bang
changes or reworks 👌.&lt;/p&gt;
&lt;h2&gt;One folder per main component&lt;/h2&gt;
&lt;p&gt;The approach I&#39;ve landed on with folders and components is that components
considered to be the &amp;quot;main&amp;quot; components of our system (such as a &lt;code&gt;&amp;lt;Product&amp;gt;&lt;/code&gt;
component for an e-commerce site) are placed in one folder called &lt;code&gt;components&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- src/
  - components/
    - product/
      - product.jsx
      - product-price.jsx
    - navigation/
      - navigation.jsx
    - checkout-flow/
      - checkout-flow.jsx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any small components that are only used by that component live within the same
directory. This approach has worked well because it adds some folder structure
but not so much that you end up with a bunch of &lt;code&gt;../../../&lt;/code&gt; in your imports as
you navigate. It makes the hierarchy of components clear: any with a folder
named after them are big, large parts of the system, and any others within exist
primarily to split that large component into pieces that make it easier to
maintain and work with.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whilst I do advocate for some folder structure, the most important thing is
that your files are well named. The folders are less important.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Nested folders for sub components if you prefer&lt;/h2&gt;
&lt;p&gt;One downside of the above is that you can often end up with a large folder for
one of these big components. Take &lt;code&gt;&amp;lt;Product&amp;gt;&lt;/code&gt; as an example: it will have CSS
files (more on those later), tests, many sub-components and probably other
assets like images, SVG icons, and more, all in the one folder.&lt;/p&gt;
&lt;p&gt;I actually don&#39;t mind that, and find that as long as the file is named well and
is discoverable (mostly via the fuzzy finder in my editor), the folder structure
is less important.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;🔥 Hot take: Most people create way too many folders in their projects. Introducing 5 levels of nested folder structure makes things harder to find, not easier.&lt;br&gt;&lt;br&gt;&amp;quot;Organizing&amp;quot; things doesn&amp;#39;t actually make your code better or make you more productive 👀&lt;/p&gt;&amp;mdash; Adam Wathan (@adamwathan) &lt;a href=&quot;https://twitter.com/adamwathan/status/1145109572081860610?ref_src=twsrc%5Etfw&quot;&gt;June 29, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;If you would like more structure though it&#39;s easy to simply move the
sub-components into their own respective folders:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- src/
  - components/
    - product/
      - product.jsx
      - ...
      - product-price/
        - product-price.jsx
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Tests alongside source code&lt;/h2&gt;
&lt;p&gt;Let&#39;s start the points with an easy one: keep your test files next to your
source files. I&#39;ll dive into more detail on how I like to structure all my
components so their code is next to each other, but I&#39;ve found my preference on
tests is to name them identically to the source code, in the same folder, but
with a &lt;code&gt;.test&lt;/code&gt; suffix:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auth.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auth.test.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main benefits of this approach are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it&#39;s easy to find the test file, and easy at a glance to see if there are even
tests for the file you&#39;re working on&lt;/li&gt;
&lt;li&gt;all imports that you need are easier: no navigating out of a &lt;code&gt;__tests__&lt;/code&gt;
directory to import the code you want to test. It&#39;s as easy as
&lt;code&gt;import Auth from &#39;./auth&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we ever have any test data that we use for our tests - mocking an API call,
for example - we&#39;ll put it in the same folder too. It feels very productive to
have everything you could ever need available right in the same folder and to
not have to go hunting through a large folder structure to find that file you&#39;re
sure exists but can&#39;t quite remember the name of.&lt;/p&gt;
&lt;h2&gt;CSS Modules&lt;/h2&gt;
&lt;p&gt;I&#39;m a big fan of &lt;a href=&quot;https://css-tricks.com/css-modules-part-1-need/&quot;&gt;CSS Modules&lt;/a&gt;
and we&#39;ve found them great for writing modularised CSS in our components.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#39;m also a big fan of &lt;a href=&quot;https://www.styled-components.com/&quot;&gt;styled-components&lt;/a&gt;,
but found at work with many contributors using actual CSS files has helped
people feel comfortable working with them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As you might have guessed, our CSS files go alongside our React components, too,
in the same folder. It&#39;s really easy to jump between the files and understand
exactly which class is doing what.&lt;/p&gt;
&lt;p&gt;The broader point here is a running theme through this blog post: keep all your
component code close to each other. The days of having individual folders for
CSS, JS, icons, tests, are done: they made it harder to move between related
files for no apparent gain other than &amp;quot;organised code&amp;quot;. Co-locate the files that
interact the most and you&#39;ll spend less time folder hopping and more time coding
👌.&lt;/p&gt;
&lt;p&gt;We even built a
&lt;a href=&quot;https://thread.engineering/2019-03-30-css-modules-strict/&quot;&gt;strict CSS Modules Webpack loader&lt;/a&gt;
to aid our developer workflow: it looks to see what classnames are defined and
sends a loud error to the console if you reference one that doesn&#39;t exist.&lt;/p&gt;
&lt;h2&gt;Mostly one component per file&lt;/h2&gt;
&lt;p&gt;In my experience people stick far too rigidly to the rule that each file should
have only one React component defined within it. Whilst I subscribe to the idea
that you don&#39;t want too large components in one file (just think how hard it
would be to name that file!), there&#39;s nothing wrong with pulling a small
component out if it helps keep the code clear, and remains small enough that it
makes little sense to add the overhead of extra files.&lt;/p&gt;
&lt;p&gt;For example, if I was building a &lt;code&gt;&amp;lt;Product&amp;gt;&lt;/code&gt; component, and needed a tiny bit of
logic for showing the price, I might pull that out:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; price&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; currency &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;currency&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;formatPrice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;price&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// imagine lots of code here!&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Price price&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;price&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; currency&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currency&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;loads more stuff&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The nice thing about this is you don&#39;t create another file and you keep that
component private to &lt;code&gt;Product&lt;/code&gt;. Nothing can possibly import &lt;code&gt;Price&lt;/code&gt; because we
don&#39;t expose it. This means it&#39;ll be really clear to you about when to take the
step of giving &lt;code&gt;Price&lt;/code&gt; its own file: when something else needs to import it!&lt;/p&gt;
&lt;h2&gt;Truly generic components get their own folder&lt;/h2&gt;
&lt;p&gt;One step we&#39;ve taken recently at work is to introduce the idea of generic
components. These will eventually form our design system (which we hope to
publish online) but for now we&#39;re starting small with components such as
&lt;code&gt;&amp;lt;Button&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Logo&amp;gt;&lt;/code&gt;. A component is &amp;quot;generic&amp;quot; if it&#39;s not tied to any part
of the site, but is considered a building block of our UI.&lt;/p&gt;
&lt;p&gt;These live within their own folder (&lt;code&gt;src/components/generic&lt;/code&gt;) and the idea
behind this is that it&#39;s very easy to see all of the generic components we have
in one place. Over time as we grow we&#39;ll add a styleguide (we are big fans of
&lt;a href=&quot;https://github.com/styleguidist/react-styleguidist&quot;&gt;react-styleguidist&lt;/a&gt;) to
make this even easier.&lt;/p&gt;
&lt;h2&gt;Make use of import aliasing&lt;/h2&gt;
&lt;p&gt;Whilst our relatively flat structure limits the amount of &lt;code&gt;../../&lt;/code&gt; jumping in
our imports, it&#39;s hard to avoid having any at all. We use the
&lt;a href=&quot;https://github.com/tleunen/babel-plugin-module-resolver&quot;&gt;babel-plugin-module-resolver&lt;/a&gt;
to define some handy aliases to make this easier.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can also do this via Webpack, but by using a Babel plugin the same imports
can work in our tests, too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We set this up with a couple of aliases:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./src/components&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&#39;^generic/([&#92;&#92;w_]+)&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./src/components/generic/&#92;&#92;1/&#92;&#92;1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first is straight forward: it allows any component to be imported by
starting the import with &lt;code&gt;components&lt;/code&gt;. So rather than:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Product &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;../../components/product/product&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can instead do:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Product &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;components/product/product&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it will find the same file. This is great for not having to worry about
folder structure.&lt;/p&gt;
&lt;p&gt;That second alias is slightly more complex:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;^generic/([&#92;&#92;w_]+)&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./src/components/generic/&#92;&#92;1/&#92;&#92;1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&#39;re using a regular expression here to say &amp;quot;match any import that starts with
&lt;code&gt;generic&lt;/code&gt; (the &lt;code&gt;^&lt;/code&gt; ensures the import starts with &amp;quot;generic&amp;quot;), and capture what&#39;s
after &lt;code&gt;generic/&lt;/code&gt; in a group. We then map that to
&lt;code&gt;./src/components/generic/&#92;&#92;1/&#92;&#92;1&lt;/code&gt;, where &lt;code&gt;&#92;&#92;1&lt;/code&gt; is what we matched in the regex
group. So this turns:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Button &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;generic/button&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Into:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Button &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;src/components/generic/button/button&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which will find us the JSX file of the generic button component. We do this
because it makes importing these components really easy, and protects us from if
we decide to change the file structure (which we might as we grow our design
system).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Be careful with aliases! A couple to help you with common imports are great,
but more and it&#39;ll quickly start causing more confusion than the benefits it
brings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;A generic &amp;quot;lib&amp;quot; folder for utilities&lt;/h2&gt;
&lt;p&gt;I wish I could get back all the hours I spent trying to find the perfect
structure for all my non-component code. I split them up into utilities,
services, helpers, and a million more names that I can&#39;t even remember. My
approach now is much more straightforward: just put them all in one &amp;quot;lib&amp;quot;
folder.&lt;/p&gt;
&lt;p&gt;Long term, this folder might get so large that you want to add structure, but
that&#39;s OK. &lt;em&gt;It&#39;s always easier to add extra structure than remove superfluous
structure&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;lib&lt;/code&gt; folder at Thread has about 100 files in it, split roughly 50/50
between tests and implementation. And it hasn&#39;t once been hard to find the file
I&#39;m looking for. With fuzzy file finders in most editors, I can just type
&lt;code&gt;lib/name_of_thing&lt;/code&gt; and I&#39;ll find exactly what I want nearly every time.&lt;/p&gt;
&lt;p&gt;We&#39;ve also added an alias to make importing easier:
&lt;code&gt;import formatPrice from &#39;lib/format_price&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Don&#39;t be afraid of flat folders with lots of files in. It&#39;s often all you need.&lt;/p&gt;
&lt;h2&gt;Hide 3rd party libraries behind your own API so they are easily swappable&lt;/h2&gt;
&lt;p&gt;I&#39;m a big fan of &lt;a href=&quot;https://sentry.io/welcome/&quot;&gt;Sentry&lt;/a&gt; and have used it many
times across the backend and the frontend to capture and get notified of
exceptions. It&#39;s a great tool that has helped us become aware of bugs on the
site very quickly.&lt;/p&gt;
&lt;p&gt;Whenever I implement a 3rd party library I&#39;m thinking about how I can make it
easy to replace should we need to. Often we don&#39;t need to - in the case of
Sentry we are very happy - but it&#39;s good to think about how you would move away
from one service, or swap it for another, just in case.&lt;/p&gt;
&lt;p&gt;The best approach for this is to provide your own API around the underlying
tool. I like to create a &lt;code&gt;lib/error-reporting.js&lt;/code&gt; module, which exposes an
&lt;code&gt;reportError()&lt;/code&gt; function. Under the hood this uses Sentry, but other than in
&lt;code&gt;lib/error-reporting.js&lt;/code&gt;, there is no direct import of the Sentry module. This
means that swapping Sentry for another tool is really easy - I change one file
in one place, and as long as I keep the public API the same, no other files need
know.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A module&#39;s public API is all the functions it exposes, and their arguments.
This is also known as a module&#39;s public interface.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Always use &lt;code&gt;prop-types&lt;/code&gt; (or TypeScript/Flow)&lt;/h2&gt;
&lt;p&gt;Whenever I&#39;m programming I&#39;m thinking about the three versions of myself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Past Jack, and the (questionable at times!) code he wrote&lt;/li&gt;
&lt;li&gt;Current Jack, and what code I&#39;m writing right now&lt;/li&gt;
&lt;li&gt;Future Jack, and how I can write code now that makes his life as easy as
possible later on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This sounds a bit silly but I&#39;ve found it a useful way to frame my thinking
around approaches: &lt;em&gt;how is this going to feel in six months time when I come
back to it?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One easy way to make current and future versions of yourself more productive is
to document the prop-types that components use! This will save you time in the
form of typos, misremembering how a certain prop is used, or just completely
forgetting that you need to pass a certain prop. The
&lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prop-types.md&quot;&gt;&lt;code&gt;eslint-react/prop-types&lt;/code&gt; rule&lt;/a&gt;
comes in handy for helping remind us, too.&lt;/p&gt;
&lt;p&gt;Going one step further: try to be specific about your prop-types. It&#39;s easy to
do this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;blogPost&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But far more helpful if you do this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;blogPost&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// and so on&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The former will do the bare minimum of checks; the latter will give you much
more useful information if you miss one particular field in the object.&lt;/p&gt;
&lt;h2&gt;Don&#39;t reach for libraries until you need them&lt;/h2&gt;
&lt;p&gt;This advice is more true now with the
&lt;a href=&quot;http://www.jackfranklin.co.uk/refactoring-to-react-hooks/&quot;&gt;release of React hooks&lt;/a&gt; than it ever has been
before. I&#39;ve been working on a large rebuild of part of
&lt;a href=&quot;https://www.thread.com/&quot;&gt;Thread&#39;s site&lt;/a&gt; and decided to be extra particular about
including 3rd party libraries. My hunch was that with hooks and some of my own
utilities I could get pretty far down the road before needing to consider
anything else, and (unusually! 😃) it turned out that my hunch was correct.
&lt;a href=&quot;https://kentcdodds.com/blog/application-state-management-with-react&quot;&gt;Kent has written about this in his post &amp;quot;Application State Management with React&amp;quot;&lt;/a&gt;
but you can get a long way these days with some hooks and React&#39;s built in
context functionality.&lt;/p&gt;
&lt;p&gt;There is certainly a time and a place for libraries like Redux; my advice here
isn&#39;t to completely shun such solutions (and nor should you prioritise moving
away from it if you use it at the moment) but just to be considered when
introducing a new library and the benefits it provides.&lt;/p&gt;
&lt;h2&gt;Avoid event emitters&lt;/h2&gt;
&lt;p&gt;Event emitters are a design pattern I used to reach for often to allow for two
components to communicate with no direct link between them.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// in component one&lt;/span&gt;&lt;br&gt;emitter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;user_add_to_cart&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// in component two&lt;/span&gt;&lt;br&gt;emitter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;user_add_to_cart&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// do something&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My motivation for using them was that the components could be entirely decoupled
and talk purely over the emitter. Where this came back to bite me is in the
&amp;quot;decoupled&amp;quot; part. Although you may &lt;em&gt;think&lt;/em&gt; these components are decoupled, I
would argue they are not, they just have a dependency that&#39;s incredibly
implicit. It&#39;s implicit specifically because of what I thought was the benefit
of this pattern: the components don&#39;t know about each other.&lt;/p&gt;
&lt;p&gt;It&#39;s true that if this example was in Redux it would share some similarities:
the components still wouldn&#39;t be talking directly to each other, but the
additional structure of a named action, along with the logic for what happens on
&lt;code&gt;user_add_to_cart&lt;/code&gt; living in the reducer, makes it easier to follow.
Additionally the Redux developer tools makes it easier to hunt down an action
and where it came from, so the extra structure of Redux here is a benefit.&lt;/p&gt;
&lt;p&gt;After working on many large codebases that are full of event emitters, I&#39;ve seen
the following things happen regularly:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Code gets deleted and you have emitters sending events that are never
listened to.&lt;/li&gt;
&lt;li&gt;Or, code gets deleted and you have listeners listening to events that are
never sent.&lt;/li&gt;
&lt;li&gt;An event that someone thought wasn&#39;t important gets deleted and a core bit of
functionality breaks.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of these are bad because they lead to a &lt;em&gt;lack of confidence&lt;/em&gt; in your code.
When developers are unsure if some code can be removed, it&#39;s normally left in
place. This leads to you accumulating code that may or may not be needed.&lt;/p&gt;
&lt;p&gt;These days I would look to solve this problem either using React context, or by
passing &lt;a href=&quot;https://kentcdodds.com/blog/prop-drilling&quot;&gt;callback props around&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Make tests easy with domain specific utilities&lt;/h2&gt;
&lt;p&gt;We will end with a final tip of testing your components (PS:
&lt;a href=&quot;http://www.jackfranklin.co.uk/testing-react-enzyme-jest/&quot;&gt;I wrote a course on this!&lt;/a&gt;): build out a suite of
test helper functions that you can use to make testing your components easier.&lt;/p&gt;
&lt;p&gt;For example, I once built an app where the user&#39;s authentication status was
stored in a small piece of context that a lot of components needed. Rather than
do this in every test:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; context &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; wrapper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;UserAuth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Provider value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ComponentUnderTest &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;UserAuth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Provider&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I created a small helper:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; wrapper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mountWithAuth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ComponentUnderTest&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This has multiple benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;each test is cleaned up and is very clear in what it&#39;s doing: you can tell
quickly if the test deals with the logged in or logged out experience&lt;/li&gt;
&lt;li&gt;if our auth implementation changes I can update &lt;code&gt;mountWithAuth&lt;/code&gt; and all my
tests will continue to work: I&#39;ve moved our authentication test logic into one
place.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don&#39;t be afraid to create a lot of these helpers in a &lt;code&gt;test-utils.js&lt;/code&gt; file that
you can rely upon to make testing easier.&lt;/p&gt;
&lt;h2&gt;In conclusion&lt;/h2&gt;
&lt;p&gt;In this post I&#39;ve shared a bunch of tips from my experiences that will help your
codebase stay maintainable and more importantly &lt;em&gt;enjoyable&lt;/em&gt; to work on as it
grows. Whilst every codebase has its rough edges and technical debt there are
techniques we can use to lessen the impact of it and avoid creating it in the
first place. As I said right at the start of this post, you should take these
tips and mould them to your own team, codebase, and preferences. We all have
different approaches and opinions when it comes to structuring and working on
large apps. I&#39;d love to hear other tips you have: you can tweet me on
&lt;a href=&quot;https://www.twitter.com/jack_franklin&quot;&gt;@Jack_Franklin&lt;/a&gt;, I&#39;d love to chat.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Saving manual work with babel-plugin-macros</title>
    <link href="http://www.jackfranklin.co.uk/blog/saving-manual-work-with-babel-macro/"/>
    <updated>2019-07-09T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/saving-manual-work-with-babel-macro/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/kentcdodds/babel-plugin-macros&quot;&gt;babel-plugin-macros&lt;/a&gt; is a
project that I&#39;ve followed with interest even though I&#39;d never had a chance to
use it. Today that changed and I wanted to share my use case and my very
positive experience using it.&lt;/p&gt;
&lt;h2&gt;What is babel-plugin-macros?&lt;/h2&gt;
&lt;p&gt;The key feature of a Babel Macro is that they run &lt;em&gt;at compile time&lt;/em&gt;. Rather than
writing JavaScript that gets bundled and executed in the browser, writing
JavaScript via babel-plugin-macros lets you run code at compile time. This means
that the code is executed &lt;em&gt;on your computer when you bundle&lt;/em&gt;, not by your users
when they visit your website.&lt;/p&gt;
&lt;p&gt;Most commonly these macros will either calculate some value (one that you can
and need at compilation time, not at runtime in the browser), or generate some
other code that runs in the browser.&lt;/p&gt;
&lt;p&gt;As an example, once configured (we&#39;ll get to that in a moment), you can use
&lt;a href=&quot;https://www.npmjs.com/package/preval.macro&quot;&gt;preval.macro&lt;/a&gt; to easily evaluate
some code at compile time:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; preval &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;preval.macro&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; twoPlusTwo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; preval&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;module.exports = 2 + 2&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will be executed at compilation time, and the code that ships in your
bundle looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; twoPlusTwo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;But, why is this useful?&lt;/h2&gt;
&lt;p&gt;The example above is ultimately not that useful - I think we all trust browsers
to be able to add two and two at runtime. Today I came across a problem at work
that I solved with a macro which made my job much easier.&lt;/p&gt;
&lt;p&gt;At &lt;a href=&quot;https://www.thread.com/&quot;&gt;Thread&lt;/a&gt; we sell clothes. Part of the site allows
users to explore our entire product listing by filtering it down to what they
are after. One of the things they can filter by is &amp;quot;sub category&amp;quot;: this is
specific types of clothes within a broader category. For example, for the
category &amp;quot;Shirts&amp;quot;, we have sub categories of &amp;quot;Plain shirts&amp;quot;, &amp;quot;Formal shirts&amp;quot;,
&amp;quot;Denim shirts&amp;quot;, and so on. The feature I&#39;m working on adds an image to each of
these sub categories in the UI so that people who might not have heard of the
terminology can still recognise the category (before working in fashion I had no
idea what a &amp;quot;chambray&amp;quot; shirt was!).&lt;/p&gt;
&lt;p&gt;One of the designers on the team sent me all the images, and there are &lt;em&gt;a lot&lt;/em&gt;.
We have 50+ sub categories across all products and I had two choices for hooking
up each image to the sub category:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Just use an image take and hard code the path:&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; source &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/media/images/sub-categories/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;subCategory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;slug&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Manually create a map of &lt;code&gt;sub category slug =&amp;gt; image URL&lt;/code&gt;. This would mean
manually moving and importing 50+ images and hooking them into data from our
API.&lt;/li&gt;
&lt;li&gt;Explore a solution that let me automatically load in the images and not have&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unsurprisingly, I picked option three, and the game was on!&lt;/p&gt;
&lt;h2&gt;Avoiding the basic solution&lt;/h2&gt;
&lt;p&gt;Just to add a bit of colour to why I avoided what on paper is the easiest
solution:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;br&gt;  src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/media/images/sub-categories/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;subCategory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;slug&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  alt&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;subCategory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For us this approach has a major downside: we can no longer use Webpack and
ES2015 imports to manage all our assets. We have Webpack configured to take our
images and move them into the right place, and I didn&#39;t want to have to special
case one folder of images just to make using them a little bit easier.&lt;/p&gt;
&lt;h2&gt;Setting up babel-plugin-macros&lt;/h2&gt;
&lt;p&gt;You might think that the macros need some complex setup but nope, it&#39;s as easy
as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;yarn add babel-plugin-macros&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;&#39;macros&#39;&lt;/code&gt; to your plugins list in your babel config.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that&#39;s it 👌.&lt;/p&gt;
&lt;h2&gt;Sub category slugs&lt;/h2&gt;
&lt;p&gt;Each sub category is an object with a few keys:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Denim shirts&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;slug&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;denim-shirts&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;abc123&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thankfully I&#39;d already discussed with our designer that we&#39;d name the images
based on the slugs, so I knew that I had all the images mapped and ready. This
helped a lot and it&#39;s something I&#39;d recommend when working with a designer who
is creating a bunch of assets: chat ahead of time to figure out the best format
and naming scheme for sharing the results.&lt;/p&gt;
&lt;h2&gt;import-all.macro&lt;/h2&gt;
&lt;p&gt;The final piece of the puzzle is the
&lt;a href=&quot;https://github.com/kentcdodds/import-all.macro&quot;&gt;import-all.macro package&lt;/a&gt;. This
lets me generate a list of imports from a folder &lt;em&gt;at compile time&lt;/em&gt;. For example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; importAll &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;import-all.macro&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; importAll&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./files/*.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gets turned into something like this &lt;em&gt;at compile time&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; _filesAJs &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./files/a.js&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; _filesBJs &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./files/b.js&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&#39;./files/a.js&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; _filesAJs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&#39;./files/b.js&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; _filesBJs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is exactly what we want! We can use &lt;code&gt;importAll&lt;/code&gt; to create an object of all
the file paths and the image URLs - We have Webpack set up so that when we
import an image we get back the full path of where that image will be put during
build:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; image &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./image.jpg&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// image =&gt; /media/images/image.jpg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once I&#39;d figured this out, I was ready to write some code 🎉.&lt;/p&gt;
&lt;h2&gt;Dealing with nested folders&lt;/h2&gt;
&lt;p&gt;To make the folder of images easier to work with we&#39;d agreed to nest sub
categories under a folder of that category. This meant that I needed to do a bit
of data manipulation to get exactly what I wanted, because the file name
returned from &lt;code&gt;import-all.macro&lt;/code&gt; would have that extra folder in:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; images &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; importAll&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./category_images/**/*.png&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// images looks like:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&#39;./category_images/shirts/denim-shirt.png&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/media/images/category_images/shirts/denim-shirt.png&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And what I wanted to end up with was a map where the key is purely the slug:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// this is what we want&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&#39;denim-shirt&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/media/images/category_images/shirts/denim-shirt.png&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This was a case of doing a bit of work on the object that &lt;code&gt;import-all.macro&lt;/code&gt;
generates for us:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; importAll &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;import-all.macro&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; allCategoryImages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; importAll&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./category_images/**/*.png&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; imagesMap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;allCategoryImages&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fileName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; imageUrl&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// image = &quot;./category_images/accessories/bags.png&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// so split and pick out just the &quot;bags.png&quot; bit&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; subCategory &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fileName&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// remove the extension and return  [key, value] pair of [slug, imageURL]&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;subCategory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;&#92;.png&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; imageUrl&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; imagesMap&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with that, we&#39;re done! Now in our React component we can fetch the image
from our Map:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; imageUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; imagesMap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subCategory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;slug&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a bonus, we can also easily add some logging to alert us to if a sub category
is missing an image:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;imageUrl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subCategory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;slug&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;logError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;...&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The solution that babel-plugin-macros lets us create is elegant and easy to work
with. It will also automatically deal with new images and new sub categories and
it&#39;s easy for non-engineers to update a sub category image without needing any
help from us - they can just dump the new image in the right place and
everything will update. For tasks like this in the future we will definitely be
reaching for it again and I recommend giving it a go next time you&#39;re faced with
a much of manual lifting that feels very much like it could be automated!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Making impossible states impossible: data structures in React</title>
    <link href="http://www.jackfranklin.co.uk/blog/avoiding-impossible-states-react/"/>
    <updated>2019-07-22T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/avoiding-impossible-states-react/</id>
    <content type="html">&lt;p&gt;One of the things I like to spend a lot of time on is data structures. It&#39;s one
of the first things I think about when building something: what data do I have
to work with, and what&#39;s the best format for it to be in?&lt;/p&gt;
&lt;p&gt;In my experience if you can get the data format correct everything else should
fall into place; a data structure that allows you to read and manipulate the
data easily is going to be much nicer to work with. You want the data structure
to do as much of the work for you as it can and it should work with you and not
feel like it gets in your way.&lt;/p&gt;
&lt;p&gt;Interestingly, I think because of the strictly typed nature of the languages, I
find myself taking this approach much more when I&#39;m working with Elm or
TypeScript: something about the presence of types leads me to think about
defining the types I&#39;ll use through my application - and this leads to me
thinking about data structures. Today we&#39;re going to look at a JavaScript
example where we&#39;ll strongly consider the datatype that we use to solve a
problem.&lt;/p&gt;
&lt;h2&gt;Making impossible states impossible&lt;/h2&gt;
&lt;p&gt;There is a very popular Elm talk titled
&lt;a href=&quot;https://www.youtube.com/watch?v=IcgmSRJHu_8&quot;&gt;&amp;quot;Making Impossible States Impossible&amp;quot;&lt;/a&gt;
by &lt;a href=&quot;https://twitter.com/rtfeldman&quot;&gt;Richard Feldman&lt;/a&gt; which has become my
reference of choice for this topic. I highly recommend watching the video - even
if you don&#39;t like or know Elm - because the approach transcends any given
language. The example for this blog post is also taken from that talk because
it&#39;s perfect for what I want to discuss, so thank you Richard!&lt;/p&gt;
&lt;h2&gt;Tabs&lt;/h2&gt;
&lt;p&gt;Every frontend developer has built a tabbed interface at one point in their
lives, and it&#39;s these that we&#39;ll look at today. We&#39;ll have some tabs at the top
of the page and then show the content for the currently active tab below it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Today I&#39;ll be using React for the UI but this is not important for the topic -
feel free to swap React for your framework of choice 👍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We have two bits of information that we have as data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all the tabs: their title and their content&lt;/li&gt;
&lt;li&gt;some data to know which tab is active and therefore which tab to highlight and
which content to show&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feel free to think for a moment about how you&#39;d model this data.&lt;/p&gt;
&lt;p&gt;This is my first pass, and I&#39;m confident that I&#39;m not the only one who would
take this approach:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;activeIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setActiveIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tabs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Tab One&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;This is tab one&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Tab Two&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;This is tab two&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Tab Three&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;This is tab three&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#39;m hardcoding &lt;code&gt;tabs&lt;/code&gt; here but let&#39;s imagine in reality we&#39;re building a Tab
library that others will consume and pass in the tabs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The critical question: what impossible states does this data structure permit?&lt;/h2&gt;
&lt;p&gt;When we&#39;re thinking about data structures and how to improve them this is the
question you want to be asking yourself. Take the data structure that you&#39;ve
come up with and see if you can set values that cause impossible states. For
example, I can:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;activeIndex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setActiveIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// omitted the contents to save space&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tabs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this state I&#39;ve set the &lt;code&gt;activeIndex&lt;/code&gt; to &lt;code&gt;4&lt;/code&gt; (which would mean the 5th tab as
arrays are zero-indexed in JavaScript), but we only have three tabs. So this
state is impossible!&lt;/p&gt;
&lt;p&gt;At this point you might be thinking that it doesn&#39;t matter that this state
&lt;em&gt;could&lt;/em&gt; exist, because we can write code to ensure that it can&#39;t exist. And that
is true: we could write code to ensure that &lt;code&gt;activeIndex&lt;/code&gt; never gets set a value
that is out of bounds. And we could ensure all our click event listeners for our
tabs only set valid &lt;code&gt;activeIndex&lt;/code&gt; values. But if we had a data structure that
didn&#39;t allow this impossible state, we &lt;em&gt;wouldn&#39;t have to write any of the code
we just spoke about&lt;/em&gt;. And that&#39;s the value of thinking of data structures that
ban impossible states: they remove even the slightest chance of certain bugs
ever occurring because &lt;em&gt;the data doesn&#39;t allow them to&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In JavaScript land technically every data structure we come up with will allow
an invalid state because we could set any value to &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;. This
is where the typed languages have an edge: when you can ensure at compile time
that a certain value must exist, you can create data structures that truly
make impossible states impossible. For today&#39;s post we&#39;ll take the leap of
hoping that values that we expect to be present are indeed present.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whilst it&#39;s very hard to come up with a data structure that avoids &lt;em&gt;any&lt;/em&gt;
impossible state, we can work on creating data structures that avoid &lt;em&gt;obviously
invalid states&lt;/em&gt;, such as the problem above.&lt;/p&gt;
&lt;h2&gt;An alternative data structure&lt;/h2&gt;
&lt;p&gt;So if we want to avoid the problem of the &lt;code&gt;activeIndex&lt;/code&gt; being an invalid number,
how about we remove it entirely and track which tab is active:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;activeTab&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setActiveTab&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tabs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;restOfTabs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setRestOfTabs&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tabs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this approach we split the actual tab object out and remember which one is
active. This does mean we will need a new key on each tab to know which order to
render them in, as we&#39;ve lost the nice ordered array they were in, but maybe
this is a price worth paying for this data structure. Is this better or worse
than the previous attempt? And crucially: does it allow any invalid states?&lt;/p&gt;
&lt;p&gt;If we assume that our code won&#39;t go rogue and set values to &lt;code&gt;null&lt;/code&gt; (as
previously mentioned, this is where some types and a compiler would come in
handy), it&#39;s harder to get this data into an invalid state. When a user clicks
on a tab we can swap which tab is the &lt;code&gt;activeTab&lt;/code&gt;. However there is a big red
flag to me here: two co-located &lt;code&gt;useState&lt;/code&gt; calls with very related bits of data.&lt;/p&gt;
&lt;p&gt;This data structure opens us up to problems by storing two values in the state
together. Whenever you see two state values that are tightly related you are
likely to be opening yourself up to bugs where these values get out of sync. You
can either rethink how you are modelling your data, or reach for the
&lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#usereducer&quot;&gt;&lt;code&gt;useReducer&lt;/code&gt; hook&lt;/a&gt;,
which allows you to update multiple bits of state at once.&lt;/p&gt;
&lt;p&gt;The fact that this data structure loses a key feature of our tabs - their
ordering - is also a red flag. We&#39;ll have to either ask the consumer of our
module to pass in objects with an &lt;code&gt;order&lt;/code&gt; key, or do it ourselves. When you find
yourself having to mutate data to add properties you need because your data
structure doesn&#39;t provide it, that&#39;s a sign that maybe the data structure isn&#39;t
quite right.&lt;/p&gt;
&lt;h2&gt;Zip lists&lt;/h2&gt;
&lt;p&gt;Let&#39;s look at a final data structure: the zip list. The zip list breaks down a
list where we care about the active state into three parts:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// before:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tabs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;tabOne&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tabTwo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tabThree&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// after:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tabs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;tabOne&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; tabTwo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;tabThree&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The advantages of this approach over our last two are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We keep the ordering of the tabs and can easily construct an array of them
(&lt;code&gt;[...tabs.previous, tabs.current, ...tabs.next]&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;We now have to have a current tab at all times. And because we&#39;ll construct
this data structure from the initial array of tabs the user gives us, we can
be pretty confident of avoiding some of the impossible states this data
structure does allow (duplicated tabs).&lt;/li&gt;
&lt;li&gt;All our data is in one object: the previous attempt split the tabs up into
two pieces of state which could more easily get out of sync: here we&#39;ve got
just one.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Notice how we still have impossible states here: &lt;code&gt;tabs.previous&lt;/code&gt; could contain
the same tab as &lt;code&gt;tabs.current&lt;/code&gt;, which would be a bug. But because it&#39;s all in
one piece of data that we are going to write code to manipulate we can have
close control over this and those bugs are less likely than two individual
pieces of state becoming misaligned.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&#39;s start our initial zip list implementation and see how we go. I&#39;ll create a
function that takes in the initial array, sets the first item as active (in the
future we might allow the user to tell us which tab is active) and then create
our data structure:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;zipList&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;initialArray&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;initialActive&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;restOfTabs&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; initialArray&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; zip &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; initialActive&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; restOfTabs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;setActive&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;newActive&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// TODO: fill this in&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newZip &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; zip&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apiForZip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newZip&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;apiForZip&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function-variable function&quot;&gt;asArray&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;zip&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;previous&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; zip&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;zip&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function-variable function&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;tab&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; zip&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; tab&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;setActive&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setActive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;zip&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function-variable function&quot;&gt;activeTab&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; zip&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apiForZip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;zip&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When creating custom data structures the key is to &lt;em&gt;hide the raw data behind a
nice API&lt;/em&gt;. If you expose the raw data it&#39;s hard to change that structure because
people might rely on it, and in a mutable language world like JavaScript people
could reach in and change your data in whatever way they like. Notice how the
&lt;code&gt;zip&lt;/code&gt; object is not exposed and instead we provide a small API.&lt;/p&gt;
&lt;p&gt;In our React component we can still map over tabs by doing
&lt;code&gt;tabs.asArray().map(...)&lt;/code&gt;, and we can determine the active tab via the
&lt;code&gt;isActive()&lt;/code&gt; function. The &lt;code&gt;activeTab()&lt;/code&gt; function lets us fetch the active tab
so we can show its content on the page. The final piece of the jigsaw is
&lt;code&gt;setActive&lt;/code&gt;, which needs a bit more thought. This is where we are going to write
more code than if we&#39;d have taken the &lt;code&gt;activeIndex&lt;/code&gt; approach, but we&#39;re trading
that off against the higher confidence we have in this data structure.
&lt;em&gt;Programming is all about trade-offs, after all!&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So we can move the tabs in our component into a piece of state:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;tabs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setTabs&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;zipList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Tab One&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;This is tab one&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Tab Two&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;This is tab two&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Tab Three&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;This is tab three&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we can use the &lt;code&gt;setTabs&lt;/code&gt; function to update the state when a user clicks on
a tab (ensuring that our zip list&#39;s API returns a new zip list from the
&lt;code&gt;setActive&lt;/code&gt; call):&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  tabs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;asArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;tab&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token attr-name&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;tab&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTabs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tabs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setActive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tab&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;tabs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tab&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;border-red-800&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;border-gray-800&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br&gt;      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;tab&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;setActive&lt;/code&gt; function takes a bit of thought to get right in terms of
updating the values. Let&#39;s say we have this state:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; zip &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;tabOne&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tabTwo&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; tabThree&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we click on &lt;code&gt;tabOne&lt;/code&gt;. We need to make the data structure become:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; zip &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; tabOne&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;tabTwo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tabThree&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To do this we can follow a set of steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Figure out where the new active tab is: &lt;code&gt;previous&lt;/code&gt; or &lt;code&gt;next&lt;/code&gt;. For this
example it&#39;s in the &lt;code&gt;previous&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;We now need to split &lt;code&gt;previous&lt;/code&gt; into two lists: the previous items that
appear &lt;em&gt;before&lt;/em&gt; the new active tab, and the items that appear &lt;em&gt;after&lt;/em&gt; it. We
need this because the ones that appear before need to &lt;em&gt;stay in the previous
list&lt;/em&gt;, but the items that appear after the item that&#39;s about to become active
need to &lt;em&gt;go into the next list&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;We can then construct the new zip:&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newZip &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;previousItemsBeforeActive&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; newActive&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;previousItemsAfterActive&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; zip&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;zip&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And with that we now have a functioning set of tabs with a zip list
implementation 👍.&lt;/p&gt;
&lt;h2&gt;That was...a lot of work?!&lt;/h2&gt;
&lt;p&gt;That might feel like an awful amount of work to go through just to get some tabs
listed on the screen. And to some extent, it was! But we&#39;ve definitely gained
benefits from doing this work. Firstly, the Zip List isn&#39;t specific to tabs:
whenever you find yourself having a list of things where one is considered
active in some form, this data structure is a great one to reach for. And you
now have a reusable implementation of a zip list ready to be used whenever the
time comes.&lt;/p&gt;
&lt;p&gt;I&#39;ve lost count of the number of bugs I&#39;ve had because an &lt;code&gt;activeIndex&lt;/code&gt; type
tracker got out of sync: in our zip list we don&#39;t rely on any other data:
there&#39;s one object that controls everything about which item is active. That&#39;s
going to pay off in terms of bugs we&#39;ve avoided, for sure.&lt;/p&gt;
&lt;p&gt;Is building a data structure like this worth it &lt;em&gt;every single time&lt;/em&gt; you have
some tabs and you want to show one as active? Possibly not - that&#39;s up to you.
As always in programming, it depends. But I hope this blog post inspires you to
think more carefully about data structures and ask how you can structure them to
work with you and help rule out impossible states.&lt;/p&gt;
&lt;h2&gt;NPM Package&lt;/h2&gt;
&lt;p&gt;I have published the Zip List implementation (well, a slightly tweaked one) as
an npm package so you can use them without having to implement them! You can
find the repository &lt;a href=&quot;https://github.com/jackfranklin/zip-list/&quot;&gt;on Github&lt;/a&gt; and
install it via npm or Yarn today 🎉:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add @jackfranklin/zip-list
npm install @jackfranklin/zip-list
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>Getting started with GraphQL: what client to use?</title>
    <link href="http://www.jackfranklin.co.uk/blog/using-graphql-without-a-client/"/>
    <updated>2019-07-29T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/using-graphql-without-a-client/</id>
    <content type="html">&lt;p&gt;When I first started working with GraphQL APIs my first challenge was to decide
what GraphQL frontend library I wanted to use. I can remember spending all
morning exploring all sorts of options, from small libraries like
&lt;a href=&quot;https://www.npmjs.com/package/graphql-request&quot;&gt;graphql-request&lt;/a&gt; to slightly
larger ones like &lt;a href=&quot;https://github.com/FormidableLabs/urql&quot;&gt;urql&lt;/a&gt; and finally the
most well known like &lt;a href=&quot;https://www.apollographql.com/&quot;&gt;Apollo&lt;/a&gt;. These are all great
libraries - in fact we use urql at work - but at this point in time I was
working with a tiny GraphQL library that I&#39;d built for a side project and I
really didn&#39;t need any complexity. I think I lost a good couple of hours trying
to decide before thinking: what if I made my own?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This post is not meant to criticise libraries: they provide a bunch of
features that many applications will want and need, but if you&#39;re just getting
started, they might be overkill for your needs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Do you need a library to use GraphQL?&lt;/h2&gt;
&lt;p&gt;I had in my head this mindset that making a request to a GraphQL API was
&amp;quot;special&amp;quot; and not something that I could do with the &lt;code&gt;fetch&lt;/code&gt; API, for example.
I&#39;m not really sure where this came from but I think I&#39;d seen so many talks
about Apollo and various client libraries doing all sorts of smart things I&#39;d
ended up assuming that I&#39;d use one of those. But Apollo packs in a vast array of
features that I really didn&#39;t need on my side project. I wanted to make a
request and get the data. Concerns such as smart caching and cache invalidation
were not present for me.&lt;/p&gt;
&lt;p&gt;When you&#39;re starting to learn something it can be tempting to reach for
libraries to fill in gaps in knowledge but I highly recommend trying to avoid
doing this when possible. I&#39;m very happy that I made the decision to write my
own tiny client because it plugged gaps in my knowledge and de-mystified how a
GraphQL API works. In this post I&#39;ll talk through how to get started talking to
a GraphQL API just by using the &lt;code&gt;fetch&lt;/code&gt; API and nothing more.&lt;/p&gt;
&lt;h2&gt;A sample GraphQL API&lt;/h2&gt;
&lt;p&gt;We need a sample API for this and I&#39;ve made one that lives on Heroku:
http:faker-graphql-api.herokuapp.com/graphql. This API returns some fake people
(all data is generated by &lt;a href=&quot;https://github.com/marak/Faker.js/&quot;&gt;Faker.js&lt;/a&gt;). It lets
us query for people and get their names:&lt;/p&gt;
&lt;pre class=&quot;language-graphql&quot;&gt;&lt;code class=&quot;language-graphql&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token object&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;name&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Returns an array of ten people and their names. This is the query we&#39;re going to
use as our example today.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;My dummy API is hosted on a free Heroku instance so please be patient if it
takes some time to boot up when you request it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Making a request to a GraphQL API&lt;/h2&gt;
&lt;p&gt;It turns out there are some simple steps to follow to talk to a GraphQL
endpoint:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All requests are &lt;code&gt;POST&lt;/code&gt; requests&lt;/li&gt;
&lt;li&gt;You should pass the &lt;code&gt;Content-Type&lt;/code&gt; header as &lt;code&gt;application/json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The body of the request should contain a string which is the GraphQL query&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As long as we follow those rules we can easily use &lt;code&gt;fetch&lt;/code&gt; to talk to the API.
Let&#39;s do it!&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; api &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;http:faker-graphql-api.herokuapp.com/graphql&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; query &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      query&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;got here!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;request&lt;/code&gt; function takes an object and expects the &lt;code&gt;query&lt;/code&gt; key to contain
the raw GraphQL query. The &lt;code&gt;fetch&lt;/code&gt; API takes the URL and an object of options,
which are used to configure the request: we set &lt;code&gt;method: &#39;POST&#39;&lt;/code&gt; and the
&lt;code&gt;Content-Type&lt;/code&gt; header as discussed and then use &lt;code&gt;JSON.stringify({ query })&lt;/code&gt; to
generate the body for the request, passing in the &lt;code&gt;query&lt;/code&gt; that was passed in to
our &lt;code&gt;request&lt;/code&gt; function. Finally, the GraphQL API will return JSON so we parse
the response before returning it (I&#39;ve logged it just to aid debugging but feel
free to skip that!).&lt;/p&gt;
&lt;p&gt;With that we can make our request:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;{ people { name } }&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you should get some people back! 🎉.&lt;/p&gt;
&lt;p&gt;If you only need to make basic requests in your app you could stop here and be
done. We&#39;ve saved having to install, learn and ship in our bundle any additional
libraries. Of course this comes with less functionality - but for some projects
that might be just fine.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you do need caching and more advanced features I&#39;d highly recommend a well
tested, established library rather than rolling your own!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Supporting variables&lt;/h2&gt;
&lt;p&gt;Another feature of GraphQL is that queries can take variables. For example, the
fake API lets us find a single person by their ID:&lt;/p&gt;
&lt;pre class=&quot;language-graphql&quot;&gt;&lt;code class=&quot;language-graphql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;token definition-query function&quot;&gt;fetchPerson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token scalar&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property-query&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token property&quot;&gt;name&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To support this our API needs to pass variables through as well that it includes
in the request:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; variables&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; query &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      query&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      variables&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;got here!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now our client supports variables:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;query fetchPerson($id: Int!) {&lt;br&gt;    person(id: $id) {&lt;br&gt;      name,&lt;br&gt;    }&lt;br&gt;  }&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If this is all you need, or you&#39;re not using React for your frontend, you can
stop here. This client will be plenty good enough to keep you going as you work
with and get more familiar with GraphQL. By working with your own
implementations first you&#39;ll find you have a greater fundamental understanding
when swapping to a library, and you&#39;ll understand the features the library
provides better.&lt;/p&gt;
&lt;h2&gt;A React hook!&lt;/h2&gt;
&lt;p&gt;Finally let&#39;s see how easy it would be to wrap this up in a React hook for those
of you working with React.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&#39;re not familiar with hooks, I wrote
&lt;a href=&quot;http://www.jackfranklin.co.uk/refactoring-to-react-hooks/&quot;&gt;an introduction to them&lt;/a&gt; which will help get
you up to speed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Creating the hook is a case of wrapping our &lt;code&gt;request&lt;/code&gt; function in a
&lt;code&gt;React.useEffect&lt;/code&gt; hook and storing the response via &lt;code&gt;React.useState&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;useGraphQL&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; variables&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; query &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setData&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; variables&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; query &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;setData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;variables&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;This hook is missing some useful features like tracking if we&#39;re loading or
not, but I&#39;ll leave that as an exercise to the reader 😃&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can use this hook within a component like so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useGraphQL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;{ people { name } }&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it works! There is one gotcha though that I want to highlight. If you do
this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useGraphQL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;{ people { name } }&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&#39;ll cause an infinite loop of requests, which isn&#39;t what we want! This is
because &lt;code&gt;React.useEffect&lt;/code&gt; has &lt;code&gt;variables&lt;/code&gt; as a dependency and every time it
changes it will cause the effect to re-run. Every re-render this code runs and
&lt;code&gt;variables: {}&lt;/code&gt; creates a new object every time which means &lt;code&gt;React.useEffect&lt;/code&gt;
will re-run.&lt;/p&gt;
&lt;p&gt;We can fix this by remembering to wrap our &lt;code&gt;variables&lt;/code&gt; in a &lt;code&gt;React.useMemo&lt;/code&gt; hook
to ensure that we only recalculate the variables if we need to:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; vars &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useMemo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useGraphQL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; vars&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;{ people { name } }&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this requires you to remember to do this every time. Instead what we can do
is convert the &lt;code&gt;variables&lt;/code&gt; within our &lt;code&gt;useGraphQL&lt;/code&gt; hook to a string, via
&lt;code&gt;JSON.stringify&lt;/code&gt;, and use that as the dependency to &lt;code&gt;useEffect&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; stringifiedVars &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;variables&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; variables&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; query &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;setData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;stringifiedVars&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;❗️This isn&#39;t the best solution but it is the easiest and will serve just fine
for most projects. It&#39;s also similar to how the popular
&lt;a href=&quot;https://github.com/FormidableLabs/urql/blob/master/src/utils/keyForQuery.ts&quot;&gt;urql works&lt;/a&gt;
although that uses the
&lt;a href=&quot;https://www.npmjs.com/package/fast-json-stable-stringify&quot;&gt;fast-json-stable-stringify&lt;/a&gt;
to avoid some of the performance problems with &lt;code&gt;JSON.stringify&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Although this post has focused on GraphQL I hope that your main takeaway is to
resist diving straight for libraries. You can often get a long way with a few
lines of code you write yourself, &lt;em&gt;particularly when learning a new technology&lt;/em&gt;.
This will help your understanding of the tech that you&#39;re learning but also your
understanding of libraries: if you&#39;ve written a library yourself, however small
and straight forward, you&#39;re more likely to be able to follow how the more
complex libraries work.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A free video series on building web apps with Elm</title>
    <link href="http://www.jackfranklin.co.uk/blog/building-apps-with-elm-video-series/"/>
    <updated>2019-08-29T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/building-apps-with-elm-video-series/</id>
    <content type="html">&lt;p&gt;If you&#39;ve followed me on the internet for a while you&#39;ll know that I&#39;m a big fan
of &lt;a href=&quot;https://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; and I&#39;ve written and spoken a fair bit about it.&lt;/p&gt;
&lt;p&gt;There are some great guides for Elm out there but when I was learning I
struggled with being unable to find examples of how Elm apps were put together,
particularly as they got bigger.&lt;/p&gt;
&lt;p&gt;So, now I&#39;m a little more comfortable with Elm than I once was, I set about
recording a series that tries to show just that. My initial intentions were to
sell the videos as a course, but I&#39;ve now decided to make every single video
entirely free and available on YouTube for you to enjoy.&lt;/p&gt;
&lt;p&gt;You can get started with the playlist and watch all videos in order by
&lt;a href=&quot;https://www.youtube.com/watch?v=-1ZA3G9k0Rw&amp;amp;list=PLGDf0elkI13EJ55MbwZd98scG7BKl_n-j&quot;&gt;heading to YouTube&lt;/a&gt;
or watching here:&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/-1ZA3G9k0Rw&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;If you have any questions, Twitter is the best place to grab me :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Avoiding bugs with data structures: using Sets in JavaScript</title>
    <link href="http://www.jackfranklin.co.uk/blog/avoiding-bugs-with-javascript-sets-react/"/>
    <updated>2019-09-02T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/avoiding-bugs-with-javascript-sets-react/</id>
    <content type="html">&lt;p&gt;When working on a part of a user interface I like to constantly try to think
about potential bugs that could occur, potentially when looking at taking input
from users. Most components that take input will have code to prevent invalid
input and bugs and you can&#39;t ever avoid this, but sometimes the right data
structure can remove the amount of bugs you&#39;ll have to write code to deal with.&lt;/p&gt;
&lt;p&gt;To demonstrate this we&#39;ll be working today with a component that lets a user tag
something with tags. The GIF below shows two versions; the first has a bug and
the second doesn&#39;t. We&#39;ll talk about why in just a moment...&lt;/p&gt;
&lt;img src=&quot;http://www.jackfranklin.co.uk/code-for-posts/sets/example.gif&quot; width=&quot;500&quot;&gt;
&lt;p&gt;The great thing is that the second example &lt;em&gt;has no code to explicitly deal with
that bug&lt;/em&gt;; it uses a more appropriate data structure that makes this bug
impossible.&lt;/p&gt;
&lt;p&gt;When working with a list of data where one of the constraints is that there is
no duplication, I like to reach for a JavaScript
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;Set&lt;/a&gt;.
Sets were introduced in ES2015 and allow you to store unique data. If you try to
add some data to a set that it already has, it won&#39;t do anything. So it&#39;s
&lt;em&gt;literally impossible&lt;/em&gt; for a set to contain duplicate values, and we can
leverage this for our tags component.&lt;/p&gt;
&lt;h2&gt;Working with sets&lt;/h2&gt;
&lt;p&gt;Rather than create my tags state as an array, I instead use a set. You
initialise a set by giving it an array of items:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;tags&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setTags&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;javascript&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Be careful, &lt;code&gt;new Set(&#39;react&#39;)&lt;/code&gt; gives you a set with 5 items; &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, and so
on. You probably want &lt;code&gt;new Set([&#39;react&#39;])&lt;/code&gt; 👍.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You add an item to a set by calling the &lt;code&gt;add&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; names &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;names&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;names&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// does nothing!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Be careful though: adding to a set mutates the set. When working with React you
typically want to avoid mutating data and instead create new instances. You
could use a &lt;a href=&quot;https://github.com/immerjs/immer&quot;&gt;library such as Immer&lt;/a&gt; to make
this easier, or pass the set into the &lt;code&gt;Set&lt;/code&gt; constructor:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; names &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;alice&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;names&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;newNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;bob&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// newNames = alice, bob&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// but names is left alone&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using this within our &lt;code&gt;Tags&lt;/code&gt; component looks like so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;tags&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setTags&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;javascript&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;addTag&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;newTag&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;setTags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;oldTags&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newSet &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;oldTags&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    newSet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newTag&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; newSet&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s worth noting at this point that this code is slightly more verbose than if
we&#39;d have used an array, where we could have done:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;addTag&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;newTag&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;setTags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;oldTags&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;oldTags&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; newTag&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But if you wanted, you could make the set equivalent slightly more concise:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;addTag&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;newTag&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;setTags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;oldTags&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;oldTags&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; newTag&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;This is probably what I&#39;d do in a real app - but I&#39;ll stick with the slightly
longer example for this post as I think it&#39;s clearer if you&#39;re not super
familiar with using Sets.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you create a set with the same values in twice, only one will persist. The
code below creates a set with just one item, set to &lt;code&gt;&#39;alice&#39;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;alice&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;alice&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Rendering sets in React&lt;/h2&gt;
&lt;p&gt;There&#39;s one more gotcha with sets: they don&#39;t have common array methods like
&lt;code&gt;map&lt;/code&gt;, which is commonly used in React to map an array to a list of components:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;tags&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;tag&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;tag&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is easily solved by converting a set to an array. You can use the spread
operator to do this, or use &lt;code&gt;Array.from&lt;/code&gt;. Either works:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; set &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;alice&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;set&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// works!&lt;/span&gt;&lt;br&gt;&lt;br&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// also works!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I tend to prefer &lt;code&gt;[...set]&lt;/code&gt; as it&#39;s cleaner, but this is personal preference so
pick your favourite.&lt;/p&gt;
&lt;h2&gt;Bug avoided! 🐛&lt;/h2&gt;
&lt;p&gt;Swapping our data structure from an array to a set has completely removed the
ability for the user to ever enter duplicates because &lt;em&gt;the data structure
forbids it&lt;/em&gt;. This means we don&#39;t have to write code to filter duplicates our,
and that we don&#39;t have to write tests for it (I wouldn&#39;t test something that&#39;s
provided natively by the language) and we can focus on all the other concerns
this component has.&lt;/p&gt;
&lt;p&gt;Whenever you&#39;re working with some data that has some validation requirements or
constraints it&#39;s a good idea to pause and think if you could use a data
structure that helps provide some of those constraints out the box with no extra
effort on your part.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you enjoyed this post, you might enjoy
&lt;a href=&quot;http://www.jackfranklin.co.uk/avoiding-impossible-states-react/&quot;&gt;this post on impossible states with data structures&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  
  <entry>
    <title>Using Windows 10 and WSL for frontend web development</title>
    <link href="http://www.jackfranklin.co.uk/blog/frontend-development-with-windows-10/"/>
    <updated>2019-10-18T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/frontend-development-with-windows-10/</id>
    <content type="html">&lt;p&gt;I&#39;ve been an exclusively Mac developer ever since I bought a second hand MacBook
(remember the all white, plastic ones?). I absolutely loved it and as I got more
into software development and discovered the terminal it became hard for me to
see how I could go back to Windows.&lt;/p&gt;
&lt;p&gt;When I started my first full time engineering role the company provided a
MacBook Pro and a Cinema Display. This was so exciting! Over the next few years
I was provided exclusively with MacBook Pros to work on (which I recognise is a
fortunate position to be in).&lt;/p&gt;
&lt;p&gt;When Apple released the latest iteration of the MacBook Pro, with its touchbar
and keyboard woes, I did begin to wonder if Windows was going to end up being
something I&#39;d have to try. Reviews online and from friends and colleagues who
had these MacBooks were not positive. About a year ago I was due a new laptop
and work and was given the newest MacBook Pro, at around the same time I was
starting to think about buying a laptop myself so I didn&#39;t rely on my work
machine for personal projects. I&#39;m also an Android phone user, so I&#39;m not
invested into the Apple ecosystem as others which makes the potential swap to
Windows easier, I think.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The rest of this post is very much based on my opinions: none of this is a
recommendation on what you should do. We all have different preferences and
opinions on which hardware and software combination is best for us.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sadly I&#39;ve not found the experience of the MacBook Pro to live up to either its
&amp;quot;Pro&amp;quot; naming or its &amp;quot;Pro&amp;quot; price point. Whilst I think I&#39;m in the minority of
people who actually don&#39;t mind the butterfly keyboard I&#39;ve found the software to
have some constant issues that I&#39;ve struggled with. I&#39;ve had the MacBook
completely shut down whilst running a workshop for 40 people because it told me
it was charging the battery despite not. I have to hard reset the machine when I
try to wake it from sleep at least once or twice a week in order to get anything
beyond a blank screen (the first time it did this I thought it had broken). I&#39;ve
had regular issues with the HDMI dongle (and yes, I did pay full price for the
official Apple dongle 😢) and it not connecting properly to external screens. As
someone who does a reasonable amount of talking and teaching this has become a
real issue to the point where I considered taking a &lt;em&gt;backup laptop&lt;/em&gt; because I
didn&#39;t trust the MBP to work properly.&lt;/p&gt;
&lt;h2&gt;Windows and WSL&lt;/h2&gt;
&lt;p&gt;I&#39;d been following the work on WSL (Windows Subsystem for Linux) for some time
and found it a very compelling prospect; being able to run a Linux distribution
from within Windows could be a great way to make Windows more feasible for the
development work I do. Coupled with the
&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl&quot;&gt;VS Code WSL plugin&lt;/a&gt;,
which makes it seamless to run VS Code with files from that Linux subsystem, I
felt it could be a viable alternative.&lt;/p&gt;
&lt;h2&gt;Taking the plunge&lt;/h2&gt;
&lt;p&gt;So I decided, given my MBP frustrations, to go for it. I did some research into
machines and went for a Dell XPS, which are regularly given very high reviews
online. Some (non-engineering) colleagues at work have them and spoke highly of
the machine. It worked out at ~£1000 less than the MacBook Pro cost, which I
figured was a very good saving - but only if I could work effectively on the
machine.&lt;/p&gt;
&lt;h2&gt;Getting started with WSL&lt;/h2&gt;
&lt;p&gt;I didn&#39;t really have a clue where to start with setting up the Windows machine.
I was fighting years of Mac muscle memory and took to Google to find posts to
point me in the right direction.
&lt;a href=&quot;https://daverupert.com/2018/04/developing-on-windows-with-wsl-and-visual-studio-code/&quot;&gt;Dave Rupert&#39;s post on webdev with Windows&lt;/a&gt;
was the best blog post I found and really helped explain some things and point
me in the right direction. However, that post was written in early 2018, and
somethings have changed which means the steps are simpler now. Dave mentions
needing to install Git on the Windows side so VS Code can find it, but with the
VS Code WSL plugin that&#39;s not needed as it plugs into the &lt;code&gt;git&lt;/code&gt; that you have
installed on the Linux side. I also referred to the
&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10&quot;&gt;official Windows WSL installation instructions&lt;/a&gt;,
using those to verify if a blog post was up to date or not.&lt;/p&gt;
&lt;h2&gt;The terminal&lt;/h2&gt;
&lt;p&gt;I&#39;ve been a solid fan of iTerm2 for a long time and was struggling to find a
terminal on Windows that could get close to it. I tried a few before discovering
that the next big update to Windows will include a brand new terminal app! Even
better, you can download it now from the Windows store. The
&lt;a href=&quot;https://github.com/Microsoft/Terminal&quot;&gt;Windows Terminal&lt;/a&gt; has provided me with
everything I need; it can easily be configured via JSON (so I can get my custom
font in there just fine) and you can configure it to automatically connect to
your Linux distribution when it starts up, saving the need to type &lt;code&gt;ubuntu&lt;/code&gt;
everytime you fire up a command line prompt.&lt;/p&gt;
&lt;h2&gt;Seamless workflow&lt;/h2&gt;
&lt;p&gt;The new terminal, coupled with VS Code and the Remote plugin, gets me an
experience on Windows 10 that&#39;s pretty much identical to my Mac workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fire up a terminal.&lt;/li&gt;
&lt;li&gt;Navigate into the project directory.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;code .&lt;/code&gt; to load VS Code with that directory active.&lt;/li&gt;
&lt;li&gt;Let the VS Code Remote plugin connect (this is normally quick so doesn&#39;t
cause any delays).&lt;/li&gt;
&lt;li&gt;Start coding!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Everything within VS Code works perfectly; if I pop open a terminal there it
will be in my Ubuntu WSL, I can use the Git UI without any fuss, and extensions
run just fine too. I&#39;ve yet to hit any snags with this workflow.&lt;/p&gt;
&lt;h2&gt;The frustrations&lt;/h2&gt;
&lt;p&gt;The above might make it sound completely plain sailing but there have been
teething issues along the way that are worth considering if you&#39;re thinking of
trying the swap to Windows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&#39;s a known problem that file reading/writing via WSL is much slower than it
should be. This is due to a limitation of how WSL works. The great news is
that WSL2 will fix this, but it&#39;s not out yet (unless you run an &amp;quot;Insiders&amp;quot;
build of Windows 10 that is slightly less stable). In practice I don&#39;t find
slow read/writes to be much of an issue but you can notice it, particularly if
you&#39;re npm installing.&lt;/li&gt;
&lt;li&gt;This is more on me than on Windows but having used OS X exclusively for so
long it&#39;s taking some time to get used to Windows and its keyboard shortcuts.
It was definitely a few weeks before I felt comfortable and had found some 3rd
party apps that helped replicate some apps from OS X that I was missing. If
you take the plunge be prepared for a bit of frustration as you and your
muscle memory adapts.&lt;/li&gt;
&lt;li&gt;I miss the Mac trackpad. The Dell one is perfectly good, but it&#39;s not quite as
nice to use. That said the &lt;em&gt;keyboard is so much nicer!&lt;/em&gt; so this one evens
itself out.&lt;/li&gt;
&lt;li&gt;Because I&#39;m using this laptop for side projects and mostly frontend work I
don&#39;t hit upon any limitations of WSL but there are plenty of apps or
libraries that can cause issues when run within WSL. If you&#39;re expecting WSL
to just work with everything I would taper your expectations slightly. That
said, WSL2 supposedly fixes a lot of this (I saw a video where someone runs
Docker via WSL2, which is quite cool!) so this might get better once WSL2 is
out.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;In conclusion&lt;/h2&gt;
&lt;p&gt;I&#39;ve been pleasantly surprised with my journey into Windows 10 so far and it&#39;s
gone much better than expected! With WSL2 and further improvements to the
developer workflow on Windows I&#39;m excited to see where we are in another 6-12
months time. It&#39;s really exciting to see Microsoft shift and take this stuff
more seriously - and they are doing an excellent job!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Frontend tech choices I&#39;m making in 2020</title>
    <link href="http://www.jackfranklin.co.uk/blog/frontend-javascript-choices/"/>
    <updated>2020-01-08T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/frontend-javascript-choices/</id>
    <content type="html">&lt;p&gt;Happy New Year! The world of frontend web development is continually changing
with new technologies, ideas and frameworks springing up all the time. Whilst
this can get overwhelming, it&#39;s also an exciting space to be in with so much
opportunity to try new things. Today I&#39;ve picked out a few libraries, languages
or ideas that I&#39;m looking foward to trying in 2020. Some of these aren&#39;t
necessarily the new shiny thing - TypeScript has been around for a while now -
but they are all things that I think might make a big impact on the community in
the coming months.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#39;d love to hear what you&#39;re excited to work with or try in 2020!
&lt;a href=&quot;https://www.twitter.com/Jack_Franklin&quot;&gt;Tweet @Jack_Franklin&lt;/a&gt; and let me know
😊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;TypeScript&lt;/h2&gt;
&lt;p&gt;In 2019 I had some mixed experiences with TypeScript. I started rebuilding
&lt;a href=&quot;http://github.com/jackfranklin/test-data-bot&quot;&gt;test-data-bot&lt;/a&gt; in it (and &lt;a href=&quot;https://javascriptplayground.com/typescript-videos-test-data-bot/&quot;&gt;did some screencasts of the
process&lt;/a&gt;) but on another React project ended up removing
TypeScript completely, which you can hear more about on &lt;a href=&quot;https://fishandscripts.com/episode/season-1-episode-8-untangling-typescript/&quot;&gt;Episode 8 of Fish and
Scripts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Where I&#39;ve landed with my opinions &lt;em&gt;for now&lt;/em&gt; is that TypeScript for me is going
to be very beneficial on standalone JavaScript libraries, like test-data-bot,
but the trade off of TypeScript&#39;s compiler catching errors compared to the
amount of hard debugging of obscure error messages when working on a large
application with many dependencies is not worth it. In my large React project
where I eventually removed TypeScript I spent more time debugging odd type
issues with React and Apollo and other dependencies than I did writing actual
application code.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I know the TypeScript team are aware that sometimes TypeScript&#39;s errors aren&#39;t
the most readable so work in this area may well make TypeScript an even more
compelling choice.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Svelte&lt;/h2&gt;
&lt;p&gt;Hardily a controversial choice, &lt;a href=&quot;https://svelte.dev/&quot;&gt;Svelte 3&lt;/a&gt; has picked up a lot of well
deserved interest since its release. If you&#39;ve not come across it I recommend
&lt;a href=&quot;https://www.youtube.com/watch?v=AdNJ3fydeao&quot;&gt;Rich Harris&#39; talk at YGLF&lt;/a&gt; as a great taster.&lt;/p&gt;
&lt;p&gt;What I really like about Svelte is that it&#39;s a &lt;em&gt;compiler&lt;/em&gt;. This means that when
you hit save in your editor the compiler runs and converts your Svelte
components into JavaScript code that is then executed in the browser. This isn&#39;t
what a framework like React does - in React you write JavaScript (or sometimes
JSX that is converted to JavaScript) and execute that in the browser.&lt;/p&gt;
&lt;p&gt;Being a compiler, Svelte is able to spot potential issues at compile time and
let you know about them, aiding developer debugging. It&#39;s also really good at
shipping the smallest amount of JavaScript possible because Svelte is able to
take your components and intelligently compile them down into the smallest, most
performant JavaScript that it can.&lt;/p&gt;
&lt;p&gt;I also love some of the defaults that Svelte ships with, primarily that CSS is
entirely scoped to each component by default. This is my preferred way of
writing CSS and it&#39;s refreshing to work with a tool that ships this out of the
box. It&#39;s a small thing but it&#39;s refreshing to not have to configure a build
tool to enable CSS Modules and instead just have the Svelte compiler do all the
work.&lt;/p&gt;
&lt;h2&gt;Rollup&lt;/h2&gt;
&lt;p&gt;Doing some reading into Svelte also leads naturally into &lt;a href=&quot;https://rollupjs.org/guide/en/&quot;&gt;Rollup&lt;/a&gt;, a JavaScript
module bundler written by Rich Harris who is the creator of Svelte. I like
Rollup because it feels very approachable; it&#39;s very easy to create your first
bundle and very easy to add a plugin to solve a common problem such as bundling
CSS or using Babel.&lt;/p&gt;
&lt;p&gt;What&#39;s really impressed me with Rollup recently is how easy &lt;em&gt;writing your own
plugins is&lt;/em&gt;. This has always felt like something far beyond my capabilities in
other tools - Webpack has felt like this black box to me and I would never
consider writing a plugin for that. Rollup on the other hand has good
documentation but also the Rollup plugins you find online (many of them written
by the core team) are very easy to look at and follow. The prospect of using a
bundler that I can manipulate and customise fully to suit my specific needs is
very exciting.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en-gb&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;working with Rollup has been really fun - and is incredibly easy to customise with plugins. Checkout the source code if you&amp;#39;re interested - it&amp;#39;s very straight forward and way easier than you might think.&lt;/p&gt;&amp;mdash; Jack Franklin (@Jack_Franklin) &lt;a href=&quot;https://twitter.com/Jack_Franklin/status/1211717795085504516?ref_src=twsrc%5Etfw&quot;&gt;30 December 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;I&#39;m excited to work with Rollup on some projects in 2020 and see how it
develops.&lt;/p&gt;
&lt;h2&gt;Cloud databases&lt;/h2&gt;
&lt;p&gt;I have worked as and still can build backend applications but these days for
side projects I&#39;m often keen to shift as much of the work as possible to other
tools to let me focus on the bits that I enjoy doing the most, and make it more
likely that this side project will ever see the light of day! I&#39;ve always
defaulted in the past to &lt;a href=&quot;https://firebase.google.com/&quot;&gt;Firebase&lt;/a&gt; because I&#39;m familiar with it and it&#39;s fairly
easy to work with once you&#39;re used to the core concepts, but I&#39;ve always had a
bit of a gripe in that the JavaScript libraries you need to use are quite large
in file size. This is definitely an area where I&#39;d like to find other tools that
solve this problem and make it easy to host a frontend app that requires an API
/ database without having to build and host it myself. Recommendations welcome!&lt;/p&gt;
&lt;h2&gt;Letting tools make choices for me&lt;/h2&gt;
&lt;p&gt;I&#39;ve noticed a trend in the tools that I like: they make choices for me. I&#39;m a
fan of Svelte (or at least, a fan enough to want to get more familiar with it)
in part because it makes nice choices out the box and decreases the amount of
thought required in getting a Svelte project running. I continue to be a strong
advocate of &lt;a href=&quot;https://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; because the language makes decisions for me and helps prevent
silly bugs from creeping in. I maintain that &lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier&lt;/a&gt; has been the most
productive change to my toolset in the last couple of years &lt;em&gt;because it makes so
many formatting decisions for me&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I don&#39;t miss spending hours configuring Babel and all the myriad of plugins
required to get the exact set of features I want to have supported (to be fair,
&lt;code&gt;@babel/preset-env&lt;/code&gt; has made this much easier). I don&#39;t miss trying to decide
what variant of CSS to use on this project. I&#39;ve become a fan of putting more of
that burden onto the technologies I&#39;m chosing such that I can focus in on the
actual application. I would be surprised if the tools that catch my eye in 2020
aren&#39;t ones that follow this pattern.&lt;/p&gt;
&lt;h2&gt;What tech are you excited about in 2020?&lt;/h2&gt;
&lt;p&gt;Let me know! It&#39;s so hard to narrow down to just a few and I&#39;m sure there&#39;s many
that I&#39;ve missed. All suggestions are welcome and I&#39;d love to discuss with you.
Drop me a tweet!&lt;/p&gt;
&lt;!-- prettier-ignore-start --&gt;
&lt;!-- prettier-ignore-end --&gt;
</content>
  </entry>
  
  <entry>
    <title>Moving domain names to jackfranklin dot co dot uk</title>
    <link href="http://www.jackfranklin.co.uk/blog/moving-domain-names/"/>
    <updated>2020-01-13T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/moving-domain-names/</id>
    <content type="html">&lt;p&gt;Back in April 2012 I registered and put the JavaScript Playground online with a first blog post about &lt;a href=&quot;http://www.jackfranklin.co.uk/blog/using-objects-in-jquerys-css/&quot;&gt;using objects in jQuery&#39;s &lt;code&gt;.css()&lt;/code&gt; method&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Over the years I&#39;ve written over 100 posts (admittedly far less than I&#39;d like!) about a variety of topics and have been fortunate enough to have many people say very kind things about my content and how they&#39;ve found it useful. I&#39;ve always found that the best part of blogging and would recommend you try to tell people if you enjoy what they&#39;ve written 😊.&lt;/p&gt;
&lt;p&gt;The domain gave me a lot of opportunities that I&#39;ve been very fortunate to have - I wrote a book on jQuery, became a Google Developer Expert (and very soon, &lt;a href=&quot;https://twitter.com/Jack_Franklin/status/1206544220712046593&quot;&gt;an actual Googler&lt;/a&gt;), sold some video courses and spoke at many conferences off the back of people finding my writing. I&#39;ve been so lucky to have these chances and I&#39;m grateful to everyone who has helped me along the way.&lt;/p&gt;
&lt;p&gt;I always had a slight plan to eventually transform JavaScript Playground into a large JavaScript hub with multiple courses, paid membership (or something similar) and more writers creating more content, but that&#39;s a vast amount of work that I simply never had time (or perhaps wanted) to do.&lt;/p&gt;
&lt;p&gt;In the end I found it confusing that my Twitter, GitHub, YouTube and others are all named as &amp;quot;Jack Franklin&amp;quot; but the blog wasn&#39;t. By moving all the content onto jackfranklin.co.uk it&#39;s clearer who is writing the blog posts and it&#39;s easier to map me on Twitter / at a conference / on YouTube and find me on the rest of the internet.&lt;/p&gt;
&lt;p&gt;I&#39;ve set up redirects from the old blog so I&#39;m hopeful that this move doesn&#39;t create a bunch of broken links - everything should be redirected automatically.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Letting tools make choices</title>
    <link href="http://www.jackfranklin.co.uk/blog/letting-tools-make-choices/"/>
    <updated>2020-01-15T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/letting-tools-make-choices/</id>
    <content type="html">&lt;p&gt;In my
&lt;a href=&quot;http://www.jackfranklin.co.uk/blog/frontend-javascript-choices/&quot;&gt;first post of the year about technical choices I&#39;m making in 2020&lt;/a&gt;
I finished with a point about letting tools make choices for you:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#39;ve become a fan of putting more of that burden onto the technologies I&#39;m
choosing such that I can focus in on the actual application. I would be
surprised if the tools that catch my eye in 2020 aren&#39;t ones that follow this
pattern.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This has been a trend for me and my work over the last year or so and I wanted
to use this post to expand on it.&lt;/p&gt;
&lt;h3&gt;Holding onto control&lt;/h3&gt;
&lt;p&gt;I would never have written a post like this a few years ago. One of my main
decisions when deciding what tools to use was how much control I had over the
entire surface area of the tool and how much I could customise it to my every
need.&lt;/p&gt;
&lt;p&gt;My logic at the time was that if I could configure my environment and tools to
&lt;em&gt;precisely&lt;/em&gt; what I wanted, I would create this zen-like application that was set
up to enable me to be the most productive I could be.&lt;/p&gt;
&lt;h3&gt;Time spent configuring&lt;/h3&gt;
&lt;p&gt;My approach wasn&#39;t correct because of two things that are true of all software:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Software is never finished.&lt;/li&gt;
&lt;li&gt;Software is never perfect.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I could never get to this perfect setup of tools because there would &lt;em&gt;always&lt;/em&gt; be
something left to do! Anyone who has worked on an engineering team knows this;
teams create sprint boards and backlogs and those backlogs inevitably end up
with far more items in than your team could ever achieve. I remember sitting
down one evening after work to focus on a side project and losing the best part
of the evening trying to get two different tools that I&#39;d chosen to use playing
nicely alongside each other. I finished for the night and realised that I&#39;d made
&lt;em&gt;no progress&lt;/em&gt;. I didn&#39;t even need those tools to work together to allow me to
make progress, but I was so concerned about having the perfect setup that I
forgot about building the actual application.&lt;/p&gt;
&lt;p&gt;Once I had everything playing nicely, one of the tools would have an update
which broke something and I&#39;d repeat the process all over again.&lt;/p&gt;
&lt;p&gt;Shockingly, that project never saw the light of day (and there are many more
like it).&lt;/p&gt;
&lt;h3&gt;Losing hours to extreme ESLint configuration&lt;/h3&gt;
&lt;p&gt;The amount I valued control really became apparent on another side project where
I probably spent the first two hours &lt;em&gt;just configuring ESLint&lt;/em&gt;. I can&#39;t tell you
how long I debated in my head between Style A or B, all while having no actual
project code and basing my decision off dummy code I was writing to test my
ESLint setup!&lt;/p&gt;
&lt;p&gt;At this point as well I was &lt;em&gt;the only developer&lt;/em&gt;, so why it really mattered to
me that I stuck to an incredibly strict set of rules I&#39;m not quite sure. Yet
again I&#39;d scuppered a side project before it had even started.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I still use and value ESLint in my toolchain but apply far fewer rules than in
the past.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Working on a team&lt;/h3&gt;
&lt;p&gt;When I got my first professional job out of university I joined a team who
already had a set of conventions for their code that newer members of the team
were expected to stick to (although we had a good culture where anyone could
suggest changes/new additions). It shocked me &lt;em&gt;how much I struggled with this&lt;/em&gt;!
I would sit at my desk not wanting to write code or even trying to avoid certain
language features because it would frustrate me to do it &amp;quot;wrong&amp;quot;. Looking back
on this it&#39;s very embarrassing to admit and silly that I got hung up on it.&lt;/p&gt;
&lt;h3&gt;Deciding what to work on&lt;/h3&gt;
&lt;p&gt;Once I&#39;d worked in an engineering team for over half a year it dawned on me that
every person in every team has far more they&#39;d like to do than they can actually
do. Regardless of company size, team size, an individual&#39;s role or experience,
there is simply too much to do.&lt;/p&gt;
&lt;p&gt;Once I realised this I began to think about what I value most and what I want to
spend my time doing. At work, I like building things that people use. I like
finishing off a nice UI to help users with a particular problem. I like building
tools that other engineers use that helps them be more productive. I like
improving our acceptance tests after a bug makes it into production so it can&#39;t
happen again. That&#39;s what I like doing and it&#39;s how I have the most impact on
the company, my team, and the people who are using the products we build.&lt;/p&gt;
&lt;p&gt;I decided that any work that takes me away from the core of my job and what I
like doing was not worth dedicating multiple hours to. I still care about it and
still work in this area (as I said above, we use ESLint at work to help us) but
I spend far less time than before. On side projects I&#39;ll tend to chuck
&lt;a href=&quot;https://github.com/suchipi/eslint-config-unobtrusive&quot;&gt;my favourite ESLint config&lt;/a&gt;
in and be done with it so I can focus on the actual project itself.&lt;/p&gt;
&lt;h3&gt;Tools that make decisions make me more productive&lt;/h3&gt;
&lt;p&gt;The best example of a tool that I&#39;ve come to love is
&lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier&lt;/a&gt;. It&#39;s far from the first code formatting tool
out there but it popularised the idea of automatic code formatting for frontend
development. Suddenly I went from strictly controlling all aspects of my code
formatting via thousands of ESLint rules to having one tool that made a set of
choices that &lt;em&gt;I couldn&#39;t change even if I wanted to&lt;/em&gt;! Prettier is opinionated
and it&#39;s what I love the most. I install it, set it running and it formats my
code how it thinks it should be formatted and that&#39;s that. I don&#39;t like every
decision Prettier makes with code, but I like that its made that decision for
me.&lt;/p&gt;
&lt;p&gt;The trend of &lt;em&gt;zero config&lt;/em&gt; tools was perhaps overhyped slightly - there will
always be projects with edge cases and certain situations that rely on full
customisation and control - but tools that lean towards being less configurable
have tended to find their way into my toolbox.&lt;/p&gt;
&lt;p&gt;For small side projects these days I&#39;ll often reach for
&lt;a href=&quot;https://parceljs.org/&quot;&gt;Parcel&lt;/a&gt; as an out of the box bundler because it just
handles anything I throw at it without much effort, and it&#39;s not surprise that
&lt;a href=&quot;https://jestjs.io/&quot;&gt;Jest&lt;/a&gt; has become my testing framework of choice for the
same reason.&lt;/p&gt;
&lt;h3&gt;Opinions are still encouraged!&lt;/h3&gt;
&lt;p&gt;Whilst I may not dedicate as much time and energy to configuring a project to
within an inch of its life that doesn&#39;t mean that I don&#39;t have opinions. I still
have strong opinions and preferences about how code should be formatted, which
ESLint rules are good (or bad) and which test framework is my favourite. I spend
a lot of time thinking about software design and what &amp;quot;clean code&amp;quot; really means.
My colleagues and I regularly debate exactly how to write a piece of code and we
definitely don&#39;t always agree.&lt;/p&gt;
&lt;p&gt;I&#39;ve learned that it&#39;s not about not having opinions, but instead holding onto
them less strongly.
&lt;a href=&quot;https://medium.com/@ameet/strong-opinions-weakly-held-a-framework-for-thinking-6530d417e364&quot;&gt;Strong opinions, weakly held&lt;/a&gt;
is a great way to frame these discussions and allow you to have opinions but be
open to discussing them and having those opinions challenged. This process,
coupled with the practice of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Disagree_and_commit&quot;&gt;Disagree and Commit&lt;/a&gt; has
enabled me and my team at work to continually challenge our thoughts, opinions
and ideas whilst not getting bogged down in debating for the sake of it, or
becoming frustrated with anyone refusing to budge on their viewpoint.&lt;/p&gt;
&lt;h3&gt;Tools that make decisions help beginners get up and running&lt;/h3&gt;
&lt;p&gt;Preferring tools that make decisions is why I&#39;ll push people towards
&lt;a href=&quot;https://github.com/facebook/create-react-app&quot;&gt;create-react-app&lt;/a&gt; if they want to
learn React but aren&#39;t sure where to start. I&#39;ve seen many people try and fail
to learn React not because they aren&#39;t capable of learning React but they give
themselves a huge mountain to climb and try to learn React, Webpack, Babel, and
more &lt;em&gt;all at the same time!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you&#39;re teaching beginners, or working with junior developers, encourage them
to focus on the job in hand and what&#39;s really important and let tools fill in
the gaps.&lt;/p&gt;
&lt;p&gt;There&#39;s nothing wrong with someone being comfortable with React and deciding
that they would like to learn what create-react-app does under the hood, or
spending a weekend building their own rough version of React to gain a greater
understanding of the tool. But when you&#39;re just getting started it&#39;s important
to focus in on what&#39;s really important. Anything else can be deferred.&lt;/p&gt;
&lt;h3&gt;Clearing your head and focusing&lt;/h3&gt;
&lt;p&gt;Another benefit I&#39;ve experienced is that once you offload decisions to tools
you&#39;re able to think more clearly about the problem at hand. That applies to
beginners trying to learn something new, but it applies to starting a side
project and working on what&#39;s really important.&lt;/p&gt;
&lt;p&gt;I encourage you to think about this next time you load up a project at work, or
at home. Where are you spending time and energy that you can offload to
something else, freeing you up to do your best work?&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The three developers</title>
    <link href="http://www.jackfranklin.co.uk/blog/the-three-software-developers/"/>
    <updated>2020-01-27T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/the-three-software-developers/</id>
    <content type="html">&lt;p&gt;Have you ever come across code that you wrote six months ago and thought &amp;quot;what
was I doing?&amp;quot;. I know I have! And I know that in the past I&#39;ve been too easy to
beat myself about past mistakes instead of reflecting on why the code I wrote
six months ago is now causing me problems.&lt;/p&gt;
&lt;p&gt;Worse still I&#39;ve caught myself criticising &lt;em&gt;someone else&#39;s&lt;/em&gt; code that they wrote
six months ago. &amp;quot;I can&#39;t believe Bob wrote that, what was he thinking?!&amp;quot; is
&lt;em&gt;not&lt;/em&gt; a thought that I&#39;m proud of, but it&#39;s one that I&#39;ve had many times.&lt;/p&gt;
&lt;p&gt;In the past few years I&#39;ve spent a large portion of my time tackling large
software migrations; first one from AngularJS to React, and then one from legacy
templating and jQuery to React (turns out I quite like React!). The very nature
of this work means that coming across &amp;quot;bad&amp;quot; code is guaranteed.&lt;/p&gt;
&lt;h3&gt;Lacking empathy&lt;/h3&gt;
&lt;p&gt;A couple of years ago a colleague gave me some candid feedback that they had
noticed that I sometimes spoke quite negatively of the codebase, or work that
had been done a long time ago. This took me by surprise but on reflection was
entirely correct; I was allowing my frustrations to cloud my judgement and
taking that frustration out in meetings on colleagues. This wasn&#39;t a good
approach and lead to me coming across as an incredibly unempathetic person to
work with. I don&#39;t think this was a true reflection but the way I was thinking
about past code - the &amp;quot;what IDIOT wrote this?!&amp;quot; approach - wasn&#39;t healthy for me
or for the team I was on.&lt;/p&gt;
&lt;p&gt;After some reflection I realised that I was thinking about my past coding
efforts (or that of my colleagues) all wrong; rather than criticising and
assuming bad decisions, I should think back to what I knew &lt;em&gt;at the time of
making the decision&lt;/em&gt; and what I &lt;em&gt;now know, at the time of criticising that prior
decision&lt;/em&gt;. When thinking about that code I wrote six months ago along with &lt;em&gt;the
context in which it was written&lt;/em&gt; it became clear that it wasn&#39;t an idiotic or
bad decision, but a reasonable one at the time. This was a big shift in my
thinking but one that lead me to a greater understanding of how we make
decisions when programming and how I should always assume good intentions given
the context of the decision.&lt;/p&gt;
&lt;h3&gt;Context matters in code&lt;/h3&gt;
&lt;p&gt;As a concrete example, I came across some code that short circuited various
conditionals given a certain value, and it stuck out as different to all the
code surrounding it and I couldn&#39;t figure out why it needed to short circuit in
the way it did. I did some digging, asked around, and got a solid explanation
that it had been an urgent bug fix on a Friday afternoon to fix an issue with
some bad historical data that had suddenly revealed itself. Suddenly it became
clear; the developer who wrote that code wasn&#39;t bad, they hadn&#39;t purposefully
written bad code, they had made a reasonable decision to deploy this change to
fix a bug before everyone headed home for the weekend.&lt;/p&gt;
&lt;h3&gt;The three developers&lt;/h3&gt;
&lt;p&gt;Knowing that decisions that seemed reasonable at the time can end up being
sub-optimal, and that we can never predict the future of how our software will
need to change, lead me to what I&#39;ve found a very clear, productive way of
thinking where I don&#39;t blame myself (or others) for past mistakes and instead
place emphasis on what &lt;em&gt;I can learn&lt;/em&gt; rather than &lt;em&gt;who I can blame&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So when I&#39;m writing code now I think of three developers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Past Jack&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Current Jack&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Future Jack&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And whilst I am thinking about myself as the person who wrote, or is writing,
the code, this applies to all members of the team or anyone who could encounter
or interact with code I write.&lt;/p&gt;
&lt;h3&gt;Past Jack&lt;/h3&gt;
&lt;p&gt;I used to think that Past Jack made loads of stupid mistakes, wrote poor
decisions and generally left code in a bad state. But now I trust that Past Jack
made those decisions with the best intentions, using the knowledge he had to
inform the decision as best he could. I like to think about what I can learn
from Past Jack; how I can see now that the code he wrote six months ago wasn&#39;t
the best solution in the long run, and how that can inform the decisions that I
make today - which brings me nicely to the next developer.&lt;/p&gt;
&lt;h3&gt;Current Jack&lt;/h3&gt;
&lt;p&gt;Current Jack (or, me - I get this is a bit weird to talk about myself in the
third person 😂) likes to take lessons learned from past code and try to avoid
those problems in the future. It&#39;s great to be able to look back at code that
was written three, six, twelve months ago and decide what&#39;s causing issues, what
isn&#39;t clear, and how the code could have been clearer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Writing code that computers understand is easy, but writing code that humans
can understand is the challenge.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Developers spend more time reading existing code and modifying it rather than
writing brand new code from scratch so being able to take code that you (or a
colleague) wrote six months ago and get it into your head quickly is a major
productivity boost during your day.&lt;/p&gt;
&lt;h3&gt;Future Jack&lt;/h3&gt;
&lt;p&gt;Future Jack is always in my mind when I&#39;m writing code because I want to give
him that productivity boost, whether that&#39;s in the form of clear code that&#39;s
easy to follow (I hope so), or a good set of unit tests that clearly document
all the expected behaviour so it&#39;s easy to refactor later, or if that&#39;s a
massive code comment explaining some odd edge case that&#39;s impossible to solve
nicely. Future Jack will be the person loading up a file to fix a bug that&#39;s
causing downtime and will be in a rush to understand and fix the problem as
quickly as possible and anything I can do now to make Future Jack&#39;s job easier -
whilst learning from Past Jack&#39;s decisions - is worth doing.&lt;/p&gt;
&lt;h3&gt;We&#39;re all learning&lt;/h3&gt;
&lt;p&gt;One of my favourite things about being a software engineer is that it&#39;s never
finished. There is never a perfect approach that applies equally to every type
of problem, or a particular framework that solves every issue any developer will
ever have. We&#39;re all learning, making mistakes, fixing them, and trying to make
life just a little bit easier for our future selves or colleagues.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using ftplugin to tidy my Vim configuration</title>
    <link href="http://www.jackfranklin.co.uk/blog/using-ftplugin-in-vim/"/>
    <updated>2020-05-10T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/using-ftplugin-in-vim/</id>
    <content type="html">&lt;p&gt;I&#39;ve used Vim on and off for a long time. I got introduced to it at University
by a lecturer, tried it, didn&#39;t get it, and moved on. I then decided to learn it
more seriously and spent a lot of time configuring it, as my
&lt;a href=&quot;https://github.com/jackfranklin/dotfiles&quot;&gt;dotfiles repository&lt;/a&gt; shows. It&#39;s on
1203 commits!&lt;/p&gt;
&lt;p&gt;Often in Vim you&#39;ll want to have different settings for different filetypes.
Foexample I want to configure Markdown files to have spell-check turned on at
all times, but when I&#39;m coding I don&#39;t care for spell-check being on.&lt;/p&gt;
&lt;p&gt;In the past I would have done this with an &lt;code&gt;autocmd&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;autocmd FileType markdown setlocal spell spelllang=en_gb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But then your &lt;code&gt;vimrc&lt;/code&gt; (or &lt;code&gt;init.vim&lt;/code&gt; for Neovim users like me!) gets cluttered
with these and it&#39;s hard to keep up, or find exactly where you configured those
Markdown settings.&lt;/p&gt;
&lt;p&gt;Instead, you can use ftplugins for this case! A &lt;code&gt;ftplugin&lt;/code&gt; is a file type plugin
that will be run automatically when Vim detects you&#39;re editing a file of that
type.&lt;/p&gt;
&lt;p&gt;So instead of cluttering up my &lt;code&gt;vimrc&lt;/code&gt; with &lt;code&gt;autocmd&lt;/code&gt; lines, I can instead
create &lt;code&gt;~/.config/nvim/ftplugin/markdown.vim&lt;/code&gt; with the settings I want in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setlocal spell spelllang=en_gb
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&#39;re using Vim, not Neovim, you can create
&lt;code&gt;~/.vim/ftplugin/markdown.vim&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This keeps my &lt;code&gt;vimrc&lt;/code&gt; tidy, and my dotfiles easier to manage. It&#39;s very
straightforward to remember which settings I&#39;ve applied globally (they are in my
&lt;code&gt;vimrc&lt;/code&gt;) or per-filetype, in which case I can dive into my &lt;code&gt;ftplugin&lt;/code&gt;s folder.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Learning keyboard shortcuts with Post-it notes</title>
    <link href="http://www.jackfranklin.co.uk/blog/learning-with-post-its/"/>
    <updated>2020-05-13T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/learning-with-post-its/</id>
    <content type="html">&lt;p&gt;I like keyboard shortcuts. I use Vim to edit code, which is entirely keyboard
based, and generally I feel better and more productive if I can use the keyboard
to get things done on my computer.&lt;/p&gt;
&lt;p&gt;But I&#39;ve always found learning new keyboard shortcuts hard, particularly if I&#39;ve
already found another way to solve my problem already. Let&#39;s say I use an app
and a core piece of my workflow involves two consecutive keyboard shortcuts. One
day I learn that I can perform the same action in a single command. Great!
Except I have that two-consecutive shortcut workflow committed to muscle memory
and changing that is going to be really hard.&lt;/p&gt;
&lt;p&gt;It turns out that the answer for me is Post-it notes! I&#39;ve been using this
technique for many years and it&#39;s worked well for me. Each week or two I&#39;ll try
to find a few shortcuts that I&#39;d like to adopt into muscle memory and learn.
I&#39;ll stick them on a Post-it on my monitor as a constant reminder. I don&#39;t
always remember to use them, but I remember more and more as time goes by until
the Post-it becomes redundant. This is how I learned Vim; I didn&#39;t attempt to
learn the myriad of commands at once, but instead picked a few each week that I
wanted to get used to using.&lt;/p&gt;
&lt;p&gt;Right now I&#39;m trying to get better at using
&lt;a href=&quot;https://ianyh.com/amethyst/&quot;&gt;Amethyst&lt;/a&gt;. It&#39;s a tiling window manager for MacOS,
and has a load of shortcuts. I&#39;ve not been good at remembering the shortcuts for
moving focus around windows (instead reaching for &lt;code&gt;Cmd+tab&lt;/code&gt; or my mouse) and I
don&#39;t make use of spaces as much as I&#39;d like. So guess what I&#39;ve just added to
my desk?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/images/post-its.jpg&quot; alt=&quot;Post-its at my desk with keyboard shortcuts&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you&#39;ve ever struggled to commit things to memory, I recommend giving this a
go!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Refactoring to remove passthrough variables</title>
    <link href="http://www.jackfranklin.co.uk/blog/refactoring-to-remove-passthrough-variables/"/>
    <updated>2020-05-19T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/refactoring-to-remove-passthrough-variables/</id>
    <content type="html">&lt;p&gt;I&#39;ve been working recently on &lt;a href=&quot;https://github.com/puppeteer/puppeteer&quot;&gt;Puppeteer&lt;/a&gt; and migrating it to TypeScript. This
has presented the opportunity to do some refactoring and today I want to share a
recent refactoring I did to remove &lt;em&gt;passthrough variables&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;What is a passthrough variable?&lt;/h3&gt;
&lt;p&gt;A passthrough variable is a variable that gets passed through multiple method
calls before it gets given to the actual place in which it&#39;s used.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/images/passthrough.svg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Normally these happen either because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the object that needs the data is unable to create it&lt;/li&gt;
&lt;li&gt;the object that creates the data (in the above example, &lt;code&gt;A&lt;/code&gt;), used to need it,
but now doesn&#39;t due to a change in functionality or behaviour.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Whilst we&#39;re not specifically talking about React in this post, you see this
happen a lot with React props. This is known as
&lt;a href=&quot;https://kentcdodds.com/blog/prop-drilling/&quot;&gt;&amp;quot;prop drilling&amp;quot;&lt;/a&gt; and is also
something you should be wary of.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Dealing with passthrough variables&lt;/h3&gt;
&lt;p&gt;It&#39;s important to note that passthrough variables are not always avoidable, and
often they are the preferred solution. The fix for passthrough variables can be
simple - moving the creation of the value to the place where it&#39;s needed is the
easiest fix - but if you&#39;re constrained often the explicitness of passthrough
variables is preferable to any other solution.&lt;/p&gt;
&lt;p&gt;Whilst it makes you jump through a hoop or two, the below code is explicit and
does tell the full story about what&#39;s happening:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SomeValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// somewhere in C we use the value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s definitely not the nicest code you&#39;ve ever seen but it can be methodically
followed. Any solution that creates a method for &lt;code&gt;C&lt;/code&gt; to access the variable
without the explicitness of passing the values through will introduce some
indirection for a developer to follow. For example, if you chose to put the
value on the global scope (&lt;em&gt;I do not recommend this, but it&#39;s a useful
example!&lt;/em&gt;), you have to figure where that value comes from:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// woah, where does this come from?!!&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;globalStuff&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even a more sophisticated approach like React&#39;s
&lt;a href=&quot;https://reactjs.org/docs/context.html&quot;&gt;Context API&lt;/a&gt; still suffers from this
problem. &lt;em&gt;Often this is a good trade-off and worth taking&lt;/em&gt; but it&#39;s still
something you have to consider. As always in building software there is no
silver bullet!&lt;/p&gt;
&lt;h3&gt;Fixing the simple case&lt;/h3&gt;
&lt;p&gt;Thankfully for me the specific case I was tackling in the &lt;a href=&quot;https://github.com/puppeteer/puppeteer&quot;&gt;Puppeteer&lt;/a&gt; codebase
was easier to deal with; there was no reason to not create the data in the same
place that it was needed. This is the best fix; taking code that&#39;s spread across
three files and moving it into a single file is nearly always an improvement
because it&#39;s simply less to keep in your head at any given time.&lt;/p&gt;
&lt;p&gt;Taking a look at the
&lt;a href=&quot;https://github.com/puppeteer/puppeteer/pull/5826/files&quot;&gt;pull request that made the change&lt;/a&gt;
you can see that we came out net-negative in terms of lines of code (not always
the most useful metric but good here) and we simplified classes in the process.
In the case of Puppeteer we had:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BrowserContext&lt;/code&gt; create a &lt;code&gt;TaskQueue&lt;/code&gt; and initialise a &lt;code&gt;Target class&lt;/code&gt;, passing
the queue instance.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Target&lt;/code&gt; class took that &lt;code&gt;TaskQueue&lt;/code&gt; instance and passed it into the
&lt;code&gt;Page&lt;/code&gt; constructor.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Page&lt;/code&gt; class made use of the queue instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not only is this very mechanical code to pass all these values through, it&#39;s
also polluting multiple classes with knowledge that they don&#39;t need. The only
class above that &lt;em&gt;actually cares&lt;/em&gt; about a &lt;code&gt;TaskQueue&lt;/code&gt; is &lt;code&gt;Page&lt;/code&gt;. But because we
create that value in &lt;code&gt;BrowserContext&lt;/code&gt; both it and &lt;code&gt;Target&lt;/code&gt; now have to know
about a task queue and how to pass it around. So not only does this change
remove lines of code, but it reduces the amount of classes that have to know
about the task queue by 66%!&lt;/p&gt;
&lt;p&gt;And if that wasn&#39;t enough, &lt;code&gt;BrowserContext&lt;/code&gt; has one fewer instance variable,
&lt;code&gt;Target&lt;/code&gt; has one fewer instance variable and constructor argument, and &lt;code&gt;Page&lt;/code&gt;
has one fewer constructor argument to. So this one small PR packs in a good
punch in terms of reducing the complexity of the code.&lt;/p&gt;
&lt;p&gt;Keep an eye out for situations like this; they are often left behind as an
accidental by-product of refactorings and they can provide an easy, low risk way
to remove some confusion from your codebase.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Writing tests for bad JavaScript code</title>
    <link href="http://www.jackfranklin.co.uk/blog/writing-tests-for-bad-javascript-code/"/>
    <updated>2020-05-26T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/writing-tests-for-bad-javascript-code/</id>
    <content type="html">&lt;p&gt;I like refactoring code and thinking about software design. It&#39;s something I
speak about, blog about and enjoy doing as part of my job day to day. A core
part of any refactoring is knowing that you haven&#39;t broken any functionality and
the best way to have confidence in that is by having a set of tests you can run
to ensure you&#39;ve not broken anything.&lt;/p&gt;
&lt;p&gt;But what do you do when there are no tests? You should never dive into a
refactoring without tests, but how do you ensure that you&#39;ve got good tests?
Today we&#39;re going to look at some code we&#39;ve stumbled across and want to
refactor, and how we first take the step of adding tests.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The example code below is taken from a &lt;em&gt;fantastic&lt;/em&gt; talk by Katrina Owen titled
&lt;a href=&quot;https://www.youtube.com/watch?v=J4dlF0kcThQ&quot;&gt;&amp;quot;Therapeutic Refactoring&amp;quot;&lt;/a&gt; which
I highly recommend. It&#39;s such a good example that I&#39;ve adapted it to
JavaScript to use for this blog post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;The code: generating filenames for books&lt;/h3&gt;
&lt;p&gt;Here&#39;s the code we&#39;ve been asked to work with. We&#39;re working at a publishers and
this code generates the filename for the front cover of a given book (or
&lt;em&gt;target&lt;/em&gt;). There&#39;s some features we need to add to this code, but for now we
just need to understand it. Feel free to take a moment to give it a read.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Publisher&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;generateFilename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; fileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;publishOn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullYear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;publishOn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMonth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    fileName &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categoryPrefix&lt;br&gt;    fileName &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;kind&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;_&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    fileName &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    fileName &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br&gt;      Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; truncatedTitle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[^&#92;[a-z&#92;]]&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;gi&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; truncateTo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; truncatedTitle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; truncatedTitle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;br&gt;    fileName &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;truncatedTitle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; truncateTo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    fileName &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.jpg&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; fileName&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&#39;s a lot going on here! It looks like we generate the name based on the
published date, the category, the type of book, some random digits, and then the
title which we truncate if needed. It&#39;s clear that this code could do with some
attention; it&#39;s not the easiest to read or follow. The first step is to try and
clarify all the behaviour that we have so we can test it. But right now we don&#39;t
have a single test! So let&#39;s attempt to write one.&lt;/p&gt;
&lt;h3&gt;Writing our first test&lt;/h3&gt;
&lt;p&gt;I&#39;ve spoken before about descriptive tests, but in this case we don&#39;t even know
what we&#39;re testing! In this case I like to start really basic and just prove to
myself that this code even works:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Publisher&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;does a thing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We know that &lt;code&gt;generateFilename&lt;/code&gt; takes a target, so we can try to make a fake
target as best we can. If we mess it up, we&#39;ll get errors from the tests telling
us what we missed.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Publisher&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;does a thing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Publisher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;generateFilename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;publishOn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;categoryPrefix&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;tech&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;software-design&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Software Design&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;???&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what about the assertion? We have no idea what the output will be. In this
case I like to write an obviously wrong output and watch the test fail. The
failure will show us what we&#39;re actually expecting!&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Expected: &lt;span class=&quot;token string&quot;&gt;&quot;???&quot;&lt;/span&gt;&lt;br&gt;Received: &lt;span class=&quot;token string&quot;&gt;&quot;2021-4techsoftware-design12358113-softwared.jpg&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK, so let&#39;s drop that name into our assertion and hopefully the test should
pass. Well unfortunately:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Expected: &lt;span class=&quot;token string&quot;&gt;&quot;2021-4techsoftware-design12358113-softwared.jpg&quot;&lt;/span&gt;&lt;br&gt;Received: &lt;span class=&quot;token string&quot;&gt;&quot;2021-4techsoftware-design12369199-softwared.jpg&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Random numbers like this can derail a test, but thankfully there&#39;s a workaround.
We can expect our output to match a regex where we hardcode everything bar the 5
digits that are random:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;2021-4techsoftware-design123[0-9]{5}-softwared&#92;.jpg&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we are passing! Phew. Whilst this felt like a bit of a slog we&#39;re now in
a great position. We have at least one test, and now we&#39;re ready to figure out
the other set of tests that we&#39;ll need.&lt;/p&gt;
&lt;h3&gt;Finding branches in the code&lt;/h3&gt;
&lt;p&gt;When you&#39;re trying to write test cases that flush out all the possible edge
cases you should look for conditionals in the code. These are effectively all
the branches that you&#39;re trying to test. Each &lt;code&gt;if&lt;/code&gt; becomes two test cases: one
that tests the positive side and one for the negative side.&lt;/p&gt;
&lt;p&gt;The first conditional we hit adds the &lt;code&gt;ageRange&lt;/code&gt; to the file name if the book is
personal:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;fileName &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isPersonal &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ageRange &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our first test case didn&#39;t include this, so let&#39;s make sure we test this and
include the age range in the assertion:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;includes the age range if the book is personal&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Publisher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;generateFilename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;publishOn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;ageRange&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;isPersonal&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;categoryPrefix&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;kids&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;childrens-book&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Five go on an Adventure&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;2021-4kidschildrens-book123[0-9]{5}10-fivegoona&#92;.jpg&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next conditional is the truncation:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; truncatedTitle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[^&#92;[a-z&#92;]]&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;gi&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; truncateTo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; truncatedTitle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; truncatedTitle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;br&gt;fileName &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;truncatedTitle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; truncateTo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our first test case used the title &#39;Software Design&#39; which is greater than 9
characters long, so this behaviour is being tested already. So let&#39;s add another
test case that uses a really short title and confirms it does not get truncated.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;does not truncate titles less than 9 characters long&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Publisher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;generateFilename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;publishOn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;categoryPrefix&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bio&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;biography&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;2021-4biobiography123[0-9]{5}-jack&#92;.jpg&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;There&#39;s other behaviour here yet to be tested - that regex in particular looks
interesting - but right now we are only after branches.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Those are all the conditionals that we&#39;ve come across so let&#39;s have a look at
where we&#39;re up to with our tests:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Publisher&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;does a thing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;includes the age range if the book is personal&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;does not truncate titles less than 9 characters long&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now rename the &lt;code&gt;&#39;it does a thing&#39;&lt;/code&gt; test; that test actually tests that
truncation works with titles greater than 9 characters long. Notice how we
didn&#39;t know that at the time but we do now. Let&#39;s update it&#39;s description
accordingly:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;truncates titles greater than 9 characters long&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have three passing tests and our conditionals dealt with, let&#39;s look at
other edge cases or particularly interesting bits of behaviour that we&#39;d like to
test.&lt;/p&gt;
&lt;h3&gt;Looking for other edge cases and changes in behaviour&lt;/h3&gt;
&lt;p&gt;Now we&#39;re scanning the code looking for things that we&#39;d like to test. And we
hit a good candidate on line 1; including the year and month in the output. What
we now have to consider is is this worth writing a specific test for, or are the
current suite of tests sufficient? This is where some personal preference comes
in; I&#39;d argue that every test will test this date logic, as it&#39;s not conditional
on anything else, so we can leave this be.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;fileName &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;kind&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;_&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the first line that makes me want to write a test. If the &lt;code&gt;kind&lt;/code&gt; has an
underscore in, it will be removed. We also hit a curious issue here: what if
there are multiple underscores? This code will only replace the first instance,
not all of them. This would be the sort of thing I&#39;d note down for later; to
check if this is desired or a bug in the implementation. &lt;strong&gt;When you&#39;re writing
tests for code you don&#39;t understand, don&#39;t fix anything at first. Get good test
coverage and note down any potential bugs you find along the way&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here I make sure I write a test where &lt;code&gt;kind&lt;/code&gt; has an underscore and assert that
it&#39;s been removed in the output. I then also write a test that confirms if there
are multiple underscores only the first is removed, because I&#39;d like to document
that behaviour even if we then ultimately decide that it&#39;s a bug (at which point
we can update the test).&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;removes the first underscore from the kind&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Publisher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;generateFilename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;publishOn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;categoryPrefix&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bio&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;self_biography&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Title&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;2021-4bioselfbiography123[0-9]{5}-title&#92;.jpg&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;does not remove any subsequent underscores from the kind&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Publisher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;generateFilename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;publishOn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;categoryPrefix&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bio&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;self_bio_graphy&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Title&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;2021-4bioselfbio_graphy123[0-9]{5}-title&#92;.jpg&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next thing that strikes me is this line:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; truncatedTitle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[^&#92;[a-z&#92;]]&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;gi&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or specifically, &lt;em&gt;this regex&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt;&#92;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;z&#92;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;gi&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This regex (we think) is supposed to match anything that isn&#39;t a letter. In the
code anything that matches is replaced by nothing, and we note that the &lt;code&gt;/gi&lt;/code&gt;
makes it global (every match will be replaced) and case insensitive. But what&#39;s
curious here is that the inner braces are escaped:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a-z&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this regex also looks like it will leave any braces in the title. This &lt;em&gt;seems
unlikely&lt;/em&gt; so we note this as a potential bug, but given it is coded behaviour,
let&#39;s write a test to prove that braces do remain. We&#39;ll also write another test
that has a funky title full of special characters to ensure they get removed:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;does not remove braces or letters from the book title&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Publisher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;generateFilename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;publishOn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;categoryPrefix&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bio&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;biography&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;My [Title]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;2021-4biobiography123[0-9]{5}-my&#92;[title&#92;]&#92;.jpg&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;removes other special characters from the book title&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Publisher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;generateFilename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;publishOn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;categoryPrefix&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bio&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;biography&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;(My) &amp;lt;title$&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;2021-4biobiography123[0-9]{5}-mytitle&#92;.jpg&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&#39;s the last part of behaviour that leaps out at us as worth testing.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;With that we now have 7 tests that describe and specify the functionality that
&lt;code&gt;generateFilename&lt;/code&gt; gives us:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;truncates titles greater than 9 characters long&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;includes the age range if the book is personal&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;does not truncate titles less than 9 characters long&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;removes the first underscore from the kind&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;does not remove any subsequent underscores from the kind&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;does not remove braces or letters from the book title&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;removes other special characters from the book title&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also think we might have found some bugs along the way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is it deliberate that only the first &lt;code&gt;_&lt;/code&gt; gets removed from the &lt;code&gt;kind&lt;/code&gt; of the
&lt;code&gt;target&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;Similarly, are braces meant to be included as part of the title&#39;s output? Or
is that a typo when defining the regex?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although it&#39;s tempting to fix these &amp;quot;bugs&amp;quot; as you go, remember that the entire
point of this work is to clarify the code&#39;s behaviour in order to make
improvements. Resist the urge to make improvements as you go; once you have a
thorough test suite it&#39;s much easier to make decisions on where to go and if you
start making changes you&#39;ve got a good set of tests to ensure you don&#39;t break
any functionality.&lt;/p&gt;
&lt;p&gt;Now we have the tests it&#39;s time to look at the feature request we&#39;ve been asked
to implement and how we go about doing that. Keep an eye out for next week&#39;s
blog post where we&#39;ll do just that!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks again to Katrina Owen and her
&lt;a href=&quot;https://www.youtube.com/watch?v=J4dlF0kcThQ&quot;&gt;Therapeutic Refactoring talk&lt;/a&gt;
which was the inspiration for writing up this blog post. I highly recommend
watching it!&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  
  <entry>
    <title>Refactoring JavaScript with tests</title>
    <link href="http://www.jackfranklin.co.uk/blog/refactoring-javascript-code-with-tests/"/>
    <updated>2020-06-18T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/refactoring-javascript-code-with-tests/</id>
    <content type="html">&lt;p&gt;In
&lt;a href=&quot;http://www.jackfranklin.co.uk/blog/writing-tests-for-bad-javascript-code/index.html&quot;&gt;the last post we tackled writing tests for bad JavaScript code&lt;/a&gt;
and now we have tests covering the behaviour of our code we are ready to do some
refactoring and improve the code to make it easier to work with.&lt;/p&gt;
&lt;p&gt;The code at hand generates filenames for media associated with a book. Here&#39;s
one of the tests to jog your memory:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Publisher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;generateFilename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;publishOn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;categoryPrefix&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;tech&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;software-design&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Software Design&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;2021-4techsoftware-design123[0-9]{5}-softwared&#92;.jpg&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What motivated this refactoring is that we&#39;ve been asked by our manager to make
a change to this output. Each individual section in the filename should be
separated by a dash (&lt;code&gt;-&lt;/code&gt;). In the above output you can see that this happens
inconsistently on different parts of the output. Right now this would be a very
manual bit of work to take all the string concatenation and add dashes. Let&#39;s
see if we can follow &lt;a href=&quot;https://twitter.com/KentBeck&quot;&gt;Kent Beck&lt;/a&gt;&#39;s advice and do our work
as two separate steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do the work to make the change easy (note: this may be hard).&lt;/li&gt;
&lt;li&gt;Do the easy change.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;It&#39;s a common misconception that you need to carve out explicit time to
refactor code; instead try to think of refactoring as work to be done to make
a new feature easier and quicker to implement. That&#39;s also much easier to
convey to stakeholders!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Making the change easy&lt;/h3&gt;
&lt;p&gt;If we think of the filename as a series of parts then we can start to make
progress. We know that we have the tests to confirm that everything is working,
and our goal now is to make a series of changes to improve the code. Our steps
should be small, and we should run the tests after every change. We want to know
ASAP if we&#39;ve broken anything!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Have you ever broken your app and frantically started undoing things to try to
get back to a state where it was working? Or been midway through a refactor
and had loads of broken tests? Try to get into the habit of making small
changes and running your tests &lt;em&gt;after every one&lt;/em&gt; to help you become aware of
any issues the moment they crop up. It&#39;s much easier to undo immediately
rather than backtrack through changes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Publisher&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;generateFilename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; fileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;publishOn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullYear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;br&gt;      target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;publishOn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMonth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// more code here&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first change I&#39;m going to do is to split each part of the filename
generation into its own function. Let&#39;s take that first part and pull it into a
function:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;publishDatePart&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;publishOn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullYear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;publishOn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMonth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then call it:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Publisher&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;generateFilename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; fileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;publishDatePart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// more code here&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running the tests confirms we&#39;ve not broken anything. Another good guiding
principle here is that when refactoring, you should be able to stop and have
left the code in a better place than when you found it. Although it&#39;s only a
small step, it&#39;s easier to figure out and deal with this code now it&#39;s pulled a
little bit apart, so we&#39;ve made an improvement.&lt;/p&gt;
&lt;h3&gt;Pulling out all the functions&lt;/h3&gt;
&lt;p&gt;I&#39;ll spare you the details of each function but this is what we&#39;re left with
after taking the step above multiple times:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Publisher&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;generateFilename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; fileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;publishDatePart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    fileName &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categoryPrefix&lt;br&gt;    fileName &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;kindPart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    fileName &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    fileName &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;randomPart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    fileName &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isPersonal &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ageRange &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    fileName &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;titlePart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    fileName &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.jpg&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; fileName&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;titlePart&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; truncatedTitle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[^&#92;[a-z&#92;]]&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;gi&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; truncateTo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; truncatedTitle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; truncatedTitle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;truncatedTitle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; truncateTo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;randomPart&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;kindPart&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;kind&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;_&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;publishDatePart&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;publishOn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullYear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;publishOn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMonth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s really important during this part of work that you resist the urge to
change any of the code. The bodies of the functions are exactly as they were
before; I&#39;ve just extracted them into functions. Some of them we might not even
get to refactoring today; but that&#39;s OK, we&#39;re still making great progress and
the code is far more approachable for the next time we come to work on it. And
more importantly, we&#39;re now ready to make our feature change!&lt;/p&gt;
&lt;h3&gt;Making a feature change&lt;/h3&gt;
&lt;p&gt;I like to be driven by tests, so knowing that we&#39;re going to have more dashes in
the output than we do currently, let&#39;s go through each test and update it so
they have dashes in the places we expect. Here&#39;s one example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;removes other special characters from the book title&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Publisher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;generateFilename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;publishOn&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;categoryPrefix&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bio&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;biography&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;(My) &amp;lt;title$&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;2021-4-bio-biography-123-[0-9]{5}-mytitle&#92;.jpg&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we run the tests now, all seven are failing! Let&#39;s see if we can get them
back to passing. If you find this overwhelming, often I&#39;ll pick just one single
test (in Jest you can change an &lt;code&gt;it&lt;/code&gt; to &lt;code&gt;it.only&lt;/code&gt; and have only that test run).
This way you don&#39;t have a huge output and once you have one test passing you can
run the rest.&lt;/p&gt;
&lt;p&gt;The first thing we&#39;ll do is go through each individual part and remove any
dashes that are currently output. This way we&#39;ll make them all uniform - no
individual part will be responsible for adding dashes. Then we can easily make
it so we take all the parts and combine them with a dash. As it happens we only
have to do this to &lt;code&gt;titlePart&lt;/code&gt;, where we can lose the string interpolation
return just the title part:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;titlePart&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; truncatedTitle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[^&#92;[a-z&#92;]]&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;gi&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; truncateTo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; truncatedTitle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; truncatedTitle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; truncatedTitle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; truncateTo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can make the easy change to get us back to green. Let&#39;s create an array
for all the book&#39;s parts and join those together with a dash as the joining
character:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Publisher&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;generateFilename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; parts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;publishDatePart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;categoryPrefix&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;kindPart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;randomPart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isPersonal &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ageRange &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;titlePart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Boolean&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; extension &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.jpg&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; parts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; extension&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&#39;s one slight &amp;quot;gotcha&amp;quot; that I miss the first time; without the
&lt;code&gt;filter(Boolean)&lt;/code&gt; we include the empty string should &lt;code&gt;target.isPersonal&lt;/code&gt; be
&lt;code&gt;false&lt;/code&gt;, which means we end up joining the empty string with dashes and get
doubles. But once we spot that, we&#39;re green again and have our feature
implemented.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;There&#39;s much more we could do here; the code is by no means perfect. But it is
much cleaner than it was, it&#39;s got a comprehensive suite of tests, and by
pulling out its functionality into smaller methods we have put in place the
foundations to further iterate on this code when we next need to add a feature.
That extra time spent writing tests has paid off now, and it will continue to
pay off time and time again whenever we revisit this part of the codebase.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Learning from mistakes</title>
    <link href="http://www.jackfranklin.co.uk/blog/learning-from-mistakes/"/>
    <updated>2020-06-23T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/learning-from-mistakes/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;Today I&#39;m kicking off a new series on writing and maintaining JavaScript
software titled &amp;quot;Designing Good JavaScript&amp;quot; by looking at learning at our
mistakes. I hope you enjoy this post and the series!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;How many times have you loaded up a file in your codebase to make some quick
changes, only to be confused by the choices you made six months ago? How many
times has that architecture you worked so hard on in the past come back to bite
you? How often do you find yourself bemoaning a section of the codebase to a
colleague, thinking that the only way to solve it is a complete rewrite?&lt;/p&gt;
&lt;p&gt;The good news is that if you answered &amp;quot;yes&amp;quot; to any of those questions, you&#39;re
not alone, and you have something in common with me! I&#39;ve spent the most part of
my career maintaining large JavaScript applications and what I&#39;ve come to
realise is that &lt;strong&gt;it&#39;s easy to write code you can understand now, but hard to
write code you&#39;ll understand in six months.&lt;/strong&gt; The best engineers I&#39;ve worked
with aren&#39;t the best because they know every API method under the sun, or
because they can turn five lines of code into two with a clever &lt;code&gt;reduce&lt;/code&gt; call,
but because they write &lt;strong&gt;code that they (and their colleagues) can understand
now and code that can be understood in the future.&lt;/strong&gt; They have an awareness of
how a particular decision now can impact your velocity further down the line and
an ability to predict problems before they happen.&lt;/p&gt;
&lt;p&gt;How do these engineers get this ability? &lt;strong&gt;Experience.&lt;/strong&gt; They don&#39;t foresee
problems because they are able to look into a crystal ball, or experience
premonitions of the future like that kid in Final Destination, but because
they&#39;ve been there, done that, countless times. How do they know that a
particular approach might backfire? Because two years ago working at Company X,
it did.&lt;/p&gt;
&lt;p&gt;The good news is that whilst there is no substitute for experience and learning
from your mistakes
(&lt;a href=&quot;http://www.jackfranklin.co.uk/blog/the-three-software-developers/&quot;&gt;and being nice to yourself in the process&lt;/a&gt;)
there are many people, including yours truly, willing to share their mistakes
and lessons learned from them. No engineer knows everything, and no engineer
makes the right decision on software every time. Opinions on software are formed
over time as we write code, make decisions, and learn what works and what
doesn&#39;t. That&#39;s what this series is all about. Over the coming weeks I&#39;ll be
sharing opinions and stories from when a software decision backfired - or when
one really paid off - so that you can keep them in your back pocket when the
next time a similar decision has to be made. I&#39;ll reflect on teams that I&#39;ve
worked on that have executed efficiently, and teams who have got bogged down in
process, and everything inbetween. Think of this as a series where I share my
experiences so that you can take them and use them to inform your decisions.
There&#39;s no lecturing here.&lt;/p&gt;
&lt;p&gt;If you&#39;ve got any questions, comments, feedback, or just want to say hello,
&lt;a href=&quot;https://www.twitter.com/Jack_Franklin&quot;&gt;get in touch with me on Twitter&lt;/a&gt;. I&#39;m
excited to share these articles and would love to hear what you think, or any
suggestions for content.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>VSCode Productivity: The Magit plugin</title>
    <link href="http://www.jackfranklin.co.uk/blog/vscode-productivity-git-magit/"/>
    <updated>2020-06-25T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/vscode-productivity-git-magit/</id>
    <content type="html">&lt;p&gt;Over the next few weeks I&#39;m going to be sharing some videos demonstrating parts
of my workflow in VSCode - from managing changes with git (today&#39;s video), to
reviewing pull requests, to running tests, and so on.&lt;/p&gt;
&lt;p&gt;Today I want to share the
&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=kahole.magit&quot;&gt;Magit plugin&lt;/a&gt;
for VSCode. It&#39;s based on the Magit plugin in Emacs (which I have not used) and
aims to provide an easy to use interface to manage git changes and commits. I&#39;ve
found it a really great addition to my workflow and I highly recommend giving it
a go.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/kDISNtPYhjk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; class=&quot;youtube&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;em&gt;You can also watch this video
&lt;a href=&quot;https://www.youtube.com/watch?v=kDISNtPYhjk&quot;&gt;directly on Youtube&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you&#39;ve got any questions, comments, feedback, or just want to say hello,
&lt;a href=&quot;https://www.twitter.com/Jack_Franklin&quot;&gt;get in touch with me on Twitter&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Keeping Code Simple</title>
    <link href="http://www.jackfranklin.co.uk/blog/keep-javascript-code-simple/"/>
    <updated>2020-06-30T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/keep-javascript-code-simple/</id>
    <content type="html">&lt;p&gt;When I think about keeping code simple, I think about the progression of your
average software engineer from junior to mid to senior, and this one commonly
mentioned part of that journey:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Junior engineer&lt;/strong&gt;: writes function implementation over multiple lines,
favouring simple method calls and comments over succinctness. Probably misses
some chances to improve the performance or readability, or doesn&#39;t use the
best API method for the task at hand, but the code works.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mid level engineer&lt;/strong&gt;: condenses the function down to as few lines as
possible, using smart coding tricks to reduce lines. Code works, maybe even
performs faster than the junior&#39;s version, but is likely harder to understand
or modify.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Senior engineer&lt;/strong&gt;: implements function much more closely to the junior;
their code is straightforward, uses the right API methods, ensures good
performance - but doesn&#39;t prematurely optimise - and is easy to understand and
modify.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;ve seen this pattern play out multiple times - and I&#39;ve been each of those
engineers. I remember refactoring some code in a pull request that a junior
developer on our team wrote, thinking I was so smart. I made so many
improvements - and got it down from 10 lines to 4! That&#39;s fantastic, I thought.
The change got merged into the code base and not long after it was largely
reverted back to its original state because people needed to work with that
code, and working with such succinct code with so much squashed into just four
lines was nearly impossible. I learned a good lesson that day: &lt;strong&gt;lines of code
are not a good metric of code quality.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think about this
&lt;a href=&quot;https://twitter.com/jaffathecake/status/1213077702300852224&quot;&gt;tweet about using reduce by Jake Archibald&lt;/a&gt;
often:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All code using &lt;code&gt;array.reduce&lt;/code&gt; should be rewritten without &lt;code&gt;array.reduce&lt;/code&gt; so
it&#39;s readable by humans&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whether or not you agree about the specifics of the
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt;reduce function&lt;/a&gt;
isn&#39;t important, but the sentiment behind Jake&#39;s tweet is. You&#39;re not writing
code to impress your colleagues. The &amp;quot;smartness&amp;quot; of your code doesn&#39;t matter.
The readability of your code does. Keep code simple and it will be less effort
to understand, less effort to change, and less frustrating to work with. Traits
of simple code include (but are not limited to) the list below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All variables and functions are named based on their behaviour / functionality
and are easy to follow.&lt;/li&gt;
&lt;li&gt;Any functions in the code take a reasonable amount of arguments; no function
is so large that it needs five or more arguments to perform its job.&lt;/li&gt;
&lt;li&gt;Appropriate API methods are used for the task at hand and API methods are used
over custom implementations.&lt;/li&gt;
&lt;li&gt;Using the right data structures to represent your application&#39;s data.&lt;/li&gt;
&lt;li&gt;Comments are left if appropriate to add context and convey meaning that can&#39;t
be conveyed via code alone.&lt;/li&gt;
&lt;li&gt;&amp;quot;Smart&amp;quot; shortcuts are not used; you don&#39;t have to google the obscurities of
JavaScript&#39;s syntax to understand what the code does.&lt;/li&gt;
&lt;li&gt;Where code perhaps has to be less readable for performance reasons there is a
comment that explains this and ideally links to a document/email/Slack
thread/your company&#39;s internal wiki that adds context.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If some of those points feel a bit vague, don&#39;t worry. It&#39;s hard to summarise in
one quick list; we will be diving into each of the topics above in a dedicated
blog post.&lt;/p&gt;
&lt;p&gt;Sometimes, code just cannot be made simple. Maybe you&#39;re working with a horrible
legacy API whose interface is bizarre in every way possible, or you&#39;re stuck on
an old version of a library that you can&#39;t upgrade for a variety of reasons.
Most codebases I&#39;ve worked on have had a rough edge or a dark corner that
developers shy away from. We&#39;ll look at techniques to tackle this too and
migrate away from dark dingy corners to codebases and modules that are a
pleasure to work on.&lt;/p&gt;
&lt;p&gt;If you&#39;ve got any questions, comments, feedback, or just want to say hello,
&lt;a href=&quot;https://www.twitter.com/Jack_Franklin&quot;&gt;get in touch with me on Twitter&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>VSCode Productivity: The rewrap plugin</title>
    <link href="http://www.jackfranklin.co.uk/blog/vscode-productivity-rewrap-plugin/"/>
    <updated>2020-07-02T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/vscode-productivity-rewrap-plugin/</id>
    <content type="html">&lt;p&gt;Over the next few weeks I&#39;m going to be sharing some videos demonstrating parts
of my workflow in VSCode - from managing changes with git (today&#39;s video), to
reviewing pull requests, to running tests, and so on.&lt;/p&gt;
&lt;p&gt;Today I want to share the
&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=stkb.rewrap&quot;&gt;rewrap plugin&lt;/a&gt;
for VSCode. It&#39;s a fantastic tool for easily wrapping code comments, Git
commits, or Markdown files to a certain line length and I use it &lt;em&gt;all the time&lt;/em&gt;
when writing documentation in code.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/1YDuBhSQglQ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; class=&quot;youtube&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;em&gt;You can also watch this video
&lt;a href=&quot;https://www.youtube.com/watch?v=1YDuBhSQglQ&quot;&gt;directly on Youtube&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you&#39;ve got any questions, comments, feedback, or just want to say hello,
&lt;a href=&quot;https://www.twitter.com/Jack_Franklin&quot;&gt;get in touch with me on Twitter&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How code gets bad</title>
    <link href="http://www.jackfranklin.co.uk/blog/how-javascript-code-gets-bad/"/>
    <updated>2020-07-07T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/how-javascript-code-gets-bad/</id>
    <content type="html">&lt;p&gt;We&#39;ve all been there. The one corner (or maybe there&#39;s multiple!) of your
application that makes you cringe every time you have to touch that part of the
code. The proposed feature that you hope doesn&#39;t make it into the prioritised
list of work because implementing it means diving deep into the guts of the
nasty corner of your codebase that is hard if not impossible to work on with
confidence.&lt;/p&gt;
&lt;p&gt;At one company I worked at I had a very frustrated product manager exclaim
&amp;quot;Jack, it feels like whenever I propose a new feature on [site area X], you tell
me it can&#39;t be done&amp;quot;. The unfortunate truth was that it couldn&#39;t; that area of
the site functioned just fine but no one could tell you how or work on it
confidently without causing other bugs. The problem with areas of the site like
this is that they only get worse once they start deteriorating into what I like
to call &amp;quot;quick hack territory&amp;quot; which normally goes something like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An event happens that causes knowledge and confidence of a feature to be
lost; this could be the developer who built it moving on, a huge quick
rewrite to meet a rushed deadline, or a 3rd party dependency becoming
unmaintained.&lt;/li&gt;
&lt;li&gt;The next developer who has to work on that part of the codebase doesn&#39;t have
a solid knowledge, or they are up against a tight deadline, so they rush and
&amp;quot;hack&amp;quot; their change into place. They mean to come back to it later - as we
all do - but other work gets in the way.&lt;/li&gt;
&lt;li&gt;The next person who touches this area sees the previous person hacked their
way to success and either:
&lt;ol&gt;
&lt;li&gt;decides this code is in need of some attention to get it back to a
satisfactory standard&lt;/li&gt;
&lt;li&gt;decides that time pressures are too great and they hack their feature in
too&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Rinse and repeat - but every time you don&#39;t give the code the attention it
needs, you&#39;re making it worse.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I want to be very clear: I&#39;m not criticising any of the hypothetical developers
above who made that decision to get their feature out no matter the cost. We
have all been there, whether the pressures be deadlines, start-up fundraising
rounds, a big company event where the latest features have to have landed, and
so on. Sometimes taking the short-cut and sacrificing some code quality is the
right decision and sometimes it simply has to be done for the business.&lt;/p&gt;
&lt;p&gt;What we&#39;ll spend a lot of time in this series of blog posts talking about is not
only what makes good code, but how to turn bad code into good code in an
incremental way, a path of small improvements that transform your bad corners
into glorious palaces (I&#39;m stretching this analogy but roll with me!) that you
look forward to working on. &lt;strong&gt;Big bang rewrites are not the way forward and
should be a last resort.&lt;/strong&gt; They are expensive, full of risk and deliver no value
until the day comes to release them. Instead we can use a variety of techniques
to migrate from within, starting small and growing with every deploy. This is a
technique I&#39;ve used many times and whilst it can be slow and frustrating at
times it&#39;s also a reliable way to improve your system bit by bit whilst keeping
risk low and ultimately your users and stakeholders happy as you replace the
engine as the car runs smoothly.&lt;/p&gt;
&lt;p&gt;If you&#39;ve got any questions, comments, feedback, or just want to say hello,
&lt;a href=&quot;https://www.twitter.com/Jack_Franklin&quot;&gt;get in touch with me on Twitter&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Better code reviews</title>
    <link href="http://www.jackfranklin.co.uk/blog/how-to-do-good-code-reviews/"/>
    <updated>2020-07-09T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/how-to-do-good-code-reviews/</id>
    <content type="html">&lt;p&gt;When you get a code review request from a colleague, what do you focus on? What
reaches the bar for what you consider something that&#39;s worth commenting on? And
do you make it clear when you&#39;re making a comment on something vs considering
something so important to change that the code review shouldn&#39;t be merged
without it?&lt;/p&gt;
&lt;p&gt;Code review is hard. I&#39;ve seen people do it really well and people do it really
badly, but most of us are somewhere in the middle. Giving feedback to people is
hard, and it takes practice to be comfortable taking feedback on that large
piece of code you&#39;ve spent the last couple of days thinking about. Code reviews
are so crucial to a team&#39;s pace, but also their happiness. I&#39;ve seen bad code
reviews become almost infamous and hurt a team&#39;s culture because people start to
feel unsafe sharing their code for review. A good code review process gets you
better code in the codebase whilst at the same time boding your team, increasing
knowledge sharing and providing a great opportunity for team members to learn
from each other.&lt;/p&gt;
&lt;p&gt;With that in mind, here&#39;s some things I&#39;ve learned that have helped me improve
code review - both reviews that I get from others, and reviews I give others:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Automate as much of code review as you can&lt;/strong&gt;. Code review isn&#39;t for comments
on syntax, or the use of single quotes over double quotes, or for spotting
variables that aren&#39;t used. Use ESLint or other such tools rigorously to
enforce your team&#39;s coding styles, and reach for a code formatter like
Prettier that auto-formats code to a style. Not everyone may not love every
formatting choice, but that doesn&#39;t matter. Time spent arguing the amount of
spaces to indent is not worth it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;As the creator of the code, leave comments or links to context where it
makes sense&lt;/strong&gt;. We&#39;ve all made a change that has a piece of code that seems odd
on first glance. Maybe you have to implement some really odd logic that
doesn&#39;t make sense until you really dig in, or you had to work around a
browser bug and apply a weird CSS trick to get it to look just right. Someone
reviewing your code is going to see those oddities and ask about them. I like
to proactively comment on my own code reviews with links to
documentation/screenshots/etc that explain why the code is how it is (I often
do this in actual code comments rather than comments on GitHub). That doesn&#39;t
mean the code can&#39;t be improved, but it saves some back and forth explaining
things to the reviewer. If the reviewer has more context they can spend less
time figuring that out and more time thinking about your approach and any
potential issues it might cause.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Assume good intent&lt;/strong&gt;. If you&#39;re reviewing some code and you can&#39;t understand
why the author did it the way they did, one of two things is true: either the
author is a dreadful developer, or they have some context that you don&#39;t. And
hopefully it&#39;s incredibly unlikely to be the former! They might have tried it
three other ways before settling on that option, or there might be a
requirement for the change that you&#39;ve misunderstood. Never be afraid to ask
for clarity or check your understanding of something. I learn nearly as much
about a codebase from my colleague&#39;s code changes that I review as I do by
making changes myself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make it clear if you&#39;re requesting a change or making a suggestion&lt;/strong&gt;. Most
code review comments fall into one of two categories: something you noticed
but don&#39;t feel that strongly about, or comments that you think absolutely
should be fixed before merging the change. If you can make it clear in each
comment how strongly you feel about it, and if it&#39;s a suggestion the author
should feel free to ignore if they disagree, or if it&#39;s something that must be
fixed. That way as the person going through your review on my code I can
easily see the most important comments and focus on those, and I know when to
initiate a discussion if I disagree with your suggestion, or when you&#39;re
leaving a comment that I can choose to ignore or not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&#39;ll definitely be revisiting the topic of code reviews in future blog posts;
they are a great way to think about the code you&#39;re writing and its potential
confusion points (in my head I like to think &amp;quot;what would a reviewer say about
this?&amp;quot; or &amp;quot;what is non-obvious to the person reviewing this code?&amp;quot;) to help me
improve my code.&lt;/p&gt;
&lt;p&gt;In the mean time, I&#39;d love to hear about your team&#39;s practices when it comes to
code review; feel free to
&lt;a href=&quot;https://www.twitter.com/Jack_Franklin&quot;&gt;let me know on Twitter&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Testing event listeners in JavaScript</title>
    <link href="http://www.jackfranklin.co.uk/blog/testing-event-listeners-javascript/"/>
    <updated>2020-07-14T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/testing-event-listeners-javascript/</id>
    <content type="html">&lt;p&gt;Testing JavaScript code that&#39;s asynchronous can prevent its own set of
challenges that you have to ensure you deal with when writing your tests.&lt;/p&gt;
&lt;p&gt;I recently came across a test that fell foul to the asynchronous code it was
trying to test and in this post I&#39;ll show you how to look out for these tests
and how to fix it.&lt;/p&gt;
&lt;h3&gt;The problem&lt;/h3&gt;
&lt;p&gt;Let&#39;s imagine we&#39;re working on an API that lets you make requests to load pages
in a web browser. We have a &lt;code&gt;Page&lt;/code&gt; class that provides the &lt;code&gt;makeRequest&lt;/code&gt; method
that will emit a &lt;code&gt;request_started&lt;/code&gt; event:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; EventEmitter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;events&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EventEmitter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;makeRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;request_started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; url &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means any other part of this codebase can listen out for these events:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;request_started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;/* do something here */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is useful functionality, so let&#39;s write a test for it:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Page class&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;emits an event when a request is started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;request_started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;www.foo.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;makeRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;www.foo.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This test passes, but it&#39;s hiding a problem. What happens if we deliberately
break it? If we remove the &lt;code&gt;this.emit&lt;/code&gt; line, look what the test outputs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PASS  src/site/code-for-posts/async-tests/async-tests.test.js
 Page class
   ✓ emits an event when a request is started (6 ms)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is less good 😒. But why does it pass?&lt;/p&gt;
&lt;p&gt;If we take a look at the test body, think about what happens when the
&lt;code&gt;request_started&lt;/code&gt; event never fires. Which of the lines below will end up being
executed?&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;emits an event when a request is started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;request_started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;www.foo.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;makeRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;www.foo.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because our &lt;code&gt;expect&lt;/code&gt; call is within the event listener callback, it never runs
if the event never fires! This is problematic because most test frameworks
assume a test that doesn&#39;t explicitly fail is passing. Most test frameworks
won&#39;t notify you if your test never actually makes an assertion.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can catch these tests earlier by following this habit: when you write a
test and it passes, &lt;strong&gt;deliberately try to make it fail&lt;/strong&gt;. When you write a new
test, &lt;strong&gt;see it fail at least once&lt;/strong&gt; to have confidence that you&#39;re testing the
right thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Luckily there&#39;s a couple of ways we can fix this test.&lt;/p&gt;
&lt;h3&gt;Solution one: &lt;code&gt;expect.assertions&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If we&#39;re using Jest, we have access to
&lt;a href=&quot;https://jestjs.io/docs/en/expect.html#expectassertionsnumber&quot;&gt;&lt;code&gt;expect.assertions&lt;/code&gt; and &lt;code&gt;expect.hasAssertions&lt;/code&gt;&lt;/a&gt;.
These tell Jest to fail the test if there are not the amount of assertions
you&#39;re expected, which is a great way to catch the case where you have an
asynchronous assertion that doesn&#39;t run. If we update this test and let it fail
we can see the output and now the test is failing, catching the issue with the
implementation code.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;emits an event when a request is started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  expect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;request_started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;www.foo.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;makeRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;www.foo.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And Jest will let us know that there were no assertions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FAIL  src/site/code-for-posts/async-tests/async-tests.test.js
Page class
  ✕ emits an event when a request is started (2 ms)

● Page class › emits an event when a request is started

  expect.assertions(1)

  Expected one assertion to be called but received zero assertion calls.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we avoid having a test that passes and hides an actual bug in our code.&lt;/p&gt;
&lt;h3&gt;Solution two: a spy&lt;/h3&gt;
&lt;p&gt;A &lt;code&gt;spy&lt;/code&gt; function is one that records every time it&#39;s called, and remembers the
arguments it was given, and what value it returned. You can create a spy based
on a real function in your codebase, or you can generate one on the fly to use
in a test. We can create a spy for our event handler, and in our test write code
to assert that it&#39;s called with the right arguments. We&#39;re going to use Jest&#39;s
API to create a spy (Jest calls them &amp;quot;mocks&amp;quot;, but they are mostly the same,
don&#39;t worry too much about the different terminology). If you&#39;re not using Jest
I highly recommend &lt;a href=&quot;https://sinonjs.org/releases/v9.0.2/spies/&quot;&gt;SinonJS&lt;/a&gt; which
is a great library for creating spies.&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;jest.fn()&lt;/code&gt; to create a spy, and pass it in as the event handler:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Page class&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;emits an event when a request is started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; handler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;request_started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;makeRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;www.foo.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeCalledTimes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice our new assertion for this test:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeCalledTimes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means our test will fail unless our handler is called exactly one time. You
can use the &lt;code&gt;toBeCalled()&lt;/code&gt; assertion, and that will pass if the handler is
called one or more times. More often than not I prefer to be strict and use
&lt;code&gt;toBeCalledTimes(1)&lt;/code&gt;. I want this test to fail if the handler is somehow called
5 times!&lt;/p&gt;
&lt;p&gt;With this change we also get a test failure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; FAIL  src/site/code-for-posts/async-tests/async-tests.test.js
  Page class
    ✕ emits an event when a request is started (2 ms)

  ● Page class › emits an event when a request is started

    expect(jest.fn()).toBeCalledTimes(expected)

    Expected number of calls: 1
    Received number of calls: 0

      16 |     page.makeRequest(&#39;www.foo.com&#39;)
      17 |
      18 |     expect(handler).toBeCalledTimes(1)
         |                     ^
      19 |   })
      20 | })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compare this test failure to the one when we used &lt;code&gt;expect.assertions&lt;/code&gt;. Notice
that it&#39;s more descriptive. The other test failed with a vague message that one
assertion was expected and none were found, whereas this test fails and even
provides a code snippet that points us to the exact line where the failure was.
If you&#39;re debugging this test failure, the second error message is more useful
and is likely to point you at the problem sooner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You should think about error messages when writing your tests - how can you
write a test to improve the message shown when the test fails?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There&#39;s one more improvement we can make to this test; rather than just ensuring
it&#39;s called, we can assert that it&#39;s called with the right data:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;emits an event when a request is started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; handler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;request_started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;makeRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;www.foo.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeCalledTimes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeCalledWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;www.foo.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a thorough test; we ensure it&#39;s called once, and with the right
arguments.&lt;/p&gt;
&lt;h3&gt;The structure of a test&lt;/h3&gt;
&lt;p&gt;I have
&lt;a href=&quot;http://www.jackfranklin.co.uk/blog/the-perfect-javascript-unit-test/&quot;&gt;blogged before about the structure of the perfect unit test&lt;/a&gt;
and the examples today highlight how important that is. A unit test has three
distinct parts to it, in this exact order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Setup&lt;/strong&gt;: prepare any test data&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Invoke&lt;/strong&gt;: call the code you want to test&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assert&lt;/strong&gt;: make assertions on the result&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;This is also known as the
&lt;a href=&quot;https://www.thephilocoder.com/unit-testing-aaa-pattern/&quot;&gt;&amp;quot;AAA pattern&amp;quot;: arrange, act, assert&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If we look at our initial, flawed test that we started with, that does not
follow the three steps:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;emits an event when a request is started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Setup&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;request_started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Assert&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;www.foo.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Invoke&lt;/span&gt;&lt;br&gt;  page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;makeRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;www.foo.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s in completely the wrong order! It&#39;s odd to read; your eyes have to start at
the top, go to the bottom, and then jump right into the middle again.&lt;/p&gt;
&lt;p&gt;Even the test that used &lt;code&gt;expect.assertions()&lt;/code&gt; has the same problems:```js&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;emits an event when a request is started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Setup&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Assert&lt;/span&gt;&lt;br&gt;  expect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;request_started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Assert (again)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;www.foo.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Invoke&lt;/span&gt;&lt;br&gt;  page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;makeRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;www.foo.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s only the final version of our test that uses spies that has our three steps
in the right order:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;emits an event when a request is started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Setup&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; handler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Invoke&lt;/span&gt;&lt;br&gt;  page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;request_started&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;makeRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;www.foo.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Assert&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeCalledTimes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeCalledWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;www.foo.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If a test isn&#39;t following these three steps, there&#39;s almost certainly an
improvement that can be made to make it adhere to the steps. They&#39;ve become a
well known pattern for a reason; a test that has these steps in their logical
order is more likely to be a useful, readable test, and as we&#39;ve seen in this
blog post, give more useful failure messages.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Writing good comments: the why, not the how</title>
    <link href="http://www.jackfranklin.co.uk/blog/code-comments-why-not-how/"/>
    <updated>2020-07-28T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/code-comments-why-not-how/</id>
    <content type="html">&lt;p&gt;Code comments often get a bad reputation amongst developers as a waste of time,
or a sign that your code could be improved. Here&#39;s a quote from a
&lt;code&gt;CONTRIBUTING.md&lt;/code&gt; file I found on GitHub (and there&#39;s many, many more like it):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Comments should be avoided. If the code cannot be understood without comments,
re-write the code to make it self-explanatory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think this is pretty poor, incorrect advice the vast majority of the time. I
think this stems back to most people&#39;s experience learning code. I have a strong
memory of a lecturer in my first term of my Computer Science degree (although
you&#39;ll find this advice in many courses, regardless of if it&#39;s University or
not) telling us:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every line of code should have a comment explaining what it does. Your
upcoming coursework will be marked on this criteria.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, if you&#39;re a new student fresh into the course, what do you do? You comment
your code of course!&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// set the input value from the ENV value bar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; inputValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bar&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// now multiply it by 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; inputValue &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// now pass it to the square function&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; finalValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// this function squares a number and returns the new number&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; x&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The people who say that comments are bad are thinking of this style of
commenting, and &lt;em&gt;they&#39;d be absolutely right!&lt;/em&gt; Comments like this that describe
the &amp;quot;how&amp;quot; of programming add absolutely no value. Each of those comments above
added nothing that couldn&#39;t be understood from the code immediately below it.&lt;/p&gt;
&lt;h3&gt;Comment the &lt;em&gt;why&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;The problem with the comments above is that they comment the &lt;em&gt;how.&lt;/em&gt; They
describe the steps we take. Those comments are very rarely useful; code does a
good job at explaining how we do something. After all, lines of code are
instructions to tell the computer how to do something.&lt;/p&gt;
&lt;p&gt;Most of the time you&#39;ll find that you don&#39;t need to leave a myriad of comments
because you can write the code you want to and you don&#39;t hit any oddities or
quirks that cause the code to look unusual. But every now and then you&#39;ll hit a
situation where you can&#39;t write code that&#39;s easy to understand. Maybe it&#39;s a bug
that you&#39;re working around, or maybe it&#39;s a legacy system that means you can&#39;t
solve the problem how you&#39;d like, or maybe there&#39;s just no easy way to make the
code better.&lt;/p&gt;
&lt;p&gt;I once worked for a payments processing company and each day a large SQL query
would run to select payments to pay-out. This query was highly optimised (we
needed it to run pretty quickly) and very complex - there were a number of edge
cases to consider. We put a lot of effort into making it as clear as it possibly
could be, but ultimately it would never be easy to understand, there was just
too much code with lots of conditionals and logic that you&#39;d only understand
with certain context about our business and how it ran.&lt;/p&gt;
&lt;p&gt;I wanted to find an example that I could show you, so I went diving into the
React codebase to find one. You don&#39;t need to be a React developer to follow
along. Here&#39;s the code I wanted to highlight:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Currently, key can be spread in as a prop. This causes a potential&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// issue if key is also explicitly declared (ie. &amp;lt;div {...props} key=&quot;Hi&quot; /&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// or &amp;lt;div key=&quot;Hi&quot; {...props} /&gt; ). We want to deprecate key spread,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// but as an intermediary step, we will use jsxDEV for everything except&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// &amp;lt;div {...props} key=&quot;Hi&quot; /&gt;, because we aren&#39;t currently able to tell if&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// key is explicitly declared to be undefined or not.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;maybeKey &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  key &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; maybeKey&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(&lt;a href=&quot;https://github.com/facebook/react/blob/ddcc69c83b59ef0f895aa5020196e2ae9de36133/packages/react/src/ReactElement.js#L217&quot;&gt;And here&#39;s the link to it on GitHub&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Notice the code in question:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;maybeKey &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  key &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; maybeKey&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s not hard to understand what this code does. If &lt;code&gt;maybeKey&lt;/code&gt; is not
&lt;code&gt;undefined&lt;/code&gt;, we set the &lt;code&gt;key&lt;/code&gt; property to the stringified version of &lt;code&gt;maybeKey&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The string conversion is a little JS trick - &lt;code&gt;&#39;&#39; + maybeKey&lt;/code&gt; will convert
&lt;code&gt;maybeKey&lt;/code&gt; to a string. For example &lt;code&gt;&#39;&#39; + 2&lt;/code&gt; returns &lt;code&gt;&amp;quot;2&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But here it&#39;s all about the &lt;em&gt;why.&lt;/em&gt; The comment for this code is great. It calls
out the problem, gives two examples and explains the long term plan as well as
the short term solution.&lt;/p&gt;
&lt;p&gt;If you&#39;re after a comment that I left in code I wrote,
&lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/master:third_party/devtools-frontend/src/scripts/component_bridges/generate_closure.ts;l=60?originalUrl=https:%2F%2Fcs.chromium.org%2F&quot;&gt;this comment in some TypeScript =&amp;gt; Closure Compiler code&lt;/a&gt;
is a really good example of the types of comments that I think are super
valuable.&lt;/p&gt;
&lt;p&gt;All code can eventually be understood; code is ultimately instructions to the
computer to do something. Code can be confusing but it can&#39;t lie, given enough
time any developer can step through code and work out exactly &lt;em&gt;what it does&lt;/em&gt;.
But it&#39;s much harder to work out &lt;em&gt;why&lt;/em&gt; it does that. Give your colleagues (or
future you, in six months time) the context behind &lt;em&gt;why&lt;/em&gt; the code does what it
does and you&#39;ll be much better for it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Software Development on Windows 10 with WSL2</title>
    <link href="http://www.jackfranklin.co.uk/blog/software-javascript-development-windows-10-wsl/"/>
    <updated>2020-12-20T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/software-javascript-development-windows-10-wsl/</id>
    <content type="html">&lt;p&gt;Back in
&lt;a href=&quot;http://www.jackfranklin.co.uk/blog/frontend-development-with-windows-10/&quot;&gt;October 2019 I&#39;d taken the plunge and tried Windows for my development work&lt;/a&gt;.
It was largely a succesful experiment. By using the
&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10&quot;&gt;Windows Subsystem for Linux (WSL)&lt;/a&gt;,
I was able to run most of my tools effectively in Linux, something I&#39;m familiar
with, and with
&lt;a href=&quot;https://code.visualstudio.com/docs/remote/wsl&quot;&gt;VSCode&#39;s WSL Remote plugin&lt;/a&gt;, I
could run VSCode in Windows connected to the Linux environment provided by WSL,
and things felt very familiar.&lt;/p&gt;
&lt;h3&gt;Shortcomings of WSL&lt;/h3&gt;
&lt;p&gt;That said, there were some minor issues and frustrations with WSL and this
workflow. The main one was that WSL 1 was known to be much slower at file reads
and writes. You might think this isn&#39;t a huge deal - but if you&#39;re running a
package manager like &lt;code&gt;npm&lt;/code&gt; and installing a bunch of dependencies, those reads
and writes add up to the point where it&#39;s noticably slow (and I&#39;m running on a
fairly beefy XPS laptop).&lt;/p&gt;
&lt;p&gt;WSL 1 also had some holes in terms of application support, you couldn&#39;t use
Docker - not something I do regularly, but something that&#39;s useful to be able to
reach for - and at times I found the VSCode WSL integration to be slightly
laggy. Not much, and not often, but everything wasn&#39;t &lt;em&gt;quite&lt;/em&gt; as smooth as it
would be on the MacBook I usually worked on.&lt;/p&gt;
&lt;h3&gt;Enter WSL 2&lt;/h3&gt;
&lt;p&gt;WSL 2 (see an &lt;a href=&quot;https://www.youtube.com/watch?v=MrZolfGm8Zk&quot;&gt;intro video here&lt;/a&gt;)
promised major improvements over WSL 1. I can&#39;t go into the details of the
implementation, because frankly it&#39;s way over my head, but from the learnings of
the successes and failures of WSl 1 Microsoft were able to make amazing
improvements in WSL 2.
&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/compare-versions#:~:text=WSL%202%20provides%20the%20benefits,user%20experience%20as%20WSL%201.&quot;&gt;This comparsion on the MS site shows all the differences&lt;/a&gt;,
but the highlight for me was that file IO performance was drastically improved -
the docs quote 2-5x faster for running tools such as &lt;code&gt;git&lt;/code&gt; or &lt;code&gt;npm&lt;/code&gt;. I haven&#39;t
benchmarked, but running WSL 2 feels &lt;em&gt;so much snappier&lt;/em&gt; and I don&#39;t feel a
noticable delay when running a large &lt;code&gt;npm install&lt;/code&gt;. Additionally, WSL 2&#39;s
architectural changes enable it to run many, many more apps, so using tools like
Docker is now possible.&lt;/p&gt;
&lt;p&gt;And, you could upgrade a WSL 1 install to WSL 2, so the upgrade path was super
smooth!&lt;/p&gt;
&lt;h3&gt;Starting fresh&lt;/h3&gt;
&lt;p&gt;Given all the experimenting I&#39;d done when I first got the laptop to get WSL 1
installed (I had to install a Windows Insider build to get it, whereas now WSL
is available on the regular build), and the fact that the laptop was a bit
bogged down with various bits of software and accumulated &amp;quot;stuff&amp;quot;, I decided
last week to completely reformat the machine and start a fresh.&lt;/p&gt;
&lt;p&gt;For my future reference, for when I do it again or get a new machine, and for
others who may be interested in doing software development on Windows 10, I
decided to document the steps I took. Spoiler: there actually aren&#39;t that many!&lt;/p&gt;
&lt;h3&gt;Reinstalling Windows 10&lt;/h3&gt;
&lt;p&gt;You can install Windows however you like; my XPS came with a recovery disk,
which I got at via &amp;quot;Reset this PC&amp;quot; in System Settings. That let me do a factory
reset of the machine and left me with it running the same version that it was
when it first shipped to me. That was a super smooth process, but left me with a
Windows that was over a year out of date, so the first thing I did was let the
software updater do its thing. Many downloads and restarts later, I had a fresh,
up to date Windows 10 all ready to go.&lt;/p&gt;
&lt;h3&gt;Browser and 1Password&lt;/h3&gt;
&lt;p&gt;I&#39;m a big fan of &lt;a href=&quot;https://www.1password.com/&quot;&gt;1Password&lt;/a&gt; for storing all my
passwords and the main way I access it is via the Google Chrome extension, so my
first port of call is to download Chrome and sign in so all my extensions,
including 1Password, get synced.&lt;/p&gt;
&lt;h3&gt;WSL 2 and Ubuntu&lt;/h3&gt;
&lt;p&gt;I run the Ubuntu distro on WSL 2, but these steps should be the same regardless
of which distro you&#39;d like to run. I followed
&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10&quot;&gt;this guide on the Microsoft site&lt;/a&gt;.
It&#39;s got a fair few steps - you first have to enable WSL 1, then upgrade to WSL
2 (I&#39;m not sure if in time this will change), then download a kernel update (far
less scary than it sounds), before setting the default version to WSL 2, and
&lt;em&gt;finally&lt;/em&gt; then installing Ubuntu.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The docs mention that if you&#39;re on the Windows Insiders build, you can use the
experimental &lt;code&gt;wsl --install&lt;/code&gt; command.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This process is a bit manual and takes a few minutes as some of the steps
require a restart of your machine, but it&#39;s just a case of following the
instructions carefully and you&#39;ll be up and running.&lt;/p&gt;
&lt;h3&gt;The Windows Terminal&lt;/h3&gt;
&lt;p&gt;One of my major sticking points for Windows was the lack of a good terminal
application. On OS X / Linux there&#39;s a great choice between the built in
defaults, iTerm 2 (Mac) or others such as Alacritty (cross platform).&lt;/p&gt;
&lt;p&gt;Thankfully Microsoft are rectifying that with the
&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/terminal/get-started&quot;&gt;Windows Terminal&lt;/a&gt;,
which is looking great! Whilst it&#39;s still got a few rough edges (primarily a
lack of a settings interface, so you configure it via a JSON file only) it&#39;s
really come a long way and I highly recommend it. When you run it, it will load
a Windows Powershell by default, but you can
&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/terminal/customize-settings/global-settings#default-profile&quot;&gt;customise the default profile&lt;/a&gt;,
so I&#39;ve set it to load my Ubuntu WSL 2 environment by default.&lt;/p&gt;
&lt;h3&gt;VSCode&lt;/h3&gt;
&lt;p&gt;VSCode is my editor of choice and is really the best option on Windows for me
because of the previously mentioned WSL integration. I donwload this onto
Windows and then use the
&lt;a href=&quot;https://code.visualstudio.com/docs/editor/settings-sync&quot;&gt;VSCode settings sync&lt;/a&gt;.
This used to require an extension to VSCode but is now built-in, and I use this
to sync settings between my machines. This means I can download VSCode, log in
and sync, and then all my extensions and settings will be downloaded for me. If
you use VSCode, I highly recommend syncing your settings. Even if you only use
one machine at all times, it&#39;s a great way to back up your settings should you
have to reformat your machine in the future.&lt;/p&gt;
&lt;h3&gt;Diving into Ubuntu&lt;/h3&gt;
&lt;p&gt;At this point I&#39;ve now got everything set up on the Windows side, and I fire up
the Windows Terminal to get the Ubuntu environment configured. These steps are
largely personal preference, but the tools I reach for are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://fishshell.com/&quot;&gt;Fish&lt;/a&gt; as my shell, along with
&lt;a href=&quot;https://github.com/jorgebucaran/fisher&quot;&gt;Fisher&lt;/a&gt; for managing the plugins. I
use &lt;code&gt;chsh -s (which fish)&lt;/code&gt; to change the default shell to Fish, so when I
load up the terminal it loads into Fish by default.&lt;/li&gt;
&lt;li&gt;I use &lt;a href=&quot;https://asdf-vm.com/&quot;&gt;asdf&lt;/a&gt; to manage all my versions of various
languages, such as Node. I like asdf because it works well, never conflicts
with other tools, and can be used to manage loads of languages - so I don&#39;t
have to have separate tools for Ruby, Node, etc, but just use asdf for
everything. I then immediately install Node as that&#39;s the main language I
rely on.&lt;/li&gt;
&lt;li&gt;I then install the
&lt;a href=&quot;https://github.com/cli/cli/blob/trunk/docs/install_linux.md&quot;&gt;GitHub CLI&lt;/a&gt;. I
love using this to create and clone repositories
(&lt;code&gt;gh repo clone jackfranklin/dotfiles&lt;/code&gt;) and also &lt;code&gt;gh pr create&lt;/code&gt; to create
pull requests.&lt;/li&gt;
&lt;li&gt;I install my &lt;a href=&quot;https://github.com/jackfranklin/dotfiles&quot;&gt;dotfiles&lt;/a&gt; which I&#39;ve
built up over the years and they have plenty of little snippets that I rely
on, including my custom
&lt;a href=&quot;https://github.com/jackfranklin/dotfiles/blob/master/fish/config.fish#L1&quot;&gt;aliases&lt;/a&gt;
which I have safely in muscle memory and help me go quicker through the
terminal.&lt;/li&gt;
&lt;li&gt;I follow the
&lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key&quot;&gt;GitHub guide&lt;/a&gt;
to generate a new SSH key (I can &lt;em&gt;never&lt;/em&gt; remember the steps!) and add that to
my GitHub profile, so I&#39;m ready to clone, push and pull against both my
public and private repositories.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I find Windows 10 a great environment to be productive in; the improvements to
WSL 2 along with the ability of VS Code to connect seamlessly to it to create an
environment that is pretty close to the Linux environments I usually have set-up
on the Mac machines I normally work on.&lt;/p&gt;
&lt;p&gt;With
&lt;a href=&quot;https://www.zdnet.com/article/microsoft-linux-gui-apps-coming-to-windows-10-wsl-along-with-gpu-access/&quot;&gt;WSL set to gain the ability to run Linux GUI apps&lt;/a&gt;
it&#39;s exciting to see how Windows 10 and WSL progresses in the next few years.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Remapping Keys on Windows 10 with Power Toys</title>
    <link href="http://www.jackfranklin.co.uk/blog/remapping-keyboard-keys-windows-10-power-toys/"/>
    <updated>2020-12-27T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/remapping-keyboard-keys-windows-10-power-toys/</id>
    <content type="html">&lt;p&gt;Since moving to Windows 10 something I&#39;ve always struggled with is how to remap
keys on a keyboard. I don&#39;t remap much, but one remapping that I&#39;ve used now for
about ten years is that I remap &lt;code&gt;Caps Lock&lt;/code&gt; to &lt;code&gt;ESC&lt;/code&gt;. This started when I was
learning Vim, and has become so commited to muscle memory that I can&#39;t go back
from it and I&#39;m rendered useless on any machine that doesn&#39;t have this mapped!&lt;/p&gt;
&lt;p&gt;On Mac OS this remapping was easy; the keyboard settings lets you remap certain
keys, and tools like &lt;a href=&quot;https://karabiner-elements.pqrs.org/&quot;&gt;Karabiner Elements&lt;/a&gt;
offered far more control. On Windows however, I could never find a solution. I
used &lt;a href=&quot;https://github.com/susam/uncap&quot;&gt;uncap&lt;/a&gt; and that did the job, but it was a
bit manual, and only (by design) offered limited functionality. I really wanted
a tool I could install, configure and forget about, that also gave me the
ability to remap multiple keys should I need.&lt;/p&gt;
&lt;h3&gt;Power Toys&lt;/h3&gt;
&lt;p&gt;I then discovered
&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/powertoys/&quot;&gt;Power Toys&lt;/a&gt;, a free set of
programs for Windows 10 &amp;quot;power users&amp;quot; that provide a bunch of additional
functionality. I&#39;m surprised some of these aren&#39;t built into Windows by default
(maybe one day they will), but one of the utilities that Power Toys provided is
&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/powertoys/keyboard-manager&quot;&gt;Keyboard Manager&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Keyboard Manager lets you define mappings intuitively; you hit the key you want
to remap, then press the key ou want to remap it to. In my case, I hit
&lt;code&gt;Caps Lock&lt;/code&gt;, then &lt;code&gt;ESC&lt;/code&gt;, and it was done! It also provides a visible list of
mappings, and makes it easy to remove them if you make a mistake or change your
mind.&lt;/p&gt;
&lt;p&gt;I highly recommend checking out Power Toys, it has much to offer including a
&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/powertoys/fancyzones&quot;&gt;Window layout manager&lt;/a&gt;
and a
&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/powertoys/run&quot;&gt;OS X Spotlight-esque launcher&lt;/a&gt;.
I&#39;ll definitely be exploring these further!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>VSCode Productivity: Navigating files with Breadcrumbs</title>
    <link href="http://www.jackfranklin.co.uk/blog/vscode-productivity-navigating-with-breadcrumbs/"/>
    <updated>2021-01-31T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/vscode-productivity-navigating-with-breadcrumbs/</id>
    <content type="html">&lt;p&gt;Over the next few weeks I&#39;m going to be sharing some videos demonstrating parts
of my workflow in VSCode - from managing changes with git (today&#39;s video), to
reviewing pull requests, to running tests, and so on.&lt;/p&gt;
&lt;p&gt;Today I want to share how I use the
&lt;a href=&quot;https://code.visualstudio.com/Docs/editor/editingevolved#_breadcrumbs&quot;&gt;VSCode Breadcrumbs&lt;/a&gt;
with a handy keyboard shortcut and a bit of configuration to make jumping
between files in the same directory really efficient:&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/u3rmf4gEb7Y&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; class=&quot;youtube&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;em&gt;You can also watch this video
&lt;a href=&quot;https://www.youtube.com/watch?v=u3rmf4gEb7Y&quot;&gt;directly on Youtube&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you&#39;ve got any questions, comments, feedback, or just want to say hello,
&lt;a href=&quot;https://www.twitter.com/Jack_Franklin&quot;&gt;get in touch with me on Twitter&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Comparing Svelte and React</title>
    <link href="http://www.jackfranklin.co.uk/blog/comparing-svelte-and-react-javascript/"/>
    <updated>2021-03-09T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/comparing-svelte-and-react-javascript/</id>
    <content type="html">&lt;p&gt;Last year I created &lt;a href=&quot;https://pomod.one/&quot;&gt;Pomodone&lt;/a&gt;, a small time tracking
application based on the Pomodoro technique of working in 25 minute intervals.
It&#39;s a pretty basic app; it has a 25 minute timer (that runs in a Web Worker)
and saves a history of your &amp;quot;poms&amp;quot; to a small Firebase database. I initially
built it using React (well, Preact actually) but I then started to play around
with Svelte, and decided rebuilding the app in Svelte might be a nice way to
blog about the similarities and differences between the libraries.&lt;/p&gt;
&lt;p&gt;This is &lt;strong&gt;not a post declaring Svelte to be better than React, or vice-versa&lt;/strong&gt;.
This is a post where I&#39;ll tell you about my preferences, and what I find easier
or harder with either framework. I&#39;m not here to pick a fight! Plus, Pomodone is
hardily a vastly complex application that could be used to fully put React or
Svelte through its paces. Think of this post as a commentary based on my
experience throwing a side project together, focusing on the developer
experience putting these components together.&lt;/p&gt;
&lt;h3&gt;Authentication&lt;/h3&gt;
&lt;p&gt;The app uses Firebase Authentication to log a user in via either their GitHub or
Google account. I &lt;em&gt;love&lt;/em&gt; Firebase Authentication, it&#39;s such an easy way to add
auth to side projects.&lt;/p&gt;
&lt;p&gt;React&#39;s hooks are a great way to package this up; I create a &lt;code&gt;useCurrentUser&lt;/code&gt;
hook which listens out to authentication changes and sets some state
accordingly. I can then trust React to re-render as required when an
authentication change is noted.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;useCurrentUser&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCurrentUser&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; firebase&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onAuthStateChanged&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;setCurrentUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;        details&lt;br&gt;          &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;              &lt;span class=&quot;token literal-property property&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; details&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;displayName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;              &lt;span class=&quot;token literal-property property&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string-property property&quot;&gt;&#39;google.com&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Google&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;token string-property property&quot;&gt;&#39;github.com&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;GitHub&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;details&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;providerData&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;providerId&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;              &lt;span class=&quot;token literal-property property&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; details&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;uid&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within any component, I can write:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useCurrentUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is nice; it&#39;s low effort and lets any component quickly access the current
user. The only downside of this is that you potentially have many
&lt;code&gt;onAuthStateChanged&lt;/code&gt; listeners; I could mitigate this by only binding one
listener, or by putting the current user in a
&lt;a href=&quot;https://reactjs.org/docs/context.html&quot;&gt;context instead&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Talking of context, that&#39;s much closer to the approach I take with Svelte and
use a &lt;a href=&quot;https://svelte.dev/tutorial/writable-stores&quot;&gt;writable store&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; currentUser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;writable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;listenForAuthChanges&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; firebase&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onAuthStateChanged&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;details&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; details&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;displayName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token string-property property&quot;&gt;&#39;google.com&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Google&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token string-property property&quot;&gt;&#39;github.com&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;GitHub&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;details&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;providerData&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;providerId&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; details&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;uid&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within the top level Svelte component, I can call this within &lt;code&gt;onMount&lt;/code&gt;, which
will run once when the component is mounted (the function is &lt;code&gt;return&lt;/code&gt;ed so we
unsubscribe when the component is removed, much like how &lt;code&gt;useEffect&lt;/code&gt; lets you
return a function).&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;onMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;listenForAuthChanges&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now anywhere in my Svelte codebase, a component can import the &lt;code&gt;currentUser&lt;/code&gt;
writable store, and act accordingly. What I like is that &lt;code&gt;currentUser&lt;/code&gt; isn&#39;t a
value, it&#39;s a store, and therefore you have full control over how you deal with
it. You can either subscribe to it and manually control with state changes:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;newValue&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, if you want to just read the latest value, you can prefix it with a &lt;code&gt;$&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$currentUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is where some of Svelte&#39;s syntax trickery begins to shine; this dollar
prefix trick automatically subscribes you to the store&#39;s latest value. I both
like and dislike this; it&#39;s a nice syntax once you know it, but it&#39;s a bit odd
as a beginner to get used to. However I like that Svelte doesn&#39;t make me use the
&lt;code&gt;subscribe&lt;/code&gt; API every time I need to read the value.&lt;/p&gt;
&lt;p&gt;As far as basic authentication goes, both libraries seem to take similar
approaches here. Whilst the terminology and exact syntax differs slightly, both
allow you to subscribe to a Firebase listener and get updated when the
authentication state changes. React&#39;s contexts and Svelte&#39;s stores play almost
identical roles for their library.&lt;/p&gt;
&lt;h3&gt;Using a worker&lt;/h3&gt;
&lt;p&gt;Pomodone has to keep a 25 minute timer going and try to be as accurate as
possible. If a browser tab is backgrounded (e.g., not the focused tab), most
browsers will lower the priority of its &lt;code&gt;setTimeout&lt;/code&gt; calls and not run them
strictly to time. Most of the time on the web this isn&#39;t a massive deal, but
when a user is tracking 25 minutes of work via your app, it is! Plus, over the
course of 25 minutes, any slight time drift will cause the final time to be
quite far off. However, if these timeouts are moved into a web worker, they
should run to time and not get de-prioritised by the browser.&lt;/p&gt;
&lt;p&gt;Therefore, in my &lt;code&gt;Tracker&lt;/code&gt; component, I need to instantiate a web worker, send
it messages and receive data (such as time remaining) back. This is one area
where I found React more &amp;quot;admin heavy&amp;quot; than Svelte; because React components are
re-executed every time the component re-renders, you can easily end up with
thousands of workers being created! It&#39;s essential to use
&lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#useref&quot;&gt;useRef&lt;/a&gt; to avoid this
problem by maintaining a reference to the worker that you&#39;ve created.&lt;/p&gt;
&lt;p&gt;Firstly I set up the initial state I need for the component:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;currentPom&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCurrentPom&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useCurrentUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; worker &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then create a &lt;code&gt;useEffect&lt;/code&gt; hook that will instantiate the worker, if
required, and bind an event listener to listen for messages:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;worker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    worker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;workerURL&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;worker &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; worker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;onMessage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;tick&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;setCurrentPom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;currentPom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;currentPom&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;secondsRemaining&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;start&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// More branches removed here to save space...&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  worker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; onMessage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    worker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; onMessage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then, when the user hits the &amp;quot;Start&amp;quot; button, I have to send the worker a
message:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;onStartPom&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;worker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;br&gt;  worker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;startTimer&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Svelte looks pretty similar, but has two small changes that personally make the
Svelte code easier to read, in my opinion:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We don&#39;t have to keep the worker in &lt;code&gt;useRef&lt;/code&gt;, and can just assign it to a
variable.&lt;/li&gt;
&lt;li&gt;We can pull the event listener code out into a function more easily, as that
function won&#39;t then become a dependency to a &lt;code&gt;useEffect&lt;/code&gt; - at which point we
will have to wrap it in &lt;code&gt;useCallback&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Instantiating the worker is now:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; worker&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;onMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  worker &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;workerURL&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  worker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; onWorkerMessage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    worker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; onWorkerMessage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also don&#39;t have to set state by using React&#39;s &lt;code&gt;setX(oldX =&amp;gt; newX)&lt;/code&gt;
convention, and can just mutate the local variable:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onWorkerMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;tick&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    currentPom &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;currentPom&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;secondsRemaining&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;start&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// More branches here removed to save space...&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&#39;s where I start to have a preference for Svelte; the two are very similar
but once I got used to Svelte I found that React felt like jumping through
hoops. You can&#39;t create a worker instance, it has to go in a &lt;code&gt;useRef&lt;/code&gt;, and then
you can&#39;t easily pull code out into a function without then requiring
&lt;code&gt;useCallback&lt;/code&gt; so it can be a safe dependency on &lt;code&gt;useEffect&lt;/code&gt;. With Svelte I write
code that&#39;s closer to &amp;quot;plain&amp;quot; JavaScript, whereas in React more of my code is
wrapped in a React primitive.&lt;/p&gt;
&lt;h3&gt;Conditional rendering&lt;/h3&gt;
&lt;p&gt;One part of React that I&#39;ve always championed is how &lt;em&gt;it&#39;s just JavaScript&lt;/em&gt;. I
like that in React you don&#39;t use a distinct template syntax and instead embed
JavaScript, compared to Svelte&#39;s templating language:&lt;/p&gt;
&lt;side-by-side first=&quot;React&quot; second=&quot;Svelte&quot; is-wide-example=&quot;&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br&gt;  &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;pomsForCurrentDay&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entryData&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; finishedAt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entryData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timeFinished&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;H:mm:ss&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Finished at &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;finishedAt&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ul &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;poms-list&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;#each currentDayPoms &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;br&gt;      title&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Finished at &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timeFinished&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token string&quot;&gt;&#39;H:mm:ss&#39;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;li&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;each&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ul&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/side-by-side&gt;
&lt;p&gt;I was pleasantly surprised by Svelte&#39;s templating; in the past I&#39;ve found
templating languages overwhelming and inflexible, but Svelte offers just the
right amount of templating whilst enabling you to use JavaScript too. That said,
I will always find React&#39;s approach easier - at least in my head - and I think
more friendly to people familiar with JavaScript who are learning a library.&lt;/p&gt;
&lt;p&gt;However, Svelte does have some nice touches to its syntax when it comes to
rendering components (which feels very JSX-like). My favourite is the ability to
collapse props:&lt;/p&gt;
&lt;side-by-side first=&quot;Svelte&quot; second=&quot;Svelte (collapsed props)&quot;&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;History&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;pomodoros&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;pomodoros&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;History&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token class-name tag&quot;&gt;pomodoros&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/side-by-side&gt;
&lt;p&gt;This is something I&#39;ve longed for with React!&lt;/p&gt;
&lt;h3&gt;Reactivity in Svelte with $&lt;/h3&gt;
&lt;p&gt;React requires us to use &lt;code&gt;useEffect&lt;/code&gt; and other hooks because it fully controls
how all your code is run and re-runs your code whenever a component is
re-rendered. Svelte is different in that by default most of your code is only
going to run once; a &lt;code&gt;console.log(&#39;foo&#39;)&lt;/code&gt; line in a component will only run when
that component is first rendered. In React, it will run many times.&lt;/p&gt;
&lt;p&gt;React&#39;s re-rendering approach has its upsides: let&#39;s say you are taking in a big
list of data and running some function to convert it into data that you can
render. In React, within your component, you can write:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; input &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inputData&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; transformed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;transformItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;transformed&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this will always be up to date - should the user provide new
&lt;code&gt;props.inputData&lt;/code&gt;, the component will re-render and the output will be updated.&lt;/p&gt;
&lt;p&gt;The same is not true in Svelte:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; transformed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;transformItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;transformed&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the output will be rendered the first time the component is rendered, but
then not updated at all. We can solve this in two ways, either by using the &lt;code&gt;$:&lt;/code&gt;
label syntax, which marks the code as reactive, or by moving our transform logic
into the template:&lt;/p&gt;
&lt;side-by-side first=&quot;Using $&quot; second=&quot;Transform in template&quot; is-wide-example=&quot;&quot;&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token literal-property property&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; transformed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;transformItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;transformed&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;transformItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/side-by-side&gt;
&lt;p&gt;This is another example of Svelte taking JavaScript syntax and using it for a
slightly different meaning; it tells Svelte that the statement is &lt;em&gt;reactive&lt;/em&gt; and
should be recalculate should any imports change. You might also call it a
&amp;quot;computed property&amp;quot;. The second solution simply moves the logic into the
template, thus ensuring that when the component re-renders the logic is executed
again. In my time with Svelte this is the approach I&#39;ve gone with most of the
time, often pulling out the logic into a function:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;calculateOutputForItems&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Coming from React to Svelte this did catch me out numerous times but for me I
now prefer Svelte&#39;s approach, particularly because it removes some of the
boilerplate around &lt;code&gt;useEffect&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Component composition&lt;/h3&gt;
&lt;p&gt;Component composition is a huge part of what makes working with a component
based framework enjoyable or not and it&#39;s something that both React and Svelte
solve well. React&#39;s &lt;code&gt;children&lt;/code&gt; prop makes it very easy to render any provided
content:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Box&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;hello world!&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Box&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(If you&#39;ve not read it, the
&lt;a href=&quot;https://reactjs.org/docs/composition-vs-inheritance.html&quot;&gt;React guide on Composition is well worth a read&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Svelte does similar, using &lt;a href=&quot;https://svelte.dev/tutorial/slots&quot;&gt;slots&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Box component --&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;box&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;slot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;slot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- App component --&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Box&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;hello world!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Box&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;They take different approaches when it comes to multiple children, and this is
where I find myself preferring Svelte&#39;s approach more. React suggest passing
through multiple props:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Box&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;world!&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;P&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One gripe I&#39;ve had with this approach is that you lose the visual cues that
you&#39;re passing children into the Box component; they now aren&#39;t nested within
the Box when you render them like we&#39;re used to in HTML; it&#39;s now up to you to
read the props and spot which ones are being used to provide children. It&#39;s
easily done on this dummy example, but harder in &amp;quot;real world&amp;quot; applications - or
at least, I find it harder!&lt;/p&gt;
&lt;p&gt;Svelte&#39;s approach is to define multiple slots with explicit names to let the
user provide the elements that should fill those slots:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Box component --&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;box&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;slot&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;slot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;slot&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;slot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- App component --&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Box&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;hello&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;world!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Box&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I like this approach more because I can scan the code that renders the &lt;code&gt;Box&lt;/code&gt;
component and easily spot that it takes two children. If the &lt;code&gt;Box&lt;/code&gt; took any
props, they&#39;d be within the opening &lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt; tag, and they would be distinct from
any children props.&lt;/p&gt;
&lt;p&gt;My preference here is biased by the fact that I spend everyday at work building
web components, so Svelte&#39;s approach feels very familiar to
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots&quot;&gt;slots in web components&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Styling&lt;/h3&gt;
&lt;p&gt;I enjoy that Svelte has an opinion about styling; especially in the context of
small side projects like Pomodone, it&#39;s great to have that decision made for me.
The fact that Svelte can also detect unused CSS is great, and this is one of the
reasons why I suspect I&#39;ll reach more for Svelte in future projects.&lt;/p&gt;
&lt;p&gt;This isn&#39;t really a downside to React; one of React&#39;s strengths is that it lets
you control so much and slot React into your environment, but I like that Svelte
comes with a good CSS story out the box.&lt;/p&gt;
&lt;h3&gt;Conditional classes&lt;/h3&gt;
&lt;p&gt;One small feature I love about Svelte is how I can apply classes conditionally
to an element:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;is&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;active&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;isActive&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will apply the class &lt;code&gt;is-active&lt;/code&gt; to the element, but only if the value
&lt;code&gt;isActive&lt;/code&gt; is truthy. This reads well, is clear and is great that it comes out
of the box.&lt;/p&gt;
&lt;p&gt;I have used &lt;a href=&quot;https://www.npmjs.com/package/classnames&quot;&gt;classnames&lt;/a&gt; to achieve
similar functionality in React, and it&#39;s a good solution, but I enjoy that
Svelte provides this out the box.&lt;/p&gt;
&lt;h3&gt;Binding event listeners&lt;/h3&gt;
&lt;p&gt;Similarly to conditional classes, Svelte packs in some extra utilities for
binding event listeners in the form of
&lt;a href=&quot;https://svelte.dev/tutorial/event-modifiers&quot;&gt;modifiers&lt;/a&gt;. These let you modify
event listeners to ask Svelte to include common functionality, such as calling
&lt;code&gt;event.preventDefault()&lt;/code&gt;, for you.&lt;/p&gt;
&lt;side-by-side first=&quot;Manual preventDefault&quot; second=&quot;preventDefault modifier&quot;&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// logic here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button on&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;click&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;click&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  Click me&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// No need to preventDefault ourselves&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// logic here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button on&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;click&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;preventDefault&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;click&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;  Click me&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/side-by-side&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I like both React and Svelte. Put me in a codebase with either of them and I&#39;ll
enjoy it, be productive and happy putting new features together or fixing bugs.
I have side projects in React, and others in Svelte, and I&#39;m in no rush to
convert any from one to the other. React and Svelte are very similar in many
ways, but what I&#39;ve found is that in all the little ways that they are
different, I prefer Svelte. The codebase for Pomodone makes more sense to me in
Svelte, not React. I find it easier to navigate and work with.&lt;/p&gt;
&lt;p&gt;If I were to sum up why in one sentence, it&#39;s because &lt;strong&gt;I don&#39;t miss
&lt;code&gt;useEffect&lt;/code&gt;&lt;/strong&gt;. I understand why it exists, I understand the approach React
takes, and there are benefits of its approach. But writing complex React
components feels more like admin; a constant worry that I&#39;ll miss a dependency
in my &lt;code&gt;useEffect&lt;/code&gt; call and end up crashing my browser session. With Svelte I
don&#39;t have that lingering feeling, and that&#39;s what I&#39;ve come to enjoy. Svelte is
there when I need it with useful APIs, but fades into the background as I put my
app together.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Working in small chunks</title>
    <link href="http://www.jackfranklin.co.uk/blog/coding-javascript-small-chunks/"/>
    <updated>2021-03-09T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/coding-javascript-small-chunks/</id>
    <content type="html">&lt;p&gt;Although occasionally you&#39;ll be given a task to complete which can be completed
in no more than a few hours, most of your work is likely going to consist of
features that will take multiple days or even weeks to complete. I&#39;ve found that
the longer a piece of work takes, the more likely I am to lose track of my
progress, forget which part of the feature I was going to build next, or realise
I&#39;ve done work in the wrong order and have lost time because of it.&lt;/p&gt;
&lt;p&gt;Regardless of how easy or hard the new feature is to build, the longer it takes
the more important it is to break the work down into manageable steps and make
sure you keep on top of it. You cannot keep weeks worth of work in your head;
taking the time upfront to plan your work will pay off, keeping your head clear
to work on the feature and ensuring you have a sense of where you&#39;re at at any
given point.&lt;/p&gt;
&lt;p&gt;In this post I&#39;ll share some strategies I&#39;ve found useful to help me plan and
stay productive when working on features that span multiple weeks and even
months.&lt;/p&gt;
&lt;h2&gt;Plan the small steps ahead of time&lt;/h2&gt;
&lt;p&gt;The first thing I&#39;ll do when starting on a new feature is create a new document
(this can be whatever format you prefer - I use Google Docs but know others who
always use a pen and paper, it&#39;s really down to your personal preference) and
write down a really rough list of bullet points that list all the different
pieces of work I need to complete to consider the overall feature complete. This
list is only for my eyes so I don&#39;t worry about formatting or structure and
instead use it as a way to brain-dump everything I can think of that I need to
do, or consider. Most features I work on are backed by a design doc, which lists
the scope and goals of the work, so I&#39;ll refer to that when creating my list.&lt;/p&gt;
&lt;p&gt;Once I have this list, I can start to order it and decide which parts make sense
to prioritise first. When deciding where to start I&#39;m considering the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are there any parts of the project that need to be completed first? Does doing
one piece of work first unlock everything else?&lt;/li&gt;
&lt;li&gt;Are there any unknowns or risks with the feature? Do I need to get something
working to validate the approach first? If so, I&#39;ll want to tackle this as
soon as possible to avoid wasted effort later on.&lt;/li&gt;
&lt;li&gt;Do any of the pieces require help from another team member? If so, I might
want to kick that off soon so I give my colleague some notice and don&#39;t force
them to drop everything and help me immediately.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The planning here is very much an art not a science; even once I&#39;ve created my
priority list it&#39;s highly likely that the list will change over time as the
project progresses. You&#39;re not trying to create the perfect, rigid plan, you&#39;re
trying to get a rough plan out of your head and written down so you can track
your progress and know what you&#39;re working on next.&lt;/p&gt;
&lt;h2&gt;Using your doc as the work progresses&lt;/h2&gt;
&lt;p&gt;Once I dive into working on the feature I&#39;ll regularly refer back to my doc and
make changes. This might be adding bits of work that I&#39;ve thought of as I&#39;ve
been working, or reordering the list as I learn more about the required work.
I&#39;ll also tend to keep two more sections in my doc, one for open questions and
another for deferred features.&lt;/p&gt;
&lt;h3&gt;Open questions&lt;/h3&gt;
&lt;p&gt;I use this part of the doc to track questions I have as I work. I like doing
this because sometimes I don&#39;t want to pause coding to ask a colleague a
question. I can instead write down the question and continue with my current
task. At the same time I then get the benefit of offloading that question from
my head and into the doc. I like keeping my head clear to focus on the current
task and the only way I find I can do that is to offload everything else into a
doc.&lt;/p&gt;
&lt;h3&gt;Deferred features and preventing scope creep&lt;/h3&gt;
&lt;p&gt;Like with any big project, once you start you&#39;ll inevitably find further work to
be done, or corners to consider cutting. There&#39;s no rule here for if you should
take the quick hack or solve the problem &amp;quot;properly&amp;quot;, and the answer for which
path to take will depend heavily on the context of the feature and the situation
at hand.&lt;/p&gt;
&lt;p&gt;To avoid getting sidetracked into adding features that weren&#39;t initially
planned, I&#39;ll note them down in my doc under a &amp;quot;Deferred Features&amp;quot; heading. This
means I stay focused on my work but note down the feature to consider later, and
most of the time I&#39;ll ask a colleague for their opinion. If we decide the work
is definitely needed, we can incorporate it into the current workload - whilst
also asking ourselves if we could have planned better to see this work ahead of
time. If the work is important but not critical to the current feature we will
defer it for later, in which case we&#39;ll log a bug report into our bug tracking
system describing the feature, why we think we need it and why we&#39;ve deferred
the work for now. You can use whichever tool(s) you or your company prefer here.&lt;/p&gt;
&lt;p&gt;I&#39;ve found that being explicit with the features that you defer is a great way
to avoid scope creep, because at anytime you&#39;ve considered all the different
features that &lt;em&gt;could&lt;/em&gt; be added to your project. It also gives you ammunition
when someone asks &amp;quot;did you consider adding X?&amp;quot;, because you can explain that you
did, but you deferred the work, and here&#39;s the link to the bug report/Trello
card/GitHub issue/JIRA ticket/e.t.c that explains your decision.&lt;/p&gt;
&lt;h2&gt;Landing changes in small steps and working incrementally&lt;/h2&gt;
&lt;p&gt;Big changes that ship all at once are risky. The more you change in one go the
higher the risk of something breaking is when you put it in front of users. Once
I&#39;ve got my list of steps and I&#39;ve broken down the work into smaller pieces I&#39;m
then trying to figure out if I can deploy my changes in these small steps. This
reduces the risk but also has the advantage of getting your code reviewed by
colleagues sooner, and enabling your colleagues to review fewer lines of code in
one go. Picture two developers; the first asks their colleague to review 200
lines that they&#39;ve spent a week working on, and the other asks their colleague
to review 3,000 that they&#39;ve spent 3 weeks working on. Which code review do you
think will be more thorough?&lt;/p&gt;
&lt;p&gt;Now picture two different deployment strategies for a new feature:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The first deploys 8 weeks of work, spanning multiple thousands of lines of
code, all in one go, turning on the new feature to all users at once.&lt;/li&gt;
&lt;li&gt;The second deploys one to two hundred lines of changes weekly, behind a flag
that enables the feature to be turned on/off quickly. At first it&#39;s deployed
only for internal users, and as it nears competition it&#39;s then rolled out to
a percentage of the user base before eventually being turned on for everyone.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The second strategy there reduces the risk right down. You can never eliminate
risk because any code change, however small, is risky, but with some planning
and upfront thought the risk can be kept to a minimum. Getting regular code
review on your smaller changes is also highly beneficial; we&#39;ll discuss this
more in the code reviews chapter.&lt;/p&gt;
&lt;h2&gt;Small steps and git commits&lt;/h2&gt;
&lt;p&gt;Working in these small steps has also helped me become much better at leaving a
detailed trail of work in the form of git commits. Early on in my career I would
work solidly on a feature for days at a time without making a single git commit,
which now terrifies me just thinking about it! Regularly committing your work to
git (or any similar version control system) has many benefits: you can easily
get back to a working state if you break something, you can try things knowing
that you can undo them easily, and you can easily push your work up to GitHub
(or similar) so its backed up should your machine suddenly stop working.&lt;/p&gt;
&lt;p&gt;One of the reasons I didn&#39;t get into the habit of committing often was because I
didn&#39;t want to spend time writing detailed commit messages. My company at the
time would squash all those commits into one before merging, so I didn&#39;t see
value in writing large commit messages that would then get squashed down. It all
changed for me when I realised that &lt;em&gt;I could do the squashing&lt;/em&gt; and I should
commit frequently largely for &lt;em&gt;my own benefit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;My workflow now is to commit whenever I reach a natural stopping point, whether
that be fixing a small bug, finishing the first of ten steps on the path to
building a feature, or even writing a failing unit test that&#39;s going to be what
I now work on turning green. If I ever step away from my computer for a few
minutes to make a coffee, you can be sure I&#39;ll have committed my work.&lt;/p&gt;
&lt;p&gt;Because when my work is merged into the main branch it&#39;s squashed into one
commit, the frequent commits I make as part of my workflow are really only ever
seen by me. So I don&#39;t need to be thorough and detailed, I just need to write
commits that make sense to me. Before I upload my work for code review, I can
rebase and update the git history.&lt;/p&gt;
&lt;p&gt;If we take a typical feature, my local git commits might look like so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write failing unit test&lt;/li&gt;
&lt;li&gt;Build initial module and implement &lt;code&gt;someFunc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add UI component with basic functionality working&lt;/li&gt;
&lt;li&gt;Flesh out UI component and tackle edge cases&lt;/li&gt;
&lt;li&gt;Fix bug with fetching data from the API&lt;/li&gt;
&lt;li&gt;CSS tweaks&lt;/li&gt;
&lt;li&gt;Final unit tests and fixes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice that I don&#39;t ever really describe the actual high level feature I&#39;m
building. I don&#39;t need to, because that&#39;s all in my head! And if I need more
context, I&#39;ve got my doc where I&#39;ve listed the steps, deferred features and any
open questions.&lt;/p&gt;
&lt;p&gt;Once I&#39;ve done all the work locally and I&#39;m ready to upload my change I can now
rebase those commits. I rebase, squashing them into one large commit, and then
I&#39;ll write a brand new description, that might look like so:&lt;/p&gt;
&lt;pre class=&quot;language-md&quot;&gt;&lt;code class=&quot;language-md&quot;&gt;Add column resizing to data-grid component&lt;br&gt;&lt;br&gt;This commit adds the ability for the user to resize the columns of the data-grid&lt;br&gt;using their mouse. It will resize relative to the overall size of the data-grid,&lt;br&gt;and when resizing a column all other columns are left untouched.&lt;br&gt;&lt;br&gt;If you&#39;re rendering a data-grid and don&#39;t want to allow the user to resize the&lt;br&gt;column, you can set the &lt;span class=&quot;token code-snippet code keyword&quot;&gt;`no-resizing`&lt;/span&gt; attribute on the &lt;span class=&quot;token code-snippet code keyword&quot;&gt;`data-grid`&lt;/span&gt; component.&lt;br&gt;&lt;br&gt;The column resizing logic is also aware of hidden columns, and won&#39;t resize&lt;br&gt;those, and it will re-adjust the column widths if the container is resized. Once&lt;br&gt;a user has resized the column, it will never have it sized changed&lt;br&gt;automatically. If you want to programmatically reset a column, you can call&lt;br&gt;&lt;span class=&quot;token code-snippet code keyword&quot;&gt;`resetColumnWidths()`&lt;/span&gt; on the data-grid instance.&lt;br&gt;&lt;br&gt;You can find more info here:&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; Design doc: https://...&lt;br&gt;&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; Tracking bug: https://...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I take the time to dive into detail and write a thorough description of the
work (this will also make up the description of my pull request, so it&#39;s good to
be thorough here and leave lots of context). By doing this at the end I can call
out any particular edge cases or nuances that any other developer might want to
know about, and I leave a good trail in the history for me or any other
developer on my team working on the data-grid in the future.&lt;/p&gt;
&lt;h2&gt;Being resilient to interruptions&lt;/h2&gt;
&lt;p&gt;It&#39;s a fact of life that you&#39;ll be interrupted when working by something. As I
write this the majority of us are working from home, so many have even more
chance of disturbance from family members as well as being pinged on Slack by
their colleagues. We&#39;ve all seen the guidance that suggests software developers
should avoid being interrupted to avoid losing the mental context that&#39;s been
built up when a task is being worked on, but it&#39;s impossible to not have
interruptions on a daily basis. Your colleagues, very reasonably, will ask for
advice, your boss might want a quick chat about something (hopefully something
positive!) or, in my case, the dog will decide they need to go on a walk.&lt;/p&gt;
&lt;p&gt;I still suggest you try to avoid being disturbed too regularly so that you have
time to get your head into work, and I will regularly turn my work chat off,
close my email, log out of other distractions and get my head down, but for
those times when you are interrupted mid-flow, working in the small steps that
we&#39;ve discussed in this chapter will be very beneficial. You&#39;ll not be in the
middle of a huge change, where the entire product you work on is broken, and
you&#39;ve a list of ten steps in your head you need to finish to get it back
working. You&#39;ll instead be part way through step five of ten, with the first
four already done and committed, and all other thoughts listed in your work doc.
For me now an interruption is a case of &amp;quot;give me five minutes to finish off&amp;quot;,
where I leave the code in a state I can pick up again, often including a large
&lt;code&gt;// TODO: jack, make this function...&lt;/code&gt; type comment that I&#39;ll pick up. I will
then add and commit my changes to git (literally using
&lt;code&gt;git commit -m &#39;WIP: step 4, add CSS&#39;&lt;/code&gt;, because as discussed I&#39;ll reword them
later) and at that point I&#39;ve tucked my work away and I&#39;m ready to give my
colleague/boss/dog full focus. It&#39;s vital when you do this that you offload all
the thoughts you have about your current work out of your head, so you can pick
up more easily. This might be &lt;code&gt;TODO&lt;/code&gt; comments in the code, it might be in your
doc, or it might be hastily scribbled on a Post-It note. It doesn&#39;t matter
where, but get them out of your head. This frees up your mind to focus fully on
whatever now needs your attention&lt;/p&gt;
&lt;p&gt;Working in small chunks has been very beneficial for my productivity, my mental
health, and my ability to offload tasks to documents (or paper) and focus on the
most relevant task at hand. What tips and tricks have you found useful -
particularly during these last 12+ months of primarily working from home? Get in
touch on Twitter, I&#39;d love to hear them!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Why you should check-in your node dependencies</title>
    <link href="http://www.jackfranklin.co.uk/blog/check-in-your-node-dependencies/"/>
    <updated>2021-12-06T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/check-in-your-node-dependencies/</id>
    <content type="html">&lt;p&gt;On every team at every company I&#39;ve been at prior to my current role, the advice was simple: don&#39;t check your &lt;code&gt;node_modules&lt;/code&gt; folder into your version control system (which I&#39;ll refer to as “Git” for the rest of this article…). This seemed like solid advice for multiple reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The code within &lt;code&gt;node_modules&lt;/code&gt; isn&#39;t authored by the team directly.&lt;/li&gt;
&lt;li&gt;The code within &lt;code&gt;node_modules&lt;/code&gt; is often quite large and would cause a lot of noise in git diffs and pull requests.&lt;/li&gt;
&lt;li&gt;The code within &lt;code&gt;node_modules&lt;/code&gt; can easily be replicated with an &lt;code&gt;npm&lt;/code&gt; install.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I currently work at Google on the Chrome DevTools team and we check our &lt;code&gt;node_modules&lt;/code&gt; folder into source control. At first this struck me as unusual, but I&#39;ve come to believe that there are some major benefits to this approach that I think more people should consider.&lt;/p&gt;
&lt;h2&gt;No need for npm installs&lt;/h2&gt;
&lt;p&gt;Once you check your &lt;code&gt;node_modules&lt;/code&gt; in, there&#39;s no need to run an install step before you can get up and running on the codebase. This isn&#39;t just useful for developers locally, but a big boost for any bots you might have running on a Continuous Integration platform (e.g. CircleCI, GitHub Actions, and so on). That&#39;s now a step that the bots can miss out entirely. I&#39;ve seen projects easily need at least 1-2 minutes to run a complete &lt;code&gt;npm install&lt;/code&gt; from scratch - and on bots that could be even longer. If you think that a bot runs on every pull request and deploy, you could easily have 50+ bots run each day. That&#39;s a lot of minutes (and bandwidth!) saved.&lt;/p&gt;
&lt;h2&gt;Guaranteed replicated builds&lt;/h2&gt;
&lt;p&gt;Having your &lt;code&gt;node_modules&lt;/code&gt; checked in guarantees that two developers running the code are running the exact same code with the exact same set of dependencies. Yes, this can be managed by a package-lock.json file, or other tools, but I&#39;ve seen all of them slip up rarely or allow a slight variation in a minor version number that causes issues. Once the dependencies are in git, you cannot possibly run with anything other than those and each developer will be running the exact codebase.&lt;/p&gt;
&lt;h2&gt;Better awareness of the code you&#39;re shipping&lt;/h2&gt;
&lt;p&gt;I&#39;ve been surprised at how more aware I am of adding dependencies when the git diff shows me the entirety of the code that is being added to the project. This has lead us to make contributions to tools to help reduce their file size on disk and have a better awareness of the impact a dependency will have on our bundle size.&lt;/p&gt;
&lt;h2&gt;More consideration to adding a dependency because it&#39;s not invisible&lt;/h2&gt;
&lt;p&gt;I mentioned earlier that people see the noise in a git diff as a downside to adding dependencies to version control, and I do acknowledge that it can be a downside to this approach, but I&#39;ve found that noise to often be a useful signal. Adding that one extra dependency because I don&#39;t want to write a few lines of code myself is something I used to do frequently - but now I&#39;m much more considered because I can see the code that&#39;s being added and can reflect on if it&#39;s worth it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: this doesn&#39;t mean that we don&#39;t have dependencies!&lt;/em&gt; There are times where it is worth it to add a dependency - but seeing the code in version control has made me more considered about doing it - the cost is no longer invisible.&lt;/p&gt;
&lt;h2&gt;You can manage the large diffs&lt;/h2&gt;
&lt;p&gt;There is no shying away from the fact that if a developer works on a change that adds a new dependency, there could be a lot of noise in the diff. One of our dependencies that we check in is TypeScript, and every time we update that, the git diff is huge and frankly not worth looking at (beyond the CHANGELOG). We&#39;ve come up with a rule that helps us here: a change that updates &lt;code&gt;node_modules&lt;/code&gt; may not touch any other code in the codebase. So if I update &lt;code&gt;node_modules/typescript&lt;/code&gt; with its latest version, I will be warned by our tooling if any other folder outside of &lt;code&gt;node_modules&lt;/code&gt; is changed.&lt;/p&gt;
&lt;p&gt;This rule serves us well the majority of the time, because any work that relies on a new or updated dependency can be split into two changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Update the dependency&lt;/li&gt;
&lt;li&gt;Use the dependency in the code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are times where this doesn&#39;t work; updating TypeScript may require us to update some code to fix errors that the new version of TypeScript is now detecting. In that case we have the ability to override the rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As with anything in software engineering, most &amp;quot;rules&amp;quot; are guidelines, and we&#39;re able to side-step them when required.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Protection from another left pad&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://qz.com/646467/how-one-programmer-broke-the-internet-by-deleting-a-tiny-piece-of-code/&quot;&gt;now infamous left_pad incident&lt;/a&gt;, where a popular npm package was removed from the repository all of a sudden, causing builds everywhere to break, would not have impacted a team who checked all their dependencies into git. They would still have to deal with the long term impact of &amp;quot;what do we do with this now unsupported dependency&amp;quot;, but in the short term their builds wouldn&#39;t break and they wouldn&#39;t be blocked on shipping new features.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If I was starting a new codebase this week, or joining a small start-up just getting their first version off the ground, I would advocate strongly for checking &lt;code&gt;node_modules&lt;/code&gt; into version control. It absolutely takes some getting used to, but in my experience over the last two years of working this way the benefits I&#39;ve listed above strongly outweigh the additional git noise and slight overhead.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Why I don&#39;t miss React: a story about using the platform</title>
    <link href="http://www.jackfranklin.co.uk/blog/working-with-react-and-the-web-platform/"/>
    <updated>2022-05-03T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/working-with-react-and-the-web-platform/</id>
    <content type="html">&lt;p&gt;Just over two years ago I left a role at a London based startup where I lead development of a large, React based e-commerce frontend to join Google to work on Chrome DevTools. My initial focus was to introduce Web Components as the new fundamental building block of all new DevTools features and UI. With the recently launched &lt;a href=&quot;https://developer.chrome.com/docs/devtools/recorder/&quot;&gt;Recorder&lt;/a&gt; panel along with others, there are now large parts of DevTools that are almost exclusively web components.&lt;/p&gt;
&lt;p&gt;When I left my React focused role behind I expected to find the transition hard, and miss what React had to offer. I&#39;ve ended up finding the transition easier than expected and have come to really relish working closer to the platform’s primitives and maintaining more control over the software I write and in this blog post I’d like to share why that is.&lt;/p&gt;
&lt;p&gt;Firstly, because some people on the internet like to get angry over opinions that may not match their own, I want to make clear what this blog post is not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is not a call for everyone to immediately drop React and move to web components.&lt;/li&gt;
&lt;li&gt;It is not a blog post declaring React “dead”, or the wrong choice for every project.&lt;/li&gt;
&lt;li&gt;It is not a blog post declaring web components the best solution to all projects.&lt;/li&gt;
&lt;li&gt;It is not a blog post declaring all web frameworks useless or a bad choice.&lt;/li&gt;
&lt;li&gt;It is not a blog post suggesting that, because this approach works for me and the team I’m on at Google, that it works for you. All projects are different, and Chrome DevTools almost certainly has a different set of requirements and constraints to your project. And that&#39;s fine :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This blog post should be read as the musings of someone who went from working with React every day to not touching it, and the experiences of doing so. I am writing this post because I have been pleasantly surprised on how much I&#39;ve enjoyed working more closely with the web platform.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whilst I will use “React” as my comparison, you could reasonably substitute it for any of the large modern frameworks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Using the platform&lt;/h2&gt;
&lt;p&gt;“Using the platform” has become a bit of an overused and abused phrase in recent years, but the core principle resonates with me: can we use the APIs built into the browser and JavaScript to build features for our users without paying the cost of third party dependencies?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: the answer here is not always “yes”! There are still plenty of features I’d like to see built into browsers, but compared to ten years ago the landscape of native functionality has expanded massively.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One classic example here is building forms: this used to be a justifiable reason to reach for React because browsers offered us very little here beyond primitive functionality. Fast forward a few years and on a recent side project I was able to use 100% native functionality to build my form with a solid user experience:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I used &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation#using_built-in_form_validation&quot;&gt;HTML validation attributes&lt;/a&gt; to enforce required fields (and could have done more with pattern based validation)&lt;/li&gt;
&lt;li&gt;I used the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FormData/Using_FormData_Objects&quot;&gt;FormData API&lt;/a&gt; to read values out of the form rather than track their values in state (which I didn’t need to, because the validation was done by the browser).&lt;/li&gt;
&lt;li&gt;If I wanted to, I could even customise the error messages using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation#validating_forms_using_javascript&quot;&gt;Constraint Validation API&lt;/a&gt; - an API I didn&#39;t even know existed until a few days ago!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Was this slightly more work than using a library from npm that wraps this all up for me? Maybe! But I was able to achieve the same result, writing a few extra lines of code myself, but without weighing my application down with an extra dependency.&lt;/p&gt;
&lt;h2&gt;Maintaining control&lt;/h2&gt;
&lt;p&gt;Adjusting to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;Custom Elements&lt;/a&gt; was the main concern I had when moving on from React, but I&#39;ve come to really enjoy working with them.&lt;/p&gt;
&lt;p&gt;Custom Elements may lead to more code being written but with a little bit of work you can create something that will feel surprisingly familiar if you&#39;ve worked with any of the popular component libraries, with one crucial difference: &lt;strong&gt;you don’t give up control&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;React will not allow you to dictate how and when you render your component onto the page. You write code using its constructs and it determines when to render. 9 times out of 10 - even 99 out of 100 or more - this works exactly as you’d expect. But the web platform isn&#39;t perfect, and I suspect most React developers have come across a situation where you’d love to be able to just tweak how your component is being rendered.&lt;/p&gt;
&lt;p&gt;Giving up control of your rendering process can lead to confusion, as per &lt;a href=&quot;https://twitter.com/garybernhardt/status/1516099364611047436&quot;&gt;this tweet from Gary Bernhardt&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why does this code:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console.log(&lt;code&gt;mark ${Math.random()}&lt;/code&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alert(&lt;code&gt;mark ${Math.random()}&lt;/code&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;print one log but show two alerts? Because &lt;code&gt;React.StrictMode&lt;/code&gt; hides one log to &amp;quot;help&amp;quot; me prepare for concurrent mode. React is great but concurrent mode feels like a mistake for 99.9% of apps.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This behaviour has now changed in React v18, but the fact that React had to work to suppress extra &lt;code&gt;console.log&lt;/code&gt; calls that occur as a result of how it renders my application is surprising to me; it&#39;s this lack of control in my own application that has become something I&#39;m wary of.&lt;/p&gt;
&lt;p&gt;In software development this is known as &lt;a href=&quot;https://martinfowler.com/bliki/InversionOfControl.html&quot;&gt;Inversion of Control&lt;/a&gt;. When you use a framework like React, your code is no longer in direct control of when components (or functions) are called. Your components don&#39;t directly tell React when to re-render them, but React decides. Your components have ceded control to React.&lt;/p&gt;
&lt;p&gt;Our Custom Elements solution doesn&#39;t have this inversion of control; we control every render by explicitly calling a function (in the case of lit-html, it is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals?retiredLocale=nl&quot;&gt;tagged template literal&lt;/a&gt; called &lt;a href=&quot;https://lit.dev/docs/v1/lit-html/introduction/#lit-html-templates&quot;&gt;&lt;code&gt;html&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The downside of not picking a framework like React is that you have to consider recreating pieces that are otherwise built-in, such as a basic scheduler that ensures we batch renders or a library of test helpers to make testing these components easier. You have to carefully consider your options in situations like this: if we avoid React but end up re-implementing the majority of what it offers, we might have been better off using the framework. In our case, we still felt this decision was justified because we don&#39;t have to recreate a scheduler with all the complexity of React&#39;s; we can build a small, self-contained implementation that only implements what we need.&lt;/p&gt;
&lt;p&gt;Having built our basic scheduler, we know exactly why and when every component renders, and on those times where we have to deviate from the standard path, we are able to. This feels very valuable: every software project I&#39;ve ever worked on has had at least one component that needed to do something differently to solve a peculiar edge case.&lt;/p&gt;
&lt;h2&gt;Pick dependencies that can be easily replaced.&lt;/h2&gt;
&lt;p&gt;One area where custom elements are lacking is some form of HTML templating solution that provides efficient re-rendering of HTML. I&#39;d definitely recommend using a library for this, and we settled on &lt;a href=&quot;https://lit.dev/docs/libraries/standalone-templates/&quot;&gt;lit-html&lt;/a&gt;. What appeals about lit-html is that it makes up just one small piece of our solution. We could have gone for Lit, a more fully featured components library formed around custom elements, but that would have led to us increasing our dependencies and forgoing some control (&lt;em&gt;to reiterate the points I made earlier in this blog post: this is not a criticism of Lit, and for many people Lit is the right choice!&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Lit-html ensures that our HTML is rendered efficiently and comes with a nice set of directives that allow us to easily do common tasks like &lt;a href=&quot;https://lit.dev/docs/templates/directives/#classmap&quot;&gt;conditionally applying classes&lt;/a&gt;. It’s not quite as seamless as JSX, but gets pretty close.&lt;/p&gt;
&lt;p&gt;The best part? It’s a very small dependency (&lt;a href=&quot;https://bundlephobia.com/package/lit-html@2.2.2&quot;&gt;3.3kB gzipped&lt;/a&gt;) and even more crucially could easily be replaced if we needed to. It might sound negative or even pessimistic, but when we adopt a new dependency one of the main questions we ask is “what happens if this disappears”?&lt;/p&gt;
&lt;p&gt;Let&#39;s say React disappears (this is not to say I think it will). What&#39;s the cost to us of dealing with that? We have a few options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Maintain a fork of React at whichever version we are currently using.&lt;/li&gt;
&lt;li&gt;Migrate all our components from React to something else.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Neither of those options appeal to me; maintaining a library means we either do nothing and miss out on improvements and/or security fixes, and migrating all our components would be a huge undertaking. I&#39;m sure React forks would spring up should this event occur, but regardless it would involve a lot of churn and work to get things on a healthier footing. Migrating all of our components would be a costly exercise with little tangible benefit to end users - and therefore an incredibly hard sell to the business and leadership. We&#39;d also have to learn a new framework (even if it was similar to React) and increase our expertise in that framework.&lt;/p&gt;
&lt;p&gt;Contrast this with custom elements and lit-html. We can have a good level of confidence that custom elements won&#39;t suddenly disappear; it&#39;s baked into the browser and backwards compatibility is a core tenet of the web platform.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&#39;re thinking about custom elements v0 being removed in favour of v1, remember that v0 was a Chrome specific experimental spec, whereas v1 is a cross-platform standardised specification. The purpose of v0 was to gather feedback from developers that could inform the future standardised specification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And if lit-html were to vanish from the internet? We have the same two choices: maintain a fork, or replace it. Maintaining a fork wouldn&#39;t be ideal for the same reasons maintaining a React fork isn&#39;t ideal, with one slight difference: the scope of lit-html is much smaller, and it is a much smaller library generally. It would be less work to get our heads around and learn to a point where we could land fixes or improvements if we required.&lt;/p&gt;
&lt;p&gt;Replacing lit-html would be an undertaking but much less so than replacing React: it’s used in our codebase purely for having our components (re)-render HTML. Replacing lit-html would still mean that we can keep our business logic, ultimately maintaining the value they provide to end-users. Lit-Html is one small Lego brick in our system, React (or Angular, or similar) is the entire box.&lt;/p&gt;
&lt;h2&gt;The cost of third party dependencies&lt;/h2&gt;
&lt;p&gt;Third party dependencies, however big or small, have a set of costs that your users and/or developers will pay. Everyone&#39;s opinion on if that cost is worth it or not will differ, and it will depend on your application and tech stack, but when I think about adding new dependencies the following set of costs appear:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Bundle size&lt;/strong&gt;: how much weight is this dependency adding to our final JavaScript that we have to deliver and execute in the browser? Is that bundle size appropriate and worth it for what this dependency provides?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Breaking changes and upgrades&lt;/strong&gt;: what happens if the package has a big overhaul and needs work to upgrade to the latest version? Do we stay on the older version (not ideal if it&#39;s not getting updates or security fixes) or invest the work to upgrade? Can the work to upgrade be prioritised soon or is it the type of work that we might never get around to?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Risk of unmaintained code or issues&lt;/strong&gt;: who is to say that a third party dependency might have a particular vulnerability or issue that might cause issues? (this is not a criticism of all those who work tirelessly to maintain open source software - but these things happen).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Jeremy Keith in &lt;a href=&quot;https://adactio.com/journal/19021&quot;&gt;his recent post on trust&lt;/a&gt; states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every dependency you add to a project is one more potential single point of failure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The same is true of your own code (swap &amp;quot;dependency&amp;quot; for &amp;quot;file&amp;quot;), but crucially you have full control, you presumably are more familiar with its workings as it was written in house, and you are not beholden to others to fix the issue upstream. This is not to say that you should recreate the world on every project; there will always be a fine balancing act of building it yourself versus adding a dependency, and there is no rule that will determine the right outcome every time.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This post is not to say that you shouldn&#39;t reach for dependencies. In response to Jeremey Keith&#39;s post on trust and third party dependencies, &lt;a href=&quot;https://charlesharri.es/stream/libraries-over-browser-features&quot;&gt;Charles Harries suggests that cross browser compatibility was historically the driver for dependencies&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Browser compatibility is one of the underlying promises that libraries—especially the big ones that Jeremy references, like React and Bootstrap—make to developers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#39;m on a budget and I can&#39;t spend my time reading through the caniuse.com page for Array.prototype.includes or MutationObserver. Lodash promises cross-platform compatibility right there at the bottom of its homepage.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I completely agree with Charles&#39; opinion, and this is one area where working on the DevTools for one browser has an advantage because we know our audience&#39;s browser choice.&lt;/p&gt;
&lt;p&gt;My hope is that with the baseline feature set supported by browsers now more uniform - especially with the death of Internet Explorer - that we as an industry can over time move to reaching for the extensive built-in functionality of browsers by default, polyfilling where absolutely necessary, and look beyond frameworks as a default starting point.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thank you to &lt;a href=&quot;https://twitter.com/TimvdLippe&quot;&gt;Tim van der Lippe&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/aerotwist&quot;&gt;Paul Lewis&lt;/a&gt; for their help reviewing drafts of this post.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Learning to say &quot;I don&#39;t know&quot;</title>
    <link href="http://www.jackfranklin.co.uk/blog/learning-to-say-i-dont-know/"/>
    <updated>2022-07-07T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/learning-to-say-i-dont-know/</id>
    <content type="html">&lt;p&gt;In October 2021 I took on a new role within the Chrome DevTools team as a
Technical Lead (TL) of the DevTools Performance Tooling team, who are
responsible for all things website performance inside of DevTools, the most
well known being the Performance Panel.&lt;/p&gt;
&lt;p&gt;My journey to this point had begun a year prior when we started building a new
panel that would come to be named Performance Insights. I was asked to build
the panel, and for the first time in my career I came face to face with Chrome
trace files. These are large JSON files that contain all the trace data that
Chrome generates when asked to perform a trace, and it’s these that contain the
information that we parse and present in the DevTools panels. It’s also part of
what other tools like Lighthouse, or third-party tools like
&lt;a href=&quot;https://www.webpagetest.org/&quot;&gt;WebPageTest&lt;/a&gt;, use to display data.&lt;/p&gt;
&lt;p&gt;There was a lot of knowledge and information about performance that I didn&#39;t
know. This is something that I’m never comfortable with, but as a contributor
to the team I felt happy admitting to my manager (and TL of the team) when I
didn&#39;t know things, and asking them to jump on a video call to walk me through
something. I’d never even used the HTML Canvas API, which I had to learn along
with the intricate details of Performance tracing.&lt;/p&gt;
&lt;p&gt;When I then became TL of the team, I was suddenly the person who people would
ask questions to. On the first &amp;quot;official&amp;quot; day that I became TL, someone asked
me a question about traces and how certain trace events are represented. I
realised I didn&#39;t know, and I was going to &lt;em&gt;have to admit it&lt;/em&gt;. But I&#39;m the TL,
I&#39;m supposed to know that! I panicked; assuming that my lack of knowledge would
now be unearthed and I&#39;d quickly be &amp;quot;found out&amp;quot; as not being ready for this
role.&lt;/p&gt;
&lt;p&gt;As you&#39;ve probably guessed, none of that happened. I decided to embrace not
knowing, and put my efforts into figuring out &lt;em&gt;how to find out&lt;/em&gt; and fill the
gaps in my own knowledge. Sometimes I could do that by spending thirty minutes
reading a trace file and understanding how the data is linked. Other times I
could find an old design doc, or documentation that would give me the answer.
And sometimes, best of all, I had to email someone else who I thought might
well know the answer. This has been one of the best decisions I&#39;ve made
recently; emailing people to ask for help has not only given me the answers I
need but helped me build relationships with a bunch of folks who I would never
have otherwise engaged with, from all over the world. One of them even
explicitly thanked me for being curious, and reaching out to ask!&lt;/p&gt;
&lt;p&gt;Becoming comfortable saying &amp;quot;I don&#39;t know&amp;quot;, or &amp;quot;I don&#39;t know, but I bet X
will&amp;quot;, or &amp;quot;I don&#39;t know, but I&#39;ll find out for you&amp;quot; has become one of the most
powerful tools at my disposal. I&#39;ve learned that being a good TL isn&#39;t about
knowing everything - there is simply too much to know! - but about being able
to fill those knowledge gaps and help your team be more productive as a result.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Running command line tasks in Neovim</title>
    <link href="http://www.jackfranklin.co.uk/blog/executing-tasks-in-neovim/"/>
    <updated>2022-07-23T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/executing-tasks-in-neovim/</id>
    <content type="html">&lt;p&gt;My daily workflow often involves repeatedly running tasks, whether that be build commands, unit tests, or some other scripts. My ideal workflow is to have a terminal split on the right hand side, and then be able to send tasks to it.&lt;/p&gt;
&lt;h2&gt;The built in terminal&lt;/h2&gt;
&lt;p&gt;Neovim&#39;s built in &lt;code&gt;:terminal&lt;/code&gt; allows me to easily open a terminal as a split in Neovim, and I have a few custom keymaps to jump to and from it.&lt;/p&gt;
&lt;p&gt;Rather than use &lt;code&gt;&amp;lt;C-w&amp;gt;{h,j,k,l}&lt;/code&gt; to navigate splits, I remap to &lt;code&gt;&amp;lt;C-{h,j,k,l&amp;gt;&lt;/code&gt;, and I add the same mappings to the terminal splits, along with mapping &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;tnoremap &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Esc&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-n&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br&gt;tnoremap &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-h&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-n&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-w&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;h&lt;br&gt;tnoremap &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-j&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-n&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-w&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;j&lt;br&gt;tnoremap &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-k&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-n&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-w&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;k&lt;br&gt;tnoremap &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-l&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-n&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C-w&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;l&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I also prefer to always be in insert mode by default when entering a terminal split:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;autocmd BufEnter * &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;buftype &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;terminal&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; :startinsert &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; endif&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Neoterm plugin&lt;/h2&gt;
&lt;p&gt;To make things a little easier to manage, I also use the &lt;a href=&quot;https://github.com/kassio/neoterm&quot;&gt;Neoterm plugin&lt;/a&gt;. This gives me the ability to run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;:T &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To open a terminal and execute the &lt;code&gt;ls&lt;/code&gt; command. If you then run this command again, it will re-execute the terminal command but &lt;em&gt;in the same terminal&lt;/em&gt;. You may start to see how this is going to form the building blocks of my setup of a terminal that I continuously execute tasks in...&lt;/p&gt;
&lt;p&gt;I can then set &lt;code&gt;neoterm_size&lt;/code&gt; and &lt;code&gt;neoterm_default_mod&lt;/code&gt; to define how the terminal appears. I set it to approximately 30% of the screen width, and to be vertical on the right hand side:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;neoterm_size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tostring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;columns&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;neoterm_default_mod &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;botright vertical&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;This config is in Lua rather than Vimscript because I only use Neovim. The previous configuration code shown is due to be migrated but I&#39;ve not got round to it yet!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Mapping a key to execute a command&lt;/h2&gt;
&lt;p&gt;I don&#39;t want to have to manually run &lt;code&gt;:T my-command-here&lt;/code&gt; every time I want to run tests. So I started manually setting a shortcut when I would need to have a command setup, such as running tests:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;:nnoremap &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;e :T &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; test&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This worked well, but had some caveats. Firstly, I use Neoterm to fire up multiple terminals (I often have some in other tabs for other commands), and &lt;code&gt;:T&lt;/code&gt; would reference the latest terminal. So to fix that, I adjusted the command to &lt;code&gt;:1T&lt;/code&gt;, which would target the first terminal.&lt;/p&gt;
&lt;p&gt;I also wanted to have the terminal cleared between each execution of the command. I did that at first by using the &lt;code&gt;clear&lt;/code&gt; command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;:nnoremap &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;e :1T &lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; test&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I then discovered Neotree&#39;s &lt;code&gt;:1Tclear&lt;/code&gt; command which would clear the terminal for me, without me having to include &lt;code&gt;clear&lt;/code&gt; as the first task.&lt;/p&gt;
&lt;p&gt;My final problem is that I was bored of typing this mapping manually! So I set out to automate it...&lt;/p&gt;
&lt;h2&gt;Building the task execution command&lt;/h2&gt;
&lt;p&gt;I wanted to have a mapping for &lt;code&gt;&amp;lt;leader&amp;gt;e&lt;/code&gt; that would:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a terminal if required, or re-use the existing one otherwise.&lt;/li&gt;
&lt;li&gt;Prompt for a command to automatically run.&lt;/li&gt;
&lt;li&gt;Once a command is given, store that and use it again for future runs (e.g. only prompt once for a command).&lt;/li&gt;
&lt;li&gt;Clear the terminal between each run.&lt;/li&gt;
&lt;li&gt;Provide an option to reset the command.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Requirements (1) and (4) are easy; Neoterm&#39;s behaviour gives me those for free. To create a command that I can then bind to a key I can use &lt;a href=&quot;https://neovim.io/doc/user/api.html#nvim_create_user_command()&quot;&gt;&lt;code&gt;nvim_create_user_command&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nvim_create_user_command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;TaskPersist&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;-- implementation here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; nargs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And I know already that I can execute a command (stored here as &lt;code&gt;cmd&lt;/code&gt;) by using Neoterm:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nvim_command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;:1Tclear&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nvim_command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;:1T &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt; cmd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now I need to store a command, and find a way to set it if it&#39;s not provided. I could do this via setting some global variable, but I want it to be a nice UI! This is where &lt;a href=&quot;https://github.com/MunifTanjim/nui.nvim&quot;&gt;nui.nvim&lt;/a&gt; comes in. I already have it in my &lt;code&gt;init.vim&lt;/code&gt; file, because another plugin I use depends on it. And it has an &lt;a href=&quot;https://github.com/MunifTanjim/nui.nvim/tree/main/lua/nui/input&quot;&gt;&lt;code&gt;Input&lt;/code&gt; component&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;I create a variable, &lt;code&gt;stored_task_command&lt;/code&gt;, which will be a variable within this Lua module that tracks the current command. Initially it&#39;s set to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I can create &lt;code&gt;trigger_set_command_input&lt;/code&gt; as a function which will create and mount an &lt;code&gt;Input&lt;/code&gt; component. When the input is submitted, we set &lt;code&gt;stored_task_command&lt;/code&gt; to the input, and trigger a callback function that is provided:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most of this code is straight from the &lt;code&gt;nui.nvim&lt;/code&gt; example; I&#39;ve just modified the text prompts and the width of the input!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;language-lua&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; stored_task_command &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;nil&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; trigger_set_command_input &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callback_fn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; input_component &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    position &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;50%&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      width &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    border &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      style &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;single&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        top &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Commmand to run:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        top_align &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    win_options &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      winhighlight &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Normal:Normal,FloatBorder:Normal&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    prompt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&gt; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    default_value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    on_submit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      stored_task_command &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;callback_fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  input_component&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  input_component&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BufLeave&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    input_component&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unmount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with that, I can now provide a nice UI to set the command.&lt;/p&gt;
&lt;h2&gt;Putting the pieces together&lt;/h2&gt;
&lt;p&gt;So, the final implementation should:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use Neoterm to create or re-use an existing terminal&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;stored_task_command&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, trigger the &lt;code&gt;Input&lt;/code&gt; box to set the command.&lt;/li&gt;
&lt;li&gt;Run the command in the terminal (via Neoterm), after calling &lt;code&gt;:Tclear&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-lua&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nvim_create_user_command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;TaskPersist&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; execute &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nvim_command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;:1Tclear&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nvim_command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;:1T &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt; cmd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; stored_task_command &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;-- Load up the Input component to get a value, then run it&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;trigger_set_command_input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stored_task_command&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stored_task_command&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; nargs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with that, it works! I can bind to a key:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nvim_set_keymap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;leader&gt;e&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;:TaskPersist&amp;lt;CR&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the behaviour is as desired :)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/images/nvim-task.png&quot; alt=&quot;Executing a task in NeoVim&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Allowing random one-off tasks&lt;/h2&gt;
&lt;p&gt;Sometimes I do need the ability to reuse the terminal I&#39;m running my tasks in for a quick one-off task. For that, I can make the custom &lt;code&gt;TaskPersist&lt;/code&gt; command optionally take a command to use for just this one run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;:TaskPersist &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;some one off task&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which can be done by reading the arguments when defining a custom command:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nvim_create_user_command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;TaskPersist&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; execute &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nvim_command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;:1Tclear&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nvim_command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;:1T &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt; cmd&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;local&lt;/span&gt; one_off_command &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;args&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; one_off_command &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; string&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;one_off_command&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;one_off_command&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;elseif&lt;/span&gt; stored_task_command &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;trigger_set_command_input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stored_task_command&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stored_task_command&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; nargs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;*&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Setting the &lt;code&gt;nargs&lt;/code&gt; option to &lt;code&gt;*&lt;/code&gt; tells Vim that this command takes any number of arguments (Vim sees each space in the command as a different argument). These are collected for us as &lt;code&gt;input.args&lt;/code&gt;, and we can execute those arguments as a command if they are supplied.&lt;/p&gt;
&lt;h2&gt;Resetting the command&lt;/h2&gt;
&lt;p&gt;I&#39;ve also created another command to enable me to be re-prompted for a new command to store:&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nvim_create_user_command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;SetTaskCommand&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;trigger_set_command_input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;-- Don&#39;t need to do anything here beyond set it&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with that, it&#39;s done!&lt;/p&gt;
&lt;p&gt;I hope you enjoyed this walk through the process of combining a couple of Vim plugins with some Lua to enable the desired workflow. This post also demonstrates why I was so keen to dive into Neovim rather than stick to Vim. I&#39;d never written a line of Lua six months ago, and whilst I remain a complete beginner, it is a language that I think anyone with some programming experience can get to grips with, and I&#39;m loving the ability to have more fine-grained control over my editing experience by writing code.&lt;/p&gt;
&lt;p&gt;If you want to grab any of the code from this post, you can find it &lt;a href=&quot;https://github.com/jackfranklin/dotfiles/blob/bda3964360ebf60330880416450357d3d672b815/nvim/after/plugin/neoterm.lua&quot;&gt;in my dotfiles, which are on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Things I&#39;ve learned about building computers</title>
    <link href="http://www.jackfranklin.co.uk/blog/learning-about-building-computers/"/>
    <updated>2023-05-31T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/learning-about-building-computers/</id>
    <content type="html">&lt;p&gt;Recently a computer upgrade went from one graphics card to a new case, new fans
and a new graphics card. Along the way I learned a bunch and I&#39;m writing this
blog post for future reference when I next perform a PC upgrade.&lt;/p&gt;
&lt;h2&gt;Check your graphics card fits the case&lt;/h2&gt;
&lt;p&gt;I was upgrading from a very old, and small, GTX 1060 up to a very large
GTX3080...naively assuming that my existing case would fit. It did not!&lt;/p&gt;
&lt;p&gt;Lesson learned is to measure or find online the GPU dimensions; all cases will
specify the max size GPU that they support.&lt;/p&gt;
&lt;h2&gt;Stock CPU coolers are loud&lt;/h2&gt;
&lt;p&gt;I had been running the stock AMD CPU cooler since upgrading CPU about 4 years
ago, but when I plugged it in after upgrading the graphics card, it was running
incredibly loud. Not just that, but it would ramp up and down drastically for no
apparent reason.&lt;/p&gt;
&lt;p&gt;Swapping this out for a better CPU fan (I went for the
&lt;a href=&quot;https://noctua.at/en/products/cpu-cooler-retail/nh-u9s&quot;&gt;Noctua NH-U9S&lt;/a&gt;) made a
huge difference. However, the ramping up noise was still there...&lt;/p&gt;
&lt;h2&gt;Upgrading the BIOS isn&#39;t so scary&lt;/h2&gt;
&lt;p&gt;My motherboard is roughly 4 years old and I have never upgraded the BIOS. Given
that there had been so many updates over the years since purchase, I decided to
see if any of those might help with the fan ramp-up issue. I also figured it
generally would unlock more efficient running by installing years of bug fixes
and improvements.&lt;/p&gt;
&lt;p&gt;The process wasn&#39;t too scary; I didn&#39;t go for the Q-Flash approach and instead
put the firmware onto a USB, booted into the BIOS and navigated through to the
ugprade options. Just make sure you get the right firmware! I came very close to
running the wrong firmware which would have left me with an expensive brick and
more money to spend on a mobo...&lt;/p&gt;
&lt;p&gt;Once the BIOS is updated you might need to re-enable some settings. I had to set
the XMP profile again to make the most out of my RAM, and re-enable
virtualisation (SVM mode for AMD) so that WSL2 functioned correctly.&lt;/p&gt;
&lt;h2&gt;Upgrade case fans to PWM&lt;/h2&gt;
&lt;p&gt;Similarly to the stock cooler, I wasn&#39;t that impressed with the fans that came
with my new case
(&lt;a href=&quot;https://www.scan.co.uk/products/fractal-design-pop-xl-silent-black-solid&quot;&gt;Fractal XL Silent&lt;/a&gt;)
and they were also 3 pin not 4 pin, which means they are not PWM fans. This
means that the computer can&#39;t smartly ramp their RPM up and down based on
temperatures.&lt;/p&gt;
&lt;p&gt;Embracing Noctua once more, I went for a few Noctua 120mm PWM fans. I got two of
their premium &lt;a href=&quot;https://noctua.at/en/products/fan/nf-a12x25-pwm&quot;&gt;A12x25&lt;/a&gt;. These
are a bit more expensive, but are incredibly quiet. I then got three more
cheaper &lt;a href=&quot;https://noctua.at/en/nf-p12-redux-1700-pwm&quot;&gt;P12 Redux&lt;/a&gt; fans to ensure a
lot of airflow through the case.&lt;/p&gt;
&lt;p&gt;Going into the BIOS and setting the fan mode to PWM has noticably reduced the
noise of the fans (and temps seem fine still). According to the internet, the
computer should detect PWM fans automatically, but not always. It is best to
explicitly set it if you only have PWM fans setup.&lt;/p&gt;
&lt;h2&gt;Positive airflow&lt;/h2&gt;
&lt;p&gt;Turns out it is important to think about the fans and what direction they are
blowing! It is best to maintain positive pressure in the case, which means more
fans bringing air into the case than blowing it out. Otherwise, in a negative
pressure setup, it is more likely that dust will get sucked into a case that is
desparate for fresh air.&lt;/p&gt;
&lt;p&gt;Ideally the air should flow neatly through the case. I have 3 fans at the front
taking air in, and 1 at the front and 1 on top taking air out. I also aligned
the CPU fan with this so it sucks air in the same direction.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Cracking Neovim code folding</title>
    <link href="http://www.jackfranklin.co.uk/blog/code-folding-in-vim-neovim/"/>
    <updated>2024-02-29T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/code-folding-in-vim-neovim/</id>
    <content type="html">&lt;p&gt;I have used Vim or variants like Neovim ever since the second year of
university, which means I&#39;ve been using Vim for nearly 13 years (!).&lt;/p&gt;
&lt;p&gt;In that time I have gotten very comfortable navigating my way through code and
codebases using Vim, and migrating to Neovim and its LSP setup has replicated an
experience very close to what VS Code provides, but with all the benefits (in my
opinion) of Vim.&lt;/p&gt;
&lt;p&gt;One feature that I have never been able to get confident with is code folding. I
relied on it a lot during my roughly year long stint of VSCode + Vim mode but
just could not get a satisifying configuration and set of commands to make it
stick in Vim...until now!&lt;/p&gt;
&lt;p&gt;The first step was
&lt;a href=&quot;https://www.youtube.com/watch?v=f_f08KnAJOQ&quot;&gt;Andrew Courter&#39;s video on code folding&lt;/a&gt;
which helped me get some basic settings in place and understand my different
options for how folding should work in Neovim. Neovim is able to use many
sources of truth for folds, from basic options like code indentation, through to
LSP servers supplying that information.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Andrew recommends the plugin
&lt;a href=&quot;https://github.com/kevinhwang91/nvim-ufo&quot;&gt;nvim-ufo&lt;/a&gt;, but when I tried it I
found it decreased performance and felt &amp;quot;janky&amp;quot; - your mileage may vary as
it&#39;s clearly a popular plugin!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Folding configuration&lt;/h2&gt;
&lt;p&gt;From Andrew&#39;s video I decided to try and set up folding again - firstly using
the UFO plugin as described above - before then deciding that I wanted to stick
to what was built in. After some experimentation I found the best combination of
settings that work for me:&lt;/p&gt;
&lt;h3&gt;foldmethod and foldexpr&lt;/h3&gt;
&lt;p&gt;I chose to use
&lt;a href=&quot;https://github.com/nvim-treesitter/nvim-treesitter?tab=readme-ov-file#folding&quot;&gt;treesitter&lt;/a&gt;
as my source of truth for folding. I chose this over the LSP option as I don&#39;t
always work in codebases that have an LSP configured - especially if I am
quickly hacking on a script. By using the treesitter grammar, I ensure every
file I load will have it.&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foldmethod &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;expr&quot;&lt;/span&gt;&lt;br&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foldexpr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;v:lua.vim.treesitter.foldexpr()&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;foldcolumn&lt;/h3&gt;
&lt;p&gt;I don&#39;t like taking up room with an extra column to display information on
folds, so I turn this off.&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foldcolumn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;foldtext&lt;/h3&gt;
&lt;p&gt;By setting this to an empty string, it means that the first line of the fold
will be syntax highlighted, rather than all be one colour. I prefer this
visually to a formatted line representing the fold with no syntax highlighting.&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foldtext &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;At the time of writing this feature is only in Neovim nightly and not in the
stable 0.9.X releases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;foldlevel and foldlevelstart&lt;/h3&gt;
&lt;p&gt;Setting &lt;code&gt;foldlevel&lt;/code&gt; sets the minimum level of a fold that will be closed by
default. Therefore I set this to &lt;code&gt;99&lt;/code&gt; as I don&#39;t want this behaviour at all.&lt;/p&gt;
&lt;p&gt;However, I discovered that I can use &lt;code&gt;foldlevelstart&lt;/code&gt; to dicate upon editing a
buffer what level of folds should be open by default vs closed.&lt;/p&gt;
&lt;p&gt;After some experimenting, I settled on &lt;code&gt;1&lt;/code&gt; for this value, meaning top level
folds are open, but anything nested beyond that is closed. I&#39;ve found this helps
with navigating a large file as not all the contents will be expanded initially.&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foldlevel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;99&lt;/span&gt;&lt;br&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foldlevelstart &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;foldnestmax&lt;/h3&gt;
&lt;p&gt;This limits how deeply code gets folded, and I&#39;ve found that I don&#39;t really care
for nesting some object 20 levels deep into a function (however rare that is!).
So I set this value to &lt;code&gt;4&lt;/code&gt;, meaning that once code gets beyond 4 levels it won&#39;t
be broken down into more granular folds. I&#39;ve found this means I can easily
toggle larger chunks of nested code as they are treated as one fold. I think
this a very subjective setting though!&lt;/p&gt;
&lt;pre class=&quot;language-lua&quot;&gt;&lt;code class=&quot;language-lua&quot;&gt;vim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foldnestmax &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;You can find my folds config
&lt;a href=&quot;https://github.com/jackfranklin/dotfiles/blob/master/nvim/lua/jack/folds.lua&quot;&gt;as part of my dotfiles&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Keyboard shortcuts&lt;/h2&gt;
&lt;p&gt;I have to thank
&lt;a href=&quot;https://gist.github.com/lestoni/8c74da455cce3d36eb68&quot;&gt;Lestoni on GitHub for this gist&lt;/a&gt;
which lists out all the shortcuts. I don&#39;t use them all but have come to rely
on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zR&lt;/code&gt; open all folds&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zM&lt;/code&gt; close all open folds&lt;/li&gt;
&lt;li&gt;&lt;code&gt;za&lt;/code&gt; toggles the fold at the cursor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;m also trying to get used to navigating via folds with &lt;code&gt;zk&lt;/code&gt; and &lt;code&gt;zj&lt;/code&gt; which
move up/down to the next fold, but that&#39;s not made it into muscle memory just
yet.&lt;/p&gt;
&lt;h2&gt;Any suggestions?&lt;/h2&gt;
&lt;p&gt;If you have any ideas for how I could further improve this setup, or suggestions
based on how you use folds, I would love to chat about it! You can find my
social accounts in the footer of this site :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Exhaustive branch checks with TypeScript</title>
    <link href="http://www.jackfranklin.co.uk/blog/typescript-exhaustive-branches/"/>
    <updated>2024-03-04T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/typescript-exhaustive-branches/</id>
    <content type="html">&lt;p&gt;It&#39;s very common when working with TypeScript that you will have a type that
declares a list of values, such as an enum or union type:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; SupportedColour1 &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token constant&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token constant&quot;&gt;YELLOW&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token constant&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SupportedColour2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;RED&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;YELLOW&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;BLUE&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then you will often have functions that need to run differently or return
different values based on what variant is passed in:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;codeForColour1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;colour&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; SupportedColour1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;colour&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; SupportedColour1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;#0000ff&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; SupportedColour1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;#ff0000&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; SupportedColour1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;YELLOW&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;#ffff00&#39;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;codeForColour2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;colour&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; SupportedColour2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;colour&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;BLUE&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;#0000ff&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;RED&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;#ff0000&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;YELLOW&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;#ffff00&#39;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Updating code when types change&lt;/h2&gt;
&lt;p&gt;One thing that can catch you out is if the list of valid values in the type
changes. Let&#39;s say we want to add &lt;code&gt;GREEN&lt;/code&gt; as a value to our union type (I will
drop the &lt;code&gt;enum&lt;/code&gt; example for brevity, but the functionality for the sake of this
post is equivalent):&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SupportedColour2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;RED&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;YELLOW&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;BLUE&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;GREEN&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case we will now get an error in this function. TypeScript will realise
that the function does not return anything in the case that &lt;code&gt;GREEN&lt;/code&gt; is passed
in, but the error is not very obvious:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;codeForColour2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;colour&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; SupportedColour2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;colour&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;BLUE&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;#0000ff&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;RED&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;#ff0000&#39;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;YELLOW&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;#ffff00&#39;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;Function lacks ending return statement and return type does not include &#39;undefined&#39;.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the function did not return a value, &lt;strong&gt;TypeScript will not error&lt;/strong&gt; and it
would be easy to miss that we now have a branch (for &lt;code&gt;GREEN&lt;/code&gt;) that is not dealt
with:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// This will not error in TypeScript, even though we are not&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// dealing with the GREEN case.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;logForColour&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;colour&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; SupportedColour2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;colour&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;BLUE&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;User picked blue&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;RED&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;User picked red&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;YELLOW&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;User picked yellow&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Meet &lt;code&gt;ensureExhaustive&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To help prevent these cases falling through the cracks, and to improve compiler
errors to point us to the problem, all of my TypeScript projects contain this
&lt;code&gt;ensureExhaustive&lt;/code&gt; helper:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ensureExhaustive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;never&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Reached a branch with non-exhaustive checks&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To use it, ensure that whenever you are branching based on values, you have a
default case that calls &lt;code&gt;ensureExhaustive&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;logForColour&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;colour&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; SupportedColour2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;colour&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;BLUE&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;User picked blue&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;RED&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;User picked red&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;YELLOW&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;User picked yellow&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token function&quot;&gt;ensureExhaustive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;colour&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because &lt;code&gt;ensureExhaustive&lt;/code&gt; takes in an argument of type &lt;code&gt;never&lt;/code&gt;, which
represents values that cannot be observed, this code will now cause a compiler
error:&lt;/p&gt;
&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;Argument of type &#39;string&#39; is not assignable to parameter of type &#39;never&#39;.(2345)&lt;br&gt;(parameter) colour: &quot;GREEN&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And TypeScript is able to tell us the exact value that we are missing from the
function.&lt;/p&gt;
&lt;p&gt;This doesn&#39;t have to be used with &lt;code&gt;switch&lt;/code&gt; statements either - it will work just
as well on large &lt;code&gt;if {} if else {}&lt;/code&gt; branches too or in any other situation where
TypeScript is applying type narrowing as it reads through your code.&lt;/p&gt;
&lt;h2&gt;Always ensure exhaustive checks&lt;/h2&gt;
&lt;p&gt;I can&#39;t overstate how helpful this technique has become in my TypeScript
codebases. By getting into the habit of using it every time I have code that
deals with branching over multiple values I am reminded to ensure I have dealt
with every value explicitly, and I get told which code to update should the set
of possible values change.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>OnTrack devlog 1</title>
    <link href="http://www.jackfranklin.co.uk/blog/devlog-javascript-ontrack-1/"/>
    <updated>2024-04-08T00:00:00+00:00</updated>
    <id>http://www.jackfranklin.co.uk/blog/devlog-javascript-ontrack-1/</id>
    <content type="html">&lt;p&gt;If you were to look at my Steam library you would see that most of my games are
strategy and logistics based (think Factorio) but with a healthy dose of
transport methods and networks (think Transport Fever 2 and OpenTTD).&lt;/p&gt;
&lt;p&gt;I&#39;ve always wanted a very specific, niche game focusing on building &lt;em&gt;passenger
networks&lt;/em&gt; that simulate how passengers travel - something I have never quite
been satisifed with in OpenTTD, Transport Fever 2, and other games that I&#39;ve
played. I like the logistical challenge of moving cargo around, but it didn&#39;t
interest me as much as the idea of moving people across a map. So, I decided to
build it...&lt;/p&gt;
&lt;h2&gt;Meet OnTrack&lt;/h2&gt;
&lt;p&gt;For over two years I have been working on an in-browser, web technology based
game all about running train networks and optimising them for passenger
satisfaction and financial revenue. It&#39;s far from complete, but also at the
point where it &lt;em&gt;sort of&lt;/em&gt; looks like a game, and a couple of people have been
able to spend some hours on it. There is no end state, and a lot of work needs
to go into the longevity of the game, but this is what it looks like...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;remember, this is far from finished, or even polished :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In future posts, I will dive more into each of the systems the game has to
provide a (hopefully!) challenging and enjoyable experience for players. In this
post I&#39;ll give you a very quick overview.&lt;/p&gt;
&lt;p&gt;First, you start a new game. Here you have a few options, but you&#39;re mainly
rerolling until you get a start you&#39;re happy with:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/images/ontrack/post-1/generation.png&quot; alt=&quot;Starting a new game&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once you have a new game, you are taken into the main UI and the game map:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/images/ontrack/post-1/new-game.png&quot; alt=&quot;A new blank map&quot;&gt;&lt;/p&gt;
&lt;p&gt;The goal here is to begin to connect towns with track, at which point you can
run routes and trains on them. At the start of the game you are given some
nudges with a contract - the completion of which earns you a reward:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/images/ontrack/post-1/contracts.png&quot; alt=&quot;The contracts view&quot;&gt;&lt;/p&gt;
&lt;p&gt;This contract is usually a hint at where to start, because you have limited time
to do so...&lt;/p&gt;
&lt;h2&gt;The engineering window&lt;/h2&gt;
&lt;p&gt;In most logistics games at any point you can pause the game, make changes, and
then start it up. You can avoid a huge issue by pausing and editing your track
or your orders before it goes awry. I wanted to avoid that in OnTrack, which is
why each night during the &lt;em&gt;engineering window&lt;/em&gt; users are given a limit on how
many changes they can make. Once that window is done, trains run during the day
and you cannot alter anything!&lt;/p&gt;
&lt;p&gt;During the first night, your best bet is to use your changes (in the very first
window of the game you get more, to enable you to get started) to connect towns
with track:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/images/ontrack/post-1/placing-track.png&quot; alt=&quot;Placing track&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once track is placed, you can then create a route. When creating a route you set
its schedule, train size and more:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/images/ontrack/post-1/new-route.png&quot; alt=&quot;Placing track&quot;&gt;&lt;/p&gt;
&lt;p&gt;But it&#39;s important not to run empty trains! These will cost you money and not
make any revenue. To avoid this, you can click on each town to view where and
when passengers want to travel:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/images/ontrack/post-1/town-demand.png&quot; alt=&quot;Town demand&quot;&gt;&lt;/p&gt;
&lt;p&gt;And once you run trains, you will see them going along the track:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/images/ontrack/post-1/trains-on-track.png&quot; alt=&quot;Town demand&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Making money&lt;/h2&gt;
&lt;p&gt;But ultimately, like any game, the goal of OnTrack is to make sure your company
is successful, and one axis to judge any company on is its revenue. In OnTrack
you can break down your ins and outs and see where you are making (or losing)
money. First the daily summary will give you a high level overview (each of
these parts will be explored in future blog posts):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/images/ontrack/post-1/daily-summary.png&quot; alt=&quot;Town demand&quot;&gt;&lt;/p&gt;
&lt;p&gt;Before you can use the financial view to get a more detailed look at the ins and
outs:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.jackfranklin.co.uk/images/ontrack/post-1/finances.png&quot; alt=&quot;Town demand&quot;&gt;&lt;/p&gt;
&lt;h2&gt;The plans for OnTrack and this blog&lt;/h2&gt;
&lt;p&gt;I do not pretend to think that OnTrack will ever be a roaring success, but I
genuinely have always wanted a game like this for years and I think for a niche
audience this could be an enjoyable experience.&lt;/p&gt;
&lt;p&gt;Right now I&#39;m focusing on fleshing out the required features that would allow me
to call this game properly playable (with rough edges). The game is entirely
browser based and currently that&#39;s how it&#39;s built and played. Long term once I
hit a &amp;quot;v1&amp;quot; I&#39;d liek to package it up - either with Electron, Tauri or some other
wrapper around web technologies.&lt;/p&gt;
&lt;p&gt;As for this blog, I hope to blog semi-regularly with updates as I build out
certain features, or explore systems that I&#39;m implementing.&lt;/p&gt;
</content>
  </entry>
</feed>
