<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Swatinem</title>
    <link rel="self" type="application/atom+xml" href="https://swatinem.de/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://swatinem.de"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-09-12T00:00:00+00:00</updated>
    <id>https://swatinem.de/atom.xml</id>
    <entry xml:lang="en">
        <title>What makes a good test?</title>
        <published>2024-09-12T00:00:00+00:00</published>
        <updated>2024-09-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/good-tests/"/>
        <id>https://swatinem.de/blog/good-tests/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/good-tests/">&lt;p&gt;I have had a couple discussions around the topic of testing philosophy and what
a good test is recently, and I want to dive deeper into this.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;background&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#background&quot; aria-label=&quot;Anchor link for: background&quot;&gt;#&lt;&#x2F;a&gt;
Background&lt;&#x2F;h2&gt;
&lt;p&gt;Let me give a bit of background first.&lt;&#x2F;p&gt;
&lt;p&gt;I have experienced quite a bit of the software engineering landscape over the course of my career.
I went through a bunch of languages through that time, and through frontend, backend, libraries and developer tools.&lt;&#x2F;p&gt;
&lt;p&gt;Through all of that, I have been kind of obsessed with clean code, quality and performance.
Testing is a big part of that. But I also take a very pragmatic approach to all of that.
Which in part also means not overdoing things, and using the right tools for the job.&lt;&#x2F;p&gt;
&lt;p&gt;Quite recently, I have also made the switch from Sentrys processing team, to &lt;a href=&quot;https:&#x2F;&#x2F;codecov.io&quot;&gt;codecov&lt;&#x2F;a&gt; which was
acquired by Sentry a while back.
Folks who have been reading my blog for a while might know that I also have a passion for code coverage,
which I also consider as a big part of code quality in general.
I have done some work related to code coverage in the Rust ecosystem, and have introduced codecov to some of the Sentry
Rust projects long before the acquisition.&lt;&#x2F;p&gt;
&lt;p&gt;Fun fact: you can also read this blog on &lt;a href=&quot;https:&#x2F;&#x2F;cov.rs&quot;&gt;cov.rs&lt;&#x2F;a&gt;, as I also bought that domain a while ago, and it has
been redirecting to this blog ever since, as I haven’t had enough motivation to use it for anything else yet.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;And codecov does take code coverage very seriously and has very high code coverage for its own code.
Though I have been criticizing its test suite as not being particularly good.&lt;&#x2F;p&gt;
&lt;p&gt;So this naturally brings up the question: What is a good test?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;it-is-okay-not-to-test&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#it-is-okay-not-to-test&quot; aria-label=&quot;Anchor link for: it-is-okay-not-to-test&quot;&gt;#&lt;&#x2F;a&gt;
It is okay not to test&lt;&#x2F;h2&gt;
&lt;p&gt;Or rather: it is okay not to have an &lt;em&gt;automated&lt;&#x2F;em&gt; test suite.&lt;&#x2F;p&gt;
&lt;p&gt;Well obviously we want the software we write to do its intended job, and we verify that by testing.
But it is perfectly okay to do that manually, just by running the software and verifying that it is doing its job.&lt;&#x2F;p&gt;
&lt;p&gt;Most of the time the reason for not doing that is that the &lt;em&gt;effort&lt;&#x2F;em&gt; is too high, and simply not worth it.
Let me give you an example here.&lt;&#x2F;p&gt;
&lt;p&gt;I maintain the popular &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Swatinem&#x2F;rust-cache&quot;&gt;rust-cache&lt;&#x2F;a&gt; GitHub Action. And it does not have any
automated test suite. It does however have a bunch of example workflows that serve a dual purpose as tests.
So what are the reasons for not having an automated test suite.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;It depends way too heavily on an external service:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Being a GitHub Action, it relies way too heavily on the whole infrastructure around GHA and its supporting services.
If I wanted to fully automatically test it, I would have to replicate GHA as faithfully as possible locally.
To be quite honest, I wouldn’t even know where to start. The effort to do this is clearly very high,
and not worth it for me.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;It is just a thin wrapper around &lt;code&gt;@actions&#x2F;cache&lt;&#x2F;code&gt;:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;My action is just a specialized version of GitHubs own cache action, and shares the underlying code with it.
I can just piggy-back on the assumption that it is somewhat well tested.&lt;&#x2F;p&gt;
&lt;p&gt;Although, I have done so in the past and I will repeat myself here:
I think GHA, and in particular &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;toolkit&quot;&gt;actions&#x2F;toolkit&lt;&#x2F;a&gt; are &lt;em&gt;casually maintained&lt;&#x2F;em&gt; abandonware,
and I am doubtful of their quality in general.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The stakes are low:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;By being a &lt;strong&gt;cache&lt;&#x2F;strong&gt;, it by definition does not provide any guarantees.
A cache speeds up an expensive (idempotent) operation by reusing a previous result.
If &lt;em&gt;anything&lt;&#x2F;em&gt; goes wrong with it, you just run the expensive operation and &lt;em&gt;everything is fine&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;On that note, I get way too many support requests for that action which I simply can’t answer,
because I would either delegate them to the upstream code I use, to the way GitHub Actions fundamentally work,
or remind folks that there is no such thing as a guaranteed cache hit.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Long story short, the point I’m trying to make is that testing, as everything else in software engineering &lt;em&gt;is about tradeoffs&lt;&#x2F;em&gt;.
It is perfectly okay to resort to manual testing if the effort writing automated tests is too high.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-the-purpose-of-a-test&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#what-is-the-purpose-of-a-test&quot; aria-label=&quot;Anchor link for: what-is-the-purpose-of-a-test&quot;&gt;#&lt;&#x2F;a&gt;
What is the purpose of a test?&lt;&#x2F;h2&gt;
&lt;p&gt;But lets get back to the fundamentals and ask ourselves what the purpose of a test, or testing in general is.&lt;&#x2F;p&gt;
&lt;p&gt;A test should, roughly speaking, verify that a piece of software does what its supposed to do.
In other words, it should be &lt;em&gt;correct&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If we turn that around a bit, we can also say that a test failure should be indicative of a bug in the software.
This also closes the loop to the topic of &lt;strong&gt;mutation testing&lt;&#x2F;strong&gt;, whereby you intentionally introduce bugs,
and expect the testsuite to fail. If it does not, that means the test suite is incomplete.
It can either mean that the testsuite does not cover all the edge cases, or that the piece of code containing the newly
introduced bug is in fact dead and irrelevant.&lt;&#x2F;p&gt;
&lt;p&gt;If we again follow this train of thought, we can say that internal changes to the software which are not introducing bugs
should not trigger testsuite failures.
In other words, if I just refactor code, but do not change how it fundamentally works, I don’t expect the testsuite to fail.&lt;&#x2F;p&gt;
&lt;p&gt;Thus I postulate that &lt;strong&gt;a good test is one you write once and never change&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-a-unit&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#what-is-a-unit&quot; aria-label=&quot;Anchor link for: what-is-a-unit&quot;&gt;#&lt;&#x2F;a&gt;
What is a “unit”?&lt;&#x2F;h2&gt;
&lt;p&gt;But hey, when you change your code, you also do need to change its tests, right? Right?&lt;&#x2F;p&gt;
&lt;p&gt;Well this naturally brings us to another question: what is the &lt;em&gt;unit&lt;&#x2F;em&gt; of code, the &lt;em&gt;granularity&lt;&#x2F;em&gt; or the &lt;em&gt;boundary&lt;&#x2F;em&gt; you want to test?
Should it be a function, a class, maybe a module?&lt;&#x2F;p&gt;
&lt;p&gt;I would adapt the above statement a little bit and say that &lt;strong&gt;your unit of test should be something that never changes&lt;&#x2F;strong&gt;.
This should ideally be the &lt;em&gt;fundamental truths&lt;&#x2F;em&gt; of your software.&lt;&#x2F;p&gt;
&lt;p&gt;Another important thing here is that it should be &lt;em&gt;self contained&lt;&#x2F;em&gt; as much as possible.&lt;&#x2F;p&gt;
&lt;p&gt;Good examples are data structures, some internals which have a clear boundary and you do not need to touch often,
or the API surface of a library.&lt;&#x2F;p&gt;
&lt;p&gt;As a bad example, I would bring up my distaste for too narrow “unit” tests, or excessive mocking.
Excessive mocking might be an indication that whatever you are testing is not &lt;em&gt;self contained&lt;&#x2F;em&gt; enough, or that you are
asserting insignificant side effects.&lt;&#x2F;p&gt;
&lt;p&gt;I have seen mocks and assertions related to metrics or log messages being emitted.
Those are truly insignificant side effects.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The question what a good &lt;em&gt;test boundary&lt;&#x2F;em&gt; is, is a lot harder to answer for a big cloud service monolith like codecov or Sentry.&lt;&#x2F;p&gt;
&lt;p&gt;Here I would design larger tests that fully represent a “user story”.
In the case of codecov, this might be: I upload a coverage report, I then expect that report to show up in codecov.
For Sentry, it would be: I upload debug files, then I upload a crash, and expect to see a fully symbolicated stack trace.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Yes, larger tests can be slower, and they might be harder to write, but I claim that they have a much &lt;strong&gt;higher signal to noise ratio&lt;&#x2F;strong&gt;
than tests that have a too narrow scope.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-place-for-snapshot-tests&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-place-for-snapshot-tests&quot; aria-label=&quot;Anchor link for: the-place-for-snapshot-tests&quot;&gt;#&lt;&#x2F;a&gt;
The place for snapshot tests&lt;&#x2F;h2&gt;
&lt;p&gt;I have written &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;good-tests&#x2F;@.&#x2F;blog&#x2F;2022-07-23-rm-snapshots.md&quot;&gt;about snapshot testing&lt;&#x2F;a&gt; over two years ago already, where I advocated
against them in general.&lt;&#x2F;p&gt;
&lt;p&gt;The problem with snapshot testing is that it has a notoriously low &lt;em&gt;signal to noise ratio&lt;&#x2F;em&gt;. Snapshots change &lt;em&gt;all the time&lt;&#x2F;em&gt;.
And at one point both the developer and the reviewer just stop paying attention and just rubberstamp changes to them,
at which point they completely lose their purpose.&lt;&#x2F;p&gt;
&lt;p&gt;There is a place for snapshot tests however, if you follow the above advice.
If you encode the fundamental assumptions about your software that will never change, then snapshot tests are a great tool.
I rely on those primarily and extensively in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Swatinem&#x2F;rollup-plugin-dts&quot;&gt;&lt;code&gt;rollup-plugin-dts&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The only reason I ever have to touch those snapshots is when I update the underlying &lt;code&gt;rollup&lt;&#x2F;code&gt; dependency, which leads to
changes in some output file names, or reordering of items. Otherwise those snapshots are stable and never change.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ui-testing&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#ui-testing&quot; aria-label=&quot;Anchor link for: ui-testing&quot;&gt;#&lt;&#x2F;a&gt;
UI testing&lt;&#x2F;h2&gt;
&lt;p&gt;One thing I find notoriously hard to test is UI though, and so far I haven’t found a good solution for those either.
Quite a while ago, I was a frontend engineer, or a developer tools engineer supporting frontend developers.&lt;&#x2F;p&gt;
&lt;p&gt;I have had experience with screenshot testing, as someone implementing the infrastructure for it at Eversports, and just
as an observer at Sentry. My sad conclusion there is that screenshot testing just isn’t worth it.&lt;&#x2F;p&gt;
&lt;p&gt;On both occasions, they were just removed after a while, after they have caused significant pain for engineers.&lt;&#x2F;p&gt;
&lt;p&gt;I have also spent a ton of time working with &lt;code&gt;cypress&lt;&#x2F;code&gt; at Eversports, even figuring out a way how to collect code coverage
for the frontend code, half a decade before joining codecov. The conclusion there was similar.
Those types of tests are finicky, and are often flaky. Thus they are high effort, and low signal to noise ratio.&lt;&#x2F;p&gt;
&lt;p&gt;Even before that I was working at pagestrip, which had a high emphasis on touch gestures and animations.
To this day I haven’t found a good solution to properly test those.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Usually you want to avoid animations (which I believe by now you can even signal as a preference via browser settings?)
in tests, to speed things up and to reduce flakiness. But sometimes its all about the animations.&lt;&#x2F;p&gt;
&lt;p&gt;Similarly, I mentioned how bad screenshot tests are, but sometimes they are the only way to make sure that things &lt;strong&gt;look correct&lt;&#x2F;strong&gt;.
Otherwise if you mess up some CSS, you content can be all over the place, your tooltips might be in the top left corner,
and your messed up &lt;code&gt;z-index&lt;&#x2F;code&gt; means some element is obscuring parts of the page.&lt;&#x2F;p&gt;
&lt;p&gt;You kind of need screenshot tests for that. But screenshot tests are also kind of really really bad.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-about-rust&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#what-about-rust&quot; aria-label=&quot;Anchor link for: what-about-rust&quot;&gt;#&lt;&#x2F;a&gt;
What about Rust?&lt;&#x2F;h2&gt;
&lt;p&gt;Even though I do waaay too much Python recently, I still mainly consider myself a Rust developer. So what does Rust do
in this regard?&lt;&#x2F;p&gt;
&lt;p&gt;I haven’t mentioned this fact thus far, but Rust does check this checkmark:&lt;&#x2F;p&gt;
&lt;p&gt;A type checker solves half of your testing needs. That, combined with Rusts focus on “make invalid states unrepresentable”.
This means you have less edge-cases, and less things to manually test for.&lt;&#x2F;p&gt;
&lt;p&gt;Rust can also guide you towards using better design patterns, implicitly by making bad design patterns cumbersome to deal with.&lt;&#x2F;p&gt;
&lt;p&gt;An example here is mocking. Specifically, in order to allow for mocks, you would have to introduce generics.
And generics can be a pain to work with sometimes. They are infectious, so you would have to carry them around &lt;em&gt;everywhere&lt;&#x2F;em&gt;.
Or you would have to resort to dynamic dispatch, which is bad for performance.
Usage in &lt;code&gt;async&lt;&#x2F;code&gt; code is even more painful as you have to blindly add &lt;code&gt;+ Send + Sync + &#x27;static&lt;&#x2F;code&gt;, often without knowing why exactly.&lt;&#x2F;p&gt;
&lt;p&gt;All in all, I would say that Rust by itself discourages mocking, and rather encourages “plain old data”.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Apart from that, I believe Rust has a uniquely good position to testing in general compared to other language ecosystems.
It has a builtin way of how to do testing, which a ton of languages do not. It also has doctests, which I love, and which
will get a whole lot better in Rust 2024 by changing the way they are compiled and run.&lt;&#x2F;p&gt;
&lt;p&gt;Even though I do not really believe in strict nomenclature related to &lt;em&gt;unit&lt;&#x2F;em&gt; tests, I believe Rust does a good job
allowing for different categories.&lt;&#x2F;p&gt;
&lt;p&gt;I would rather call them &lt;em&gt;in-crate&lt;&#x2F;em&gt; tests, which are being compiled along with the &lt;code&gt;cfg(test)&lt;&#x2F;code&gt; attribute, and as they
are defined within the crate itself, they can have access to private internals. And then you have &lt;em&gt;external&lt;&#x2F;em&gt; tests,
which are limited to only a crates public API. Plus the doctests I mentioned earlier.&lt;&#x2F;p&gt;
&lt;p&gt;Outside of the main language, you also have great utilities for snapshot testing, or testing CLI functionality with &lt;code&gt;trycmd&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Again, as in a lot of other areas, Rust does a lot of things right. But it is certainly not the end of the story.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;summary&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;#&lt;&#x2F;a&gt;
Summary&lt;&#x2F;h1&gt;
&lt;p&gt;To summarize, I believe these are some fundamental properties of good tests:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Tests should maximize the signal to noise ratio&lt;&#x2F;strong&gt;, meaning that a failing test should indicate a real bug in your code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Tests should rarely change&lt;&#x2F;strong&gt;, so you train your reviewers to actually pay attention to changes, and not just rubberstamp them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Tests should maximize the return on investment&lt;&#x2F;strong&gt;, meaning you chose the right boundaries for your tests so you can
cover a lot of ground with reasonable effort.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Be pragmatic about it&lt;&#x2F;strong&gt;, which means that you strive for good high quality tests, but don’t overdo it.
It is okay to not (automatically) test all the code.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Fun with Arrays in SQL</title>
        <published>2024-07-29T00:00:00+00:00</published>
        <updated>2024-07-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/sql-arrays/"/>
        <id>https://swatinem.de/blog/sql-arrays/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/sql-arrays/">&lt;p&gt;Today I went down quite a rabbit hole. I was playing around with native &lt;em&gt;array&lt;&#x2F;em&gt; support in SQLite.&lt;&#x2F;p&gt;
&lt;p&gt;So what exactly does this mean, and why should anyone care?&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Lets start this off by looking at SQL, which is a &lt;em&gt;somewhat&lt;&#x2F;em&gt; standardized definition and manipulation language for
relational databases. Similar to other foundational technologies in the IT sphere, SQL is quite ancient, as it was designed
in the 70s. It is thus lacking a lot of modern features, like a standardized way of working with arrays, or lists, of data.&lt;&#x2F;p&gt;
&lt;p&gt;Last time I talked about SQL on this blog was &amp;gt;5 years ago, when I was experimenting with writing my own strictly typed
&lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;database-access&#x2F;&quot;&gt;query builder&lt;&#x2F;a&gt; in TypeScript, inspired by &lt;a href=&quot;https:&#x2F;&#x2F;diesel.rs&#x2F;&quot;&gt;&lt;code&gt;diesel&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Back then, I was already lamenting lack of array support, in particular in combination with the &lt;code&gt;IN(?)&lt;&#x2F;code&gt; operator.
What this means is that it is not enough to define a &lt;em&gt;single&lt;&#x2F;em&gt; placeholder for a list of values, but you would have to
use &lt;code&gt;N&lt;&#x2F;code&gt; placeholders, one for each value.&lt;&#x2F;p&gt;
&lt;p&gt;This is bad because it pretty much means that you have to do &lt;em&gt;code generation&lt;&#x2F;em&gt; at runtime and you will end up with &lt;code&gt;N&lt;&#x2F;code&gt;
unique queries. Queries that the SQL server has to parse, plan, optimize and otherwise deal with.&lt;&#x2F;p&gt;
&lt;p&gt;Ideally, you would want to &lt;em&gt;prepare&lt;&#x2F;em&gt; a query once, and then reuse it often. This should ideally amortize some per-query
costs and help performance. If you end up with &lt;code&gt;N&lt;&#x2F;code&gt; unique queries that you are not reusing as often means you are leaving
performance on the table.&lt;&#x2F;p&gt;
&lt;p&gt;Apart from queries and usage together with the &lt;code&gt;IN&lt;&#x2F;code&gt; operator, you would also want to use arrays to optimize bulk inserts.
Which is what prompted me to research this topic once again. Let us look at example together.&lt;&#x2F;p&gt;
&lt;p&gt;Inserting into a table is done using the &lt;code&gt;INSERT INTO&lt;&#x2F;code&gt; statement. This is how it might look like in Rust for a simple example.
All of the code is available in my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Swatinem&#x2F;sql-array&quot;&gt;&lt;code&gt;sql-array&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; repository if you are curious.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; trx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;transaction&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; (1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; stmt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; trx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;prepare&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;INSERT INTO test (id, name) VALUES (?, ?);&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; (2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; rows {
&lt;&#x2F;span&gt;&lt;span&gt;    stmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;((row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;name))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; (3)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;stmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;finalize&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;trx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; (4)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, I start the bulk insertion by opening a &lt;code&gt;transaction&lt;&#x2F;code&gt; (1), and finish everything by calling &lt;code&gt;commit&lt;&#x2F;code&gt; (4).
The idea is that the bulk insertion either succeeds as a whole, or it fails in which case nothing will be inserted.&lt;&#x2F;p&gt;
&lt;p&gt;And you can see that I &lt;code&gt;prepare&lt;&#x2F;code&gt; the &lt;code&gt;INSERT&lt;&#x2F;code&gt; statement (2), and then execute it a bunch of times for each row I want to insert (3).&lt;&#x2F;p&gt;
&lt;p&gt;This is very simple, and there is more ways to optimize this to reuse the prepared statement over more bulk inserts.
However, this is quite far from being optimal. Even though the transaction is grouping all those inserts together,
we are still executing one statement per row. So we can hardly call this &lt;em&gt;bulk&lt;&#x2F;em&gt; insertion.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;What a lot of database abstractions are doing is to insert multiple rows per single statement, in which case the statement would look
a little bit like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;INSERT INTO&lt;&#x2F;span&gt;&lt;span&gt; test (id, name) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;VALUES&lt;&#x2F;span&gt;&lt;span&gt; (?, ?), (?, ?), (?, ?);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;… and so on …&lt;&#x2F;p&gt;
&lt;p&gt;You might see the problem already. We have to define each column of each row as a separate placeholder. So we generate
an increasing amount of SQL code, which the SQL server has to parse. And then we have to provide a value for each placeholder separately.&lt;&#x2F;p&gt;
&lt;p&gt;There are practical limits to how many placeholders one can define, and there is surely an optimum to how many rows you can bulk insert
with a single statement.&lt;&#x2F;p&gt;
&lt;p&gt;I implemented both of these approaches using &lt;code&gt;sqlite&lt;&#x2F;code&gt; and &lt;code&gt;postgresql&lt;&#x2F;code&gt;, and ran a bunch of benchmarks:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;benches               fastest
&lt;&#x2F;span&gt;&lt;span&gt;├─ postgres
&lt;&#x2F;span&gt;&lt;span&gt;│  ├─ insert_one
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ├─ 128          3.727 Kitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ├─ 512          3.564 Kitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ╰─ 1024         3.436 Kitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;│  ├─ insert_batched
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ├─ 128          42.25 Kitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ├─ 512          78.37 Kitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ╰─ 1024         104.6 Kitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;╰─ sqlite
&lt;&#x2F;span&gt;&lt;span&gt;   ├─ insert_one
&lt;&#x2F;span&gt;&lt;span&gt;   │  ├─ 128          3.339 Mitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;   │  ├─ 512          3.41  Mitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;   │  ╰─ 1024         3.437 Mitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;   ├─ insert_batched
&lt;&#x2F;span&gt;&lt;span&gt;   │  ├─ 128          2.573 Mitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;   │  ├─ 512          3.997 Mitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;   │  ╰─ 1024         4.174 Mitem&#x2F;s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I was using a batch-size of &lt;code&gt;50&lt;&#x2F;code&gt; within this code, which means I am inserting in chunks for &lt;code&gt;50&lt;&#x2F;code&gt; rows at once using a statement
that is being reused, plus a second statement with the remainder of elements.&lt;&#x2F;p&gt;
&lt;p&gt;As you can see, inserting rows one-by-one is pretty much flat in both postgres and sqlite, no matter the total number of rows I want to insert.
Batch optimization seems to give huge wins in postgres, and some moderate wins in sqlite, but only with an increasing amount of total rows.&lt;&#x2F;p&gt;
&lt;p&gt;SQLite is also 3 orders of magnitude faster than postgres in this benchmark, primarily because it runs completely in process and in memory, whereas
postgres was going through the local network onto a docker container.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;postgres-unnest&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#postgres-unnest&quot; aria-label=&quot;Anchor link for: postgres-unnest&quot;&gt;#&lt;&#x2F;a&gt;
Postgres &lt;code&gt;UNNEST&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;About a year ago, I learned that postgresql has native support for arrays, as well as the &lt;code&gt;UNNEST&lt;&#x2F;code&gt; function. I stumbled across a
&lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;forbeslindesay&#x2F;postgres-unnest-cheat-sheet-for-bulk-operations-1obg&quot;&gt;cheat sheet&lt;&#x2F;a&gt; that describes a bunch of bulk operations that
are enabled by &lt;code&gt;UNNEST&lt;&#x2F;code&gt;, including the &lt;code&gt;INSERT&lt;&#x2F;code&gt; statement, as well as the &lt;code&gt;IN&lt;&#x2F;code&gt; operator that I started out with.&lt;&#x2F;p&gt;
&lt;p&gt;Using &lt;code&gt;UNNEST&lt;&#x2F;code&gt; for inserts looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;INSERT INTO&lt;&#x2F;span&gt;&lt;span&gt; test (id, name) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; UNNEST($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;INT&lt;&#x2F;span&gt;&lt;span&gt;[], $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;TEXT&lt;&#x2F;span&gt;&lt;span&gt;[]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead of having to dynamically generate SQL code at runtime, this is a completely static statement, with only &lt;code&gt;2&lt;&#x2F;code&gt; placeholders.
But I can use it to insert however many rows I want.&lt;&#x2F;p&gt;
&lt;p&gt;When you provide more than one placeholder &#x2F; value to &lt;code&gt;UNNEST&lt;&#x2F;code&gt;, it pretty much acts as a transform similar to the &lt;em&gt;struct of arrays&lt;&#x2F;em&gt; pattern,
converting a bunch of homogeneous arrays into multiple rows, using each of the arrays as the column values. Pretty much turning the &lt;em&gt;struct of arrays&lt;&#x2F;em&gt;
into an &lt;em&gt;array of structs&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;That is quite amazing. My mind was blown when I learned about it, as I was searching for functionality like that for pretty much ever since I
started seriously using SQL.&lt;&#x2F;p&gt;
&lt;p&gt;Lets see how this &lt;em&gt;struct of arrays&lt;&#x2F;em&gt; approach works, and whether it provides any speedups:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;INSERT INTO test (id, name) SELECT * FROM UNNEST($1::INT[], $2::TEXT[]);&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; (1)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;row&lt;&#x2F;span&gt;&lt;span&gt;| row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;id)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; (2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; names&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;row&lt;&#x2F;span&gt;&lt;span&gt;| row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;trx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;names])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; (3)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, the query is completely static now (1), and I only execute it a single time (3).
However, I have to do the &lt;em&gt;array of structs&lt;&#x2F;em&gt; to &lt;em&gt;struct of arrays&lt;&#x2F;em&gt; transformation manually before invoking the query (2).&lt;&#x2F;p&gt;
&lt;p&gt;But running the benchmarks again, we can see that it indeed provides yet another quite impressive speedup in postgres:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;benches               fastest
&lt;&#x2F;span&gt;&lt;span&gt;├─ postgres
&lt;&#x2F;span&gt;&lt;span&gt;│  ├─ insert_batched
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ├─ 128          42.25 Kitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ├─ 512          78.37 Kitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ╰─ 1024         104.6 Kitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;│  ├─ insert_array
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ├─ 128          63.47 Kitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ├─ 512          206.5 Kitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ╰─ 1024         321.3 Kitem&#x2F;s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But, as I hinted at earlier, SQL is only &lt;em&gt;somewhat&lt;&#x2F;em&gt; standardized. The query syntax is about ~90% the same among different
SQL servers &#x2F; implementations, but they wildly differ in other regards, like the data types they support,
or the presence of &lt;code&gt;UNNEST&lt;&#x2F;code&gt;, which I have found to be pretty much exclusive to postgresql.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sqlite-carray&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#sqlite-carray&quot; aria-label=&quot;Anchor link for: sqlite-carray&quot;&gt;#&lt;&#x2F;a&gt;
SQLite &lt;code&gt;carray&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;After a &lt;em&gt;ton&lt;&#x2F;em&gt; of searching around on the web, I finally found something similar to &lt;code&gt;UNNEST&lt;&#x2F;code&gt;, which in sqlite comes in the
form of the &lt;code&gt;carray&lt;&#x2F;code&gt; extension.
I also found an &lt;a href=&quot;https:&#x2F;&#x2F;voidstar.tech&#x2F;sqlite_insert_speed&#x2F;#carray&quot;&gt;in-depth article&lt;&#x2F;a&gt; talking about bulk insert performance of sqlite,
which also concluded that &lt;code&gt;carray&lt;&#x2F;code&gt; provides the most speedup for bulk inserts.&lt;&#x2F;p&gt;
&lt;p&gt;The rust &lt;code&gt;rusqlite&lt;&#x2F;code&gt; crate comes with its own re-implementation called &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;rusqlite&#x2F;latest&#x2F;rusqlite&#x2F;vtab&#x2F;array&#x2F;index.html&quot;&gt;&lt;code&gt;rarray&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;One fundamental problem with &lt;code&gt;carray&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;rarray&lt;&#x2F;code&gt; however is that it only outputs a single column, and there is no readily available functionality
that combines more than one of these columns using the &lt;em&gt;struct of arrays&lt;&#x2F;em&gt; pattern.&lt;&#x2F;p&gt;
&lt;p&gt;The article I linked above is using a &lt;code&gt;CROSS JOIN&lt;&#x2F;code&gt;, which pretty much creates a cross product (&lt;code&gt;N*N&lt;&#x2F;code&gt;) of the two, combined with a
join condition that limits the output only to the matching rows, which looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;INSERT INTO&lt;&#x2F;span&gt;&lt;span&gt; test (id, name) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; rarray(?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;AS&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;CROSS JOIN&lt;&#x2F;span&gt;&lt;span&gt; rarray(?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;AS&lt;&#x2F;span&gt;&lt;span&gt; b ON &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;rowid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;rowid&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That is quite a mouthful, and it does not really scale that well to more columns either.&lt;&#x2F;p&gt;
&lt;p&gt;Another downside specific to &lt;code&gt;rusqlite&lt;&#x2F;code&gt; is that &lt;code&gt;rarray&lt;&#x2F;code&gt; is internally a &lt;code&gt;Rc&amp;lt;Vec&amp;lt;Value&amp;gt;&amp;gt;&lt;&#x2F;code&gt;, which means that it does not support borrows,
and requires all strings to be cloned like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ids&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;row&lt;&#x2F;span&gt;&lt;span&gt;| Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;id))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(ids)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; names&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; rows
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;row&lt;&#x2F;span&gt;&lt;span&gt;| Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; names &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(names)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While researching this a little bit, I also found that &lt;code&gt;rusqlite&lt;&#x2F;code&gt; has inefficiency as it also eagerly clones other strings internally,
which is being tracked as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rusqlite&#x2F;rusqlite&#x2F;issues&#x2F;164&quot;&gt;an issue&lt;&#x2F;a&gt; already.&lt;&#x2F;p&gt;
&lt;p&gt;So how does the performance look like here?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;╰─ sqlite
&lt;&#x2F;span&gt;&lt;span&gt;   ├─ insert_batched
&lt;&#x2F;span&gt;&lt;span&gt;   │  ├─ 128          2.573 Mitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;   │  ├─ 512          3.997 Mitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;   │  ╰─ 1024         4.174 Mitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;   ├─ insert_array
&lt;&#x2F;span&gt;&lt;span&gt;   │  ├─ 128          289.2 Kitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;   │  ├─ 512          81.15 Kitem&#x2F;s
&lt;&#x2F;span&gt;&lt;span&gt;   │  ╰─ 1024         38.94 Kitem&#x2F;s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Uhhh, what? This is significantly slower than batch-inserting, and it gets progressively slower the more rows you have.
That is not good. The article I linked above even goes into more detail why that is. The reason is pretty much that
the virtual tables backing the &lt;code&gt;rarray&lt;&#x2F;code&gt; do not support random access by &lt;code&gt;rowid&lt;&#x2F;code&gt;, if I read things right.&lt;&#x2F;p&gt;
&lt;p&gt;Thats quite disappointing.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Doing all these experiments, I was digging a bit into the actual code of &lt;code&gt;rarray&lt;&#x2F;code&gt; within &lt;code&gt;rusqlite&lt;&#x2F;code&gt;, and I believe that
the &lt;em&gt;virtual table&lt;&#x2F;em&gt; abstractions within &lt;code&gt;sqlite&lt;&#x2F;code&gt; should be powerful enough to even fully support &lt;em&gt;array of structs&lt;&#x2F;em&gt;.
So you wouldn’t even need the complex &lt;code&gt;CROSS JOIN&lt;&#x2F;code&gt;, and it should also be possible to avoid having to clone things.&lt;&#x2F;p&gt;
&lt;p&gt;I haven’t fully understood what the exact reasons are why &lt;code&gt;rusqlite&lt;&#x2F;code&gt; is using an &lt;code&gt;Rc&lt;&#x2F;code&gt; and requires owned data, but I believe
it should be possible to work with borrowed data as well. But that is a topic for another day.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-about-in&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#what-about-in&quot; aria-label=&quot;Anchor link for: what-about-in&quot;&gt;#&lt;&#x2F;a&gt;
What about &lt;code&gt;IN&lt;&#x2F;code&gt;?&lt;&#x2F;h2&gt;
&lt;p&gt;Last but not least, I also implemented using &lt;code&gt;UNNEST&lt;&#x2F;code&gt; and &lt;code&gt;rarray&lt;&#x2F;code&gt; respectively within an &lt;code&gt;IN&lt;&#x2F;code&gt; operator.&lt;&#x2F;p&gt;
&lt;p&gt;This is what it looks like postgres:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;SELECT id, name from test WHERE id IN (SELECT * FROM UNNEST($1::INT[]));&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; iter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;query_raw&lt;&#x2F;span&gt;&lt;span&gt;(query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[ids])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(raw) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;row_from_raw&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;raw)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The complexity in this query comes rather from converting (and sorting) the results. The query itself is trivially simple.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;rusqlite&lt;&#x2F;code&gt; code looks very similar, except the &lt;code&gt;rarray&lt;&#x2F;code&gt; abstraction requires converting the inputs to &lt;code&gt;Value&lt;&#x2F;code&gt; ahead of time.&lt;&#x2F;p&gt;
&lt;p&gt;How does the performance of this code look like?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;benches               fastest
&lt;&#x2F;span&gt;&lt;span&gt;├─ postgres
&lt;&#x2F;span&gt;&lt;span&gt;│  ├─ query_array     731.3 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  ╰─ query_one       574.8 µs
&lt;&#x2F;span&gt;&lt;span&gt;╰─ sqlite
&lt;&#x2F;span&gt;&lt;span&gt;   ├─ query_array     9.314 µs
&lt;&#x2F;span&gt;&lt;span&gt;   ╰─ query_one       7.248 µs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Quite disappointing actually. With both databases, using &lt;code&gt;UNNEST&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;rarray&lt;&#x2F;code&gt; within the &lt;code&gt;IN&lt;&#x2F;code&gt; operator is actually slower than
&lt;em&gt;code-generating&lt;&#x2F;em&gt; a query with a dynamic number of placeholders at runtime.&lt;&#x2F;p&gt;
&lt;p&gt;Well, its good to know at least, and this definitely was a fun rabbit hole to go into today.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Am I losing money with swing trading?</title>
        <published>2024-07-20T00:00:00+00:00</published>
        <updated>2024-07-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/swing-trading/"/>
        <id>https://swatinem.de/blog/swing-trading/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/swing-trading/">&lt;p&gt;Investing and managing my finances is one of my hobbies.
And this year, markets seem to be pretty much in bubble territory due to AI.&lt;&#x2F;p&gt;
&lt;p&gt;So I am riding the waves of stock prices, and I am trying to rebalance my holdings and cashing in on some profits.
But I want to also maximize those profits as much as I can, and to do that I am trying something new:
&lt;strong&gt;Swing trading&lt;&#x2F;strong&gt;, which means selling high (obviously), but then to also buy the dip a few days later.&lt;&#x2F;p&gt;
&lt;p&gt;So the idea is that I end up with the same amount of shares, but I can pocket the difference of selling high and buying back low.
But then reality in the form of taxes hits, and the amount of taxes I have to pay on profits can exceed the swing-trade difference.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Lets look at a small example, first without any swing trading:
Assume that I have bought &lt;em&gt;10&lt;&#x2F;em&gt; shares for a price of &lt;em&gt;10€&lt;&#x2F;em&gt; each some years ago.
Now they have bubbled up to &lt;em&gt;110€&lt;&#x2F;em&gt; in price. If I sold all of them today,
my profit would be the difference between selling price today and the buying price I payed years ago.
In this case the difference is &lt;em&gt;100€&lt;&#x2F;em&gt;. That is the profit I have to tax, using the Austrian capital gains tax of &lt;em&gt;27,5%&lt;&#x2F;em&gt;.
So at the end of the day, after taxes, I would end up with &lt;em&gt;72,5€&lt;&#x2F;em&gt; of net profit, per share, for a total of &lt;em&gt;725€&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But those are all &lt;em&gt;what ifs&lt;&#x2F;em&gt;. The markets are volatile, and the bubble might burst any day. Maybe tomorrow the shares
crash down to &lt;em&gt;20€&lt;&#x2F;em&gt;, at which point my potential profit would only be &lt;em&gt;10€&lt;&#x2F;em&gt; per share before tax, for a total of &lt;em&gt;72,5€&lt;&#x2F;em&gt; after taxes.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Now lets look at a simple swing trading example.
Again, we assume that I bought &lt;em&gt;10&lt;&#x2F;em&gt; shares for &lt;em&gt;10€&lt;&#x2F;em&gt; each.
Today I am selling &lt;em&gt;a small fraction&lt;&#x2F;em&gt; of those shares (&lt;em&gt;1&lt;&#x2F;em&gt; in this example) for &lt;em&gt;110€&lt;&#x2F;em&gt;.
Same math as before applies. I owe &lt;em&gt;27,5%&lt;&#x2F;em&gt;, or &lt;em&gt;27,5€&lt;&#x2F;em&gt; in tax for that sell.
Tomorrow the shares dip a little bit to &lt;em&gt;100€&lt;&#x2F;em&gt;, and I buy the dip.&lt;&#x2F;p&gt;
&lt;p&gt;So I sold for &lt;em&gt;110€&lt;&#x2F;em&gt;, then bought at &lt;em&gt;100€&lt;&#x2F;em&gt;, pocketing the difference of &lt;em&gt;10€&lt;&#x2F;em&gt;, right?
Well, except I owe &lt;em&gt;27,5€&lt;&#x2F;em&gt; in taxes for the sell, which means factoring in those taxes,
I effectively &lt;em&gt;lost&lt;&#x2F;em&gt; money with that swing trade, &lt;em&gt;17,5€&lt;&#x2F;em&gt; to be exact. &lt;strong&gt;Say what now?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The thing is that I am &lt;em&gt;paying taxes forward&lt;&#x2F;em&gt;. The &lt;em&gt;buyback&lt;&#x2F;em&gt; I did changes my average share price,
which is considered for the &lt;em&gt;next&lt;&#x2F;em&gt; time I will sell. Different countries have different rules for this.
In Austria, a &lt;em&gt;buy&lt;&#x2F;em&gt; maintains a weighted average.
In our example, it means the following: I started off with &lt;em&gt;9&lt;&#x2F;em&gt; shares bought for &lt;em&gt;10€&lt;&#x2F;em&gt; each years ago for a total of &lt;em&gt;90€&lt;&#x2F;em&gt;.
Now I buy one more share for &lt;em&gt;100€&lt;&#x2F;em&gt;, for a total of &lt;em&gt;190€&lt;&#x2F;em&gt; invested, or &lt;em&gt;19€&lt;&#x2F;em&gt; per share. That is my new weighted average.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Tomorrow the shares will climb to &lt;em&gt;110€&lt;&#x2F;em&gt; again. If I were to sell them all, my profit would then be &lt;em&gt;91€&lt;&#x2F;em&gt;, and owing only &lt;em&gt;25,025€&lt;&#x2F;em&gt; in taxes per share.
This would leave me with a total net profit of &lt;em&gt;749,75€&lt;&#x2F;em&gt;.
Factoring in the &lt;em&gt;loss&lt;&#x2F;em&gt; I made before on the swing trade, the total would be &lt;em&gt;732,25€&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Or in other words, &lt;em&gt;7,25€&lt;&#x2F;em&gt; more in this hypothetical example as if I didn’t do the swing trade.&lt;&#x2F;p&gt;
&lt;p&gt;Buy speaking of hypotheticals, what if the share price plummets to &lt;em&gt;20€&lt;&#x2F;em&gt; once again.
If I were to sell all, due to the change in the weighted average, my profit would only be &lt;em&gt;1€&lt;&#x2F;em&gt; per share, for a total of &lt;em&gt;2,75€&lt;&#x2F;em&gt; owed in taxes.&lt;&#x2F;p&gt;
&lt;p&gt;So I sold all the shares for &lt;em&gt;200€&lt;&#x2F;em&gt; total, having payed &lt;em&gt;17,5€&lt;&#x2F;em&gt; up front, and &lt;em&gt;2,75€&lt;&#x2F;em&gt; for the final sell.
Minus the &lt;em&gt;initial&lt;&#x2F;em&gt; investment of &lt;em&gt;100€&lt;&#x2F;em&gt; leaves me with a total net profit of &lt;em&gt;79,75€&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is again &lt;em&gt;7,25€&lt;&#x2F;em&gt; higher than without the swing trade even in case the share completely tanks.&lt;&#x2F;p&gt;
&lt;p&gt;And those &lt;em&gt;7,25€&lt;&#x2F;em&gt; is by the way what remains of the &lt;em&gt;10€&lt;&#x2F;em&gt; in swing trade difference after taxes, which is true for &lt;em&gt;all&lt;&#x2F;em&gt; the swing trades.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;So, do I actually make a loss playing around with swing trading? &lt;strong&gt;Yes&lt;&#x2F;strong&gt;, but only &lt;em&gt;short term&lt;&#x2F;em&gt;.
&lt;em&gt;Long term&lt;&#x2F;em&gt;, the price difference on the swing trades translate to real profit.&lt;&#x2F;p&gt;
&lt;p&gt;This is true for all the swing trades I am making, each sell-buy difference adds up to the long term profits.&lt;&#x2F;p&gt;
&lt;p&gt;With one caveat though: as long as I am still operating at a total profit relative to my &lt;em&gt;weighted average&lt;&#x2F;em&gt; price base.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Towards fast `thread_local!` context</title>
        <published>2024-05-17T00:00:00+00:00</published>
        <updated>2024-05-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/thread-local-context/"/>
        <id>https://swatinem.de/blog/thread-local-context/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/thread-local-context/">&lt;p&gt;I have already blogged about the &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;slow-thread-local&#x2F;&quot;&gt;surprisingly slow Rust &lt;code&gt;thread_local!&lt;&#x2F;code&gt;s&lt;&#x2F;a&gt;,
and today I ran into another related problem. And as I often do, I went right down a rabbit hole digging into it.&lt;&#x2F;p&gt;
&lt;p&gt;To give a bit of context, I am currently working on a metrics crate. One of my main goals is to make it as high performance
and as low overhead as possible.&lt;&#x2F;p&gt;
&lt;p&gt;Another goal is to make it simple to use. That means having a global fire-and-forget API.
Just slap a &lt;code&gt;counter!(&quot;counter_name&quot;: 1)&lt;&#x2F;code&gt; anywhere and it should just work. The emitted metrics should make their way
to a globally defined collector &#x2F; sink.&lt;&#x2F;p&gt;
&lt;p&gt;This is very similar to how the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tracing&quot;&gt;&lt;code&gt;tracing&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; ecosystem works, and I took a lot of inspiration
from it. Inspiration both in terms of API, but also implementation.&lt;&#x2F;p&gt;
&lt;p&gt;If you take a look at the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tracing&#x2F;latest&#x2F;tracing&#x2F;dispatcher&#x2F;index.html&quot;&gt;&lt;code&gt;tracing::dispatcher&lt;&#x2F;code&gt; docs&lt;&#x2F;a&gt;,
you will find a couple of global functions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set_global_default&lt;&#x2F;code&gt; to set a single global dispatcher.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;set_default&lt;&#x2F;code&gt; to set a thread-local dispatcher and return a scope guard which unsets it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;get_default&lt;&#x2F;code&gt; to access the &lt;em&gt;current&lt;&#x2F;em&gt; dispatcher, preferring the thread-local one, and falling back to the global one.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is quite a common pattern and is not limited to metrics or tracing at all.
It was widely discussed in the Rust community over two years ago as &lt;em&gt;Contexts and capabilities&lt;&#x2F;em&gt;.
I also chimed in with &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;log-contexts&#x2F;&quot;&gt;my own blog post&lt;&#x2F;a&gt; back then.
All the hype however was short lived, as I haven’t heard anything about it ever since.
But as we will see, this whole problem is still alive and well, as &lt;em&gt;just use &lt;code&gt;thread_local!&lt;&#x2F;code&gt;&lt;&#x2F;em&gt; does not really cut it.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Lets get back to code, and lets look at the
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tracing-core&#x2F;0.1.32&#x2F;src&#x2F;tracing_core&#x2F;dispatcher.rs.html#384-386&quot;&gt;implementation of &lt;code&gt;get_default&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; in &lt;code&gt;tracing&lt;&#x2F;code&gt;.
We can immediately see something surprising:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;SCOPED_COUNT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(Ordering&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Acquire) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; fast path if no scoped dispatcher has been set; just use the global
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; default.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_global&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As the comment suggests, accessing thread locals is so slow that its beneficial to avoid them at all cost,
for example by using a global &lt;code&gt;AtomicUsize&lt;&#x2F;code&gt; to keep track of the number of thread locals.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;strong&gt;assumption&lt;&#x2F;strong&gt; here is that in most cases, you will only have a single global context, or maybe even none at all.
Using thread-local overrides is rather rare, mostly used within tests where you want to have isolation.&lt;&#x2F;p&gt;
&lt;p&gt;This is an interesting hypothesis, so lets try to prove it with some benchmarking.&lt;&#x2F;p&gt;
&lt;p&gt;So, instead of a &lt;em&gt;local fallback&lt;&#x2F;em&gt; version that does:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;check &lt;code&gt;thread_local&lt;&#x2F;code&gt; if its usable,&lt;&#x2F;li&gt;
&lt;li&gt;fall back to &lt;code&gt;global&lt;&#x2F;code&gt; otherwise&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;It might be faster to use a &lt;em&gt;global override&lt;&#x2F;em&gt; version which does this instead:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;if &lt;em&gt;any&lt;&#x2F;em&gt; &lt;code&gt;thread_local&lt;&#x2F;code&gt; is defined:
&lt;ul&gt;
&lt;li&gt;check &lt;em&gt;own&lt;&#x2F;em&gt; &lt;code&gt;thread_local&lt;&#x2F;code&gt; if its usable,&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;fall back to &lt;code&gt;global&lt;&#x2F;code&gt; otherwise&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;My &lt;strong&gt;intuition&lt;&#x2F;strong&gt; here is that the fast path might surely prove to be warranted, but might as well turn out to be worse
in case we actually have a thread local override.&lt;&#x2F;p&gt;
&lt;p&gt;So I expect things to be ranked performance-wise like this:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;using global with fast path (no thread local set)&lt;&#x2F;li&gt;
&lt;li&gt;using a thread local value (thread local is set)&lt;&#x2F;li&gt;
&lt;li&gt;using global without fast path (no thread local set)&lt;&#x2F;li&gt;
&lt;li&gt;using a thread local despite the fast path (thread local is set)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;benchmarks&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#benchmarks&quot; aria-label=&quot;Anchor link for: benchmarks&quot;&gt;#&lt;&#x2F;a&gt;
Benchmarks&lt;&#x2F;h2&gt;
&lt;p&gt;Benchmarking this however turns out to be a bit difficult, in particular separating the setup&#x2F;teardown code from the actual benchmark.
In this specific case, setting &#x2F; unsetting the thread local value, vs actually using it.&lt;&#x2F;p&gt;
&lt;p&gt;I use &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;divan&quot;&gt;&lt;code&gt;divan&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; for benchmarks primarily because it has a convenient API, and because it allows
to trivially run the benchmark within multiple threads just by using the &lt;code&gt;DIVAN_THREADS&lt;&#x2F;code&gt; env variable.
I actually a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nvzqz&#x2F;divan&#x2F;pull&#x2F;44&quot;&gt;fork&lt;&#x2F;a&gt; which avoids spawning &lt;em&gt;thousands&lt;&#x2F;em&gt; of threads,
but reuses just as many threads as were requested.&lt;&#x2F;p&gt;
&lt;p&gt;While in theory, &lt;code&gt;divan&lt;&#x2F;code&gt; allows separating the setup and teardown code by using &lt;code&gt;with_inputs&lt;&#x2F;code&gt; for setup,
and returning a type to be &lt;code&gt;Drop&lt;&#x2F;code&gt;-ed later, the way this works is fundamentally incompatible with scope guards,
as it just initializes &lt;em&gt;all&lt;&#x2F;em&gt; the inputs first, runs the benchmark, and then &lt;code&gt;Drop&lt;&#x2F;code&gt;s all the outputs afterwards.&lt;&#x2F;p&gt;
&lt;p&gt;So all of the benchmark results for the benchmarks with the thread local &lt;em&gt;set&lt;&#x2F;em&gt; are also running the code for &lt;em&gt;setting&lt;&#x2F;em&gt; and &lt;em&gt;unsetting&lt;&#x2F;em&gt;
the &lt;code&gt;thread_local&lt;&#x2F;code&gt;.
I tried to account for that fact by just running multiple &lt;em&gt;reads&lt;&#x2F;em&gt; per benchmark iteration, so there is a higher read to write ratio.&lt;&#x2F;p&gt;
&lt;p&gt;I won’t be copy-pasting the code in this blog post, but curious folks can &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Swatinem&#x2F;merni&#x2F;blob&#x2F;cadaf12101d5e14ebe5abfaffcd5274989bacbd4&#x2F;benches&#x2F;locals.rs&quot;&gt;find all the code here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Here are the first results:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;locals                          fastest       │ slowest       │ median        │ mean
&lt;&#x2F;span&gt;&lt;span&gt;├─ _1_stable_copy                             │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;│  ├─ _1_global_override_unset  984.2 ns      │ 86.33 µs      │ 1.014 µs      │ 1.034 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  ├─ _2_local_fallback_set     1.074 µs      │ 19.36 µs      │ 1.095 µs      │ 1.124 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  ├─ _3_local_fallback_unset   1.155 µs      │ 20.12 µs      │ 1.176 µs      │ 1.209 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  ╰─ _4_global_override_set    1.196 µs      │ 20.78 µs      │ 1.236 µs      │ 1.263 µs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The benchmark results do prove my initial intuition, though only by a small-ish margin. I am still far from being able to achieve
stable benchmark timings, and I see quite some variance between runs.&lt;&#x2F;p&gt;
&lt;p&gt;Here, the &lt;em&gt;global override&lt;&#x2F;em&gt; solution that checks a global flag if &lt;em&gt;any&lt;&#x2F;em&gt; &lt;code&gt;thread_local&lt;&#x2F;code&gt; override exists is the fastest,
and checking the &lt;code&gt;thread_local&lt;&#x2F;code&gt; first (&lt;em&gt;local fallback&lt;&#x2F;em&gt;) comes in second.&lt;&#x2F;p&gt;
&lt;p&gt;However, if one actually intends to use the &lt;code&gt;thread_local&lt;&#x2F;code&gt; overrides, using &lt;em&gt;only&lt;&#x2F;em&gt; a &lt;code&gt;thread_local!&lt;&#x2F;code&gt; for that is a bit faster
than &lt;em&gt;additionally&lt;&#x2F;em&gt; maintaining a global atomic counter, no surprise there.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Now, as I mentioned, one of the selling points of &lt;code&gt;divan&lt;&#x2F;code&gt; is to trivially run the benchmarks in multiple threads,
so lets do just that via &lt;code&gt;DIVAN_THREADS=0,1&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;locals                          fastest       │ slowest       │ median        │ mean
&lt;&#x2F;span&gt;&lt;span&gt;├─ _1_stable_copy                             │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;│  ├─ _1_global_override_unset                │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ├─ t=1                    978.7 ns      │ 34.87 µs      │ 994.2 ns      │ 1.016 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ╰─ t=16                   994.2 ns      │ 7 µs          │ 1.054 µs      │ 1.081 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  ├─ _2_local_fallback_set                   │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ├─ t=1                    1.06 µs       │ 25.58 µs      │ 1.11 µs       │ 1.152 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ╰─ t=16                   1.145 µs      │ 11.78 µs      │ 1.245 µs      │ 1.243 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  ├─ _3_local_fallback_unset                 │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ├─ t=1                    1.18 µs       │ 25.1 µs       │ 1.2 µs        │ 1.237 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ╰─ t=16                   1.206 µs      │ 6.94 µs       │ 1.276 µs      │ 1.292 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  ╰─ _4_global_override_set                  │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;│     ├─ t=1                    1.201 µs      │ 24.78 µs      │ 1.256 µs      │ 1.293 µs
&lt;&#x2F;span&gt;&lt;span&gt;│     ╰─ t=16                   1.316 µs      │ 12.48 µs      │ 1.417 µs      │ 1.447 µs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running things in multiple threads does not really make such a big difference, surprisingly. Even running &lt;em&gt;16&lt;&#x2F;em&gt; threads,
whereas my CPU only has &lt;em&gt;8&lt;&#x2F;em&gt; physical cores. I would have expected things to slow down quite significantly, especially
in the worst case scenario when multiple threads are contending on the single global &lt;em&gt;“does any &lt;code&gt;thread_local&lt;&#x2F;code&gt; exist”&lt;&#x2F;em&gt; counter.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So things aren’t even as bad as I made them out to be? So where is the problem?&lt;&#x2F;p&gt;
&lt;p&gt;Well, anyone who might have clicked the link to the code above might have seen that the first level here was using
a &lt;em&gt;trivial&lt;&#x2F;em&gt; &lt;code&gt;Cell&amp;lt;usize&amp;gt;&lt;&#x2F;code&gt;. Things get quite a bit more complicated, both in terms of code to write, as well as in
performance characteristics when dealing with more complex types which are not &lt;code&gt;Copy&lt;&#x2F;code&gt;, and have a custom &lt;code&gt;Drop&lt;&#x2F;code&gt; implementation.&lt;&#x2F;p&gt;
&lt;p&gt;So lets do the same thing, but this time with a &lt;code&gt;RefCell&amp;lt;Option&amp;lt;String&amp;gt;&amp;gt;&lt;&#x2F;code&gt;. We cannot just &lt;code&gt;get()&lt;&#x2F;code&gt; the value anymore,
we have to use &lt;code&gt;with_borrow&lt;&#x2F;code&gt; and nest all the code in a closure because of lifetimes.&lt;&#x2F;p&gt;
&lt;p&gt;How are things looking with a &lt;code&gt;RefCell&amp;lt;Option&amp;lt;String&amp;gt;&amp;gt;&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;locals                          fastest       │ slowest       │ median        │ mean
&lt;&#x2F;span&gt;&lt;span&gt;├─ _2_stable_drop                             │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;│  ├─ _1_global_override_unset                │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ├─ t=1                    1.452 µs      │ 18.88 µs      │ 1.493 µs      │ 1.522 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ╰─ t=16                   1.568 µs      │ 13.02 µs      │ 1.688 µs      │ 1.708 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  ├─ _2_local_fallback_set                   │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ├─ t=1                    3.893 µs      │ 50.76 µs      │ 3.994 µs      │ 4.087 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ╰─ t=16                   4.342 µs      │ 17.37 µs      │ 4.635 µs      │ 4.724 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  ├─ _3_local_fallback_unset                 │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ├─ t=1                    3.808 µs      │ 49.25 µs      │ 3.929 µs      │ 4.014 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ╰─ t=16                   3.99 µs       │ 19.42 µs      │ 4.231 µs      │ 4.331 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  ╰─ _4_global_override_set                  │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;│     ├─ t=1                    4.02 µs       │ 51.16 µs      │ 4.102 µs      │ 4.238 µs
&lt;&#x2F;span&gt;&lt;span&gt;│     ╰─ t=16                   4.425 µs      │ 32.14 µs      │ 4.677 µs      │ 4.907 µs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now there is a much bigger win from our optimization, more than 2x actually.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nightly&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#nightly&quot; aria-label=&quot;Anchor link for: nightly&quot;&gt;#&lt;&#x2F;a&gt;
Nightly&lt;&#x2F;h2&gt;
&lt;p&gt;So far, all the benchmarks were using the &lt;code&gt;thread_local!&lt;&#x2F;code&gt; macro which is available on stable Rust.
There is also the nightly-only &lt;code&gt;#[thread_local]&lt;&#x2F;code&gt; attribute that can be used with a &lt;code&gt;static mut&lt;&#x2F;code&gt;,
which also means that one has to use &lt;code&gt;unsafe&lt;&#x2F;code&gt; for any access to the thread-local.
As a side note, the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;29594&quot;&gt;tracking issue&lt;&#x2F;a&gt; for the &lt;code&gt;#[thread_local]&lt;&#x2F;code&gt;
attribute was opened in 2015, so I’m doubtful this will make progress, and we might not even need it after all.&lt;&#x2F;p&gt;
&lt;p&gt;I tried that as well, using a straight-up &lt;code&gt;Option&amp;lt;String&amp;gt;&lt;&#x2F;code&gt; to avoid any &lt;code&gt;RefCell&lt;&#x2F;code&gt; overhead.
In this case we are using shared references, so its not quite as simple to cause major breakage as it would be with
a mutable reference. As we have to use &lt;code&gt;unsafe&lt;&#x2F;code&gt;, all other restrictions still apply.&lt;&#x2F;p&gt;
&lt;p&gt;Using the nightly &lt;code&gt;#[thread_local]&lt;&#x2F;code&gt; attribute gives these results for trivial, and complex types:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;locals                          fastest       │ slowest       │ median        │ mean
&lt;&#x2F;span&gt;&lt;span&gt;├─ _3_nightly_copy                            │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;│  ├─ _1_global_override_unset                │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ├─ t=1                    1.133 µs      │ 33.37 µs      │ 1.164 µs      │ 1.185 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ╰─ t=16                   1.179 µs      │ 9.845 µs      │ 1.219 µs      │ 1.25 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  ├─ _2_local_fallback_set                   │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ├─ t=1                    1.29 µs       │ 22 µs         │ 1.316 µs      │ 1.351 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ╰─ t=16                   1.331 µs      │ 7.751 µs      │ 1.386 µs      │ 1.425 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  ├─ _3_local_fallback_unset                 │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ├─ t=1                    1.391 µs      │ 19.19 µs      │ 1.441 µs      │ 1.463 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  │  ╰─ t=16                   1.481 µs      │ 13.83 µs      │ 1.552 µs      │ 1.605 µs
&lt;&#x2F;span&gt;&lt;span&gt;│  ╰─ _4_global_override_set                  │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;│     ├─ t=1                    1.441 µs      │ 23.64 µs      │ 1.467 µs      │ 1.498 µs
&lt;&#x2F;span&gt;&lt;span&gt;│     ╰─ t=16                   1.523 µs      │ 42.82 µs      │ 1.613 µs      │ 1.675 µs
&lt;&#x2F;span&gt;&lt;span&gt;╰─ _4_nightly_drop                            │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;   ├─ _1_global_override_unset                │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;   │  ├─ t=1                    1.467 µs      │ 74.43 µs      │ 1.498 µs      │ 1.538 µs
&lt;&#x2F;span&gt;&lt;span&gt;   │  ╰─ t=16                   1.573 µs      │ 27.9 µs       │ 1.654 µs      │ 1.68 µs
&lt;&#x2F;span&gt;&lt;span&gt;   ├─ _2_local_fallback_set                   │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;   │  ├─ t=1                    1.886 µs      │ 56.67 µs      │ 1.957 µs      │ 1.991 µs
&lt;&#x2F;span&gt;&lt;span&gt;   │  ╰─ t=16                   2.25 µs       │ 58.89 µs      │ 2.542 µs      │ 2.598 µs
&lt;&#x2F;span&gt;&lt;span&gt;   ├─ _3_local_fallback_unset                 │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;   │  ├─ t=1                    1.806 µs      │ 27.15 µs      │ 1.871 µs      │ 1.901 µs
&lt;&#x2F;span&gt;&lt;span&gt;   │  ╰─ t=16                   1.967 µs      │ 40.45 µs      │ 2.047 µs      │ 2.129 µs
&lt;&#x2F;span&gt;&lt;span&gt;   ╰─ _4_global_override_set                  │               │               │
&lt;&#x2F;span&gt;&lt;span&gt;      ├─ t=1                    2.047 µs      │ 53.8 µs       │ 2.069 µs      │ 2.117 µs
&lt;&#x2F;span&gt;&lt;span&gt;      ╰─ t=16                   2.321 µs      │ 36.43 µs      │ 2.594 µs      │ 2.706 µs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Interestingly, this turns out being worse for trivial types, but ends up being a win for more complex types.
Not sure if the win comes from avoiding the &lt;code&gt;RefCell&lt;&#x2F;code&gt; though. That remains an exercise for the reader.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>More fun with SSO, part 2</title>
        <published>2024-05-03T00:00:00+00:00</published>
        <updated>2024-05-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/smallstring-v2/"/>
        <id>https://swatinem.de/blog/smallstring-v2/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/smallstring-v2/">&lt;p&gt;Recently I was taking a look at benchmarking various approaches to small string optimization,
and you can &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;smallstring-opt&#x2F;&quot;&gt;read up on that here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As a small recap, I want to turn a &lt;code&gt;&amp;amp;[dyn Display]&lt;&#x2F;code&gt; into a &lt;code&gt;Vec&amp;lt;String&amp;gt;&lt;&#x2F;code&gt;, or similar type, as efficiently as possible.&lt;&#x2F;p&gt;
&lt;p&gt;Even before writing that post, I have forked the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;smol_str&#x2F;latest&#x2F;smol_str&#x2F;&quot;&gt;&lt;code&gt;smol_str&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate and
rewrote its internals around a hand crafted binary layout, using way too much &lt;code&gt;unsafe&lt;&#x2F;code&gt; code as some people may find
acceptable. But as we will see, it is able to squeeze a bit more performance out of that.&lt;&#x2F;p&gt;
&lt;p&gt;Also, as I have seen that the &lt;code&gt;thread_local!&lt;&#x2F;code&gt; variant was way below my expectations in terms of performance,
I changed it from using a &lt;code&gt;Cell&lt;&#x2F;code&gt; with &lt;code&gt;take&lt;&#x2F;code&gt; and &lt;code&gt;set&lt;&#x2F;code&gt;, to using a &lt;code&gt;RefCell&lt;&#x2F;code&gt; and &lt;code&gt;with_borrow_mut&lt;&#x2F;code&gt;. That can avoid
a roundtrip through &lt;code&gt;thread_local&lt;&#x2F;code&gt; as well as copying some bytes around.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the added benchmark in addition to the ones before. This is also now using a manual for loop and &lt;code&gt;Vec::with_capacity&lt;&#x2F;code&gt;
instead of an &lt;code&gt;Iterator&lt;&#x2F;code&gt; and &lt;code&gt;collect&lt;&#x2F;code&gt;. That way, we have flatter debug info, and more readable flamegraphs.
But it shouldn’t really change any of the performance outcomes.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;smolbuf&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;[Str24]&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;is_empty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; string_buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;StringBuf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;128&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;default()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; collected_tags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;with_capacity(tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; tag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; tags {
&lt;&#x2F;span&gt;&lt;span&gt;            string_buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;write!&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;mut string_buf, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{tag}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            collected_tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(Str24&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(string_buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;()))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(collected_tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_boxed_slice&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;But the biggest difference now is that I have a native Linux and macOS with me to do some more benchmarking.
Remember, in my previous post, I was running these benchmarks on a Windows machine, as well as within WSL.&lt;&#x2F;p&gt;
&lt;p&gt;And at least on Linux, I’m able to also follow some of the
&lt;a href=&quot;https:&#x2F;&#x2F;std-dev-guide.rust-lang.org&#x2F;development&#x2F;perf-benchmarking.html#built-in-microbenchmarks&quot;&gt;benchmarking best practices&lt;&#x2F;a&gt;.
Namely pinning the process to a specific core, disabling ASLR, and changing the automatic frequency scaling.
This indeed makes the numbers a lot more stable.&lt;&#x2F;p&gt;
&lt;p&gt;Here are the results on Linux, running on a single core:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;divan                   fastest       │ slowest       │ median        │ mean
&lt;&#x2F;span&gt;&lt;span&gt;├─ _1_vec_string        463.6 ns      │ 34.47 µs      │ 493.6 ns      │ 508.1 ns
&lt;&#x2F;span&gt;&lt;span&gt;├─ _2_boxed_string      456.6 ns      │ 31.86 µs      │ 483.6 ns      │ 509.2 ns
&lt;&#x2F;span&gt;&lt;span&gt;├─ _3_boxed_boxed       537.6 ns      │ 32.33 µs      │ 580.6 ns      │ 599.1 ns
&lt;&#x2F;span&gt;&lt;span&gt;├─ _4_thread_local      476.6 ns      │ 32.23 µs      │ 509.6 ns      │ 532.6 ns
&lt;&#x2F;span&gt;&lt;span&gt;├─ _5_smallvec          489.6 ns      │ 33.91 µs      │ 519.6 ns      │ 543 ns
&lt;&#x2F;span&gt;&lt;span&gt;├─ _6_smolstr           482.6 ns      │ 34.88 µs      │ 494.6 ns      │ 527.3 ns
&lt;&#x2F;span&gt;&lt;span&gt;├─ _7_smallvec_smolstr  508.6 ns      │ 34.04 µs      │ 516.6 ns      │ 534.7 ns
&lt;&#x2F;span&gt;&lt;span&gt;╰─ _8_smolbuf           440.6 ns      │ 33.58 µs      │ 451.6 ns      │ 480 ns
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see that the &lt;code&gt;thread_local&lt;&#x2F;code&gt; code fares a bit better than last time, and better than the &lt;code&gt;Box&amp;lt;[Box&amp;lt;str&amp;gt;]&amp;gt;&lt;&#x2F;code&gt; code
which is re-allocating the &lt;code&gt;String&lt;&#x2F;code&gt; into a &lt;code&gt;Box&amp;lt;str&amp;gt;&lt;&#x2F;code&gt;.
It is still worse than the simplest code returning a &lt;code&gt;Vec&amp;lt;String&amp;gt;&lt;&#x2F;code&gt;, but not by much.&lt;&#x2F;p&gt;
&lt;p&gt;The code with my forked &lt;code&gt;smol_str&lt;&#x2F;code&gt; code proves to be quite an improvement compared to the &lt;code&gt;smallvec&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;smol_str&lt;&#x2F;code&gt;
code which it is based on, and it proves to be the fastest among the ones benchmarked.&lt;&#x2F;p&gt;
&lt;p&gt;Running the benchmark with &lt;code&gt;DIVAN_THREADS=4&lt;&#x2F;code&gt; (this laptop only has a 2C&#x2F;4T CPU) yields the following results:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;divan                   fastest       │ slowest       │ median        │ mean
&lt;&#x2F;span&gt;&lt;span&gt;├─ _1_vec_string        754.6 ns      │ 392.8 µs      │ 2.659 µs      │ 2.594 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _2_boxed_string      732.6 ns      │ 84.01 µs      │ 2.673 µs      │ 2.534 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _3_boxed_boxed       916.6 ns      │ 698.3 µs      │ 3.015 µs      │ 2.901 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _4_thread_local      1.054 µs      │ 341.3 µs      │ 3.315 µs      │ 3.353 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _5_smallvec          899.6 ns      │ 165.7 µs      │ 3.001 µs      │ 2.89 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _6_smolstr           810.6 ns      │ 378.1 µs      │ 2.727 µs      │ 2.726 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _7_smallvec_smolstr  741.6 ns      │ 368.7 µs      │ 2.813 µs      │ 2.798 µs
&lt;&#x2F;span&gt;&lt;span&gt;╰─ _8_smolbuf           820.6 ns      │ 34.09 µs      │ 2.599 µs      │ 2.563 µs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This yields a similar picture: The &lt;code&gt;thread_local&lt;&#x2F;code&gt; variant turns out to be quite bad, even though it should be
especially beneficial in this scenario.
The rewritten &lt;code&gt;smol_str&lt;&#x2F;code&gt; again turns out to be ahead (looking at the &lt;em&gt;median&lt;&#x2F;em&gt; numbers), but just barely.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;And now onto the elephant in the room: macOS.&lt;&#x2F;p&gt;
&lt;p&gt;I’m a bit unsure about how to apply benchmarking best practices here, and I admit that the numbers I got were quite
unstable. But here they are, running single-threaded. Again, I am primarily looking at the &lt;em&gt;median&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;divan                   fastest       │ slowest       │ median        │ mean
&lt;&#x2F;span&gt;&lt;span&gt;├─ _1_vec_string        1.424 µs      │ 136 µs        │ 1.499 µs      │ 1.637 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _2_boxed_string      1.474 µs      │ 68.11 µs      │ 1.679 µs      │ 1.766 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _3_boxed_boxed       1.608 µs      │ 69.31 µs      │ 1.901 µs      │ 1.984 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _4_thread_local      1.547 µs      │ 99.33 µs      │ 1.644 µs      │ 1.711 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _5_smallvec          1.502 µs      │ 67.44 µs      │ 1.578 µs      │ 1.629 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _6_smolstr           872.7 ns      │ 66.57 µs      │ 933.7 ns      │ 972.4 ns
&lt;&#x2F;span&gt;&lt;span&gt;├─ _7_smallvec_smolstr  836.7 ns      │ 101.4 µs      │ 868.7 ns      │ 911.7 ns
&lt;&#x2F;span&gt;&lt;span&gt;╰─ _8_smolbuf           785.7 ns      │ 114.4 µs      │ 815.7 ns      │ 853.4 ns
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What we can see is that finally, the &lt;code&gt;thread_local&lt;&#x2F;code&gt; version turns out to be an improvement compared to the (re)-allocating one.
And all the SSO-based versions are considerably faster than the ones allocating heap memory.&lt;&#x2F;p&gt;
&lt;p&gt;Here are the numbers running with 16 threads:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;divan                   fastest       │ slowest       │ median        │ mean
&lt;&#x2F;span&gt;&lt;span&gt;├─ _1_vec_string        1.962 µs      │ 131.8 µs      │ 3.975 µs      │ 4.273 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _2_boxed_string      1.992 µs      │ 69.95 µs      │ 4.068 µs      │ 4.404 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _3_boxed_boxed       2.169 µs      │ 65.09 µs      │ 4.46 µs       │ 4.796 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _4_thread_local      2.236 µs      │ 31.15 µs      │ 4.862 µs      │ 5.142 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _5_smallvec          1.882 µs      │ 29.93 µs      │ 3.885 µs      │ 4.129 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _6_smolstr           1.202 µs      │ 22.67 µs      │ 2.706 µs      │ 2.825 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _7_smallvec_smolstr  1.161 µs      │ 53.01 µs      │ 2.617 µs      │ 2.776 µs
&lt;&#x2F;span&gt;&lt;span&gt;╰─ _8_smolbuf           1.071 µs      │ 20.43 µs      │ 2.465 µs      │ 2.603 µs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;thread_local&lt;&#x2F;code&gt; version is again losing out, but the win of the non-allocating SSO-based versions is very clear.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;It is definitely fun obsessing about these tiny details, and chasing the smallest of improvements.&lt;&#x2F;p&gt;
&lt;p&gt;But the results have also shown that the simplest solution is often also the fastest, surprising as it may be.&lt;&#x2F;p&gt;
&lt;p&gt;However, one important thing to note here is that these were &lt;strong&gt;micro&lt;&#x2F;strong&gt;-benchmarks. Even the cases that are allocating
memory only hold on to that for a short period of time, and free things right away. Things might look very different
when other parts of the code are allocating heap memory all over the place, and when the resulting allocation is
held on for a longer time, and potentially being &lt;code&gt;free&lt;&#x2F;code&gt;d on a different thread.&lt;&#x2F;p&gt;
&lt;p&gt;Not to mention that a ton of small (re)-allocations can lead to increased heap fragmentation.&lt;&#x2F;p&gt;
&lt;p&gt;All in all, I believe using &lt;code&gt;smol_str&lt;&#x2F;code&gt;, or my fork &#x2F; rewrite that I’m supposed to publish at one point,
is worth it in general. Even though its quite an effort to get it to beat the simplest solution in micro-benchmarks.&lt;&#x2F;p&gt;
&lt;p&gt;In the end, one should always look at a &lt;strong&gt;macro&lt;&#x2F;strong&gt;-benchmark instead, as we are definitely interested in real world numbers
at the end of the day.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Another fun fact and outcome from this whole analysis is also that for this micro-benchmark,
Linux is way faster than both Windows and macOS.&lt;&#x2F;p&gt;
&lt;p&gt;Not only is WSL twice as fast as the Windows version &lt;em&gt;running on the same hardware&lt;&#x2F;em&gt;,
but my aging 2017 &lt;em&gt;i7-7500U&lt;&#x2F;em&gt; has similar single thread performance to my 2018 &lt;em&gt;Ryzen 2700X&lt;&#x2F;em&gt;,
and easily beating the 2019 &lt;em&gt;i9-9880H&lt;&#x2F;em&gt; running macOS.&lt;&#x2F;p&gt;
&lt;p&gt;The low number of hardware cores&#x2F;threads is showing though, but the 7 year old hardware is still
enough to do meaningful Rust development on.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Fun with benchmarking small string optimization</title>
        <published>2024-04-28T00:00:00+00:00</published>
        <updated>2024-04-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/smallstring-opt/"/>
        <id>https://swatinem.de/blog/smallstring-opt/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/smallstring-opt/">&lt;p&gt;Sometimes I really like to go down a rabbit hole and obsess about some tiny details.&lt;&#x2F;p&gt;
&lt;p&gt;Today is such a day, and I am benchmarking, profiling and trying to micro-optimize
a piece of Rust code, specifically looking at small string optimization.&lt;&#x2F;p&gt;
&lt;p&gt;My use-case is as following: I have a slice of &lt;code&gt;&amp;amp;dyn Display&lt;&#x2F;code&gt;, and I want to
stringify and capture those values for later.&lt;&#x2F;p&gt;
&lt;p&gt;To have some comparable test-cases, here is also a small benchmarking function
that calls our actual implementation with a bunch of examples:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;InputTags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; = &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; dyn std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Display]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F, R&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; F)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Fn(InputTags) -&amp;gt; R,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;hint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;black_box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; InputTags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;black_box&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;black_box&lt;&#x2F;span&gt;&lt;span&gt;(tags)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; InputTags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;black_box&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;black_box&lt;&#x2F;span&gt;&lt;span&gt;(tags)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; InputTags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;456&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;black_box&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;black_box&lt;&#x2F;span&gt;&lt;span&gt;(tags)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; InputTags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;b&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;c&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;black_box&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;black_box&lt;&#x2F;span&gt;&lt;span&gt;(tags)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; InputTags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;some more, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;and a bit longer&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;tag values.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;with one a bit longer than the capacity of a smol_str&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;black_box&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;black_box&lt;&#x2F;span&gt;&lt;span&gt;(tags)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, this is also using &lt;code&gt;std::hint::black_box&lt;&#x2F;code&gt; to prevent the compiler
from just optimizing everything away.&lt;&#x2F;p&gt;
&lt;p&gt;A straight forward and extremely simple implementation is this is this one-liner:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;vec_string&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; { tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;| d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;() })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;My &lt;em&gt;assumption&lt;&#x2F;em&gt; though is that it is suboptimal for a number of reasons I want to improve upon.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Both the &lt;code&gt;Vec&lt;&#x2F;code&gt; and &lt;code&gt;String&lt;&#x2F;code&gt; are growable types.&lt;&#x2F;li&gt;
&lt;li&gt;Both are thus &lt;em&gt;wasting&lt;&#x2F;em&gt; a &lt;code&gt;capacity: usize&lt;&#x2F;code&gt; that is not needed.&lt;&#x2F;li&gt;
&lt;li&gt;In particular the &lt;code&gt;String&lt;&#x2F;code&gt; might have some spare capacity at the end that is not needed.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;String&lt;&#x2F;code&gt; has an indirection to the heap, and an allocation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Another thing that is not quite obvious from this example is that I want to also optimize the on-stack size of the result.
So I am mostly focused on the performance and allocation of the inner string, and not the outer container.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;We can get rid of the excess &lt;code&gt;capacity&lt;&#x2F;code&gt; (and the &lt;code&gt;usize&lt;&#x2F;code&gt;) by switching to a boxed slice &#x2F; str.&lt;&#x2F;p&gt;
&lt;p&gt;Here, my &lt;em&gt;assumptions&lt;&#x2F;em&gt; are this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Switching to &lt;code&gt;Box&amp;lt;[String]&amp;gt;&lt;&#x2F;code&gt; should be quite cheap, as we know the length &#x2F; allocation ahead of time.&lt;&#x2F;li&gt;
&lt;li&gt;Switching to &lt;code&gt;Box&amp;lt;str&amp;gt;&lt;&#x2F;code&gt; however will likely result in a re-allocation.&lt;&#x2F;li&gt;
&lt;li&gt;However, we are saving &lt;code&gt;8 bytes&lt;&#x2F;code&gt; per string, so that should be a positive on the total memory usage.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To validate the first two points, I separated both moves into their own functions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;boxed_string&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;[&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;is_empty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; collected_tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;| d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(collected_tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_boxed_slice&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;boxed_boxed&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;[&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;]&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;is_empty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; collected_tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tags
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;| d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_boxed_str&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(collected_tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_boxed_slice&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, I actually made these an &lt;code&gt;Option&amp;lt;Box&amp;gt;&lt;&#x2F;code&gt;, as even an empty &lt;code&gt;Box&lt;&#x2F;code&gt; would incur an allocation, and I would
like to avoid those. Due to nice optimization, the &lt;code&gt;Option&amp;lt;Box&amp;gt;&lt;&#x2F;code&gt; is still only &lt;code&gt;16 bytes&lt;&#x2F;code&gt; on-stack.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The &lt;code&gt;into_boxed_str&lt;&#x2F;code&gt; call will &lt;em&gt;most likely&lt;&#x2F;em&gt; result in a re-allocation and copy, plus a subsequent &lt;code&gt;free&lt;&#x2F;code&gt; of the growable &lt;code&gt;String&lt;&#x2F;code&gt;.
I have previously seen in profiles that these allocations can be quite hot, and I have also had some success switching
to a persistent &lt;code&gt;thread_local&lt;&#x2F;code&gt; allocation.&lt;&#x2F;p&gt;
&lt;p&gt;My &lt;em&gt;assumption&lt;&#x2F;em&gt; there is that relaying on a thread-local is beneficial compared to using the system allocator,
in particular in &lt;em&gt;multi-threaded code&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So here is the next step, using a persistent &lt;code&gt;thread_local&lt;&#x2F;code&gt; &lt;code&gt;String&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;thread_local&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;thread_local! &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;BUFFER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Cell&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ Cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new()) }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;[&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;]&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;is_empty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; string_buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;BUFFER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; collected_tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tags
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;                string_buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;write!&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;mut string_buf, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{d}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                string_buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;BUFFER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(string_buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(collected_tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_boxed_slice&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I opted to use a &lt;code&gt;Cell&lt;&#x2F;code&gt;, combined with &lt;code&gt;take()&lt;&#x2F;code&gt; here, although a &lt;code&gt;RefCell&lt;&#x2F;code&gt; with &lt;code&gt;with_borrow_mut&lt;&#x2F;code&gt; might be equally good,
or even better. In this case, I wanted to avoid having to use yet another closure.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;One valid feedback here might be that we are still going to the &lt;em&gt;heap&lt;&#x2F;em&gt;, through a &lt;code&gt;thread_local&lt;&#x2F;code&gt; indirection.
Why not just stay on the &lt;em&gt;stack&lt;&#x2F;em&gt; altogether?&lt;&#x2F;p&gt;
&lt;p&gt;Very good point, and one motivating point for this &lt;code&gt;thread_local&lt;&#x2F;code&gt; solution is that it is using only &lt;code&gt;std&lt;&#x2F;code&gt; types.
If we want to pull in code from &lt;code&gt;crates.io&lt;&#x2F;code&gt;, we can for example use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;smallvec&#x2F;latest&#x2F;smallvec&#x2F;&quot;&gt;&lt;code&gt;smallvec&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
crate to keep a stack-local buffer,
and then copy bytes over to the final &lt;code&gt;Box&amp;lt;str&amp;gt;&lt;&#x2F;code&gt; from there.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;em&gt;assumption&lt;&#x2F;em&gt; is that this should avoid &lt;code&gt;thread_local&lt;&#x2F;code&gt; overhead which unfortunately can be quite significant,
as I have &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;slow-thread-local&#x2F;&quot;&gt;written about previously&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a small wrapper around &lt;code&gt;smallvec&lt;&#x2F;code&gt; that acts as a &lt;code&gt;String&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Default)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;StringBuf&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; N&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;smallvec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;SmallVec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;, N&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; N&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;StringBuf&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;N&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from_utf8_unchecked(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buf) }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; N&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Write &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;StringBuf&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;N&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;write_str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Result {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;extend_from_slice&lt;&#x2F;span&gt;&lt;span&gt;(s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here is the final code using that wrapper:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;smallvec&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;[&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;]&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;is_empty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; string_buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;StringBuf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;128&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;default()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; collected_tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tags
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;                string_buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;write!&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;mut string_buf, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{d}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                string_buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(collected_tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_boxed_slice&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Next up, we are still doing an allocation and a copy for the &lt;code&gt;Box&amp;lt;str&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Lets get to the meat of this blog post by finally introducing &lt;em&gt;small string optimization&lt;&#x2F;em&gt;.
I will use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;smol_str&#x2F;latest&#x2F;smol_str&#x2F;&quot;&gt;&lt;code&gt;smol_str&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate for this,
which also comes with an incredibly convenient &lt;code&gt;format_smolstr!&lt;&#x2F;code&gt; macro:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;smolstr&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;[SmolStr]&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;is_empty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; collected_tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;format_smolstr!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;{d}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(collected_tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_boxed_slice&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;em&gt;assumption&lt;&#x2F;em&gt; is that we should see quite an improvement by avoiding all the allocations.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;However, the test function has one string that is too large and will spill to the heap.
My &lt;em&gt;assumption&lt;&#x2F;em&gt; is that &lt;code&gt;smol_str&lt;&#x2F;code&gt; might not handle that edge-case very well, as I think it is spilling to a &lt;code&gt;String&lt;&#x2F;code&gt;,
and then doing yet another re-allocation with the &lt;code&gt;Arc&lt;&#x2F;code&gt; equivalent of &lt;code&gt;into_boxed_str&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Just to validate that case, I built another variant, combining the two:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;smallvec_smolstr&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;[SmolStr]&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;is_empty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; string_buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;StringBuf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;128&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;default()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; collected_tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tags
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;                string_buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;write!&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;mut string_buf, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{d}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                string_buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(collected_tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_boxed_slice&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;benchmarking&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#benchmarking&quot; aria-label=&quot;Anchor link for: benchmarking&quot;&gt;#&lt;&#x2F;a&gt;
Benchmarking&lt;&#x2F;h2&gt;
&lt;p&gt;So I have my testcase, and I have written a bunch of implementations with some &lt;em&gt;assumptions&lt;&#x2F;em&gt; of how they should behave.&lt;&#x2F;p&gt;
&lt;p&gt;Before we jump into the results, I want to highlight that &lt;em&gt;I did not follow benchmarking best practices&lt;&#x2F;em&gt;, which would be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Disable automatic frequency scaling, so things are less effected by thermal management.&lt;&#x2F;li&gt;
&lt;li&gt;Disable hyper-threading, and&lt;&#x2F;li&gt;
&lt;li&gt;Pin threads to specific cores to avoid scheduling &#x2F; context switching overhead.&lt;&#x2F;li&gt;
&lt;li&gt;Keep the system as idle as possible.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Well, ain’t nobody got time fo dat. I have my IDE and browser with music running here in the background.
I also can’t be bothered to figure out how to even disable all the CPU features that could lead to unstable benchmark
results.
And as we will see, the results &lt;em&gt;can&lt;&#x2F;em&gt; get very unstable indeed.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;For benchmarking, I am using the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;divan&#x2F;latest&#x2F;divan&#x2F;&quot;&gt;&lt;code&gt;divan&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate here.
While &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;criterion&#x2F;latest&#x2F;criterion&#x2F;&quot;&gt;&lt;code&gt;criterion&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is often said to provide more stable results,
I do quite like the convenience of &lt;code&gt;divan&lt;&#x2F;code&gt;, especially being able to trivially run the code multi-threaded.
To try to get some more stable results, I also experimented with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iai-callgrind&#x2F;iai-callgrind&quot;&gt;&lt;code&gt;iai-callgrind&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But lets take a look at the &lt;code&gt;divan&lt;&#x2F;code&gt; results first. Here is a benchmark run on Windows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;divan                   fastest       │ slowest       │ median        │ mean
&lt;&#x2F;span&gt;&lt;span&gt;├─ _1_vec_string        1.012 µs      │ 1.524 µs      │ 1.037 µs      │ 1.048 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _2_boxed_string      993.5 ns      │ 2.343 µs      │ 1.024 µs      │ 1.055 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _3_boxed_boxed       1.499 µs      │ 5.112 µs      │ 1.574 µs      │ 1.637 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _4_thread_local      1.099 µs      │ 1.862 µs      │ 1.124 µs      │ 1.144 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _5_smallvec          1.099 µs      │ 1.637 µs      │ 1.131 µs      │ 1.137 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _6_smolstr           781 ns        │ 1.412 µs      │ 793.5 ns      │ 803.2 ns
&lt;&#x2F;span&gt;&lt;span&gt;╰─ _7_smallvec_smolstr  756 ns        │ 999.7 ns      │ 762.2 ns      │ 772 ns
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we look at both the &lt;em&gt;fastest&lt;&#x2F;em&gt; and &lt;em&gt;median&lt;&#x2F;em&gt; time, we can see the following differences:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Going from &lt;code&gt;Vec&amp;lt;String&amp;gt;&lt;&#x2F;code&gt; to &lt;code&gt;Box&amp;lt;[String]&amp;gt;&lt;&#x2F;code&gt; is a wash.&lt;&#x2F;li&gt;
&lt;li&gt;The re-allocation going from &lt;code&gt;String&lt;&#x2F;code&gt; to &lt;code&gt;Box&amp;lt;str&amp;gt;&lt;&#x2F;code&gt; indeed hurts quite a bit.&lt;&#x2F;li&gt;
&lt;li&gt;Using either &lt;code&gt;thread_local&lt;&#x2F;code&gt; or stack-allocated &lt;code&gt;smallvec&lt;&#x2F;code&gt; improves upon that.&lt;&#x2F;li&gt;
&lt;li&gt;However, it seems to be slightly slower than the naive &lt;code&gt;Vec&amp;lt;String&amp;gt;&lt;&#x2F;code&gt; implementation.&lt;&#x2F;li&gt;
&lt;li&gt;Using &lt;code&gt;smol_str&lt;&#x2F;code&gt; is quite a win compared to the baseline.&lt;&#x2F;li&gt;
&lt;li&gt;Surprisingly, using both &lt;code&gt;smallvec&lt;&#x2F;code&gt; and &lt;code&gt;smol_str&lt;&#x2F;code&gt; in another tiny win.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To give an example of the &lt;em&gt;very unstable&lt;&#x2F;em&gt; results I seem to get, here are the results running &lt;em&gt;the exact same&lt;&#x2F;em&gt; code another time:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;divan                   fastest       │ slowest       │ median        │ mean
&lt;&#x2F;span&gt;&lt;span&gt;├─ _1_vec_string        1.018 µs      │ 2.581 µs      │ 2.106 µs      │ 2.048 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _2_boxed_string      1.037 µs      │ 2.449 µs      │ 2.112 µs      │ 2.04 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _3_boxed_boxed       1.537 µs      │ 6.412 µs      │ 2.537 µs      │ 2.562 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _4_thread_local      1.118 µs      │ 2.481 µs      │ 2.143 µs      │ 2.094 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _5_smallvec          1.106 µs      │ 17.63 µs      │ 2.134 µs      │ 2.8 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _6_smolstr           899.7 ns      │ 10.99 µs      │ 2.699 µs      │ 2.955 µs
&lt;&#x2F;span&gt;&lt;span&gt;╰─ _7_smallvec_smolstr  762.2 ns      │ 4.043 µs      │ 2.743 µs      │ 2.717 µs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For some reason, the &lt;em&gt;median&lt;&#x2F;em&gt; time is around twice it was before across the board,
with the median for the stack-allocated code appearing quite a bit slower now.
The &lt;em&gt;fastest&lt;&#x2F;em&gt; times however are very much on par with the previous results however.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;As I mentioned, one nice thing about &lt;code&gt;divan&lt;&#x2F;code&gt; is that you can run the benchmarks in multiple threads,
simply by adding &lt;code&gt;DIVAN_THREADS=16&lt;&#x2F;code&gt; to your environment.&lt;&#x2F;p&gt;
&lt;p&gt;Now we can see something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;divan                   fastest       │ slowest       │ median        │ mean
&lt;&#x2F;span&gt;&lt;span&gt;├─ _1_vec_string        1.699 µs      │ 204.8 µs      │ 4.199 µs      │ 5.569 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _2_boxed_string      1.799 µs      │ 70.49 µs      │ 4.199 µs      │ 4.913 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _3_boxed_boxed       2.299 µs      │ 89.49 µs      │ 5.099 µs      │ 5.796 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _4_thread_local      2.499 µs      │ 110.7 µs      │ 5.899 µs      │ 7.752 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _5_smallvec          1.599 µs      │ 60.59 µs      │ 3.199 µs      │ 3.638 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _6_smolstr           1.399 µs      │ 82.89 µs      │ 3.749 µs      │ 4.255 µs
&lt;&#x2F;span&gt;&lt;span&gt;╰─ _7_smallvec_smolstr  1.099 µs      │ 20.97 µs      │ 1.949 µs      │ 2.043 µs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we can see:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;smol_str&lt;&#x2F;code&gt; combined with &lt;code&gt;smallvec&lt;&#x2F;code&gt; is the clear winner here.&lt;&#x2F;li&gt;
&lt;li&gt;Surprisingly, &lt;code&gt;thread_local&lt;&#x2F;code&gt; is quite a pessimization, even running things multi-threaded.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As mentioned previously, I am running &lt;code&gt;16&lt;&#x2F;code&gt; threads here on loaded Windows with a
&lt;em&gt;Ryzen 2700X&lt;&#x2F;em&gt; CPU which has a &lt;code&gt;8C&#x2F;16T&lt;&#x2F;code&gt; configuration.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;thread_local&lt;&#x2F;code&gt; results however were really surprising. I ran quite a bit of
benchmarking and profiling on a macOS which showed clear wins.
Possibly because the macOS system allocator is particularly slow?&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I don’t really want to turn on the MacBook right now as I am on sabbatical right now.
But I can try running the same benchmarks on Linux, or rather Windows Subsystem for Linux (WSL) to be exact.&lt;&#x2F;p&gt;
&lt;p&gt;Here are the results from Linux running in WSL on the exact Windows system I used to capture the above results:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;divan                   fastest       │ slowest       │ median        │ mean
&lt;&#x2F;span&gt;&lt;span&gt;├─ _1_vec_string        447.7 ns      │ 3.622 µs      │ 457.7 ns      │ 494.1 ns
&lt;&#x2F;span&gt;&lt;span&gt;├─ _2_boxed_string      452.5 ns      │ 488.5 ns      │ 455 ns        │ 455.3 ns
&lt;&#x2F;span&gt;&lt;span&gt;├─ _3_boxed_boxed       564.5 ns      │ 612.2 ns      │ 567 ns        │ 566.8 ns
&lt;&#x2F;span&gt;&lt;span&gt;├─ _4_thread_local      561.7 ns      │ 3.613 µs      │ 571.7 ns      │ 604.6 ns
&lt;&#x2F;span&gt;&lt;span&gt;├─ _5_smallvec          557.5 ns      │ 3.377 µs      │ 562.2 ns      │ 590.7 ns
&lt;&#x2F;span&gt;&lt;span&gt;├─ _6_smolstr           504.7 ns      │ 2.164 µs      │ 513.7 ns      │ 532.5 ns
&lt;&#x2F;span&gt;&lt;span&gt;╰─ _7_smallvec_smolstr  526.5 ns      │ 586.2 ns      │ 528.7 ns      │ 528.9 ns
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is quite some surprising results here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Linux seems to be twice as fast as Windows, even running within WSL.&lt;&#x2F;li&gt;
&lt;li&gt;Again, the &lt;code&gt;thread_local&lt;&#x2F;code&gt; variant is slower than just directly allocating.&lt;&#x2F;li&gt;
&lt;li&gt;Most surprisingly, also using &lt;code&gt;smol_str&lt;&#x2F;code&gt; and &lt;code&gt;smallvec&lt;&#x2F;code&gt; is slower as well.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Interestingly, the results are quite more stable than on Windows, possibly because of a better CPU scheduler.
I didn’t see wildly different results when I re-ran the same benchmark.&lt;&#x2F;p&gt;
&lt;p&gt;Running the benchmarks multi-threaded via &lt;code&gt;DIVAN_THREADS=16&lt;&#x2F;code&gt; on Linux gives these results:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;divan                   fastest       │ slowest       │ median        │ mean
&lt;&#x2F;span&gt;&lt;span&gt;├─ _1_vec_string        1.533 µs      │ 118.4 µs      │ 2.171 µs      │ 2.344 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _2_boxed_string      1.69 µs       │ 37.37 µs      │ 2.217 µs      │ 2.311 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _3_boxed_boxed       997.7 ns      │ 36.98 µs      │ 2.383 µs      │ 2.476 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _4_thread_local      1.829 µs      │ 146.5 µs      │ 3.234 µs      │ 3.394 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _5_smallvec          1.431 µs      │ 97.89 µs      │ 2.346 µs      │ 2.648 µs
&lt;&#x2F;span&gt;&lt;span&gt;├─ _6_smolstr           1.718 µs      │ 31.45 µs      │ 2.707 µs      │ 2.932 µs
&lt;&#x2F;span&gt;&lt;span&gt;╰─ _7_smallvec_smolstr  1.287 µs      │ 46.39 µs      │ 2.4 µs        │ 2.737 µs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These results are similar to the ones above:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The simplest implementation seems to be the fastest.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;thread_local&lt;&#x2F;code&gt; does not seem to be an improvement over just allocating directly.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;smol_str&lt;&#x2F;code&gt; and &lt;code&gt;smallvec&lt;&#x2F;code&gt; are not providing any gains here.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;callgrind-and-profiling&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#callgrind-and-profiling&quot; aria-label=&quot;Anchor link for: callgrind-and-profiling&quot;&gt;#&lt;&#x2F;a&gt;
Callgrind and Profiling&lt;&#x2F;h2&gt;
&lt;p&gt;I mentioned that I was also experimenting with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iai-callgrind&#x2F;iai-callgrind&quot;&gt;&lt;code&gt;iai-callgrind&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
so lets look at those results.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;callgrind::bench_group::_1_vec_string
&lt;&#x2F;span&gt;&lt;span&gt;  Instructions:                5272|5272            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  L1 Hits:                     7421|7421            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  L2 Hits:                        8|8               (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  RAM Hits:                     122|122             (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  Total read+write:            7551|7551            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  Estimated Cycles:           11731|11731           (No change)
&lt;&#x2F;span&gt;&lt;span&gt;callgrind::bench_group::_2_boxed_string
&lt;&#x2F;span&gt;&lt;span&gt;  Instructions:                5326|5326            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  L1 Hits:                     7492|7492            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  L2 Hits:                        8|8               (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  RAM Hits:                     126|126             (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  Total read+write:            7626|7626            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  Estimated Cycles:           11942|11942           (No change)
&lt;&#x2F;span&gt;&lt;span&gt;callgrind::bench_group::_3_boxed_boxed
&lt;&#x2F;span&gt;&lt;span&gt;  Instructions:                6380|6380            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  L1 Hits:                     8887|8887            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  L2 Hits:                       12|12              (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  RAM Hits:                     131|131             (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  Total read+write:            9030|9030            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  Estimated Cycles:           13532|13532           (No change)
&lt;&#x2F;span&gt;&lt;span&gt;callgrind::bench_group::_4_thread_local
&lt;&#x2F;span&gt;&lt;span&gt;  Instructions:                7065|7065            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  L1 Hits:                     9998|9998            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  L2 Hits:                       20|20              (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  RAM Hits:                     139|139             (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  Total read+write:           10157|10157           (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  Estimated Cycles:           14963|14963           (No change)
&lt;&#x2F;span&gt;&lt;span&gt;callgrind::bench_group::_5_smallvec
&lt;&#x2F;span&gt;&lt;span&gt;  Instructions:                5851|5851            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  L1 Hits:                     8236|8236            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  L2 Hits:                       12|12              (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  RAM Hits:                     133|133             (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  Total read+write:            8381|8381            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  Estimated Cycles:           12951|12951           (No change)
&lt;&#x2F;span&gt;&lt;span&gt;callgrind::bench_group::_6_smolstr
&lt;&#x2F;span&gt;&lt;span&gt;  Instructions:                5035|5035            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  L1 Hits:                     7226|7226            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  L2 Hits:                       11|11              (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  RAM Hits:                     138|138             (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  Total read+write:            7375|7375            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  Estimated Cycles:           12111|12111           (No change)
&lt;&#x2F;span&gt;&lt;span&gt;callgrind::bench_group::_7_smallvec_smolstr
&lt;&#x2F;span&gt;&lt;span&gt;  Instructions:                5201|5201            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  L1 Hits:                     7373|7373            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  L2 Hits:                       12|12              (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  RAM Hits:                     133|133             (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  Total read+write:            7518|7518            (No change)
&lt;&#x2F;span&gt;&lt;span&gt;  Estimated Cycles:           12088|12088           (No change)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is quite a lot to take in. The first thing you see in &lt;code&gt;(No change)&lt;&#x2F;code&gt;. Indeed the results are &lt;strong&gt;stable&lt;&#x2F;strong&gt;.
Re-running the benchmark yields the exact same numbers.&lt;&#x2F;p&gt;
&lt;p&gt;However, what are we even looking at? &lt;em&gt;Wall time&lt;&#x2F;em&gt; numbers are very obvious, and its also very obvious that lower is better.
But which numbers are we trying to improve here exactly? Are we aiming for &lt;em&gt;Instructions&lt;&#x2F;em&gt;, or rather &lt;em&gt;Estimated Cycles&lt;&#x2F;em&gt;,
which itself is derived from the &lt;em&gt;L1&lt;&#x2F;em&gt;, &lt;em&gt;L2&lt;&#x2F;em&gt; and &lt;em&gt;RAM&lt;&#x2F;em&gt; numbers.&lt;&#x2F;p&gt;
&lt;p&gt;It is hard to say what exactly we are optimizing for. But we can see that the &lt;code&gt;smol_str&lt;&#x2F;code&gt; variant is winning
when looking for the lowest &lt;em&gt;Instructions&lt;&#x2F;em&gt;. The simplest implementation also has the lowest &lt;em&gt;Estimated Cycles&lt;&#x2F;em&gt;,
with the &lt;code&gt;smol_str&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;smallvec&lt;&#x2F;code&gt; solution being the runner-up.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Last but not least, lets do some &lt;em&gt;profiling&lt;&#x2F;em&gt; as well. I’m a huge fan of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mstange&#x2F;samply&quot;&gt;&lt;code&gt;samply&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;When doing profiling, you should keep in mind that you pulling a Heisenberg here,
as you are changing the outcome by measuring it.&lt;&#x2F;p&gt;
&lt;p&gt;Although the overhead of profiling is negligibly small, and did not make any difference in my particular case here.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a flamegraph for the simplest implementation using &lt;code&gt;Vec&amp;lt;String&amp;gt;&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;smallstring-opt&#x2F;.&#x2F;flamegraph-vec-string.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As expected, we see a lot of &lt;code&gt;alloc&lt;&#x2F;code&gt; nested within the &lt;code&gt;fmt&lt;&#x2F;code&gt; call.
A bit surprising here is also the high cost of &lt;code&gt;drop&lt;&#x2F;code&gt;-ing all the allocated data.&lt;&#x2F;p&gt;
&lt;p&gt;Compare that with the flamegraph of the &lt;code&gt;smol_str&lt;&#x2F;code&gt; and &lt;code&gt;smallvec&lt;&#x2F;code&gt; solution:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;smallstring-opt&#x2F;.&#x2F;flamegraph-smallvec-smolstr.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this flamegraph we can now clearly see the &lt;code&gt;fmt&lt;&#x2F;code&gt; related code, separate from the &lt;code&gt;smol_str&lt;&#x2F;code&gt; code,
again separate from the allocation of the outer &lt;code&gt;Box&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;However, there is still some surprises hidden in this flamegraph:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SmolStr::new&lt;&#x2F;code&gt; is surprisingly expensive, taking as much time as &lt;code&gt;fmt&lt;&#x2F;code&gt;-ing into the stack-allocated &lt;code&gt;smallvec&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;I see a big &lt;code&gt;core::ptr::write&lt;&#x2F;code&gt; there, which I assume is copying the &lt;code&gt;SmolStr&lt;&#x2F;code&gt; to the &lt;code&gt;Vec&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;Iterator::collect&lt;&#x2F;code&gt; abstraction leads to a very deep and complex call graph, though I assume all of that to be inlined.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;As I mentioned in the intro, I really enjoy obsessing over these tiny details. It was fun trying to micro-optimize this
particular use-case, although one of the main outcomes of it might as well be:&lt;&#x2F;p&gt;
&lt;p&gt;There is no need to micro-optimize things this hard, as the simplest solution is already good enough in most cases.
Some optimizations that I &lt;em&gt;assumed&lt;&#x2F;em&gt; would be beneficial even turned out not to be.&lt;&#x2F;p&gt;
&lt;p&gt;Another thing to note here though is that this is a &lt;em&gt;micro benchmark&lt;&#x2F;em&gt;. It was already hard to get halfway stable results.
Not to mention that &lt;em&gt;micro benchmarks&lt;&#x2F;em&gt; can also be sensitive to very minute details like
&lt;a href=&quot;https:&#x2F;&#x2F;www.bazhenov.me&#x2F;posts&#x2F;2024-02-performance-roulette&quot;&gt;code alignment&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I definitely like &lt;em&gt;macro benchmarks&lt;&#x2F;em&gt; and &lt;em&gt;profiling&lt;&#x2F;em&gt;, aka &lt;em&gt;looking at flamegraphs&lt;&#x2F;em&gt; a lot more.
It is much easier to see both &lt;em&gt;opportunities&lt;&#x2F;em&gt; as well as &lt;em&gt;improvements&lt;&#x2F;em&gt; that way.&lt;&#x2F;p&gt;
&lt;p&gt;Speaking of opportunities, &lt;code&gt;SmolStr::new&lt;&#x2F;code&gt; looks much slower than it needs to be, so I might try to optimize it further.
The &lt;code&gt;core::ptr::write&lt;&#x2F;code&gt; I mentioned is also interesting, as I would have assumed that the compiler is smart enough to
write the &lt;code&gt;SmolStr&lt;&#x2F;code&gt; directly into the allocation.&lt;&#x2F;p&gt;
&lt;p&gt;I believe the nightly-only &lt;code&gt;new_uninit&lt;&#x2F;code&gt; feature might help there.
At the very least, that feature would allow returning a &lt;code&gt;Arc&amp;lt;[T]&amp;gt;&lt;&#x2F;code&gt; instead of a &lt;code&gt;Box&amp;lt;[T]&amp;gt;&lt;&#x2F;code&gt; without having to re-allocate.
Converting from a &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; to a &lt;code&gt;Box&amp;lt;[T]&amp;gt;&lt;&#x2F;code&gt; is pretty much free as long as the &lt;code&gt;Vec&lt;&#x2F;code&gt; is allocated with the final size known
ahead of time. That is not possible for &lt;code&gt;Arc&lt;&#x2F;code&gt;, as the reference counts have to live somewhere as well.
&lt;code&gt;Arc::new_uninit_slice&lt;&#x2F;code&gt; would solve that, as I believe its pretty much the same as &lt;code&gt;Vec::with_capacity&lt;&#x2F;code&gt;.
Except it requires a bit of &lt;code&gt;unsafe&lt;&#x2F;code&gt; code to use.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A Rustaceans view on gRPC and Cap&#x27;n Proto</title>
        <published>2024-04-17T00:00:00+00:00</published>
        <updated>2024-04-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/rust-grpc-capnp/"/>
        <id>https://swatinem.de/blog/rust-grpc-capnp/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/rust-grpc-capnp/">&lt;p&gt;One of the things I’m trying to drive recently at Sentry is introducing &lt;em&gt;some&lt;&#x2F;em&gt; form as strictly typed RPC.
To this end, I have experimented using both &lt;strong&gt;gRPC&lt;&#x2F;strong&gt; and &lt;strong&gt;Cap&#x27;n Proto&lt;&#x2F;strong&gt; within a small isolated service I am trying to introduce.&lt;&#x2F;p&gt;
&lt;p&gt;All of these experiments are open source, and you can look at the code &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;peanutbutter&#x2F;pull&#x2F;9&quot;&gt;in this PR&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#why&quot; aria-label=&quot;Anchor link for: why&quot;&gt;#&lt;&#x2F;a&gt;
Why?&lt;&#x2F;h2&gt;
&lt;p&gt;As things stand right now, Sentry does not have a single well established solution for RPC,
and one effort to at least &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;sentry-kafka-schemas&quot;&gt;define payload schemas&lt;&#x2F;a&gt; is using JSON Schema
which comes with its own set of problems.&lt;&#x2F;p&gt;
&lt;p&gt;One limitation of JSON is lack of support for binary data. So there is a few other solutions floating around,
including JSON in MessagePack, or the worst of all, JSON encoded as a byte array in JSON.&lt;&#x2F;p&gt;
&lt;p&gt;I am also not spilling any secrets here. (Almost) all of Sentry is open source code, so with some effort you can find
all of those examples I have given.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Only parts of the codebase are written in Rust, and those parts are interfacing with a much larger portion written in Python,
using either networked RPC, or in-process FFI, again with a wild mix of technologies for each.&lt;&#x2F;p&gt;
&lt;p&gt;And while we have the comfort of having strict type safety as well as an awesome &lt;code&gt;#[derive]&lt;&#x2F;code&gt; system for serialization,
Python has neither. It is possible to progressively type Python code, but that in the end is only a mild suggestion and
provides no hard guarantees.&lt;&#x2F;p&gt;
&lt;p&gt;The other problem is evolving and changing the schema in a forward&#x2F;backward compatible way.&lt;&#x2F;p&gt;
&lt;p&gt;It happens quite often that Rust sends data to Python that it just can’t deal with, and the other way around as well.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-rustaceans-view&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#a-rustaceans-view&quot; aria-label=&quot;Anchor link for: a-rustaceans-view&quot;&gt;#&lt;&#x2F;a&gt;
A Rustaceans view&lt;&#x2F;h2&gt;
&lt;p&gt;But enough about Sentry, I promised to write about &lt;strong&gt;gRPC&lt;&#x2F;strong&gt; and &lt;strong&gt;Cap&#x27;n Proto&lt;&#x2F;strong&gt; from a Rust developers view, so lets go!&lt;&#x2F;p&gt;
&lt;p&gt;The first interesting thing to note here is that I believe both protobuf and capnproto were created by the same person,
with capnproto supposedly improving on a ton of suboptimal things in protobuf.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;code-generation&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#code-generation&quot; aria-label=&quot;Anchor link for: code-generation&quot;&gt;#&lt;&#x2F;a&gt;
Code generation&lt;&#x2F;h3&gt;
&lt;p&gt;The first thing to note here is that both serialization formats need a schema. They are not &lt;em&gt;self describing&lt;&#x2F;em&gt; like JSON
or MessagePack.&lt;&#x2F;p&gt;
&lt;p&gt;That is not really such a big problem, as there is a bunch of binary serialization formats that are not &lt;em&gt;self describing&lt;&#x2F;em&gt;
and have implementations based around the &lt;code&gt;serde&lt;&#x2F;code&gt; ecosystem and leveraging the &lt;code&gt;#[derive]&lt;&#x2F;code&gt; infrastructure.&lt;&#x2F;p&gt;
&lt;p&gt;Not for &lt;code&gt;protobuf&lt;&#x2F;code&gt; or &lt;code&gt;capnproto&lt;&#x2F;code&gt; though. As mentioned, both need a schema definition, in their own bespoke definition language.&lt;&#x2F;p&gt;
&lt;p&gt;This by itself is not really a problem. Rust has amazing support for &lt;code&gt;build.rs&lt;&#x2F;code&gt; scripts to do code generation at build
time which is not based on proc-macros.
The problem however is that &lt;em&gt;both&lt;&#x2F;em&gt; tools depend on tooling that has to be installed on the developers machine through
some other ways, like a distribution package manager. This adds complexity and points of failures. It means that you
do not have direct control over which version of the package is being used, and it means that a &lt;code&gt;cargo&lt;&#x2F;code&gt; invocation is
not fully self-contained.&lt;&#x2F;p&gt;
&lt;p&gt;There is a reason for why things work like this. The serialization format for both are supposedly complex, and having
one reference implementation of the schema parser, and code generator can better guarantee binary compatibility.
This is a valid argument, but a really weak one to be honest. There is a ton of binary formats out there that solve
this challenge by having a well defined specification and a conformance test suite.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;One can certainly make a point that each language ecosystem tends to reinvent existing software in their own language
&lt;em&gt;just because&lt;&#x2F;em&gt;. This is certainly true. It was true back when I was still a TypeScript developer, and it is true for Rust.
However I would say that Rust has a unique opportunity and value proposition here. It is no surprise that even the TypeScript
ecosystem is starting to rewrite its developer tooling in Rust (&lt;code&gt;esbuild&lt;&#x2F;code&gt; written in Go is the odd one out here).&lt;&#x2F;p&gt;
&lt;p&gt;Just to make my point of why Rust is a better choice than C(++) in this case: Can someone tell me how many bits a C &lt;code&gt;long&lt;&#x2F;code&gt; has?&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Lets get back on track:&lt;&#x2F;p&gt;
&lt;p&gt;Both tools use a custom definition language, and use build scripts to generate code, and both require an external tool for that.
Not great, but also not terrible.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zero-copy&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#zero-copy&quot; aria-label=&quot;Anchor link for: zero-copy&quot;&gt;#&lt;&#x2F;a&gt;
Zero Copy&lt;&#x2F;h3&gt;
&lt;p&gt;So far so good. We end up with some auto-generated Rust &lt;code&gt;struct&lt;&#x2F;code&gt;s.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;protobuf&lt;&#x2F;code&gt; (via the &lt;code&gt;prost&lt;&#x2F;code&gt; crate) generates fairly idiomatic Rust code.
However, it generates copy and allocation heavy code. What I mean by that is that strings are turned into, well, a &lt;code&gt;String&lt;&#x2F;code&gt;.
Which has its own underlying allocation. So the act of parsing a &lt;code&gt;protobuf&lt;&#x2F;code&gt; buffer means copying a lot of data around.&lt;&#x2F;p&gt;
&lt;p&gt;Ideally, it would represents strings and binary data as &lt;code&gt;&amp;amp;&#x27;buffer str&lt;&#x2F;code&gt;. The effect of that would be that no data would
have to be copied, as everything points directly into the message buffer.&lt;&#x2F;p&gt;
&lt;p&gt;I have written previously about &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;magic-zerocopy&#x2F;&quot;&gt;zero copy deserialization&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;binary-formats&#x2F;&quot;&gt;creating a binary serialization format&lt;&#x2F;a&gt;.
I don’t claim to be the &lt;em&gt;knows all&lt;&#x2F;em&gt; expert when it comes to these things, but I have invested quite some effort along those lines.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So while the &lt;code&gt;protobuf&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;prost&lt;&#x2F;code&gt; way involves parsing and validating the whole payload, copying bytes into new containers,
the &lt;code&gt;capnproto&lt;&#x2F;code&gt; way is the exact opposite.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;capnproto&lt;&#x2F;code&gt; does not parse and validate the payload directly, but it generates accessors which do all the validation on access.
This is beneficial in certain scenarios when you are only interested in &lt;em&gt;parts&lt;&#x2F;em&gt; of the message payload, or when you want to
parse as much as you can from a corrupted stream, instead of treating it as &lt;em&gt;all or nothing&lt;&#x2F;em&gt;.
It also means that &lt;code&gt;capnproto&lt;&#x2F;code&gt; is truly zero copy, and it will not allocate &lt;code&gt;String&lt;&#x2F;code&gt;s and copy bytes around.&lt;&#x2F;p&gt;
&lt;p&gt;The big downside of this is that code using accessors, in particular ones that parse &#x2F; validate data on-demand can
be very unergonomic. Take a look at what it takes to access a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; config_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;pry!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;pry!&lt;&#x2F;span&gt;&lt;span&gt;(request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_config_name&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_str&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That is &lt;em&gt;a lot&lt;&#x2F;em&gt; of ceremony for something as trivial as accessing a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;.
Each access can potentially fail, and is &lt;code&gt;async&lt;&#x2F;code&gt; as well.&lt;&#x2F;p&gt;
&lt;p&gt;As mentioned, the &lt;em&gt;“parse only what you need”&lt;&#x2F;em&gt; approach is good if you are only interested in a subset of fields.
But on the other hand, it can also be a footgun if you end up accessing the same field multiple times. In that case you
are paying the cost of validation multiple times, not to mention the code it takes to do so.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rpc&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#rpc&quot; aria-label=&quot;Anchor link for: rpc&quot;&gt;#&lt;&#x2F;a&gt;
RPC&lt;&#x2F;h3&gt;
&lt;p&gt;Lets move from the representation and deserialization of payloads to the actual RPC part.&lt;&#x2F;p&gt;
&lt;p&gt;Here, &lt;code&gt;tonic&lt;&#x2F;code&gt; as the go-to &lt;code&gt;gRPC&lt;&#x2F;code&gt; implementation integrates very well into the &lt;code&gt;tower&lt;&#x2F;code&gt; ecosystem.
Creating a &lt;code&gt;Server&lt;&#x2F;code&gt; feels very natural and straight forward.&lt;&#x2F;p&gt;
&lt;p&gt;Similarly, implementing the RPC methods is straight forward as well. &lt;code&gt;tonic&lt;&#x2F;code&gt; uses the &lt;code&gt;#[async_trait]&lt;&#x2F;code&gt; proc-macro, and
the method definitions look quite as you would expect. You have a request value that is already deserialized, and you
have to return a &lt;code&gt;Result&lt;&#x2F;code&gt; with your response type.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;rpc_method&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Request&amp;lt;RequestTy&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Response&amp;lt;ResponseTy&amp;gt;, Status&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The &lt;code&gt;capnproto&lt;&#x2F;code&gt; story is a bit different. Lets first take a look, and then dissect this example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;rpc_method&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; RequestParams,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;results&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; ResponseTypes,
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Promise&amp;lt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;capnp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Error&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What is immediately visible is this &lt;code&gt;Promise&lt;&#x2F;code&gt; type. It is an opaque type, but like with any other crate, we can
directly refer to the code of &lt;code&gt;capnp&lt;&#x2F;code&gt; to figure out what it is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T, E&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Immediate(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T, E&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    Deferred(Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;dyn Future&amp;lt;Output = &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T, E&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    Empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This just looks like &lt;code&gt;Future&lt;&#x2F;code&gt; (actually, &lt;code&gt;futures::future::MaybeDone&lt;&#x2F;code&gt;) with some extra steps to me.
It also explains the weird &lt;code&gt;pry!()&lt;&#x2F;code&gt; macro we saw in the previous section.&lt;&#x2F;p&gt;
&lt;p&gt;We learned that &lt;code&gt;tonic&lt;&#x2F;code&gt; was using &lt;code&gt;#[async_trait]&lt;&#x2F;code&gt; which internally uses a boxed &lt;code&gt;Future&lt;&#x2F;code&gt;, and we are seeing the
same things here as well.
I’m not sure how the actual code looks like when it is generated, but I’m doubtful that chaining a bunch of &lt;code&gt;pry!()&lt;&#x2F;code&gt; macros
would generate more efficient code than the compiler can for a &lt;code&gt;Future&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I have written previously on this blog about the fact that &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;zero-cost-async&#x2F;&quot;&gt;async can be truly zero-cost&lt;&#x2F;a&gt;.
A future that does not actually &lt;code&gt;await&lt;&#x2F;code&gt; anything will immediately return with &lt;code&gt;Poll::Ready(T)&lt;&#x2F;code&gt;, and the compiler is smart enough
to inline and dead-code-eliminate everything else that is unreachable in such cases.&lt;&#x2F;p&gt;
&lt;p&gt;The second things I see here is the &lt;code&gt;mut results&lt;&#x2F;code&gt; along with the &lt;code&gt;()&lt;&#x2F;code&gt; return type. Out-parameters are a code smell no matter
the language, but especially so in Rust. We have tuples and &lt;code&gt;Result&lt;&#x2F;code&gt; as a way of returning multiple, or mutually exclusive
return values, unlike other languages which truly have no other choice than to use out-parameters.&lt;&#x2F;p&gt;
&lt;p&gt;The problem with an out-parameter is that its non-obvious what happens with it in case of an error. It might be half-initialized.
Will it be discarded? Is it still being used afterwards? At least from a type system perspective, the bets are off as there is
no guarantees at this point.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;capnp&lt;&#x2F;code&gt; is very focussed on optimizing allocations and data layout, and the reason for doing things like this is that one
can just write directly into a pre-allocated output buffer, without the need to first return a proper Rust type with an
owned &lt;code&gt;String&lt;&#x2F;code&gt;, just to copy those string bytes into a serialized message afterwards. &lt;code&gt;capnp&lt;&#x2F;code&gt; can avoid that copy by
just writing directly. But it also results in a very unergonomic out-parameter with setters.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;python&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#python&quot; aria-label=&quot;Anchor link for: python&quot;&gt;#&lt;&#x2F;a&gt;
Python&lt;&#x2F;h3&gt;
&lt;p&gt;For this specific service I’m building, I want to expose an RPC Server in Rust, but use it from a Python Client.&lt;&#x2F;p&gt;
&lt;p&gt;Here, I have only done the client-side &lt;code&gt;gRPC&lt;&#x2F;code&gt; implementation in Python. And boy was I disappointed about &lt;code&gt;gRPC&lt;&#x2F;code&gt; in that case.&lt;&#x2F;p&gt;
&lt;p&gt;As Rust developers, we are very spoiled by extremely good tooling. One of these extremely good tools is &lt;code&gt;rustdoc&lt;&#x2F;code&gt;.
It is lightyears ahead of any other documentation generation tool I have seen so far in any other language ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;gRPC&lt;&#x2F;code&gt; docs for Python are horrible. Everything is on a single webpage, there is no links between types. The argument
types are not documented at all. It took me a while to write the client code for it, but I was successful in the end.
The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;sentry&#x2F;pull&#x2F;67232&quot;&gt;code is here&lt;&#x2F;a&gt; for anyone interested.&lt;&#x2F;p&gt;
&lt;p&gt;On a positive note, the RPC layer has the possibility to define a timeout for each request which is definitely a plus
considering that we are suffering from other networking calls stalling for an insane amount of time
without any possibility to time them out and recover.
However the generated code does not contain any type annotations at all. Sure, Python itself is a dynamically typed language,
and type annotations are only a &quot;fairly recent&quot; thing in the ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;I would still have expected more here. The whole point of introducing a strongly typed RPC mechanism was to have these
strict type checks for any language that interacts with the system to the extent that the language even allows it.&lt;&#x2F;p&gt;
&lt;p&gt;The generated Python code has also dubious code quality, and I got some expected pushback against committing generated Python code.
Rust build scripts have advantage of not having to commit such code, but also the disadvantage of introducing yet another
compile time dependency and contributing to compile times. Python does not seem to have a builtin mechanism for that, or
at least I am not aware of anything.&lt;&#x2F;p&gt;
&lt;p&gt;Another point that I didn’t really make much experience with myself, but heard second-hand anecdotes about &lt;code&gt;grpc&lt;&#x2F;code&gt; being
really slow and inefficient in Python.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;schema-evolution&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#schema-evolution&quot; aria-label=&quot;Anchor link for: schema-evolution&quot;&gt;#&lt;&#x2F;a&gt;
Schema Evolution&lt;&#x2F;h3&gt;
&lt;p&gt;We have almost reached the end. The last point I want to touch on is the possibility of Schema evolution.&lt;&#x2F;p&gt;
&lt;p&gt;Both schema languages force you to enumerate all your properties. The reason is simple, as this fixes the ordering of fields
in the binary serialization, and provides a limited safeguard that your schema is append-only.&lt;&#x2F;p&gt;
&lt;p&gt;However I haven’t found any validation in either tool that really ensures that schema changes are valid.
There is no &lt;em&gt;before &#x2F; after&lt;&#x2F;em&gt; comparison, no &lt;code&gt;diff&lt;&#x2F;code&gt; view, etc.
To be honest, I haven’t really checked how to do these things properly, but looking at the surface, these tools look like
straight code generators that have no built in notion of a previous schema version.&lt;&#x2F;p&gt;
&lt;p&gt;In theory I could just as well remove fields from the end, or remove a field from the middle and renumber all the rest,
as well as change a fields type. All these operations would break the schema and break existing deserializer code.&lt;&#x2F;p&gt;
&lt;p&gt;Again, I haven’t really done these modifications myself to see how things would behave.
But this is fundamental enough that there &lt;em&gt;has to be&lt;&#x2F;em&gt; a solution for it somewhere.
Having an efficient serialization format with generated strict types for various languages is only half the story.
The other half is about not breaking everything when changes are introduced.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#my-conclusion&quot; aria-label=&quot;Anchor link for: my-conclusion&quot;&gt;#&lt;&#x2F;a&gt;
My Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In the end, I was quite disappointed by both alternatives. Having to install &lt;code&gt;protoc&lt;&#x2F;code&gt; or &lt;code&gt;capnpc&lt;&#x2F;code&gt; separately from the OS
package manager is a pain for both.
The schema language of &lt;em&gt;Cap&#x27;n Proto&lt;&#x2F;em&gt; seemed to be more flexible at first, and it is being advertised as being more performant
than &lt;code&gt;protobuf&lt;&#x2F;code&gt;. That is certainly true also when looking at the generated Rust code and how it handles &lt;em&gt;zero copy&lt;&#x2F;em&gt; deserialization.
But it does come at the cost of being extremely unergonomic to use.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;gRPC&lt;&#x2F;em&gt; was quite easy to get going from Rust, and it also ships with a &lt;code&gt;grpcurl&lt;&#x2F;code&gt; tool that lets you test your server directly from the command line.
I really missed such a tool for &lt;em&gt;Cap&#x27;n Proto&lt;&#x2F;em&gt;.
However the Python side of things was just horrible. Bad documentation, no types being generated at all, and second-hand
reports about the &lt;code&gt;grpc&lt;&#x2F;code&gt; integration in Python being incredibly slow and inefficient.&lt;&#x2F;p&gt;
&lt;p&gt;But there is also some positive news. Both are well established projects which are open source. So there are third party
tools out there that might do things a lot better than the reference implementation. And if not, we can also roll our own.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, as luck would have it, just as I was doing these exploratory experiments, the upstream &lt;em&gt;gRPC&lt;&#x2F;em&gt; team at google
&lt;a href=&quot;https:&#x2F;&#x2F;groups.google.com&#x2F;g&#x2F;grpc-io&#x2F;c&#x2F;ExbWWLaGHjI&#x2F;m&#x2F;TJssglLiBgAJ&quot;&gt;announced work&lt;&#x2F;a&gt; on another fully Rust native implementation.
So the future looks even better, at least for the Rust side. Though they already look quite good in Rust, I was much more
dissatisfied with the situation in Python.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust `thread_local!`s are surprisingly expensive</title>
        <published>2024-03-03T00:00:00+00:00</published>
        <updated>2024-03-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/slow-thread-local/"/>
        <id>https://swatinem.de/blog/slow-thread-local/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/slow-thread-local/">&lt;p&gt;These last couple of weeks, I have been obsessing over “the cost of observability”, specifically metrics.
This whole topic is quite big and rather something for a conference, literally, as I submitted it as a talk for RustFest this year ;-)&lt;&#x2F;p&gt;
&lt;p&gt;But on this topic, I was experimenting with doing thread-local aggregation of metrics, and doing a ton of profiling
trying to micro-optimize the heck out of it.&lt;&#x2F;p&gt;
&lt;p&gt;To do this thread-local aggregation, I am pulling in the amazing &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;thread_local&quot;&gt;&lt;code&gt;thread_local&lt;&#x2F;code&gt; crate&lt;&#x2F;a&gt;,
which I have since also contributed to \o&#x2F;.&lt;&#x2F;p&gt;
&lt;p&gt;The crate allows you to carry around an arbitrary container of data in your &lt;code&gt;struct&lt;&#x2F;code&gt;s, which internally
manages a concurrent list which is indexed into using a &lt;em&gt;truely&lt;&#x2F;em&gt; thread-local index.&lt;&#x2F;p&gt;
&lt;p&gt;The most awesome thing about this crate is that it also allows to iterate over &lt;em&gt;all&lt;&#x2F;em&gt; the thread local values if you want to.
This makes it perfect for thread-local aggregation which is then aggregated once every N seconds across the whole process.&lt;&#x2F;p&gt;
&lt;p&gt;Though this also comes at one disadvantage because you have to wrap your data in a thread-safe &lt;code&gt;Mutex&lt;&#x2F;code&gt; if you want to modify it.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;As I was then profiling the implementation, I was really shocked by what I saw.
Here is a flamegraph focussed on the main point I want to make:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;slow-thread-local&#x2F;.&#x2F;thread_local-overhead.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;What we see here is two things:&lt;&#x2F;p&gt;
&lt;p&gt;First, an uncontended &lt;code&gt;Mutex&lt;&#x2F;code&gt; which is only used by a single thread (for 99.9% of the time) is quite fast.
As another note: I created this profile on macOS (yeah, I know) which, as you see, is still using &lt;code&gt;pthread_mutex&lt;&#x2F;code&gt; under the hood.
macOS will soon catch up to other OSs which already have a custom &lt;code&gt;Mutex&lt;&#x2F;code&gt; implementation, so things should get even faster still.&lt;&#x2F;p&gt;
&lt;p&gt;But more shockingly, the “true” Rust &lt;code&gt;thread_local!&lt;&#x2F;code&gt; is surprisingly slow. This is literally a &lt;code&gt;Cell&amp;lt;Option&amp;lt;Thread&amp;gt;&amp;gt;&lt;&#x2F;code&gt; in this case,
where &lt;code&gt;Thread&lt;&#x2F;code&gt; is just a bunch of &lt;code&gt;usize&lt;&#x2F;code&gt;s that are used to access the desired data in the concurrent list.
It is just &lt;code&gt;40&lt;&#x2F;code&gt; bytes on x64. So how can this &lt;code&gt;Copy&lt;&#x2F;code&gt; be this slow?&lt;&#x2F;p&gt;
&lt;p&gt;As another fun fact to put things into perspective: The very slim line on the left of the flamegraph that you can barely make out is a
&lt;code&gt;OnceLock::get()&lt;&#x2F;code&gt;, which involves an atomic read.&lt;&#x2F;p&gt;
&lt;p&gt;Or maybe this atomic is actually what makes the &lt;code&gt;thread_local!&lt;&#x2F;code&gt; slow? Who knows.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I pretty much just wanted to share this surprising outcome. This is also not really news.
@matklad has already &lt;a href=&quot;https:&#x2F;&#x2F;matklad.github.io&#x2F;2020&#x2F;10&#x2F;03&#x2F;fast-thread-locals-in-rust.html&quot;&gt;blogged about this&lt;&#x2F;a&gt; years ago.
Also NOTE that a nightly-only &lt;code&gt;#[thread_local]&lt;&#x2F;code&gt; attribute exists as well, which the &lt;code&gt;thread_local&lt;&#x2F;code&gt; crate will use when the &lt;code&gt;nightly&lt;&#x2F;code&gt; feature is enabled.
I haven’t tested how much faster that would be, if at all.
There is also an initiative underway in the Rust compiler to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;110897&quot;&gt;improve &lt;code&gt;thread_local!&lt;&#x2F;code&gt; implementation details.&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is pretty much all I wanted to share, as this is also not the first time that I see &lt;code&gt;thread_local!&lt;&#x2F;code&gt; being slow.
As there is an ongoing initiative to clean it up, plus the nightly-only &lt;code&gt;#[thread_local]&lt;&#x2F;code&gt; looming on the horizon,
I am quite hopeful that things will improve sometime in the future though.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A Rant about Software Bloat</title>
        <published>2023-12-02T00:00:00+00:00</published>
        <updated>2023-12-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/bloaty-mcbloat-sdk/"/>
        <id>https://swatinem.de/blog/bloaty-mcbloat-sdk/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/bloaty-mcbloat-sdk/">&lt;p&gt;It’s been a while that I wrote a proper rant, but today is the day.&lt;&#x2F;p&gt;
&lt;p&gt;The Rust project is thoroughly tracking the performance of the compiler.
For this, there is the Rust compiler performance test suite which includes a number of widely used crates in a
fixed version, so that its easier to compare different compiler versions on the same piece of code.&lt;&#x2F;p&gt;
&lt;p&gt;I would actually love to see the opposite. Compiling different versions of a crate with the same compiler.
The goal would be to somehow quantify software bloat over time.&lt;&#x2F;p&gt;
&lt;p&gt;Over time, the compiler is getting quicker (though with diminishing returns). A percent here, a percent there.
But at the same time, crates add more code. More code to compile equals slower compile times.&lt;&#x2F;p&gt;
&lt;p&gt;It might be new features, some more code to deal with edge-cases, old code thats kept around for backwards compatibility.
No matter the reason, over time software tends to inevitably become more complex and accumulate more lines of code.&lt;&#x2F;p&gt;
&lt;p&gt;I can pretty much paraphrase &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Wirth&amp;#x27;s_law&quot;&gt;Wirth’s law&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;software is getting bloated more rapidly than compilers are becoming faster.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;the-elephant-in-the-room&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-elephant-in-the-room&quot; aria-label=&quot;Anchor link for: the-elephant-in-the-room&quot;&gt;#&lt;&#x2F;a&gt;
The elephant in the room&lt;&#x2F;h1&gt;
&lt;p&gt;Now comes my main rant, and some tests to demonstrate. The literal &lt;em&gt;elephant&lt;&#x2F;em&gt; (pun intended, because its &lt;em&gt;huge&lt;&#x2F;em&gt;, get it?)
in the room I am talking about is the recently released AWS Rust SDK, which is a prime example of bloat.&lt;&#x2F;p&gt;
&lt;p&gt;This doesn’t even come as such a surprise, as I had already experienced a heavily bloated AWS SDK, in TypeScript almost
four years ago. There is even a recording where of a talk I gave about profiling (and trying to improve) the memory
usage and speed of the TypeScript type checker, you can watch it &lt;a href=&quot;https:&#x2F;&#x2F;viennajs.org&#x2F;en&#x2F;meetup&#x2F;2020-01&#x2F;optimizing-nodejs-memory-usage&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Back to the topic at hand, and lets actually measure the impact of this.&lt;&#x2F;p&gt;
&lt;p&gt;Lets create an empty Rust project and measure its build times with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sharkdp&#x2F;hyperfine&quot;&gt;&lt;code&gt;hyperfine&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We start of with just an empty project created by &lt;code&gt;cargo init bloaty-sdk --bin&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Measuring clean build times with &lt;code&gt;hyperfine --prepare &#x27;cargo clean&#x27; &#x27;cargo build&#x27;&lt;&#x2F;code&gt; gives us quite a snappy baseline:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;  Time (mean ± σ):     377.1 ms ±  85.4 ms    [User: 179.7 ms, System: 212.8 ms]
&lt;&#x2F;span&gt;&lt;span&gt;  Range (min … max):   331.5 ms … 567.6 ms    10 runs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Adding &lt;code&gt;tokio&lt;&#x2F;code&gt; to the mix, to establish a baseline for an async program with a full runtime.
The times after a &lt;code&gt;cargo add tokio --features full&lt;&#x2F;code&gt; look like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;  Time (mean ± σ):      9.165 s ±  0.275 s    [User: 25.922 s, System: 3.422 s]
&lt;&#x2F;span&gt;&lt;span&gt;  Range (min … max):    8.988 s …  9.937 s    10 runs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I now might add that I run these tests on my Ryzen 2700X Desktop which has 8 Cores and 16 Threads, running Windows.
But the goal here is not to create a fully scientific and reproducible benchmark.&lt;&#x2F;p&gt;
&lt;p&gt;We can see that we had to wait about 9 seconds for a full compile, using up about 29 seconds of CPU time.&lt;&#x2F;p&gt;
&lt;p&gt;Now add in (part of) the AWS SDK using &lt;code&gt;cargo add aws-config aws-sdk-s3&lt;&#x2F;code&gt; and try again:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;  Time (mean ± σ):     53.932 s ±  1.725 s    [User: 329.753 s, System: 31.435 s]
&lt;&#x2F;span&gt;&lt;span&gt;  Range (min … max):   52.766 s … 55.913 s    3 runs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Wow, this added ~44 seconds of wall time and a whooping 5 minutes of CPU time on top of tokio.&lt;&#x2F;p&gt;
&lt;p&gt;Note that I was only using the S3 part of the SDK, as my use-case is just downloading some files from a bucket.
The landing page of the SDK specifically calls out that it is modular:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;to minimize your compile times and binary sizes by only compiling code you actually use.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Really? I’m dying inside. I can’t even imagine how compile times would look like if I pulled in more parts of that SDK.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So you want to tell me that I have to wait a minute to compile this on a fairly beefy machine? Just to download files?&lt;&#x2F;p&gt;
&lt;p&gt;To be fair, lets compare this with &lt;code&gt;reqwest&lt;&#x2F;code&gt;, which is a (probably the most) popular http client crate.&lt;&#x2F;p&gt;
&lt;p&gt;Doing another round of benchmarks, only with &lt;code&gt;tokio&lt;&#x2F;code&gt; and &lt;code&gt;reqwest&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;  Time (mean ± σ):     22.074 s ±  0.357 s    [User: 102.893 s, System: 12.058 s]
&lt;&#x2F;span&gt;&lt;span&gt;  Range (min … max):   21.695 s … 22.732 s    10 runs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;reqwest&lt;&#x2F;code&gt; is no featherweight either, adding 13 seconds of wall time and a bit over a minute of CPU time on top of &lt;code&gt;tokio&lt;&#x2F;code&gt;.
There are more alternatives to choose from for http clients, some of which should be quicker to compile.&lt;&#x2F;p&gt;
&lt;p&gt;But yeah, my point is that downloading things from the web shouldn’t add such bloat. And the compile time overhead of
the AWS SDK is beyond reasonable.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;but-incremental&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#but-incremental&quot; aria-label=&quot;Anchor link for: but-incremental&quot;&gt;#&lt;&#x2F;a&gt;
But incremental?&lt;&#x2F;h1&gt;
&lt;p&gt;You might rightfully call out that things aren’t as bad in reality, as you are only doing a full clean build about every
six weeks after a &lt;code&gt;rustup update&lt;&#x2F;code&gt;, otherwise you are only doing incremental builds in development.&lt;&#x2F;p&gt;
&lt;p&gt;Sure, this is a valid point. Depending on the size of your project, at some point incremental builds are being dominated
by link time instead. Even though &lt;code&gt;mold&lt;&#x2F;code&gt; is a thing now, at least on Linux, the speed of linkers tends to be rather sad.&lt;&#x2F;p&gt;
&lt;p&gt;I copy-pasted the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awsdocs&#x2F;aws-doc-sdk-examples&#x2F;blob&#x2F;main&#x2F;rustv1&#x2F;examples&#x2F;s3&#x2F;src&#x2F;bin&#x2F;get-object.rs#L18&quot;&gt;example&lt;&#x2F;a&gt;
to download a file from S3 and put in some bogus code that would trigger minimal rebuilds &#x2F; relinks, which in the end
became a &lt;code&gt;hyperfine --prepare &#x27;nu -c &quot;date now | save -f src&#x2F;foo.txt&quot;&#x27; &#x27;cargo build&#x27;&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;  Time (mean ± σ):      2.636 s ±  0.042 s    [User: 4.045 s, System: 1.434 s]
&lt;&#x2F;span&gt;&lt;span&gt;  Range (min … max):    2.588 s …  2.714 s    10 runs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is not so terrible anymore. But it adds to the overall time. Imagine having a real program with a lot more code that
is being linked. It’s a death by a thousand papercuts.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Well, that is pretty much all for today, and I want to leave you with a bit of inspiration.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Perfection is attained not when there is nothing more to add, but when there is nothing more to remove.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This quote is attributed to &lt;a href=&quot;https:&#x2F;&#x2F;en.wikiquote.org&#x2F;wiki&#x2F;Antoine_de_Saint_Exup%C3%A9ry&quot;&gt;Antoine de Saint Exupéry&lt;&#x2F;a&gt;.
It is also pretty much a reflection of Elon Musks and SpaceX’ philosophy that the best part is no part,
and to constantly try to remove things.
If you are not adding back X%, you are not removing enough.&lt;&#x2F;p&gt;
&lt;p&gt;We need more of this mindset in Software Engineering.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Choosing a more optimal `String` type</title>
        <published>2023-09-15T00:00:00+00:00</published>
        <updated>2023-09-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/optimized-strings/"/>
        <id>https://swatinem.de/blog/optimized-strings/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/optimized-strings/">&lt;p&gt;This week, I have been profiling and measuring the overhead of the Sentry Rust SDK, as another team has reported
a large overhead in their testing. So much so that the team shied away from using it more extensively in combination
with &lt;code&gt;#[tracing::instrument]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After some profiling, I identified a potential culprit, which was using very high quality randomness in the form of the
&lt;code&gt;getrandom&lt;&#x2F;code&gt; crate, which depending on the operating system was doing syscalls to get true randomness from the operating
system. This was clearly visible in profiles as contributing to SDK overhead. We definitely don’t need high quality
randomness to identify tracing spans, so I switched that to a faster randomness source which is still documented to be
cryptographically secure, though I might decide to further downgrade the quality of the randomness in favor of speed.&lt;&#x2F;p&gt;
&lt;p&gt;But I digress, I really wanted to talk about Strings here.&lt;&#x2F;p&gt;
&lt;p&gt;When profiling, one thing that often sticks out and is a good opportunity for optimization is avoiding allocations.
And there were a couple of allocation-related things visible in the profile. Primarily allocating, copying and freeing
Strings. Optimizing or avoiding these copies should give us some wins in terms of performance and SDK overhead.&lt;&#x2F;p&gt;
&lt;p&gt;Lets take a look at what our use-case is first.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Our Strings are immutable.&lt;&#x2F;strong&gt; You set them when initializing the SDK, configuring the Scope, or instrumenting a Span.
They never change.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Our Strings are copied often.&lt;&#x2F;strong&gt; Whenever an event or trace is captured, we copy over some Scope data, like the
release identifier configured during SDK init, or all the tags set on the Scope.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Strings are presumably small.&lt;&#x2F;strong&gt; I don’t have concrete evidence for this, but I would suspect most strings to be short.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;The Strings are serialized often.&lt;&#x2F;strong&gt; The strings that are being copied into events are then obviously serialized and
sent to Sentry. Except when they are being discarded inside the SDK because of a configured sampling rate, rate limits
or for other reasons. I’m unsure if we have any other frequent accesses like &lt;code&gt;PartialEq&lt;&#x2F;code&gt; or &lt;code&gt;Hash&lt;&#x2F;code&gt; usage however.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Most of the Strings are &lt;code&gt;Option&lt;&#x2F;code&gt;al&lt;&#x2F;strong&gt;. Most of the properties of Events are &lt;code&gt;Option&lt;&#x2F;code&gt;s.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Protocol types are in need of Optimization&lt;&#x2F;strong&gt;. Not strictly related to our usage of Strings, but all other protocol
types have way too detailed typing, and are not extensible on the other hand. In a ton of situations we might be better
served with just having the option to manually add arbitrary JSON properties.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To summarize this again in more technical terms:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We want &lt;code&gt;Clone&lt;&#x2F;code&gt; to be cheap, without allocating and copying the actual string contents, aka &lt;code&gt;O(1)&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The type should optimize for &lt;code&gt;Option&lt;&#x2F;code&gt; usage, in particular &lt;code&gt;size_of::&amp;lt;T&amp;gt;() == size_of::&amp;lt;Option&amp;lt;T&amp;gt;&amp;gt;()&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The type should at most as large as &lt;code&gt;String&lt;&#x2F;code&gt;, in particular &lt;code&gt;size_of::&amp;lt;T&amp;gt;() &amp;lt;= size_of::&amp;lt;String&amp;gt;()&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Having Small String Optimization (SSO) is preferable, which means storing &lt;code&gt;N&lt;&#x2F;code&gt; inline without a heap allocation.&lt;&#x2F;li&gt;
&lt;li&gt;Ideally, creating a string should not do a roundtrip allocation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The last point in particular is a pain point with &lt;code&gt;Arc&amp;lt;str&amp;gt;&lt;&#x2F;code&gt; for example, as creating it out of a &lt;code&gt;String&lt;&#x2F;code&gt; will almost
always incur a re-allocation. However, that allocation will amortize itself the first time you do a &lt;code&gt;clone()&lt;&#x2F;code&gt;, so might
as well not matter that much in practice.&lt;&#x2F;p&gt;
&lt;p&gt;There is a &lt;em&gt;ton&lt;&#x2F;em&gt; of options to chose from, and in this comparison I am focusing on these contenders:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::string::String&lt;&#x2F;code&gt;, obviously&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;std::sync::Arc&amp;lt;str&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;arcstr&quot;&gt;&lt;code&gt;arcstr&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;kstring&quot;&gt;&lt;code&gt;kstring&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;smol_str&quot;&gt;&lt;code&gt;smol_str&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, used in &lt;code&gt;rust-analyzer&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;compact_str&quot;&gt;&lt;code&gt;compact_str&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;flexstr&quot;&gt;&lt;code&gt;flexstr&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;smartstring&quot;&gt;&lt;code&gt;smartstring&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is a quick comparison table looking at the various &lt;code&gt;size_of&lt;&#x2F;code&gt; values, and looking at other properties according to
the docs:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;name&lt;&#x2F;th&gt;&lt;th&gt;&lt;code&gt;size_of::&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;code&gt;size_of::&amp;lt;Option&amp;lt;T&amp;gt;&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;th&gt;&lt;th&gt;Clone&lt;&#x2F;th&gt;&lt;th&gt;SSO&lt;&#x2F;th&gt;&lt;th&gt;mutable&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;String&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;O(n)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;td&gt;yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Arc&amp;lt;str&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;O(1)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;td&gt;no&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;arcstr&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;O(1)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;td&gt;no&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;smol_str&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;O(1)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;no&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;kstring&lt;&#x2F;code&gt; (&lt;code&gt;arc&lt;&#x2F;code&gt;)&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;O(1)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;15 &#x2F; 22&lt;&#x2F;td&gt;&lt;td&gt;no&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;flexstr&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;O(1)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;no&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;compact_str&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;O(n)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;smartstring&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;O(n)&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;I have not looked at any runtime performance of these crates, and haven’t checked if conversion from &lt;code&gt;String&lt;&#x2F;code&gt; really
incurs a re-allocation. I assume it does however.&lt;&#x2F;p&gt;
&lt;p&gt;As we can see from that quick table, there doesn’t seem to be any free lunch here. Some of the listed crates do have
small string optimization, but are not optimized for usage with &lt;code&gt;Option&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Depending on which characteristics are most important to us, this leaves us with only &lt;code&gt;smol_str&lt;&#x2F;code&gt; which has SSO, cheap
clones and supports &lt;code&gt;Option&lt;&#x2F;code&gt;. However, it is still the same size as &lt;code&gt;String&lt;&#x2F;code&gt; and not smaller. Given that it is part
of &lt;code&gt;rust-analyzer&lt;&#x2F;code&gt; also gives us confidence that it is of high quality and well maintained.&lt;&#x2F;p&gt;
&lt;p&gt;If we want to aim for small size, &lt;code&gt;arcstr&lt;&#x2F;code&gt; is the way to go, which advertises itself as &lt;em&gt;a better &lt;code&gt;Arc&amp;lt;str&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;. It does
not have SSO, but to be honest, I doubt SSO would do much at size &lt;code&gt;8&lt;&#x2F;code&gt;, though I’m not sure what the sweet spot for our
particular use-case would be.&lt;&#x2F;p&gt;
&lt;p&gt;And one should definitely not dismiss &lt;code&gt;Arc&amp;lt;str&amp;gt;&lt;&#x2F;code&gt;, which is both small, has cheap clones, and most of all is part of &lt;code&gt;std&lt;&#x2F;code&gt;
and thus the obvious choice if the goal is to minimize external dependencies.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;building-strings&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#building-strings&quot; aria-label=&quot;Anchor link for: building-strings&quot;&gt;#&lt;&#x2F;a&gt;
Building Strings&lt;&#x2F;h1&gt;
&lt;p&gt;So far, we have looked at various String types that are good for &lt;em&gt;storing&lt;&#x2F;em&gt; and &lt;em&gt;cloning&lt;&#x2F;em&gt;. But what about creating Strings?&lt;&#x2F;p&gt;
&lt;p&gt;We have already established that &lt;code&gt;Arc&amp;lt;str&amp;gt;&lt;&#x2F;code&gt; and most of the other contenders need to re-allocate when creating a new String,
either out of a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;, or from a &lt;code&gt;String&lt;&#x2F;code&gt; itself. Not surprisingly, all the contenders that have &lt;code&gt;O(n)&lt;&#x2F;code&gt; clones allow mutation.
So they are a good option for parsing, and when formatting small strings.&lt;&#x2F;p&gt;
&lt;p&gt;On that note, &lt;code&gt;format!&lt;&#x2F;code&gt; itself is using &lt;code&gt;String&lt;&#x2F;code&gt;, so is &lt;code&gt;to_string&lt;&#x2F;code&gt;. If you want to take advantage of any other string
type that can avoid allocations, you would have to use &lt;code&gt;write!(&amp;amp;mut s, &quot;oh hi: {}&quot;, display_type)?&lt;&#x2F;code&gt;, which is a bit unergonomic.
Alternatives might include having an &lt;code&gt;impl From&amp;lt;fmt::Arguments&amp;gt; for MyStringType&lt;&#x2F;code&gt;, which allows using
&lt;code&gt;format_args!(&quot;oh hi: {}&quot;, display_type).into()&lt;&#x2F;code&gt;. Or having something like &lt;code&gt;impl&amp;lt;D: Display&amp;gt; From&amp;lt;D&amp;gt; for MyStringType&lt;&#x2F;code&gt;,
although I haven’t tried if that actually compiles, or if the impl bounds might be too broad.&lt;&#x2F;p&gt;
&lt;p&gt;Ideally, I would love to have a more flexible type that allows mutable String building, maybe something with a const
generic parameter giving the most flexibility on construction. And then for long term storage, one can do a single copy
&#x2F; allocation using &lt;code&gt;arcstr&lt;&#x2F;code&gt; for example. Or any of the other types that have SSO.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;It is really hard to make a concrete choice here. I really want to have cheap clones, and I absolutely want the type
to be optimized for usage with &lt;code&gt;Option&lt;&#x2F;code&gt;, and ideally be smaller than &lt;code&gt;Option&amp;lt;String&amp;gt;&lt;&#x2F;code&gt; in the first place.
On the other hand though, the Sentry Rust SDK already has way too many external dependencies as it is, so adding even
more might not be the best thing.&lt;&#x2F;p&gt;
&lt;p&gt;In the end, I believe its a choice between &lt;code&gt;smol_str&lt;&#x2F;code&gt; which seems to be the best choice considering SSO, or &lt;code&gt;arcstr&lt;&#x2F;code&gt;
which seems to be the best choice when optimizing for pure &lt;code&gt;size_of&lt;&#x2F;code&gt;. Or good old &lt;code&gt;Arc&amp;lt;str&amp;gt;&lt;&#x2F;code&gt; if we do not want to take
on any new external dependencies.&lt;&#x2F;p&gt;
&lt;p&gt;Either way, to retain maximum flexibility, I might start by defining an opaque newtype which derefs to &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; and can
thus impl all the standard traits, especially &lt;code&gt;Display&lt;&#x2F;code&gt; and &lt;code&gt;Serialize&lt;&#x2F;code&gt;, and is constructible out of a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;, &lt;code&gt;String&lt;&#x2F;code&gt;,
and possibly &lt;code&gt;impl Display&lt;&#x2F;code&gt; if I can make that work. With that in place, we can change the internal implementation at
any time without breaking the API.&lt;&#x2F;p&gt;
&lt;p&gt;A big question in the end that still remains is how this can be combined with &lt;code&gt;serde_json::Value&lt;&#x2F;code&gt;, as we use that type
already in a couple of places, and I would like to use it even more, replacing way too detailed type definitions by
having all the types being extendable with a generic &lt;code&gt;Map&amp;lt;String, Value&amp;gt;&lt;&#x2F;code&gt;. Especially the keys would probably benefit a
lot from small string optimization. This remains to be seen.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Optimizing Rust Enum `Debug`-ing with Perfect Hashing</title>
        <published>2023-07-29T00:00:00+00:00</published>
        <updated>2023-07-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/optimizing-enums/"/>
        <id>https://swatinem.de/blog/optimizing-enums/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/optimizing-enums/">&lt;p&gt;This weekend is the start of my week of &lt;em&gt;chill at home and do nothing&lt;&#x2F;em&gt; vacation.
Which, for a passionate software engineer, is the perfect time to do some open source work and dive into
interesting topics outside of work.&lt;&#x2F;p&gt;
&lt;p&gt;The topic I will be looking at is optimizing code generation of Rust enums. This deep dive is motivated by a real world
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-minidump&#x2F;rust-minidump&#x2F;issues&#x2F;847&quot;&gt;issue&lt;&#x2F;a&gt; in the rust &lt;code&gt;minidump(_common)&lt;&#x2F;code&gt; crate.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;minidump_common&lt;&#x2F;code&gt; crate defines two &lt;em&gt;gigantic&lt;&#x2F;em&gt; C-style enums that look a little bit like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(u32)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Copy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; PartialEq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Eq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; FromPrimitive)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;WinErrorWindows &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;ERROR_SUCCESS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;ERROR_INVALID_FUNCTION &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;ERROR_FILE_NOT_FOUND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;ERROR_PATH_NOT_FOUND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; ... about ~2_000 more variants
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is a data-less enum with an explicit &lt;code&gt;u32&lt;&#x2F;code&gt; discriminant, the discriminant values are explicitly assigned,
&lt;em&gt;and&lt;&#x2F;em&gt; the discriminant values are non-contiguous, meaning they have gaps in them.&lt;&#x2F;p&gt;
&lt;p&gt;The problem with this enum is that the &lt;code&gt;Debug&lt;&#x2F;code&gt; and &lt;code&gt;FromPrimitive&lt;&#x2F;code&gt; derives create &lt;em&gt;a ton&lt;&#x2F;em&gt; of bloat.&lt;&#x2F;p&gt;
&lt;p&gt;How much you ask? Well, according to &lt;code&gt;cargo bloat&lt;&#x2F;code&gt;, these two derives are among the top offenders compiling
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;symbolicator&quot;&gt;&lt;code&gt;symbolicator&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, any &lt;code&gt;symbolicator&lt;&#x2F;code&gt; is a &lt;em&gt;huge&lt;&#x2F;em&gt; crate:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;File  .text     Size                   Crate Name
&lt;&#x2F;span&gt;&lt;span&gt; 0.3%   0.5% 108.8KiB         minidump_common &amp;lt;minidump_common::errors::windows::WinErrorWindows as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt; 0.2%   0.3%  62.0KiB         minidump_common &amp;lt;minidump_common::errors::windows::WinErrorWindows as num_traits::cast::FromPrimitive&amp;gt;::from_u64
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another indicator of this bloat is &lt;code&gt;cargo llvm-lines&lt;&#x2F;code&gt;, which has the following to say about our enum:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;  Lines                  Copies                Function name
&lt;&#x2F;span&gt;&lt;span&gt;  -----                  ------                -------------
&lt;&#x2F;span&gt;&lt;span&gt;  9852153                271193                (TOTAL)
&lt;&#x2F;span&gt;&lt;span&gt;    73972 (0.8%,  1.5%)    6184 (2.3%,  3.4%)  &amp;lt;&amp;amp;T as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt;     2832 (0.0%, 41.3%)       1 (0.0%, 25.6%)  &amp;lt;minidump_common::errors::windows::WinErrorWindows as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt;     2830 (0.0%, 41.4%)       1 (0.0%, 25.6%)  &amp;lt;minidump_common::errors::windows::WinErrorWindows as num_traits::cast::FromPrimitive&amp;gt;::from_u64
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;cargo llvm-lines&lt;&#x2F;code&gt; output does not flag it as such a huge offender, and at ~2000 lines, there is
barely any improvements to be had, as that is fairly close to the number of variants this enum has.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;debug-ing-enum-codegen&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#debug-ing-enum-codegen&quot; aria-label=&quot;Anchor link for: debug-ing-enum-codegen&quot;&gt;#&lt;&#x2F;a&gt;
&lt;code&gt;Debug&lt;&#x2F;code&gt;-ing enum codegen&lt;&#x2F;h1&gt;
&lt;p&gt;Lets break this whole problem down and start from the beginning with a dead simple enum.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Enum &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    C&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Enum) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{e:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nothing out of the ordinary, and we can use this example to illustrate a couple of things.&lt;&#x2F;p&gt;
&lt;p&gt;First, lets see what kind of Rust code is being generated on behalf of that &lt;code&gt;#[derive(Debug)]&lt;&#x2F;code&gt;.
We can do that directly on the &lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=release&amp;amp;edition=2021&amp;amp;gist=6b1c66d8940b59d22258c6062c30ed9a&quot;&gt;Rust Playground&lt;&#x2F;a&gt;.
Just choose &lt;em&gt;expand macros&lt;&#x2F;em&gt; from the &lt;em&gt;tools&lt;&#x2F;em&gt; dropdown. This is what it looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Enum &lt;&#x2F;span&gt;&lt;span&gt;{ A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; C&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;automatically_derived&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Debug &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Enum &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Formatter) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Result {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Formatter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;write_str(f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                Enum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;A&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                Enum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;B&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                Enum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;C &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;C&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                Enum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;D &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;D&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Very straight forward, no surprises here.&lt;&#x2F;p&gt;
&lt;p&gt;When this is being compiled into native code by LLVM, and checking the output in the &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;b85G4qceh&quot;&gt;Compiler explorer&lt;&#x2F;a&gt;,
I got my first &lt;em&gt;positive shock&lt;&#x2F;em&gt;, as this is its output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt:
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rax, rsi
&lt;&#x2F;span&gt;&lt;span&gt;        movzx   ecx, byte ptr [rdi]
&lt;&#x2F;span&gt;&lt;span&gt;        lea     rdx, [rip + .Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt]
&lt;&#x2F;span&gt;&lt;span&gt;        movsxd  rsi, dword ptr [rdx + 4*rcx]
&lt;&#x2F;span&gt;&lt;span&gt;        add     rsi, rdx
&lt;&#x2F;span&gt;&lt;span&gt;        mov     edx, 1
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rdi, rax
&lt;&#x2F;span&gt;&lt;span&gt;        jmp     qword ptr [rip + _ZN4core3fmt9Formatter9write_str17hdb374abbd294d87eE@GOTPCREL]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt:
&lt;&#x2F;span&gt;&lt;span&gt;        .long   .L__unnamed_3-.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt;        .long   .L__unnamed_4-.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt;        .long   .L__unnamed_5-.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt;        .long   .L__unnamed_6-.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.L__unnamed_3:
&lt;&#x2F;span&gt;&lt;span&gt;        .byte   65
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.L__unnamed_4:
&lt;&#x2F;span&gt;&lt;span&gt;        .byte   66
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.L__unnamed_5:
&lt;&#x2F;span&gt;&lt;span&gt;        .byte   67
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.L__unnamed_6:
&lt;&#x2F;span&gt;&lt;span&gt;        .byte   68
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;LLVM is smart enough to turn all of this into a bunch of &lt;em&gt;labeled&lt;&#x2F;em&gt; bytes representing our single-character enum variant names,
and a table that references them. As the compiler knows that all our variant names are just a single character,
it will hardcode the value &lt;code&gt;1&lt;&#x2F;code&gt; in there.&lt;&#x2F;p&gt;
&lt;p&gt;To be perfectly frank, the compiler could do even better in this case ;-)
If all our names are just single characters, and we have dense discriminants,
we wouldn’t need a table at all, we could just directly index into a flat string.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;But okay, so far I am already impressed. Lets build on this example and make the discriminant names variable-length:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Enum &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;BB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;CCC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;ABCD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the assembly output is now this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt:
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rax, rsi
&lt;&#x2F;span&gt;&lt;span&gt;        movzx   ecx, byte ptr [rdi]
&lt;&#x2F;span&gt;&lt;span&gt;        lea     rdx, [rip + .Lswitch.table.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt]
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rdx, qword ptr [rdx + 8*rcx]
&lt;&#x2F;span&gt;&lt;span&gt;        lea     rdi, [rip + .Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt]
&lt;&#x2F;span&gt;&lt;span&gt;        movsxd  rsi, dword ptr [rdi + 4*rcx]
&lt;&#x2F;span&gt;&lt;span&gt;        add     rsi, rdi
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rdi, rax
&lt;&#x2F;span&gt;&lt;span&gt;        jmp     qword ptr [rip + _ZN4core3fmt9Formatter9write_str17hdb374abbd294d87eE@GOTPCREL]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.Lswitch.table.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt:
&lt;&#x2F;span&gt;&lt;span&gt;        .quad   1
&lt;&#x2F;span&gt;&lt;span&gt;        .quad   2
&lt;&#x2F;span&gt;&lt;span&gt;        .quad   3
&lt;&#x2F;span&gt;&lt;span&gt;        .quad   4
&lt;&#x2F;span&gt;&lt;span&gt;        […]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt:
&lt;&#x2F;span&gt;&lt;span&gt;        .long   .L__unnamed_3-.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt;        .long   .L__unnamed_4-.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt;        .long   .L__unnamed_5-.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt;        .long   .L__unnamed_6-.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt;        […]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.L__unnamed_3:
&lt;&#x2F;span&gt;&lt;span&gt;        .byte   65
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.L__unnamed_4:
&lt;&#x2F;span&gt;&lt;span&gt;        .zero   2,66
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.L__unnamed_5:
&lt;&#x2F;span&gt;&lt;span&gt;        .zero   3,67
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.L__unnamed_6:
&lt;&#x2F;span&gt;&lt;span&gt;        .ascii  &amp;quot;ABCD&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As we can see, we now end up with two tables, one for the length of the names, and the second as before,
with a pointer to the raw bytes.
Also interesting that the compiler generates different assembler instructions depending on whether
the letters are repeating, and how long the string is.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Our next experiment is making this a sparse enum by explicitly assigning discriminant values.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Enum &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;BB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;CCC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;ABCD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, a positive surprise from LLVM, as it will just insert duplicated entries into the tables,
trading a bit of wasted space for efficient code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;.Lswitch.table.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt:
&lt;&#x2F;span&gt;&lt;span&gt;        .quad   1
&lt;&#x2F;span&gt;&lt;span&gt;        .quad   1
&lt;&#x2F;span&gt;&lt;span&gt;        .quad   1
&lt;&#x2F;span&gt;&lt;span&gt;        .quad   1
&lt;&#x2F;span&gt;&lt;span&gt;        .quad   2
&lt;&#x2F;span&gt;&lt;span&gt;        .quad   3
&lt;&#x2F;span&gt;&lt;span&gt;        .quad   4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt:
&lt;&#x2F;span&gt;&lt;span&gt;        .long   .L__unnamed_3-.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt;        .long   .L__unnamed_3-.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt;        .long   .L__unnamed_3-.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt;        .long   .L__unnamed_3-.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt;        .long   .L__unnamed_4-.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt;        .long   .L__unnamed_5-.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;span&gt;        .long   .L__unnamed_6-.Lreltable.&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This optimization only triggers up to a certain threshold of course,
and when inserting a gap of ~200 in between the discriminants,
we end up with some vastly worse code being generated,
with a chain of comparisons and conditional jumps:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt:
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rax, rsi
&lt;&#x2F;span&gt;&lt;span&gt;        movzx   ecx, byte ptr [rdi]
&lt;&#x2F;span&gt;&lt;span&gt;        cmp     ecx, 200
&lt;&#x2F;span&gt;&lt;span&gt;        jg      .LBB1_5
&lt;&#x2F;span&gt;&lt;span&gt;        test    ecx, ecx
&lt;&#x2F;span&gt;&lt;span&gt;        jne     .LBB1_3
&lt;&#x2F;span&gt;&lt;span&gt;        lea     rsi, [rip + .L__unnamed_2]
&lt;&#x2F;span&gt;&lt;span&gt;        mov     edx, 1
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rdi, rax
&lt;&#x2F;span&gt;&lt;span&gt;        jmp     qword ptr [rip + _ZN4core3fmt9Formatter9write_str17hdb374abbd294d87eE@GOTPCREL]
&lt;&#x2F;span&gt;&lt;span&gt;.LBB1_5:
&lt;&#x2F;span&gt;&lt;span&gt;        cmp     ecx, 201
&lt;&#x2F;span&gt;&lt;span&gt;        jne     .LBB1_6
&lt;&#x2F;span&gt;&lt;span&gt;        lea     rsi, [rip + .L__unnamed_3]
&lt;&#x2F;span&gt;&lt;span&gt;        mov     edx, 3
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rdi, rax
&lt;&#x2F;span&gt;&lt;span&gt;        jmp     qword ptr [rip + _ZN4core3fmt9Formatter9write_str17hdb374abbd294d87eE@GOTPCREL]
&lt;&#x2F;span&gt;&lt;span&gt;.LBB1_3:
&lt;&#x2F;span&gt;&lt;span&gt;        lea     rsi, [rip + .L__unnamed_4]
&lt;&#x2F;span&gt;&lt;span&gt;        mov     edx, 2
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rdi, rax
&lt;&#x2F;span&gt;&lt;span&gt;        jmp     qword ptr [rip + _ZN4core3fmt9Formatter9write_str17hdb374abbd294d87eE@GOTPCREL]
&lt;&#x2F;span&gt;&lt;span&gt;.LBB1_6:
&lt;&#x2F;span&gt;&lt;span&gt;        lea     rsi, [rip + .L__unnamed_5]
&lt;&#x2F;span&gt;&lt;span&gt;        mov     edx, 4
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rdi, rax
&lt;&#x2F;span&gt;&lt;span&gt;        jmp     qword ptr [rip + _ZN4core3fmt9Formatter9write_str17hdb374abbd294d87eE@GOTPCREL]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is not only bad because it generates &lt;em&gt;a ton&lt;&#x2F;em&gt; of code that will lead to binary bloat as is evident from the example
I started out with. But this chain of comparisons also means that the &lt;code&gt;Debug&lt;&#x2F;code&gt; impl effectively scales with the number
of variants in the enum, which is not particularly great.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;perfect-hashing-to-the-rescue&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#perfect-hashing-to-the-rescue&quot; aria-label=&quot;Anchor link for: perfect-hashing-to-the-rescue&quot;&gt;#&lt;&#x2F;a&gt;
Perfect Hashing to the rescue?&lt;&#x2F;h1&gt;
&lt;p&gt;Lets rewind a bit and take another look at how our enum looks like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It is data-less with an explicit &lt;code&gt;#[repr(u32)]&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;It has explicitly assigned discriminants which are sparse &#x2F; non-contiguous.&lt;&#x2F;li&gt;
&lt;li&gt;Plus: it has a finite &#x2F; exhaustive number of discriminants.&lt;&#x2F;li&gt;
&lt;li&gt;And we will only use valid discriminants in our &lt;code&gt;Debug&lt;&#x2F;code&gt; impl.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With these assumptions in place, we are searching for something that can map a finite
number of discriminants to a table of values.
The data-structure that can do this is a &lt;code&gt;HashMap&lt;&#x2F;code&gt; of course.
And since all the discriminants and values are known at compile time,
we can use a perfect hash table (PHT) to encode everything statically at compile time.&lt;&#x2F;p&gt;
&lt;p&gt;I remember I read a very good article about how perfect hashing works in theory,
but I can’t seem to find it right now, so I will have a go at explaining it.&lt;&#x2F;p&gt;
&lt;p&gt;Compared to a normal hash table, that always has some spare capacity, and needs
to account for some hash collisions, the perfect hash table will always map
&lt;em&gt;valid&lt;&#x2F;em&gt; hash keys to their values directly, using as little spare capacity if possible.&lt;&#x2F;p&gt;
&lt;p&gt;Such a hash function might work like this, simplified:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;(input_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;wrapping_add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;STARTING_OFFSET&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;^ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;XOR_VALUE&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;TABLE_SIZE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are sophisticated algorithms that will find appropriate values for &lt;code&gt;STARTING_OFFSET&lt;&#x2F;code&gt; and &lt;code&gt;XOR_VALUE&lt;&#x2F;code&gt; while
minimizing &lt;code&gt;TABLE_SIZE&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But we just have &lt;code&gt;4&lt;&#x2F;code&gt; discriminants from our example above: &lt;code&gt;[0, 200, 201, 202]&lt;&#x2F;code&gt;.
It should be possible to brute-force some values here that fit us just right.
I chose to allow for some slack space as the brute-forcing exact matches did not
yield any hits in a reasonable time, whereas when allowing some wasted space,
it gave me an answer immediately.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the very naive implementation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rand&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;prelude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;validate_no_duplicate_idx&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;indices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; indices_hit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; indices {
&lt;&#x2F;span&gt;&lt;span&gt;        indices_hit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; idx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    indices_hit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;count_ones&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; indices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;PhfResult&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; N&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    start_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    xor_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    table_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    table_indices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;; N],
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;generate_perfect_hash_values&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; N&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;input_values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;; N],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;slack_space&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;PhfResult&amp;lt;N&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; rng &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;rand&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;thread_rng()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; xor_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; rng&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;gen&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; start_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; rng&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;gen&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; table_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(N &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; slack_space) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; input_values
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;input_value&lt;&#x2F;span&gt;&lt;span&gt;| (input_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;wrapping_add&lt;&#x2F;span&gt;&lt;span&gt;(start_value) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt; xor_value) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt; table_size)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;validate_no_duplicate_idx&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;table) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; PhfResult {
&lt;&#x2F;span&gt;&lt;span&gt;                start_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                xor_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                table_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                table_indices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running it on our example above gave me the following output:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;PhfResult {
&lt;&#x2F;span&gt;&lt;span&gt;    start_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1803446167&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    xor_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;597238773&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    table_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using these values, I can then hand-craft a better &lt;code&gt;Debug&lt;&#x2F;code&gt; impl, and validate that it works:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(u32)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Copy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Clone)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Enum &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;BB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;CCC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;ABCD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Debug &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Enum &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Formatter&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Result {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;TABLE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;ABCD&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;CCC&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;BB&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;A&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; discriminant &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= *&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(discriminant&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;wrapping_add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1803446167&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;^ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;597238773&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;write_str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;TABLE&lt;&#x2F;span&gt;&lt;span&gt;[index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;validate_debug_impl&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;Enum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;A)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;A&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;Enum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;BB&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;BB&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;Enum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;CCC&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;CCC&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;Enum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;ABCD&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;ABCD&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But does it really compile to better code? Lets check again using the &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;v7j4M7oja&quot;&gt;Compiler Explorer&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;example::Enum as core::fmt::Debug&amp;gt;::fmt:
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rax, rsi
&lt;&#x2F;span&gt;&lt;span&gt;        mov     ecx, 1803446167
&lt;&#x2F;span&gt;&lt;span&gt;        add     ecx, dword ptr [rdi]
&lt;&#x2F;span&gt;&lt;span&gt;        xor     ecx, 597238773
&lt;&#x2F;span&gt;&lt;span&gt;        imul    rdx, rcx, 1717986919
&lt;&#x2F;span&gt;&lt;span&gt;        shr     rdx, 33
&lt;&#x2F;span&gt;&lt;span&gt;        lea     edx, [rdx + 4*rdx]
&lt;&#x2F;span&gt;&lt;span&gt;        sub     ecx, edx
&lt;&#x2F;span&gt;&lt;span&gt;        shl     rcx, 4
&lt;&#x2F;span&gt;&lt;span&gt;        lea     rdx, [rip + .L__unnamed_1]
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rsi, qword ptr [rcx + rdx]
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rdx, qword ptr [rcx + rdx + 8]
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rdi, rax
&lt;&#x2F;span&gt;&lt;span&gt;        jmp     qword ptr [rip + _ZN4core3fmt9Formatter9write_str17hdb374abbd294d87eE@GOTPCREL]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.L__unnamed_3:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.L__unnamed_4:
&lt;&#x2F;span&gt;&lt;span&gt;        .ascii  &amp;quot;ABCD&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.L__unnamed_5:
&lt;&#x2F;span&gt;&lt;span&gt;        .zero   3,67
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.L__unnamed_6:
&lt;&#x2F;span&gt;&lt;span&gt;        .zero   2,66
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.L__unnamed_7:
&lt;&#x2F;span&gt;&lt;span&gt;        .byte   65
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.L__unnamed_1:
&lt;&#x2F;span&gt;&lt;span&gt;        .quad   .L__unnamed_3
&lt;&#x2F;span&gt;&lt;span&gt;        .zero   8
&lt;&#x2F;span&gt;&lt;span&gt;        .quad   .L__unnamed_4
&lt;&#x2F;span&gt;&lt;span&gt;        .asciz  &amp;quot;\004\000\000\000\000\000\000&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        .quad   .L__unnamed_5
&lt;&#x2F;span&gt;&lt;span&gt;        .asciz  &amp;quot;\003\000\000\000\000\000\000&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        .quad   .L__unnamed_6
&lt;&#x2F;span&gt;&lt;span&gt;        .asciz  &amp;quot;\002\000\000\000\000\000\000&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        .quad   .L__unnamed_7
&lt;&#x2F;span&gt;&lt;span&gt;        .asciz  &amp;quot;\001\000\000\000\000\000\000&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Indeed, we again end up with code that has no branches, and indexes right into a static table.
&lt;em&gt;Success!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;making-it-scale&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#making-it-scale&quot; aria-label=&quot;Anchor link for: making-it-scale&quot;&gt;#&lt;&#x2F;a&gt;
Making it scale&lt;&#x2F;h1&gt;
&lt;p&gt;The above was just a toy example to make a point. But can we use the same principle to solve the original issue?&lt;&#x2F;p&gt;
&lt;p&gt;Obviously, I wouldn’t use my horribly bad code to brute-force these constants,
and I also wouldn’t hand-craft the &lt;code&gt;Debug&lt;&#x2F;code&gt; impl either.
As in many other cases, there is a crate for that!&lt;&#x2F;p&gt;
&lt;p&gt;It is conveniently called &lt;code&gt;phf&lt;&#x2F;code&gt;, and there is also a companion crate called &lt;code&gt;phf_codegen&lt;&#x2F;code&gt;.
The combination of both crates indeed generates a &lt;code&gt;HashMap&lt;&#x2F;code&gt;-like type, that allows arbitrary lookups.&lt;&#x2F;p&gt;
&lt;p&gt;In our case however, we know statically that we are only looking things up that
are guaranteed to be in the map. So I decided to rather build on &lt;code&gt;phf_generator&lt;&#x2F;code&gt;
and &lt;code&gt;phf_shared&lt;&#x2F;code&gt;, which are the lower level building blocks.&lt;&#x2F;p&gt;
&lt;p&gt;Using &lt;code&gt;phf_generator::generate_hash&lt;&#x2F;code&gt; returns a &lt;code&gt;HashState&lt;&#x2F;code&gt; consisting of a random &lt;code&gt;key&lt;&#x2F;code&gt;, a couple of
&lt;code&gt;displacements&lt;&#x2F;code&gt;, and a &lt;code&gt;map&lt;&#x2F;code&gt; which encodes the order in which we have to output our original values,
just like the &lt;code&gt;table&lt;&#x2F;code&gt; in my example above.&lt;&#x2F;p&gt;
&lt;p&gt;We can then generate some code, and use &lt;code&gt;phf_shared&lt;&#x2F;code&gt; to derive the index.
Here is the hand-crafted code feeding values generated by &lt;code&gt;phf_generator&lt;&#x2F;code&gt; into &lt;code&gt;phf_shared&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Debug &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Enum &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Formatter&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Result {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;KEY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;phf_shared&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;HashKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;12913932095322966823&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;DISPLACEMENTS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;TABLE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;A&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;BB&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;ABCD&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;CCC&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; discriminant &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= *&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; hashes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;phf_shared&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;hash(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;discriminant&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;KEY&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;phf_shared&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;get_index(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;hashes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;DISPLACEMENTS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;TABLE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;write_str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;TABLE&lt;&#x2F;span&gt;&lt;span&gt;[index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I will spare you the raw assembly code. The load from &lt;code&gt;TABLE&lt;&#x2F;code&gt; is still the same as before,
otherwise we have a ton of inlined code related to using a proper hash function (Sip13&#x2F;128)
which adds quite a lot of instructions.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Now the big question that remains is to implement all this for the &lt;code&gt;minidump_common&lt;&#x2F;code&gt;
use-case and see if it is actually better in terms of bloat and also compile times.
But that is an exercise for another day.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;&#x2F;strong&gt;: Results are in, implementing this approach in &lt;code&gt;minidump_common&lt;&#x2F;code&gt; for the &lt;code&gt;Debug&lt;&#x2F;code&gt;
and &lt;code&gt;FromPrimitive&lt;&#x2F;code&gt; implementations yielded a ~100K win (about 1%) of the &lt;code&gt;minidump-stackwalk&lt;&#x2F;code&gt;
binary size. Not bad! Although I haven’t had a look at compile times at all.&lt;&#x2F;p&gt;
&lt;p&gt;Nonetheless, I’m not as convinced that a huge chunk of auto-generated code is the
best solution to all this, and believe that this should be handled in the compiler itself.
And as luck would have it, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;114106&quot;&gt;a similar issue&lt;&#x2F;a&gt;
was just raised a couple of days before I wrote this post. Though that issue describes
a more general case where enums with a large number of variants exhibit poor codegen.
The case I presented here is a bit more special, as it involves manually defined
sparse discriminants with large gaps in their values.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Finding and fixing runaway Android Battery Usage</title>
        <published>2023-06-18T00:00:00+00:00</published>
        <updated>2023-06-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/fixing-android-battery-usage/"/>
        <id>https://swatinem.de/blog/fixing-android-battery-usage/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/fixing-android-battery-usage/">&lt;h1 id=&quot;tldr&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#tldr&quot; aria-label=&quot;Anchor link for: tldr&quot;&gt;#&lt;&#x2F;a&gt;
TLDR&lt;&#x2F;h1&gt;
&lt;p&gt;My phone was draining unreasonable amounts of battery lately. Shelling into the
phone via &lt;code&gt;adb shell&lt;&#x2F;code&gt; after enabling USB debugging, and doing a simple &lt;code&gt;top&lt;&#x2F;code&gt; revealed that, of all things,
&lt;code&gt;com.sonymobile.launcher&lt;&#x2F;code&gt;, aka the Home Screen &#x2F; Launcher was constantly running at 200% CPU (saturating 2 cores), and
using up to 10% of memory.&lt;&#x2F;p&gt;
&lt;p&gt;I switched to a different Launcher which so far looks to have fixed the battery drain, though I should observe it
for a longer time to be certain.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-whole-story&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-whole-story&quot; aria-label=&quot;Anchor link for: the-whole-story&quot;&gt;#&lt;&#x2F;a&gt;
The whole story&lt;&#x2F;h1&gt;
&lt;p&gt;I got myself a new Android phone fairly recently. A Sony Xperia 10 IV. A phone with a headphone jack,
finger print reader, and most importantly for me by now: No fucking useless notch &#x2F; face camera cutout. And a screen
with only a minimally curved corners, and no screen to the edge. Because I want to hold it firmly in my hands without
triggering any touch actions.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, so far I was very happy with it, a new phone with a brand new battery. The usage was also reasonable, it used to
drain about ~20% per day with my average usage pattern. Which means I needed to charge it about every 3 days if I go from
20% to 80%, neither draining too deep, nor topping it completely off.&lt;&#x2F;p&gt;
&lt;p&gt;After an update about a month ago however, I had troubles with battery usage. The phone would get into some kind
of broken state where it would drain up to 4x the usual amount. I had to charge it almost daily.
It was also pretty random. I could go half a day with normal battery drain, just to have it drain half the battery
when being completely idle over night. Sometimes restarting it would put battery usage back to normal. Sometimes
going on airplane mode would. But other times these things just didn’t make a difference.&lt;&#x2F;p&gt;
&lt;p&gt;I was completely clueless. The battery usage page in the Android system settings pointed to some unreasonable battery
draw from the mobile network. I went through a couple of online help pages suggesting to turn of always-online mobile
network when you are connected to WIFI, or to disable power hungry 5G completely. Still nothing.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Well then, I’m a software engineer I thought. How about I debug this thing like an Android developer would.
There is a page in the Android developer docs that explains how to setup and use &lt;code&gt;batterystats&lt;&#x2F;code&gt; and &lt;code&gt;Battery Historian&lt;&#x2F;code&gt;.
I tried that, and after the phone drained 16% of battery in about 6 hours of being mostly idle, I collected a snapshot
and looked at the result. &lt;em&gt;Battery Historian&lt;&#x2F;em&gt; reported an idle power draw af 2.3%&#x2F;hr, and a whooping 8.6%&#x2F;hr when active.&lt;&#x2F;p&gt;
&lt;p&gt;And then there it was. For a total wall time of about 6 hours, the phone had over 7 hours of CPU time, almost 4 of that
in system time. There was something going wrong there indeed. The CPU and the &lt;code&gt;kernel only uptime&lt;&#x2F;code&gt; was constantly active
during that time. &lt;code&gt;Kernel Wakelocks&lt;&#x2F;code&gt; was also accounting for 4.5 hrs of that time. I thought, what the hell is the kernel
doing there? The kernel &lt;code&gt;wakesources&lt;&#x2F;code&gt; showed &lt;code&gt;rgb_ctrl_wq&lt;&#x2F;code&gt; as having a total duration of 4 hrs as well. What does that
even mean?&lt;&#x2F;p&gt;
&lt;p&gt;Going through the apps by CPU usage then showed the &lt;code&gt;com.sonymobile.launcher&lt;&#x2F;code&gt;, aka home screen as using 6.5 hrs of user
time, and 3 hours of system time. As a reminder, the whole experiment was running for a little less than 6 hours.
So was the home screen really using up all that CPU, and burning through the battery doing so?&lt;&#x2F;p&gt;
&lt;p&gt;Then it hit me: Android is in theory a linux just like every other linux? And I remembered from some time ago that it
has &lt;code&gt;top&lt;&#x2F;code&gt; installed. So I used &lt;code&gt;adb shell&lt;&#x2F;code&gt; to connect, and &lt;code&gt;top&lt;&#x2F;code&gt; indeed showed &lt;code&gt;com.sonymobile.launcher&lt;&#x2F;code&gt; constantly
using up 200% of CPU, aka two full cores. Not only that, but also 9% of the memory, almost 500M out of the 5.5G usable
on the phone. Well, no wonder the system is constantly killing my backgrounded apps I don’t want to be killed.&lt;&#x2F;p&gt;
&lt;p&gt;I really should have thought of that earlier. A good old &lt;code&gt;htop&lt;&#x2F;code&gt; (or Windows Task Manager) is the first thing to look at
if things are not performing as expected. The tools built into the Android System Settings are useless.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I cannot completely blame the launcher in itself though. I did have a bunch of widgets on the home screen. Any of those
might have been misbehaving. For example I had a home screen widget for VLC which I use as media player. And for some
unknown problem, the system was revoking its permissions to read media files. Twice in a row. For no reason! Its quite
possible that because of this permissions problem, the VLC widget was causing the home screen to spin. Or maybe some
other widgets, who knows?&lt;&#x2F;p&gt;
&lt;p&gt;Either way, this &lt;em&gt;does&lt;&#x2F;em&gt; cast a very bad light on Sony, and Phone manufacturers in general. It is a widely believed myth
that phone vendors are intentionally slowing down their phones to incentivize people to buy new ones. Or is it reality
after all? I mean, there &lt;em&gt;have&lt;&#x2F;em&gt; been documented cases where this indeed happened.&lt;&#x2F;p&gt;
&lt;p&gt;A vendor-supplied system app burning through the battery shortly after I did a system update. After I have never
experienced this behavior before for the half year I own this device.
It sure is an awfully bad coincidence, and casts a very bad light on the vendor.&lt;&#x2F;p&gt;
&lt;p&gt;Since then I switched to an alternative home screen. I definitely need to run the phone for longer with it to verify the
long term behavior, but so far it looks like the battery drain problem has been fixed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The magic of scope guards</title>
        <published>2023-05-21T00:00:00+00:00</published>
        <updated>2023-05-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/magic-scope-guards/"/>
        <id>https://swatinem.de/blog/magic-scope-guards/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/magic-scope-guards/">&lt;p&gt;Scope guards in Rust are awesome!&lt;&#x2F;p&gt;
&lt;p&gt;Apart from explaining why, I also want to explore one specific side of them that I have never read about directly:
their effect on compile times.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;a-small-ra-ii-nt&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#a-small-ra-ii-nt&quot; aria-label=&quot;Anchor link for: a-small-ra-ii-nt&quot;&gt;#&lt;&#x2F;a&gt;
A small RA(II)nt&lt;&#x2F;h1&gt;
&lt;p&gt;Let me start todays exploration with a bit of a rant. What I am talking about today, and what I refer to as “scope guards”
is often called the RAII pattern. That stands for “resource acquisition is initialization”, and I believe its a horrible
acronym. What are we initializing? Are we even acquiring anything? Well maybe when we are talking about locks yes, but
otherwise?&lt;&#x2F;p&gt;
&lt;p&gt;Apart from that, I am also very much against &lt;em&gt;computer-science-speak&lt;&#x2F;em&gt;. More specifically, hiding otherwise easy to
understand concepts behind complicated-sounding nomenclature. In computer-science-speak, this concept is called
“affine types”. What the hell does “affine” even mean? I am not a native speaker, but according to a dictionary, it is
also translated as “affin” in my native german. Well thanks for nothing. Another translation is “verwandt”, which
means “related” in english. Okay, that does not help either.&lt;&#x2F;p&gt;
&lt;p&gt;These “affine types” are also &lt;em&gt;related&lt;&#x2F;em&gt; (see what I did there?) to “linear types” that are being discussed in the Rust
community right now. Another word that on its own does not convey any meaning.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Putting these concepts into words that anyone should be able to understand:
A scope guards, RAII or affine type is a type that has a &lt;em&gt;destructor&lt;&#x2F;em&gt; (a piece of code) which is called automatically
at the end of its scope. Hence I call them scope guards, as I believe that describes their use-case the best.
If I understand the whole linear type debate, the problem is that the scope can in theory be extended to &lt;em&gt;infinity&lt;&#x2F;em&gt; by
leaking the type, which is especially bad for types that require their destructor to run for soundness.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;scopes&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#scopes&quot; aria-label=&quot;Anchor link for: scopes&quot;&gt;#&lt;&#x2F;a&gt;
Scopes&lt;&#x2F;h1&gt;
&lt;p&gt;This brings us to the classic example that exhibited one of these soundness problems: Scoped Threads. I do not want to
go into the details here, as I bet I would get half of that wrong.&lt;&#x2F;p&gt;
&lt;p&gt;What I &lt;em&gt;do&lt;&#x2F;em&gt; want to highlight is the usage of closures, specifically a &lt;code&gt;FnOnce&lt;&#x2F;code&gt; that has harder guarantees of enforcing
destructors to run than scope guards. The function that executes the closure will only return to its caller when all
the necessary cleanup is done. But being a (generic) function comes with two major downsides.&lt;&#x2F;p&gt;
&lt;p&gt;One is the function-coloring problem that makes it not play well with &lt;code&gt;async&lt;&#x2F;code&gt; code. And the other one is that it is
&lt;em&gt;generic&lt;&#x2F;em&gt; and will thus be monomorphized by the compiler. The compiler will compile the outer function multiple times,
in the worst case for every time it is called.&lt;&#x2F;p&gt;
&lt;p&gt;An interesting observation on the side is that you can always trivially move from a scope-guard version of code to a
closure version:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;takes_closure&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;O, F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;FnOnce&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; O&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; F) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _guard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;create_guard&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Sometimes you &lt;em&gt;want&lt;&#x2F;em&gt; the compiler to duplicate and inline all the code. Sometimes inlining it will give better runtime
performance. But depending on how large the code is, &lt;em&gt;outlining&lt;&#x2F;em&gt; might be the better idea. While outlined code might
introduce more jumps and another stack frame, but depending on how hot the actual code is, it might be better for the
instruction cache.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;compile-times&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#compile-times&quot; aria-label=&quot;Anchor link for: compile-times&quot;&gt;#&lt;&#x2F;a&gt;
Compile times&lt;&#x2F;h1&gt;
&lt;p&gt;But today I want to specifically focus on compile times.&lt;&#x2F;p&gt;
&lt;p&gt;For this I first created a chunk of large and slow to compile code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;macro_rules! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;blow_up &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;$a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ident&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;stringify!&lt;&#x2F;span&gt;&lt;span&gt;($a))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;$a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ident &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;$rest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;tt&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;blow_up!&lt;&#x2F;span&gt;&lt;span&gt;($a)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;blow_up!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;($rest)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;blow_up!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;($rest)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;macro_rules! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;make_slow &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;blow_up!&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            a0 b0 c0 d0 e0 f0 g0 h0 i0 j0
&lt;&#x2F;span&gt;&lt;span&gt;        )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code intentionally generates an exponential number of &lt;code&gt;println!&lt;&#x2F;code&gt; statements to make sure it is slow to compile,
and compiles to a ton of code, so we have something to measure.&lt;&#x2F;p&gt;
&lt;p&gt;Going with the closure-based code first, we want to put this code both before and after our actual closure call, like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;takes_closure&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;O, F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;FnOnce&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; O&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; F) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; O {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;make_slow!&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;make_slow!&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    o
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And in the end we will invoke the closure with a couple of times with different times to be extra sure the compiler will
compile it multiple times:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;takes_closure&lt;&#x2F;span&gt;&lt;span&gt;(|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;print!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{a}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;takes_closure&lt;&#x2F;span&gt;&lt;span&gt;(|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;print!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{a}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;takes_closure&lt;&#x2F;span&gt;&lt;span&gt;(|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;print!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{a}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;takes_closure&lt;&#x2F;span&gt;&lt;span&gt;(|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;print!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{a}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On my system, compiling this code in debug mode with &lt;code&gt;-Z time-passes&lt;&#x2F;code&gt; takes a bit over 2 seconds, and highlights a
couple of slow parts of compilation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;time:   0.368; rss:   55MB -&amp;gt;   91MB (  +36MB)  MIR_borrow_checking
&lt;&#x2F;span&gt;&lt;span&gt;time:   1.108; rss:  122MB -&amp;gt;   46MB (  -77MB)  LLVM_passes
&lt;&#x2F;span&gt;&lt;span&gt;time:   1.276; rss:   65MB -&amp;gt;   46MB (  -19MB)  link
&lt;&#x2F;span&gt;&lt;span&gt;time:   2.383; rss:   10MB -&amp;gt;   39MB (  +29MB)  total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Doing a &lt;code&gt;--release&lt;&#x2F;code&gt; build increases the timing a little, obviously:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;time:   3.427; rss:  118MB -&amp;gt;   46MB (  -72MB)  LLVM_passes
&lt;&#x2F;span&gt;&lt;span&gt;time:   3.631; rss:   54MB -&amp;gt;   46MB (   -8MB)  link
&lt;&#x2F;span&gt;&lt;span&gt;time:   4.628; rss:   10MB -&amp;gt;   41MB (  +31MB)  total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Looking at the &lt;code&gt;cargo llvm-lines&lt;&#x2F;code&gt; output reveals that we have 4 copies of the same function, as expected:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;  Lines                Copies            Function name
&lt;&#x2F;span&gt;&lt;span&gt;  -----                ------            -------------
&lt;&#x2F;span&gt;&lt;span&gt;  98640                25                (TOTAL)
&lt;&#x2F;span&gt;&lt;span&gt;  98292 (99.6%, 99.6%)  4 (16.0%, 16.0%) guards_closures::takes_closure
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;LLVM is rightly slow, as it has a ton to compile. Can we do better on that front, by moving all that code to the
scope guard pattern, at the same time making it compatible with async code?&lt;&#x2F;p&gt;
&lt;p&gt;Lets see. First up, we need our guard type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Guard&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Guard &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;make_slow!&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Drop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Guard &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;drop&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;make_slow!&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is no generic code here anymore, which is exactly what we wanted to achieve. We can then manually create some
scopes, create the guard type and have its destructor automatically called at the end:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _guard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Guard&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;print!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _guard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Guard&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;print!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _guard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Guard&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;print!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _guard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Guard&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;print!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;How does it do in terms of compile times and &lt;code&gt;cargo llvm-lines&lt;&#x2F;code&gt; now?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;time:   0.288; rss:   50MB -&amp;gt;   82MB (  +32MB)  MIR_borrow_checking
&lt;&#x2F;span&gt;&lt;span&gt;time:   0.072; rss:   95MB -&amp;gt;   43MB (  -52MB)  LLVM_passes
&lt;&#x2F;span&gt;&lt;span&gt;time:   0.246; rss:   62MB -&amp;gt;   44MB (  -18MB)  link
&lt;&#x2F;span&gt;&lt;span&gt;time:   1.069; rss:   10MB -&amp;gt;   37MB (  +28MB)  total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The MIR borrow checking time might as well just be some noise, but the LLVM time is &lt;em&gt;a lot&lt;&#x2F;em&gt; faster.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the same for a &lt;code&gt;--release&lt;&#x2F;code&gt; build:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;time:   1.066; rss:   93MB -&amp;gt;   45MB (  -48MB)  LLVM_passes
&lt;&#x2F;span&gt;&lt;span&gt;time:   1.272; rss:   44MB -&amp;gt;   45MB (   +1MB)  link
&lt;&#x2F;span&gt;&lt;span&gt;time:   2.028; rss:   10MB -&amp;gt;   40MB (  +30MB)  total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That is a bit more than twice as fast to compile than the closure-based version. Lets check the &lt;code&gt;llvm-lines&lt;&#x2F;code&gt; output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;Lines                Copies            Function name
&lt;&#x2F;span&gt;&lt;span&gt;  -----                ------            -------------
&lt;&#x2F;span&gt;&lt;span&gt;  24917                20                (TOTAL)
&lt;&#x2F;span&gt;&lt;span&gt;  12280 (49.3%, 49.3%)  1 (5.0%,  5.0%)  &amp;lt;guards_guards::Guard as core::ops::drop::Drop&amp;gt;::drop
&lt;&#x2F;span&gt;&lt;span&gt;  12277 (49.3%, 98.6%)  1 (5.0%, 10.0%)  guards_guards::Guard::new
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As expected, we only have a single copy of the expensive constructor and destructor, and as expected about 4 times less
code to compile than before.&lt;&#x2F;p&gt;
&lt;p&gt;How does this affect the final binary size?&lt;&#x2F;p&gt;
&lt;p&gt;Looking at the Windows &lt;code&gt;.exe&lt;&#x2F;code&gt; (without the &lt;code&gt;.pdb&lt;&#x2F;code&gt;) I end up with the following matrix:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pattern&lt;&#x2F;th&gt;&lt;th&gt;Debug&lt;&#x2F;th&gt;&lt;th&gt;Release&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;closures&lt;&#x2F;td&gt;&lt;td&gt;630K&lt;&#x2F;td&gt;&lt;td&gt;247K&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;guards&lt;&#x2F;td&gt;&lt;td&gt;274K&lt;&#x2F;td&gt;&lt;td&gt;200K&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;That is a big difference indeed, both in compile times, and in the size of the compiled executable.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I will end todays exploration on that note. In the real world, I have an example of a way-too-generic crate that I
suspect to massively slow down compile times, and I would like to explore moving it to a scope-guard code style.&lt;&#x2F;p&gt;
&lt;p&gt;This blog post explores that idea in a “lab setting”. I do not yet know if the same improvements could be had with some
real world code as well. Not to mention that actually migrating the codebase might be a huge effort on its own.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A locking war story</title>
        <published>2023-05-16T00:00:00+00:00</published>
        <updated>2023-05-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/locking-war-story/"/>
        <id>https://swatinem.de/blog/locking-war-story/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/locking-war-story/">&lt;p&gt;An alternative clickbait title for this could be: “&lt;code&gt;Read + Seek&lt;&#x2F;code&gt; considered dangerous”.&lt;&#x2F;p&gt;
&lt;p&gt;This is a very interesting story, and one of the nice side effects of working on open source software is that I can
share all of the details of it publicly, along with a link to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;symbolic&#x2F;pull&#x2F;787&quot;&gt;PR&lt;&#x2F;a&gt;
that implemented the fix.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;tldr&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#tldr&quot; aria-label=&quot;Anchor link for: tldr&quot;&gt;#&lt;&#x2F;a&gt;
TLDR&lt;&#x2F;h1&gt;
&lt;p&gt;As the alternative clickbait title suggests, the core of the problem is that both &lt;code&gt;Read&lt;&#x2F;code&gt; and &lt;code&gt;Seek&lt;&#x2F;code&gt;, and the combination
of the two need a &lt;code&gt;&amp;amp;mut&lt;&#x2F;code&gt; reference to the reader to do any operations. So &lt;em&gt;read-only&lt;&#x2F;em&gt; access still requires an exclusive
reference. (Aside: This might be a good example why people have advocated to call &lt;code&gt;&amp;amp;mut&lt;&#x2F;code&gt; &lt;em&gt;exclusive&lt;&#x2F;em&gt; access.)&lt;&#x2F;p&gt;
&lt;p&gt;In my example, I was dealing with a &lt;code&gt;zip::ZipArchive&lt;&#x2F;code&gt;, which wraps a &lt;code&gt;Read + Seek&lt;&#x2F;code&gt;, and needs &lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt; access to read
a file from the archive. So sharing this archive across multiple tasks that want to read files from it leads to lock
contention as only a single task can read files from the archive at a time.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;background&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#background&quot; aria-label=&quot;Anchor link for: background&quot;&gt;#&lt;&#x2F;a&gt;
Background&lt;&#x2F;h1&gt;
&lt;p&gt;Surprisingly, this story starts with JavaScript. Or more precisely, with processing JavaScript stack traces using SourceMaps.
My team recently migrated all of the SourceMap processing done at Sentry from Python code that is supported by some Rust
binding, to a pure Rust service that is still driven by Python.&lt;&#x2F;p&gt;
&lt;p&gt;JavaScript customers upload those SourceMaps, along with minified JS files and other files as a special &lt;code&gt;zip&lt;&#x2F;code&gt; file that
we call a &lt;code&gt;SourceBundle&lt;&#x2F;code&gt;. This archive also contains a manifest, which has a bit of metadata for each file. Things like
the reference to the corresponding SourceMap for files that do not have an embedded &lt;code&gt;sourceMappingURL&lt;&#x2F;code&gt; reference. And
also most importantly, this metadata includes a &lt;code&gt;url&lt;&#x2F;code&gt; for that file, because SourceMap processing sadly still relies on
very brittle URLs. I touched on those problems in my previous post around &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;file-identity&#x2F;&quot;&gt;file identity&lt;&#x2F;a&gt;,
so I won’t go into more details.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;being-too-smart-for-our-own-good&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#being-too-smart-for-our-own-good&quot; aria-label=&quot;Anchor link for: being-too-smart-for-our-own-good&quot;&gt;#&lt;&#x2F;a&gt;
Being too Smart for our own Good&lt;&#x2F;h1&gt;
&lt;p&gt;The primary driver of moving more parts of the processing to Rust was to be able to better reuse repeated computations.
Our SourceMap processing infers function &#x2F; scope names by parsing the minified source, and it builds a fast lookup
index that is meant to be reused. Although the python code never did that. The stateful Rust service however has a variety
of in-memory and on-disk caches to avoid expensive computations for each event that needs to be processed.&lt;&#x2F;p&gt;
&lt;p&gt;One of the more expensive computations that I wanted to avoid was opening up the zip archive and parsing the manifest
contained within. We then ended up with a parsed manifest &#x2F; index, and an open &lt;code&gt;zip::ZipArchive&lt;&#x2F;code&gt;, more precisely a
&lt;code&gt;zip::ZipArchive&amp;lt;std::io::Cursor&amp;lt;&amp;amp;&#x27;data [u8]&amp;gt;&amp;gt;&lt;&#x2F;code&gt;. So we already have a memory-mapped &lt;code&gt;&amp;amp;[u8]&lt;&#x2F;code&gt; that gives us trivial
random access. But we need to wrap it in a &lt;code&gt;Cursor&lt;&#x2F;code&gt; to make it into a &lt;code&gt;Read + Seek&lt;&#x2F;code&gt;. As the &lt;code&gt;ZipArchive&lt;&#x2F;code&gt; needs &lt;code&gt;&amp;amp;mut&lt;&#x2F;code&gt;
access, we also had to wrap it in a &lt;code&gt;Mutex&lt;&#x2F;code&gt;. And this &lt;code&gt;Mutex&lt;&#x2F;code&gt; was exactly the thing that was contended in this case.&lt;&#x2F;p&gt;
&lt;p&gt;Trying to avoid repeatedly opening and parsing the manifest by keeping it in-memory and sharing it across computations
combined with that &lt;code&gt;Mutex&lt;&#x2F;code&gt; meant that all the events that needed access to a specific zip file were all contending on
that mutex. Feeding more events to a single server even made things worse, and caused trouble for the whole pipeline.&lt;&#x2F;p&gt;
&lt;p&gt;The problem with &lt;code&gt;Read + Seek&lt;&#x2F;code&gt; is that it indeed needs to maintain some internal mutable state, namely the
cursor position. If it were not synchronized using a &lt;code&gt;&amp;amp;mut&lt;&#x2F;code&gt; and a &lt;code&gt;Mutex&lt;&#x2F;code&gt;, it would mean that concurrent readers could
potentially read garbage, or worse. So thank you Rust for the strict guarantees that avoided that :-)&lt;&#x2F;p&gt;
&lt;p&gt;The solution in the end was to give each reader its own (still &lt;code&gt;Mutex&lt;&#x2F;code&gt;-locked) copy of the &lt;code&gt;ZipArchive&lt;&#x2F;code&gt;. According to
its docs, it is a cheap to clone if its generic reader is, which is the case for &lt;code&gt;Cursor&lt;&#x2F;code&gt;. Rolling out this fix indeed
fixed the contention problem for us, and our production systems are now much happier. Although they are still doing way
too much unzipping, but later on that.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;can-we-do-better&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#can-we-do-better&quot; aria-label=&quot;Anchor link for: can-we-do-better&quot;&gt;#&lt;&#x2F;a&gt;
Can we do better?&lt;&#x2F;h1&gt;
&lt;p&gt;The mutable state fundamentally comes from usage of &lt;code&gt;Read&lt;&#x2F;code&gt; which implicitly updates a cursor position, and &lt;code&gt;Seek&lt;&#x2F;code&gt; which
does so explicitly. And this is a reasonable choice for &lt;code&gt;ZipArchive&lt;&#x2F;code&gt;, as I believe if is most frequently used in
combination with a &lt;code&gt;std::io::BufReader&amp;lt;std::fs::File&amp;gt;&lt;&#x2F;code&gt;. However, I believe there are a few crates out there that
abstract over the reader as well. For example, both &lt;code&gt;object::ReadRef&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;object::ReadCache&lt;&#x2F;code&gt; and &lt;code&gt;scroll::Pread&lt;&#x2F;code&gt; work
with shared references, and require an explicit &lt;code&gt;offset&lt;&#x2F;code&gt; for each of the read methods, instead of maintaining the offset
internally via &lt;code&gt;Seek&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In our case we have a memory-mapped &lt;code&gt;&amp;amp;[u8]&lt;&#x2F;code&gt;, and reading from that is a trivial memory access. I cannot overstate how
much of a productivity and sanity boost &lt;code&gt;mmap&lt;&#x2F;code&gt; is. Sure, one might argue that &lt;code&gt;Read&lt;&#x2F;code&gt; gives more explicit control, and
it is very obvious and explicit when a syscall and context switch to the kernel happens, whereas with &lt;code&gt;mmap&lt;&#x2F;code&gt; that is
done implicitly via page faults. Maybe in some very extreme situations, deep control over this might be beneficial, but
in the general case, again, I cannot overstate how awesome &lt;code&gt;mmap&lt;&#x2F;code&gt; is.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;a-rant-on-zip&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#a-rant-on-zip&quot; aria-label=&quot;Anchor link for: a-rant-on-zip&quot;&gt;#&lt;&#x2F;a&gt;
A rant on zip&lt;&#x2F;h1&gt;
&lt;p&gt;While the lock contention issue, and the &lt;em&gt;read-only, but not really&lt;&#x2F;em&gt; nature of &lt;code&gt;ZipArchive&lt;&#x2F;code&gt; was a pain, but one that
was easily fixable, there is another issue looming here. Why are we using zip archives in the first place? The fact that
lock contention became a problem highlights that we are using these archives a lot. And while we have various caches all
over the place, one thing that is not cached right now is access to the files within that zip archive.&lt;&#x2F;p&gt;
&lt;p&gt;So we are really using the same files from within the same archives all over again. And we are decompressing them over
and over again. I haven’t measured this in production yet, but running this through a local stress test highlights the
fact that our processing is now mainly dominated by decompression.&lt;&#x2F;p&gt;
&lt;p&gt;Zip archives are great and they serve a specific purpose, but their main purpose is long-term &lt;em&gt;archival&lt;&#x2F;em&gt; as the name
suggests, not frequent random access. There might be a possibility to still use zip archives, but using a compression
algorithm that is faster for decompression, but that is a story for a different time. Along with the discussion to
maybe use something else entirely.&lt;&#x2F;p&gt;
&lt;p&gt;All in all, I am fairly happy with the fact that decompression seems to now dominate the performance, as it means that
the rest of the architecture at least is doing a really great job at being high-performance :-)&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Files need Identity</title>
        <published>2023-03-29T00:00:00+00:00</published>
        <updated>2023-03-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/file-identity/"/>
        <id>https://swatinem.de/blog/file-identity/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/file-identity/">&lt;p&gt;Interestingly, the same theme has come up multiple times recently within Sentry.
I myself recently wrote a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;rfcs&#x2F;pull&#x2F;81&quot;&gt;Sentry RFC&lt;&#x2F;a&gt; about SourceMap &lt;code&gt;DebugId&lt;&#x2F;code&gt;s.
And at the same time, I was supporting and advising other teams working on Java Source Context, and Flutter Obfuscation.&lt;&#x2F;p&gt;
&lt;p&gt;All these different initiatives have the following in common: You have multiple build artifacts for a single application
build. These artifacts together form a tight unit.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A minified JS file and its corresponding SourceMap allow you to resolve the original source location.&lt;&#x2F;li&gt;
&lt;li&gt;A Java App and its corresponding SourceBundle allow you to apply Source Context.&lt;&#x2F;li&gt;
&lt;li&gt;A Flutter App and its corresponding Obfuscation Map allow you to de-obfuscate identifiers.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Whereas &lt;code&gt;SourceBundle&lt;&#x2F;code&gt;s are a Sentry invention, the other two use-cases are being implemented by external tools.
And they lack a &lt;em&gt;strong&lt;&#x2F;em&gt; association of the different artifacts &#x2F; assets that form one final build output.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;code&gt;SourceMap&lt;&#x2F;code&gt; is just some JSON, so is the Flutter obfuscation mapping, though a little different which makes it harder
to deal with, more in a minute.&lt;&#x2F;p&gt;
&lt;p&gt;We need the obfuscation mapping to be able to de-obfuscate, so far so good. But with a few different versions of apps
being installed and used by end users, how do we know &lt;em&gt;which&lt;&#x2F;em&gt; obfuscation mapping we need?&lt;&#x2F;p&gt;
&lt;p&gt;That is where file &lt;em&gt;identity&lt;&#x2F;em&gt; comes in. Each group of tightly coupled build artifacts needs to be uniquely identified
&lt;em&gt;somehow&lt;&#x2F;em&gt;, so we are able to find the matching file we need, no matter if that is a SourceMap, a SourceBundle, or an
obfuscation mapping.&lt;&#x2F;p&gt;
&lt;p&gt;To achieve that, each artifact needs to have a &lt;em&gt;unique identifier&lt;&#x2F;em&gt;. It is also very beneficial if that unique identifier
is embedded in that file, so it becomes &lt;em&gt;self identifying&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is the problem with the Flutter obfuscation mapping. It is a JSON file, but with an array at its root. There is no
way to extend that file with another field at the root that includes this identifier. Well, too bad I guess :-(&lt;&#x2F;p&gt;
&lt;p&gt;Lets say we have not only two tightly coupled build artifacts but more. To stick with the Flutter example, it might be
the case that a Flutter-web build outputs both a minified JS file, a corresponding SourceMap, &lt;em&gt;and&lt;&#x2F;em&gt; an obfuscation mapping.&lt;&#x2F;p&gt;
&lt;p&gt;Two of those files are just JSON. Our proposal for SourceMap &lt;code&gt;DebugId&lt;&#x2F;code&gt;s I linked above proposes to add a new field to
the SourceMap with its unique identifier. It is pretty much impossible to extend the obfuscation mapping however.
But lets ignore that problem for now. In the end we have two JSON files. How do we tell them apart then?&lt;&#x2F;p&gt;
&lt;p&gt;Each file needs to have some form of marker in it that tells us &lt;em&gt;what kind&lt;&#x2F;em&gt; of file it is. For JSON files, the JSON Schema
&lt;code&gt;&quot;$schema&quot;&lt;&#x2F;code&gt; field naturally presents itself. Authoring a full JSON Schema might not be everyones cup of tea, and that
is not the point here. The point is that this unique &lt;code&gt;&quot;$schema&quot;&lt;&#x2F;code&gt; field tells us &lt;em&gt;what kind&lt;&#x2F;em&gt; of file we are looking at.
By having such a field, the file becomes &lt;em&gt;self describing&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A SourceMap just happens to be a SourceMap if it has a &lt;code&gt;&quot;version&quot;: 3&lt;&#x2F;code&gt; field, and a &lt;code&gt;&quot;mappings&quot;&lt;&#x2F;code&gt; field. It might be
very unlikely, but any random JSON file could potentially have these fields and then be wrongly interpreted as a SourceMap.&lt;&#x2F;p&gt;
&lt;p&gt;To summarize this section, every file should be &lt;em&gt;self identifying&lt;&#x2F;em&gt;, by embedding some kind of unique identifier, and
it should also be &lt;em&gt;self describing&lt;&#x2F;em&gt; by embedding some kind of marker that describes the kind (or format) of the file.&lt;&#x2F;p&gt;
&lt;p&gt;With these two pieces of information, we can upload any file to any dumb storage service and look it up.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;But how do we know which file to look up? Let us come back to the example from before. Lets assume we have an obfuscated
Flutter app running on some customer device, and it produces an obfuscated stack trace that is uploaded to Sentry or
any other service. How will Sentry know which obfuscation mapping to use?&lt;&#x2F;p&gt;
&lt;p&gt;To be able to do so, the report that has the obfuscated stack trace also has to provide the unique identifier of the
obfuscation mapping. We can then look up the mapping using that unique identifier and correctly deobfuscate the stack trace.&lt;&#x2F;p&gt;
&lt;p&gt;So we need a way to get access to that unique identifier &lt;em&gt;at runtime&lt;&#x2F;em&gt;. Surprisingly, this is the most complex part of
our Flutter example, as well as the most controversial thing about our SourceMap proposal. Ideally, the &lt;em&gt;Platform&lt;&#x2F;em&gt;
(whatever it is) offers a programmatic API that provides this unique identifier.&lt;&#x2F;p&gt;
&lt;p&gt;It is totally possible to have a different unique identifier for each accompanying artifact, for example a different
identifier for an associated SourceMap, and obfuscation mapping. Though I strongly advise to have one unique identifier
that is shared among these tightly coupled artifacts.&lt;&#x2F;p&gt;
&lt;p&gt;To summarize, we have some &lt;em&gt;self identifying&lt;&#x2F;em&gt; and &lt;em&gt;self describing&lt;&#x2F;em&gt; artifacts that we will just stash away on some dumb
storage service, and we need a way &lt;em&gt;at runtime&lt;&#x2F;em&gt; to query that unique identifier.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;native-inspiration&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#native-inspiration&quot; aria-label=&quot;Anchor link for: native-inspiration&quot;&gt;#&lt;&#x2F;a&gt;
Native Inspiration&lt;&#x2F;h1&gt;
&lt;p&gt;The native ecosystem has most of this figured out to various degrees, lets take a look.&lt;&#x2F;p&gt;
&lt;p&gt;To start this off, binary file formats are usually &lt;em&gt;self describing&lt;&#x2F;em&gt; by starting off with a magic-byte sequence that
identifies the file format. Our native platforms each have their own executable formats for example.&lt;&#x2F;p&gt;
&lt;p&gt;On &lt;strong&gt;macOS&lt;&#x2F;strong&gt;, we have Mach-O files which pretty consistently have a unique identifier called &lt;code&gt;LC_UUID&lt;&#x2F;code&gt; (for &lt;em&gt;load command&lt;&#x2F;em&gt;).
The executables are also commonly split into a main executable, and an associated debug file called &lt;code&gt;dSYM&lt;&#x2F;code&gt;. Both share
the same unique identifier. However, both have the Mach-O format.&lt;&#x2F;p&gt;
&lt;p&gt;As this first example shows, the file &lt;em&gt;format&lt;&#x2F;em&gt; on its own is not enough to identify the file &lt;em&gt;kind&lt;&#x2F;em&gt; &#x2F; &lt;em&gt;purpose&lt;&#x2F;em&gt;. However
by looking at the presence of various sections in that file, one can quite confidently say if it is an executable, or
the corresponding debug file.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Linux&lt;&#x2F;strong&gt; has &lt;code&gt;ELF&lt;&#x2F;code&gt; (executable and linker format) files. These files can have a unique identifier called &lt;code&gt;NT_GNU_BUILD_ID&lt;&#x2F;code&gt;
(&lt;code&gt;NT&lt;&#x2F;code&gt; for &lt;em&gt;note&lt;&#x2F;em&gt;), though it is sadly frequently missing. The executables are not split by default as they are produced
by build tools, but developers frequently split them apart manually. Again, the two files have the same file format,
but it is possible to tell their &lt;em&gt;purpose&lt;&#x2F;em&gt; apart by looking at the various sections. When splitting those files apart,
both retain the same unique identifier.&lt;&#x2F;p&gt;
&lt;p&gt;The situation on &lt;strong&gt;Windows&lt;&#x2F;strong&gt; is slightly different. An executable in &lt;code&gt;PE&lt;&#x2F;code&gt; (portable executable) format has its own
identifying which is the combination of the &lt;code&gt;Timestamp&lt;&#x2F;code&gt; and &lt;code&gt;SizeOfImage&lt;&#x2F;code&gt; header values. This can hardly be called
&lt;em&gt;unique&lt;&#x2F;em&gt; though. This file can then reference a &lt;code&gt;PDB&lt;&#x2F;code&gt; (program database) file via a &lt;code&gt;DebugDirectoryEntry&lt;&#x2F;code&gt; which contains
the unique identifier of the &lt;code&gt;PDB&lt;&#x2F;code&gt; file. One thing here that tools frequently get wrong is that one executable can have
multiple &lt;code&gt;DebugDirectoryEntry&lt;&#x2F;code&gt; entries, referencing more than one debug files. I wrote about that previously in a post
titled &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;format-ossification&#x2F;&quot;&gt;Format Ossification&lt;&#x2F;a&gt;, because most tools got so used to only ever
seeing zero or one &lt;code&gt;DebugDirectoryEntry&lt;&#x2F;code&gt;s, the fact that there can be in fact more than one got completely lost.&lt;&#x2F;p&gt;
&lt;p&gt;In summary, the native formats are pretty good at &lt;em&gt;self identifying&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;symbol-lookup&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#symbol-lookup&quot; aria-label=&quot;Anchor link for: symbol-lookup&quot;&gt;#&lt;&#x2F;a&gt;
Symbol Lookup&lt;&#x2F;h2&gt;
&lt;p&gt;One thing I mentioned before is being able to easily find and download these debug files from any dumb storage service.
The native ecosystem offers mainly two possibilities here.&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;strong&gt;Linux&lt;&#x2F;strong&gt; ecosystem, we have &lt;code&gt;debuginfod&lt;&#x2F;code&gt; which defines a simple &lt;a href=&quot;https:&#x2F;&#x2F;www.mankier.com&#x2F;8&#x2F;debuginfod#Webapi&quot;&gt;lookup scheme&lt;&#x2F;a&gt;.
One can simply download the &lt;code&gt;&#x2F;buildid&#x2F;{BUILDID}&#x2F;debuginfo&lt;&#x2F;code&gt; file and get the debuginfo for a uniquely identified executable.
There is public &lt;code&gt;debuginfod&lt;&#x2F;code&gt; servers for every major Linux distribution as well.&lt;&#x2F;p&gt;
&lt;p&gt;Then there is the &lt;code&gt;symstore&lt;&#x2F;code&gt; Server and accompanying &lt;code&gt;SSQP&lt;&#x2F;code&gt; (simple symbol query protocol), which is primarily used for
the &lt;strong&gt;Windows&lt;&#x2F;strong&gt; ecosystem, but does support other ecosystems as well.
The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dotnet&#x2F;symstore&#x2F;blob&#x2F;main&#x2F;docs&#x2F;specs&#x2F;SSQP_Key_Conventions.md#key-formats&quot;&gt;lookup scheme&lt;&#x2F;a&gt; has
support for a ton of formats, including lookup for &lt;code&gt;ELF&lt;&#x2F;code&gt; and Mach-O files using their corresponding unique identifiers.&lt;&#x2F;p&gt;
&lt;p&gt;One problem with &lt;code&gt;symstore&lt;&#x2F;code&gt; though becomes obvious looking at the scheme for &lt;code&gt;PE&lt;&#x2F;code&gt; files: &lt;code&gt;&amp;lt;filename&amp;gt;&#x2F;&amp;lt;Timestamp&amp;gt;&amp;lt;SizeOfImage&amp;gt;&#x2F;&amp;lt;filename&amp;gt;&lt;&#x2F;code&gt;
As I mentioned, the &lt;code&gt;Timestamp&lt;&#x2F;code&gt; and &lt;code&gt;SizeOfImage&lt;&#x2F;code&gt; combination might not be unique enough. So just combine it with the
filename, problem solved, right? Well this creates new problems all on its own.
For example Electron hosts its own &lt;a href=&quot;https:&#x2F;&#x2F;www.electronjs.org&#x2F;docs&#x2F;latest&#x2F;development&#x2F;setting-up-symbol-server&#x2F;&quot;&gt;symbol server&lt;&#x2F;a&gt;.
But what happens if you ship an electron app and rename the main &lt;code&gt;electron.exe&lt;&#x2F;code&gt; file? Well too bad, you can’t find
that symbol anymore. This is indeed a real pain for Sentry customers.&lt;&#x2F;p&gt;
&lt;p&gt;For &lt;strong&gt;macOS&lt;&#x2F;strong&gt;, the situation is pure sadness. Apple does not host any public symbol server, and the licensing around
these things is also unclear. Sentry goes through great pain to maintain its own internal symbol server for Apple symbols,
but it is a frequent source of problems, with a brittle pipeline for scraping the symbols, and frequent problems with
symbols missing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;programmatic-api&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#programmatic-api&quot; aria-label=&quot;Anchor link for: programmatic-api&quot;&gt;#&lt;&#x2F;a&gt;
Programmatic API&lt;&#x2F;h2&gt;
&lt;p&gt;This is another source of sadness. None of the native platforms have builtin platform support to get at these unique
identifiers. Also getting at the list of all the loaded libraries is a huge pain on some platforms.&lt;&#x2F;p&gt;
&lt;p&gt;For each platforms, getting at the unique identifiers involves manually reading the platform native file format headers
and chasing references around, which can be unsafe as it involves a lot of pointer arithmetic.
The problem with these file formats is also that they are extremely badly documented. I wonder how it is possible that
they are so well understood, although the &lt;code&gt;DebugDirectoryEntry&lt;&#x2F;code&gt; situation makes me doubtful.&lt;&#x2F;p&gt;
&lt;p&gt;The formats and the structures you have to read are not documented &lt;em&gt;publicly on the internet&lt;&#x2F;em&gt;. They are defined in some
platform specific headers that are primarily only available on that platform. For example on Windows, the &lt;code&gt;PE&lt;&#x2F;code&gt; definitions
are part of the Windows SDK. For macOS, I believe the Mach-O headers are provided by Xcode.
One critical bit to get the unique identifier of a &lt;code&gt;PDB&lt;&#x2F;code&gt; file is also famously missing from the Windows SDK headers.
The &lt;code&gt;CodeView&lt;&#x2F;code&gt; record is not defined &lt;em&gt;anywhere&lt;&#x2F;em&gt;. All the tools just copy-paste the definition into their own code from
&lt;em&gt;somewhere&lt;&#x2F;em&gt;.
The &lt;code&gt;ELF&lt;&#x2F;code&gt; format however is reasonably well specified and documented in various man pages, though those are far from
easily usable.&lt;&#x2F;p&gt;
&lt;p&gt;And even if we have a couple of header definitions that we won’t find on the public web, it is C headers. Can someone
tell me again how many bits a C &lt;code&gt;long&lt;&#x2F;code&gt; has? No? Thought so.&lt;&#x2F;p&gt;
&lt;p&gt;Well, I’m not going on a ranting spree about how un-portable C is. The point I’m trying to make is that reading the
unique identifiers of files at runtime is a huge pain and involves unsafe code. It would be so much nicer if we had
built-in platform APIs that let us easily enumerate all the loaded libraries, and easily get their unique identifiers.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;in-summary&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#in-summary&quot; aria-label=&quot;Anchor link for: in-summary&quot;&gt;#&lt;&#x2F;a&gt;
In summary&lt;&#x2F;h1&gt;
&lt;p&gt;And with that I am at the end of todays post. What I would love to have from a tool developers perspective is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Self identifying&lt;&#x2F;em&gt; files with an embedded unique identifier.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Self describing&lt;&#x2F;em&gt; files that describe their type &#x2F; purpose.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Programmatic API&lt;&#x2F;em&gt; to access a files unique identifier at runtime, and also enumerate all the files currently loaded.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;rfcs&#x2F;pull&#x2F;81&quot;&gt;SourceMap RFC&lt;&#x2F;a&gt; I mentioned in the beginning tries to solve two of these
problems, and I would love to get feedback on it.&lt;&#x2F;p&gt;
&lt;p&gt;One thing from the RFC that still needs discussion is &lt;em&gt;how&lt;&#x2F;em&gt; to generate these unique identifiers. Our current draft
implementation generates a new random UUID each time, which I argue is a bad idea.&lt;&#x2F;p&gt;
&lt;p&gt;I would like these identifiers, and the files themselves to be bit-for-bit deterministic &#x2F; reproducible given the same
inputs.
The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dotnet&#x2F;runtime&#x2F;blob&#x2F;main&#x2F;docs&#x2F;design&#x2F;specs&#x2F;PE-COFF.md&quot;&gt;Portable PDB&lt;&#x2F;a&gt; specification mentions
explicitly how to create the unique identifier:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;the checksum is calculated by hashing the entire content of the PDB file with the PDB ID set to 0 (20 zeroed bytes).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So there is precedent in other ecosystems for reproducible and deterministic unique identifiers.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The size of Rust Futures</title>
        <published>2023-01-20T00:00:00+00:00</published>
        <updated>2023-01-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/future-size/"/>
        <id>https://swatinem.de/blog/future-size/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/future-size/">&lt;p&gt;I have recently discovered that Rust Futures, or rather, &lt;code&gt;async fn&lt;&#x2F;code&gt; calls can
lead to surprising performance problems if they are nested too deeply.&lt;&#x2F;p&gt;
&lt;p&gt;I learned that the hard way by triggering a stack overflow in a
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;symbolicator&#x2F;pull&#x2F;979&quot;&gt;PR to &lt;code&gt;symbolicator&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
I then tracked that down to unreasonably huge (as measured by &lt;code&gt;mem::size_of_val&lt;&#x2F;code&gt;)
futures. The problem was also being exacerbated by the deeply nested async fn
calls in the &lt;code&gt;moka&lt;&#x2F;code&gt; crate that I have &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;moka-rs&#x2F;moka&#x2F;issues&#x2F;212&quot;&gt;reported here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It is not my intention to bash that specific crate here, as I absolutely love
its intuitive APIs, and would love to use it even more in the future.
However the crate does make some wrong assumptions about how async Rust code
works that I am sure not a lot of people are aware of, and which can cause
problems.&lt;&#x2F;p&gt;
&lt;p&gt;Apart from highlighting the source of the problem in great depth, I also want to
propose some workarounds for this specific issue.&lt;&#x2F;p&gt;
&lt;p&gt;The problem I will highlight is also only present in todays Rust (nightly 1.68).
It is perfectly possible that the compiler will optimize these things in the future.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So, lets dive in, and consider this piece of code here:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;(())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; T) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; T {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;(t)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; T) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; T {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;(t)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; T) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; T {
&lt;&#x2F;span&gt;&lt;span&gt;    t
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have an outer future, which threads a generic argument through a nested call
chain.&lt;&#x2F;p&gt;
&lt;p&gt;As the topic of this blog post is &lt;em&gt;size&lt;&#x2F;em&gt;, lets see how large this future is.
Instead of calling &lt;code&gt;mem::size_of_val&lt;&#x2F;code&gt; at runtime, I will use the nightly-only
&lt;code&gt;-Zprint-type-sizes&lt;&#x2F;code&gt; flag and show you an abbreviated output of that:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;type: `[async fn test}`: 4 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    discriminant: 1 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    variant `Unresumed`: 0 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    variant `Suspend0`: 3 bytes
&lt;&#x2F;span&gt;&lt;span&gt;        field `.__awaitee`: 3 bytes, offset: 0 bytes
&lt;&#x2F;span&gt;&lt;span&gt;type: `[async fn a]`: 3 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    discriminant: 1 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    variant `Unresumed`: 0 bytes
&lt;&#x2F;span&gt;&lt;span&gt;        field `.t`: 0 bytes, offset: 0 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    variant `Suspend0`: 2 bytes
&lt;&#x2F;span&gt;&lt;span&gt;        field `.t`: 0 bytes, offset: 0 bytes
&lt;&#x2F;span&gt;&lt;span&gt;        field `.__awaitee`: 2 bytes
&lt;&#x2F;span&gt;&lt;span&gt;type: `[async fn b]`: 2 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    discriminant: 1 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    variant `Unresumed`: 0 bytes
&lt;&#x2F;span&gt;&lt;span&gt;        field `.t`: 0 bytes, offset: 0 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    variant `Suspend0`: 1 bytes
&lt;&#x2F;span&gt;&lt;span&gt;        field `.t`: 0 bytes, offset: 0 bytes
&lt;&#x2F;span&gt;&lt;span&gt;        field `.__awaitee`: 1 bytes
&lt;&#x2F;span&gt;&lt;span&gt;type: `[async fn c]`: 1 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    discriminant: 1 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    variant `Unresumed`: 0 bytes
&lt;&#x2F;span&gt;&lt;span&gt;        field `.t`: 0 bytes, offset: 0 bytes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this first example, our &lt;code&gt;T&lt;&#x2F;code&gt; is zero-sized. But still our outer future has a
&lt;code&gt;4 bytes&lt;&#x2F;code&gt; size. The reason is that each future is internally a state machine
enum with a discriminant. That discriminant in our case is &lt;code&gt;1 bytes&lt;&#x2F;code&gt; each. Apart from
that, all our types have an alignment of &lt;code&gt;1 bytes&lt;&#x2F;code&gt; which is included in the normal
output of &lt;code&gt;-Zprint-type-sizes&lt;&#x2F;code&gt; but I have removed that for brevity.&lt;&#x2F;p&gt;
&lt;p&gt;So far so good, what happens when we put a larger &lt;code&gt;T&lt;&#x2F;code&gt; there? How about &lt;code&gt;[0u8, 1024]&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;type: `[async fn test]`: 3076 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    variant `Suspend0`: 3075 bytes
&lt;&#x2F;span&gt;&lt;span&gt;        field `.__awaitee`: 3075 bytes, offset: 0 bytes
&lt;&#x2F;span&gt;&lt;span&gt;type: `[async fn a]`: 3075 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    variant `Suspend0`: 3074 bytes
&lt;&#x2F;span&gt;&lt;span&gt;        field `.t`: 1024 bytes, offset: 0 bytes
&lt;&#x2F;span&gt;&lt;span&gt;        field `.__awaitee`: 2050 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    variant `Unresumed`: 1024 bytes
&lt;&#x2F;span&gt;&lt;span&gt;        field `.t`: 1024 bytes, offset: 0 bytes
&lt;&#x2F;span&gt;&lt;span&gt;type: `[async fn b]`: 2050 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    variant `Suspend0`: 2049 bytes
&lt;&#x2F;span&gt;&lt;span&gt;        field `.t`: 1024 bytes, offset: 0 bytes
&lt;&#x2F;span&gt;&lt;span&gt;        field `.__awaitee`: 1025 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    variant `Unresumed`: 1024 bytes
&lt;&#x2F;span&gt;&lt;span&gt;        field `.t`: 1024 bytes, offset: 0 bytes
&lt;&#x2F;span&gt;&lt;span&gt;type: `[async fn c]`: 1025 bytes
&lt;&#x2F;span&gt;&lt;span&gt;    variant `Unresumed`: 1024 bytes
&lt;&#x2F;span&gt;&lt;span&gt;        field `.t`: 1024 bytes, offset: 0 bytes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I have removed the discriminants in this output.&lt;&#x2F;p&gt;
&lt;p&gt;What we see however is that each of the nested futures has some space reserved
for its own copy of &lt;code&gt;T&lt;&#x2F;code&gt; for the case when it is &lt;code&gt;Unresumed&lt;&#x2F;code&gt;. In the &lt;code&gt;Suspend0&lt;&#x2F;code&gt;
case, it has to hold onto the nested future it is polling, but it &lt;em&gt;also&lt;&#x2F;em&gt; retained
a copy of its own &lt;code&gt;T&lt;&#x2F;code&gt;. Why exactly is that?&lt;&#x2F;p&gt;
&lt;p&gt;I suspect it is because it has to &lt;em&gt;move&lt;&#x2F;em&gt; that &lt;code&gt;T&lt;&#x2F;code&gt; into the new future somehow.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that Rust futures are lazy by definition. Which mean calling an &lt;code&gt;async fn&lt;&#x2F;code&gt;
does nothing except create a new value type that you can move around, &lt;code&gt;Box&lt;&#x2F;code&gt; or
&lt;code&gt;Send&lt;&#x2F;code&gt; to other threads.&lt;&#x2F;p&gt;
&lt;p&gt;The data has to be copied around when calling the function &lt;code&gt;a&lt;&#x2F;code&gt;, no?&lt;&#x2F;p&gt;
&lt;p&gt;Lets look at a bit of generated assembly. I will use my trusty
&lt;code&gt;ready_or_diverge&lt;&#x2F;code&gt; function there to actually create and also poll the future.
I even had to annotate one of my futures with &lt;code&gt;#[inline(never)]&lt;&#x2F;code&gt;, because yes,
the Rust compiler is very smart indeed and can even
&lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;zero-cost-async&#x2F;&quot;&gt;make async futures disappear completely&lt;&#x2F;a&gt;
in some cases.&lt;&#x2F;p&gt;
&lt;p&gt;You can look at the full example in the &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;eqexr4jTK&quot;&gt;Compiler Explorer&lt;&#x2F;a&gt;,
but here is the relevant snippet:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;example::a:
&lt;&#x2F;span&gt;&lt;span&gt;        push    rbx
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rbx, rdi
&lt;&#x2F;span&gt;&lt;span&gt;        mov     edx, 1024
&lt;&#x2F;span&gt;&lt;span&gt;        call    qword ptr [rip + memcpy@GOTPCREL]
&lt;&#x2F;span&gt;&lt;span&gt;        mov     byte ptr [rbx + 3074], 0
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rax, rbx
&lt;&#x2F;span&gt;&lt;span&gt;        pop     rbx
&lt;&#x2F;span&gt;&lt;span&gt;        ret
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;example::poll_test:
&lt;&#x2F;span&gt;&lt;span&gt;        push    rbx
&lt;&#x2F;span&gt;&lt;span&gt;        mov     eax, 4128
&lt;&#x2F;span&gt;&lt;span&gt;        call    __rust_probestack
&lt;&#x2F;span&gt;&lt;span&gt;        sub     rsp, rax
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see that our &lt;code&gt;#[inline(never)]&lt;&#x2F;code&gt; fn &lt;code&gt;a&lt;&#x2F;code&gt; has a call to &lt;code&gt;memcpy&lt;&#x2F;code&gt;, so it is
copying our data around.
Though as I mentioned, the compiler is very good at optimizing things away.
Especially in my simplified testcase where I never actually return &lt;code&gt;Pending&lt;&#x2F;code&gt;,
and the compiler is smart enough to figure that out and optimize everything
away.&lt;&#x2F;p&gt;
&lt;p&gt;However, we also see that my &lt;code&gt;poll_test&lt;&#x2F;code&gt; function reserves &lt;code&gt;4128 bytes&lt;&#x2F;code&gt; on the
stack. That is indeed a local copy of my &lt;code&gt;1024 byte&lt;&#x2F;code&gt; buffer, the size of the
outer &lt;code&gt;test&lt;&#x2F;code&gt; future, &lt;code&gt;3076 bytes&lt;&#x2F;code&gt;, and then some.&lt;&#x2F;p&gt;
&lt;p&gt;This is my stack overflow right there. One thing to note here is also that
&lt;code&gt;__rust_probestack&lt;&#x2F;code&gt; checks for stack overflows explicitly and prints out a
helpful error message before aborting the program. Otherwise the stack overflow
would only manifest itself as a hard crash when trying to access out of bounds
memory. So thank you Rust for that :-)&lt;&#x2F;p&gt;
&lt;p&gt;If I add a &lt;code&gt;Box::pin&lt;&#x2F;code&gt; around the &lt;code&gt;test()&lt;&#x2F;code&gt; future I want to poll to completion,
the compiler still reserves &lt;code&gt;2080 bytes&lt;&#x2F;code&gt; of stack space, which is a little bit
more than twice my &lt;code&gt;1024 bytes&lt;&#x2F;code&gt; buffer. There is no call to &lt;code&gt;__rust_probestack&lt;&#x2F;code&gt;
in that case. Likely because there is some threshold at which the compiler
inserts that call (probably &lt;code&gt;4096 bytes&lt;&#x2F;code&gt;?).&lt;&#x2F;p&gt;
&lt;p&gt;That reservation goes away when I remove the &lt;code&gt;#[inline(never)]&lt;&#x2F;code&gt; annotation.
But remember, this is a very simple playground example in which the compiler
can figure out that my future is polled to completion and is immediately &lt;code&gt;Ready&lt;&#x2F;code&gt;.
I believe in real world examples, like the one I hit with my own real world code,
the compiler will have to fall back to a lot more &lt;code&gt;memcpy&lt;&#x2F;code&gt; and stack allocations.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Aside&lt;&#x2F;strong&gt;: One side-effect of &lt;code&gt;async fn&lt;&#x2F;code&gt; being actually two separate functions,
one creating the future, and one for its &lt;code&gt;poll&lt;&#x2F;code&gt; implementation is that annotations
like &lt;code&gt;#[inline]&lt;&#x2F;code&gt; currently apply to the outer &lt;em&gt;creates the future&lt;&#x2F;em&gt; function only.
There is an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;106765&quot;&gt;open issue&lt;&#x2F;a&gt; about
that, and I believe it should be fairly straight forward to make that annotation
apply to both functions in this case.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So what have we learned so far?&lt;&#x2F;p&gt;
&lt;p&gt;Rust &lt;code&gt;async fn&lt;&#x2F;code&gt; capture all of their arguments. And &lt;code&gt;capture&lt;&#x2F;code&gt; in this case
means copying them into a new value type that represents the underlying future.
Depending on compiler optimizations, that involves a lot of &lt;code&gt;memcpy&lt;&#x2F;code&gt;, and
possibly also huge stack allocations.&lt;&#x2F;p&gt;
&lt;p&gt;This especially hurts if you are passing huge arguments through multiple layers
of function calls. The caller has one copy of the argument inside its own
type, and it moves &#x2F; copies that argument into the callee, effectively doubling
the size of the argument type. With a deeply nested call chain, and large
arguments, this can quickly cause problems.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;em&gt;large argument&lt;&#x2F;em&gt; in some cases is an &lt;code&gt;impl Future&lt;&#x2F;code&gt; itself. So this can
easily become exponential.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;And what can we do about this?&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, I do not see a simple &lt;em&gt;one-size-fits-all&lt;&#x2F;em&gt; solution. There is
tradeoffs everywhere. Either performance, or code-style.&lt;&#x2F;p&gt;
&lt;p&gt;One obvious solution would be to &lt;code&gt;Box::pin&lt;&#x2F;code&gt; large futures. That is the solution
I went for to work around my own real world problem. That incurs a heap
allocation though which might have some runtime cost. This is a bit sad in my
case as I use it in combination with &lt;code&gt;moka&lt;&#x2F;code&gt;, which as an in-memory cache should
optimize my fast-path. And now I have have a heap allocation in &lt;em&gt;all&lt;&#x2F;em&gt; the cases.&lt;&#x2F;p&gt;
&lt;p&gt;Another solution would be to group multiple arguments into a single reference:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;before_caller&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;A, B&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; A, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; B) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;before_callee&lt;&#x2F;span&gt;&lt;span&gt;(a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; b)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;before_callee&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;A, B&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; A, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; B) {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;after_caller&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;A, B&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; A, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; B) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; b)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;after_callee&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;ab)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;after_callee&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;A, B&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_ab&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;)) {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This definitely does not look nice, but it reduces the type that needs to be
copied into the future to &lt;code&gt;8 bytes&lt;&#x2F;code&gt;, the size of a normal references.&lt;&#x2F;p&gt;
&lt;p&gt;But sometimes we want to move and consume things, how to handle those cases?
Well, you can use a &lt;code&gt;&amp;amp;mut Option&lt;&#x2F;code&gt; for that and just &lt;code&gt;.take().unwrap()&lt;&#x2F;code&gt;. It is
ugly, but works. However it also has a cost. Doing an &lt;code&gt;unwrap&lt;&#x2F;code&gt; has some runtime
cost, as well as generating a ton of panic messages.&lt;&#x2F;p&gt;
&lt;p&gt;And it leaves you open to developer error, as accidentally doing that twice
&lt;strong&gt;will&lt;&#x2F;strong&gt; panic. Using &lt;code&gt;if let Some(x) = opt.take()&lt;&#x2F;code&gt; is a panic-free version with
a different tradeoff: It can lead to a latent bug that you will never know about.
So in this case doing a &lt;code&gt;panic&lt;&#x2F;code&gt; is a good thing, as it reminds you of that bug.&lt;&#x2F;p&gt;
&lt;p&gt;If we are dealing with futures, we can also pass a &lt;code&gt;Pin&amp;lt;&amp;amp;mut impl Future&amp;gt;&lt;&#x2F;code&gt; when
we pin the relevant future in the outermost callee. Again, not very nice, and
it also makes you vulnerable to polling that future again after it completed,
which will &lt;code&gt;panic&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Last but not least, we can combine all of these cases into a stateful wrapper
struct, and just use a &lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt;. Though this still leaves us with the
&lt;code&gt;Option&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;poll&lt;&#x2F;code&gt; problem, so not a bulletproof solution either.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Well, here we are. Another PSA about some hidden pitfalls with Rust &lt;code&gt;async fn&lt;&#x2F;code&gt;.
I hope by explaining all the details here, and even giving some suggestions
(though not perfect ones), you can avoid some of these problems in your own code.&lt;&#x2F;p&gt;
&lt;p&gt;Also, it is perfectly possible that the Rust compiler will get smarter over time
and could eventually completely remove this problem.
Using &lt;code&gt;.await&lt;&#x2F;code&gt; already makes sure that you consume the future. If the compiler
can also prove that the future does not cross the async fn boundary, it should
be free to not only inline the runtime code, but also the data of a callee into
the caller. But not yet. Time will tell.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After searching through the Rust issue tracker, there are multiple open issues
related to this.
A &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;69826&quot;&gt;tracking issue about memory usage&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;62958&quot;&gt;arguments being duplicated across yield points&lt;&#x2F;a&gt;,
and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;99504&quot;&gt;inefficient codegen, mostly &lt;code&gt;memcpy&lt;&#x2F;code&gt; related&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Following these issues through other interlinked issues and PRs indeed shows that
it is a well known issue, and there have been multiple experiments and proposals
so far for how to solve it piece by piece, but not all of those were successful.&lt;&#x2F;p&gt;
&lt;p&gt;All in all, this makes me quite confident that this problem can indeed be solved
over time. And maybe even my own work to remove &lt;code&gt;GenFuture&lt;&#x2F;code&gt;, and the
&lt;code&gt;identity_future&lt;&#x2F;code&gt; I had to leave in its place, can help with this effort as well.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A deep dive into DWARF line programs</title>
        <published>2023-01-04T00:00:00+00:00</published>
        <updated>2023-01-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/dwarf-lines/"/>
        <id>https://swatinem.de/blog/dwarf-lines/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/dwarf-lines/">&lt;p&gt;I started writing a series a blog posts explaining various debug formats, specifically
formats that allow you to recover the original source locations.&lt;&#x2F;p&gt;
&lt;p&gt;I wrote about &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;sourcemaps&#x2F;&quot;&gt;SourceMaps&lt;&#x2F;a&gt; and Portable PDB
&lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;sequence-points&#x2F;&quot;&gt;Sequence Points&lt;&#x2F;a&gt; already.&lt;&#x2F;p&gt;
&lt;p&gt;Now it is time to look at DWARF line programs.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;dwarf-the-specification&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#dwarf-the-specification&quot; aria-label=&quot;Anchor link for: dwarf-the-specification&quot;&gt;#&lt;&#x2F;a&gt;
DWARF, the specification&lt;&#x2F;h1&gt;
&lt;p&gt;The whole DWARF specification is available over at &lt;a href=&quot;https:&#x2F;&#x2F;dwarfstd.org&#x2F;&quot;&gt;dwarfstd.org&lt;&#x2F;a&gt;.
It is a gigantic PDF file with &amp;gt;450 pages (including indices, etc). Things are
reasonably well interlinked in there, though its still hard to navigate and
find specific things you are looking for.&lt;&#x2F;p&gt;
&lt;p&gt;DWARF also evolves quite slowly. Version 5, which is only now starting to be used
as the default version output by compilers is dated February 2017. That is almost…
checks date… 6 years.&lt;&#x2F;p&gt;
&lt;p&gt;Some compilers are a bit overeager to use newer features though, and some things
from DWARF v6 are already in use, even though the standard version has not been
&lt;em&gt;published&lt;&#x2F;em&gt; yet. In those cases one can only link to PRs from the compiler
implementation.&lt;&#x2F;p&gt;
&lt;p&gt;The DWARF information itself is scattered throughout different formats and tables.
They are included in different sections of an executable. The line program is
defined in the &lt;code&gt;.debug_line&lt;&#x2F;code&gt; section (or &lt;code&gt;__debug_line&lt;&#x2F;code&gt; on macOS),
and it can reference data in other sections as well.&lt;&#x2F;p&gt;
&lt;p&gt;As with other sections, and DWARF info in general, the &lt;code&gt;.debug_line&lt;&#x2F;code&gt; section
is just a concatenation of all the line programs of all the compilation units.&lt;&#x2F;p&gt;
&lt;p&gt;Either way, on to line programs. These are described in &lt;em&gt;Chapter 6.2&lt;&#x2F;em&gt; (of the V5 doc).
As with the previous formats I have described, the DWARF line program is also
encoded as a state machine. This state machine encodes at least the following information
(literally copied from the standard):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the source file name&lt;&#x2F;li&gt;
&lt;li&gt;the source line number&lt;&#x2F;li&gt;
&lt;li&gt;the source column number&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The format is also very extensible, and encodes more information than that.
In the current version, it also encodes information about statements, basic
blocks, which are a sequence of instructions that are branch targets and do not
branch away themselves. As well as a couple of flags to indicate end of prologue,
beginning of epilogue and end of sequence.&lt;&#x2F;p&gt;
&lt;p&gt;For the purpose of this blog post we are only interested in the end of sequences.
Sequences are contiguous runs of instructions. The state machine is
reset after a sequence and they mark the first instruction &lt;em&gt;after&lt;&#x2F;em&gt; the sequence.
I believe sequences more or less correspond to functions.
As the linker is free to reorder functions, and only the starting offset of a
function needs to be updated in that case.&lt;&#x2F;p&gt;
&lt;p&gt;After a header describing the configuration of the state machine, specifically
&lt;code&gt;opcode_base&lt;&#x2F;code&gt; and &lt;code&gt;line_base&lt;&#x2F;code&gt; which have an effect on the &lt;em&gt;special opcodes&lt;&#x2F;em&gt;
that are encoded in only one byte. How to decode and interpret these is explained
in chapter &lt;code&gt;6.2.5.1&lt;&#x2F;code&gt; of the DWARF v5 spec.
Other opcodes may take advantage of LEB128 encoded integers, so are variable
length.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;decoding-a-sequence&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#decoding-a-sequence&quot; aria-label=&quot;Anchor link for: decoding-a-sequence&quot;&gt;#&lt;&#x2F;a&gt;
Decoding a sequence&lt;&#x2F;h1&gt;
&lt;p&gt;As the whole &lt;code&gt;.debug_line&lt;&#x2F;code&gt; section is quite complex, and the header includes a
variable length list of directories and file names, I will simplify this to
only look at the state machine itself.&lt;&#x2F;p&gt;
&lt;p&gt;The header gives us at least the following information, which you can also get
when you dump the &lt;code&gt;.debug_line&lt;&#x2F;code&gt; contents via &lt;code&gt;llvm-dwarfdump --debug-line --verbose&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;line_base: -5&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;line_range: 14&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;opcode_base: 13&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;file_names[1]: &quot;main.c&quot;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The header also defines &lt;code&gt;min_inst_length: 1&lt;&#x2F;code&gt; and &lt;code&gt;max_ops_per_inst: 1&lt;&#x2F;code&gt;, which
simplifies the calculation of the &lt;em&gt;operation advance&lt;&#x2F;em&gt;, or the address increment.
In that case, the state machine does not need to keep track of an internal &lt;code&gt;op_index&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The leaves us with the following bytes to decode:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;blob: 00 09 02 50 3f 00 00 01 00 00 00 16 05 05 0a e5 59 75 02 06 00 01 01
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;We start out with { addr: 0x0, file: 1, line: 1, column: 0 }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;0x00: this is an extended opcode
&lt;&#x2F;span&gt;&lt;span&gt;0x09: the extended opcode spans 9 bytes
&lt;&#x2F;span&gt;&lt;span&gt;0x02: this is the extended opcode `DW_LNE_set_address`
&lt;&#x2F;span&gt;&lt;span&gt;50 3f 00 00 01 00 00 00: the remaining 8 bytes are little endian for: `0x100003f50`
&lt;&#x2F;span&gt;&lt;span&gt;0x16 (22 in decimal): this is a special opcode:
&lt;&#x2F;span&gt;&lt;span&gt;  - adjusted opcode: 22 - 13 = 9
&lt;&#x2F;span&gt;&lt;span&gt;  - operation advance: 9 &#x2F; 14 = 0 (truncating division)
&lt;&#x2F;span&gt;&lt;span&gt;  - line increment: -5 + (9 % 14) = 4
&lt;&#x2F;span&gt;&lt;span&gt;  =&amp;gt; We emit the following entry: { addr: 0x100003f50, file: 1, line: 5, column 0 }
&lt;&#x2F;span&gt;&lt;span&gt;0x05: this is a standard opcode `DW_LNS_set_column`
&lt;&#x2F;span&gt;&lt;span&gt;0x05: set the column number to `5`
&lt;&#x2F;span&gt;&lt;span&gt;0x0a (10 in decimal): this is a standard opcode `DW_LNS_set_prologue_end`
&lt;&#x2F;span&gt;&lt;span&gt;0xe5 (229 in decimal): this is a special opcode:
&lt;&#x2F;span&gt;&lt;span&gt;  - adjusted opcode: 229 - 13 = 216
&lt;&#x2F;span&gt;&lt;span&gt;  - operation advance: 216 &#x2F; 14 = 15
&lt;&#x2F;span&gt;&lt;span&gt;  - line increment: -5 + (216 % 14) = 1
&lt;&#x2F;span&gt;&lt;span&gt;  =&amp;gt; We emit the following entry: { addr: 0x100003f5f, file: 1, line: 6, column: 5 }
&lt;&#x2F;span&gt;&lt;span&gt;  ... also, this is a prologue end, but we do not care about that
&lt;&#x2F;span&gt;&lt;span&gt;0x59 (89 in decimal):  this is a special opcode:
&lt;&#x2F;span&gt;&lt;span&gt;  - adjusted opcode: 89 - 13 = 76
&lt;&#x2F;span&gt;&lt;span&gt;  - operation advance: 76 &#x2F; 14 = 5
&lt;&#x2F;span&gt;&lt;span&gt;  - line increment: -5 + (76 % 14) = 1
&lt;&#x2F;span&gt;&lt;span&gt;  =&amp;gt; We emit the following entry: { addr: 0x100003f64, file: 1, line: 7, column: 5 }
&lt;&#x2F;span&gt;&lt;span&gt;0x75 (117 in decimal):  this is a special opcode:
&lt;&#x2F;span&gt;&lt;span&gt;  - adjusted opcode: 117 - 13 = 104
&lt;&#x2F;span&gt;&lt;span&gt;  - operation advance: 104 &#x2F; 14 = 7
&lt;&#x2F;span&gt;&lt;span&gt;  - line increment: -5 + (104 % 14) = 1
&lt;&#x2F;span&gt;&lt;span&gt;  =&amp;gt; We emit the following entry: { addr: 0x100003f6b, file: 1, line: 8, column: 5 }
&lt;&#x2F;span&gt;&lt;span&gt;0x02: this is a standard opcode `DW_LNS_advance_pc`
&lt;&#x2F;span&gt;&lt;span&gt;0x06: operation advance: 6
&lt;&#x2F;span&gt;&lt;span&gt;0x00: this is an extended opcode
&lt;&#x2F;span&gt;&lt;span&gt;0x01: the extended opcode spans 1 byte
&lt;&#x2F;span&gt;&lt;span&gt;0x01: this is the extended opcode `DW_LNE_end_sequence`
&lt;&#x2F;span&gt;&lt;span&gt;  =&amp;gt; Our sequence ends at: { addr: 0x100003f71 }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;how-to-use-these-mappings&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#how-to-use-these-mappings&quot; aria-label=&quot;Anchor link for: how-to-use-these-mappings&quot;&gt;#&lt;&#x2F;a&gt;
How to use these mappings&lt;&#x2F;h1&gt;
&lt;p&gt;This was a simplified example, and only uses a single source file and only a limited
number of entries.&lt;&#x2F;p&gt;
&lt;p&gt;Each entry implicitly goes to the next one, ond the &lt;code&gt;end_sequence&lt;&#x2F;code&gt; does not really count,
thus we have the following entries:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;- 0x100003f50 - 0x100003f5f: file 1 (which is `&amp;quot;main.c&amp;quot;`), line 5, column 0
&lt;&#x2F;span&gt;&lt;span&gt;  (this is the function prologue)
&lt;&#x2F;span&gt;&lt;span&gt;- 0x100003f5f - 0x100003f64: file 1, line 6, column 5
&lt;&#x2F;span&gt;&lt;span&gt;- 0x100003f64 - 0x100003f6b: file 1, line 7, column 5
&lt;&#x2F;span&gt;&lt;span&gt;- 0x100003f6b - 0x100003f71: file 1, line 8, column 5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As each sequence is contiguous internally, and is terminated by an &lt;code&gt;end_sequence&lt;&#x2F;code&gt;
marker, instead of storing the end explicitly, we could also add a sentinel
value instead, put everything into a sorted list and binary search that quickly.&lt;&#x2F;p&gt;
&lt;p&gt;This is pretty much how the Sentry SymCache format works.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;summary&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;#&lt;&#x2F;a&gt;
Summary&lt;&#x2F;h1&gt;
&lt;p&gt;We have looked in depth at the DWARF line program binary format and learned a
couple of things about it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The DWARF specification a complex but well documented format, though the specification
can be hard to read and understand at some points.&lt;&#x2F;li&gt;
&lt;li&gt;The line programs, one per compilation unit, are contained in a &lt;code&gt;.debug_line&lt;&#x2F;code&gt;
section. They can also reference other sections depending on the DWARF version.&lt;&#x2F;li&gt;
&lt;li&gt;Each line program has a header and a list of instructions.&lt;&#x2F;li&gt;
&lt;li&gt;These instructions encode the address, file, line, column and a bunch of flags.&lt;&#x2F;li&gt;
&lt;li&gt;The line program is divided into contiguous sequences.&lt;&#x2F;li&gt;
&lt;li&gt;The format and opcodes are very extensible, supporting all kinds of instruction
set architectures, which also makes it very complex.&lt;&#x2F;li&gt;
&lt;li&gt;The line program itself has no information about functions and their names.
That information is part of the &lt;code&gt;.debug_info&lt;&#x2F;code&gt; section and the debug information
entries contained within.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;This concludes the deep dive into DWARF. This leaves me with only one more
format to go in this series: &lt;em&gt;Windows PDB line programs&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Those are pretty much completely undocumented, so it will take some time to
digest everything into a hopefully understandable blog post.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>2022 Retrospective</title>
        <published>2022-12-30T00:00:00+00:00</published>
        <updated>2022-12-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/2022-retrospective/"/>
        <id>https://swatinem.de/blog/2022-retrospective/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/2022-retrospective/">&lt;p&gt;It is the end of the year, and a lot of people are writing end-of-year posts,
and outlooks for the new year. So here is mine.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;sentry&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#sentry&quot; aria-label=&quot;Anchor link for: sentry&quot;&gt;#&lt;&#x2F;a&gt;
Sentry&lt;&#x2F;h1&gt;
&lt;p&gt;It was an interesting year for sure. We shipped a bunch of stuff.
Some internal that otherwise noone would know about and others external features
adding support for new platforms and ecosystems.&lt;&#x2F;p&gt;
&lt;p&gt;A big internal item was switching our serverside processor from breakpad to
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-minidump&#x2F;rust-minidump&quot;&gt;rust-minidump&lt;&#x2F;a&gt;. The crate was
primarily developed by folks at Mozilla, but our team contributed a bunch of
fixes and extended support to other platforms such as MIPS.&lt;&#x2F;p&gt;
&lt;p&gt;We ran both implementations side by side for some time to gather up differences
and were looking at some mismatching cases. We fixed regressions and celebrated
improvements. Though some regressions slipped through and we had to fix them
after the switch. As we are dealing with customer data though, it was not really
possible to create testcases out of all the interesting cases.&lt;&#x2F;p&gt;
&lt;p&gt;Our support for unwind info was also extended, especially on Windows to be able
to unwind in more situations.&lt;&#x2F;p&gt;
&lt;p&gt;There were also a bunch of fixes to our own SymCache format, a lot of which were
contributed by Mozilla people as well.&lt;&#x2F;p&gt;
&lt;p&gt;We also started dogfooding our own performance monitoring product, as well as the
profiling support in some limited fashion.&lt;&#x2F;p&gt;
&lt;p&gt;On to more visible features, we enabled support for line numbers in Unity projects.
After a lot of initial experimentation and exploration, we ended up with a
simple and elegant solution. The Unity il2cpp compiler puts annotations into
the generated C++ sources that map back to the C# code they were generated from.
We simply use those annotations to map back to the C# code.&lt;&#x2F;p&gt;
&lt;p&gt;There is one followup to the whole Unity story however. As we do not control the
stack walking on the client-side at all, we are at the mercy of what Unity gives us.
And in some cases it gives us offset instruction addresses. In other cases we
offset those again in a wrong way.&lt;&#x2F;p&gt;
&lt;p&gt;Surprisingly, the source of this problem touches lots of parts of the product,
and work is ongoing to find a solution that serves more usecases as well.&lt;&#x2F;p&gt;
&lt;p&gt;Next up, we added server-side support to symbolicate .NET stack traces. And a
contractor even extended this support to also offer source context as well.&lt;&#x2F;p&gt;
&lt;p&gt;Whereas we have server-side support for this for quite some time, the .NET SDK
is a bit lacking behind, but should soon catch up to ship this feature to customers.&lt;&#x2F;p&gt;
&lt;p&gt;Another big thing we shipped was improved SourceMap support. We are now parsing
the minified JS source to extract function scopes and give them reasonably
meaningful names, and using the SourceMap to recover the original names.&lt;&#x2F;p&gt;
&lt;p&gt;You can read up on our &lt;a href=&quot;https:&#x2F;&#x2F;blog.sentry.io&#x2F;2022&#x2F;11&#x2F;30&#x2F;how-we-made-javascript-stack-traces-awesome&#x2F;&quot;&gt;blog post&lt;&#x2F;a&gt;
that explains all this in more detail. We also designed a new lookup format for
this that is very similar to our existing SymCache format. This opens up the
door to cache all these computations to amortize their cost in the future.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Apart from all this feature work, I also blogged about some interesting issues
and bugs that I fixed along the way, like
&lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;format-ossification&#x2F;&quot;&gt;format ossification&lt;&#x2F;a&gt; and a serious
inefficiency in the parsing of
&lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;abbreviations&#x2F;&quot;&gt;DWARF Abbreviations&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Inspired by the above feature work on &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;sourcemaps&#x2F;&quot;&gt;SourceMaps&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;sequence-points&#x2F;&quot;&gt;.NET Portable PDBs&lt;&#x2F;a&gt;, I started
a blog series exploring those formats in great depth. I am procrastinating hard,
but still plan to eventually write about DWARF and native PDB formats as well.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rust&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#rust&quot; aria-label=&quot;Anchor link for: rust&quot;&gt;#&lt;&#x2F;a&gt;
Rust&lt;&#x2F;h1&gt;
&lt;p&gt;I wrote quite a lot of posts about Rust this year. Take a look at the archive,
they are too many to list.&lt;&#x2F;p&gt;
&lt;p&gt;These range from educational posts about Futures in general, commentary on some
of the broader discussions in the ecosystem as well as describing some common
pitfalls and exploring some zero-copy parsing.&lt;&#x2F;p&gt;
&lt;p&gt;I called out to &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;fix-rustdoc&#x2F;&quot;&gt;fix rustdoc doctests&lt;&#x2F;a&gt; as they
are rather held together by doc-tape right now. (Yes, I want to make this pun a thing!)
Some posts in the community about what the Rust foundation should focus on
mentioned hiring &#x2F; funding people to work on especially tedious and non-glamorous
tasks. Doctests seem to be one of those, and are in need of someone giving more
love to them.&lt;&#x2F;p&gt;
&lt;p&gt;One PR of mine, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;103682&quot;&gt;stabilizing the &lt;code&gt;--test-run-directory&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
flag, which itself is just an implementation detail to make the output of
&lt;code&gt;cargo test&lt;&#x2F;code&gt; more readable has been in FCP limbo for quite some time now, and
there is little movement.&lt;&#x2F;p&gt;
&lt;p&gt;Towards the end of the year I took it on myself to improve the inner workings
of &lt;code&gt;async fn&lt;&#x2F;code&gt;. Primarily motivated by Sentry starting to dogfood our profiling
product, and seeing how bad async stack traces look in profiles. Someone called
me out that this is indeed a big “yak shave” just to get prettier stack traces.&lt;&#x2F;p&gt;
&lt;p&gt;This was not as smooth sailing as I had hoped though. Whereas removal of the
intermediate &lt;code&gt;GenFuture&lt;&#x2F;code&gt; is on its way to Rust &lt;code&gt;1.67&lt;&#x2F;code&gt;, the state it is in does
take one significant shortcut.
The Future gets a &lt;code&gt;&amp;amp;mut Context&amp;lt;&#x27;_&amp;gt;&lt;&#x2F;code&gt; from the outside, but is treating that as
a &lt;code&gt;ResumeTy&lt;&#x2F;code&gt; internally. &lt;code&gt;ResumeTy&lt;&#x2F;code&gt; is an unsafe pointer wrapper around &lt;code&gt;Context&lt;&#x2F;code&gt;,
and its only purpose is to paper over some shortcomings in the type checker.
For now, this works in practice as &lt;code&gt;ResumeTy&lt;&#x2F;code&gt; and &lt;code&gt;&amp;amp;mut Context&amp;lt;&#x27;_&amp;gt;&lt;&#x2F;code&gt; are really
&lt;em&gt;just pointers&lt;&#x2F;em&gt;, but the &lt;code&gt;cg_clif&lt;&#x2F;code&gt; codegen backend validates these types more
strictly and is complaining, rightfully so.&lt;&#x2F;p&gt;
&lt;p&gt;An earlier attempt of mine to fix that and use &lt;code&gt;&amp;amp;&#x27;static mut Context&amp;lt;&#x27;_&amp;gt;&lt;&#x2F;code&gt;
failed as it caused a &lt;code&gt;higher-ranked lifetime error&lt;&#x2F;code&gt;. This error already existed,
and still exists for some weird cases, though my change really did break existing
code.&lt;&#x2F;p&gt;
&lt;p&gt;It was eventually reverted, but left &lt;code&gt;nightly&lt;&#x2F;code&gt; and even &lt;code&gt;beta&lt;&#x2F;code&gt; in an unusable
state for some people for some time. A lesson to myself here is to revert
things earlier if there is serious breakage.&lt;&#x2F;p&gt;
&lt;p&gt;Reverting that change however is still causing problems for &lt;code&gt;cg_clif&lt;&#x2F;code&gt;. I do have
a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;105977&quot;&gt;PR up&lt;&#x2F;a&gt; that replaces this
&lt;code&gt;ResumeTy&lt;&#x2F;code&gt; later in the pipeline so the type checker is still dealing with
&lt;code&gt;ResumeTy&lt;&#x2F;code&gt; for now. I believe there is already work underway in the type checker
to solve the underlying problems that made this workaround necessary.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;personal&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#personal&quot; aria-label=&quot;Anchor link for: personal&quot;&gt;#&lt;&#x2F;a&gt;
Personal&lt;&#x2F;h1&gt;
&lt;p&gt;Well, probably everyone is feeling it themselves that we have arrived in a real
cost of living crises. I won’t go into details of who is responsible though.&lt;&#x2F;p&gt;
&lt;p&gt;I wanted to buy real estate and relocate for some time, but that plan is put on
ice right now, as this depends on four factors that make right now the worst
time to commit to such an investment:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Financing options have been getting worse over the year to a point where
mortgages are not affordable at all.&lt;&#x2F;li&gt;
&lt;li&gt;At the same time, real estate prices are as inflated as ever, and there is not
yet a trend of them going down either.&lt;&#x2F;li&gt;
&lt;li&gt;Cost of living has exploded, so after living expenses there is less capital
left over to allocate to investments.&lt;&#x2F;li&gt;
&lt;li&gt;Salaries haven’t caught up yet with any of this.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I fear that things are getting worse still before they get better. Its also a
sentiment shared by a lot of people.&lt;&#x2F;p&gt;
&lt;p&gt;All in all, this whole situation makes me super anxious, and it feels like the
world around me is going to shit.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2023&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#2023&quot; aria-label=&quot;Anchor link for: 2023&quot;&gt;#&lt;&#x2F;a&gt;
2023&lt;&#x2F;h1&gt;
&lt;p&gt;Well, lets leave this year behind us and start fresh into the new one, shall we?&lt;&#x2F;p&gt;
&lt;p&gt;I’m not someone to have big plans and ambitions, but there is one thing I would
like to do this coming year.&lt;&#x2F;p&gt;
&lt;p&gt;Sentry has recently &lt;a href=&quot;https:&#x2F;&#x2F;blog.sentry.io&#x2F;2022&#x2F;11&#x2F;30&#x2F;bringing-codecov-into-the-sentry-family-where-code-coverage-meets-application-monitoring&#x2F;&quot;&gt;acquired CodeCov&lt;&#x2F;a&gt;.
This is great news, as I am super passionate about code coverage as well.
After all, &lt;a href=&quot;https:&#x2F;&#x2F;cov.rs&#x2F;&quot;&gt;cov.rs&lt;&#x2F;a&gt; redirects to my blog here.&lt;&#x2F;p&gt;
&lt;p&gt;I have contributed &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;79762&quot;&gt;improvements to code coverage of doctests&lt;&#x2F;a&gt;
already two years ago, and was taking a look at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;90047&quot;&gt;some preliminary work&lt;&#x2F;a&gt;
to eventually add proper &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;79649&quot;&gt;branch coverage&lt;&#x2F;a&gt;
support to the Rust compiler.&lt;&#x2F;p&gt;
&lt;p&gt;With these recent news, I hope I will be able to dedicate some &lt;em&gt;official&lt;&#x2F;em&gt; time
to this effort. Along with taking care of any followup work from my changes
to &lt;code&gt;async&lt;&#x2F;code&gt; functions. And I would also like to present the inner working of
&lt;code&gt;async&lt;&#x2F;code&gt; functions any my work to improve that at a meetup and&#x2F;or conference
sometime this year as well.&lt;&#x2F;p&gt;
&lt;p&gt;That is pretty much all I can think of right now. Everything else I will make up
as I go. :-)&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Improving async Rust codegen</title>
        <published>2022-11-18T00:00:00+00:00</published>
        <updated>2022-11-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/improving-async-codegen/"/>
        <id>https://swatinem.de/blog/improving-async-codegen/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/improving-async-codegen/">&lt;p&gt;Last week I was looking at the &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;async-codegen&#x2F;&quot;&gt;implementation details of async&lt;&#x2F;a&gt;.
Specifically I was looking at two issues that make stack traces in async programs
confusing and hard to make sense of.&lt;&#x2F;p&gt;
&lt;p&gt;To recap, lets take this snippet of Rust code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;fn_with_nested_block&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Backtrace {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|| async { Backtrace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;force_capture() })
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we run it with your favorite async runtime of choice and print the stack trace,
we will get something like this on Linux:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;   0: async_codegen::fn_with_nested_block::{{closure}}::{{closure}}::{{closure}}
&lt;&#x2F;span&gt;&lt;span&gt;             at .&#x2F;src&#x2F;lib.rs:15:36
&lt;&#x2F;span&gt;&lt;span&gt;   1: &amp;lt;core::future::from_generator::GenFuture&amp;lt;T&amp;gt; as core::future::future::Future&amp;gt;::poll
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;rustc&#x2F;897e37553bba8b42751c67658967889d11ecd120&#x2F;library&#x2F;core&#x2F;src&#x2F;future&#x2F;mod.rs:91:19
&lt;&#x2F;span&gt;&lt;span&gt;   2: async_codegen::fn_with_nested_block::{{closure}}
&lt;&#x2F;span&gt;&lt;span&gt;             at .&#x2F;src&#x2F;lib.rs:16:9
&lt;&#x2F;span&gt;&lt;span&gt;   3: &amp;lt;core::future::from_generator::GenFuture&amp;lt;T&amp;gt; as core::future::future::Future&amp;gt;::poll
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;rustc&#x2F;897e37553bba8b42751c67658967889d11ecd120&#x2F;library&#x2F;core&#x2F;src&#x2F;future&#x2F;mod.rs:91:19
&lt;&#x2F;span&gt;&lt;span&gt;   4: async_codegen::tests::test_stack::{{closure}}
&lt;&#x2F;span&gt;&lt;span&gt;             at .&#x2F;src&#x2F;lib.rs:77:51
&lt;&#x2F;span&gt;&lt;span&gt;   5: &amp;lt;core::future::from_generator::GenFuture&amp;lt;T&amp;gt; as core::future::future::Future&amp;gt;::poll
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;rustc&#x2F;897e37553bba8b42751c67658967889d11ecd120&#x2F;library&#x2F;core&#x2F;src&#x2F;future&#x2F;mod.rs:91:19
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This does not look very nice for two reasons:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Every async fn in our stack trace adds a meaningless and noisy &lt;code&gt;GenFuture&lt;&#x2F;code&gt; in the middle.&lt;&#x2F;li&gt;
&lt;li&gt;For nested blocks, we end up with a ton of &lt;code&gt;::{{closure}}&lt;&#x2F;code&gt; that are confusing.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I ended the post by saying “I will have a look”. Well, I did, and I have both
good, and not as good news.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;symbol-mangling&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#symbol-mangling&quot; aria-label=&quot;Anchor link for: symbol-mangling&quot;&gt;#&lt;&#x2F;a&gt;
Symbol Mangling&lt;&#x2F;h1&gt;
&lt;p&gt;It turns out that the issue of function names is a Linux&#x2F;macOS issue related
to the way symbol mangling is done on those platforms.&lt;&#x2F;p&gt;
&lt;p&gt;This is not an issue on Windows which uses a different way of representing
function names.&lt;&#x2F;p&gt;
&lt;p&gt;For the snippet above, I do get a much better output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;async_codegen::fn_with_nested_block::async_fn$0::closure$0::async_block$0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For Linux, I figured out the code paths that generate the mangled names, and
have a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;104333&quot;&gt;Draft PR&lt;&#x2F;a&gt; open that at
least gets the necessary information through to that place.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;v0&lt;&#x2F;code&gt; symbol mangling scheme was first proposed in
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;2603&quot;&gt;RFC 2603&lt;&#x2F;a&gt; in 2018, and
implemented in early 2019. The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;89917&quot;&gt;PR to make it the default&lt;&#x2F;a&gt;
has been sitting there since end of 2021, though there seems to be a little
progress.&lt;&#x2F;p&gt;
&lt;p&gt;The problem here is that Rust symbol mangling is larger than just the Rust project.
It needs to be understood by gdb (and other GNU tools), lldb (and other LLVM tools),
as well as a wide variety of profiling and binary instrumentation tools.&lt;&#x2F;p&gt;
&lt;p&gt;There were a couple of PRs along the years to amend the format which are linked
from the PR above, so making changes is possible.
Though without actually having a look at those, I imagine the process to be
rather tedious and slow. Not something I’m too excited about. But I will keep
looking at it.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;getting-rid-of-genfuture&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#getting-rid-of-genfuture&quot; aria-label=&quot;Anchor link for: getting-rid-of-genfuture&quot;&gt;#&lt;&#x2F;a&gt;
Getting rid of &lt;code&gt;GenFuture&lt;&#x2F;code&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;What does get me more excited though is getting rid of &lt;code&gt;GenFuture&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I managed to hack together a proof of concept in about two days and a have
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;104321&quot;&gt;Draft PR&lt;&#x2F;a&gt; open.&lt;&#x2F;p&gt;
&lt;p&gt;A compiler with my PR does solve my original goal of getting rid of the superfluous
&lt;code&gt;GenFuture&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; frames in my stack traces. Here is the relevant snippet for the code
above, on Windows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;   3: async_codegen::fn_with_nested_block::async_fn$0::closure$0::async_block$0
&lt;&#x2F;span&gt;&lt;span&gt;             at .\src\lib.rs:14
&lt;&#x2F;span&gt;&lt;span&gt;   4: async_codegen::fn_with_nested_block::async_fn$0
&lt;&#x2F;span&gt;&lt;span&gt;             at .\src\lib.rs:15
&lt;&#x2F;span&gt;&lt;span&gt;   5: async_codegen::tests::test_stack::async_block$0
&lt;&#x2F;span&gt;&lt;span&gt;             at .\src\lib.rs:28
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That looks very clean now. I have also verified this on
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;symbolicator&quot;&gt;symbolicator&lt;&#x2F;a&gt; which is a huge async
heavy codebase. It builds, passes tests, and profiling it with
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mstange&#x2F;samply&quot;&gt;samply&lt;&#x2F;a&gt; yields much better stack traces than
before.&lt;&#x2F;p&gt;
&lt;p&gt;The extensive Rust test suite also revealed some unexpected improvements:&lt;&#x2F;p&gt;
&lt;p&gt;Diagnostic spans now point to the &lt;em&gt;whole&lt;&#x2F;em&gt; async block, not only the &lt;em&gt;block&lt;&#x2F;em&gt; after
the async keyword:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;Before:
&lt;&#x2F;span&gt;&lt;span&gt;LL |     async { *x }
&lt;&#x2F;span&gt;&lt;span&gt;   |           ^^--^^
&lt;&#x2F;span&gt;&lt;span&gt;   |           | |
&lt;&#x2F;span&gt;&lt;span&gt;   |           | `x` is borrowed here
&lt;&#x2F;span&gt;&lt;span&gt;   |           may outlive borrowed value `x`
&lt;&#x2F;span&gt;&lt;span&gt;After:
&lt;&#x2F;span&gt;&lt;span&gt;LL |     async { *x }
&lt;&#x2F;span&gt;&lt;span&gt;   |     ^^^^^^^^--^^
&lt;&#x2F;span&gt;&lt;span&gt;   |     |       |
&lt;&#x2F;span&gt;&lt;span&gt;   |     |       `x` is borrowed here
&lt;&#x2F;span&gt;&lt;span&gt;   |     may outlive borrowed value `x`
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;OR:
&lt;&#x2F;span&gt;&lt;span&gt;Before:
&lt;&#x2F;span&gt;&lt;span&gt;LL |       let send_fut = async {
&lt;&#x2F;span&gt;&lt;span&gt;   |  __________________________^
&lt;&#x2F;span&gt;&lt;span&gt;After:
&lt;&#x2F;span&gt;&lt;span&gt;LL |       let send_fut = async {
&lt;&#x2F;span&gt;&lt;span&gt;   |  ____________________^
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I had to do quite some work chasing down various diagnostics that had subtle
changes. Most of those had some special handling for async constructs that was
not compatible anymore after the changes I have done.&lt;&#x2F;p&gt;
&lt;p&gt;Though there is still some regressions to track down.&lt;&#x2F;p&gt;
&lt;p&gt;For one, async blocks are now trivially &lt;code&gt;const&lt;&#x2F;code&gt;. They are &lt;em&gt;just data&lt;&#x2F;em&gt; after all.
While this is really an improvement, it is an unexpected improvement, as they
are supposed to be behind a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;85368&quot;&gt;&lt;code&gt;const_async_blocks&lt;&#x2F;code&gt; feature&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;At the time that check is performed, the async function as such does not exist
anymore, so I will have to figure out a way to implement this check a different way.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-an-async-fn-captures&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#what-an-async-fn-captures&quot; aria-label=&quot;Anchor link for: what-an-async-fn-captures&quot;&gt;#&lt;&#x2F;a&gt;
What an async fn &lt;code&gt;Captures&lt;&#x2F;code&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;This leaves me with another very hard to track down failure, and now that I
am trying to write it down, I get more confused by the minute.&lt;&#x2F;p&gt;
&lt;p&gt;Consider this code, which comes directly from the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;83356b78c4ff3e7d84e977aa6143793545967301&#x2F;src&#x2F;test&#x2F;ui&#x2F;self&#x2F;self_lifetime-async.rs&quot;&gt;Rusts test suite&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Foo&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Alias &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;using_alias&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Alias, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        arg
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This typechecks just fine with Rust stable (&lt;code&gt;1.65&lt;&#x2F;code&gt;), but fails with my PR:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0700]: hidden type for `impl Future&amp;lt;Output = &amp;amp;&amp;#39;a ()&amp;gt;` captures lifetime that does not appear in bounds
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; playground\async-codegen\src\lib.rs:22:68
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;22 |       pub async fn using_alias&amp;lt;&amp;#39;a&amp;gt;(self: &amp;amp;Alias, arg: &amp;amp;&amp;#39;a ()) -&amp;gt; &amp;amp;() {
&lt;&#x2F;span&gt;&lt;span&gt;   |  ____________________________________________________________________^
&lt;&#x2F;span&gt;&lt;span&gt;23 | |         arg
&lt;&#x2F;span&gt;&lt;span&gt;24 | |     }
&lt;&#x2F;span&gt;&lt;span&gt;   | |_____^
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;   = note: hidden type `impl Future&amp;lt;Output = &amp;amp;&amp;#39;a ()&amp;gt;` captures lifetime &amp;#39;_#17r
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, if I manually “inline” the type alias like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;using_self&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        arg
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Things are already failing on stable Rust:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;error: lifetime may not live long enough
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; playground\async-codegen\src\lib.rs:29:9
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;28 |     pub async fn using_self&amp;lt;&amp;#39;a&amp;gt;(&amp;amp;self, arg: &amp;amp;&amp;#39;a ()) -&amp;gt; &amp;amp;() {
&lt;&#x2F;span&gt;&lt;span&gt;   |                             --  - let&amp;#39;s call the lifetime of this reference `&amp;#39;1`
&lt;&#x2F;span&gt;&lt;span&gt;   |                             |
&lt;&#x2F;span&gt;&lt;span&gt;   |                             lifetime `&amp;#39;a` defined here
&lt;&#x2F;span&gt;&lt;span&gt;29 |         arg
&lt;&#x2F;span&gt;&lt;span&gt;   |         ^^^ associated function was supposed to return data with lifetime `&amp;#39;1` but it is returning
&lt;&#x2F;span&gt;&lt;span&gt;data with lifetime `&amp;#39;a`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Am I completely misunderstanding how type aliases are supposed to work? Are they
not interchangeable with the type they are aliasing?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Alias) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Foo&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    a
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;call_alias&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Foo&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Foo(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;alias&lt;&#x2F;span&gt;&lt;span&gt;(a)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This snippet of code suggests so, right?&lt;&#x2F;p&gt;
&lt;p&gt;Am I so out of touch with reality by now?&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Lets take a different step, and try desugaring the async fn. As a reminder,
the recent &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;inside-rust&#x2F;2022&#x2F;11&#x2F;17&#x2F;async-fn-in-trait-nightly.html#recap-how-asyncawait-works-in-rust&quot;&gt;async fn in trait&lt;&#x2F;a&gt;
blog post showed this desugaring as well:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Alias &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;desugared_using_alias&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Alias, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; impl Future&amp;lt;Output = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            arg
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You might wonder, what am I doing with that weird &lt;code&gt;_self&lt;&#x2F;code&gt; parameter?&lt;&#x2F;p&gt;
&lt;p&gt;That is a way to explicitly capture that parameter. This is the main difference
between functions and closures. Closures only capture what they &lt;em&gt;need&lt;&#x2F;em&gt;, whereas
functions capture all the arguments, and drop them in a very specific order.&lt;&#x2F;p&gt;
&lt;p&gt;Trying to compile that code gives me my good friend &lt;code&gt;E0700&lt;&#x2F;code&gt; again:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0700]: hidden type for `impl Future&amp;lt;Output = &amp;amp;&amp;#39;a ()&amp;gt;` captures lifetime that does not appear in bounds
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; playground\async-codegen\src\lib.rs:31:9
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;29 |       pub fn desugared_using_alias&amp;lt;&amp;#39;a&amp;gt;(self: &amp;amp;Alias, arg: &amp;amp;&amp;#39;a ()) -&amp;gt; impl Future&amp;lt;Output = &amp;amp;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   |                                              ------ hidden type `impl Future&amp;lt;Output = &amp;amp;&amp;#39;a ()&amp;gt;` captures the anonymous lifetime defined here
&lt;&#x2F;span&gt;&lt;span&gt;30 |           let _self = self;
&lt;&#x2F;span&gt;&lt;span&gt;31 | &#x2F;         async move {
&lt;&#x2F;span&gt;&lt;span&gt;32 | |             let _self = _self;
&lt;&#x2F;span&gt;&lt;span&gt;33 | |             arg
&lt;&#x2F;span&gt;&lt;span&gt;34 | |         }
&lt;&#x2F;span&gt;&lt;span&gt;   | |_________^
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;help: to declare that the `impl Trait` captures `&amp;#39;_`, you can add an explicit `&amp;#39;_` lifetime bound
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;29 |     pub fn desugared_using_alias&amp;lt;&amp;#39;a&amp;gt;(self: &amp;amp;Alias, arg: &amp;amp;&amp;#39;a ()) -&amp;gt; impl Future&amp;lt;Output = &amp;amp;()&amp;gt; + &amp;#39;_ {   |                                                                                              ++++
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And there is a suggestions. What if we apply it?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Alias &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;desugared_using_alias&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Alias, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; impl Future&amp;lt;Output = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;()&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &amp;#39;_ &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            arg
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;… and compile again:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;error: lifetime may not live long enough
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; playground\async-codegen\src\lib.rs:34:9
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;29 |       pub fn desugared_using_alias&amp;lt;&amp;#39;a&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;   |                                    -- lifetime `&amp;#39;a` defined here
&lt;&#x2F;span&gt;&lt;span&gt;30 |           self: &amp;amp;Alias,
&lt;&#x2F;span&gt;&lt;span&gt;   |                 - let&amp;#39;s call the lifetime of this reference `&amp;#39;1`
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;34 | &#x2F;         async move {
&lt;&#x2F;span&gt;&lt;span&gt;35 | |             let _self = _self;
&lt;&#x2F;span&gt;&lt;span&gt;36 | |             arg
&lt;&#x2F;span&gt;&lt;span&gt;37 | |         }
&lt;&#x2F;span&gt;&lt;span&gt;   | |_________^ associated function was supposed to return data with lifetime `&amp;#39;a` but it is returning
&lt;&#x2F;span&gt;&lt;span&gt;data with lifetime `&amp;#39;1`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Uff, that is not very helpful either.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Interestingly enough, while I was experimenting, I had a slightly different
snippet of code before, taking &lt;code&gt;_self&lt;&#x2F;code&gt; instead of &lt;code&gt;self&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Alias &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;desugared_using_alias&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Alias, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; impl Future&amp;lt;Output = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;()&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &amp;#39;_ &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            arg
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This surprisingly makes a huge difference in diagnostics:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0106]: missing lifetime specifiers
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; playground\async-codegen\src\lib.rs:29:90
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;29 |     pub fn desugared_using_alias&amp;lt;&amp;#39;a&amp;gt;(_self: &amp;amp;Alias, arg: &amp;amp;&amp;#39;a ()) -&amp;gt; impl Future&amp;lt;Output = &amp;amp;()&amp;gt; + &amp;#39;_ {
&lt;&#x2F;span&gt;&lt;span&gt;   |                                             ------       ------                          ^      ^^ expected named lifetime parameter
&lt;&#x2F;span&gt;&lt;span&gt;   |                                                                                          |
&lt;&#x2F;span&gt;&lt;span&gt;   |                                                                                          expected named lifetime parameter
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;   = help: this function&amp;#39;s return type contains a borrowed value, but the signature does not say whether it is borrowed from `_self` or `arg`
&lt;&#x2F;span&gt;&lt;span&gt;help: consider using the `&amp;#39;a` lifetime
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;29 |     pub fn desugared_using_alias&amp;lt;&amp;#39;a&amp;gt;(_self: &amp;amp;Alias, arg: &amp;amp;&amp;#39;a ()) -&amp;gt; impl Future&amp;lt;Output = &amp;amp;&amp;#39;a ()&amp;gt; +&amp;#39;a {
&lt;&#x2F;span&gt;&lt;span&gt;   |                                                                                           ++      ~~
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;error[E0621]: explicit lifetime required in the type of `_self`
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; playground\async-codegen\src\lib.rs:31:9
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;29 |       pub fn desugared_using_alias&amp;lt;&amp;#39;a&amp;gt;(_self: &amp;amp;Alias, arg: &amp;amp;&amp;#39;a ()) -&amp;gt; impl Future&amp;lt;Output = &amp;amp;()&amp;gt; + &amp;#39;_ {
&lt;&#x2F;span&gt;&lt;span&gt;   |                                               ------ help: add explicit lifetime `&amp;#39;a` to the type of `_self`: `&amp;amp;&amp;#39;a Foo&amp;lt;&amp;#39;static&amp;gt;`
&lt;&#x2F;span&gt;&lt;span&gt;30 |           let _self = _self;
&lt;&#x2F;span&gt;&lt;span&gt;31 | &#x2F;         async move {
&lt;&#x2F;span&gt;&lt;span&gt;32 | |             let _self = _self;
&lt;&#x2F;span&gt;&lt;span&gt;33 | |             arg
&lt;&#x2F;span&gt;&lt;span&gt;34 | |         }
&lt;&#x2F;span&gt;&lt;span&gt;   | |_________^ lifetime `&amp;#39;a` required
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now it is giving different errors and different suggestions, namely to just use
&lt;code&gt;&#x27;a&lt;&#x2F;code&gt; everywhere.
And, to my surprise, even the diagnostics will just inline &lt;code&gt;Alias&lt;&#x2F;code&gt; as &lt;code&gt;Foo&amp;lt;&#x27;static&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Circling back to our original code with &lt;code&gt;self&lt;&#x2F;code&gt;, and applying these suggestions
to just use &lt;code&gt;&#x27;a&lt;&#x2F;code&gt; everywhere does solve the problem and the code finally compiles,
but it is not entirely correct, as now both &lt;code&gt;self&lt;&#x2F;code&gt; and &lt;code&gt;arg&lt;&#x2F;code&gt; are tied to the same lifetime.&lt;&#x2F;p&gt;
&lt;p&gt;We can demonstrate this with another snippet:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;use_lifetimes&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Foo(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; arg_ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;desugared_using_alias&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;arg)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;drop&lt;&#x2F;span&gt;&lt;span&gt;(_self)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{arg_ref:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0505]: cannot move out of `_self` because it is borrowed
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; playground\async-codegen\src\lib.rs:42:10
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;41 |     let arg_ref = _self.desugared_using_alias(&amp;amp;arg).await;
&lt;&#x2F;span&gt;&lt;span&gt;   |                   --------------------------------- borrow of `_self` occurs here
&lt;&#x2F;span&gt;&lt;span&gt;42 |     drop(_self);
&lt;&#x2F;span&gt;&lt;span&gt;   |          ^^^^^ move out of `_self` occurs here
&lt;&#x2F;span&gt;&lt;span&gt;43 |     println!(&amp;quot;{arg_ref:?}&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;   |                ------- borrow later used here
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The diagnostics now say that &lt;code&gt;_self&lt;&#x2F;code&gt; is tied to &lt;code&gt;arg_ref&lt;&#x2F;code&gt;, which we said above
by making it the same lifetime, but did not really intend. So how can we fix that?&lt;&#x2F;p&gt;
&lt;p&gt;By introducing separate lifetimes, and adding an explicit lifetime bound after
the compiler told us to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Alias &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;desugared_using_alias&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;slf&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;slf&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;slf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;arg &lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; impl Future&amp;lt;Output = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;arg &lt;&#x2F;span&gt;&lt;span&gt;()&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;slf &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            arg
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;use_lifetimes&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Alias &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Foo(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; arg_ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;desugared_using_alias&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;arg)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;drop&lt;&#x2F;span&gt;&lt;span&gt;(_self)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{arg_ref:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So where am I going with all this? Lifetimes are hard!&lt;&#x2F;p&gt;
&lt;p&gt;Either way, this was a very long post already, and still some things to solve.&lt;&#x2F;p&gt;
&lt;p&gt;I hope at least I could raise some excitement about the improvements I’m trying
to make. Having cleaner and more readable stack traces is definitely a win.&lt;&#x2F;p&gt;
&lt;p&gt;I also anticipate that there will be smaller wins elsewhere. Less code for the
compiler to inline and optimize away, less debuginfo to generate. It could
potentially reduce compiletimes, output binary sizes, and even improve the
runtime performance of the generated code. I haven’t measured that effect yet,
and the Rust performance test suite did not yet run on my PR either.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Implementation Details of async Rust</title>
        <published>2022-11-09T00:00:00+00:00</published>
        <updated>2022-11-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/async-codegen/"/>
        <id>https://swatinem.de/blog/async-codegen/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/async-codegen/">&lt;p&gt;I have been looking at a lot of Rust async stack traces lately.
This was mostly related to profiling some heavily async code locally, as well as
profiling some production systems in the cloud test driving Sentrys new profiling support for Rust.&lt;&#x2F;p&gt;
&lt;p&gt;We don’t need to go all that big and fancy, we can observe the problem already
with a tiny example. Now that &lt;code&gt;Backtrace&lt;&#x2F;code&gt; is finally stable, we can capture one
directly in stable Rust today without any external dependencies, though I do
need to pull in an async executor.&lt;&#x2F;p&gt;
&lt;p&gt;I could just reuse my &lt;code&gt;ready_or_diverge&lt;&#x2F;code&gt; noop executor I &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;zero-cost-async&#x2F;&quot;&gt;used previously&lt;&#x2F;a&gt;,
but I settled on &lt;code&gt;tokio&lt;&#x2F;code&gt; instead.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;backtrace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Backtrace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Backtrace {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    bt
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Backtrace {
&lt;&#x2F;span&gt;&lt;span&gt;    Backtrace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;force_capture()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(test)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;tests &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;test_stack&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; backtrace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; backtrace)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So what kind of stack trace does this produce? A &lt;strong&gt;humongous&lt;&#x2F;strong&gt; one!
Most of that is thread setup, &lt;code&gt;#[test]&lt;&#x2F;code&gt; infrastructure, and the tokio runtime
scheduler. Closer to the top we will find the async functions we actually want to look at:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;   4: async_codegen::b::{{closure}}
&lt;&#x2F;span&gt;&lt;span&gt;             at .&#x2F;src&#x2F;lib.rs:10:5
&lt;&#x2F;span&gt;&lt;span&gt;   5: &amp;lt;core::future::from_generator::GenFuture&amp;lt;T&amp;gt; as core::future::future::Future&amp;gt;::poll
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;rustc&#x2F;897e37553bba8b42751c67658967889d11ecd120&#x2F;library&#x2F;core&#x2F;src&#x2F;future&#x2F;mod.rs:91:19
&lt;&#x2F;span&gt;&lt;span&gt;   6: async_codegen::a::{{closure}}
&lt;&#x2F;span&gt;&lt;span&gt;             at .&#x2F;src&#x2F;lib.rs:4:17
&lt;&#x2F;span&gt;&lt;span&gt;   7: &amp;lt;core::future::from_generator::GenFuture&amp;lt;T&amp;gt; as core::future::future::Future&amp;gt;::poll
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;rustc&#x2F;897e37553bba8b42751c67658967889d11ecd120&#x2F;library&#x2F;core&#x2F;src&#x2F;future&#x2F;mod.rs:91:19
&lt;&#x2F;span&gt;&lt;span&gt;   8: async_codegen::tests::test_stack::{{closure}}
&lt;&#x2F;span&gt;&lt;span&gt;             at .&#x2F;src&#x2F;lib.rs:19:29
&lt;&#x2F;span&gt;&lt;span&gt;   9: &amp;lt;core::future::from_generator::GenFuture&amp;lt;T&amp;gt; as core::future::future::Future&amp;gt;::poll
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;rustc&#x2F;897e37553bba8b42751c67658967889d11ecd120&#x2F;library&#x2F;core&#x2F;src&#x2F;future&#x2F;mod.rs:91:19
&lt;&#x2F;span&gt;&lt;span&gt;  10: &amp;lt;core::pin::Pin&amp;lt;P&amp;gt; as core::future::future::Future&amp;gt;::poll
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;rustc&#x2F;897e37553bba8b42751c67658967889d11ecd120&#x2F;library&#x2F;core&#x2F;src&#x2F;future&#x2F;future.rs:124:9
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Every second frame is the same, a &lt;code&gt;from_generator::GenFuture&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;, which is not really that helpful.&lt;&#x2F;p&gt;
&lt;p&gt;There is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;74779&quot;&gt;Rust issue&lt;&#x2F;a&gt; about this.
A second &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;65978#issuecomment-1289334054&quot;&gt;related issue&lt;&#x2F;a&gt;
suggests to use &lt;code&gt;RUSTFLAGS=&quot;-Csymbol-mangling-version=v0&quot;&lt;&#x2F;code&gt; to improve that stack
trace a little, so lets try that.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;   4: async_codegen::b::{closure#0}
&lt;&#x2F;span&gt;&lt;span&gt;             at .&#x2F;src&#x2F;lib.rs:10:5
&lt;&#x2F;span&gt;&lt;span&gt;   5: &amp;lt;core::future::from_generator::GenFuture&amp;lt;async_codegen::b::{closure#0}&amp;gt; as core::future::future::Future&amp;gt;::poll
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;rustc&#x2F;897e37553bba8b42751c67658967889d11ecd120&#x2F;library&#x2F;core&#x2F;src&#x2F;future&#x2F;mod.rs:91:19
&lt;&#x2F;span&gt;&lt;span&gt;   6: async_codegen::a::{closure#0}
&lt;&#x2F;span&gt;&lt;span&gt;             at .&#x2F;src&#x2F;lib.rs:4:17
&lt;&#x2F;span&gt;&lt;span&gt;   7: &amp;lt;core::future::from_generator::GenFuture&amp;lt;async_codegen::a::{closure#0}&amp;gt; as core::future::future::Future&amp;gt;::poll
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;rustc&#x2F;897e37553bba8b42751c67658967889d11ecd120&#x2F;library&#x2F;core&#x2F;src&#x2F;future&#x2F;mod.rs:91:19
&lt;&#x2F;span&gt;&lt;span&gt;   8: async_codegen::tests::test_stack::{closure#0}
&lt;&#x2F;span&gt;&lt;span&gt;             at .&#x2F;src&#x2F;lib.rs:19:29
&lt;&#x2F;span&gt;&lt;span&gt;   9: &amp;lt;core::future::from_generator::GenFuture&amp;lt;async_codegen::tests::test_stack::{closure#0}&amp;gt; as core::future::future::Future&amp;gt;::poll
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;rustc&#x2F;897e37553bba8b42751c67658967889d11ecd120&#x2F;library&#x2F;core&#x2F;src&#x2F;future&#x2F;mod.rs:91:19
&lt;&#x2F;span&gt;&lt;span&gt;  10: &amp;lt;core::pin::Pin&amp;lt;&amp;amp;mut core::future::from_generator::GenFuture&amp;lt;async_codegen::tests::test_stack::{closure#0}&amp;gt;&amp;gt; as core::future::future::Future&amp;gt;::poll
&lt;&#x2F;span&gt;&lt;span&gt;             at &#x2F;rustc&#x2F;897e37553bba8b42751c67658967889d11ecd120&#x2F;library&#x2F;core&#x2F;src&#x2F;future&#x2F;future.rs:124:9
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is a lot more detail, thats for sure. We can now see that generic argument to &lt;code&gt;GenFuture&lt;&#x2F;code&gt;.
However all that detail is redundant and not meaningful.&lt;&#x2F;p&gt;
&lt;p&gt;And what are all those &lt;code&gt;{closure#0}&lt;&#x2F;code&gt; things?&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;We will start this journey by looking at what this &lt;code&gt;GetFuture&lt;&#x2F;code&gt; is. We find it
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;4603ac31b0655793a82f110f544dc1c6abc57bb7&#x2F;library&#x2F;core&#x2F;src&#x2F;future&#x2F;mod.rs#L64&quot;&gt;here in the &lt;code&gt;core&lt;&#x2F;code&gt; crate&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Its definition is quite simple, as is its &lt;code&gt;impl Future&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;GenFuture&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Generator&amp;lt;ResumeTy, Yield = ()&amp;gt;&amp;gt;(T)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Generator&amp;lt;ResumeTy, Yield = ()&amp;gt;&amp;gt; Future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;GenFuture&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Context&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Poll&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Output&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; SAFETY: Safe because we&amp;#39;re !Unpin + !Drop, and this is just a field projection.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; gen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ Pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;map_unchecked_mut(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Resume the generator, turning the `&amp;amp;mut Context` into a `NonNull` raw pointer. The
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; `.await` lowering will safely cast that back to a `&amp;amp;mut Context`.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; gen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;resume&lt;&#x2F;span&gt;&lt;span&gt;(ResumeTy(NonNull&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(cx)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;cast&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Context&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;())) {
&lt;&#x2F;span&gt;&lt;span&gt;            GeneratorState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Yielded(()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Pending&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            GeneratorState&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Complete(x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Ready(x)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is also a few helpers there, but we can look at them later.&lt;&#x2F;p&gt;
&lt;p&gt;What this, and the surrounding &lt;code&gt;from_generator&lt;&#x2F;code&gt; fn, tells us is that async
functions are based on generators internally.&lt;&#x2F;p&gt;
&lt;p&gt;What is a &lt;code&gt;Generator&lt;&#x2F;code&gt; then?&lt;&#x2F;p&gt;
&lt;p&gt;Generators are an unstable Rust feature that is documented in the
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;unstable-book&#x2F;language-features&#x2F;generators.html&quot;&gt;unstable book&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Lets look at an abbreviated definition. The complete docs for the trait are
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;core&#x2F;ops&#x2F;trait.Generator.html&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Generator&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;R = ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Yield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;resume&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; R
&lt;&#x2F;span&gt;&lt;span&gt;    ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;GeneratorState&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Yield, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Return&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;GeneratorState&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Y, R&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Yielded(Y)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    Complete(R)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is indeed very similar to futures, hence async functions are built on them.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;But how are async functions turned into generators? That is done in the compiler code
when transforming the AST (abstract syntax tree) of your Rust program into the
HIR (high-level intermediate representation).&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;1286ee23e4e2dec8c1696d3d76c6b26d97bbcf82&#x2F;compiler&#x2F;rustc_ast_lowering&#x2F;src&#x2F;expr.rs#L566&quot;&gt;&lt;code&gt;make_async_expr&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; function is responsible for turning an &lt;code&gt;async {}&lt;&#x2F;code&gt; block into code
similar to &lt;code&gt;std::future::from_generator(&amp;lt;generator&amp;gt;)&lt;&#x2F;code&gt;.
Immediately below is
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;1286ee23e4e2dec8c1696d3d76c6b26d97bbcf82&#x2F;compiler&#x2F;rustc_ast_lowering&#x2F;src&#x2F;expr.rs#L665&quot;&gt;&lt;code&gt;lower_expr_await&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
That function turns an &lt;code&gt;await&lt;&#x2F;code&gt; into a loop that will &lt;code&gt;poll&lt;&#x2F;code&gt; the underlying future
and &lt;code&gt;yield&lt;&#x2F;code&gt; when it is &lt;code&gt;Poll::Pending&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I would advise you to take a look at those functions. They are well documented
and quite understandable, even if you are not a compiler expert.&lt;&#x2F;p&gt;
&lt;p&gt;So now we know where exactly our &lt;code&gt;GenFuture&lt;&#x2F;code&gt; stack frames are coming from.&lt;&#x2F;p&gt;
&lt;p&gt;There is one missing piece though. Why do we have &lt;code&gt;{closure#0}&lt;&#x2F;code&gt; all over the place?&lt;&#x2F;p&gt;
&lt;p&gt;In a different part of the AST to HIR lowering step we will find the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;75c239402c8fafc89246a26bd066d6ff647e3794&#x2F;compiler&#x2F;rustc_ast_lowering&#x2F;src&#x2F;item.rs#L1062&quot;&gt;&lt;code&gt;lower_maybe_async_body&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; fn.&lt;&#x2F;p&gt;
&lt;p&gt;Its job is to transform a &lt;code&gt;async fn foo() {}&lt;&#x2F;code&gt; into a &lt;code&gt;fn foo() -&amp;gt; impl Future { async {} }&lt;&#x2F;code&gt;.
This function also calls into &lt;code&gt;make_async_expr&lt;&#x2F;code&gt; mentioned above, which then
further turns that &lt;code&gt;async {}&lt;&#x2F;code&gt; block into our generator. That generator is just
a special kind of closure internally in the compiler.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;can-we-do-better&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#can-we-do-better&quot; aria-label=&quot;Anchor link for: can-we-do-better&quot;&gt;#&lt;&#x2F;a&gt;
Can we do better?&lt;&#x2F;h1&gt;
&lt;p&gt;Well that is the remaining question now. Is it possible to remove these
confusing and distracting stack frames? Is &lt;code&gt;GenFuture&lt;&#x2F;code&gt; really necessary?
The compiler turns our &lt;code&gt;async {}&lt;&#x2F;code&gt; block into an &lt;code&gt;impl Generator&lt;&#x2F;code&gt; by some magic.
and this &lt;code&gt;Generator&lt;&#x2F;code&gt; trait is &lt;em&gt;extremely&lt;&#x2F;em&gt; similar to the &lt;code&gt;Future&lt;&#x2F;code&gt; trait.
Can’t the compiler just, well… create a &lt;code&gt;impl Future&lt;&#x2F;code&gt; by that same magic somehow?&lt;&#x2F;p&gt;
&lt;p&gt;And what about this &lt;code&gt;{closure#0}&lt;&#x2F;code&gt;? Here, even though it is a bit ugly, I do
agree that the function that returns the lazy future is distinct from the
&lt;em&gt;actual&lt;&#x2F;em&gt; future body. I have blogged before how this can be confusing and
&lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;non-lazy-futures&#x2F;&quot;&gt;even dangerous&lt;&#x2F;a&gt; sometimes.
You can yourself create a non-lazy future that does some real work on &lt;em&gt;call&lt;&#x2F;em&gt;,
vs lazily on &lt;code&gt;poll&lt;&#x2F;code&gt;. The &lt;em&gt;call&lt;&#x2F;em&gt; has a “normal” fn name, and the &lt;code&gt;poll&lt;&#x2F;code&gt; has this
weird &lt;code&gt;{closure#0}&lt;&#x2F;code&gt; appended at the end.&lt;&#x2F;p&gt;
&lt;p&gt;Things can get even more complex if you add more explicit, or implicit closures
into the mix. Consider this snippet for example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;do_tasks&lt;&#x2F;span&gt;&lt;span&gt;(tasks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   futures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;join_all(tasks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span&gt;| async { num }))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That is one implicit closure for the outer &lt;code&gt;async fn&lt;&#x2F;code&gt;, one explicit closure for
the &lt;code&gt;map&lt;&#x2F;code&gt;, and a third implicit one for the &lt;code&gt;async&lt;&#x2F;code&gt; block. So this will show up as
&lt;code&gt;do_tasks::{closure#0}::{closure#0}::{closure#0}&lt;&#x2F;code&gt; in your stack trace.
Not particularly great, but it also reflects the reality when you peel away
the abstractions.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So again, can we do any better? I’m actually intrigued to find out, and I will
spend some weekend coding time to dig deeper into how the compiler magic creates
&lt;code&gt;impl Generator&lt;&#x2F;code&gt; internally.&lt;&#x2F;p&gt;
&lt;p&gt;Similarly, it should be possible somehow to distinguish between &lt;em&gt;real&lt;&#x2F;em&gt; closures
and async constructs in the stack trace.
&lt;code&gt;do_tasks::{async-fn#0}::{closure#0}::{async-block#0}&lt;&#x2F;code&gt; does look a little nicer.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rustdoc doctests need fixing</title>
        <published>2022-10-28T00:00:00+00:00</published>
        <updated>2022-10-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/fix-rustdoc/"/>
        <id>https://swatinem.de/blog/fix-rustdoc/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/fix-rustdoc/">&lt;p&gt;Before going on a slight rant about why rustdoc &#x2F; doctests are broken, I first
want to highlight that &lt;strong&gt;rustdoc &#x2F; doctests are amazing !!!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I believe that great documentation and great tooling is a major contributor to
Rusts success. And one part of that is rustdoc, and doctests.&lt;&#x2F;p&gt;
&lt;p&gt;The fact that you can write documentation and examples, and have those at the same
time be part of your testsuite is an extreme productivity booster on the one hand,
and equally valuable for potential library users on the other.
What makes this even better is the fact that your documentation and examples will
never go out of date because they are an integrated part of your testsuite.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;whats-wrong&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#whats-wrong&quot; aria-label=&quot;Anchor link for: whats-wrong&quot;&gt;#&lt;&#x2F;a&gt;
Whats wrong?&lt;&#x2F;h1&gt;
&lt;p&gt;But if we look behind the curtain, we can see that one of the greatest features
of the Rust ecosystem does not look as pretty on the inside. Let us explore
some of the more gruesome sides of it. Maybe you will have the impression that
things are barely being held together with doc-tape, pun intended.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-compilation-model&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-compilation-model&quot; aria-label=&quot;Anchor link for: the-compilation-model&quot;&gt;#&lt;&#x2F;a&gt;
The compilation model&lt;&#x2F;h2&gt;
&lt;p&gt;So how do rustdoc doctests work internally?&lt;&#x2F;p&gt;
&lt;p&gt;Rustdoc integrates tightly with the rust compiler, and as a first step it will
invoke the rust compiler in a limited capacity. Just enough to resolve &lt;code&gt;#[cfg]&lt;&#x2F;code&gt;
attributes and know which items there are and what you are &lt;code&gt;use&lt;&#x2F;code&gt;-ing.&lt;&#x2F;p&gt;
&lt;p&gt;Fun fact: Triple-slash comments are just syntactic sugar for &lt;code&gt;#[doc = &quot;...&quot;]&lt;&#x2F;code&gt;
attributes. Also, did you know that you can combine that with &lt;code&gt;cfg_attr&lt;&#x2F;code&gt; too?&lt;&#x2F;p&gt;
&lt;p&gt;Anyway. Now that rustc has resolved all the attributes, and rustdoc has collected
all the items it needs to document with their desugared doc attributes, it will
then collect individual doctests.&lt;&#x2F;p&gt;
&lt;p&gt;Then, it will do a &lt;em&gt;purely textual&lt;&#x2F;em&gt; transformation to create a small &lt;code&gt;main&lt;&#x2F;code&gt;
program for each of the doctests.&lt;&#x2F;p&gt;
&lt;p&gt;Next, each of these snippets will be compiled &lt;em&gt;individually&lt;&#x2F;em&gt; via separate &lt;code&gt;rustc&lt;&#x2F;code&gt;
invocations. Some secret environment variables are provided to &lt;code&gt;rustc&lt;&#x2F;code&gt; to try
to re-map line numbers as best as possible, though there are bugs.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, the resulting executable will then be run, obviously, and deleted
immediately afterwards. Unless you pass the unstable &lt;code&gt;--persist-doctests&lt;&#x2F;code&gt; option.&lt;&#x2F;p&gt;
&lt;p&gt;This is not ideal.&lt;&#x2F;p&gt;
&lt;p&gt;People often criticize Rust for its slow compile times. Clearly those people have
never run &lt;code&gt;webpack&lt;&#x2F;code&gt; or the clang static analyzer in cross-translation-unit mode.&lt;&#x2F;p&gt;
&lt;p&gt;But the problem still stands. Rustdoc will compile &lt;strong&gt;and link&lt;&#x2F;strong&gt; each doctest as
an individual executable.&lt;&#x2F;p&gt;
&lt;p&gt;Cargo itself has a similar, but less severe problem as it will compile and link
individual executables for each integration test. Hence it is common knowledge
that you should &lt;a href=&quot;https:&#x2F;&#x2F;matklad.github.io&#x2F;2021&#x2F;02&#x2F;27&#x2F;delete-cargo-integration-tests.html&quot;&gt;delete (all but one) cargo integration tests&lt;&#x2F;a&gt;.
I have read previously that some bigger projects even have a &quot;no doctests&quot; policy,
though I can’t seem to find a linkable blog post for that. But the reason mentioned
there was also the unreasonable blowup in compilation and linking times.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;workspaces-files-and-line-numbers&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#workspaces-files-and-line-numbers&quot; aria-label=&quot;Anchor link for: workspaces-files-and-line-numbers&quot;&gt;#&lt;&#x2F;a&gt;
Workspaces, files and line numbers&lt;&#x2F;h2&gt;
&lt;p&gt;To further highlight some of the problems with doctests,
I will use the following example workspace with three crates:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; # crate-a&#x2F;src&#x2F;lib.rs:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;! Crate A
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;!
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;! Some random docs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;!
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;! ```
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;! assert_eq!(&amp;quot;a&amp;quot; &amp;quot;b&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;! &#x2F;&#x2F; ^ crate-a line 6, and yes the typo is intentional ;-)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;! ```
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; # crate-b&#x2F;src&#x2F;lib.rs:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;! Crate B
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;!
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;! # Examples
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;!
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;! ```
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;! assert_eq!(1, 2);
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;! &#x2F;&#x2F; ^ crate-b line 6
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;! ```
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; # crate-c&#x2F;src&#x2F;lib.rs:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F; Says hellew
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F; # Examples
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F; ```
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F; crate_c::hellew();
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F; ```
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;hellew&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    ( &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; &amp;lt;- intentional typo
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The examples I chose all have different kinds of errors in them, lets see them
in action.&lt;&#x2F;p&gt;
&lt;p&gt;First, &lt;code&gt;crate-c&lt;&#x2F;code&gt; has a typo in its Rust source:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt; cargo test --doc -p doctest-c
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling doctest-c v0.1.0 (&#x2F;home&#x2F;swatinem&#x2F;Coding&#x2F;swatinem.de&#x2F;playground&#x2F;doctest-c)
&lt;&#x2F;span&gt;&lt;span&gt;error: mismatched closing delimiter: `}`
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; playground&#x2F;doctest-c&#x2F;src&#x2F;lib.rs:9:5
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;8  | pub fn hellew() {
&lt;&#x2F;span&gt;&lt;span&gt;   |                 - closing delimiter possibly meant for this
&lt;&#x2F;span&gt;&lt;span&gt;9  |     ( &#x2F;&#x2F; &amp;lt;- intentional typo
&lt;&#x2F;span&gt;&lt;span&gt;   |     ^ unclosed delimiter
&lt;&#x2F;span&gt;&lt;span&gt;10 | }
&lt;&#x2F;span&gt;&lt;span&gt;   | ^ mismatched closing delimiter
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;error: could not compile `doctest-c` due to previous error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As we have discussed, doctests link to the underlying Rust library. So cargo
will first try to compile that and fail. In this case rustdoc is not even being
invoked. Moving on.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Next up, lets compile &lt;code&gt;crate-a&lt;&#x2F;code&gt; which has a typo in the doctest:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt; cargo test --doc -p doctest-a
&lt;&#x2F;span&gt;&lt;span&gt;   Doc-tests doctest-a
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;running 1 test
&lt;&#x2F;span&gt;&lt;span&gt;test src&#x2F;lib.rs - (line 5) ... FAILED
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;failures:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;---- src&#x2F;lib.rs - (line 5) stdout ----
&lt;&#x2F;span&gt;&lt;span&gt;error: no rules expected the token `&amp;quot;b&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt; --&amp;gt; src&#x2F;lib.rs:6:16
&lt;&#x2F;span&gt;&lt;span&gt;  |
&lt;&#x2F;span&gt;&lt;span&gt;3 | assert_eq!(&amp;quot;a&amp;quot; &amp;quot;b&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  |               -^^^ no rules expected this token in macro call
&lt;&#x2F;span&gt;&lt;span&gt;  |               |
&lt;&#x2F;span&gt;&lt;span&gt;  |               help: missing comma here
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;error: aborting due to previous error
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Couldn&amp;#39;t compile the test.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;failures:
&lt;&#x2F;span&gt;&lt;span&gt;    src&#x2F;lib.rs - (line 5)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.02s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So far so good, we ran some tests which eventually failed.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;test src&#x2F;lib.rs&lt;&#x2F;code&gt;, okay. I have a workspace with multiple crates.
Which &lt;code&gt;src&#x2F;lib.rs&lt;&#x2F;code&gt; are you talking about exactly?&lt;&#x2F;p&gt;
&lt;p&gt;The source location is also not quite exact. Line &lt;code&gt;6&lt;&#x2F;code&gt; is good enough, but column
&lt;code&gt;16&lt;&#x2F;code&gt; is a bit off. Off by &lt;code&gt;4&lt;&#x2F;code&gt;, or &lt;code&gt;&quot;&#x2F;&#x2F;! &quot;.len()&lt;&#x2F;code&gt; to be exact. But okay, I can
live with that.&lt;&#x2F;p&gt;
&lt;p&gt;But the provided source snippet says line &lt;code&gt;3&lt;&#x2F;code&gt;? Where is that coming from?&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Lets look at the third example, &lt;code&gt;crate-b&lt;&#x2F;code&gt; which should compile and fail at runtime.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt; cargo test --doc -p doctest-b
&lt;&#x2F;span&gt;&lt;span&gt;   Doc-tests doctest-b
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;running 1 test
&lt;&#x2F;span&gt;&lt;span&gt;test src&#x2F;lib.rs - (line 5) ... FAILED
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;failures:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;---- src&#x2F;lib.rs - (line 5) stdout ----
&lt;&#x2F;span&gt;&lt;span&gt;Test executable failed (exit status: 101).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;stderr:
&lt;&#x2F;span&gt;&lt;span&gt;thread &amp;#39;main&amp;#39; panicked at &amp;#39;assertion failed: `(left == right)`
&lt;&#x2F;span&gt;&lt;span&gt;  left: `1`,
&lt;&#x2F;span&gt;&lt;span&gt; right: `2`&amp;#39;, src&#x2F;lib.rs:3:1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The doctest (beginning on line &lt;code&gt;5&lt;&#x2F;code&gt;) panicked in file &lt;code&gt;src&#x2F;lib.rs&lt;&#x2F;code&gt; on line &lt;code&gt;3&lt;&#x2F;code&gt;.
Okay? This ominous line &lt;code&gt;3&lt;&#x2F;code&gt; again.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lets-go-nightly&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#lets-go-nightly&quot; aria-label=&quot;Anchor link for: lets-go-nightly&quot;&gt;#&lt;&#x2F;a&gt;
Lets go nightly&lt;&#x2F;h2&gt;
&lt;p&gt;Rustdoc and cargo have some unstable nightly-only options that can help a little
bit with the encountered problems.&lt;&#x2F;p&gt;
&lt;p&gt;I originally implemented these options to help with better code coverage reports.
The &lt;code&gt;-C instrument-coverage&lt;&#x2F;code&gt; option has been stabilized by now. But in order to
create code coverage reports you need the unstable &lt;code&gt;--persist-doctests&lt;&#x2F;code&gt; rustdoc
option.&lt;&#x2F;p&gt;
&lt;p&gt;Running with code coverage manually is quite a complicated procedure, though at
least it is &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustc&#x2F;instrument-coverage.html&quot;&gt;well documented&lt;&#x2F;a&gt;,
including instructions on how to use it with rustdoc.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily there is &lt;code&gt;cargo-llvm-cov&lt;&#x2F;code&gt; which makes this a lot more pleasant.
Though it has &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;taiki-e&#x2F;cargo-llvm-cov&#x2F;issues&#x2F;2&quot;&gt;limited support for doctests&lt;&#x2F;a&gt; for
reasons.&lt;&#x2F;p&gt;
&lt;p&gt;To demonstrate the problem with code coverage, I will invoke all the necessary
tools manually.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt; RUSTFLAGS=&amp;quot;-C instrument-coverage&amp;quot; \
&lt;&#x2F;span&gt;&lt;span&gt;  RUSTDOCFLAGS=&amp;quot;-C instrument-coverage -Z unstable-options --persist-doctests doctestbins&amp;quot; \
&lt;&#x2F;span&gt;&lt;span&gt;  LLVM_PROFILE_FILE=&amp;quot;doctests.profraw&amp;quot; \
&lt;&#x2F;span&gt;&lt;span&gt;    cargo +nightly test --doc -p doctest-b
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[…] same output as before
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I end up with a &lt;code&gt;playground&#x2F;doctest-b&#x2F;doctestbins&#x2F;src_lib_rs_5_0&#x2F;rust_out&lt;&#x2F;code&gt; executable, and
the profiler output in &lt;code&gt;playground&#x2F;doctest-b&#x2F;doctests.profraw&lt;&#x2F;code&gt;. Note that both these
files ended up in the crate directory, more on that later.&lt;&#x2F;p&gt;
&lt;p&gt;Next up, creating the coverage report:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt; llvm-profdata merge -sparse doctest-b&#x2F;doctests.profraw -o doctest-b&#x2F;doctests.profdata
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; llvm-cov show --object doctest-b&#x2F;doctestbins&#x2F;src_lib_rs_5_0&#x2F;rust_out  --instr-profile doctest-b&#x2F;doctests.profdata
&lt;&#x2F;span&gt;&lt;span&gt;    1|       |&#x2F;&#x2F;! Crate B
&lt;&#x2F;span&gt;&lt;span&gt;    2|       |&#x2F;&#x2F;!
&lt;&#x2F;span&gt;&lt;span&gt;    3|       |&#x2F;&#x2F;! # Examples
&lt;&#x2F;span&gt;&lt;span&gt;    4|       |&#x2F;&#x2F;!
&lt;&#x2F;span&gt;&lt;span&gt;    5|      1|&#x2F;&#x2F;! ```
&lt;&#x2F;span&gt;&lt;span&gt;    6|      1|&#x2F;&#x2F;! assert_eq!(1, 2);
&lt;&#x2F;span&gt;&lt;span&gt;    7|      1|&#x2F;&#x2F;! &#x2F;&#x2F; ^ crate-b line 6
&lt;&#x2F;span&gt;&lt;span&gt;    8|      1|&#x2F;&#x2F;! ```
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So far so good. &lt;code&gt;llvm-cov report --summary-only&lt;&#x2F;code&gt; will also print full file names
and reveals to me that I am dealing with a full absolute path.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Now that we have briefly looked at code coverage, lets revisit the earlier
examples and use the unstable &lt;code&gt;-Z doctest-in-workspace&lt;&#x2F;code&gt; cargo flag, which
internally passes &lt;code&gt;--test-run-directory&lt;&#x2F;code&gt; to rustdoc.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt; cargo +nightly test --doc -p doctest-a -Z doctest-in-workspace
&lt;&#x2F;span&gt;&lt;span&gt;   Doc-tests doctest-a
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;running 1 test
&lt;&#x2F;span&gt;&lt;span&gt;test playground&#x2F;doctest-a&#x2F;src&#x2F;lib.rs - (line 5) ... FAILED
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;failures:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;---- playground&#x2F;doctest-a&#x2F;src&#x2F;lib.rs - (line 5) stdout ----
&lt;&#x2F;span&gt;&lt;span&gt;error: no rules expected the token `&amp;quot;b&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt; --&amp;gt; playground&#x2F;doctest-a&#x2F;src&#x2F;lib.rs:6:16
&lt;&#x2F;span&gt;&lt;span&gt;  |
&lt;&#x2F;span&gt;&lt;span&gt;3 | assert_eq!(&amp;quot;a&amp;quot; &amp;quot;b&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  |               -^^^ no rules expected this token in macro call
&lt;&#x2F;span&gt;&lt;span&gt;  |               |
&lt;&#x2F;span&gt;&lt;span&gt;  |               help: missing comma here
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;error: aborting due to previous error
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Couldn&amp;#39;t compile the test.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;failures:
&lt;&#x2F;span&gt;&lt;span&gt;    playground&#x2F;doctest-a&#x2F;src&#x2F;lib.rs - (line 5)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nice, now I know which exact file is failing, instead of having to look at the
&lt;code&gt;Doc-tests&lt;&#x2F;code&gt; header.&lt;&#x2F;p&gt;
&lt;p&gt;The line&#x2F;column numbers are still slightly off though.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The failing doctest:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt; cargo +nightly test --doc -p doctest-b -Z doctest-in-workspace
&lt;&#x2F;span&gt;&lt;span&gt;   Doc-tests doctest-b
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;running 1 test
&lt;&#x2F;span&gt;&lt;span&gt;test playground&#x2F;doctest-b&#x2F;src&#x2F;lib.rs - (line 5) ... FAILED
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;failures:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;---- playground&#x2F;doctest-b&#x2F;src&#x2F;lib.rs - (line 5) stdout ----
&lt;&#x2F;span&gt;&lt;span&gt;Test executable failed (exit status: 101).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;stderr:
&lt;&#x2F;span&gt;&lt;span&gt;thread &amp;#39;main&amp;#39; panicked at &amp;#39;assertion failed: `(left == right)`
&lt;&#x2F;span&gt;&lt;span&gt;  left: `1`,
&lt;&#x2F;span&gt;&lt;span&gt; right: `2`&amp;#39;, playground&#x2F;doctest-b&#x2F;src&#x2F;lib.rs:3:1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Same here. I get better workspace-relative filenames, similar to other kinds of
tests. But again, the line number is off.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;To my own surprise, there is no change when running code coverage tests.
In both cases the llvm tools report full absolute paths.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe things have improved here. I remember there were similar issue as with the
cargo output, as I developed the &lt;code&gt;doctest-in-workspace&lt;&#x2F;code&gt; option specifically with
code coverage in mind. Or maybe my example was too simplistic and I would have
needed to have multiple doctests from multiple workspace crates merged into a
single code coverage report.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;where-do-we-go-from-here&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#where-do-we-go-from-here&quot; aria-label=&quot;Anchor link for: where-do-we-go-from-here&quot;&gt;#&lt;&#x2F;a&gt;
Where do we go from here?&lt;&#x2F;h1&gt;
&lt;p&gt;Well, I initially got the urge to write this blog post as I
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;103682&quot;&gt;opened a PR&lt;&#x2F;a&gt; today to stabilize
&lt;code&gt;rustdoc --test-run-directory&lt;&#x2F;code&gt;, which itself is just an implementation detail
for &lt;code&gt;cargo --doctest-in-workspace&lt;&#x2F;code&gt; which is what I actually
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;issues&#x2F;9427&quot;&gt;want to stabilize&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I hope I have demonstrated with these examples here that &lt;code&gt;cargo --doctest-in-workspace&lt;&#x2F;code&gt;
is a nice thing to have. And to even make it the default eventually.&lt;&#x2F;p&gt;
&lt;p&gt;But &lt;code&gt;rustdoc --test-run-directory&lt;&#x2F;code&gt;? Not so sure. This feels like more doc-tape
piled on the already way too brittle doctest infrastructure.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Rustdoc doctests need an overhaul.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Instead of a testsuite driven by rustdoc that compiles, links and runs each
doctest individually, we should rather have rustdoc
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;75341&quot;&gt;output a single binary&lt;&#x2F;a&gt;
with a testsuite.&lt;&#x2F;p&gt;
&lt;p&gt;Decouple the compilation of doctests from how they run, and have cargo control
the whole process. That way it would better match the way rustc and other kinds
of tests are being handled.&lt;&#x2F;p&gt;
&lt;p&gt;It should &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;56232&quot;&gt;integrate with check&#x2F;clippy&lt;&#x2F;a&gt;.
With more sophisticated source location tracking, we could have better lines&#x2F;column
numbers in error messages like above,
in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;79417&quot;&gt;code coverage reports&lt;&#x2F;a&gt;, or
even in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;81070&quot;&gt;&lt;code&gt;#[doc = include_str!(...)]&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With a well generated test harness, we could also have a usable
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;98550&quot;&gt;&lt;code&gt;--nocapture&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Last but not least, it could lead to
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nextest-rs&#x2F;nextest&#x2F;issues&#x2F;16&quot;&gt;better integration with nextest&lt;&#x2F;a&gt;
as well.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;In the end, rustdoc is still an amazing tool, and doctests an amazing concept.&lt;&#x2F;p&gt;
&lt;p&gt;But there are some mighty skeletons lurking in the closet. I have looked into
the belly of the beast and I can say that, sadly, I don’t have the endurance to
see such a transformation through. I’m even exhausted after proposing my
stabilization PR and writing this blog post.&lt;&#x2F;p&gt;
&lt;p&gt;I do hope that someone will tackle this eventually. As I mentioned in the beginning,
documentation and great tooling are a big driver for Rusts continued success,
and I am looking forward to seeing things improve over time.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Inspiration</title>
        <published>2022-10-27T00:00:00+00:00</published>
        <updated>2022-10-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/inspiration/"/>
        <id>https://swatinem.de/blog/inspiration/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/inspiration/">&lt;p&gt;In my opinion, one of the most important, but also very underappreciated skills
is to think outside the box. Or put differently, to challenge the status quo
and re-think some deeply rooted thought patterns.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;We have always done things this way&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;… is the worst of arguments to do things a certain way.&lt;&#x2F;p&gt;
&lt;p&gt;I recently stumbled upon a &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;elonmusk&#x2F;status&#x2F;1584817409651007488&quot;&gt;quote&lt;&#x2F;a&gt;
thats being attributed to Elon Musk (who himself replied to the tweet so it might have been him):&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Innovation comes from questioning the way things have been done before.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Another great inspiration comes from John Carmack:&lt;&#x2F;p&gt;
&lt;div class=&quot;video&quot; &gt;
  &lt;iframe
    src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;YOZnqjHkULc&quot;
    webkitallowfullscreen
    mozallowfullscreen
    allowfullscreen
  &gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;Many times things are the way they are for important and valid historical reasons.&lt;&#x2F;p&gt;
&lt;p&gt;But sometimes things are the way they are because we just didn’t know any better.&lt;&#x2F;p&gt;
&lt;p&gt;Or, because we didn’t have time to actually make something good.&lt;&#x2F;p&gt;
&lt;p&gt;[…]&lt;&#x2F;p&gt;
&lt;p&gt;Many times things that might even have been optimal originally no longer are,
and there are better ways to do things.&lt;&#x2F;p&gt;
&lt;p&gt;So in many areas it’s almost perceived wisdom that you shouldn’t reinvent the wheel.&lt;&#x2F;p&gt;
&lt;p&gt;But I would urge you to occasionally try anyways.&lt;&#x2F;p&gt;
&lt;p&gt;You will be better for the effort, and this is how eventually we get better wheels.
People just going ahead and trying.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Change is hard. Overcoming the resistance to change might be the hardest thing.&lt;&#x2F;p&gt;
&lt;p&gt;So what are some of the things you would change, but which seem impossible to
do so, just because it sounds like insanity to even think differently?&lt;&#x2F;p&gt;
&lt;p&gt;For me, one societal thing might be the classical view of weeks with weekends.
I have been &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;balanced-weeks&#x2F;&quot;&gt;daydreaming about this before&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;On the technical side, maybe the C compilation model and fundamentals of how
programs work and interact. But I don’t have any better ideas either.&lt;&#x2F;p&gt;
&lt;p&gt;Not changing things for the sake of backwards compatibility has its value. But
it also has a cost. Can we quantify that somehow?&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Non-abbreviated Abbreviations</title>
        <published>2022-09-19T00:00:00+00:00</published>
        <updated>2022-09-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/abbreviations/"/>
        <id>https://swatinem.de/blog/abbreviations/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/abbreviations/">&lt;p&gt;I have recently investigated a very interesting performance problem in Sentrys
symbolication infrastructure.&lt;&#x2F;p&gt;
&lt;p&gt;We got reports of an increasing number of out-of-memory situations of our infrastructure.
This started rather randomly, and was not correlated to any deploys. I had the
hunch that it might be related to some new form of data that customers were
throwing at us.&lt;&#x2F;p&gt;
&lt;p&gt;And indeed, after some time, we were able to track this down a customer project
that was fetching gigantic debug files from a custom symbol source. These files
were on the order of &lt;strong&gt;5.5 G&lt;&#x2F;strong&gt; in size, which made them the largest valid debug
files I have seen thus far.&lt;&#x2F;p&gt;
&lt;p&gt;The next step was reproducing the issue locally. Sure enough, processing this
debug file took an unreasonably long amount of time, and a whooping &lt;strong&gt;18 G&lt;&#x2F;strong&gt; in
peak memory usage. Attaching a profiler to that long running process revealed that
it was indeed spending a large portion of its running time in &lt;em&gt;dropping&lt;&#x2F;em&gt; &lt;code&gt;gimli::Abbreviations&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Looking through the &lt;code&gt;gimli&lt;&#x2F;code&gt; code, it became clear that none of the involved types
had custom &lt;code&gt;Drop&lt;&#x2F;code&gt; implementations, but some nested &lt;code&gt;Vec&lt;&#x2F;code&gt;s. This could potentially
explain the large memory usage, and with that comes the runtime for allocations
and so on.&lt;&#x2F;p&gt;
&lt;p&gt;But where do all the &lt;code&gt;Abbreviations&lt;&#x2F;code&gt; come from?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-are-abbreviations&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#what-are-abbreviations&quot; aria-label=&quot;Anchor link for: what-are-abbreviations&quot;&gt;#&lt;&#x2F;a&gt;
What are Abbreviations&lt;&#x2F;h1&gt;
&lt;p&gt;Put simply, abbreviations in DWARF describe the schema, or the blueprint of
debug information entries (DIE).
This schema describes the type of DIEs and its attributes and children. The DIE
itself then just has a code referring to its abbreviation &#x2F; schema, and then just
the raw contents of its attributes and children.&lt;&#x2F;p&gt;
&lt;p&gt;These abbreviations are meant to be reused a lot. There can be more than one list
of abbreviations. A compilation unit (CU) can refer to its abbreviations list via an
offset, and the DIE code is just the index in this list.&lt;&#x2F;p&gt;
&lt;p&gt;Depending on the linker, you can end up with a single global abbreviations list,
or with smaller lists, one for each CU.
Unfortunately most linkers are quite dumb, they mostly just concatenate
raw bytes and patch up some offset here and there. Optimizing and deduplicating
DWARF data is complex and slow after all.&lt;&#x2F;p&gt;
&lt;p&gt;Turns out, the notoriously slow MacOS &lt;code&gt;dsymutil&lt;&#x2F;code&gt; actually does some DWARF optimization.
Specially to our case here, it does merge and deduplicate all the abbreviations.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-gimli-problem&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-gimli-problem&quot; aria-label=&quot;Anchor link for: the-gimli-problem&quot;&gt;#&lt;&#x2F;a&gt;
The &lt;code&gt;gimli&lt;&#x2F;code&gt; Problem&lt;&#x2F;h1&gt;
&lt;p&gt;Getting back to my investigation, I found out that the crate we use for DWARF handling,
&lt;code&gt;gimli&lt;&#x2F;code&gt;, was rather optimized for the case where each CU has its own abbreviations.
each CU would parse (and allocate) the abbreviations it was referring to.
Abbreviations were not shared across CUs as is the case with smarter linkers.
So far this was never a problem because we were dealing with relatively &quot;small&quot;
files. But the file I was looking at was gigantic, and had a huge number of CUs.
doing all this duplicate work and memory allocations for each CU got very expensive
very quickly.&lt;&#x2F;p&gt;
&lt;p&gt;I reported a problem in detail and also suggested a PR to fix it. There is also
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gimli-rs&#x2F;gimli&#x2F;pull&#x2F;628&quot;&gt;another PR&lt;&#x2F;a&gt; that offers the same
benefits with a bit simpler API.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;doing-some-more-tests&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#doing-some-more-tests&quot; aria-label=&quot;Anchor link for: doing-some-more-tests&quot;&gt;#&lt;&#x2F;a&gt;
Doing some more tests&lt;&#x2F;h1&gt;
&lt;p&gt;Okay, lets look at some more examples and run some tests.&lt;&#x2F;p&gt;
&lt;p&gt;A well known and public project with very large debug files is Electron. You can
download these debug files from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;electron&#x2F;electron&#x2F;releases&#x2F;tag&#x2F;v20.1.4&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;electron&#x2F;electron&#x2F;releases&#x2F;tag&#x2F;v20.1.4&lt;&#x2F;a&gt;
if you are interested to reproduce my experiments.&lt;&#x2F;p&gt;
&lt;p&gt;I have downloaded the MacOS x64 and Linux x64 debug files. The Linux debug file
in the electron archive additionally has zlib compressed debug sections.
We can unpack those ahead of time using &lt;code&gt;llvm-objcopy --decompress-debug-sections electron.debug&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Using &lt;code&gt;llvm-objdump --section-headers&lt;&#x2F;code&gt; we can look at both the MacOS and Linux
debug files.&lt;&#x2F;p&gt;
&lt;p&gt;The relevant line for the MacOS symbol is: &lt;code&gt;__debug_abbrev 00004e61&lt;&#x2F;code&gt;, and for
Linux it is &lt;code&gt;.debug_abbrev 02df0539&lt;&#x2F;code&gt;. Or written as decimal, the MacOS
abbreviations are feathery light with only about 20K, whereas the linux file
has a whooping 50M of abbreviations.&lt;&#x2F;p&gt;
&lt;p&gt;We can also count these with a bit of shell magic: &lt;code&gt;llvm-dwarfdump --debug-abbrev electron.dsym | grep DW_TAG | wc -l&lt;&#x2F;code&gt;.
There is &lt;code&gt;1_112&lt;&#x2F;code&gt; for MacOS, and &lt;code&gt;3_475_269&lt;&#x2F;code&gt; for Linux. That is a lot.&lt;&#x2F;p&gt;
&lt;p&gt;And how expensive is having redundant abbreviations in the raw data, vs redundant
parsing, vs deduplicated parsing?&lt;&#x2F;p&gt;
&lt;p&gt;I wrote a very simple test that just iterates over all of the CUs in a file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; units &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; dwarf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;units&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(header) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; units&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _unit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; dwarf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unit&lt;&#x2F;span&gt;&lt;span&gt;(header)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running this code on the published version of gimli, vs the PR linked above
gives me the following change for the Linux file that has one abbreviation per CU:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;Benchmark #1: .&#x2F;gimli-0.26.2 .&#x2F;tests&#x2F;abbrevs&#x2F;electron.debug
&lt;&#x2F;span&gt;&lt;span&gt;  Time (mean ± σ):     852.6 ms ±  23.9 ms    [User: 800.5 ms, System: 52.6 ms]
&lt;&#x2F;span&gt;&lt;span&gt;  Range (min … max):   820.0 ms … 879.8 ms    20 runs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Benchmark #2: .&#x2F;gimli-patched-626 .&#x2F;tests&#x2F;abbrevs&#x2F;electron.debug
&lt;&#x2F;span&gt;&lt;span&gt;  Time (mean ± σ):     860.2 ms ±  28.1 ms    [User: 801.0 ms, System: 52.8 ms]
&lt;&#x2F;span&gt;&lt;span&gt;  Range (min … max):   819.4 ms … 916.0 ms    20 runs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A tiny regression from more indirection. Lets try the same for the deduplicated MacOS DWARF:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;Benchmark #3: .&#x2F;gimli-0.26.2 .&#x2F;tests&#x2F;abbrevs&#x2F;electron.dsym
&lt;&#x2F;span&gt;&lt;span&gt;  Time (mean ± σ):      4.780 s ±  0.052 s    [User: 4.705 s, System: 0.066 s]
&lt;&#x2F;span&gt;&lt;span&gt;  Range (min … max):    4.719 s …  4.874 s    20 runs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Benchmark #4: .&#x2F;gimli-patched-626 .&#x2F;tests&#x2F;abbrevs&#x2F;electron.dsym
&lt;&#x2F;span&gt;&lt;span&gt;  Time (mean ± σ):     225.1 ms ±   1.8 ms    [User: 185.5 ms, System: 36.3 ms]
&lt;&#x2F;span&gt;&lt;span&gt;  Range (min … max):   219.6 ms … 230.7 ms    20 runs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That is a &lt;em&gt;huge&lt;&#x2F;em&gt; difference right there.&lt;&#x2F;p&gt;
&lt;p&gt;And finally with the original customer debug file I investigated:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;Benchmark #5: .&#x2F;gimli-0.26.2 .&#x2F;tests&#x2F;abbrevs&#x2F;giant
&lt;&#x2F;span&gt;&lt;span&gt;  Time (mean ± σ):     105.556 s ±  1.733 s    [User: 104.921 s, System: 0.514 s]
&lt;&#x2F;span&gt;&lt;span&gt;  Range (min … max):   102.769 s … 108.016 s    10 runs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Benchmark #6: .&#x2F;gimli-patched-626 .&#x2F;tests&#x2F;abbrevs&#x2F;giant
&lt;&#x2F;span&gt;&lt;span&gt;  Time (mean ± σ):     760.7 ms ±  28.7 ms    [User: 647.5 ms, System: 104.7 ms]
&lt;&#x2F;span&gt;&lt;span&gt;  Range (min … max):   725.7 ms … 814.6 ms    10 runs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That is indeed a night and day difference.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;In both cases, this makes a two orders of magnitude difference. However the example
only tests an extremely limited part of our DWARF processing.&lt;&#x2F;p&gt;
&lt;p&gt;But it does highlight how important it is to cache redundant computations, as well
as to deduplicate the raw data in the first place.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A deep dive into Portable PDB Sequence Points</title>
        <published>2022-09-02T00:00:00+00:00</published>
        <updated>2022-09-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/sequence-points/"/>
        <id>https://swatinem.de/blog/sequence-points/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/sequence-points/">&lt;p&gt;Following up my last post about SourceMaps, this one here is about Portable PDB
Sequence Points.&lt;&#x2F;p&gt;
&lt;p&gt;Only took me about a month to procrastinate ;-)&lt;&#x2F;p&gt;
&lt;h1 id=&quot;sequence-points-abstractly&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#sequence-points-abstractly&quot; aria-label=&quot;Anchor link for: sequence-points-abstractly&quot;&gt;#&lt;&#x2F;a&gt;
Sequence Points, abstractly&lt;&#x2F;h1&gt;
&lt;p&gt;Similar to SourceMaps and other debug formats, the sequence points allow
mapping from IL offsets to source information.&lt;&#x2F;p&gt;
&lt;p&gt;The Portable PDB Format is specified in a
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dotnet&#x2F;runtime&#x2F;blob&#x2F;main&#x2F;docs&#x2F;design&#x2F;specs&#x2F;PortablePdb-Metadata.md&quot;&gt;markdown document here&lt;&#x2F;a&gt;
and is complementary to the main
&lt;a href=&quot;https:&#x2F;&#x2F;www.ecma-international.org&#x2F;publications-and-standards&#x2F;standards&#x2F;ecma-335&#x2F;&quot;&gt;ECMA-335 specification&lt;&#x2F;a&gt;
that is available in PDF format.&lt;&#x2F;p&gt;
&lt;p&gt;In particular, Portable PDB defines a new &lt;code&gt;#Pdb&lt;&#x2F;code&gt; stream, a bunch of new tables
contained in the &lt;code&gt;#~&lt;&#x2F;code&gt; stream, as well as new Blob formats that are within the
&lt;code&gt;#Blob&lt;&#x2F;code&gt; heap.&lt;&#x2F;p&gt;
&lt;p&gt;Section &lt;code&gt;II.23.2&lt;&#x2F;code&gt; of the main &lt;code&gt;ECMA-335&lt;&#x2F;code&gt; spec describes a very specific way to
save compressed integers that does not look very familiar, and comes with the
tradeoff of only allowing at most &lt;code&gt;29&lt;&#x2F;code&gt; usable bits.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0b0xxx_xxxx&lt;&#x2F;code&gt;: 7 usable bits encoded as 1 byte.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;0b10xx_xxxx 0bxxxx_xxxx&lt;&#x2F;code&gt;: 14 usable bits encoded as 2 bytes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;0b110x_xxxx 0bxxxx_xxxx 0bxxxx_xxxx 0bxxxx_xxxx&lt;&#x2F;code&gt;: 29 usable bits encoded as 4 bytes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The encoding is using big endian byte order, and the signed encoding is using
rotation to move the sign bit into the last position.&lt;&#x2F;p&gt;
&lt;p&gt;One of the additional tables defined in the Portable PDB spec is the
&lt;code&gt;MethodDebugInformation&lt;&#x2F;code&gt; which references a blob in &lt;code&gt;#Blob&lt;&#x2F;code&gt; heap containing
sequence points. The &lt;code&gt;MethodDebugInformation&lt;&#x2F;code&gt; and the sequence points blob can
also reference source files in the &lt;code&gt;Document&lt;&#x2F;code&gt; table.&lt;&#x2F;p&gt;
&lt;p&gt;These sequence points have the following information:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the start IL offset,&lt;&#x2F;li&gt;
&lt;li&gt;the document,&lt;&#x2F;li&gt;
&lt;li&gt;the start line &#x2F; column,&lt;&#x2F;li&gt;
&lt;li&gt;the end line &#x2F; column.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There is a bunch of things to note here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Only the start IL offset is explicitly given, so similar to SourceMaps, each
sequence point implicitly extends to the next one.&lt;&#x2F;li&gt;
&lt;li&gt;There are also &quot;hidden&quot; sequence points, probably to denote gaps in the mappings.&lt;&#x2F;li&gt;
&lt;li&gt;One specialty here is that the sequence points do not give a &lt;em&gt;position&lt;&#x2F;em&gt; in the
source code, but rather a &lt;em&gt;span&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;state-machine&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#state-machine&quot; aria-label=&quot;Anchor link for: state-machine&quot;&gt;#&lt;&#x2F;a&gt;
State Machine&lt;&#x2F;h1&gt;
&lt;p&gt;Similar to the other mapping formats, the sequence points blob also acts as a
state machine.&lt;&#x2F;p&gt;
&lt;p&gt;You have some mutable state, and have instructions and deltas that modify that
state.&lt;&#x2F;p&gt;
&lt;p&gt;In this case, we start out with a document, and the blob can have an instruction
that changes that document. The IL offset, line and column are also given as a delta to
the previous record. And the source span is also delta-encoded.&lt;&#x2F;p&gt;
&lt;p&gt;The encoding is further complicated by the fact that either signed or unsigned
encoding is used based on some condition. For example, the column delta is
unsigned in case the source span does not span multiple lines. It is signed
otherwise. This totally makes sense, as a source span should never go backwards.
But it does add complexity to the decoder &#x2F; encoder.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;decoding-a-mapping&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#decoding-a-mapping&quot; aria-label=&quot;Anchor link for: decoding-a-mapping&quot;&gt;#&lt;&#x2F;a&gt;
Decoding a mapping&lt;&#x2F;h1&gt;
&lt;p&gt;As an exercise, lets try to decode the following blob, and walk through the
bytes one by one.&lt;&#x2F;p&gt;
&lt;p&gt;Our initial state machine starts out at all &lt;code&gt;0&lt;&#x2F;code&gt; values.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;blob: 00 00 18 2e 09 06 00 12 04 08 06 00 01 02 79
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;0x00: add 0 to the IL offset
&lt;&#x2F;span&gt;&lt;span&gt;0x00: set source span line delta to 0
&lt;&#x2F;span&gt;&lt;span&gt;0x18: set source span column delta to 24
&lt;&#x2F;span&gt;&lt;span&gt;0x2e: add 46 to the start line, unsigned for the first entry
&lt;&#x2F;span&gt;&lt;span&gt;0x09: add 9 to the start column, unsigned for the first entry
&lt;&#x2F;span&gt;&lt;span&gt;- Sequence Point: { il_offset: 0, source_span: [46:9 - 46:33] }
&lt;&#x2F;span&gt;&lt;span&gt;0x06: add 6 to the IL offset
&lt;&#x2F;span&gt;&lt;span&gt;0x00: set source span line delta to 0
&lt;&#x2F;span&gt;&lt;span&gt;0x12: set source span column delta to 18
&lt;&#x2F;span&gt;&lt;span&gt;0x04: add 2 to the start line, signed
&lt;&#x2F;span&gt;&lt;span&gt;0x08: add 4 to the start column, signed
&lt;&#x2F;span&gt;&lt;span&gt;- Sequence Point: { il_offset: 6, source_span: [48:13 - 48:31] }
&lt;&#x2F;span&gt;&lt;span&gt;0x06: add 6 to the IL offset
&lt;&#x2F;span&gt;&lt;span&gt;0x00: set source span line delta to 0
&lt;&#x2F;span&gt;&lt;span&gt;0x01: set source span column delta to 1
&lt;&#x2F;span&gt;&lt;span&gt;0x02: add 1 to the start line, signed
&lt;&#x2F;span&gt;&lt;span&gt;0x79 (0b0111_1001, 0b1111_1100 rotated): subtract 4 from the start column
&lt;&#x2F;span&gt;&lt;span&gt;- Sequence Point: { il_offset: 12, source_span: [49:9 - 49:10] }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Mind you, this was a very simple (but real-life) example. We did not have any
hidden sequence points, document changes or source spans that span multiple lines.
But it did highlight how parsing the sequence points blob work, and also
that we can get along with 5 bytes per sequence point for simple cases. Not bad.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;how-to-use-these-mappings&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#how-to-use-these-mappings&quot; aria-label=&quot;Anchor link for: how-to-use-these-mappings&quot;&gt;#&lt;&#x2F;a&gt;
How to use these mappings&lt;&#x2F;h1&gt;
&lt;p&gt;So how do we make use of these mappings?&lt;&#x2F;p&gt;
&lt;p&gt;Assuming we have a &quot;normal&quot; .NET runtime, we can get the IL offset trivially via the
&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;api&#x2F;system.diagnostics.stackframe.getiloffset&quot;&gt;&lt;code&gt;StackFrame.GetILOffset&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
method. However, what might not be entirely obvious from our look at the format
so far is that the IL offset is &lt;em&gt;per method&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Getting the method index is not particularly obvious or well documented.
Starting from the
&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;api&#x2F;system.diagnostics.stackframe.getmethod&quot;&gt;&lt;code&gt;Method&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
of a &lt;code&gt;StackFrame&lt;&#x2F;code&gt;, we can access the
&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;api&#x2F;system.reflection.memberinfo.metadatatoken&quot;&gt;&lt;code&gt;MetadataToken&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Section &lt;code&gt;II.22&lt;&#x2F;code&gt; of the &lt;code&gt;ECMA-335&lt;&#x2F;code&gt; spec says how to interpret this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Uncoded metadata tokens are 4-byte unsigned integers, which contain the metadata
table index in the most significant byte and a 1-based record index in the three least-significant bytes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The table index for &lt;code&gt;MethodDef&lt;&#x2F;code&gt;s is &lt;code&gt;0x06&lt;&#x2F;code&gt; which we can assert, and the rest
is the method index that also corresponds to the index inside our &lt;code&gt;MethodDebugInformation&lt;&#x2F;code&gt;
table.&lt;&#x2F;p&gt;
&lt;p&gt;And there you have it. With these two pieces of information, we can resolve a
&lt;code&gt;StackFrame&lt;&#x2F;code&gt; to its source location, or even source span.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-elephant-in-the-room&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-elephant-in-the-room&quot; aria-label=&quot;Anchor link for: the-elephant-in-the-room&quot;&gt;#&lt;&#x2F;a&gt;
The elephant in the room&lt;&#x2F;h1&gt;
&lt;p&gt;What is missing now is actually finding the Portable PDB file.&lt;&#x2F;p&gt;
&lt;p&gt;The PDB file has a self-describing UUID inside its &lt;code&gt;#Pdb&lt;&#x2F;code&gt; stream. And the
corresponding executable file has a special &lt;code&gt;CodeView&lt;&#x2F;code&gt; record that is slightly
different from normal &lt;code&gt;CodeView&lt;&#x2F;code&gt; records though.
The difference is documented in
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dotnet&#x2F;runtime&#x2F;blob&#x2F;main&#x2F;docs&#x2F;design&#x2F;specs&#x2F;PE-COFF.md#codeview-debug-directory-entry-type-2&quot;&gt;this specification&lt;&#x2F;a&gt;
though. I have previously written about some
&lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;format-ossification&#x2F;&quot;&gt;pitfalls related to CodeView records&lt;&#x2F;a&gt; btw.&lt;&#x2F;p&gt;
&lt;p&gt;Either way, getting the &lt;code&gt;CodeView&lt;&#x2F;code&gt; record and thus the UUID at runtime is not
trivial. It requires reading that record directly from the PE file via the
&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;api&#x2F;system.reflection.portableexecutable.pereader&quot;&gt;&lt;code&gt;PEReader&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
class. Creating a file stream to access that file from disk might not always
be possible. Neither is getting a hold of the memory region where the PE file
might already be mapped at.&lt;&#x2F;p&gt;
&lt;p&gt;This is still an unsolved problem right now unfortunately. Though even ahead-of-time
compiled mobile apps ship the PE files in their app bundles. Most likely for
the embedded runtime metadata. Which makes me hopeful that we can access those
at runtime somehow and close the loop.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;summary&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;#&lt;&#x2F;a&gt;
Summary&lt;&#x2F;h1&gt;
&lt;p&gt;We took a deep dive into the Portable PDB format, and we learned a bunch of
things about it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Portable PDBs extend the &lt;code&gt;ECMA-335&lt;&#x2F;code&gt; format. Both are reasonably well documented.&lt;&#x2F;li&gt;
&lt;li&gt;The PDB has a list of &lt;code&gt;Document&lt;&#x2F;code&gt;s and &lt;code&gt;MethodDebugInformation&lt;&#x2F;code&gt; with sequence points.&lt;&#x2F;li&gt;
&lt;li&gt;The sequence points blob forms a state machine that yields sequence points.&lt;&#x2F;li&gt;
&lt;li&gt;These sequence points have an IL offset, a document and source span.&lt;&#x2F;li&gt;
&lt;li&gt;You can get the IL offset and the method index at runtime fairly easily.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The Portable PDB does not include the data needed to pretty print function
signatures. That is embedded in the &lt;code&gt;ECMA-335&lt;&#x2F;code&gt; metadata of the executable file.&lt;&#x2F;p&gt;
&lt;p&gt;Speaking of which, the executable also has a reference to the Portable PDB via
its UUID. But that is not readily available at runtime.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Two down, one to go. I previously explained SourceMaps in detail, and Portable
PDB Sequence Points today. I plan to take a look at more formats
in future posts, so look out for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DWARF line programs&lt;&#x2F;li&gt;
&lt;li&gt;PDB line programs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A deep dive into SourceMaps</title>
        <published>2022-08-08T00:00:00+00:00</published>
        <updated>2022-08-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/sourcemaps/"/>
        <id>https://swatinem.de/blog/sourcemaps/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/sourcemaps/">&lt;p&gt;In my last post I committed to the idea of doing a deep dive series into a couple
of debug formats, or more specifically, how their &lt;em&gt;line mappings&lt;&#x2F;em&gt; &#x2F; &lt;em&gt;line programs&lt;&#x2F;em&gt; work.&lt;&#x2F;p&gt;
&lt;p&gt;To start things off, we will be learning how the SourceMap &lt;code&gt;mappings&lt;&#x2F;code&gt; work.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;sourcemaps-abstractly&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#sourcemaps-abstractly&quot; aria-label=&quot;Anchor link for: sourcemaps-abstractly&quot;&gt;#&lt;&#x2F;a&gt;
SourceMaps, abstractly&lt;&#x2F;h1&gt;
&lt;p&gt;For people not familiar with the matter, SourceMaps are a building block used in
the JavaScript ecosystem. They are used to map from a location in the &quot;final&quot;
(minified, transpiled) JavaScript code back to the original source, which might
not even be JavaScript.&lt;&#x2F;p&gt;
&lt;p&gt;The SourceMap &lt;em&gt;specification&lt;&#x2F;em&gt; lives in a
&lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;document&#x2F;d&#x2F;1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k&#x2F;edit#&quot;&gt;Google Doc&lt;&#x2F;a&gt;
which I would argue is a weird format, but adequate to understand how to interpret it.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example of some minified JS, plus its corresponding SourceMap.&lt;&#x2F;p&gt;
&lt;!-- prettier-ignore --&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;(){}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;version&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;names&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;abcd&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;sources&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;tests&#x2F;fixtures&#x2F;simple&#x2F;original.js&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;sourcesContent&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&#x2F;&#x2F; .&#x2F;node_modules&#x2F;.bin&#x2F;terser -c -m --module tests&#x2F;fixtures&#x2F;simple&#x2F;original.js --source-map includeSources -o tests&#x2F;fixtures&#x2F;simple&#x2F;minified.js&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;function abcd() {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;export default abcd;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  ]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;mappings&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;AACA,SAASA,oBACMA&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, the SourceMap is a human readable JSON file. It has a list of filenames in &lt;code&gt;sources&lt;&#x2F;code&gt;, and optionally
their contents in &lt;code&gt;sourcesContent&lt;&#x2F;code&gt;. We also have a list of &lt;code&gt;names&lt;&#x2F;code&gt;, which is used
to refer to original non obfuscated identifiers.&lt;&#x2F;p&gt;
&lt;p&gt;And then we have the &lt;code&gt;mappings&lt;&#x2F;code&gt; we want to look at in more detail. As they are
embedded in a JSON file, we have some restrictions on the type of data we can
put here. We can’t use plain binary data directly. SourceMaps thus use an ASCII
friendly base-64 &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Variable-length_quantity&quot;&gt;Variable-length quantity (VLQ)&lt;&#x2F;a&gt; encoding for this purpose.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;state-machines&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#state-machines&quot; aria-label=&quot;Anchor link for: state-machines&quot;&gt;#&lt;&#x2F;a&gt;
State Machines&lt;&#x2F;h1&gt;
&lt;p&gt;The &lt;code&gt;mappings&lt;&#x2F;code&gt; do not contain individual entries, but rather operate on a &lt;em&gt;state machine&lt;&#x2F;em&gt;.
This means you have to keep some internal state around, which is being incrementally updated
by &lt;em&gt;instructions&lt;&#x2F;em&gt; or &lt;em&gt;deltas&lt;&#x2F;em&gt; from the &lt;code&gt;mappings&lt;&#x2F;code&gt;.
Every now and then this state is then flushed out and represents a concrete mapping entry.&lt;&#x2F;p&gt;
&lt;p&gt;One of such entries, called a &lt;code&gt;Token&lt;&#x2F;code&gt; in SourceMap terminology, can have the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the &quot;minified&quot; line number,&lt;&#x2F;li&gt;
&lt;li&gt;the &quot;minified&quot; column number, encoded as delta,&lt;&#x2F;li&gt;
&lt;li&gt;(optionally), an index into the &lt;code&gt;sources&lt;&#x2F;code&gt;, encoded as delta,&lt;&#x2F;li&gt;
&lt;li&gt;(optionally), the line and column, encoded as delta,&lt;&#x2F;li&gt;
&lt;li&gt;(optionally), an index into the &lt;code&gt;names&lt;&#x2F;code&gt;, encoded as delta.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are two special &quot;instructions&quot; for the state machine:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x27;;&#x27;&lt;&#x2F;code&gt; increases the &quot;minified&quot; line number by 1, and resets the &quot;minified&quot; column back to &lt;code&gt;0&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x27;,&#x27;&lt;&#x2F;code&gt; yields the current state as a token and &quot;resets&quot; the optional fields. The &quot;reset&quot; is not back to &lt;code&gt;0&lt;&#x2F;code&gt; but rather to
&lt;code&gt;None&lt;&#x2F;code&gt;, which means the next token yielded will not have a &lt;code&gt;source&lt;&#x2F;code&gt; for example.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Otherwise we have a number of &lt;em&gt;Base 64 VLQ&lt;&#x2F;em&gt; entries, either:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;1, updating the &quot;minified&quot; column number,&lt;&#x2F;li&gt;
&lt;li&gt;4, additionally updating and yielding the source index, line and column,&lt;&#x2F;li&gt;
&lt;li&gt;or 5, which additionally yields updates the name index and yields it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The resulting tokens are sorted by &quot;minified&quot; line, and &quot;minified&quot; column.&lt;&#x2F;p&gt;
&lt;p&gt;In the end, the most gains from this format come from the delta encoding. The
&lt;em&gt;Base 64 VLQ&lt;&#x2F;em&gt; on itself is not very efficient. A raw byte has &lt;code&gt;256&lt;&#x2F;code&gt; unique
values. Base 64 encoding reduces that to &lt;code&gt;64&lt;&#x2F;code&gt;. Another &quot;continue&quot; bitflag
reduces that to &lt;code&gt;32&lt;&#x2F;code&gt;. Or 5 useful bits per byte.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;decoding-the-mappings&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#decoding-the-mappings&quot; aria-label=&quot;Anchor link for: decoding-the-mappings&quot;&gt;#&lt;&#x2F;a&gt;
Decoding the mappings&lt;&#x2F;h1&gt;
&lt;p&gt;Lets look at the concrete &lt;code&gt;mappings&lt;&#x2F;code&gt; above in more detail and decode it.
As a reminder, our &lt;code&gt;mappings&lt;&#x2F;code&gt; are &lt;code&gt;AACA,SAASA,oBACMA&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&amp;#39;A&amp;#39; (b64: 0b0000_0000): add 0 to the minified column number
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;A&amp;#39; (b64: 0b0000_0000): add 0 to the sources index
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;C&amp;#39; (b64: 0b0000_0010): add 1 to the line number
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;A&amp;#39; (b64: 0b0000_0000): add 0 to the column number
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;: yield the token: {0, 0, 0, 1, 0, None}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;S&amp;#39; (b64: 0b0001_0010): add 9 to the minified column number
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;A&amp;#39; (b64: 0b0000_0000): add 0 to the sources index
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;A&amp;#39; (b64: 0b0000_0000): add 0 to the line number
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;S&amp;#39; (b64: 0b0001_0010): add 9 to the column number
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;A&amp;#39; (b64: 0b0000_0000): add 0 to the name index
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,&amp;#39;: yield the token: {0, 9, 0, 1, 9, 0}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;o&amp;#39; (b64: 0b0010_1000): continue with next byte, lowest 5 bits are `0b0_1000`
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;B&amp;#39; (b64: 0b0000_0001): next 5 bits `0b0_0001` are prepended to the number, resulting in `0b0010_1000`:
&lt;&#x2F;span&gt;&lt;span&gt;                        add 20 to the minified column number
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;A&amp;#39; (b64: 0b0000_0000): add 0 to the sources index
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;C&amp;#39; (b64: 0b0000_0010): add 1 to the line number
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;M&amp;#39; (b64: 0b0000_1100): add 6 to the column number
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;A&amp;#39; (b64: 0b0000_0000): add 0 to the name index
&lt;&#x2F;span&gt;&lt;span&gt;end: yield the token: {0, 29, 0, 2, 15, 0}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Decoding these &lt;code&gt;mappings&lt;&#x2F;code&gt; thus yields the following tokens:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;{ minified_line: 0, minified_column: 0, source_index: 0, source_line: 1, source_column: 0, name_index: None }
&lt;&#x2F;span&gt;&lt;span&gt;{ minified_line: 0, minified_column: 9, source_index: 0, source_line: 1, source_column: 9, name_index: 0 }
&lt;&#x2F;span&gt;&lt;span&gt;{ minified_line: 0, minified_column: 29, source_index: 0, source_line: 2, source_column: 15, name_index: 0 }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;how-to-use-these-mappings&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#how-to-use-these-mappings&quot; aria-label=&quot;Anchor link for: how-to-use-these-mappings&quot;&gt;#&lt;&#x2F;a&gt;
How to use these &lt;code&gt;mappings&lt;&#x2F;code&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;We have a pretty simple example with only a single source file in &lt;code&gt;sources&lt;&#x2F;code&gt;.
Simple enough so we can look at the minified and the original source side by side:&lt;&#x2F;p&gt;
&lt;!-- prettier-ignore --&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; --- minified ---
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;(){}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; - line 0, column 0 corresponds to line 0, column 0 in `original.js`
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;       ^- line 0, column 9 corresponds to line 1, column 9 in `original.js` and has name `abcd`
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;                           ^- line 0, column 29 corresponds to line 2, column 15 in `original.js` and has name `abcd`
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; --- original ---
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; .&#x2F;node_modules&#x2F;.bin&#x2F;terser -c -m --module tests&#x2F;fixtures&#x2F;simple&#x2F;original.js --source-map includeSources -o tests&#x2F;fixtures&#x2F;simple&#x2F;minified.js
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;abcd&lt;&#x2F;span&gt;&lt;span&gt;() {}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;       ^- the second token points here on line 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span&gt;abcd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;             ^- the third token points here on line 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One thing to note here is that the SourceMap tokens only represent a single
point in the minified file, not a &lt;em&gt;range&lt;&#x2F;em&gt;.
To do a lookup, you can exploit the fact that these tokens are properly sorted
by line and column to do a binary search.
Since we don’t have an &lt;em&gt;explicit&lt;&#x2F;em&gt; range, most implementations assume that a
token has an &lt;em&gt;implicit&lt;&#x2F;em&gt; range up to the next token, or to infinity for the last
token.&lt;&#x2F;p&gt;
&lt;p&gt;For example, if we perform the following lookup:&lt;&#x2F;p&gt;
&lt;!-- prettier-ignore --&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;(){}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;                 ^- line 0, column 19
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That lookup would resolve to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;{ minified_line: 0, minified_column: 9, source_index: 0, source_line: 1, source_column: 9, name_index: 0 }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which is not entirely true, as the token points to the wrong original source line.
The resolution here depends on the tool producing the source map. In most cases
though we are close enough. And the tools are good enough to insert tokens in
all &quot;interesting&quot; places.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;summary&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;#&lt;&#x2F;a&gt;
Summary&lt;&#x2F;h1&gt;
&lt;p&gt;To summarize the SourceMap format, lets look at a few properties that it has,
what kind of data it encodes, and which lookups we can use it for.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;SourceMaps are JSON, and have a ASCII-encoded &lt;code&gt;mappings&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;They have a list of &lt;code&gt;sources&lt;&#x2F;code&gt; with optional &lt;code&gt;sourcesContent&lt;&#x2F;code&gt; and &lt;code&gt;names&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;mappings&lt;&#x2F;code&gt; encodes deltas that operate on a state machine which yields Tokens.&lt;&#x2F;li&gt;
&lt;li&gt;These tokens can map from &lt;code&gt;line&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;column&lt;&#x2F;code&gt; pairs to:&lt;&#x2F;li&gt;
&lt;li&gt;… the original source location given by an index into &lt;code&gt;sources&lt;&#x2F;code&gt;, a &lt;code&gt;line&lt;&#x2F;code&gt; and &lt;code&gt;column&lt;&#x2F;code&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;plus optionally an index into &lt;code&gt;names&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;SourceMaps thus allow us to look up a minified location, mapping it to an
approximate position in the original source.&lt;&#x2F;p&gt;
&lt;p&gt;Most importantly, SourceMaps do not directly encode information about function
scopes and names. Though there are extensions that can do that, but those are
not widely used.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;There you have it. A deep dive into the SourceMap format, with a focus on its
&lt;em&gt;Base 64 VLQ&lt;&#x2F;em&gt; &lt;code&gt;mappings&lt;&#x2F;code&gt;. This was just one example of debug file formats and
the way they encode information compactly. I plan to take a look at more formats
in future posts, so look out for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Portable PDB sequence points&lt;&#x2F;li&gt;
&lt;li&gt;DWARF line programs&lt;&#x2F;li&gt;
&lt;li&gt;PDB line programs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Magic of zerocopy</title>
        <published>2022-08-06T00:00:00+00:00</published>
        <updated>2022-08-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/magic-zerocopy/"/>
        <id>https://swatinem.de/blog/magic-zerocopy/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/magic-zerocopy/">&lt;p&gt;If you want to parse binary formats in Rust, you have a few crates to chose from
apart from rolling your own.&lt;&#x2F;p&gt;
&lt;p&gt;Some popular contenders are &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;zerocopy&#x2F;latest&#x2F;zerocopy&#x2F;index.html&quot;&gt;&lt;code&gt;zerocopy&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;scroll&#x2F;latest&#x2F;scroll&#x2F;index.html&quot;&gt;&lt;code&gt;scroll&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I would like to take this chance to explain the difference between the two,
which one you likely want to use in which situation, and why &lt;code&gt;zerocopy&lt;&#x2F;code&gt; truely
is magical.&lt;&#x2F;p&gt;
&lt;p&gt;However, neither is perfect, there is some papercuts and ideas for improvement
that I will explain in the end as well.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-does-zero-copy-mean&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#what-does-zero-copy-mean&quot; aria-label=&quot;Anchor link for: what-does-zero-copy-mean&quot;&gt;#&lt;&#x2F;a&gt;
What does zero-copy mean?&lt;&#x2F;h1&gt;
&lt;p&gt;To start off, we assume that are dealing with a byte slice, &lt;code&gt;&amp;amp;[u8]&lt;&#x2F;code&gt;. We can
either read a complete file from disk, or rather just &lt;code&gt;mmap&lt;&#x2F;code&gt; into our address
space. The topic of incremental &#x2F; streaming parsing that works with network
streams is something else entirely that I do not want to touch now.&lt;&#x2F;p&gt;
&lt;p&gt;So our complete binary file content is available as a &lt;code&gt;&amp;amp;&#x27;data [u8]&lt;&#x2F;code&gt;, and we want
to parse it into its logical format. As much as possible, we want to refer to
data inside that buffer directly rather than &lt;em&gt;copying&lt;&#x2F;em&gt; things out.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;scroll&lt;&#x2F;code&gt; has partial support, as it allows to parse a &lt;code&gt;&amp;amp;&#x27;data str&lt;&#x2F;code&gt; which points
directly to the original buffer without allocating and copying a new &lt;code&gt;String&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Parsing other data-types however, &lt;code&gt;scroll&lt;&#x2F;code&gt; tends to rather copy the contents
out of the buffer when parsing. Whereas &lt;code&gt;zerocopy&lt;&#x2F;code&gt; will give you a &lt;code&gt;&amp;amp;&#x27;data T&lt;&#x2F;code&gt;
by default.&lt;&#x2F;p&gt;
&lt;p&gt;Both approaches have advantages and disadvantages that we will look at.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;examples&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#examples&quot; aria-label=&quot;Anchor link for: examples&quot;&gt;#&lt;&#x2F;a&gt;
Examples&lt;&#x2F;h1&gt;
&lt;p&gt;Lets look at a small example of how to use both crates. In both cases we want
to write, and then read, a simple nested struct to&#x2F;from a buffer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;scroll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;{IOwrite&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Pread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Pwrite&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; SizeWith}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;zerocopy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;{AsBytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; FromBytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; LayoutVerified}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Copy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; PartialEq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; AsBytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; FromBytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Pread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Pwrite&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; IOwrite&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; SizeWith)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;MyNestedPodStruct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    _pad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Copy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; PartialEq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; AsBytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; FromBytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Pread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Pwrite&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; IOwrite&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; SizeWith)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;MyPodStruct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    nested&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; MyNestedPodStruct,
&lt;&#x2F;span&gt;&lt;span&gt;    c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is already a mouthful. My structs are &lt;code&gt;#[repr(C)]&lt;&#x2F;code&gt; so that I have full
control over their memory layout. &lt;code&gt;zerocopy&lt;&#x2F;code&gt; also has the additional requirement
that one has to be explicit about padding, in between members, or at the end.
A &lt;code&gt;#[reps(packed)]&lt;&#x2F;code&gt; annotation would avoid the need for that, at a cost that we
will discuss soon.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;zerocopy&lt;&#x2F;code&gt; requires us to derive the &lt;code&gt;AsBytes&lt;&#x2F;code&gt; and &lt;code&gt;FromBytes&lt;&#x2F;code&gt; traits, that as
their name makes clear allows us to read a struct from raw bytes, or interpret
it as raw bytes that we can write.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;scroll&lt;&#x2F;code&gt; on the other hand has a bunch of traits that we can derive. &lt;code&gt;Pread&lt;&#x2F;code&gt;,
&lt;code&gt;Pwrite&lt;&#x2F;code&gt; to read and write respectively, &lt;code&gt;IOWrite&lt;&#x2F;code&gt; to be able to write a
struct to a &lt;code&gt;std::io::Write&lt;&#x2F;code&gt; stream, and &lt;code&gt;SizeWith&lt;&#x2F;code&gt; for structs that have a
fixed size that does not depend on any &lt;code&gt;Context&lt;&#x2F;code&gt;, more on that later.&lt;&#x2F;p&gt;
&lt;p&gt;Lets define a few instances of our struct we want to write and then read back:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; structs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[MyPodStruct] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    MyPodStruct {
&lt;&#x2F;span&gt;&lt;span&gt;        nested&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; MyNestedPodStruct {
&lt;&#x2F;span&gt;&lt;span&gt;            a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            _pad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    MyPodStruct {
&lt;&#x2F;span&gt;&lt;span&gt;        nested&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; MyNestedPodStruct {
&lt;&#x2F;span&gt;&lt;span&gt;            a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            _pad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;code&gt;zerocopy&lt;&#x2F;code&gt; lets us turn this whole slice into a &lt;code&gt;&amp;amp;[u8]&lt;&#x2F;code&gt; which we can then
copy around or write as we see fit:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span&gt;(structs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For reading, there is a wide range of options. You can read&#x2F;cast an exactly-sized
buffer, a prefix or a suffix. You can specifically chose to read &lt;code&gt;unaligned&lt;&#x2F;code&gt;.
All these different methods are implemented as constructors of the
&lt;code&gt;LayoutVerified&lt;&#x2F;code&gt; struct, which can then be turned into a reference or a slice.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example of how to get a single struct or the whole slice from our
buffer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;LayoutVerified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, [MyPodStruct]&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new_slice(buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed_slice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parsed_slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_slice&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(structs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; parsed_slice)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(lv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; _rest) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;LayoutVerified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, MyPodStruct&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new_from_prefix(buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed_one &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; lv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_ref&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;structs[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; parsed_one)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One thing to note here is that we have to provide explicit type annotations, as
for some reason the compiler is not able to infer it automatically.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;As far as I know, &lt;code&gt;scroll&lt;&#x2F;code&gt; on the other hand does not allow to directly write
either a slice, or a reference. That is the reason why I derived &lt;code&gt;Copy&lt;&#x2F;code&gt; and by
extension &lt;code&gt;Clone&lt;&#x2F;code&gt; for our structs above.
Please reach out to me and prove me wrong here.&lt;&#x2F;p&gt;
&lt;p&gt;We thus write owned copies one by one here:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; structs {
&lt;&#x2F;span&gt;&lt;span&gt;    buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iowrite&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Parsing also does not work for a whole slice as far as I know (please prove me wrong),
and as &lt;code&gt;scroll&lt;&#x2F;code&gt; is not zero-copy, we have to collect parsed structs into a
&lt;code&gt;Vec&lt;&#x2F;code&gt; manually:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; parsed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;gread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;MyPodStruct&amp;gt;(offset)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(structs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; parsed)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;why-this-matters&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#why-this-matters&quot; aria-label=&quot;Anchor link for: why-this-matters&quot;&gt;#&lt;&#x2F;a&gt;
Why this matters&lt;&#x2F;h1&gt;
&lt;p&gt;When parsing binary files, we want that parsing to be as fast as possible, we
also want to allocate &#x2F; copy as little memory as possible.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;zerocopy&lt;&#x2F;code&gt; crate truely is zero-copy. It does a fixed number of pointer
arithmetic (essentially an alignment check, and bounds check) to verify the
layout of our buffer. I guess that’s why its main type is called &lt;code&gt;LayoutVerified&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;scroll&lt;&#x2F;code&gt; on the other hand parses each struct (in fact, each member) one by
one and copied them into a &lt;code&gt;Vec&lt;&#x2F;code&gt; that needs to be allocated. It is thus a lot
more expensive. You don’t necessarily need to parse and collect &lt;em&gt;everything&lt;&#x2F;em&gt;.
You can parse structs on demand. And if your structs have a fixed size
(we derived &lt;code&gt;SizeWith&lt;&#x2F;code&gt;), you can skip ahead in the source buffer to do some
random access.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;endianness-and-other-context&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#endianness-and-other-context&quot; aria-label=&quot;Anchor link for: endianness-and-other-context&quot;&gt;#&lt;&#x2F;a&gt;
Endianness and other Context&lt;&#x2F;h1&gt;
&lt;p&gt;Which approach is better is, as always, a matter of tradeoffs.
&lt;code&gt;zerocopy&lt;&#x2F;code&gt; is the better choice if all your raw data structures have a fixed
size and endianness. &lt;code&gt;scroll&lt;&#x2F;code&gt; is the better choice if your data structures have
a variable size, or you want to parse files with dynamic endianness.
&lt;code&gt;scroll&lt;&#x2F;code&gt; calls this &lt;code&gt;Context&lt;&#x2F;code&gt;, and there is a
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;scroll&#x2F;latest&#x2F;scroll&#x2F;ctx&#x2F;index.html#example&quot;&gt;complete example&lt;&#x2F;a&gt;
how to create a custom parser that is aware of both endianness and the size of
certain fields.&lt;&#x2F;p&gt;
&lt;p&gt;While &lt;code&gt;scroll&lt;&#x2F;code&gt; supports endianness aware parsing based on a runtime context,
&lt;code&gt;zerocopy&lt;&#x2F;code&gt; is very different here. It supports types that are byteorder aware,
but their byteorder is fixed at compile time. A &lt;code&gt;zerocopy&lt;&#x2F;code&gt; &lt;code&gt;U64&amp;lt;LE&amp;gt;&lt;&#x2F;code&gt; is
statically typed, and its &lt;code&gt;get&lt;&#x2F;code&gt; method is optimized at compile to only read LE
data.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;making-zero-copy-context-aware&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#making-zero-copy-context-aware&quot; aria-label=&quot;Anchor link for: making-zero-copy-context-aware&quot;&gt;#&lt;&#x2F;a&gt;
Making zero-copy context-aware&lt;&#x2F;h1&gt;
&lt;p&gt;With that &lt;code&gt;zerocopy&lt;&#x2F;code&gt; limitation, I thought is was a fun exercise to make it
&lt;em&gt;somehow&lt;&#x2F;em&gt; handle formats of all kinds of endianness and field sizes at runtime.&lt;&#x2F;p&gt;
&lt;p&gt;As example, I will choose the ELF header, which has differently sized fields
for 32-bit and 64-bit variants, as well as different endianness. The header is
also self-describing as it has two flags for bit-width and endianness, which can
be read without knowing either as it is just a bunch of bytes. It looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(FromBytes)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;ElfIdent &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F; ELF Magic, must be `b&amp;quot;\x7fELF&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    e_mag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;; 4],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F; Field size flag: 1 = 32-bit variant, 2 = 64-bit.
&lt;&#x2F;span&gt;&lt;span&gt;    e_class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F; Endianness flag: 1 = LE, 2 = BE.
&lt;&#x2F;span&gt;&lt;span&gt;    e_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    e_version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_abi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_abiversion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_pad&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;; 7],
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, we can define different structures for each of the variants. As you might
have guessed, this leads to combinatorial explosion as we have to define four
different variants. Here are two to keep things simple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;zerocopy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;byteorder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;align&lt;&#x2F;span&gt;&lt;span&gt;(8))]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(FromBytes)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;ElfHeader_L64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    e_ident&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; ElfIdent,
&lt;&#x2F;span&gt;&lt;span&gt;    e_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U16&amp;lt;LE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_machine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U16&amp;lt;LE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U32&amp;lt;LE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U64&amp;lt;LE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_phoff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U64&amp;lt;LE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_shoff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U64&amp;lt;LE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U32&amp;lt;LE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_ehsize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U16&amp;lt;LE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_phentsize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U16&amp;lt;LE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_phnum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U16&amp;lt;LE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_shentsize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U16&amp;lt;LE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_shnum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U16&amp;lt;LE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_shstrndx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U16&amp;lt;LE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;align&lt;&#x2F;span&gt;&lt;span&gt;(4))]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(FromBytes)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;ElfHeader_B32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    e_ident&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; ElfIdent,
&lt;&#x2F;span&gt;&lt;span&gt;    e_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U16&amp;lt;BE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_machine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U16&amp;lt;BE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U32&amp;lt;BE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U32&amp;lt;BE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_phoff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U32&amp;lt;BE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_shoff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U32&amp;lt;BE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U32&amp;lt;BE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_ehsize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U16&amp;lt;BE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_phentsize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U16&amp;lt;BE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_phnum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U16&amp;lt;BE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_shentsize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U16&amp;lt;BE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_shnum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U16&amp;lt;BE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    e_shstrndx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;U16&amp;lt;BE&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;test_struct_layout&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;align_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ElfHeader_L64&amp;gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;size_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ElfHeader_L64&amp;gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;align_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ElfHeader_B32&amp;gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;size_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ElfHeader_B32&amp;gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;52&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Implementing this example, I was a bit surprised that I had to specify the
alignment of my structures manually. Turns out the &lt;code&gt;zerocopy::U64&lt;&#x2F;code&gt; and similar
types are unaligned. Which means reading from them needs to use the appropriate
instructions that do unaligned loads which might be a bit slower, but I guess
this is a wash in the grand scheme of things.&lt;&#x2F;p&gt;
&lt;p&gt;A recommendation here would be to write tests that explicitly check the size
and alignment of your structs. Very helpful. I wouldn’t have caught this issue
otherwise.&lt;&#x2F;p&gt;
&lt;p&gt;With these two variants defined, we can then create a context-aware wrapper
around that, which choses the variant at runtime depending on its input:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;ElfHeader&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;#39;data&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;L64&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; ElfHeader_L64)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;B32&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; ElfHeader_B32)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; TODO: L32, B64
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;ElfHeader&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;])&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(e_ident&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; _rest) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;LayoutVerified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, ElfIdent&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new_from_prefix(buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; e_ident&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;e_mag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!= *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\x7f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;ELF&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; e_ident&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;e_class {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; 32-bit
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; e_ident&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;e_data {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; LE
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;todo!&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; BE
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(e_header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; rest) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;                            LayoutVerified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, ElfHeader_B32&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new_from_prefix(buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;B32&lt;&#x2F;span&gt;&lt;span&gt;(e_header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_ref&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; rest))
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; 64-bit
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; e_ident&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;e_data {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; LE
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(e_header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; rest) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;                            LayoutVerified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, ElfHeader_L64&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new_from_prefix(buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;L64&lt;&#x2F;span&gt;&lt;span&gt;(e_header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_ref&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; rest))
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; BE
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;todo!&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;e_shoff&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            ElfHeader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;L64&lt;&#x2F;span&gt;&lt;span&gt;(header) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;e_shoff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            ElfHeader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;B32&lt;&#x2F;span&gt;&lt;span&gt;(header) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;e_shoff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This wrapper can have accessors that check at runtime which variant the
underlying data has and do the appropriate access in a typesafe manner.
That wrapper is also lightweight and zero-copy. It only has the enum discriminant,
plus a pointer to the &lt;em&gt;same&lt;&#x2F;em&gt; underlying data in all cases. So it is essentially
a tagged pointer.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;api-papercuts&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#api-papercuts&quot; aria-label=&quot;Anchor link for: api-papercuts&quot;&gt;#&lt;&#x2F;a&gt;
API Papercuts&lt;&#x2F;h1&gt;
&lt;p&gt;Well there you have it. A detailed explanation of &lt;code&gt;zerocopy&lt;&#x2F;code&gt; and &lt;code&gt;scroll&lt;&#x2F;code&gt;, the
difference between the two, and how &lt;code&gt;zerocopy&lt;&#x2F;code&gt; can be extremely lightweight as
it only validates the correct size and alignment of things without doing any
parsing at all. It only &quot;parses&quot; things when you start to access that data.&lt;&#x2F;p&gt;
&lt;p&gt;Both of these have their pros and cons, both have different use cases and
strength. &lt;code&gt;zerocopy&lt;&#x2F;code&gt; is better if you have fixed size structs and don’t need to
care about endianness, although it &lt;em&gt;is&lt;&#x2F;em&gt; possible to make that work with some
effort as shown above.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;scroll&lt;&#x2F;code&gt; makes these use cases trivial, at the cost of parsing everything ahead
of time and copying things out into agnostic structs.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Unfortunately though, both these libraries are a bit hard to work with, and
their APIs could use some streamlining.&lt;&#x2F;p&gt;
&lt;p&gt;The API surface of &lt;code&gt;scroll&lt;&#x2F;code&gt; is huge, as it supports a ton of features. But
the main APIs that you interact with are very unintuitive and confusing. There
is &lt;code&gt;pread&lt;&#x2F;code&gt; and &lt;code&gt;gread&lt;&#x2F;code&gt;. Whats the difference between the two? I honestly can’t
tell you without looking at the docs, which I have to do constantly as I simply
can’t remember that myself.&lt;&#x2F;p&gt;
&lt;p&gt;There are quite some papercuts with &lt;code&gt;zerocopy&lt;&#x2F;code&gt; as well. First of, why is
&lt;code&gt;LayoutVerified&lt;&#x2F;code&gt; a concrete type to begin with? I can’t think of a good use-case
for which you want to actually keep that type around. You rather want to
immediately turn it &lt;code&gt;into_ref&lt;&#x2F;code&gt; or &lt;code&gt;into_slice&lt;&#x2F;code&gt;. Free functions would serve that
use-case a lot better.&lt;&#x2F;p&gt;
&lt;p&gt;The API is also extremely repetitive, as we have seen in this example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mystructs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;LayoutVerified&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, [MyPodStruct]&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new_slice(buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_slice&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I repeat the &lt;code&gt;slice&lt;&#x2F;code&gt; three times in this line. &lt;code&gt;new_slice&lt;&#x2F;code&gt; and &lt;code&gt;into_slice&lt;&#x2F;code&gt;,
plus the fact that these two functions only exist if the type parameter itself
is a slice. Can I rather have a single free function instead of this?&lt;&#x2F;p&gt;
&lt;p&gt;Usage of the &lt;code&gt;Unaligned&lt;&#x2F;code&gt; APIs is a bit confusing, and I was surprised to see
that the endian-aware types such as &lt;code&gt;U64&lt;&#x2F;code&gt; are unaligned as well.&lt;&#x2F;p&gt;
&lt;p&gt;The usage of custom derive for &lt;code&gt;FromBytes&lt;&#x2F;code&gt; is interesting as it validates safe
usage. But it also means that it is impossible to derive if you have some
foreign types such as &lt;code&gt;Uuid&lt;&#x2F;code&gt; which are &lt;code&gt;#[repr(C)]&lt;&#x2F;code&gt; but do not implement
&lt;code&gt;FromBytes&lt;&#x2F;code&gt; themselves. &lt;code&gt;uuid&lt;&#x2F;code&gt; btw has unstable support for &lt;code&gt;zerocopy&lt;&#x2F;code&gt;, but it
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;uuid&#x2F;latest&#x2F;uuid&#x2F;#unstable-features&quot;&gt;requires passing in custom RUSTFLAGS&lt;&#x2F;a&gt;
which is inconvenient.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;variable-size-and-compressed-data&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#variable-size-and-compressed-data&quot; aria-label=&quot;Anchor link for: variable-size-and-compressed-data&quot;&gt;#&lt;&#x2F;a&gt;
Variable-size and Compressed data&lt;&#x2F;h1&gt;
&lt;p&gt;A use-case that I have not explored in this post, which is rather trivial
to handle in &lt;code&gt;scroll&lt;&#x2F;code&gt; but close to impossible in &lt;code&gt;zerocopy&lt;&#x2F;code&gt; is truly variable
sized data, such as structures that embed length-prefixed or nul-terminated
strings inline. Those are the devil.&lt;&#x2F;p&gt;
&lt;p&gt;When picking tradeoffs, you can either have something that as simple and fast.
Or something that is compact and small. A compact format is almost certainly
variable sized, which means you can’t use zerocopy patterns, and you lose the
ability of random access. A very clear example of this is delta compression,
where you &lt;em&gt;have to&lt;&#x2F;em&gt; parse things in order.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;watch-this-space&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#watch-this-space&quot; aria-label=&quot;Anchor link for: watch-this-space&quot;&gt;#&lt;&#x2F;a&gt;
Watch this space&lt;&#x2F;h1&gt;
&lt;p&gt;As a matter of fact, most debug formats use some clever tricks to represent
source information very compactly. I want to explore some of these formats in
a lot more detail in the future. More specifically, watch out for future blog
posts about:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DWARF line programs&lt;&#x2F;li&gt;
&lt;li&gt;PDB line programs&lt;&#x2F;li&gt;
&lt;li&gt;Portable PDB sequence points&lt;&#x2F;li&gt;
&lt;li&gt;SourceMap VLQ mappings&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Format Ossification</title>
        <published>2022-07-29T00:00:00+00:00</published>
        <updated>2022-07-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/format-ossification/"/>
        <id>https://swatinem.de/blog/format-ossification/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/format-ossification/">&lt;p&gt;Before going into the details of my recent discovery, lets define the term
&lt;em&gt;Ossification&lt;&#x2F;em&gt;, as likely a lot of people have never heard that word before.&lt;&#x2F;p&gt;
&lt;p&gt;Imagine you have an extensible format or protocol. As example, we can take a
list of elements of different type. The list is extensible. It can have an
arbitrary number of elements, and over time the different types can also be
extended.&lt;&#x2F;p&gt;
&lt;p&gt;This is great. But what happens if you never &lt;em&gt;use&lt;&#x2F;em&gt; this extensibility?
Lets say that, for years and years, your list has always had exactly one element,
and that element has always been of a very specific type.&lt;&#x2F;p&gt;
&lt;p&gt;Well, users of that format or protocol will start relying on that very fact,
and will assert this assumption in code, or worse, in hardware.&lt;&#x2F;p&gt;
&lt;p&gt;So your format is extensible in theory, but you can never extend it in practice
because tools have come to rely on a very specific size and order.&lt;&#x2F;p&gt;
&lt;p&gt;That is called &lt;em&gt;Ossification&lt;&#x2F;em&gt; and is sadly a reality, especially in network
protocols.&lt;&#x2F;p&gt;
&lt;p&gt;And as I found out recently, it is also a thing for the COFF&#x2F;PE file format,
the format of Windows &lt;code&gt;.exe&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;.dll&lt;&#x2F;code&gt; files.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;My journey starts with a Sentry Customer Issue. We got a report about a
processing error that complained about an invalid &quot;image type&quot;, whatever that
means. (Image here is a loaded library&#x2F;executable)&lt;&#x2F;p&gt;
&lt;p&gt;The image in question indeed was missing its &lt;code&gt;type&lt;&#x2F;code&gt; field, but it did have other
fields that are normal for images in the sentry protocol. The event also made
it clear that it was coming from Windows.&lt;&#x2F;p&gt;
&lt;p&gt;With that information I was looking at the code in the &lt;code&gt;sentry-native&lt;&#x2F;code&gt; SDK that
collected these images, and indeed found some early-returns that would leave
an image entry without a &lt;code&gt;type&lt;&#x2F;code&gt;. I fixed the issue by
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;sentry-native&#x2F;pull&#x2F;732&quot;&gt;reordering the code&lt;&#x2F;a&gt; so
we still get a &lt;code&gt;type&lt;&#x2F;code&gt; even though we can’t find a CodeView record for the image.&lt;&#x2F;p&gt;
&lt;p&gt;A while later while investigating how to link from a C# stack trace to the
corresponding portable PDB, I stumbled across the
&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;api&#x2F;system.reflection.portableexecutable.pereader.readdebugdirectory?view=net-6.0&quot;&gt;PEReader.ReadDebugDirectory&lt;&#x2F;a&gt;
method.&lt;&#x2F;p&gt;
&lt;p&gt;This method returned an Array of &lt;code&gt;DebugDirectoryEntry&lt;&#x2F;code&gt;, whereas the code from
&lt;code&gt;sentry-native&lt;&#x2F;code&gt; I was looking at just two weeks earlier was reading a single
entry. Interesting.&lt;&#x2F;p&gt;
&lt;p&gt;Fast forward to today, where I am again investigating a customer issue related
to a &lt;code&gt;.dll&lt;&#x2F;code&gt; that does not seem to have a valid &lt;code&gt;debug_id&lt;&#x2F;code&gt; (which comes from the
CodeView record mentioned above).&lt;&#x2F;p&gt;
&lt;p&gt;It took some time until the things I have seen clicked in my brain. What if
our tools make wrong assumptions about the shape of a PE file and its
Debug Directory Entries? What if for years all the PE files always had a single
Debug Directory Entry that happened to be the CodeView record?
What if suddenly some new compiler version is generating PE files that have
more than one Debug Directory Entry, and the CodeView record is not the first
one anymore?&lt;&#x2F;p&gt;
&lt;p&gt;Well, classic case of Ossification. Things are extensible in theory, but since
that extensibility was never practiced for years, all the tools developed around
this format came to expect things that are not true anymore.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-did-this-happen&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#how-did-this-happen&quot; aria-label=&quot;Anchor link for: how-did-this-happen&quot;&gt;#&lt;&#x2F;a&gt;
How did this happen?&lt;&#x2F;h2&gt;
&lt;p&gt;Well, the simple answer is that the available documentation around all this is
quite lacking to put it mildly.&lt;&#x2F;p&gt;
&lt;p&gt;The main documentation for &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;winnt&#x2F;ns-winnt-image_data_directory&quot;&gt;&lt;code&gt;IMAGE_DATA_DIRECTORY&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; mentions a &lt;code&gt;Size&lt;&#x2F;code&gt; that is described as:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The size of the table, in bytes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Okay, yeah, great. There is no documentation or example of what to do with this.
It is not at all obvious this is supposed to be the number of bytes of an array,
and that the resulting array has &lt;code&gt;total_size &#x2F; sizeof(IMAGE_DEBUG_DIRECTORY)&lt;&#x2F;code&gt;
elements.&lt;&#x2F;p&gt;
&lt;p&gt;The documentation for &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;winnt&#x2F;ns-winnt-image_debug_directory&quot;&gt;&lt;code&gt;IMAGE_DEBUG_DIRECTORY&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
is also quite outdated. The docs online describe the &lt;code&gt;Type&lt;&#x2F;code&gt; field up to number
&lt;code&gt;9&lt;&#x2F;code&gt;. The &lt;code&gt;winnt.h&lt;&#x2F;code&gt; header has defines up to number &lt;code&gt;20&lt;&#x2F;code&gt;, without any description
either.&lt;&#x2F;p&gt;
&lt;p&gt;If you happen to stumble upon the specification of the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dotnet&#x2F;runtime&#x2F;blob&#x2F;main&#x2F;docs&#x2F;design&#x2F;specs&#x2F;PE-COFF.md#debug-directory&quot;&gt;.NET&#x2F;C# extension to PE&#x2F;COFF&lt;&#x2F;a&gt;,
that document does indeed say this is an array:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This directory consists of an array of debug directory entries whose location and size are indicated in the image optional header.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Hooray, big success! The doc also describes some of the &lt;code&gt;Type&lt;&#x2F;code&gt;s missing from
the &lt;code&gt;winnt.h&lt;&#x2F;code&gt; header and the other documentation.&lt;&#x2F;p&gt;
&lt;p&gt;It also has a description for the CodeView record itself, which is lacking from
the other Windows docs and from the &lt;code&gt;winnt.h&lt;&#x2F;code&gt; header.&lt;&#x2F;p&gt;
&lt;p&gt;In particular, this &lt;code&gt;RSDS&lt;&#x2F;code&gt; (PDB 7.0) CodeView format is being read by a huge
number of tools, but I can’t find any &lt;em&gt;official&lt;&#x2F;em&gt; documentation anywhere.
This .NET extension linked above is the closest I could find.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;minidumpapiset&#x2F;ns-minidumpapiset-minidump_module&quot;&gt;&lt;code&gt;MINIDUMP_MODULE&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; documentation also mentions a CodeView record,
but it is also missing a description of how to interpret it.&lt;&#x2F;p&gt;
&lt;p&gt;So to summarize, the PE format has very incomplete or outright missing
documentation. And the tools dealing with it are probably cargo-culting wrong
assumptions from one implementation to the next.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-now&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#what-now&quot; aria-label=&quot;Anchor link for: what-now&quot;&gt;#&lt;&#x2F;a&gt;
What now?&lt;&#x2F;h2&gt;
&lt;p&gt;Well, we figured out that a PE file can have multiple Debug Directory entries,
and either one of them can be the CodeView record we are looking for.&lt;&#x2F;p&gt;
&lt;p&gt;Time to see which tool got this right, and fix the ones that got it wrong.&lt;&#x2F;p&gt;
&lt;p&gt;Here are PRs for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;sentry-native&#x2F;pull&#x2F;740&quot;&gt;&lt;code&gt;sentry-native&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;m4b&#x2F;goblin&#x2F;pull&#x2F;319&quot;&gt;&lt;code&gt;goblin&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gimli-rs&#x2F;object&#x2F;pull&#x2F;451&quot;&gt;&lt;code&gt;object&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To my surprise, &lt;a href=&quot;https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;crashpad&#x2F;crashpad&#x2F;+&#x2F;refs&#x2F;heads&#x2F;main&#x2F;snapshot&#x2F;win&#x2F;pe_image_reader.cc#162&quot;&gt;&lt;code&gt;crashpad&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
actually got this right.
To my surprise because I was also looking at a customer minidump created by
crashpad that was missing CodeView records for some of the minidump modules.
(Yes, the loaded executable code is called &lt;code&gt;image&lt;&#x2F;code&gt; in PE and Sentry terminology,
whereas minidumps call them &lt;code&gt;module&lt;&#x2F;code&gt;s. Confused yet?)&lt;&#x2F;p&gt;
&lt;p&gt;Looking at the customer &lt;code&gt;.dll&lt;&#x2F;code&gt; again, it became clear that it did have a
Debug Directory entry, but it wasn’t a CodeView one. Maybe if it had one, it
would indeed be the first? Even if, the point here is to not make any assumptions
around that.&lt;&#x2F;p&gt;
&lt;p&gt;So in the end I was chasing a ghost all along. But at least I learned a ton in
the process, and de-ossified a bunch of tools along the way.&lt;&#x2F;p&gt;
&lt;p&gt;The specific customer issue boils down to &quot;fix your build system&quot;, and that is
the end of the story.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Please delete your Snapshot Tests</title>
        <published>2022-07-23T00:00:00+00:00</published>
        <updated>2022-07-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/rm-snapshots/"/>
        <id>https://swatinem.de/blog/rm-snapshots/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/rm-snapshots/">&lt;p&gt;Snapshot testing is quite popular. And unfortunately most of the time it is the
wrong tool for the job.&lt;&#x2F;p&gt;
&lt;p&gt;In software projects, testing is extremely important. A piece of software can
only be as good as its testsuite, at least when it is changing over time.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;tests-abstractly&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#tests-abstractly&quot; aria-label=&quot;Anchor link for: tests-abstractly&quot;&gt;#&lt;&#x2F;a&gt;
Tests, abstractly&lt;&#x2F;h1&gt;
&lt;p&gt;So what is the purpose of tests in the first place? Well, you test that for
certain inputs, your program returns some outputs or performs some side effects.&lt;&#x2F;p&gt;
&lt;p&gt;For each test case you should be able to very specifically say what it is
asserting. For snapshot tests, the answer to the question
“what is your test asserting” is most often “hm… I guess… everything?”&lt;&#x2F;p&gt;
&lt;p&gt;Maybe when you created the snapshot test, you had an idea of what exactly you
wanted to assert, but over time this is being lost.&lt;&#x2F;p&gt;
&lt;p&gt;Another reason snapshot tests are bad is because they change way too often.
Completely unrelated changes in the codebase can change your snapshot output.
Because over time you lose track of what you actually wanted to assert with the
test, a snapshot that frequently changes will just be accepted by both the
developer and the reviewer. The test assertions thus lose their purpose.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;good-assertions-don-t-change&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#good-assertions-don-t-change&quot; aria-label=&quot;Anchor link for: good-assertions-don-t-change&quot;&gt;#&lt;&#x2F;a&gt;
Good assertions don’t change&lt;&#x2F;h1&gt;
&lt;p&gt;Ideally, each test should assert something very specific. A ground truth that
you know is true and is set in stone for infinity. Good test assertions should
never change. Sure, your test code will change as your API evolves. But the
assertions should not.&lt;&#x2F;p&gt;
&lt;p&gt;If a test assertion changes, it means either the assertion was bad from the
start, or you have a regression somewhere that needs to be investigated.&lt;&#x2F;p&gt;
&lt;p&gt;Snapshot tests change way too frequently, and they are way too broad which means
people get into the habit of “yeah, whatever”.&lt;&#x2F;p&gt;
&lt;p&gt;As mentioned before, you should assert very specific outcomes and side effects.
Snapshot tests frequently assert intermediate artifacts which are not
interesting and change a lot.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;good-snapshot-tests&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#good-snapshot-tests&quot; aria-label=&quot;Anchor link for: good-snapshot-tests&quot;&gt;#&lt;&#x2F;a&gt;
Good snapshot tests&lt;&#x2F;h1&gt;
&lt;p&gt;I have only seen a few snapshot tests that were done right, and it very much
depends on the software under test if snapshot tests make sense or not.&lt;&#x2F;p&gt;
&lt;p&gt;As all other kind of tests, the testcases should be as minimal as possible.
They should just test one specific case, and not the whole world.&lt;&#x2F;p&gt;
&lt;p&gt;The cases where I think snapshot testing makes sense if you have transformations
on text.&lt;&#x2F;p&gt;
&lt;p&gt;I do snapshot testing in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Swatinem&#x2F;rollup-plugin-dts&quot;&gt;&lt;code&gt;rollup-plugin-dts&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
I test very specific use-cases with each testcase. I test end to end, asserting
the final output as a snapshot. These tests are stable and should never change
when I make changes to the core logic. They do change however in the very rare
case that my main dependency &lt;code&gt;rollup&lt;&#x2F;code&gt; changes some of its logic.&lt;&#x2F;p&gt;
&lt;p&gt;Another example of where snapshot testing makes sense would be &lt;code&gt;rust-analyzer&lt;&#x2F;code&gt;.
You give it a snippet of code and a cursor position. Then you apply a suggestion
and you assert the final output.&lt;&#x2F;p&gt;
&lt;p&gt;Snapshotting intermediate artifacts like abstract syntax trees in this example
would be bad as those can change frequently without influencing the final
output.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;general-testing-advice&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#general-testing-advice&quot; aria-label=&quot;Anchor link for: general-testing-advice&quot;&gt;#&lt;&#x2F;a&gt;
General testing advice&lt;&#x2F;h1&gt;
&lt;p&gt;I would like to end this post with some general recommendation towards testing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It should be very clear what your test is asserting&lt;&#x2F;li&gt;
&lt;li&gt;Assert facts that you know are, and will stay, true&lt;&#x2F;li&gt;
&lt;li&gt;Keep your tests as small as possible&lt;&#x2F;li&gt;
&lt;li&gt;Assert outputs, not intermediate artifacts&lt;&#x2F;li&gt;
&lt;li&gt;Make sure you have code coverage enabled, which can help you discover missed
edge cases that are not tested yet&lt;&#x2F;li&gt;
&lt;li&gt;Your tests should serve as real world use-cases of your APIs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Pitfalls of fallible Iterators</title>
        <published>2022-07-08T00:00:00+00:00</published>
        <updated>2022-07-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/fallible-iterators/"/>
        <id>https://swatinem.de/blog/fallible-iterators/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/fallible-iterators/">&lt;p&gt;I wanted to write about this topic quite some time ago, but it seems my
tendency to procrastinate won in the end. Until today, so lets get started.&lt;&#x2F;p&gt;
&lt;p&gt;The topic at hand are fallible Iterators, and this post is motivated by a real
world problem that I fixed both at the producer end in
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bytecodealliance&#x2F;wasm-tools&#x2F;pull&#x2F;472&quot;&gt;wasmparser&lt;&#x2F;a&gt; and the
consumer in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;symbolic&#x2F;pull&#x2F;500&quot;&gt;symbolic&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;When parsing some binary data files, for example &lt;code&gt;wasm&lt;&#x2F;code&gt; as in the example above,
errors can happen all the time. Files might be truncated, they might be
corrupted either by some random bitflips or bad compression, by a faulty writer
or they might be malicious and created by an attacker specifically to exploit
bugs in the parser.&lt;&#x2F;p&gt;
&lt;p&gt;Especially for the last reason, parsers in general need to be very robust. As
we are dealing with Rust we are lucky because in safe Rust at least we can’t
corrupt our internal program state and thus we should be safe against executing
untrusted code.
But as we will see, bad things can still happen.&lt;&#x2F;p&gt;
&lt;p&gt;When parsing such files, we at Sentry want to be as forgiving as possible though.
We want to extract as much usable information from a file as possible. Even if
our parsers are incomplete and can’t handle some cases, or the original producers
are buggy and produce invalid files (yes, this happens more often than I would
like to admit), we still want to make use of the stuff that was correct and that
we can parse.&lt;&#x2F;p&gt;
&lt;p&gt;We don’t want to reject the complete file because a single string was not
utf-8 encoded for example. We also don’t want to early-return on the first
invalid string, but rather skip ahead to next valid one.&lt;&#x2F;p&gt;
&lt;p&gt;So what are fallible Iterators? There is two general patterns that I saw:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;next(&amp;amp;mut self) -&amp;gt; Option&amp;lt;Result&amp;lt;T, E&amp;gt;&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;next(&amp;amp;mut self) -&amp;gt; Result&amp;lt;Option&amp;lt;T&amp;gt;, E&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;They are both very similar, and you can almost convert between the two using
&lt;code&gt;transpose&lt;&#x2F;code&gt;, but I will argue that they express slightly different intentions
that I will also highlight. So lets look at both in some detail.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next-mut-self-option-result-t-e&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#next-mut-self-option-result-t-e&quot; aria-label=&quot;Anchor link for: next-mut-self-option-result-t-e&quot;&gt;#&lt;&#x2F;a&gt;
&lt;code&gt;next(&amp;amp;mut self) -&amp;gt; Option&amp;lt;Result&amp;lt;T, E&amp;gt;&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This pattern is nice because we are dealing with a &lt;em&gt;real&lt;&#x2F;em&gt; &lt;code&gt;impl Iterator&lt;&#x2F;code&gt; that
we can use in &lt;code&gt;for&lt;&#x2F;code&gt; loops.&lt;&#x2F;p&gt;
&lt;p&gt;Lets see what else we can do with these:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; we can propagate errors early:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; iter {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; break on first error:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; iter {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; item {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(item) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; or we can skip over errors:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; iter {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; item {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(item) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; or even simpler, since `Result` implements `IntoIterator`:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;flatten&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can also directly &lt;code&gt;collect&lt;&#x2F;code&gt; this into a &lt;code&gt;Result&amp;lt;Vec&amp;lt;T&amp;gt;, E&amp;gt;&lt;&#x2F;code&gt; which might
or might not be useful.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next-mut-self-result-option-t-e&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#next-mut-self-result-option-t-e&quot; aria-label=&quot;Anchor link for: next-mut-self-result-option-t-e&quot;&gt;#&lt;&#x2F;a&gt;
&lt;code&gt;next(&amp;amp;mut self) -&amp;gt; Result&amp;lt;Option&amp;lt;T&amp;gt;, E&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This pattern is slightly more cumbersome to deal with, as it is not a &lt;em&gt;real&lt;&#x2F;em&gt;
&lt;code&gt;impl Iterator&lt;&#x2F;code&gt;. But there is even the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;fallible-iterator&quot;&gt;&lt;code&gt;fallible-iterator&lt;&#x2F;code&gt; crate&lt;&#x2F;a&gt;
to make this more convenient.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; we can propagate errors early:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(item) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; stop on first error:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(item)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; or we can skip over errors in a weird way:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(item)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;whats-the-difference&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#whats-the-difference&quot; aria-label=&quot;Anchor link for: whats-the-difference&quot;&gt;#&lt;&#x2F;a&gt;
Whats the difference?&lt;&#x2F;h2&gt;
&lt;p&gt;Well not a whole lot to be honest. And I would say it comes down to a matter of
taste which variant people chose.&lt;&#x2F;p&gt;
&lt;p&gt;However, in my opinion they do express different intentions, let me explain.&lt;&#x2F;p&gt;
&lt;p&gt;To me, the &lt;code&gt;Option&amp;lt;Result&amp;lt;T, E&amp;gt;&amp;gt;&lt;&#x2F;code&gt; pattern signals that the produces knows there
is something to parse, or phrased the other way around: the producer knows when
the end is reached without actively parsing something.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;Result&amp;lt;Option&amp;lt;T&amp;gt;, E&amp;gt;&lt;&#x2F;code&gt; pattern however says that the producer has no idea if
it is at the end, unless it tries to parse more, which can obviously fail.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-i-ignore-errors&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#can-i-ignore-errors&quot; aria-label=&quot;Anchor link for: can-i-ignore-errors&quot;&gt;#&lt;&#x2F;a&gt;
Can I ignore errors?&lt;&#x2F;h2&gt;
&lt;p&gt;Well, its complicated.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to be safe, the answer is no. You gotta propagate the first error
you see. As the two issues I linked in the beginning show, you can never
assume that the producer is well behaved. It might just return the same parse
error over and over again till infinity, which is a super bad place to be in.
Or it might skip ahead to the next parsable item. Or it might behave like a
&quot;fused&quot; Iterator and return &lt;code&gt;None&lt;&#x2F;code&gt; afterwards. You really can’t tell. And that
is the problem I wanted to highlight.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;Parsing is hard, errors will inevitably happen. How to deal with those depends
on the use cases. In general, I do have some tips from experience:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;As a &lt;em&gt;consumer&lt;&#x2F;em&gt;, assume the worst and always propagate errors by default.&lt;&#x2F;li&gt;
&lt;li&gt;If you want to be lenient, audit the producer code carefully to make sure it
recovers or terminates after errors correctly.&lt;&#x2F;li&gt;
&lt;li&gt;Be mindful that any update can break these assumptions!&lt;&#x2F;li&gt;
&lt;li&gt;If in doubt, error out.&lt;&#x2F;li&gt;
&lt;li&gt;As a &lt;em&gt;producer&lt;&#x2F;em&gt;, make sure that your iterators always terminate no matter what.&lt;&#x2F;li&gt;
&lt;li&gt;It might be good to have tests that just do &lt;code&gt;for _ in iter {}&lt;&#x2F;code&gt; or the equivalent
for &lt;code&gt;Result&amp;lt;Option&amp;lt;T&amp;gt;, E&amp;gt;&lt;&#x2F;code&gt; to check that iterators do not loop infinitely.&lt;&#x2F;li&gt;
&lt;li&gt;The above test is perfect for fuzzing btw ;-)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Document&lt;&#x2F;em&gt; the behavior of your iterators!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Well this is it. Which of these two pattern do you prefer? Do you agree with my
assessment about which intentions these patterns express?&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Self-referential structs and alternatives</title>
        <published>2022-05-01T00:00:00+00:00</published>
        <updated>2022-05-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/self-reference-alternatives/"/>
        <id>https://swatinem.de/blog/self-reference-alternatives/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/self-reference-alternatives/">&lt;p&gt;Today I want to talk about the need for better tools to work with self-referential
structs, and also (safe) alternatives that alleviate that need for certain use-cases.&lt;&#x2F;p&gt;
&lt;p&gt;Lets start by giving a very concrete example of what I want to achieve. I want
to get the &lt;code&gt;nth&lt;&#x2F;code&gt; line of a string &lt;em&gt;quickly&lt;&#x2F;em&gt;. The idiomatic way to do it would
be &lt;code&gt;string.lines().nth(nth)&lt;&#x2F;code&gt;, and it can hardly get any simpler than that. The
problem with it is that it is not really &lt;em&gt;quick&lt;&#x2F;em&gt;. It is an &lt;code&gt;O(n)&lt;&#x2F;code&gt; operation, as
it has to walk the string from beginning up to the end in the worst case when
there is no newline at all. We don’t want to be doing that in a tight loop.&lt;&#x2F;p&gt;
&lt;p&gt;We can trade some memory usage for speed by doing the line splitting once and
caching the result. With that, getting the &lt;code&gt;nth&lt;&#x2F;code&gt; line becomes a &lt;code&gt;O(1)&lt;&#x2F;code&gt; operation.&lt;&#x2F;p&gt;
&lt;p&gt;This could be as simple as &lt;code&gt;string.lines().collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;()&lt;&#x2F;code&gt;, or as a complete
example which is literally a piece a code &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;self-reference-alternatives&#x2F;bcsymbolmap&quot;&gt;we use in production&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;BorrowedCachedLines&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;BorrowedCachedLines&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data str&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(line)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;copied&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The problem with that piece of code is that it has a lifetime, and is thus not
self-contained, and we thus can’t capture it in an &lt;code&gt;async move&lt;&#x2F;code&gt; future that we
want to spawn.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;unsafe-self-references&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#unsafe-self-references&quot; aria-label=&quot;Anchor link for: unsafe-self-references&quot;&gt;#&lt;&#x2F;a&gt;
Unsafe self-references&lt;&#x2F;h1&gt;
&lt;p&gt;As I have shown last time, &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;magic-asref&#x2F;&quot;&gt;&lt;code&gt;AsRef&lt;&#x2F;code&gt; is magic&lt;&#x2F;a&gt;
and we can use it to create self-contained structs. However, our &lt;code&gt;Vec&amp;lt;&amp;amp;&#x27;data str&amp;gt;&lt;&#x2F;code&gt;
has to have &lt;em&gt;some&lt;&#x2F;em&gt; lifetime. The closest one to “no lifetime” would be the
&lt;code&gt;&#x27;static&lt;&#x2F;code&gt; lifetime, which is special as we can put a &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; reference into
a self-contained struct.&lt;&#x2F;p&gt;
&lt;p&gt;Lets try using &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;&#x2F;code&gt; and combine it with a &lt;code&gt;Vec&amp;lt;&amp;amp;&#x27;static str&amp;gt;&lt;&#x2F;code&gt;. This
clearly won’t work, but lets try it anyway to see if the compiler helps us out.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;AsRefUnsafeCachedLines&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Buf&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Buf,
&lt;&#x2F;span&gt;&lt;span&gt;    lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;AsRef&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;AsRefUnsafeCachedLines&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Buf&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Buf) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{ buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; lines }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(line)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;copied&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will give us the following compiler error, which I must admit is confusing
and especially the “help” annotation does not help at all.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0310]: the parameter type `Buf` may not live long enough
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; playground\self-referential\src\lib.rs:24:21
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;22 | impl&amp;lt;Buf: AsRef&amp;lt;str&amp;gt;&amp;gt; AsRefUnsafeCachedLines&amp;lt;Buf&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   |      ---- help: consider adding an explicit lifetime bound...: `Buf: &amp;#39;static +`
&lt;&#x2F;span&gt;&lt;span&gt;23 |     pub fn new(buf: Buf) -&amp;gt; Self {
&lt;&#x2F;span&gt;&lt;span&gt;24 |         let lines = buf.as_ref().lines().collect();
&lt;&#x2F;span&gt;&lt;span&gt;   |                     ^^^ ...so that the type `Buf` is not borrowed for too long
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lets try the “help” anyway and see how that changes things:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0597]: `buf` does not live long enough
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; playground\self-referential\src\lib.rs:24:21
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;24 |         let lines = buf.as_ref().lines().collect();
&lt;&#x2F;span&gt;&lt;span&gt;   |                     ^^^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span&gt;   |                     |
&lt;&#x2F;span&gt;&lt;span&gt;   |                     borrowed value does not live long enough
&lt;&#x2F;span&gt;&lt;span&gt;   |                     argument requires that `buf` is borrowed for `&amp;#39;static`
&lt;&#x2F;span&gt;&lt;span&gt;25 |         Self { buf, lines }
&lt;&#x2F;span&gt;&lt;span&gt;26 |     }
&lt;&#x2F;span&gt;&lt;span&gt;   |     - `buf` dropped here while still borrowed
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;error[E0505]: cannot move out of `buf` because it is borrowed
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; playground\self-referential\src\lib.rs:25:16
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;24 |         let lines = buf.as_ref().lines().collect();
&lt;&#x2F;span&gt;&lt;span&gt;   |                     ------------
&lt;&#x2F;span&gt;&lt;span&gt;   |                     |
&lt;&#x2F;span&gt;&lt;span&gt;   |                     borrow of `buf` occurs here
&lt;&#x2F;span&gt;&lt;span&gt;   |                     argument requires that `buf` is borrowed for `&amp;#39;static`
&lt;&#x2F;span&gt;&lt;span&gt;25 |         Self { buf, lines }
&lt;&#x2F;span&gt;&lt;span&gt;   |                ^^^ move out of `buf` occurs here
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While having two error messages here does not make too much sense either, at
least they are better than than before and hint at the problem: Our &lt;code&gt;lines&lt;&#x2F;code&gt;
has a lifetime that is tied to &lt;code&gt;buf&lt;&#x2F;code&gt;, but it is required to have a &lt;code&gt;&#x27;static&lt;&#x2F;code&gt;
lifetime.&lt;&#x2F;p&gt;
&lt;p&gt;What we essentially want to do is to turn our &lt;code&gt;&amp;amp;&#x27;data str&lt;&#x2F;code&gt; into a &lt;code&gt;&amp;amp;&#x27;static str&lt;&#x2F;code&gt;,
which for obvious reasons is not allowed and we need to resort to unsafe code.&lt;&#x2F;p&gt;
&lt;p&gt;We can essentially create a &lt;code&gt;&amp;amp;&#x27;static str&lt;&#x2F;code&gt; “out of thin air” by using &lt;code&gt;from_raw_parts&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;AsRefUnsafeCachedLines&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Buf&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Buf,
&lt;&#x2F;span&gt;&lt;span&gt;    lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;AsRef&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;AsRefUnsafeCachedLines&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Buf&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Buf) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; buf
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;make_static&lt;&#x2F;span&gt;&lt;span&gt;(s) })
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{ buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; lines }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(line)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;copied&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;make_static&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;static str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; static_slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;static &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;slice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from_raw_parts(ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; len)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from_utf8_unchecked(static_slice)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This example works, but the compiler says something very interesting:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;warning: field is never read: `buf`
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; playground\self-referential\src\lib.rs:18:5
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;18 |     buf: Buf,
&lt;&#x2F;span&gt;&lt;span&gt;   |     ^^^^^^^^
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;   = note: `#[warn(dead_code)]` on by default
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is completely right. We never use &lt;code&gt;buf&lt;&#x2F;code&gt; directly. It only exists to, well,
&lt;em&gt;exist&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As a reminder, this code is extremely unsafe! While we are dealing with &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;
in our example, remember that a type such as &lt;code&gt;[u8; N]&lt;&#x2F;code&gt; implements &lt;code&gt;AsRef&amp;lt;[u8]&amp;gt;&lt;&#x2F;code&gt;.
I leave it as an exercise for the reader to reproduce the case that moving a
stack allocated &lt;code&gt;[u8; N]&lt;&#x2F;code&gt; will make you read from a dangling pointer.&lt;&#x2F;p&gt;
&lt;p&gt;Having something along the lines of &lt;code&gt;StableAsRef&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; would help here. By which
I mean any type that guarantees that the reference returned by &lt;code&gt;as_ref()&lt;&#x2F;code&gt; does
not change whenever the type itself is moved. &lt;code&gt;Box&amp;lt;[T]&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; would
implement this, but not &lt;code&gt;[T; N]&lt;&#x2F;code&gt;. A trait with such a guarantee would make it
possible to write a safe abstraction provided that code behind the abstraction
upholds the safety invariants (as in: not moving&#x2F;modifying the data in the buffer).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;almost-safe-alternatives&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#almost-safe-alternatives&quot; aria-label=&quot;Anchor link for: almost-safe-alternatives&quot;&gt;#&lt;&#x2F;a&gt;
(Almost) Safe alternatives&lt;&#x2F;h1&gt;
&lt;p&gt;The lifetime issues and the need for unsafe code to work around them come from
the fact that we are caching Rust references (aka pointers). What if we cache
sub-slice offsets into our source buffer instead? Lets try that.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;SafeCachedLines&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Buf&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Buf,
&lt;&#x2F;span&gt;&lt;span&gt;    line_offsets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;ops&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Range&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;AsRef&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;SafeCachedLines&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Buf&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Buf) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; as_ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; start_ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; as_ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; line_offsets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; as_ref
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;offset_from&lt;&#x2F;span&gt;&lt;span&gt;(start_ptr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{ buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; line_offsets }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;line_offsets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(line)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(range)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;NOTE: While working on this example, I was a bit surprised there is no safe
function in the standard library for “give me the &lt;code&gt;Range&lt;&#x2F;code&gt; of a sub-string if it
is contained within &lt;code&gt;self&lt;&#x2F;code&gt;”. I’m also surprised that &lt;code&gt;offset_from&lt;&#x2F;code&gt; is &lt;code&gt;unsafe&lt;&#x2F;code&gt;,
but reading the documentation though makes it clear why.&lt;&#x2F;p&gt;
&lt;p&gt;Anyhow, the added safety means that we have to do an additional slice operation
on access with the added overhead of a bounds check.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;optimizing-offsets&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#optimizing-offsets&quot; aria-label=&quot;Anchor link for: optimizing-offsets&quot;&gt;#&lt;&#x2F;a&gt;
Optimizing offsets&lt;&#x2F;h1&gt;
&lt;p&gt;Depending on the tradeoffs we want to make, we can even go one step further and
try to optimize our lookup index a bit. A full &lt;code&gt;Range&amp;lt;usize&amp;gt;&lt;&#x2F;code&gt; has &lt;em&gt;16&lt;&#x2F;em&gt; bytes on
64-bit platforms. We can get that down to &lt;em&gt;4&lt;&#x2F;em&gt; bytes if we assume our input
buffer is smaller than 4 GiB, which, if we are dealing in plain text is a lot.&lt;&#x2F;p&gt;
&lt;p&gt;The tradeoff here however is some added error handling when constructing the
cache, and a few more bounds checks and stripping trailing line terminators
when accessing. Here is the full example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;CompressedCachedLines&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Buf&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Buf,
&lt;&#x2F;span&gt;&lt;span&gt;    line_offsets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;AsRef&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;CompressedCachedLines&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Buf&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Buf) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;, std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;TryFromIntError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; as_ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; start_ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; as_ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; line_offsets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; as_ref
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;offset_from&lt;&#x2F;span&gt;&lt;span&gt;(start_ptr)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;try_into&lt;&#x2F;span&gt;&lt;span&gt;() })
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{ buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; line_offsets })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;line_offsets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(line)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;copied&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;? as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; end &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;line_offsets
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(line&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;checked_add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;offset&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; line_buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;end)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; line_buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; line_buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;strip_suffix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(line_buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; line_buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; line_buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;strip_suffix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(line_buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(line_buf)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;compressed&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;trailing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\r\r\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;lines&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cached_lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;CompressedCachedLines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(string)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(cached_lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;some&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(cached_lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;trailing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(cached_lines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;lines&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Having such a list of line offsets allows us to not only get the &lt;code&gt;nth&lt;&#x2F;code&gt; line with
&lt;code&gt;O(1)&lt;&#x2F;code&gt; time complexity (just a constant number of bounds checks, and some
constant-time &lt;code&gt;strip_suffix&lt;&#x2F;code&gt;), it also allows us a reverse lookup from byte
offset to line number by doing a &lt;code&gt;O(log N)&lt;&#x2F;code&gt; binary search bounded by the number
of lines we have, which is an added benefit.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;The last example is very close to my real world use-case. I essentially want to
&lt;code&gt;mmap&lt;&#x2F;code&gt; such indexed files directly from disk. The mentioned bounds checks are
very necessary in that case since I would be dealing with untrusted, possibly
malicious data in that case.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The magic of AsRef</title>
        <published>2022-04-20T00:00:00+00:00</published>
        <updated>2022-04-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/magic-asref/"/>
        <id>https://swatinem.de/blog/magic-asref/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/magic-asref/">&lt;p&gt;Both at work, and also personally, I do think about efficient parsers and data
formats a lot. Some time ago, I also wrote an article about
&lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;binary-formats&#x2F;&quot;&gt;writing a custom binary format&lt;&#x2F;a&gt; and
associated parser. That exercise started something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Header &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    num_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    num_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; Header,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; TODO:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; * actually verify the version
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; * ensure the buffer is actually valid
&lt;&#x2F;span&gt;&lt;span&gt;        Format {
&lt;&#x2F;span&gt;&lt;span&gt;            buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span&gt;(buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt; Header) }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While this works perfectly fine, and the &lt;code&gt;Format&lt;&#x2F;code&gt; is truly zero-copy, it does
have one major drawback. It has the lifetime parameter &lt;code&gt;&#x27;data&lt;&#x2F;code&gt;, and is thus not
&lt;code&gt;&#x27;static&lt;&#x2F;code&gt;. I can’t capture it by an &lt;code&gt;async move&lt;&#x2F;code&gt; closure and &lt;code&gt;tokio::spawn&lt;&#x2F;code&gt; it.
Also for reasons that I must admit I don’t fully understand, trait objects also
always carry an explicit &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; bound on them. Well, although now thinking
about this again, is becomes a bit more obvious to me. If I want to package
up a callback function into a struct of mine that does not carry a lifetime
itself, I have to use a &lt;code&gt;Box&amp;lt;dyn Fn() + &#x27;static&amp;gt;&lt;&#x2F;code&gt; or equivalent container.&lt;&#x2F;p&gt;
&lt;p&gt;Either way, for various reasons, we want to have fully “self-owned” types that
are &lt;code&gt;&#x27;static&lt;&#x2F;code&gt;, and our example &lt;code&gt;Format&lt;&#x2F;code&gt; above is not self-contained.&lt;&#x2F;p&gt;
&lt;p&gt;There are a couple of different approaches to this, but what I have found as
the go-to solution which offers the most flexibility to API users might be to
use &lt;code&gt;AsRef&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;, and in our specific case &lt;code&gt;AsRef&amp;lt;[u8]&amp;gt;&lt;&#x2F;code&gt;, so lets try to use that.&lt;&#x2F;p&gt;
&lt;p&gt;Without further ado, here is the finished demo code, along with tests that
ensure things work as intended, and that our final &lt;code&gt;Format&lt;&#x2F;code&gt; is indeed &lt;code&gt;&#x27;static&lt;&#x2F;code&gt;.
We can use any kind of underlying buffer type, no matter if its an array, a &lt;code&gt;Vec&lt;&#x2F;code&gt;,
a &lt;code&gt;Cow&lt;&#x2F;code&gt; or a memory mapped file, as long as it implements &lt;code&gt;AsRef&amp;lt;[u8]&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;{mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; ptr}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Copy)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Header &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    num_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    num_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Buf&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Buf,
&lt;&#x2F;span&gt;&lt;span&gt;    header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Header,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; PartialEq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Eq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; PartialEq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Eq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;AsRef&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Buf&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Buf) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; TODO:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; * actually verify the version
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; * ensure the buffer is actually valid
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; header &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;(buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt; Header) }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        Format { buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; header }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;into_inner&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Buf {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buf
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get_as&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[A] {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a_start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;size_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Header&amp;gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt; A }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a_slice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;slice_from_raw_parts(a_start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;num_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span&gt;a_slice }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get_bs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[B] {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b_start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buf
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;size_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Header&amp;gt;())
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;size_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;A&amp;gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;num_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt; B
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b_slice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;slice_from_raw_parts(b_start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;num_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span&gt;b_slice }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;format_works&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;borrow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Cow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;is_static&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;T) {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; array_buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;24&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; there are all little-endian:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; version
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; num_a
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; num_b
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[0]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; b[0]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; b[1]
&lt;&#x2F;span&gt;&lt;span&gt;    ]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Format&amp;lt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;24&lt;&#x2F;span&gt;&lt;span&gt;]&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;parse(array_buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;is_static&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;parsed)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_as&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[A(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_bs&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vec_buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(array_buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Format&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;parse(vec_buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;is_static&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;parsed)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_as&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[A(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_bs&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vec_buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_inner&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cow_buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Cow&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Cow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Owned(vec_buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Format&amp;lt;Cow&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;parse(cow_buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;is_static&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;parsed)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_as&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[A(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_bs&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; slice_buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;array_buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Format&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;parse(slice_buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; is_static(&amp;amp;parsed);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; ^ this would fail with:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; error[E0597]: `array_buf` does not live long enough
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;   --&amp;gt; playground&#x2F;asref&#x2F;src&#x2F;lib.rs:89:28
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;    |
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; 89 |     let slice_buf: &amp;amp;[u8] = &amp;amp;array_buf;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;    |                            ^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;    |                            |
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;    |                            borrowed value does not live long enough
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;    |                            cast requires that `array_buf` is borrowed for `&amp;#39;static`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; 94 | }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;    | - `array_buf` dropped here while still borrowed
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_as&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[A(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_bs&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The one shortcoming that this format has though is that it is not fully zero-copy
anymore. The &lt;code&gt;parse()&lt;&#x2F;code&gt; method does copy the header bytes. In order not to do that,
we would need to have better (and safe) ways to declare self-referencial structs.
But that is a topic for another post ;-)&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Dreaming of a balanced week</title>
        <published>2022-02-20T00:00:00+00:00</published>
        <updated>2022-02-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/balanced-weeks/"/>
        <id>https://swatinem.de/blog/balanced-weeks/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/balanced-weeks/">&lt;p&gt;As an engineer by heart, I sometimes think of social engineering challenges.
Or rather, how to approach some social problems with out of the box thinking.&lt;&#x2F;p&gt;
&lt;p&gt;This time, I want to reflect of some ideas on how to solve the problem an
unbalanced work week creates.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;problem-statement&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#problem-statement&quot; aria-label=&quot;Anchor link for: problem-statement&quot;&gt;#&lt;&#x2F;a&gt;
Problem Statement&lt;&#x2F;h1&gt;
&lt;p&gt;To understand what I mean by that, lets first describe the current
unsatisfactory state.&lt;&#x2F;p&gt;
&lt;p&gt;I think we have a resource allocation problem, and the resource being time.
Considering someone who works a traditional nine-to-five (or 10 to 6) job, there
are only very limited time slots available to do chores and errands, and leisure
time. This leads to the very real problem that grocery stores are extremely
congested on saturdays, same as leisure activities such as thermal spas or
hiking routes.&lt;&#x2F;p&gt;
&lt;p&gt;These same places are mostly empty on weekdays, when the majority of the
population is working. The only people able to enjoy these activities are
retirees, school children during vacation, and tourists.&lt;&#x2F;p&gt;
&lt;p&gt;The same happens for traffic, both public and individual. Streets and public
transport are completely congested at certain weekdays and times of day, whereas
it is not a problem on others. Same for the availability of parking.&lt;&#x2F;p&gt;
&lt;p&gt;As a member of the &quot;working class&quot;, I only have the ability to do certain things
at the same time when &lt;em&gt;everyone else&lt;&#x2F;em&gt; does. I have always felt uncomfortable in
large crowds. And if the pandemic has taught us anything, it should be that
large crowds of people is not a good thing in general, and should be avoided.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;lets-start-with-the-obvious&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#lets-start-with-the-obvious&quot; aria-label=&quot;Anchor link for: lets-start-with-the-obvious&quot;&gt;#&lt;&#x2F;a&gt;
Lets start with the obvious&lt;&#x2F;h1&gt;
&lt;p&gt;So how do we work towards a proposal to solve this congestion and allocation
problem?&lt;&#x2F;p&gt;
&lt;p&gt;Lets start with the obvious and reconsider the standard full-time nine-to-five
workday. I very much appreciate that multiple european countries are
experimenting with lowering the weekly work hours, and introducing 4-day work
weeks.&lt;&#x2F;p&gt;
&lt;p&gt;As for myself, my current job is the first one where I work full-time for an
extended period of time. Previously I was only doing part-time work, in the
range of 20-30 hour weeks.&lt;&#x2F;p&gt;
&lt;p&gt;As I write this article, I wanted to comment on how I’m surprised myself that
I cope with this so well considering. But then I remember that I do suffer a
bit from the “I don’t have time for anything” anxiety. Not to mention that the
time I spent on recreation the past 2-3 years was essentially zero, and my
health and fitness suffered a lot.&lt;&#x2F;p&gt;
&lt;p&gt;Suffice it to say, the standard 40-hour work week just does not offer a good
work-life balance; and we need to re-think it. Also, with less hours per-person,
we can hire two people to do the job of one. Which creates jobs, and is a good
thing. It also helps increasing the Bus-factor.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;everything-anytime&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#everything-anytime&quot; aria-label=&quot;Anchor link for: everything-anytime&quot;&gt;#&lt;&#x2F;a&gt;
Everything, Anytime&lt;&#x2F;h1&gt;
&lt;p&gt;Once we move from a 5 day work week to 4 or even 3 days, the next step is to
more evenly distribute that time. The current congestion problem comes from the
fact that everyone has weekends on the same days.&lt;&#x2F;p&gt;
&lt;p&gt;Along with less working hours, we need total freedom to chose &lt;em&gt;when&lt;&#x2F;em&gt; to work.
The goal here is to have everything available, anytime of the week. You can go
hiking, do groceries, or visit a spa, or museum any day of the week.&lt;&#x2F;p&gt;
&lt;p&gt;It also means that work is being done every day of the week. Which is also good
for companies.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;schools&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#schools&quot; aria-label=&quot;Anchor link for: schools&quot;&gt;#&lt;&#x2F;a&gt;
Schools&lt;&#x2F;h1&gt;
&lt;p&gt;The freedom to chose might not work as well for the education sector which needs
a more rigid framework. For this to work, I propose to at the very least keep
one grade on the same schedule. I also propose to stagger classes, so a
first-graders schedule is shifted by one day compared to a second-grader.
Depending if we go with a 4-day or 3-day week, you can have friends 2 grades
above or below and share 1 or 2 days in common.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;can-we-make-it&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#can-we-make-it&quot; aria-label=&quot;Anchor link for: can-we-make-it&quot;&gt;#&lt;&#x2F;a&gt;
Can we make it?&lt;&#x2F;h1&gt;
&lt;p&gt;To be honest, I think this proposal is super simple, and might work. The
question is how to get there?&lt;&#x2F;p&gt;
&lt;p&gt;As I started this exploration, I mentioned the &lt;em&gt;thinking outside the box&lt;&#x2F;em&gt; mindset.
I think the reason we have this weekday&#x2F;weekend split is simply
&lt;em&gt;because it was always done this way&lt;&#x2F;em&gt;. In christian societies, this might come
from the fact that even the Bible said that God rested on the seventh day, and
thats why we shouldn’t work on sundays. Well, can we maybe abandon this thinking,
as it clearly does not serve us in modern times?&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;To be honest, I think the only policy change that needs to happen is to lift
restrictions, everything else should self-organize.
Currently we have restrictions that grocery stores are prohibited by law to open
on certain days. And also labor laws restrict people from freely choosing when
to work.&lt;&#x2F;p&gt;
&lt;p&gt;I for one would gladly work on a Sunday, if that means I can have any weekday
off to do chores and enjoy some un-crowded leisure time.&lt;&#x2F;p&gt;
&lt;p&gt;Lifting restrictions would be step one. Policy makers could also go one step
further and mandate that everything works on every day. Things should
self-organize in that situation as well. Employers will create financial
incentives to encourage employees to work on “unorthodox” days, and thats that.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;but&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#but&quot; aria-label=&quot;Anchor link for: but&quot;&gt;#&lt;&#x2F;a&gt;
But…&lt;&#x2F;h1&gt;
&lt;p&gt;There are tons of open questions, sure. &lt;em&gt;When should we do meetings?&lt;&#x2F;em&gt; might be a
questions. &lt;em&gt;This meeting should have been an email&lt;&#x2F;em&gt; is the obvious answer to
that. But okay, in all seriousness, there should be plenty of overlap
opportunities.&lt;&#x2F;p&gt;
&lt;p&gt;I think the biggest obstacle is changing the mindset of people. The problem with
the &lt;em&gt;it was always done this way&lt;&#x2F;em&gt; attitude is that people can’t even imagine how
things could be different. Lets be open to new ideas, and to think outside the
box.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Non-Lazy Futures Considered Harmful</title>
        <published>2022-01-26T00:00:00+00:00</published>
        <updated>2022-01-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/non-lazy-futures/"/>
        <id>https://swatinem.de/blog/non-lazy-futures/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/non-lazy-futures/">&lt;p&gt;Now that I got your attention with the clickbait title, let me explain what I
mean by it. Current Rust code could be broken in very subtle ways because of
some assumptions we have about async Rust code that might not always be true.&lt;&#x2F;p&gt;
&lt;p&gt;This story starts with
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;sentry-rust&#x2F;pull&#x2F;417&quot;&gt;a bug I recently fixed in &lt;code&gt;sentry-rust&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
(which manifested itself as a memory leak), and itself highlights both sides of
the problem.&lt;&#x2F;p&gt;
&lt;p&gt;The root cause of the problem is not specific to the Sentry SDK however, and it
can very easily happen in other cases as well. I will use examples from the
&lt;code&gt;tracing&lt;&#x2F;code&gt; ecosystem down below, as that might have a wider user base than Sentry.&lt;&#x2F;p&gt;
&lt;p&gt;The problem boils down to the very subtle difference between &lt;code&gt;async fn X()&lt;&#x2F;code&gt; and
&lt;code&gt;fn X() -&amp;gt; impl Future&lt;&#x2F;code&gt;, and the fact that the second is not guaranteed to be
fully lazy.&lt;&#x2F;p&gt;
&lt;p&gt;An &lt;code&gt;async fn&lt;&#x2F;code&gt; is by definition lazy. Calling it via &lt;code&gt;async_fn()&lt;&#x2F;code&gt; only captures
the arguments into an anonymous &lt;code&gt;Future&lt;&#x2F;code&gt; type, but is otherwise guaranteed to
not execute the body of the function &lt;em&gt;yet&lt;&#x2F;em&gt;, but rather later on &lt;code&gt;poll&lt;&#x2F;code&gt;.
This is not the case for a function that returns an &lt;code&gt;impl Future&lt;&#x2F;code&gt;, and by
extension for trait functions that return (generic or named) futures.
These functions can have a varying amount of code that runs at &lt;strong&gt;call time&lt;&#x2F;strong&gt;,
vs &lt;strong&gt;poll time&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;fully_lazy&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; impl Future&amp;lt;Output = ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;print happens on *poll*&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;not_lazy&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; impl Future&amp;lt;Output = ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;print happens on *call*&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;ready(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So if possible, move &lt;em&gt;all&lt;&#x2F;em&gt; of the code into the async block. But that might not
always be possible.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;aside-named-types&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#aside-named-types&quot; aria-label=&quot;Anchor link for: aside-named-types&quot;&gt;#&lt;&#x2F;a&gt;
Aside: Named Types&lt;&#x2F;h1&gt;
&lt;p&gt;We do have the problem right now that &lt;code&gt;async fn&lt;&#x2F;code&gt; returns an anonymous type.
Returning &lt;code&gt;impl Future&lt;&#x2F;code&gt; has the same problem. You cannot &lt;em&gt;name&lt;&#x2F;em&gt; the type in
stable Rust today. And named types are required when you want to put a future
on a &lt;code&gt;struct&lt;&#x2F;code&gt; or into a collection. It is also considered good practice in
general to name every public API type of a crate, for that reason.&lt;&#x2F;p&gt;
&lt;p&gt;The same principle is also the reason why every &lt;code&gt;Iterator&lt;&#x2F;code&gt; combinator returns
its own named type. And it is the reason why there is
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tracing&#x2F;latest&#x2F;tracing&#x2F;instrument&#x2F;struct.Instrumented.html&quot;&gt;&lt;code&gt;tracing::instrument::Instrumented&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;sentry&#x2F;latest&#x2F;sentry&#x2F;struct.SentryFuture.html&quot;&gt;&lt;code&gt;sentry::SentryFuture&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Nightly Rust offers the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;63063&quot;&gt;&lt;code&gt;type_alias_impl_trait&lt;&#x2F;code&gt; feature&lt;&#x2F;a&gt;,
which allows giving names to otherwise anonymous futures. Being a nightly feature, it is not yet available in stable Rust unfortunately.&lt;&#x2F;p&gt;
&lt;p&gt;The next best thing we can use on stable Rust is &lt;code&gt;Pin&amp;lt;Box&amp;lt;dyn Future&amp;gt;&amp;gt;&lt;&#x2F;code&gt;, like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;dyn_future&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Pin&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;dyn Future&amp;lt;Output = ()&amp;gt;&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;pin(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;print happens on *poll*&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That is also the desugaring that the &lt;code&gt;async-trait&lt;&#x2F;code&gt; crate does (well
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;async-trait&#x2F;latest&#x2F;async_trait&#x2F;#explanation&quot;&gt;almost&lt;&#x2F;a&gt;). The
resulting type has a name, and we can put it into &lt;code&gt;struct&lt;&#x2F;code&gt;s and collections.
However it comes with the disadvantage of a heap allocation and dynamic dispatch.
And it is not available for &lt;code&gt;#![no_std]&lt;&#x2F;code&gt; builds either.&lt;&#x2F;p&gt;
&lt;p&gt;So the broader community seems to have settled on creating their own &lt;code&gt;Future&lt;&#x2F;code&gt;
types, which often wrap an inner future via generics.
That on its own comes with a lot of inconvenience, as manually implementing
&lt;code&gt;Future::poll&lt;&#x2F;code&gt; is a nightmare, and often requires manual &lt;code&gt;unsafe&lt;&#x2F;code&gt; code, or
pulling in an external dependency in the form of &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;pin-project&#x2F;latest&#x2F;pin_project&#x2F;&quot;&gt;pin-project&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For that reason, I have resorted to the following pattern, and I bet a lot of
other people do so as well:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;returns_named_future&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; NamedFuture {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; do as much logic as you possibly without having to use `await`
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; return the resulting future, which does the rest inside `poll`
&lt;&#x2F;span&gt;&lt;span&gt;    NamedFuture
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;problematic-tracing-example&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#problematic-tracing-example&quot; aria-label=&quot;Anchor link for: problematic-tracing-example&quot;&gt;#&lt;&#x2F;a&gt;
Problematic &lt;code&gt;tracing&lt;&#x2F;code&gt; example&lt;&#x2F;h1&gt;
&lt;p&gt;To further illustrate the problem, let me demonstrate both problems with a full
practical &lt;code&gt;tracing&lt;&#x2F;code&gt; example, which follows the guidelines as presented in
the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tracing&#x2F;latest&#x2F;tracing&#x2F;struct.Span.html#in-asynchronous-code&quot;&gt;&lt;code&gt;tracing::Span&lt;&#x2F;code&gt; docs&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tracing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Instrument&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;fully_lazy&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; impl Future&amp;lt;Output = ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        tracing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;log happens on *poll*&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;not_lazy&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; impl Future&amp;lt;Output = ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    tracing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;log happens on *call*&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;ready(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;broken_parent_lazy&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; impl Future&amp;lt;Output = ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;tracing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;info_span&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;broken_parent&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;fully_lazy&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;instrument&lt;&#x2F;span&gt;&lt;span&gt;(span)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;broken_parent_not_lazy&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; impl Future&amp;lt;Output = ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;tracing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;info_span&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;broken_parent&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;not_lazy&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;instrument&lt;&#x2F;span&gt;&lt;span&gt;(span)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;correct_parent_lazy&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; impl Future&amp;lt;Output = ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;tracing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;info_span&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;correct_parent&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    span&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;in_scope&lt;&#x2F;span&gt;&lt;span&gt;(|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;fully_lazy&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;instrument&lt;&#x2F;span&gt;&lt;span&gt;(span)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;correct_parent_not_lazy&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; impl Future&amp;lt;Output = ()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;tracing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;info_span&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;correct_parent&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    span&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;in_scope&lt;&#x2F;span&gt;&lt;span&gt;(|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;not_lazy&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;instrument&lt;&#x2F;span&gt;&lt;span&gt;(span)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    tracing_subscriber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;init()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;broken_parent_lazy&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;broken_parent_not_lazy&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;correct_parent_lazy&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;correct_parent_not_lazy&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running this example outputs the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;2022-01-26T14:48:11.115115Z  INFO broken_parent: lazy_futures: log happens on *poll*
&lt;&#x2F;span&gt;&lt;span&gt;2022-01-26T14:48:11.115511Z  INFO lazy_futures: log happens on *call*
&lt;&#x2F;span&gt;&lt;span&gt;2022-01-26T14:48:11.115732Z  INFO correct_parent: lazy_futures: log happens on *poll*
&lt;&#x2F;span&gt;&lt;span&gt;2022-01-26T14:48:11.116020Z  INFO correct_parent: lazy_futures: log happens on *call*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As we can see, the second log line (coming from &lt;code&gt;broken_parent_not_lazy().await&lt;&#x2F;code&gt;)
is not running in correct span as intended. The other examples work as intended,
as either the caller handles the unlikely case of code being executed in &lt;strong&gt;call&lt;&#x2F;strong&gt;,
or rather the callee is more correct by not executing any code in &lt;strong&gt;call&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;I have two recommendations here, covering both sides of the coin:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do not make assumptions about third-party code being lazy&lt;&#x2F;strong&gt;. Foreign code
might be &lt;em&gt;misbehaving&lt;&#x2F;em&gt; in a way that it executes actual code in &lt;strong&gt;call&lt;&#x2F;strong&gt; vs &lt;strong&gt;poll&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make all your code fully lazy&lt;&#x2F;strong&gt;. Do not do any computations in &lt;strong&gt;call&lt;&#x2F;strong&gt; vs &lt;strong&gt;poll&lt;&#x2F;strong&gt;.
Foreign code may rely on futures code being fully lazy, and you might otherwise
violate expectations.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust Contexts</title>
        <published>2022-01-21T00:00:00+00:00</published>
        <updated>2022-01-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/log-contexts/"/>
        <id>https://swatinem.de/blog/log-contexts/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/log-contexts/">&lt;p&gt;I realize I might be a bit late to the party, considering
&lt;a href=&quot;https:&#x2F;&#x2F;tmandry.gitlab.io&#x2F;blog&#x2F;posts&#x2F;2021-12-21-context-capabilities&#x2F;&quot;&gt;tmandrys blog post&lt;&#x2F;a&gt;
is already a month old, and there is now even an
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nikomatsakis&#x2F;context-capabilities-initiative&quot;&gt;initiative&lt;&#x2F;a&gt;
focused on contexts.&lt;&#x2F;p&gt;
&lt;p&gt;Alas, I want to explore the way in which implicit contexts could solve some very
real problems that we have with todays methods of modeling context. As practical
examples, I want to highlight the issues using the &lt;code&gt;sentry-rust&lt;&#x2F;code&gt;, and &lt;code&gt;tracing&lt;&#x2F;code&gt; APIs.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;footguns&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#footguns&quot; aria-label=&quot;Anchor link for: footguns&quot;&gt;#&lt;&#x2F;a&gt;
Footguns&lt;&#x2F;h1&gt;
&lt;p&gt;IMO the currently available APIs are a bit too hard to mis-use. An example of
this is mentioned directly in the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tracing&#x2F;latest&#x2F;tracing&#x2F;#spans&quot;&gt;&lt;code&gt;tracing&lt;&#x2F;code&gt; docs&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In asynchronous code that uses async&#x2F;await syntax, &lt;code&gt;Span::enter&lt;&#x2F;code&gt; may produce incorrect traces if the returned drop guard is held across an await point.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;From a sentry point of view, the &lt;code&gt;configure_scope&lt;&#x2F;code&gt; and &lt;code&gt;with_scope&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;push_scope&lt;&#x2F;code&gt; APIs
have a similar potential of being misused. This can cause slight problems, like
tags not being applied correctly, up to bigger problems such as a &lt;code&gt;panic&lt;&#x2F;code&gt; if
scope manipulation is unbalanced.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;tradeoffs&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#tradeoffs&quot; aria-label=&quot;Anchor link for: tradeoffs&quot;&gt;#&lt;&#x2F;a&gt;
Tradeoffs&lt;&#x2F;h1&gt;
&lt;p&gt;In essence, I think these problems stem from the tradeoff of favoring
convenience over correctness.&lt;&#x2F;p&gt;
&lt;p&gt;The problem here is that both &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tracing&#x2F;blob&#x2F;6f23c128fced6409008838a3223d76d7332d79e9&#x2F;tracing-core&#x2F;src&#x2F;dispatch.rs#L180-L202&quot;&gt;&lt;code&gt;tracing&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;sentry-rust&#x2F;blob&#x2F;c75d62ac9608930193fff843e413755aa3084191&#x2F;sentry-core&#x2F;src&#x2F;hub.rs#L18-L30&quot;&gt;&lt;code&gt;sentry-rust&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
use a mixture of &lt;code&gt;static mut&lt;&#x2F;code&gt; (which &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;53639&quot;&gt;is almost impossible to use correctly&lt;&#x2F;a&gt;), &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;lazy_static&#x2F;latest&#x2F;lazy_static&#x2F;&quot;&gt;&lt;code&gt;lazy_static&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;macro.thread_local.html&quot;&gt;&lt;code&gt;thread_local&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In both cases, there is one &lt;strong&gt;global&lt;&#x2F;strong&gt; &lt;code&gt;Hub&lt;&#x2F;code&gt; that is automatically inherited to
all newly spawned threads. And each of these threads keeps a &lt;strong&gt;current state&lt;&#x2F;strong&gt; around
which is mutable. The global hub also needs to be mutable, since you have to
initialize it at some point.&lt;&#x2F;p&gt;
&lt;p&gt;This mutability in turns requires the use of way too many &lt;code&gt;Arc&lt;&#x2F;code&gt;s and &lt;code&gt;Mutex&lt;&#x2F;code&gt;es.
A fact of &lt;code&gt;sentry-rust&lt;&#x2F;code&gt; internals I recently discussed on Discord as well.&lt;&#x2F;p&gt;
&lt;p&gt;The convenience we get out of this is that users can just call &lt;code&gt;sentry::capture_event&lt;&#x2F;code&gt; &lt;strong&gt;anywhere&lt;&#x2F;strong&gt; in the code. Similarly, any library can annotate a function with
&lt;code&gt;#[tracing::instrument]&lt;&#x2F;code&gt; and things just work. Well unless they don’t.&lt;&#x2F;p&gt;
&lt;p&gt;The problems happen when you write something to the &lt;strong&gt;current state&lt;&#x2F;strong&gt;, but that
mutable state is being shared among multiple concurrent async tasks. How can we
avoid these footguns?&lt;&#x2F;p&gt;
&lt;p&gt;In case of &lt;code&gt;tracing&lt;&#x2F;code&gt;, you have to use manually
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tracing&#x2F;latest&#x2F;tracing&#x2F;trait.Instrument.html&quot;&gt;&lt;code&gt;instrument()&lt;&#x2F;code&gt; a future&lt;&#x2F;a&gt;.
Similarly in &lt;code&gt;sentry-rust&lt;&#x2F;code&gt;, you have to bind a &lt;code&gt;Hub&lt;&#x2F;code&gt; to the future via &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;sentry&#x2F;latest&#x2F;sentry&#x2F;trait.SentryFutureExt.html&quot;&gt;&lt;code&gt;bind_hub()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. But that unfortunately
is also prone to be misused when dealing with &lt;code&gt;join_all&lt;&#x2F;code&gt; concurrency.
The right thing to use here is &lt;code&gt;.bind_hub(Hub::new_from_top(Hub::current()))&lt;&#x2F;code&gt;.
Well that is a mouthful, and extremely easy to get wrong.&lt;&#x2F;p&gt;
&lt;p&gt;Essentially these issues boil down to shared mutable state. Something that the
Rust compiler and borrow-checker promise to solve.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;mutability&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#mutability&quot; aria-label=&quot;Anchor link for: mutability&quot;&gt;#&lt;&#x2F;a&gt;
Mutability&lt;&#x2F;h1&gt;
&lt;p&gt;Which brings me to the next topic. I believe that just following Rusts normal
ownership and borrowing semantics would solve most or all of the outlined
problems. We have mutable data, so make sure to declare it as &lt;code&gt;&amp;amp;mut&lt;&#x2F;code&gt;, and the
compiler will tell us where we are tripping up.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;uses_mutable_ctx&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; Context) {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; ctx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; normal calls work just fine
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;uses_mutable_ctx&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; ctx)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;uses_mutable_ctx&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; ctx)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; futures concurrency: nope
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; futures &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_i&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;uses_mutable_ctx&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; ctx))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    futures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;join_all(futures)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; concurrent tasks: nope
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ = &lt;&#x2F;span&gt;&lt;span&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;uses_mutable_ctx&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; ctx))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; threads: nope
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ = &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;spawn(|| {
&lt;&#x2F;span&gt;&lt;span&gt;        tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;runtime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Runtime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;uses_mutable_ctx&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; ctx))
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above example fails to compile for all cases that involve concurrency:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;error: captured variable cannot escape `FnMut` closure body
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; playground\contexts\src\main.rs:15:35
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;8  |     let mut ctx = Context;
&lt;&#x2F;span&gt;&lt;span&gt;   |         ------- variable defined here
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;15 |     let futures = (0..2).map(|_i| uses_mutable_ctx(&amp;amp;mut ctx));
&lt;&#x2F;span&gt;&lt;span&gt;   |                                 - ^^^^^^^^^^^^^^^^^^^^^^---^
&lt;&#x2F;span&gt;&lt;span&gt;   |                                 | |                     |
&lt;&#x2F;span&gt;&lt;span&gt;   |                                 | |                     variable captured here
&lt;&#x2F;span&gt;&lt;span&gt;   |                                 | returns a reference to a captured variable which escapes the closure body
&lt;&#x2F;span&gt;&lt;span&gt;   |                                 inferred to be a `FnMut` closure
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;   = note: `FnMut` closures only have access to their captured variables while they are executing...
&lt;&#x2F;span&gt;&lt;span&gt;   = note: ...therefore, they cannot allow references to captured variables to escape
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;error[E0597]: `ctx` does not live long enough
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; playground\contexts\src\main.rs:23:49
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;23 |     let _ = tokio::task::spawn(uses_mutable_ctx(&amp;amp;mut ctx)).await;
&lt;&#x2F;span&gt;&lt;span&gt;   |                                -----------------^^^^^^^^-
&lt;&#x2F;span&gt;&lt;span&gt;   |                                |                |
&lt;&#x2F;span&gt;&lt;span&gt;   |                                |                borrowed value does not live long enough
&lt;&#x2F;span&gt;&lt;span&gt;   |                                argument requires that `ctx` is borrowed for `&amp;#39;static`
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;41 | }
&lt;&#x2F;span&gt;&lt;span&gt;   | - `ctx` dropped here while still borrowed
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;error[E0499]: cannot borrow `ctx` as mutable more than once at a time
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; playground\contexts\src\main.rs:28:32
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;23 |     let _ = tokio::task::spawn(uses_mutable_ctx(&amp;amp;mut ctx)).await;
&lt;&#x2F;span&gt;&lt;span&gt;   |                                --------------------------
&lt;&#x2F;span&gt;&lt;span&gt;   |                                |                |
&lt;&#x2F;span&gt;&lt;span&gt;   |                                |                first mutable borrow occurs here
&lt;&#x2F;span&gt;&lt;span&gt;   |                                argument requires that `ctx` is borrowed for `&amp;#39;static`
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;28 |     let _ = std::thread::spawn(|| {
&lt;&#x2F;span&gt;&lt;span&gt;   |                                ^^ second mutable borrow occurs here
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;31 |             .block_on(uses_mutable_ctx(&amp;amp;mut ctx))
&lt;&#x2F;span&gt;&lt;span&gt;   |                                             --- second borrow occurs due to use of `ctx` in closure
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In all of these cases, the compiler forces us to create an explicit clone.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; futures concurrency
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; futures &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_i&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; ctx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;uses_mutable_ctx&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; ctx)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await }
&lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;futures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;join_all(futures)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; concurrent tasks
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; spawn_ctx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ = &lt;&#x2F;span&gt;&lt;span&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;uses_mutable_ctx&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; spawn_ctx)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; threads
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; spawn_ctx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ = &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;runtime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Runtime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;uses_mutable_ctx&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; spawn_ctx))
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately for us, thinking of contexts as implicit function argument would
only solve half of the problem. We won’t have to thread it down all our call
chain, but it does not solve the problem what happens when there are forks in
the road.&lt;&#x2F;p&gt;
&lt;p&gt;From the compilers perspective, the rules of shared mutability are quite clear.
However the compiler does not automatically clone for you. Also from a users
perspective, what should &quot;cloning&quot; mean in these cases?&lt;&#x2F;p&gt;
&lt;p&gt;For example in the case of a tracing span hierarchy. Are you &lt;code&gt;await&lt;&#x2F;code&gt;-ing or
&lt;code&gt;join&lt;&#x2F;code&gt;-ing all the spawned tasks&#x2F;threads? Or are they more &lt;em&gt;“fire and forget”&lt;&#x2F;em&gt;?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;back-to-tradeoffs&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#back-to-tradeoffs&quot; aria-label=&quot;Anchor link for: back-to-tradeoffs&quot;&gt;#&lt;&#x2F;a&gt;
Back to Tradeoffs&lt;&#x2F;h1&gt;
&lt;p&gt;And here we are back where we started. We have to chose the right tradeoffs
between easy of use, and possibility of misuse. Contexts in the sense of implicit
function arguments get us quite far in easy of use though.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust Futures and Tasks</title>
        <published>2022-01-11T00:00:00+00:00</published>
        <updated>2022-01-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/futures-n-tasks/"/>
        <id>https://swatinem.de/blog/futures-n-tasks/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/futures-n-tasks/">&lt;p&gt;With the recent talk about &lt;em&gt;“Contexts”&lt;&#x2F;em&gt; in the Rust community, and some other
thoughts I had recently, I want to explore in a bit more detail what the
difference between Futures and Tasks is in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;The difference between Futures and Tasks is like the difference between concurrency
and parallelism.&lt;&#x2F;p&gt;
&lt;p&gt;The difference is quite subtle, even considering just the words. I don’t even
know if my native german language even has different words for those concepts?&lt;&#x2F;p&gt;
&lt;p&gt;Lets look at a small snippet of the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Concurrency_(computer_science)&quot;&gt;Wikipedia entry on Concurrency&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Concurrency is not parallelism: concurrency is about dealing with lots of things at once but parallelism is about doing lots of things at once. Concurrency is about structure, parallelism is about execution.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Well that is not all too helpful. Lets maybe approach this question from a different perspective then.&lt;&#x2F;p&gt;
&lt;p&gt;I we think of everyday life, we sometimes do actual work, or we are just waiting
for something to happen. Waiting would be boring though. So what do we humans do
in such a case? We start working on something else in the meantime. We call this
&lt;em&gt;“multitasking”&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;NOTE:&lt;&#x2F;em&gt; While explaining this to my wife, we figured out that humans use the word
&lt;em&gt;multitasking&lt;&#x2F;em&gt; for both concepts. Oh well.&lt;&#x2F;p&gt;
&lt;p&gt;The basic functionality that Futures provide us with their conveniently named
&lt;code&gt;await&lt;&#x2F;code&gt; keyword is the ability to say:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey! I’m not doing any useful work right now, I’m just waiting.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This waiting can be anything. Waiting for time to pass, for things to arrive on
the network, or for a computation to finish.&lt;&#x2F;p&gt;
&lt;p&gt;We can create a simple future that simulates this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;future&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; simulates some IO wait
&lt;&#x2F;span&gt;&lt;span&gt;    tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;sleep(Duration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;400&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; simulates some CPU workload
&lt;&#x2F;span&gt;&lt;span&gt;    thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;sleep(Duration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; finished&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; num)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we want to execute a couple of these, we can first try to do so one after the
other:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; non_static_str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;serial&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Instant&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;now()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; futures &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;future&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;non_static_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; i))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; futures {
&lt;&#x2F;span&gt;&lt;span&gt;    future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; non_static_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;serial-0 finished
&lt;&#x2F;span&gt;&lt;span&gt;serial-1 finished
&lt;&#x2F;span&gt;&lt;span&gt;serial-2 finished
&lt;&#x2F;span&gt;&lt;span&gt;serial-3 finished
&lt;&#x2F;span&gt;&lt;span&gt;serial-4 finished
&lt;&#x2F;span&gt;&lt;span&gt;serial-5 finished
&lt;&#x2F;span&gt;&lt;span&gt;serial-6 finished
&lt;&#x2F;span&gt;&lt;span&gt;serial-7 finished
&lt;&#x2F;span&gt;&lt;span&gt;serial: 4.1303916s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Or showing this visually:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;┌─────────────┬─────────┬─────────────┬─────────┬───┐
&lt;&#x2F;span&gt;&lt;span&gt;│ … waiting … │ working │ … waiting … │ working │ … │
&lt;&#x2F;span&gt;&lt;span&gt;└─────────────┴─────────┴─────────────┴─────────┴───┘
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Not too efficient. We haven’t gained anything. But we can improve this if we
know that the work we want to do is &lt;em&gt;sufficiently independent&lt;&#x2F;em&gt; of each other.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;concurrency&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#concurrency&quot; aria-label=&quot;Anchor link for: concurrency&quot;&gt;#&lt;&#x2F;a&gt;
Concurrency&lt;&#x2F;h1&gt;
&lt;p&gt;I think this is what the Wikipedia article meant by &lt;em&gt;“Concurrency is about structure”&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; non_static_str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;futures&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Instant&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;now()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; futures &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;future&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;non_static_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; i))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;join_all&lt;&#x2F;span&gt;&lt;span&gt;(futures)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; non_static_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And lets run this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;futures-0 finished
&lt;&#x2F;span&gt;&lt;span&gt;futures-1 finished
&lt;&#x2F;span&gt;&lt;span&gt;futures-2 finished
&lt;&#x2F;span&gt;&lt;span&gt;futures-3 finished
&lt;&#x2F;span&gt;&lt;span&gt;futures-4 finished
&lt;&#x2F;span&gt;&lt;span&gt;futures-5 finished
&lt;&#x2F;span&gt;&lt;span&gt;futures-6 finished
&lt;&#x2F;span&gt;&lt;span&gt;futures-7 finished
&lt;&#x2F;span&gt;&lt;span&gt;futures: 1.2765159s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Or showing this visually:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;┌─────────────┬─────────┬─────────┬───┐
&lt;&#x2F;span&gt;&lt;span&gt;│ … waiting … │ working │ working │ … │
&lt;&#x2F;span&gt;&lt;span&gt;└─────────────┴─────────┴─────────┴───┘
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Adding concurrency here means that we were able to compress overlapping wait times.
This is good, but not quite optimal as the future itself only uses a single
thread of execution. So if we only ever use &lt;code&gt;futures::future::join_all&lt;&#x2F;code&gt;, Rust is
no different from other programming languages that have a single threaded event
loop.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;parallelism&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#parallelism&quot; aria-label=&quot;Anchor link for: parallelism&quot;&gt;#&lt;&#x2F;a&gt;
Parallelism&lt;&#x2F;h1&gt;
&lt;p&gt;Lets try to add the &lt;em&gt;“Parallelism is about execution”&lt;&#x2F;em&gt; part
by using &lt;code&gt;tokio::spawn&lt;&#x2F;code&gt; to turn the future into an independent task.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; non_static_str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;tasks&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Instant&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;now()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; futures &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;| tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;future&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;non_static_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; i)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;join_all&lt;&#x2F;span&gt;&lt;span&gt;(futures)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; non_static_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well, it turns out that this is not possible quite that easily:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0597]: `non_static_str` does not live long enough
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; playground\futuresntasks\src\main.rs:XX:55
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;XX |     let futures = (0..n).map(|i| tokio::spawn(future(&amp;amp;non_static_str, i)));
&lt;&#x2F;span&gt;&lt;span&gt;   |                              ---              --------^^^^^^^^^^^^^^----
&lt;&#x2F;span&gt;&lt;span&gt;   |                              |                |       |
&lt;&#x2F;span&gt;&lt;span&gt;   |                              |                |       borrowed value does not live long enough
&lt;&#x2F;span&gt;&lt;span&gt;   |                              |                argument requires that `non_static_str` is borrowed for `&amp;#39;static`
&lt;&#x2F;span&gt;&lt;span&gt;   |                              value captured here
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;XX | }
&lt;&#x2F;span&gt;&lt;span&gt;   | - `non_static_str` dropped here while still borrowed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Turns out our futures are not &lt;em&gt;sufficiently independent&lt;&#x2F;em&gt;, which in the case of
tasks means they need to be fully independent. If we look at the signature of
the &lt;code&gt;tokio::spawn&lt;&#x2F;code&gt; function, the &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; lifetime signifies this requirement.
And the &lt;code&gt;Send&lt;&#x2F;code&gt; lifetime is the part that makes this truly parallel (or rather,
which makes this parallelism safe).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; T) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;JoinHandle&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Output&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Future + Send + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Send + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So in order to make the future fully independent, we can give it its own copy
of all the data it needs to access:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; non_static_str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;tasks&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Instant&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;now()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; futures &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cloned_str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; non_static_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; &amp;lt;-
&lt;&#x2F;span&gt;&lt;span&gt;    tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;future&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;cloned_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; i)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await })
&lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;join_all&lt;&#x2F;span&gt;&lt;span&gt;(futures)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; non_static_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With each task being completely independent now, we can run out example again:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;tasks-5 finished
&lt;&#x2F;span&gt;&lt;span&gt;tasks-4 finished
&lt;&#x2F;span&gt;&lt;span&gt;tasks-7 finished
&lt;&#x2F;span&gt;&lt;span&gt;tasks-0 finished
&lt;&#x2F;span&gt;&lt;span&gt;tasks-2 finished
&lt;&#x2F;span&gt;&lt;span&gt;tasks-1 finished
&lt;&#x2F;span&gt;&lt;span&gt;tasks-6 finished
&lt;&#x2F;span&gt;&lt;span&gt;tasks-3 finished
&lt;&#x2F;span&gt;&lt;span&gt;tasks: 513.6456ms
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Or showing this visually:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;          ┌─────────────┬─────────┐
&lt;&#x2F;span&gt;&lt;span&gt;Thread 1: │ … waiting … │ working │
&lt;&#x2F;span&gt;&lt;span&gt;          ├─────────────┼─────────┤
&lt;&#x2F;span&gt;&lt;span&gt;Thread 2: │ … waiting … │ working │
&lt;&#x2F;span&gt;&lt;span&gt;          └─────────────┴─────────┘
&lt;&#x2F;span&gt;&lt;span&gt;Thread n: …
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is nice! We have parallelized our tasks across multiple threads. However
this comes at a price, in this case cloning of our data.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;mutability&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#mutability&quot; aria-label=&quot;Anchor link for: mutability&quot;&gt;#&lt;&#x2F;a&gt;
Mutability&lt;&#x2F;h1&gt;
&lt;p&gt;We have learned that futures-level concurrency can use shared data without the
need for cloning. So how does this work with mutability?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;mut_future&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;finished&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    finished&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(num)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; finished &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;mut_future&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; finished)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; futures &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;mut_future&lt;&#x2F;span&gt;&lt;span&gt;(i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; finished))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;join_all&lt;&#x2F;span&gt;&lt;span&gt;(futures)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;finished tasks: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; finished)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well, we are out of luck here, as rust enforces the same borrowing rules as for
other mutable borrows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;error: captured variable cannot escape `FnMut` closure body
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; playground\futuresntasks\src\main.rs:XX:34
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;XX |     let mut finished = vec![];
&lt;&#x2F;span&gt;&lt;span&gt;   |         ------------ variable defined here
&lt;&#x2F;span&gt;&lt;span&gt;XX |     let futures = (0..n).map(|i| mut_future(i, &amp;amp;mut finished));
&lt;&#x2F;span&gt;&lt;span&gt;   |                                - ^^^^^^^^^^^^^^^^^^^--------^
&lt;&#x2F;span&gt;&lt;span&gt;   |                                | |                  |
&lt;&#x2F;span&gt;&lt;span&gt;   |                                | |                  variable captured here
&lt;&#x2F;span&gt;&lt;span&gt;   |                                | returns a reference to a captured variable which escapes the closure body   |                                inferred to be a `FnMut` closure
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;   = note: `FnMut` closures only have access to their captured variables while they are executing...
&lt;&#x2F;span&gt;&lt;span&gt;   = note: ...therefore, they cannot allow references to captured variables to escape
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rust thus forces us to use on of the shared mutability primitives. Lets give that
a try:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; finished &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;RefCell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[]))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; futures &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; finished &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; finished&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; finished &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; finished&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;borrow_mut&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;mut_future&lt;&#x2F;span&gt;&lt;span&gt;(i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; finished)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;join_all&lt;&#x2F;span&gt;&lt;span&gt;(futures)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; finished &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;try_unwrap(finished)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_inner&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;finished tasks: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; finished)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;NOTE:&lt;&#x2F;em&gt; The example also works without &lt;code&gt;Rc&lt;&#x2F;code&gt;, I just wanted to highlight the usage
of &lt;em&gt;lightweight&lt;&#x2F;em&gt; shared mutability&#x2F;ownership primitives. This also proves our
observation from above that we are &lt;em&gt;single threaded&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We are also using &lt;code&gt;RefCell&lt;&#x2F;code&gt; here, which &lt;em&gt;“Panics if the value is currently borrowed”&lt;&#x2F;em&gt;.
That can very well happen in case of concurrency. We are just lucky that out
&lt;code&gt;mut_future&lt;&#x2F;code&gt; does not actually &lt;code&gt;await&lt;&#x2F;code&gt; internally. This type is thus a prime
candidate for the proposed &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;83310&quot;&gt;&lt;code&gt;must_not_suspend&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
lint.&lt;&#x2F;p&gt;
&lt;p&gt;The safety guarantees of Rust are about memory safety and avoiding memory races.
You can still do dumb stuff like the above in safe Rust, along with leaking
memory, introducing deadlocks, and having logic bugs.&lt;&#x2F;p&gt;
&lt;p&gt;If we go further and try to introduce a &lt;code&gt;tokio::spawn&lt;&#x2F;code&gt; like before, Rust will
dutifully remind us that we need to use the thread safe companions of
&lt;code&gt;Rc&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;RefCell&lt;&#x2F;code&gt; in that case:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;error: future cannot be sent between threads safely
&lt;&#x2F;span&gt;&lt;span&gt;--&amp;gt; playground\futuresntasks\src\main.rs:XXX:9
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;XXX |         tokio::spawn(async move {
&lt;&#x2F;span&gt;&lt;span&gt;    |         ^^^^^^^^^^^^ future created by async block is not `Send`
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;    = help: within `impl futures::Future`, the trait `std::marker::Send` is not implemented for `Rc&amp;lt;RefCell&amp;lt;Vec&amp;lt;usize&amp;gt;&amp;gt;&amp;gt;`
&lt;&#x2F;span&gt;&lt;span&gt;note: captured value is not `Send`
&lt;&#x2F;span&gt;&lt;span&gt;--&amp;gt; playground\futuresntasks\src\main.rs:XXX:32
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;XXX |             let mut finished = finished.borrow_mut();
&lt;&#x2F;span&gt;&lt;span&gt;    |                                ^^^^^^^^ has type `Rc&amp;lt;RefCell&amp;lt;Vec&amp;lt;usize&amp;gt;&amp;gt;&amp;gt;` which is not `Send`
&lt;&#x2F;span&gt;&lt;span&gt;note: required by a bound in `tokio::spawn`
&lt;&#x2F;span&gt;&lt;span&gt;--&amp;gt; tokio-1.15.0\src\task\spawn.rs:127:21
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;127 |         T: Future + Send + &amp;#39;static,
&lt;&#x2F;span&gt;&lt;span&gt;    |                     ^^^^ required by this bound in `tokio::spawn`
&lt;&#x2F;span&gt;&lt;span&gt;error: future cannot be sent between threads safely
&lt;&#x2F;span&gt;&lt;span&gt;--&amp;gt; playground\futuresntasks\src\main.rs:XXX:9
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;XXX |         tokio::spawn(async move {
&lt;&#x2F;span&gt;&lt;span&gt;    |         ^^^^^^^^^^^^ future created by async block is not `Send`
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;    = help: the trait `Sync` is not implemented for `Cell&amp;lt;isize&amp;gt;`
&lt;&#x2F;span&gt;&lt;span&gt;note: future is not `Send` as this value is used across an await
&lt;&#x2F;span&gt;&lt;span&gt;--&amp;gt; playground\futuresntasks\src\main.rs:XXX:13
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;XXX |             let mut finished = finished.borrow_mut();
&lt;&#x2F;span&gt;&lt;span&gt;    |                 ------------ has type `RefMut&amp;lt;&amp;#39;_, Vec&amp;lt;usize&amp;gt;&amp;gt;` which is not `Send`
&lt;&#x2F;span&gt;&lt;span&gt;XXX |             mut_future(i, &amp;amp;mut finished).await
&lt;&#x2F;span&gt;&lt;span&gt;    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ await occurs here, with `mut finished` maybe used later
&lt;&#x2F;span&gt;&lt;span&gt;XXX |         })
&lt;&#x2F;span&gt;&lt;span&gt;    |         - `mut finished` is later dropped here
&lt;&#x2F;span&gt;&lt;span&gt;note: required by a bound in `tokio::spawn`
&lt;&#x2F;span&gt;&lt;span&gt;--&amp;gt; tokio-1.15.0\src\task\spawn.rs:127:21
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;127 |         T: Future + Send + &amp;#39;static,
&lt;&#x2F;span&gt;&lt;span&gt;    |                     ^^^^ required by this bound in `tokio::spawn`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Going one step further, we even start using &lt;code&gt;tokio::sync::Mutex&lt;&#x2F;code&gt;, which is
a locking primitive better optimized for async contexts, as it allows us to
literally &lt;em&gt;“wait for the lock”&lt;&#x2F;em&gt;, and to hold it across &lt;code&gt;await&lt;&#x2F;code&gt; points.
If we change our type to &lt;code&gt;Arc&amp;lt;tokio::sync::Mutex&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;&amp;gt;&lt;&#x2F;code&gt;, along with necessary
code changes, we come up with a working solution:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; finished &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;sync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Mutex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[]))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; futures &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;n)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; finished &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; finished&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; finished &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; finished&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;mut_future&lt;&#x2F;span&gt;&lt;span&gt;(i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; finished)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;join_all&lt;&#x2F;span&gt;&lt;span&gt;(futures)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; finished &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;try_unwrap(finished)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_inner&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;finished tasks: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; finished)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;Well there we have it. There is pros and cons to both futures (well, &lt;code&gt;futures::join&lt;&#x2F;code&gt; in that sense) and tasks.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Futures can work with non-&lt;code&gt;&#x27;static&lt;&#x2F;code&gt; references.&lt;&#x2F;li&gt;
&lt;li&gt;Tasks on the other hand need to own all their data, leading to more &lt;code&gt;Clone&lt;&#x2F;code&gt;-ing or &lt;code&gt;Arc&lt;&#x2F;code&gt;-ing.&lt;&#x2F;li&gt;
&lt;li&gt;Futures are essentially single-threaded.&lt;&#x2F;li&gt;
&lt;li&gt;While Tasks can spread CPU intensive work across more cores.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;UPDATE&lt;&#x2F;strong&gt;: almost forget the most important difference:&lt;&#x2F;li&gt;
&lt;li&gt;Futures need to be actively polled.&lt;&#x2F;li&gt;
&lt;li&gt;While Tasks are &lt;em&gt;fire and forget&lt;&#x2F;em&gt;. Cancellation works using the &lt;code&gt;JoinHandle::abort&lt;&#x2F;code&gt; API.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So which one should you chose? Well that is totally up to you! What I haven’t
done here is actually &lt;strong&gt;measure&lt;&#x2F;strong&gt; things. Such as:
What is the cost of the additional &lt;code&gt;Clone&lt;&#x2F;code&gt;-ing? How much more work is put on the
Runtime&#x2F;executor? How does this change the throughput of the complete system?
The average latency and the latency distribution? In the end this very much
depends on the system.&lt;&#x2F;p&gt;
&lt;p&gt;But what I can tell you from experience is that especially refactoring from
Futures to Tasks can be painful sometimes. We have seen an example of
a &lt;em&gt;“future is not &lt;code&gt;Send&lt;&#x2F;code&gt;”&lt;&#x2F;em&gt; error. We were lucky in this case because the compiler
told us exactly &lt;em&gt;why&lt;&#x2F;em&gt;. I had to struggle with other cases in which the compiler
presented me with a list of completely undecipherable types that was not at all
helpful.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;threads-and-cores&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#threads-and-cores&quot; aria-label=&quot;Anchor link for: threads-and-cores&quot;&gt;#&lt;&#x2F;a&gt;
Threads and Cores&lt;&#x2F;h1&gt;
&lt;p&gt;While writing this, it also came to me that we have this &lt;em&gt;multiplexing&lt;&#x2F;em&gt; on
different layers.&lt;&#x2F;p&gt;
&lt;p&gt;Futures concurrency is scheduling&#x2F;multiplexing multiple computations on a
single thread. Tasks and executors schedule M tasks on N operating system
threads. Similarly the operating system also schedules M threads to N processor
cores.&lt;&#x2F;p&gt;
&lt;p&gt;The idea here is that higher level we go, we have less overhead. Scheduling
tasks on an executor or threads on the operating system is not free.&lt;&#x2F;p&gt;
&lt;p&gt;And in the end, we have a completely different beast altogether. Modern CPUs
have this thing called simultaneous multithreading, or hardware multithreading.
This is when the CPU offers more logical cores than it has physical cores. So it
can do actual work while other threads are waiting for data to be copied from
main memory into CPU caches. Or other neat tricks to speed up the total
throughput of the system.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust async can truly be zero-cost</title>
        <published>2021-10-12T00:00:00+00:00</published>
        <updated>2021-10-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/zero-cost-async/"/>
        <id>https://swatinem.de/blog/zero-cost-async/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/zero-cost-async/">&lt;p&gt;&lt;strong&gt;Update&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;I updated the code examples now that GATs have been stabilized.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;One of the fundamental selling points of Rust is zero-cost abstractions.
This means that you can write high-level generic code, and the compiler will
optimize it in such a way that you couldn’t have written better code by hand.&lt;&#x2F;p&gt;
&lt;p&gt;There are tons of examples of Rust doing this. But I came with a very specific
example in mind, and was curious if Rust could actually figure all this out.&lt;&#x2F;p&gt;
&lt;p&gt;I want to have some code which should be generic over an async, or a sync
implementation. What does this mean?
Essentially, I want to have an async-trait, with a generic async function
using that trait. But I also want a sync version of it, without having to write
those separately.&lt;&#x2F;p&gt;
&lt;p&gt;It is hard to explain in words, so lets demonstrate the idea with a snipped of
Rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; as of today, we need one nightly-only features to make this work:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;feature&lt;&#x2F;span&gt;&lt;span&gt;(type_alias_impl_trait)]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Stuff&lt;&#x2F;span&gt;&lt;span&gt;(pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;StuffProvider &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;ProvideStuff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Future&amp;lt;Output = Stuff&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;c where Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F; Provides [`Stuff`] asynchronously.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;provide_stuff&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;ProvideStuff&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; This function is generic over something providing us stuff.
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;do_stuff&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;P&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; StuffProvider&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; P) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Stuff {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; stuff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; provider&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;provide_stuff&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    stuff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    stuff
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Okay, so far so good. We have our async function, and the async-trait defined.&lt;&#x2F;p&gt;
&lt;p&gt;What is needed now is an implementation for this trait, which returns &lt;code&gt;Stuff&lt;&#x2F;code&gt;
right away, without asynchronously waiting. My idea was that I can use
&lt;code&gt;core::future::Ready&lt;&#x2F;code&gt; for this, so lets do that:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;SyncStuffProvider&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;StuffProvider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;SyncStuffProvider &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;ProvideStuff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; = &lt;&#x2F;span&gt;&lt;span&gt;Ready&amp;lt;Stuff&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;provide_stuff&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;ProvideStuff&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;ready&lt;&#x2F;span&gt;&lt;span&gt;(Stuff(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;41&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So far so good. I expect the resulting &lt;code&gt;do_stuff(SyncStuffProvider)&lt;&#x2F;code&gt; future
to return &lt;code&gt;Poll::Ready&lt;&#x2F;code&gt; immediately the first time it is called. But how do I
poll this future? Usually it is the job of an async executor to do the polling.
Most async executors have a &lt;code&gt;block_on&lt;&#x2F;code&gt; method that, well, blocks the current
thread for as long as the future needs to be ready, polling it repeatedly if
necessary. However, our future should be ready immediately.&lt;&#x2F;p&gt;
&lt;p&gt;Let us write a simple executor that does exactly this. It does involve a bit of
&lt;code&gt;unsafe&lt;&#x2F;code&gt; code, and it will certainly make you very unhappy if you happen to
actually call it with a future that does not immediately return its results.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;ready_or_diverge &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;{Context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; RawWaker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; RawWakerVTable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Waker}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; copy-pasted from https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;0.3.17&#x2F;futures&#x2F;task&#x2F;fn.noop_waker.html
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;noop_clone&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const &lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; RawWaker {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;noop_raw_waker&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;noop&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const &lt;&#x2F;span&gt;&lt;span&gt;()) {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;NOOP_WAKER_VTABLE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; RawWakerVTable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;RawWakerVTable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(noop_clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; noop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; noop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; noop)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;noop_raw_waker&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; RawWaker {
&lt;&#x2F;span&gt;&lt;span&gt;        RawWaker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;null()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;NOOP_WAKER_VTABLE&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;O, F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Future&amp;lt;Output = O&amp;gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;fut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; F) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; O {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; waker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ Waker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from_raw(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;noop_raw_waker&lt;&#x2F;span&gt;&lt;span&gt;()) }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; context &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from_waker(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;waker)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; pinned &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ Pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new_unchecked(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; fut) }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; pinned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; context) {
&lt;&#x2F;span&gt;&lt;span&gt;            Poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Ready(res) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; diverge
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What this code does is a bit of boilerplate, and a single &lt;code&gt;poll&lt;&#x2F;code&gt;. If we get the
result immediately, fine. Otherwise, loop forever, which is a way to tell Rust
that the function will never return in such a case.&lt;&#x2F;p&gt;
&lt;p&gt;Putting this all together:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;do_stuff_sync&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Stuff {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;do_stuff&lt;&#x2F;span&gt;&lt;span&gt;(SyncStuffProvider)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    ready_or_diverge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;block_on(fut)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;does_stuff_sync&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stuff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;do_stuff_sync&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(stuff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And using &lt;code&gt;cargo +nightly test&lt;&#x2F;code&gt;, we see that things at least work as we expected:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;running 1 test
&lt;&#x2F;span&gt;&lt;span&gt;test does_stuff_sync ... ok
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Very good! But how about the zero-cost abstractions that I wanted to talk about?&lt;&#x2F;p&gt;
&lt;p&gt;Well, for that we would have to actually look at the assembly code that the
compiler generated. I suggest the &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;865fWrE8P&quot;&gt;Compiler Explorer&lt;&#x2F;a&gt;
for that. And sure enough, with optimizations turned on, the Rust compiler is
actually smart enough to see through all of our executor, async and trait code
and compiles it all away to just a simple return.&lt;&#x2F;p&gt;
&lt;p&gt;I am truly amazed! At least for such a simple example, async code is completely
zero-cost.&lt;&#x2F;p&gt;
&lt;p&gt;However, I wonder at which level of complexity the compiler might fail to do so.&lt;&#x2F;p&gt;
&lt;p&gt;In my research, I have found an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;71093&quot;&gt;issue#71093&lt;&#x2F;a&gt;
which highlights a fairly simple case as well in which the compiler was not smart
enough to optimize things away. That issue specifically mentions panicking code,
since &lt;code&gt;async fn&lt;&#x2F;code&gt; will usually generate a panic in case the returned future is
polled again after it successfully returned a value.&lt;&#x2F;p&gt;
&lt;p&gt;That also made me think that maybe using something like
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dtolnay&#x2F;no-panic&quot;&gt;no-panic&lt;&#x2F;a&gt; might provide at least half a
solution here. I wonder if I can use the same tricks in my &lt;code&gt;ready_or_diverge&lt;&#x2F;code&gt;
to rather make it &quot;ready or fail to compile&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;But that is an exercise for another day.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Creating my own bespoke binary format</title>
        <published>2021-09-01T00:00:00+00:00</published>
        <updated>2021-09-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/binary-formats/"/>
        <id>https://swatinem.de/blog/binary-formats/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/binary-formats/">&lt;h1 id=&quot;don-t-do-it&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#don-t-do-it&quot; aria-label=&quot;Anchor link for: don-t-do-it&quot;&gt;#&lt;&#x2F;a&gt;
Don’t do it&lt;&#x2F;h1&gt;
&lt;p&gt;Well first off the bat, I want to repeat something that I read some time ago:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t create your own bespoke binary format! Use JSON!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I agree with this. Having dealt with binary data quite recently, and seeing how
some of the formats are neither well documented, or some of the writers actually
creating invalid data, I can truly say this is really hard to get right!&lt;&#x2F;p&gt;
&lt;p&gt;And if you want to have a one-off data format for something, the best bet it to
just use JSON for it. I would argue that most applications are not as resource
constrained as to not tolerate the overhead that JSON parsing would incur.&lt;&#x2F;p&gt;
&lt;p&gt;Alas, my use-case has some hard constraints. Also most of my learnings come from
designing my own binary format for an interesting problem I wanted to solve a few
month ago. I haven’t published the result of that work yet, but maybe I will
create another post about that in the future.&lt;&#x2F;p&gt;
&lt;p&gt;My general design constraints are like this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I want the format to be compact&lt;&#x2F;li&gt;
&lt;li&gt;I want it to be zero-copy, as in: to be able to access all the contents from
an underlying buffer, without allocating&lt;&#x2F;li&gt;
&lt;li&gt;I want to allow random access&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For my current project, I want to avoid using JSON for another reason: I have
to use C, and since there is no &lt;strong&gt;universal&lt;&#x2F;strong&gt; package manager for that language,
I simply can’t &lt;code&gt;use serde_json&lt;&#x2F;code&gt; and be done with it. Actually importing a JSON
serializer seems like such a hassle that I might as well create my own binary
format.&lt;&#x2F;p&gt;
&lt;p&gt;^ This makes me think of how many horrible and crappy formats we have for the
only reason that it is way too difficult to actually pull in a JSON
parser&#x2F;serializer into a C-based project. Yes, we did that as well in
&lt;code&gt;sentry-native&lt;&#x2F;code&gt;, and we did have unsafe and crashing code in it that we found
via fuzzing. Exactly the point I wanted to make, lol.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;interlude-aos-vs-soa&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#interlude-aos-vs-soa&quot; aria-label=&quot;Anchor link for: interlude-aos-vs-soa&quot;&gt;#&lt;&#x2F;a&gt;
Interlude: AoS vs SoA&lt;&#x2F;h1&gt;
&lt;p&gt;As a small interlude, just tangentially related to the topic at hand, let me
quickly explain the difference between &lt;em&gt;Array of Structs&lt;&#x2F;em&gt; vs &lt;em&gt;Struct of Arrays&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;em&gt;SoA&lt;&#x2F;em&gt; approach is popular in game development and when using
Entity-Component-Systems. It is often used to optimize memory access patterns,
thus improving performance, and might also improve memory usage by avoiding
wasted padding bytes (clownshoes).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;AosRoot &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    elements&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Aos&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Aos &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; A,
&lt;&#x2F;span&gt;&lt;span&gt;    b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; B,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;SoaRoot &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;A&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;B&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I think I will come back to this concept later on when talking about tree-shaped
data, lets move on for now.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;format-compatibility&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#format-compatibility&quot; aria-label=&quot;Anchor link for: format-compatibility&quot;&gt;#&lt;&#x2F;a&gt;
Format Compatibility&lt;&#x2F;h1&gt;
&lt;p&gt;Apart from not having any kind of format compatibility at all, there are in
general two forms of compatibility.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Backwards compatibility&lt;&#x2F;strong&gt; means that an up-to-date reader can read data
produced by an outdated writer. It means that I can continue to read old legacy
versions of the format. I will mostly focus on this, as I control the reading
part and can keep it up-to-date and this form of compatibility is easy to
implement.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Forwards compatibility&lt;&#x2F;strong&gt; means that data produced by an up-to-date writer can
be read by an outdated reader. This is a lot more challenging, and also means
that changes to the format need to be anticipated, otherwise it is impossible
to make it extensible while still being able to support reading a new file with
an outdated reader.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;backwards-compatibility-via-version-tagging&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#backwards-compatibility-via-version-tagging&quot; aria-label=&quot;Anchor link for: backwards-compatibility-via-version-tagging&quot;&gt;#&lt;&#x2F;a&gt;
Backwards compatibility via version tagging&lt;&#x2F;h2&gt;
&lt;p&gt;The simpler of the two is keeping backwards compatibility to older files with
a newer reader. For this, I can simply tag the root of my data format with a
version number, and have separate code for reading&#x2F;interpreting each of the
known versions. It is not forwards compatible, as the only thing the reader can
do when it encounters an unknown version, all it can reasonably do is to throw
a hard error and refuse to parse the format.&lt;&#x2F;p&gt;
&lt;p&gt;The implementation is quite simple, but you will see &lt;em&gt;a lot&lt;&#x2F;em&gt; of unsafe code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;{mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; ptr}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Header &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    num_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    num_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; Header,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; PartialEq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Eq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; PartialEq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Eq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; TODO:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; * actually verify the version
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; * ensure the buffer is actually valid
&lt;&#x2F;span&gt;&lt;span&gt;        Format {
&lt;&#x2F;span&gt;&lt;span&gt;            buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span&gt;(buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt; Header) }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get_as&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data &lt;&#x2F;span&gt;&lt;span&gt;[A] {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a_start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;size_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Header&amp;gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt; A }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a_slice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;slice_from_raw_parts(a_start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;num_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span&gt;a_slice }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get_bs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data &lt;&#x2F;span&gt;&lt;span&gt;[B] {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b_start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buf
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;size_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Header&amp;gt;())
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;size_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;A&amp;gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;num_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt; B
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b_slice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;slice_from_raw_parts(b_start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;num_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span&gt;b_slice }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;format_works&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; version
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; num_a
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; num_b
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[0]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; b[0]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; b[1]
&lt;&#x2F;span&gt;&lt;span&gt;    ]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span&gt;(ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;slice_from_raw_parts(buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;size_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()))
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;parse(buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_as&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[A(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_bs&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Like I said, a ton of &lt;code&gt;unsafe&lt;&#x2F;code&gt;. There is a lot of pointer arithmetic involved,
but the upside is that we are entirely working with borrowed data, and might as
well use the code in a &lt;code&gt;#![no_std]&lt;&#x2F;code&gt; environment.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tree-structured-data&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#tree-structured-data&quot; aria-label=&quot;Anchor link for: tree-structured-data&quot;&gt;#&lt;&#x2F;a&gt;
Tree-structured Data&lt;&#x2F;h2&gt;
&lt;p&gt;I think it is also quite easy to support tree- or maybe even graph-shaped data.
The previous example showed how to get two types as a complete slice. If the
first data type includes a &lt;code&gt;start&lt;&#x2F;code&gt;+&lt;code&gt;len&lt;&#x2F;code&gt; tuple of its child data, we can simply
sub-slice the other data based on that. Lets change our above example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;{mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; ptr}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Header &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    num_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    num_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    own_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    start_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    num_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; PartialEq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Eq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; Header,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; TODO:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; * actually verify the version
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; * ensure the buffer is actually valid
&lt;&#x2F;span&gt;&lt;span&gt;        Format {
&lt;&#x2F;span&gt;&lt;span&gt;            buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span&gt;(buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt; Header) }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get_as&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data &lt;&#x2F;span&gt;&lt;span&gt;[A] {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a_start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;size_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Header&amp;gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt; A }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a_slice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;slice_from_raw_parts(a_start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;num_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span&gt;a_slice }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get_bs_for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; A) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data &lt;&#x2F;span&gt;&lt;span&gt;[B] {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b_start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buf
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;size_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Header&amp;gt;())
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;size_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;A&amp;gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;num_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt; B
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b_slice &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;slice_from_raw_parts(b_start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;num_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;start_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;start_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;num_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span&gt;b_slice)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_unchecked&lt;&#x2F;span&gt;&lt;span&gt;(range) }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;format_works&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; version
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; num_a
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; num_b
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[0].own_data
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[0].start_b
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[0].num_b
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[1].own_data
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[1].start_b
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[1].num_b
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[0].bs[0]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[1].bs[0]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[1].bs[1]
&lt;&#x2F;span&gt;&lt;span&gt;    ]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span&gt;(ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;slice_from_raw_parts(buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;size_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()))
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;parse(buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;#as =&lt;&#x2F;span&gt;&lt;span&gt; parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_as&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;#as.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;#as&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;own_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_bs_for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;#as&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;#as&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;own_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_bs_for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;#as&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This did get a little bit more difficult, but not terribly so. Still a lot of
pointer arithmetic and &lt;code&gt;unsafe&lt;&#x2F;code&gt; code in there.
One inconvenience here is that you need to connect the &lt;code&gt;Parser&lt;&#x2F;code&gt; holding the
raw buffer to our returned parent data.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;making-things-safe&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#making-things-safe&quot; aria-label=&quot;Anchor link for: making-things-safe&quot;&gt;#&lt;&#x2F;a&gt;
Making things safe&lt;&#x2F;h3&gt;
&lt;p&gt;So we have a quite nice format, parsing essentially comes down to pointer
arithmetic and a few casts. And everything without allocating.
But how can we make it safe? By that I don’t mean to remove all the &lt;code&gt;unsafe&lt;&#x2F;code&gt;
blocks, but to rather ensure that whatever happens inside the unsafe blocks is
actually safe.&lt;&#x2F;p&gt;
&lt;p&gt;Well, we can make things memory safe by making sure that the pointers are
properly aligned, and that we have appropriate padding in between our raw
arrays. The next obvious thing to do it to make sure that we don’t read out of
bounds. Luckily Rust makes this super easy to for example do checked
sub-slicing. We can bounds check our &lt;code&gt;Header&lt;&#x2F;code&gt; in a way to ensure that the
numbers of embedded Data does not go out of bounds of the buffer. Similarly,
all the cross-struct references need to be similarly bounds-checked.&lt;&#x2F;p&gt;
&lt;p&gt;This I think should take care of all the unsafety while accessing the data. The
problem remains that we simply cast random bytes. The validity of the actual
data that we point to depends on the correctness of the writer.
CRC-ing the whole buffer (minus version number and CRC-sum itself) might be
another idea to at least guard against bitflips, but does not guard against
writer correctness. I guess if you manipulate the raw data in a certain way,
and we have to remember, we are dealing with user-provided data here, so we
must keep it in mind that some malicious data will fly our way.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;disadvantages&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#disadvantages&quot; aria-label=&quot;Anchor link for: disadvantages&quot;&gt;#&lt;&#x2F;a&gt;
Disadvantages&lt;&#x2F;h3&gt;
&lt;p&gt;We have seen one inconvenience above already. We need access to the raw buffer
when we want to access referenced data. There is a simple solution to this, and
that is to separate the raw data structures from the public API. The public
API would use an iterator that yields stack-allocated copies of our public
structs, still &lt;code&gt;#![no_std]&lt;&#x2F;code&gt; compatible, unless the user decides to &lt;code&gt;collect&lt;&#x2F;code&gt;
those into a heap allocated &lt;code&gt;Vec&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;PublicA&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data &lt;&#x2F;span&gt;&lt;span&gt;Format&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    raw_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; A,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;PublicA&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get_bs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data &lt;&#x2F;span&gt;&lt;span&gt;[B] {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_bs_for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;raw_a)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;iter_a&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; impl &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Item = PublicA&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_as&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;raw_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; PublicA {
&lt;&#x2F;span&gt;&lt;span&gt;            format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            raw_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; iter_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter_a&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(iter_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_bs&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(iter_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_bs&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can have a very ergonomic and still very efficient non-allocating API this
way.&lt;&#x2F;p&gt;
&lt;p&gt;One problem though remains. The writer side of this might not look as nice.
We cannot directly write the format in one go and stream it into a file.
Instead, we have to allocate intermediate &lt;code&gt;A&lt;&#x2F;code&gt; and &lt;code&gt;B&lt;&#x2F;code&gt; vectors, get relative
indices for the child &lt;code&gt;B&lt;&#x2F;code&gt;s, and then write these different buffers one after
the other into a file.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;forwards-compatibility-via-sizeof-tagging&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#forwards-compatibility-via-sizeof-tagging&quot; aria-label=&quot;Anchor link for: forwards-compatibility-via-sizeof-tagging&quot;&gt;#&lt;&#x2F;a&gt;
Forwards compatibility via sizeof tagging&lt;&#x2F;h2&gt;
&lt;p&gt;To re-iterate, being forwards compatible means that an outdated reader can still
read a newer file format. One way I found out while looking at the minidump
format, and some of the Windows APIs is that structures are tagged with their
own &lt;code&gt;size_of&lt;&#x2F;code&gt; values. So even though an outdated writer cannot interpret the
newly added fields, it at least knows how many bytes to skip. Random access
still works, though directly returning typed slices would not I assume.
Good thing Rust has Iterators ;-)&lt;&#x2F;p&gt;
&lt;p&gt;One more interesting thing is that some Windows APIs work this way. You call
them with the &lt;code&gt;size_of&lt;&#x2F;code&gt; of a stack allocated out-parameter. The API can return
(well, write into an out-parameter) different versions of a data type, so the
same function can be used from applications targeting the older version of the
Windows API, while newer applications get extended data.&lt;&#x2F;p&gt;
&lt;p&gt;It works, but it is a pain in the rear to use. At least from C. I think with
Rust it might be possible to write ergonomic wrappers for such an API, though
I haven’t looked or tried myself.&lt;&#x2F;p&gt;
&lt;p&gt;Lets go on and try to implement this kind of format:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;{mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; ptr}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Header &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    sizeof_header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    sizeof_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    sizeof_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    num_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    num_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;RawA &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    own_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    start_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    num_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; PartialEq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Eq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; Header,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; TODO:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; * actually verify the version
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; * ensure the buffer is actually valid
&lt;&#x2F;span&gt;&lt;span&gt;        Format {
&lt;&#x2F;span&gt;&lt;span&gt;            buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span&gt;(buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt; Header) }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get_a&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;idx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; RawA {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a_start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;sizeof_header) }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ a_start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;sizeof_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; idx) }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span&gt;(a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt; RawA) }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get_b&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;idx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; B {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b_start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buf
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;sizeof_header)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;sizeof_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;num_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ b_start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;sizeof_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; idx) }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span&gt;(b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const&lt;&#x2F;span&gt;&lt;span&gt; B) }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;PublicA&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data &lt;&#x2F;span&gt;&lt;span&gt;Format&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    raw_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; RawA,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;PublicA&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;iter_b&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; impl &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Item = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt; B&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; raw_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;raw_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        (raw_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;start_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;raw_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;start_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; raw_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;num_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;idx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_b&lt;&#x2F;span&gt;&lt;span&gt;(idx))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;iter_a&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; impl &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Item = PublicA&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;num_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;idx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; PublicA {
&lt;&#x2F;span&gt;&lt;span&gt;            format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            raw_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_a&lt;&#x2F;span&gt;&lt;span&gt;(idx)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;format_works&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; version
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;28&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; sizeof_header
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; sizeof_a
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; sizeof_b
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; num_a
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; num_b
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; 🤷🏻‍♂️
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[0].own_data
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[0].start_b
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[0].num_b
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; 🤷🏻‍♂️
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[1].own_data
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[1].start_b
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[1].num_b
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; 🤷🏻‍♂️
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[0].bs[0]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; 🤷🏻‍♂️
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[1].bs[0]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; 🤷🏻‍♂️
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; a[1].bs[1]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; 🤷🏻‍♂️
&lt;&#x2F;span&gt;&lt;span&gt;    ]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;*&lt;&#x2F;span&gt;&lt;span&gt;(ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;slice_from_raw_parts(buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;size_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()))
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;parse(buf)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; iter_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parsed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter_a&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; iter_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; iter_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter_b&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(iter_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; iter_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; iter_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter_b&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(iter_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(iter_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well, this was easy enough! Thanks to Rusts &lt;code&gt;impl Iterator&lt;&#x2F;code&gt;, this also happens
to be very ergonomic. One disadvantage is that we can’t use slices directly,
and we would need to &lt;em&gt;always&lt;&#x2F;em&gt; go through the iterators, and allocate and
&lt;code&gt;collect&lt;&#x2F;code&gt; anytime we want a &lt;code&gt;Vec&lt;&#x2F;code&gt; or a slice.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;dynamically-sized-data&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#dynamically-sized-data&quot; aria-label=&quot;Anchor link for: dynamically-sized-data&quot;&gt;#&lt;&#x2F;a&gt;
Dynamically sized Data&lt;&#x2F;h1&gt;
&lt;p&gt;Let me emphasize this very clearly: &lt;strong&gt;Don’t do this!&lt;&#x2F;strong&gt; I’m serious!&lt;&#x2F;p&gt;
&lt;p&gt;Some data formats don’t use an array of equally-sized objects, but rather
dynamically sized objects. Maybe they have string-data embedded, maybe they have
a type tag which says how large the structure is. There are two major problems
with this.&lt;&#x2F;p&gt;
&lt;p&gt;First, you can’t randomly-access the n-th item, you have to parse them
one-by-one.&lt;&#x2F;p&gt;
&lt;p&gt;The second problem is that instead of using indices to cross-reference data,
you rather use byte offsets. To be honest, this is a bit simpler than relying on
pointer arithmetic. But it has one critical shortcoming. It relies on the
correctness of the writer.&lt;&#x2F;p&gt;
&lt;p&gt;I recently debugged a problem with the PDB format that uses dynamically-sized
data, and relative virtual addressing (RVA) to cross-reference entries. Well,
one of these references was wrongly aligned, and reading&#x2F;casting that reference
yielded garbage. While looking at this problem, I found out that all these wrong
entries had one thing in common, but I still haven’t found out why they were
corrupt, or how to fix them. If anyone is curious, the case I’m referring to is
documented &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;symbolic&#x2F;blob&#x2F;4e3dc0a9f211588b140bdf3fdf1658fcab8cefcf&#x2F;symbolic-debuginfo&#x2F;src&#x2F;pdb.rs#L1125-L1135&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Please don’t do this, avoid dynamically-sized data as much as possible.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;embedded-tree-structured-data&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#embedded-tree-structured-data&quot; aria-label=&quot;Anchor link for: embedded-tree-structured-data&quot;&gt;#&lt;&#x2F;a&gt;
Embedded Tree-structured Data&lt;&#x2F;h2&gt;
&lt;p&gt;Even worse than having dynamically-sized data at all is to have it for nested
tree-structured data.&lt;&#x2F;p&gt;
&lt;p&gt;Remember how dynamically-sized data means we can’t have random access. Well,
with tree-structured dynamic data we made things even worse, as we would have
to walk and parse a complete sub-tree in order to advance. Well, that is a pain.
We could kind-of solve this problem by having separate &lt;code&gt;sizeof_self&lt;&#x2F;code&gt; and
&lt;code&gt;sizeof_self_including_subtree&lt;&#x2F;code&gt; sizes, so we can use the latter to skip over the
subtree without walking it.&lt;&#x2F;p&gt;
&lt;p&gt;Its doable, but we are trading storage space for parsing performance. Not to
mention that we are already wasting a lot of storage space to either version-tag
or sizeof-tag every single entity.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;I guess we have come to the end, and I am actually super happy about having
written down all my thoughts on this topic, and even implemented a few ideas in
runnable Rust code (though missing all the bounds-checks).&lt;&#x2F;p&gt;
&lt;p&gt;So in summary, if you can’t use JSON for your data, and absolute need to use a
custom binary format, here are some tips and observations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use the &lt;em&gt;Struct of Arrays&lt;&#x2F;em&gt; pattern, and give each of your entities its own
Array.&lt;&#x2F;li&gt;
&lt;li&gt;Cross-reference entities via indices into those arrays, or sub-slice via
index+len.&lt;&#x2F;li&gt;
&lt;li&gt;If you care about forwards-compatibility, use sizeof-tagging, so that outdated
readers know how to skip data they don’t know how to interpret.&lt;&#x2F;li&gt;
&lt;li&gt;If going with Iterators, use separate &lt;em&gt;raw&lt;&#x2F;em&gt; vs &lt;em&gt;public&lt;&#x2F;em&gt; structs for a nice API.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Avoid dynamically-sized data at all costs&lt;&#x2F;strong&gt;, especially tree-structured.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And just as a finishing rant, just keep your damn software up-to-date!
Even though the forwards-compatible version didn’t turn out to be half as bad
as I had imagined.
Even though I have full control over the reader for my use-case, I can imagine
a scenario where we would have to roll-back a reader upgrade, and might end up
in a situation where the reader is outdated compared to the writer. So I might
as well end up using the sizeof-tagging approach.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Howto Design an infallible algorithm that records errors</title>
        <published>2021-07-07T00:00:00+00:00</published>
        <updated>2021-07-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/infallible-errors/"/>
        <id>https://swatinem.de/blog/infallible-errors/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/infallible-errors/">&lt;p&gt;A quick note first: The &quot;howto&quot; does not mean I present a solution here, but
rather that I am searching for a good solution.&lt;&#x2F;p&gt;
&lt;p&gt;With that out of the way, let me explain what I want to do. I would like to
have an algorithm that always succeeds and produces &lt;em&gt;some&lt;&#x2F;em&gt; kind of result.
And I want to simultaneously output any kind of error that happens while running
that algorithm.&lt;&#x2F;p&gt;
&lt;p&gt;I can quickly think about two solutions here (please ignore any syntax or type
errors here):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;solution_1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Input) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(Output, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;dyn Error&amp;gt;&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;ErrorCollector &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;record_error&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;E&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Error&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; E) {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;solution_2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Input, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;error_collector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; dyn ErrorCollector) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first solution &lt;em&gt;returns&lt;&#x2F;em&gt; a list of errors along with the normal output. One
disadvantage of this is that it allocates and boxes the errors, so it won’t work
in a &lt;code&gt;no_std&lt;&#x2F;code&gt; environment. Although that is not necessary for my particular
use-case, even though it might be nice to have in general.
The other disadvantage is that is will allocate and return the list
unconditionally, even if the caller just doesn’t care.&lt;&#x2F;p&gt;
&lt;p&gt;The second solution takes a &lt;code&gt;collector&lt;&#x2F;code&gt; that we feed errors into. The caller is
responsible to either collect the errors or to just ignore them. I kind of favor
this solution.&lt;&#x2F;p&gt;
&lt;p&gt;One more question would be: Do I &lt;em&gt;always&lt;&#x2F;em&gt; want to continue processing when an
error happens? With the &lt;code&gt;ErrorCollector&lt;&#x2F;code&gt; solution, it might be possible to give
feedback whether the processor should continue, or early-exit. The processor
might as well continue to return a &lt;code&gt;Result&lt;&#x2F;code&gt; as well, making a difference between
recoverable or non-recoverable errors.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;some-prior-art&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#some-prior-art&quot; aria-label=&quot;Anchor link for: some-prior-art&quot;&gt;#&lt;&#x2F;a&gt;
Some prior Art&lt;&#x2F;h1&gt;
&lt;p&gt;I do have a thing for programming language tooling, and there is quite some
prior art for resilient parsers there. It is a question of how convenient it is
to work with the results however.&lt;&#x2F;p&gt;
&lt;p&gt;There is a difference between parsers outputting an &lt;em&gt;abstract syntax tree&lt;&#x2F;em&gt;, and
ones that rather output a &lt;em&gt;concrete syntax tree&lt;&#x2F;em&gt;. The ones that work with CSTs
seem to rather output token trees, with special &lt;code&gt;Error&lt;&#x2F;code&gt; tokens which can happen
&lt;em&gt;anywhere&lt;&#x2F;em&gt; in the CST. On the other hands, previous AST-based parsers would
rather output a list of errors along with the normal AST. The thing that makes
these inconvenient is that all the AST properties are optional, which makes it
a bit hard to use.&lt;&#x2F;p&gt;
&lt;p&gt;I have worked with the output of the TypeScript parser a lot. It is a resilient
parser that can as well parse invalid code as much as possible. However for my
use-case, I only work with valid code. And for that use-case, having to always
match on, or unwrap the TypeScript equivalent of &lt;code&gt;Option&lt;&#x2F;code&gt; is a bit of a pain.&lt;&#x2F;p&gt;
&lt;p&gt;I have heard some good things about the incremental and resilient parser of
Rust-Analyzer, which produces a token-based CST, as far as I know. I have never
directly worked with it, so I can’t speak to how convenient it is to use and
match on code structures though.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;my-use-case&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#my-use-case&quot; aria-label=&quot;Anchor link for: my-use-case&quot;&gt;#&lt;&#x2F;a&gt;
My use-case&lt;&#x2F;h1&gt;
&lt;p&gt;At sentry, we deal a lot with native executable and debugging formats. The two
major formats there are PDB, the debugging format on Windows, and DWARF, the one
on Linux and Mac. The low level parsers for these formats can spew all kinds of
errors from almost every single function&#x2F;accessor&#x2F;iterator they provide.&lt;&#x2F;p&gt;
&lt;p&gt;However, we want to extract as much high-level information from these formats
as possible. Parsing these formats can fail for all kinds of different reasons.
For one, the compilers producing these formats might have bugs and they generate
some invalid records in these files. Or our parsers might be buggy, or they
might fail if they encounter some records that are not supported.&lt;&#x2F;p&gt;
&lt;p&gt;We want to be as resilient as possible. We shouldn’t fail processing the whole
debug information file, if only one record deep inside of it is faulty, for
whatever reason. We also want to get detailed errors so we know how to improve
our parsers to add support for new formats and fix bugs in it.&lt;&#x2F;p&gt;
&lt;p&gt;This is a hard problem to solve. Also, how resilient do we want to be? How do
we know if we can parse 99% of the file correctly, but just fail one single
entry, vs if we can only parse a single entry, and fail to parse 99% (the rest)
of the file.&lt;&#x2F;p&gt;
&lt;p&gt;How do we want to continue when we encounter an error? Do we skip the whole
record, or do we rather emit some kind of sentinel record? To give a concrete
example. If our job is to match an instruction address to a
&lt;code&gt;(Function, File, Line)&lt;&#x2F;code&gt; tuple, should we rather say &quot;we have no record&quot;, or
should we rather return a record such as
&lt;code&gt;(function &quot;foo&quot;, in &quot;unknown file&quot;, on line &quot;unknown&quot;)&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;I think we can extend the &lt;code&gt;ErrorCollector&lt;&#x2F;code&gt; pattern, and also give it a context
of what we try to process, or even give it the possibility to return a sentinel
value?&lt;&#x2F;p&gt;
&lt;p&gt;I’m struggling a bit with figuring out how this would actually work. Also, I’m
not sure we want to give the collector all that much choice, or if we should
just make these decisions ourselves. If we encounter an error parsing the
filename of a function record, just return &quot;unknown&quot;, if we encounter an error
parsing the whole function record, just &quot;skip and continue with the next one&quot;?&lt;&#x2F;p&gt;
&lt;p&gt;The question is also, how specific should this be to our own use-case? We have
a higher-level library wrapping a low-level one. But we are not the only user
of this higher-level library. There are other users as well. How fine-grained
should the control be that we expose? How can we evolve this without forcing
breaking changes on other users?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;some-brainstorming&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#some-brainstorming&quot; aria-label=&quot;Anchor link for: some-brainstorming&quot;&gt;#&lt;&#x2F;a&gt;
Some Brainstorming&lt;&#x2F;h1&gt;
&lt;p&gt;Lets sketch up a possible API for this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;ErrorCollector &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;record_error&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;E&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Error&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; E) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), E&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;AlwaysError &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ErrorCollector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;AlwaysError &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;record_error&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;E&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Error&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; E) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), E&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(error)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;AlwaysIgnore &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ErrorCollector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;AlwaysIgnore &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;record_error&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;E&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Error&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; E) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), E&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Default)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;CollectErrors &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    errors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;dyn Error&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;CollectErrors &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;into_inner&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;dyn Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;errors
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ErrorCollector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;CollectErrors &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;record_error&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;E&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Error&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; E) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), E&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;errors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new(error))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;err_or_with&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Collector, F, T, E&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;collector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; Collector, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T, E&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; F)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    Collector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; ErrorCollector,
&lt;&#x2F;span&gt;&lt;span&gt;    F&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; FnOnce() -&amp;gt; T
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; hm, do we have such a combinator on `Result` already?
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; result {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(err) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; collector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;record_error&lt;&#x2F;span&gt;&lt;span&gt;(err) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; _
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;macro_rules! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;err_or_continue &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;$collector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;$expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(,)?) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Err(err) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; collector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;record_error&lt;&#x2F;span&gt;&lt;span&gt;(err) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; _
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;C&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; ErrorCollector&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;collector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; C) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, Error&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; names &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; res &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; some_iter {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;err_or_continue&lt;&#x2F;span&gt;&lt;span&gt;(collector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; res)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;err_or_with&lt;&#x2F;span&gt;&lt;span&gt;(collector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get_name&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;unknown&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(names)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I would really appreciate some feedback on this.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The REAL mathematics of fat-loss</title>
        <published>2021-04-24T00:00:00+00:00</published>
        <updated>2021-04-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/real-mafs-of-fatloss/"/>
        <id>https://swatinem.de/blog/real-mafs-of-fatloss/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/real-mafs-of-fatloss/">&lt;p&gt;There is an interesting TED-talk called
&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=vuIlsN32WaE&quot;&gt;The mathematics of weight loss&lt;&#x2F;a&gt;
which explains with chemical formulas and maths how bodyfat will be turned
into \( CO_2 \) and Water.&lt;&#x2F;p&gt;
&lt;p&gt;The presenter starts with the following chemical formula:&lt;&#x2F;p&gt;
&lt;p&gt;\[ C_{55}H_{104}O_6 + 78O_2 \rarr 55CO_2 + 52H_2O \]&lt;&#x2F;p&gt;
&lt;p&gt;And then goes on to calculate that 84% of &lt;em&gt;of the fat&lt;&#x2F;em&gt; is being exhaled
as \( CO_2 \). But that is not really what I am interested in, so lets do
the calculation again.&lt;&#x2F;p&gt;
&lt;p&gt;Using the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Standard_atomic_weight#In_the_periodic_table&quot;&gt;list of atomic weights&lt;&#x2F;a&gt; as presented in the video, we
get the following totals for the fat and our &lt;em&gt;total&lt;&#x2F;em&gt; \( CO_2 \) exhaled:&lt;&#x2F;p&gt;
&lt;p&gt;\[
55 * 12.011 + 104 * 1.008 + 6 * 15.999 = 861.431 \newline
55 * (12.011 + 2 * 15.999) = 2420.495 \newline
2420.495 &#x2F; 861.431 \approx 2.8
\]&lt;&#x2F;p&gt;
&lt;p&gt;Now that is more interesting! So for every kilogram of fat that my body
metabolizes, I breath out 2.8 kg of \( CO_2 \).&lt;&#x2F;p&gt;
&lt;p&gt;Even though not every fat is the same, dietary fat is the equivalent to 9 kcal
when it comes to dietary labels, so I will just use that. So one kg of fat
equals roughly 9000 kcal.
Lets assume that my daily energy expenditure is around 2200 kcal, since I am
super sedentary right now; when active I would say that my energy expenditure
is more around the 3000 kcal range.&lt;&#x2F;p&gt;
&lt;p&gt;Anyhow. So, I would need between 3 to 4 days of fasting to metabolize one kg of
bodyfat.
Or fasting for 90 days straight to get rid of the roughly 25 kg of bodyfat that I
carry around with me.&lt;&#x2F;p&gt;
&lt;p&gt;When it comes to \( CO_2 \), that means that every day I exhale maybe 700-900 g.
Considering that a car that is halfway fun to drive emits around 180 g per km,
those numbers are put into a quite interesting relation.&lt;&#x2F;p&gt;
&lt;p&gt;We can round that to maybe 300 kg of \( CO_2 \) a year. Multiplying that up to
the approximately 8 mil inhabitants of Austria, that is roughly 2.4 mega tons.&lt;&#x2F;p&gt;
&lt;p&gt;Just by people breathing. Certainly less than
&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=6yv1qrsbUYo&quot;&gt;1-2 giga byte&lt;&#x2F;a&gt;, lol.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Force Unwind Tables</title>
        <published>2021-04-22T00:00:00+00:00</published>
        <updated>2021-04-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/unwind-tables/"/>
        <id>https://swatinem.de/blog/unwind-tables/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/unwind-tables/">&lt;p&gt;I was recently investigating a customer issue where I got stuck at the point
where I simply couldn’t seem to find any kind of unwind information for a
specific piece of code, while the rest of the code had such information.
My conclusion was that it could potentially be a problem in the customers build
chain. I found a similar problem looking at a truncated stack trace on Android.&lt;&#x2F;p&gt;
&lt;p&gt;To better understand how this can happen, I tried to reproduce this myself. So
lets build a program that has debug and unwind information for parts of the
program, but not others.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; opt.c
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;fn_without_debuginfo&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;print_backtrace&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; main.c
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;indirect_call&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;=== indirect call ===&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;fn_without_debuginfo&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;direct_call&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;=== direct call ===&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;print_backtrace&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;direct_call&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;indirect_call&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I split my program into two &lt;em&gt;compile units&lt;&#x2F;em&gt;, which I compile with different
flags before I link them into the final executable:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;make&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-make &quot;&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span&gt;	gcc -c opt.c -Os -fno-asynchronous-unwind-tables -fno-optimize-sibling-calls
&lt;&#x2F;span&gt;&lt;span&gt;	gcc -c main.c -g
&lt;&#x2F;span&gt;&lt;span&gt;	gcc -o foo main.o opt.o -ldl -rdynamic
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, &lt;code&gt;-fno-optimize-sibling-calls&lt;&#x2F;code&gt; avoids gcc being smart and actually
tail-call-optimizing my whole &lt;code&gt;fn_without_debuginfo&lt;&#x2F;code&gt; away. I also needed &lt;code&gt;-rdynamic&lt;&#x2F;code&gt;
when linking the executable in order to be able to symbolicate the stack trace.&lt;&#x2F;p&gt;
&lt;p&gt;The important piece here is &lt;code&gt;-fno-asynchronous-unwind-tables&lt;&#x2F;code&gt; which instructs
gcc to avoid creating the &lt;code&gt;.eh_frame&lt;&#x2F;code&gt; section which contains the unwind tables.
Also, the compile unit is built without debug information.&lt;&#x2F;p&gt;
&lt;p&gt;Running my executable yields the expected (broken) results:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;=== direct call ===
&lt;&#x2F;span&gt;&lt;span&gt;0 - 0x0x55f80c10e1b7 (+0x0x11b7) - print_backtrace
&lt;&#x2F;span&gt;&lt;span&gt;1 - 0x0x55f80c10e2e1 (+0x0x12e1) - direct_call
&lt;&#x2F;span&gt;&lt;span&gt;2 - 0x0x55f80c10e2f2 (+0x0x12f2) - main
&lt;&#x2F;span&gt;&lt;span&gt;3 - 0x0x7f94c555db25 (+0x0x27b25) - __libc_start_main
&lt;&#x2F;span&gt;&lt;span&gt;4 - 0x0x55f80c10e0be (+0x0x10be) - _start
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;=== indirect call ===
&lt;&#x2F;span&gt;&lt;span&gt;0 - 0x0x55f80c10e1b7 (+0x0x11b7) - print_backtrace
&lt;&#x2F;span&gt;&lt;span&gt;1 - 0x0x55f80c10e307 (+0x0x1307) - fn_without_debuginfo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The stack trace is truncated after my &lt;code&gt;fn_without_debuginfo&lt;&#x2F;code&gt;, exactly as
intended, except, it is not what you expect when using a tool such as sentry.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;lose-some-weight&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#lose-some-weight&quot; aria-label=&quot;Anchor link for: lose-some-weight&quot;&gt;#&lt;&#x2F;a&gt;
Lose some Weight&lt;&#x2F;h1&gt;
&lt;p&gt;It turns out, all this information can lead to a bit of binary bloat. I have
seen reports that unwind information can take up as much as 10% of the resulting
binary size. So in cases where binary size matters, which it especially does for
mobile and embedded, there are a few tutorials online that advocate to just
completely remove the whole &lt;code&gt;.eh_frame&lt;&#x2F;code&gt; section.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;small-and-big-unwind-information&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#small-and-big-unwind-information&quot; aria-label=&quot;Anchor link for: small-and-big-unwind-information&quot;&gt;#&lt;&#x2F;a&gt;
Small and Big Unwind Information&lt;&#x2F;h1&gt;
&lt;p&gt;Coming back to my example, I compiled part of my program with the &lt;code&gt;-g&lt;&#x2F;code&gt; switch
which turned on detailed debug information.&lt;&#x2F;p&gt;
&lt;p&gt;This detailed debug info contains all the details to allow debuggers to show
which local variables are defined, and where on the stack or in which registers
they can be found, among other information.&lt;&#x2F;p&gt;
&lt;p&gt;I will call this the &lt;em&gt;big&lt;&#x2F;em&gt; unwind information. And yes, they are &lt;em&gt;huge&lt;&#x2F;em&gt;,
sometimes 2x or even 10x the binary size.&lt;&#x2F;p&gt;
&lt;p&gt;These are however not needed at runtime, and it is best practice to split them
apart from the actual binary. They also contain sensitive details about the codebase ;-)&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;em&gt;small&lt;&#x2F;em&gt; &lt;code&gt;.eh_frame&lt;&#x2F;code&gt; remains in the binary, as you might need it, such as to
create a stack trace as in our example. But you can also safely remove it in
some cases, more on that later.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Another interesting case is statically linked libraries. How do you know with
what flags they were compiled? Do they have both kinds of unwind information or
not? How would I know when looking at &lt;code&gt;libc.a&lt;&#x2F;code&gt; that comes with the
&lt;a href=&quot;https:&#x2F;&#x2F;archlinux.org&#x2F;packages&#x2F;community&#x2F;x86_64&#x2F;musl&#x2F;&quot;&gt;arch musl package&lt;&#x2F;a&gt;?&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;To summarize, there is two different sets of unwind information, &lt;em&gt;big&lt;&#x2F;em&gt; and
&lt;em&gt;small&lt;&#x2F;em&gt;, one that is shipped together with the executable, and the other not.
And you can end up in situations where parts of your program have either one,
both or neither.&lt;&#x2F;p&gt;
&lt;p&gt;This is also the reason why, when working with sentry, it is important to upload
both the executable, and the accompanying debug file.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rust&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#rust&quot; aria-label=&quot;Anchor link for: rust&quot;&gt;#&lt;&#x2F;a&gt;
Rust&lt;&#x2F;h1&gt;
&lt;p&gt;I actually hit a similar problem recently while playing around with
&lt;code&gt;-C panic=abort&lt;&#x2F;code&gt; in Rust. I was surprised that the &lt;code&gt;panic!&lt;&#x2F;code&gt; backtrace was
truncated and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;81902&quot;&gt;filed an issue&lt;&#x2F;a&gt; about it. Turns out that
Rust &lt;em&gt;by default&lt;&#x2F;em&gt; will avoid creating unwind info when compiled with
&lt;code&gt;panic=abort&lt;&#x2F;code&gt;. This option is frequently recommended to avoid binary bloat.
And sure enough, if you don’t want to ever catch a &lt;code&gt;panic!&lt;&#x2F;code&gt;, you don’t need it,
however you will also lose the ability to get a meaningful stack trace.&lt;&#x2F;p&gt;
&lt;p&gt;You can get that ability back by using &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustc&#x2F;codegen-options&#x2F;index.html#force-unwind-tables&quot;&gt;&lt;code&gt;-C force-unwind-tables&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this case I must say that I disagree with Rusts behavior, as catching panics
and creating stack traces are two different concerns. And &lt;code&gt;panic=abort&lt;&#x2F;code&gt; is &lt;em&gt;very&lt;&#x2F;em&gt;
frequently used. So remember to use &lt;code&gt;-C force-unwind-tables&lt;&#x2F;code&gt; if you care about
stack traces but not about catching panics.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Overcoming Bad Standards</title>
        <published>2021-04-18T00:00:00+00:00</published>
        <updated>2021-04-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/standards/"/>
        <id>https://swatinem.de/blog/standards/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/standards/">&lt;p&gt;Interestingly, in recent times I have read and watched a few articles&#x2F;videos
about first principles thinking.
It might be a bit related to confirmation bias, since recently I have been
thinking about this topic myself, in the context of bad standards.
Or rather, standards that we &lt;em&gt;now&lt;&#x2F;em&gt; adhere to merely for the reason that it &lt;em&gt;is&lt;&#x2F;em&gt;
a standard, and we have &lt;em&gt;always done it that way&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Anyhow, my train of thought started a few weeks ago when I saw a snippet of
&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Nb2tebYAaOA&quot;&gt;Jim Keller&lt;&#x2F;a&gt; talking about all
kinds of topics ranging from microprocessor design to, well, talking about
first principle thinking, also mentioning Elon Musk who is famous for his way
of first principle thinking. BTW, I am a bit of an Elon fanboy, and I do have a
framed picture of him smoking weed on my desk, lol.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I have this talent to think outside of the box, to see flaws and improvements
where others don’t even think about them.
It’s a blessing because it makes me really good at what I do. It’s also a giant
curse because, well, it is quite depressing to see flaws everywhere. Especially
when you realize that there already exist perfectly good solutions, or at least
improvements. Which will never gain mass adoption because of societies resistance
to change.&lt;&#x2F;p&gt;
&lt;p&gt;I mean, there are valid reasons for resisting change. Lack of a &lt;em&gt;compelling&lt;&#x2F;em&gt;
incentive is a good one. Or maybe the possible improvement is not worth the
effort re-learning everything. I resist change myself in certain situations.
I would rather drive a 20 year old car with fewer digital components than
modern cars. I don’t want to exchange my physical light switches for home
automation. Because why should I? Things work fine the way they do now. And
the “more modern” solutions are complex, have more moving parts that can
potentially break, and are harder or even impossible for me to repair.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;What people way too seldom do is think about the constraints that influenced
existing solutions. When doing so, you may realize that often times, some
fundamental design decisions are just not valid anymore, since the constraints
have changed.&lt;&#x2F;p&gt;
&lt;p&gt;Take as an example the most widely used keyboard layout QWERTZ&#x2F;QWERTY. About
ten years ago, I invested some time learning the
&lt;a href=&quot;https:&#x2F;&#x2F;www.neo-layout.org&#x2F;&quot;&gt;Neo2 Layout&lt;&#x2F;a&gt;, which has quite some more logic
and intuition to it and is easier to learn. It is also said to allow faster
touch typing with less typos.
So what is wrong with QWERTZ? Well, it was developed a &lt;em&gt;long&lt;&#x2F;em&gt; time ago, and it
is widely believed that it was specifically engineered to work around the
limitations of mechanical typewriters of those times. Essentially slowing you
down to avoid mechanical parts from getting stuck to each other.
That is a technical limitation that simply does not exist anymore. We should be
free to use better solutions, so why don’t we?&lt;&#x2F;p&gt;
&lt;p&gt;There is a simple reason. Every device that we can buy has QWERTZ. Every
operating system has it, and might not have easy ways to use alternative
layouts. Touch based operating systems have it as onscreen keyboard. I mus
admit that I still use QWERTZ on Android, even though Neo2 support was added
a while back. Because of muscle memory. And yes, a lot of people learn that
layout in school or dedicated training courses. Even though Neo2 would be a lot
easier to learn as it has a much better learning curve.&lt;&#x2F;p&gt;
&lt;p&gt;So while the original technical limitations do not exist any more, we are in a
state of &lt;em&gt;we have always done it this way&lt;&#x2F;em&gt;. And I kind of agree. Having a bad
standard is better than having no standard at all.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;In terms of software, we have the same resistance to change. We still have
companies or projects that actively aim to support Windows XP, which is 20 years
old by now. Also from my own experience, I have nightmares about how bad C as
a language is, and also how bad all the tools and formats around it are. How
bad POSIX is. And its not just me. I read an increasing number of articles
talking about this.&lt;&#x2F;p&gt;
&lt;p&gt;I must admit, I haven’t spent much time researching the reasons for why things
are the way they are. But I would guess that a lot of that has to do with
technical limitations that existed half a century ago, but are not valid anymore.
See, most of the technology we use today stems from the 70s. And either keeping
backward compatibility, or adopting existing tools with minimal effort, are
among the guiding principles of new projects being done today.&lt;&#x2F;p&gt;
&lt;p&gt;I regularly daydream about how our world would look like today without these
limitations.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Enough ranting for now.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Finding loaded libraries on Linux</title>
        <published>2021-04-02T00:00:00+00:00</published>
        <updated>2021-04-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/proc-maps/"/>
        <id>https://swatinem.de/blog/proc-maps/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/proc-maps/">&lt;p&gt;Well, I am still very much procrastinating on writing the next blog post in my
&lt;em&gt;Relax and Unwind&lt;&#x2F;em&gt; series about writing a stack unwinder from scratch.&lt;&#x2F;p&gt;
&lt;p&gt;However, todays topic is a prerequisite for that. We will take a look at how
we can get a list of loaded libraries on Linux.&lt;&#x2F;p&gt;
&lt;p&gt;Usually, the platform will provide the necessary APIs to get a list of loaded
libraries directly from the dynamic loader that is responsible to load them.
On Windows, you have the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;tlhelp32&#x2F;nf-tlhelp32-createtoolhelp32snapshot&quot;&gt;Tool Help Library&lt;&#x2F;a&gt;, and on Apple
platforms you have some &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;archive&#x2F;documentation&#x2F;System&#x2F;Conceptual&#x2F;ManPages_iPhoneOS&#x2F;man3&#x2F;dyld.3.html&quot;&gt;dyld&lt;&#x2F;a&gt; functions available.&lt;&#x2F;p&gt;
&lt;p&gt;For better or for worse, on Linux there are no standardized userspace tools.
GNU&#x2F;Linux has the &lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man3&#x2F;dl_iterate_phdr.3.html&quot;&gt;&lt;code&gt;dl_iterate_phdr&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; function for this purpose, but
that is notably not available on ancient Android systems (The
&lt;a href=&quot;https:&#x2F;&#x2F;android.googlesource.com&#x2F;platform&#x2F;bionic&#x2F;+&#x2F;master&#x2F;docs&#x2F;status.md&quot;&gt;Bionic Status&lt;&#x2F;a&gt; lists the API as available starting with API 21,
aka Android 5, released end of 2014).
So if you have to support ancient Android versions, which unfortunately we have
to, you will need to get the list of loaded libraries from somewhere else.&lt;&#x2F;p&gt;
&lt;p&gt;It seems the state of the art is to parse the memory map info from &lt;code&gt;&#x2F;proc&#x2F;XXX&#x2F;maps&lt;&#x2F;code&gt;
and try to find the mapped elf files that way. It is what &lt;a href=&quot;https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;breakpad&#x2F;breakpad&#x2F;+&#x2F;master&#x2F;src&#x2F;client&#x2F;linux&#x2F;minidump_writer&#x2F;linux_dumper.cc#541&quot;&gt;Breakpad&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;breakpad&#x2F;breakpad&#x2F;+&#x2F;master&#x2F;src&#x2F;processor&#x2F;proc_maps_linux.cc#29&quot;&gt;in two places&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;crashpad&#x2F;crashpad&#x2F;+&#x2F;refs&#x2F;heads&#x2F;master&#x2F;util&#x2F;linux&#x2F;memory_map.cc#57&quot;&gt;Crashpad&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;cs.android.com&#x2F;android&#x2F;platform&#x2F;superproject&#x2F;+&#x2F;master:system&#x2F;libprocinfo&#x2F;include&#x2F;procinfo&#x2F;process_map.h;drc=master;l=92&quot;&gt;Androids libunwindstack&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;llvm&#x2F;llvm-project&#x2F;blob&#x2F;62ec4ac90738a5f2d209ed28c822223e58aaaeb7&#x2F;lldb&#x2F;source&#x2F;Plugins&#x2F;Process&#x2F;Utility&#x2F;LinuxProcMaps.cpp#L26&quot;&gt;LLDB&lt;&#x2F;a&gt; do. I think another reason these tools do it that way is
because some of them are &lt;em&gt;outside observers&lt;&#x2F;em&gt;, that just can’t query the dynamic
loader from inside the process.&lt;&#x2F;p&gt;
&lt;p&gt;This approach is also what I implemented for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;sentry-native&#x2F;blob&#x2F;aee5dc1a55dee01477f20016c197084a501db0de&#x2F;src&#x2F;modulefinder&#x2F;sentry_modulefinder_linux.c#L28&quot;&gt;sentry-native&lt;&#x2F;a&gt; as well.
However that implementation was rather conservative and did not catch all the
cases, most notably &lt;code&gt;.so&lt;&#x2F;code&gt; files loaded directly from inside Android &lt;code&gt;.apk&lt;&#x2F;code&gt; packages.&lt;&#x2F;p&gt;
&lt;p&gt;So I re-thought the approach to support more cases, and want to document my
approach, and a few interesting cases that I found here.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-proc-x-maps-format&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-proc-x-maps-format&quot; aria-label=&quot;Anchor link for: the-proc-x-maps-format&quot;&gt;#&lt;&#x2F;a&gt;
The &lt;code&gt;&#x2F;proc&#x2F;X&#x2F;maps&lt;&#x2F;code&gt; format&lt;&#x2F;h1&gt;
&lt;p&gt;The format for these &lt;code&gt;&#x2F;proc&#x2F;X&#x2F;maps&lt;&#x2F;code&gt; is documented in a &lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man5&#x2F;proc.5.html&quot;&gt;manpage here&lt;&#x2F;a&gt;.
It includes the start&#x2F;end of the virtual address space covered by the mapping,
as well as permission information, and information about the inode (file) it is
coming from, and the offset inside that file.&lt;&#x2F;p&gt;
&lt;p&gt;On Linux, all the executables and libraries have the ELF format. The was recently
a really great post on the &lt;a href=&quot;https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;how-to-execute-an-object-file-part-1&#x2F;&quot;&gt;Cloudflare Blog&lt;&#x2F;a&gt; that explained the ELF
format, and how a loader parses and processes it in great detail.&lt;&#x2F;p&gt;
&lt;p&gt;There are cases when a library uses just one mapping, but most of the time, it
is split into two or more mappings. Usually a read-only mapping that includes
the ELF headers and some metadata, and an executable mapping that holds the
actual program code.&lt;&#x2F;p&gt;
&lt;p&gt;On my Linux system, I saw up to 6 mappings for a single file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;7f8cd3467000-7f8cd3475000 r--p 00000000 00:1c 7597971                    &#x2F;usr&#x2F;lib&#x2F;libcurl.so.4.7.0
&lt;&#x2F;span&gt;&lt;span&gt;7f8cd3475000-7f8cd34da000 r-xp 0000e000 00:1c 7597971                    &#x2F;usr&#x2F;lib&#x2F;libcurl.so.4.7.0
&lt;&#x2F;span&gt;&lt;span&gt;7f8cd34da000-7f8cd34f6000 r--p 00073000 00:1c 7597971                    &#x2F;usr&#x2F;lib&#x2F;libcurl.so.4.7.0
&lt;&#x2F;span&gt;&lt;span&gt;7f8cd34f6000-7f8cd34f7000 ---p 0008f000 00:1c 7597971                    &#x2F;usr&#x2F;lib&#x2F;libcurl.so.4.7.0
&lt;&#x2F;span&gt;&lt;span&gt;7f8cd34f7000-7f8cd34fa000 r--p 0008f000 00:1c 7597971                    &#x2F;usr&#x2F;lib&#x2F;libcurl.so.4.7.0
&lt;&#x2F;span&gt;&lt;span&gt;7f8cd34fa000-7f8cd34fc000 rw-p 00092000 00:1c 7597971                    &#x2F;usr&#x2F;lib&#x2F;libcurl.so.4.7.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The interesting case here is that the 4th mapping is not readable, and basically
creates a gap in the address space.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Another interesting case I found on Android:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;737b5570d000-737b5570e000 r--p 00000000 07:70 34                         &#x2F;apex&#x2F;com.android.runtime&#x2F;lib64&#x2F;bionic&#x2F;libdl.so
&lt;&#x2F;span&gt;&lt;span&gt;737b5570e000-737b5570f000 r-xp 00000000 07:70 34                         &#x2F;apex&#x2F;com.android.runtime&#x2F;lib64&#x2F;bionic&#x2F;libdl.so
&lt;&#x2F;span&gt;&lt;span&gt;737b5570f000-737b55710000 r--p 00000000 07:70 34                         &#x2F;apex&#x2F;com.android.runtime&#x2F;lib64&#x2F;bionic&#x2F;libdl.so
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, the same file at the same offset is mapped onto different address ranges.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The way that the Android loader loads libraries directly from apks is also interesting.
Compare the following two mappings, which load the exact same libraries, once extracted to disk,
once directly from the apk:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;77a85dbda000-77a85dbdd000 r-xp 00000000 fd:05 40992                      &#x2F;data&#x2F;app&#x2F;x&#x2F;y&#x2F;lib&#x2F;x86_64&#x2F;libsentry-android.so
&lt;&#x2F;span&gt;&lt;span&gt;77a85dbdd000-77a85dbde000 ---p 00000000 00:00 0
&lt;&#x2F;span&gt;&lt;span&gt;77a85dbde000-77a85dbdf000 r--p 00003000 fd:05 40992                      &#x2F;data&#x2F;app&#x2F;x&#x2F;y&#x2F;lib&#x2F;x86_64&#x2F;libsentry-android.so
&lt;&#x2F;span&gt;&lt;span&gt;77a85dc15000-77a85dd6c000 r-xp 00000000 fd:05 40991                      &#x2F;data&#x2F;app&#x2F;x&#x2F;y&#x2F;lib&#x2F;x86_64&#x2F;libsentry.so
&lt;&#x2F;span&gt;&lt;span&gt;77a85dd6c000-77a85dd6d000 ---p 00000000 00:00 0
&lt;&#x2F;span&gt;&lt;span&gt;77a85dd6d000-77a85dd79000 r--p 00157000 fd:05 40991                      &#x2F;data&#x2F;app&#x2F;x&#x2F;y&#x2F;lib&#x2F;x86_64&#x2F;libsentry.so
&lt;&#x2F;span&gt;&lt;span&gt;77a85dd79000-77a85dd7a000 rw-p 00163000 fd:05 40991                      &#x2F;data&#x2F;app&#x2F;x&#x2F;y&#x2F;lib&#x2F;x86_64&#x2F;libsentry.so
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;77a85dbf0000-77a85dbf3000 r-xp 00001000 fd:05 40977                      &#x2F;data&#x2F;app&#x2F;x&#x2F;y&#x2F;base.apk
&lt;&#x2F;span&gt;&lt;span&gt;77a85dbf3000-77a85dbf4000 ---p 00000000 00:00 0
&lt;&#x2F;span&gt;&lt;span&gt;77a85dbf4000-77a85dbf5000 r--p 00004000 fd:05 40977                      &#x2F;data&#x2F;app&#x2F;x&#x2F;y&#x2F;base.apk
&lt;&#x2F;span&gt;&lt;span&gt;77a85dc15000-77a85dd6c000 r-xp 00006000 fd:05 40977                      &#x2F;data&#x2F;app&#x2F;x&#x2F;y&#x2F;base.apk
&lt;&#x2F;span&gt;&lt;span&gt;77a85dd6c000-77a85dd6d000 ---p 00000000 00:00 0
&lt;&#x2F;span&gt;&lt;span&gt;77a85dd6d000-77a85dd79000 r--p 0015d000 fd:05 40977                      &#x2F;data&#x2F;app&#x2F;x&#x2F;y&#x2F;base.apk
&lt;&#x2F;span&gt;&lt;span&gt;77a85dd79000-77a85dd7a000 rw-p 00169000 fd:05 40977                      &#x2F;data&#x2F;app&#x2F;x&#x2F;y&#x2F;base.apk
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The mappings are basically the same, just that in the case of the &lt;code&gt;base.apk&lt;&#x2F;code&gt;,
the file offsets are different. Also, the Android loader inserts a non-readable
gap in between.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;so-how-do-we-get-the-library-list-from-there&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#so-how-do-we-get-the-library-list-from-there&quot; aria-label=&quot;Anchor link for: so-how-do-we-get-the-library-list-from-there&quot;&gt;#&lt;&#x2F;a&gt;
So how do we get the library list from there?&lt;&#x2F;h1&gt;
&lt;p&gt;So far, the sentry-native modulefinder was a bit too conservative. Because of
concerns reading arbitrary memory, we mmap-ed the file into memory and were
trying to extract ELF headers from there, but that approach did not work with
libraries loaded directly from apk files. Plus, there were some issues related
to non-contiguous mappings and double mappings as we have seen above.&lt;&#x2F;p&gt;
&lt;p&gt;My new approach is to keep track of &lt;em&gt;readable&lt;&#x2F;em&gt; mappings that I have seen so far,
keeping track of their file offsets and gaps in between them. For each readable
mapping, I am looking for the magic ELF signature. If I find one, I process the
previously saved mappings, also taking care of possible duplicates.&lt;&#x2F;p&gt;
&lt;p&gt;A possible issue is trying to read arbitrary memory. I think I’m pretty safe as
I only consider readable mappings, but one improvement would be to use
&lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man2&#x2F;process_vm_readv.2.html&quot;&gt;&lt;code&gt;process_vm_readv&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; for this, but I have also seen problems with
using that on Android.&lt;&#x2F;p&gt;
&lt;p&gt;Another unanswered question is how to correctly deal with mappings that have gaps
in them, or that appear multiple times. Information embedded in the ELF file
might instruct the loader to load the executable code at a specific offset to
the ELF header in RAM, which might be different to the offset on disk. This very
much depends on how we use this information to post-process crash reports.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;All in all, this is a pretty much non-trivial problem, and I am far from the only
one struggling with it. It seems that the &lt;code&gt;libunwindstack&lt;&#x2F;code&gt; that I mentioned above,
and which we vendor as our Unwinder on Android has issues itself, as it is unable
to correctly create a stacktrace that involves libraries loaded from an &lt;code&gt;.apk&lt;&#x2F;code&gt;.
We have also seen some breakpad tools getting this wrong and creating minidumps
with duplicated&#x2F;invalid mappings that fail post-processing. It might be quite
some work to investigate those failures and patch the relevant external dependencies.&lt;&#x2F;p&gt;
&lt;p&gt;And through all this, I wish I could implement all of this in a sane language
like Rust, and share that code across different steps of the pipeline. Oh well…&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Relax and Unwind</title>
        <published>2021-02-20T00:00:00+00:00</published>
        <updated>2021-02-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/unwind-2/"/>
        <id>https://swatinem.de/blog/unwind-2/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/unwind-2/">&lt;p&gt;Last time, we were looking at how calls are actually implemented in native
assembly code, and what kind of instructions the CPU is executing and what
registers are involved.&lt;&#x2F;p&gt;
&lt;p&gt;We do know that the &lt;code&gt;rsp&lt;&#x2F;code&gt; register (the stack pointer) points to the &lt;em&gt;top&lt;&#x2F;em&gt; of
the stack, and we learned that the &lt;code&gt;call&lt;&#x2F;code&gt; instruction pushes the &lt;em&gt;next&lt;&#x2F;em&gt;
instruction onto the stack, which then becomes the &lt;em&gt;bottom&lt;&#x2F;em&gt; of the new stack
frame, and the &lt;code&gt;ret&lt;&#x2F;code&gt; instruction jumps to whatever instruction address is on
top of the stack. In between though, the stack pointer can move as the function
will push and pop things onto and from the stack. So the position of the
return address relative to the current stack pointer will change. Most of the
times statically, but sometimes even dynamically, but I will come back to that
in a later part of this series.&lt;&#x2F;p&gt;
&lt;p&gt;Anyhow, it seems we are a bit stuck. We only know where the current stack frame
ends (the stack pointer), we don’t really know where it began (where the return
address is).&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So lets go back a bit and look at the special purpose registers again.
One of them is called &lt;code&gt;rbp&lt;&#x2F;code&gt;, which stands for &lt;em&gt;base pointer&lt;&#x2F;em&gt;. It turns out that
in older times, this base pointer served exactly this purpose. Lets look at how
it is used by passing the &lt;code&gt;-Cforce-frame-pointers=yes&lt;&#x2F;code&gt; option to our Rust
compiler. This is the output that the &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;WYq7nn&quot;&gt;Compiler Explorer&lt;&#x2F;a&gt;
gives me:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;example::never:
&lt;&#x2F;span&gt;&lt;span&gt;        push    rbp
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rbp, rsp
&lt;&#x2F;span&gt;&lt;span&gt;        call    example::gonna
&lt;&#x2F;span&gt;&lt;span&gt;        pop     rbp
&lt;&#x2F;span&gt;&lt;span&gt;        ret
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;example::gonna:
&lt;&#x2F;span&gt;&lt;span&gt;        push    rbp
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rbp, rsp
&lt;&#x2F;span&gt;&lt;span&gt;        call    example::give
&lt;&#x2F;span&gt;&lt;span&gt;        pop     rbp
&lt;&#x2F;span&gt;&lt;span&gt;        ret
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;example::give:
&lt;&#x2F;span&gt;&lt;span&gt;        push    rbp
&lt;&#x2F;span&gt;&lt;span&gt;        mov     rbp, rsp
&lt;&#x2F;span&gt;&lt;span&gt;        pop     rbp
&lt;&#x2F;span&gt;&lt;span&gt;        ret
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I will also try to visualize how the stack actually looks like in that case.
Also note that I drew the stack top to bottom, as it actually grows high to low.
Anyhow, what we see is that &lt;code&gt;rbp&lt;&#x2F;code&gt; points to the position in the stack that has
the parents base pointer. And exactly &lt;em&gt;below&lt;&#x2F;em&gt; that (actually &lt;em&gt;above&lt;&#x2F;em&gt; when
talking of addresses) is the return address.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;      ┌────────────────────────┐
&lt;&#x2F;span&gt;&lt;span&gt;      │ return addr of parent  │
&lt;&#x2F;span&gt;&lt;span&gt;     ↱│ bp of parent           │
&lt;&#x2F;span&gt;&lt;span&gt;     │├────────────────────────┤
&lt;&#x2F;span&gt;&lt;span&gt;     ││ return addr `never`    │
&lt;&#x2F;span&gt;&lt;span&gt;     └│ bp of `never`          │↰
&lt;&#x2F;span&gt;&lt;span&gt;      ├────────────────────────┤│
&lt;&#x2F;span&gt;&lt;span&gt;      │ return addr `gonna`    ││
&lt;&#x2F;span&gt;&lt;span&gt;rbp → │ bp of `gonna`          │┘
&lt;&#x2F;span&gt;&lt;span&gt;      │ ... locals of `give`   │
&lt;&#x2F;span&gt;&lt;span&gt;rsp → │ ...                    │
&lt;&#x2F;span&gt;&lt;span&gt;      └────────────────────────┘
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;walking-the-stack&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#walking-the-stack&quot; aria-label=&quot;Anchor link for: walking-the-stack&quot;&gt;#&lt;&#x2F;a&gt;
Walking the Stack&lt;&#x2F;h2&gt;
&lt;p&gt;Alright, lets try to actually walk that stack of a live program.
First, we need to actually read the &lt;code&gt;rsp&lt;&#x2F;code&gt;, &lt;code&gt;rbp&lt;&#x2F;code&gt; (and &lt;code&gt;rip&lt;&#x2F;code&gt;) registers. For
this I will play a bit with unsafe Rust features, namely the nightly-only &lt;code&gt;asm&lt;&#x2F;code&gt;
feature.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; sp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; bp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; ip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;asm!&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;mov {sp}, rsp&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;mov {bp}, rbp&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;lea {ip}, [rip]&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            sp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span&gt;(reg) sp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            bp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span&gt;(reg) bp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            ip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span&gt;(reg) ip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;options&lt;&#x2F;span&gt;&lt;span&gt;(nomem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; nostack)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we have a snippet of inline assembly which just moves the current values
of the registers into local Rust variables. Reading &lt;code&gt;rip&lt;&#x2F;code&gt; is a bit more involved,
but that is a completely different story.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we have the base pointer, we can use it to walk up the stack using this
simple code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        ip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ (bp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const usize&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;offset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;() }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        bp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ (bp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;*const usize&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;offset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;() }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bp: {:#018x}; ip: {:#018x}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; bp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; ip)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That is basically all there is to walking up the stack, &lt;strong&gt;if&lt;&#x2F;strong&gt; you have a valid
base pointer to work with.&lt;&#x2F;p&gt;
&lt;p&gt;I double-checked my output and it is the same as in produced by &lt;code&gt;std::backtrace&lt;&#x2F;code&gt;.
You can run the full example in the &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;ocos1j&quot;&gt;compiler explorer&lt;&#x2F;a&gt;
as well.&lt;&#x2F;p&gt;
&lt;p&gt;While working on this, I had a super hard time and couldn’t get this to work on
Windows. In the end, I think that I hit a miscompilation bug in Rust.
I filed &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;82333&quot;&gt;a bug&lt;&#x2F;a&gt; about it.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of writing the &lt;em&gt;current&lt;&#x2F;em&gt; stack pointer into the base pointer register
on function start, and growing the stack &lt;em&gt;afterward&lt;&#x2F;em&gt;, the code generated on
windows first adjusts the stack pointer, and then tries to write the base
pointer, adjusting for the offset again, though it seems that it messes up that
offset sometimes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A comment on the issue I filed said that on Windows, the base pointer might as
well be offset. And that offset can be looked up in the Unwind Info for that
particular DLL&#x2F;function. We will take a look at how to read that unwind info next
time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-if-there-is-no-base-pointer&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#what-if-there-is-no-base-pointer&quot; aria-label=&quot;Anchor link for: what-if-there-is-no-base-pointer&quot;&gt;#&lt;&#x2F;a&gt;
What if there is no base pointer&lt;&#x2F;h2&gt;
&lt;p&gt;In my previous post, the examples that I showed did not use any base pointer.
And also today I had to use an explicit &lt;code&gt;-Cforce-frame-pointers=yes&lt;&#x2F;code&gt; compiler
flag to make it use a frame pointer. This shows clearly that you don’t really
&lt;em&gt;need&lt;&#x2F;em&gt; to maintain a base pointer when running the program.&lt;&#x2F;p&gt;
&lt;p&gt;So Rust does not maintain one by default. And I remember the oblivious
&lt;code&gt;-fomit-frame-pointer&lt;&#x2F;code&gt; compiler options back when I didn’t know what it actually
does. So now we know. It avoids a few instructions per function call, saves a
bit of space on the stack, and frees up the &lt;code&gt;rbp&lt;&#x2F;code&gt; register. Which I would
argue is the main reason, since general purpose registers are really scarce on
x64, it makes sense to have one more available for use.&lt;&#x2F;p&gt;
&lt;p&gt;But from a stack unwinding perspective, it complicates things, since we don’t
have all the information we need to unwind right there in the registers or on
the stack.&lt;&#x2F;p&gt;
&lt;p&gt;Essentially all we need is the position of the return address relative to the
stack pointer (which still is a special purpose register). And we will look at
where to get this information the next time.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Relax and Unwind</title>
        <published>2021-02-15T00:00:00+00:00</published>
        <updated>2021-02-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/unwind-1/"/>
        <id>https://swatinem.de/blog/unwind-1/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/unwind-1/">&lt;p&gt;I have been working on the the &lt;a href=&quot;https:&#x2F;&#x2F;sentry.io&quot;&gt;Sentry&lt;&#x2F;a&gt; Native Team for a bit
more than a year now. One of the most important things that helps Engineers to
find the cause of an Error is a stack trace. This is also a really challenging
topic, especially for native code.&lt;&#x2F;p&gt;
&lt;p&gt;In my opinion, the best way to learn and understand a complex topic, and to
appreciate the existing solutions, is to try to implement it yourself.
Along that way, I will try to implement my own stack unwinder in order to learn
more about how a native call stack really looks like and how to extract a stack
trace. This is just my personal learning experiment and is not related to any
specific things I do in my day job.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-simple-stacktrace&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#a-simple-stacktrace&quot; aria-label=&quot;Anchor link for: a-simple-stacktrace&quot;&gt;#&lt;&#x2F;a&gt;
A simple Stacktrace&lt;&#x2F;h2&gt;
&lt;p&gt;Lets start by looking at a stacktrace from another language first.
Take this simple example in JS:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;never&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;gonna&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;gonna&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;give&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;give&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;you&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;you&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;up&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;up&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;stack)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;never&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will give me the following stacktrace when running in &lt;code&gt;node&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;Error
&lt;&#x2F;span&gt;&lt;span&gt;    at up ([...]rickroll.js:14:15)
&lt;&#x2F;span&gt;&lt;span&gt;    at you ([...]rickroll.js:11:3)
&lt;&#x2F;span&gt;&lt;span&gt;    at give ([...]rickroll.js:8:3)
&lt;&#x2F;span&gt;&lt;span&gt;    at gonna ([...]rickroll.js:5:3)
&lt;&#x2F;span&gt;&lt;span&gt;    at never ([...]rickroll.js:2:3)
&lt;&#x2F;span&gt;&lt;span&gt;    at Object.&amp;lt;anonymous&amp;gt; ([...]rickroll.js:16:1)
&lt;&#x2F;span&gt;&lt;span&gt;    at Module._compile (node:internal&#x2F;modules&#x2F;cjs&#x2F;loader:1102:14)
&lt;&#x2F;span&gt;&lt;span&gt;    at Object.Module._extensions..js (node:internal&#x2F;modules&#x2F;cjs&#x2F;loader:1131:10)
&lt;&#x2F;span&gt;&lt;span&gt;    at Module.load (node:internal&#x2F;modules&#x2F;cjs&#x2F;loader:967:32)
&lt;&#x2F;span&gt;&lt;span&gt;    at Function.Module._load (node:internal&#x2F;modules&#x2F;cjs&#x2F;loader:807:14)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you see, it gives the call stack top to bottom (the order is a language
ecosystem convention), and it also includes a few frames that are outside of my
code.&lt;&#x2F;p&gt;
&lt;p&gt;In this case, node is the &lt;em&gt;runtime environment&lt;&#x2F;em&gt; that executes the javascript code.
Running this so called &lt;em&gt;managed code&lt;&#x2F;em&gt; means that node will keep track of what
happens. This tracking comes with some overhead, but as shown it does provide
us with a few benefits.&lt;&#x2F;p&gt;
&lt;p&gt;Native code is very different. Depending on your definition of &lt;em&gt;Runtime&lt;&#x2F;em&gt;, there
is nothing that manages or drives your code, and the code itself is usually
tuned for maximum performance, so it will avoid to do anything that is not
strictly necessary to achieve its goals.&lt;&#x2F;p&gt;
&lt;p&gt;Since we have no runtime that we can just ask to give us a stacktrace, we have
to create one ourselves.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;native-instructions-registers-and-stack&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#native-instructions-registers-and-stack&quot; aria-label=&quot;Anchor link for: native-instructions-registers-and-stack&quot;&gt;#&lt;&#x2F;a&gt;
Native Instructions, Registers and Stack&lt;&#x2F;h2&gt;
&lt;p&gt;In order to understand what a native call stack is, we have to first learn how
the processor in our computer actually works and executes code.&lt;&#x2F;p&gt;
&lt;p&gt;We will take a look at the actual assembly code and at the x64
Instruction Set Architectures (ISA) to figure out what it does.&lt;&#x2F;p&gt;
&lt;p&gt;Lets start by doing some quick mafs in Rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;one&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;two&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;plus&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;wrapping_add&lt;&#x2F;span&gt;&lt;span&gt;(b)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;minus&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;wrapping_sub&lt;&#x2F;span&gt;&lt;span&gt;(b)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;quick_mafs&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; four &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;plus&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;two&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;two&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;minus&lt;&#x2F;span&gt;&lt;span&gt;(four&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;one&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can look at this in detail in the &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;rjGr8W&quot;&gt;Compiler Explorer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Lets look at a small snippet of assembly that is created for these functions:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;example::two:
&lt;&#x2F;span&gt;&lt;span&gt;        mov     eax, 2                      &#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;        ret                                 &#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;example::quick_mafs:
&lt;&#x2F;span&gt;&lt;span&gt;        sub     rsp, 40                     &#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span&gt;        call    example::two                &#x2F;&#x2F; 4
&lt;&#x2F;span&gt;&lt;span&gt;        mov     qword ptr [rsp + 32], rax   &#x2F;&#x2F; 5
&lt;&#x2F;span&gt;&lt;span&gt;        call    example::two                &#x2F;&#x2F; 6
&lt;&#x2F;span&gt;&lt;span&gt;        mov     qword ptr [rsp + 24], rax   &#x2F;&#x2F; 7
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our function call, and the return from that function are clearly visible, they
correspond to the &lt;code&gt;call&lt;&#x2F;code&gt; and the &lt;code&gt;ret&lt;&#x2F;code&gt; instruction respectively.
We see some other things as well which need a bit more research to understand.&lt;&#x2F;p&gt;
&lt;p&gt;The Windows Documentation of the &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;unwind-1&#x2F;x64-arch&quot;&gt;x64 Architecture&lt;&#x2F;a&gt; is a really good
resource to learn. I also very much enjoyed previous years &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;unwind-1&#x2F;aoc&quot;&gt;Advent of Code&lt;&#x2F;a&gt;
which introduced its own instruction set and guided you along implementing a
virtual processor around that.&lt;&#x2F;p&gt;
&lt;p&gt;Each architecture has its own calling conventions, and the document says that
the &lt;code&gt;return value is returned in the rax register&lt;&#x2F;code&gt;, which is what we see above.
All that our &lt;code&gt;two&lt;&#x2F;code&gt; function does is write its return value (1) to that register
before returning (2). The call then moves that return value someplace else (5)
to deal with it later.&lt;&#x2F;p&gt;
&lt;p&gt;The processor executes the instructions one ofter the other, but this example
shows that it does need to jump around in the code a bit. In particular, this
is the sequence in which the instructions are executed:
&lt;code&gt;3, 4, 1, 2, 5, 6, 1, 2, 7&lt;&#x2F;code&gt;. We have two calls to &lt;code&gt;two&lt;&#x2F;code&gt;, and we execute the
instructions at the addresses &lt;code&gt;1&lt;&#x2F;code&gt; and &lt;code&gt;2&lt;&#x2F;code&gt; twice, but on the first go we jump
back to &lt;code&gt;5&lt;&#x2F;code&gt;, while we continue at &lt;code&gt;7&lt;&#x2F;code&gt; the second time. How does the processor
know to do that?&lt;&#x2F;p&gt;
&lt;p&gt;Lets take a look at the documentation for the &lt;code&gt;call&lt;&#x2F;code&gt; and &lt;code&gt;ret&lt;&#x2F;code&gt; instructions.
Again, the Windows Documentation for the &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;unwind-1&#x2F;x86-instr&quot;&gt;x86 Instructions&lt;&#x2F;a&gt; helps.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;call&lt;&#x2F;code&gt; instruction pushes the return address onto the stack then jumps to the destination.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;ret&lt;&#x2F;code&gt; instruction pops and jumps to the return address on the stack.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Okay, so we have to learn about something called the stack, and jumps.&lt;&#x2F;p&gt;
&lt;p&gt;We heard the term &lt;code&gt;register&lt;&#x2F;code&gt; already. These registers hold the values that the
processor currently works with. They are extremely fast, but there is only a
very limited number of them, depending on the architecture. Some of them are
&lt;em&gt;special purpose&lt;&#x2F;em&gt; registers. We already learned about &lt;code&gt;rax&lt;&#x2F;code&gt;, the &lt;em&gt;Accumulator&lt;&#x2F;em&gt;
register which is used for return values. We also see another one in the example
above, &lt;code&gt;rsp&lt;&#x2F;code&gt;, the &lt;em&gt;Stack Pointer&lt;&#x2F;em&gt; register. It points to the top of the stack,
and is changing when you &lt;code&gt;push&lt;&#x2F;code&gt; or &lt;code&gt;pop&lt;&#x2F;code&gt; things to and from the stack.
It is kind of like &lt;code&gt;Array#length&lt;&#x2F;code&gt; in JS, which also changes when you call
&lt;code&gt;Array#.push&lt;&#x2F;code&gt; and &lt;code&gt;Array#.pop&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Another special register is the &lt;em&gt;Instruction Pointer&lt;&#x2F;em&gt;, &lt;code&gt;rip&lt;&#x2F;code&gt;, which holds the
address of the &lt;em&gt;next&lt;&#x2F;em&gt; instruction in line after the one currently being executed.&lt;&#x2F;p&gt;
&lt;p&gt;Alright, so we know about the stack pointer and the instruction pointer, and we
know what &lt;code&gt;call&lt;&#x2F;code&gt; and &lt;code&gt;ret&lt;&#x2F;code&gt; do, so lets try to visualize this.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;(4) &lt;code&gt;call&lt;&#x2F;code&gt;: The &lt;em&gt;next&lt;&#x2F;em&gt; instruction is &lt;code&gt;5&lt;&#x2F;code&gt;, which we push onto the stack and
then &lt;em&gt;change&lt;&#x2F;em&gt; to &lt;code&gt;1&lt;&#x2F;code&gt;. (Stack: &lt;code&gt;[5]&lt;&#x2F;code&gt;, &lt;code&gt;rip&lt;&#x2F;code&gt;: 1)&lt;&#x2F;li&gt;
&lt;li&gt;(2) &lt;code&gt;ret&lt;&#x2F;code&gt;: Pop &lt;code&gt;5&lt;&#x2F;code&gt; from the stack and overwrite rip. (Stack: &lt;code&gt;[]&lt;&#x2F;code&gt;, &lt;code&gt;rip&lt;&#x2F;code&gt;: 5)&lt;&#x2F;li&gt;
&lt;li&gt;(6) &lt;code&gt;call&lt;&#x2F;code&gt;: Push, overwrite rip. (Stack: &lt;code&gt;[7]&lt;&#x2F;code&gt;, &lt;code&gt;rip&lt;&#x2F;code&gt;: 1)&lt;&#x2F;li&gt;
&lt;li&gt;(2) &lt;code&gt;ret&lt;&#x2F;code&gt;: Pop, overwrite rip. (Stack: &lt;code&gt;[]&lt;&#x2F;code&gt;, &lt;code&gt;rip&lt;&#x2F;code&gt;: 7)&lt;&#x2F;li&gt;
&lt;li&gt;(7) ...&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So we can now kind of follow how a processor executes native instructions, and
what happens to the stack and the instruction pointer during that process.&lt;&#x2F;p&gt;
&lt;p&gt;The key takeaway here is that the processor is quite dumb and just executes
instructions one after the other, and it follows whatever the next instruction
(&lt;code&gt;rip&lt;&#x2F;code&gt;) is. Other things to note are that all the stack manipulations
(&lt;code&gt;push&lt;&#x2F;code&gt; and &lt;code&gt;pop&lt;&#x2F;code&gt;) are balanced. Also, the stack contains the &lt;em&gt;next&lt;&#x2F;em&gt; instruction
where we have to go to, not really where we came from.
However, the &lt;code&gt;call&lt;&#x2F;code&gt; instruction always pushes the current &lt;code&gt;rip&lt;&#x2F;code&gt;, which happens
to be the instruction after the &lt;code&gt;call&lt;&#x2F;code&gt;. Which makes things a bit simpler since
the instruction where we came from is in most cases one place before our return
address.&lt;&#x2F;p&gt;
&lt;p&gt;So we are done, right? Well not quite. As we see in instruction &lt;code&gt;3&lt;&#x2F;code&gt;, the code
itself can manipulate the stack pointer in any way it wants, and we don’t
really know where on the stack our return address is. Figuring that out will be
a story for another day.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Investing</title>
        <published>2021-01-30T00:00:00+00:00</published>
        <updated>2021-01-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/investing/"/>
        <id>https://swatinem.de/blog/investing/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/investing/">&lt;p&gt;It is only January, but the 2021 bullshit bingo is in full flow already.&lt;&#x2F;p&gt;
&lt;p&gt;So apparently an Internet flashmob is buying tons of stock and thereby
bankrupting big funds that have allegedly been manipulating markets for a long
time.&lt;&#x2F;p&gt;
&lt;p&gt;Bear in mind, I’m just an average person who happens to own some stock. I have
no idea how the financial markets really work. And this is also a key point that
I want to make here.&lt;&#x2F;p&gt;
&lt;p&gt;So the market is basically open to anyone, with some hurdles, more on which later.
But not every player is created equal. There is a lot of people like me, who
have a regular job, and some leftover money that they want to &lt;em&gt;invest&lt;&#x2F;em&gt; for one
reason or another. Like me, I would argue these investors do not want to spend
too much time on this, and rarely make any transaction. Unlike me, I might sadly
say that most people are way too gullible and will follow unsound advice, some
of the time from financial advisors or their bank, which might not be in their
best self interest.&lt;&#x2F;p&gt;
&lt;p&gt;And then there is people who live and breathe financial instruments, who not
only day-trade, but for which every second counts, who have a lot more
instruments to chose from.&lt;&#x2F;p&gt;
&lt;p&gt;The whole problem in my opinion is that the financial system is built in a way
to benefit those who know how to play the game, in favor of the average person,
like me.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ideal-market&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#ideal-market&quot; aria-label=&quot;Anchor link for: ideal-market&quot;&gt;#&lt;&#x2F;a&gt;
Ideal Market&lt;&#x2F;h1&gt;
&lt;p&gt;The ideal stock market is actually super simple, and everyone can understand it.
Imagine a room full of people, divided in two groups. One group wants to &lt;em&gt;sell&lt;&#x2F;em&gt;
stock and &lt;em&gt;ask&lt;&#x2F;em&gt;ing a certain price for it. The other group want to &lt;em&gt;buy&lt;&#x2F;em&gt; the
stock and &lt;em&gt;bid&lt;&#x2F;em&gt;s a price for it. Usually, there is a gap in between.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A wants to sell for 20€&lt;&#x2F;li&gt;
&lt;li&gt;B wants to buy for 10€&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now we are at an impasse. One of the two has to move in order to actually form
a transaction. Or maybe another one comes along that says &lt;em&gt;I buy at any price&lt;&#x2F;em&gt;,
and gets the share at 20€. Or the other way around, such as &lt;em&gt;I sell at any price&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip of the day: &lt;strong&gt;Always&lt;&#x2F;strong&gt; set a limit (explicit price)! The default for lots
of trading platforms is set to buy&#x2F;sell at &lt;em&gt;any&lt;&#x2F;em&gt; price, which is not what you
want!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;shorting-and-other-instruments&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#shorting-and-other-instruments&quot; aria-label=&quot;Anchor link for: shorting-and-other-instruments&quot;&gt;#&lt;&#x2F;a&gt;
Shorting and other instruments&lt;&#x2F;h1&gt;
&lt;p&gt;The above is super simple. I would argue that anyone can understand it. This is
also what the &lt;em&gt;average person&lt;&#x2F;em&gt; wants to do when they think about stock market
trading.&lt;&#x2F;p&gt;
&lt;p&gt;There is a lot more financial products, and possibilities out there. Some are
being sold to the uninformed average person, which in my opinion is by itself
fraud, but more on that later.&lt;&#x2F;p&gt;
&lt;p&gt;One of those instruments is called “short”, no idea why really, or “Leerverkauf”
in german.&lt;&#x2F;p&gt;
&lt;p&gt;There are two variants, and I’m not even sure if the second is something
completely different?&lt;&#x2F;p&gt;
&lt;p&gt;In one variant, I get someone to lend me a share, which I have to give back
tomorrow. I sell that share immediately for 10€, in the hopes that I can buy it
back at 5€ tomorrow before I return it. And I pocket the difference as my profit.&lt;&#x2F;p&gt;
&lt;p&gt;The problem now is, what if the price at which people are willing to sell
actually increases? Well, I have to return the stock that I borrowed, so I might
be forced to buy &lt;em&gt;at any price&lt;&#x2F;em&gt;, so I lose money.&lt;&#x2F;p&gt;
&lt;p&gt;In the other variant, I sign a contract with you to sell you a share &lt;em&gt;tomorrow&lt;&#x2F;em&gt;
for 10€. I don’t own that share yet. No problem, I can just buy it myself
tomorrow for 5€ and pocket the difference. Except when the price tomorrow is
higher than we agreed on, in which case I lose.
(BTW, is this what is called a &lt;em&gt;future&lt;&#x2F;em&gt; in financial circles? I don’t know, really)&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So, with this play, one can actually make a profit by betting on a falling price.
I would argue that this is something that the &lt;em&gt;average person&lt;&#x2F;em&gt; would not want to
do, for one. And also, me as an average person who owns shares, I wouldn’t even
know &lt;em&gt;how&lt;&#x2F;em&gt; to do that. Thus, I just assume this is an instrument reserved for
the expert players.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;valuation&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#valuation&quot; aria-label=&quot;Anchor link for: valuation&quot;&gt;#&lt;&#x2F;a&gt;
Valuation&lt;&#x2F;h1&gt;
&lt;p&gt;There is another interesting thing to note here. There is no fixed &lt;em&gt;price&lt;&#x2F;em&gt; for
a share. It is not something you buy in a supermarket that has the same price tag
today as it had yesterday. The real price, or &lt;em&gt;value&lt;&#x2F;em&gt; only exists for a split
second at the moment of a completed transaction. Because at that moment, it was
&lt;em&gt;worth&lt;&#x2F;em&gt; that amount of money to the buyer.&lt;&#x2F;p&gt;
&lt;p&gt;Lets take real estate as an example. Prices right now are &lt;em&gt;crazy&lt;&#x2F;em&gt;, ranging from
400 to 700k for an average sized apartment. But are they actually &lt;em&gt;worth&lt;&#x2F;em&gt; that
much? This is really up to the buyer. Either someone comes along that is willing
to pay that much. Or the seller adjusts the price. Or simply waits long enough.&lt;&#x2F;p&gt;
&lt;p&gt;And here comes a bit of a problem. Real estate companies can build an apartment
for, lets say, 50k€, and put a price tag of 500k€ on it. And then they just sit
there, waiting for a potential buyer to come bye. They are under no pressure at
all to sell this apartment now, for cheaper. They are willing to wait 10 years,
with the apartment just standing there, empty, until finally a buyer comes by.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, I digress. The point is, usually the value of something is determined by
a transaction. But maybe you don’t even want to sell the real estate you own,
because you use it yourself. So what is its current market value? How would you
know, if actually selling it is the only way to know?&lt;&#x2F;p&gt;
&lt;p&gt;Well, you can get a hopefully independent and neutral third party to look at the apartment and
make an assessment, which is basically a good guess at the price someone would
be willing to pay for it, considering the quality and demand and so on.&lt;&#x2F;p&gt;
&lt;p&gt;So, how neutral are these people that make assessments? There is a joke about that:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Billionaire wants to avoid paying X€ in taxes.&lt;&#x2F;p&gt;
&lt;p&gt;Billionaire has an artist friend, asks them to paint a picture.&lt;&#x2F;p&gt;
&lt;p&gt;Billionaire has a friend who assesses artworks. The picture has a value in the
ballpark of X€.&lt;&#x2F;p&gt;
&lt;p&gt;Billionaire donates that piece of art to charity in a tax deductable way.&lt;&#x2F;p&gt;
&lt;p&gt;Problem solved.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Anyhow, this was a small digression just to highlight that maybe some things are
not really worth whatever people say that they are. Just to keep in mind.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;virtual-goods&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#virtual-goods&quot; aria-label=&quot;Anchor link for: virtual-goods&quot;&gt;#&lt;&#x2F;a&gt;
Virtual goods&lt;&#x2F;h1&gt;
&lt;p&gt;Coming back to the concept of selling shares that you don’t own. One of the
scams that has blown up now is that apparently more shares have been lent out
than exist in the first place. I have no idea how that would be even possible,
or legal for that matter.&lt;&#x2F;p&gt;
&lt;p&gt;When I lend you my car, I am unable to use it myself until you return it. Also,
I will notice if you return a different car to me. This concept of the physical
world apparently does not apply to shares, which only exist as digital things
on a computer.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;money-creation&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#money-creation&quot; aria-label=&quot;Anchor link for: money-creation&quot;&gt;#&lt;&#x2F;a&gt;
Money creation&lt;&#x2F;h1&gt;
&lt;p&gt;This is also a really big misconception that average people have about money.
It is still a widely believed myth that debt is actually one person lending
another person some money for a time, and expecting some interest payments in
return. There is no other person that loses physical access to their money when
you borrow it in the form of a loan. It is a bank that just creates this money
as a number on the computer out of thin air.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;banksters&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#banksters&quot; aria-label=&quot;Anchor link for: banksters&quot;&gt;#&lt;&#x2F;a&gt;
Banksters&lt;&#x2F;h1&gt;
&lt;p&gt;Speaking of lending, usually you would expect some form of compensation. Like
an interest payment, or some fee. Well, according to things that I recently read,
lending some shares comes with some hefty fees.
I do own shares, but I haven’t knowingly
lend them to anyone, and I certainly haven’t collected any fees. And I also
didn’t agree to this.&lt;&#x2F;p&gt;
&lt;p&gt;So how come there is more shares being lend out than even exist? Maybe the bank
that is managing my shares is just doing this behind my back without telling me,
and without sharing some of those fees with me.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe this is stated in the terms and conditions of my depot that I certainly
did not read, like I expect no one ever does.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Speaking of fees. I was really surprised that a certain trading app, which has
gained a lot of notoriety by simply restricting its customers from buying select
stock, allows you to trade with extremely low, or even without any fees at all.&lt;&#x2F;p&gt;
&lt;p&gt;I hate fees as much as the next person, and I pay a minimum of ~11€ per
transaction. And that btw is the lowest fees I have found after researching this
intensively. Last time I checked, I have by far the best conditions of any stock
market depot in the german speaking area.&lt;&#x2F;p&gt;
&lt;p&gt;And yes, those fees buy me a certain &lt;em&gt;service&lt;&#x2F;em&gt;. I am listed somewhere in a
shareholder directory. I receive regular invites to shareholder meetings that I
don’t care about. And notifications that a foreign government has looked at my
data in the shareholder directory which is super annoying.&lt;&#x2F;p&gt;
&lt;p&gt;The point is, I am fairly certain that I have some kind of guarantees that I
really do own those shares.&lt;&#x2F;p&gt;
&lt;p&gt;Being told that there are trading platforms out there that allow you to buy
shares without any kind of fees makes me speculate as to how they can pull that
off. Also considering the news that they are bleeding money makes me speculate
that maybe they are not actually trading real shares for each order, but rather
batch those up and buy in bulk, hoping to make a profit for themselves while
doing so.&lt;&#x2F;p&gt;
&lt;p&gt;Say, person A buys one share at 12€, person B buys one share at 13€, but the
broker actually merges these two together, buys two shares at 11€ at
&lt;em&gt;some later point in time&lt;&#x2F;em&gt; and pockets the difference.&lt;&#x2F;p&gt;
&lt;p&gt;Is it possible that the broker itself does short selling in the background
without the customers even knowing?&lt;&#x2F;p&gt;
&lt;p&gt;How is any of this even legal?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;hodl&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#hodl&quot; aria-label=&quot;Anchor link for: hodl&quot;&gt;#&lt;&#x2F;a&gt;
Hodl&lt;&#x2F;h1&gt;
&lt;p&gt;Coming full circle to the beginning. I believe that the average person who knows
little about complex financial instruments just wants to buy shares and hold
them for a long time, usually years, possibly even decades.&lt;&#x2F;p&gt;
&lt;p&gt;Speaking of my own experience, I do own a lot of different shares. But I only
buy and hold. In the 11 years since I own shares, I only ever sold two times.
Both times, I sold about 10% of some very lucky shares that grew by 10x, to at
least get my initial investment back. In hindsight, I shouldn’t have sold,
because those shares went on to grow to 30x and 20x respectively.&lt;&#x2F;p&gt;
&lt;p&gt;Oh well. It really is all about gambling; like a casino.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip of the day:&lt;&#x2F;p&gt;
&lt;p&gt;You can’t take a loss if you never sell. Similarly, you can’t make a profit if
you never sell either.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Coming back to something that I wrote about earlier, the value of your shares
only exists for the instant that you trade them for money, otherwise its just
pretty numbers on the screen, that can change in either direction all the time.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;why-now&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#why-now&quot; aria-label=&quot;Anchor link for: why-now&quot;&gt;#&lt;&#x2F;a&gt;
Why now?&lt;&#x2F;h1&gt;
&lt;p&gt;So, why is this exploding like this right now?&lt;&#x2F;p&gt;
&lt;p&gt;The answer is simple. Since half a year, international travel is so heavily
restricted as to being almost impossible. There is no way to spend any money
on restaurants or entertainment because everything is closed down. So those of
us who are lucky enough to still have a job get a salary that they have no way
to spend except on the bare necessities.&lt;&#x2F;p&gt;
&lt;p&gt;Also the financial policies of recent years have made sure that
&lt;em&gt;savings accounts&lt;&#x2F;em&gt; have become a joke that is effectively losing you money due
to inflation.&lt;&#x2F;p&gt;
&lt;p&gt;So the average person is sitting on a pile of money they have no idea what to
do with except to invest in &lt;em&gt;something&lt;&#x2F;em&gt;. And the average person is likely to
buy and hold.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;A small digression: I do think that out current situation is actually a
conspiracy. For the simple reason that I just can’t believe that governments
are acting with the goal of protecting the health and lives of citizens.&lt;&#x2F;p&gt;
&lt;p&gt;That would be a first. Its a lot more plausible that media propaganda and
governments are protecting and furthering some other interests. I just haven’t
figured out yet who is profiting and pulling the strings.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-game-is-rigged&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-game-is-rigged&quot; aria-label=&quot;Anchor link for: the-game-is-rigged&quot;&gt;#&lt;&#x2F;a&gt;
The game is rigged&lt;&#x2F;h1&gt;
&lt;p&gt;Again, this turned into a super long opinion piece already.&lt;&#x2F;p&gt;
&lt;p&gt;Long story short, I think the whole financial market is rigged to disadvantage
small average everyday people.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe another time I will write more about why I think that having a publicly
traded company is the worst idea one would have. Related, I think its no
coincidence that a certain chinese company which is not being traded publicly
is being specifically targeted by the US government with the clear goal of
destroying them. Yes; I do like conspiracy theories. :-D&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Problem with walled gardens</title>
        <published>2021-01-13T00:00:00+00:00</published>
        <updated>2021-01-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/walled-gardens/"/>
        <id>https://swatinem.de/blog/walled-gardens/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/walled-gardens/">&lt;p&gt;Well, we live in exciting times!
And to say the least, some of the developments are a bit disturbing.
Some of the things have been developing for years and people didn’t much care
about it.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;exclusive-society&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#exclusive-society&quot; aria-label=&quot;Anchor link for: exclusive-society&quot;&gt;#&lt;&#x2F;a&gt;
Exclusive Society&lt;&#x2F;h1&gt;
&lt;p&gt;The way I see it, most of these things follow a grand scheme, which I would say
is that society is getting more exclusive, by which I mean that exclusion, and
excluding people is getting more commonplace.&lt;&#x2F;p&gt;
&lt;p&gt;There is the blatant example of individuals or groups of people being blocked
or censored, companies refusing to do business with others, or the fact that we
are being coerced into accepting terms and conditions which are troublesome, out
of fear of being excluded from a service. Or trade restrictions that can even
exclude whole countries from participating in the normal world as we know it.&lt;&#x2F;p&gt;
&lt;p&gt;If you think even further, we see that we have less and less control over the
things we own. Increasingly, the world is relying on the &lt;em&gt;cloud&lt;&#x2F;em&gt; and services
offered by it. When your mobile phone, or even your car is tied to some kind of
online account &#x2F; identity, it is not too far fetched that the hardware you
bought for hard earned cash can be turned into an expensive paperweight remotely.&lt;&#x2F;p&gt;
&lt;p&gt;Not to mention this certain biological nemesis that can as well ostracize
everyone who is not willing to comply with whatever is mandated.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;laws-and-justice&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#laws-and-justice&quot; aria-label=&quot;Anchor link for: laws-and-justice&quot;&gt;#&lt;&#x2F;a&gt;
Laws and Justice&lt;&#x2F;h1&gt;
&lt;p&gt;The thing is, we as people, and also companies and governments are well within
their rights to do what they do. &lt;em&gt;Or are they?&lt;&#x2F;em&gt;
No one can force us to be friends with someone who, for example, puts pineapple
on pizza. A fancy-ass restaurant is not obliged by law to serve you if you come
there without a shirt. A company is not forced to hire someone that is not fit
for a job. And a company does not need to conduct business with everyone.&lt;&#x2F;p&gt;
&lt;p&gt;There are surely limitations, laws and so called terms of service, or codes of
conduct. You know, those boring-ass legal documents that seriously no one ever
reads. But you kind of have to &quot;accept&quot; them in order not to be excluded from a
service. Those documents kind of state under which circumstances a company does
business, or ceases to do business.&lt;&#x2F;p&gt;
&lt;p&gt;It is really interesting though that in most cases, the company that for example
de-monetizes or outright censors or blocks a content creator rarely points to
a specific reason for its actions. They just say its violating the terms of
service and thats it.&lt;&#x2F;p&gt;
&lt;p&gt;Because there are things like anti discrimination laws. Remember when I said
that a company can reject an applicant, maybe because they found someone who is
better qualified. The company better not give any reason for refusing to hire
that candidate. Because if the company says they refused to hire because the
candidate likes pizza with pineapple, that candidate can sue the company.&lt;&#x2F;p&gt;
&lt;p&gt;The other way around as well. A company can fire someone for various reasons.
However if they clearly say that the reason is that the employee eats pineapple
pizza, things might end up in court.&lt;&#x2F;p&gt;
&lt;p&gt;Usually though, when one party decides to cancel a contract for whatever reason,
there are laws that say under which circumstances that happens. In most cases,
you have to have due notice. A landlord can’t just bring the eviction squad
one minute after the rent is overdue.&lt;&#x2F;p&gt;
&lt;p&gt;The problem is that most of the service providers that we rely on do not really
give due notice, they don’t have a formal process to contest the decision, and
in general the decisions can seem extremely arbitrary.&lt;&#x2F;p&gt;
&lt;p&gt;Hey, maybe someone found out that the person in question likes pineapple pizza
and they decided to just refuse to process payments that were made to that
person or company.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So there are end-user, or business contracts, and laws that govern those.
Maybe anti-discrimination laws make sure that a certain group of people is not
being excluded because of some discerning characteristic. Maybe other laws say
that certain people &lt;em&gt;have to be excluded&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I am not sure about the details, but I think there are even essential services
which are forced to serve you. For example, what if the postal service just
refuses to deliver your mail, maybe because the mailman saw you eating pineapple
pizza?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;sovereignty-of-nations&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#sovereignty-of-nations&quot; aria-label=&quot;Anchor link for: sovereignty-of-nations&quot;&gt;#&lt;&#x2F;a&gt;
Sovereignty of Nations&lt;&#x2F;h1&gt;
&lt;p&gt;Also, we live in a globalized and connected world. And we also have a lot of
business or other kind of relations that cross borders. Businesses want to
exchange goods, etc. And there are international agreements and laws that say
under which rules and conditions that has to happen.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe a country mandates by law that there has to be pineapple on every pizza
sold? A foreign company better put that pineapple on the pizza or otherwise they
miss out on all the profit they might make.&lt;&#x2F;p&gt;
&lt;p&gt;Sure, there is a certain country in this world that likes to play world police,
and tell other &lt;em&gt;sovereign nations&lt;&#x2F;em&gt; if, and how much pineapple there has to go
on the pizza!&lt;&#x2F;p&gt;
&lt;p&gt;And sometimes there is disagreement and compromises. Take disputed borders as
an example. Country A claims the border includes a pineapple plantation, while
neighboring country B wants that pineapple plantation for themselves.
If a multinational corporation wants to do business in both countries, they have
to abide by the laws of that respective country. Which means that if you use for
example an online mapping service of that company, it will show different
borders depending from which country you use that service.&lt;&#x2F;p&gt;
&lt;p&gt;In reality, a company may be forced to censor certain content, or to fork over
private data to government institutions or implement backdoors. Its just the
way things work. If company A wants to do business and make profit in country B,
they better make sure to hand over all the personal details of people who do not
like to have pineapple on their pizzas.&lt;&#x2F;p&gt;
&lt;p&gt;Things get crazier when you realize that some of these conditions can prevent
fair taxation of foreign companies, or prevent any kind of technology licensing,
essentially keeping a whole country in the stone-age by refusing to share all
the nice things with them.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe a country just doesn’t want to respect international patent law, and with
a bit of industrial espionage they can reverse engineer everything. Or maybe we
finally see the value of having open standards that are not subject to copyright,
patents or other kinds of restrictions.&lt;&#x2F;p&gt;
&lt;p&gt;The problem is. Countries have laws, and when the justice system and the courts
decide that by law, it is not allowed to advocate putting pineapple on pizza,
then a court order may force a company to cease to have business relations with
other companies or people. But when a company decides this on itself, then its
more like vigilantism.&lt;&#x2F;p&gt;
&lt;p&gt;We have armed people running around on the streets executing their own form of
justice on others that eat pizza, with or without pineapple. These big oligarchic
companies just became judge, jury and executioner. All based on their &lt;strong&gt;opinion&lt;&#x2F;strong&gt;
on what belongs on a pizza and what does not.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe the reason the courts are not working properly is because the justice
system is overwhelmed with fights over patents and copyright claims?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;propaganda-and-censorship&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#propaganda-and-censorship&quot; aria-label=&quot;Anchor link for: propaganda-and-censorship&quot;&gt;#&lt;&#x2F;a&gt;
Propaganda and Censorship&lt;&#x2F;h1&gt;
&lt;p&gt;Thing is. We put ourselves into this mess. We followed the smell of delicious
pineapple pizza and didn’t even notice that we sold all our freedoms while
munching on it. We ended up with this giant propaganda machine, that can just
block and silence everyone who dare to speak against putting pineapple on pizza.&lt;&#x2F;p&gt;
&lt;p&gt;We don’t even know by which rules it operates. The thing we know is to better
follow whatever they say, or otherwise fear losing your job, fear losing all
your family photos that you have uploaded into the cloud, or fear being able to
start your car.&lt;&#x2F;p&gt;
&lt;p&gt;If the machine says you gotta eat pizza with pineapple, you gotta do it and
better fake that you like it, even if deep down you almost choke on it.&lt;&#x2F;p&gt;
&lt;p&gt;Remember the question: By which rules do those companies operate? At times it
seems like they just follow the loudest mob. Just reverberate the opinion that
will most likely make their share prices skyrocket, or will guarantee them the
most profit.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The problem is that people are way too gullible to all this. Use the propaganda
machine the right way and the people will actually demand that every pizza has
to have pineapple. Just like we have to shut everything down and destroy the
livelihood of a lot of people, and maybe even a lot of interpersonal relationships.
Because propaganda made us believe that this is the only way.&lt;&#x2F;p&gt;
&lt;p&gt;And there will be zealots. I used to know a fanatic that literally said:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When I meet someone, I ask them what kind of pizza they eat. And then I decide
if I want to be friends with them or not.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;divide-and-conquer&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#divide-and-conquer&quot; aria-label=&quot;Anchor link for: divide-and-conquer&quot;&gt;#&lt;&#x2F;a&gt;
Divide and Conquer&lt;&#x2F;h1&gt;
&lt;p&gt;By now we have an extremely divided society, which likes to compartmentalize
everyone. Interestingly, there is two categories here. Things that you were just
born with, which are dictated by genetics, and things that are opinions, tastes
and something that you &lt;em&gt;chose&lt;&#x2F;em&gt; to believe.&lt;&#x2F;p&gt;
&lt;p&gt;We know its not just to treat people differently depending on what combination
of chromosomes they were born with. So why is it such a problem what kind of pizza
people prefer?&lt;&#x2F;p&gt;
&lt;p&gt;It seems to me that some people are turned into radical fundamentalists. It is
interesting that the terms &quot;religion&quot; and &quot;evangelize&quot; come to my mind. It is a
bit similar I would say. You want to convince others of your choice of pizza.
Because yours is the best, and all the rest are just garbage. If you have to,
you will ostracize them, put them into jail or worse.&lt;&#x2F;p&gt;
&lt;p&gt;You are absolutely convinced that you are fighting for the good cause. That
pizza without pineapple is the right thing to do and everyone who eats is with
pineapple is committing a crime!&lt;&#x2F;p&gt;
&lt;p&gt;It is offending to you even existing in the same room as someone who prefers
pineapple pizza.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So yes. We are living in an extremely divided society. The thing that I still
haven’t quite figured out is: who benefits from this? Sure, in the current
situation the one who &lt;em&gt;can afford&lt;&#x2F;em&gt; to get tested or vaccinated sure enjoys more
freedoms than one who can’t. But I’m not sure if it is that simple. And even if
it is, people are too busy arguing among themselves if they should wear masks or
not.&lt;&#x2F;p&gt;
&lt;p&gt;Its also a bit comical how even the respect for laws and law enforcement
personnel is eroded when you read about the police harassing little children and
confiscating sleds. LOL.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;privacy-and-politics&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#privacy-and-politics&quot; aria-label=&quot;Anchor link for: privacy-and-politics&quot;&gt;#&lt;&#x2F;a&gt;
Privacy and Politics&lt;&#x2F;h1&gt;
&lt;p&gt;The only thing that is really private to us, thus far at least, is our thoughts
and minds. And we do need to share that. Because there is so much beauty, love,
innovation, humor, and ideas in there. Some ideas may contradict your own.
But thats okay. I laugh about writing this. But hey: It is okay to have different
opinions! Except for what kind of pizza to eat! If it is the wrong kind, I will
hate you and make your life miserable. Nah, just joking.&lt;&#x2F;p&gt;
&lt;p&gt;We need to have the freedom to express ourselves. To have a &lt;em&gt;safe space&lt;&#x2F;em&gt; to
speak our mind. To challenge the status quo. To think outside of the box.&lt;&#x2F;p&gt;
&lt;p&gt;Do we live in a society where you must not defy the eternal leader, or otherwise
fear death? Or do we actively encourage to be challenged intellectually. Maybe
someone else has better ideas than I do?&lt;&#x2F;p&gt;
&lt;p&gt;Most of these things are &lt;em&gt;opinions&lt;&#x2F;em&gt;. And those &lt;em&gt;opinions&lt;&#x2F;em&gt; end up being policy
and law. Because some time ago it was decided that some voted representatives
will make a majority decision on this. This is what we call democracy. In some
parts of the world, it works differently than in others. I don’t want to go into
too much detail here.&lt;&#x2F;p&gt;
&lt;p&gt;Anyhow. One problem I see in politics is lack of privacy. There has to be some
kind of transparency, yes. But on the other hand, when you can actually see
online how each member of parliament voted makes it way too easy to coerce,
blackmail, bribe someone to vote a certain way. Party discipline is a thing, and
maybe someone doesn’t want to get kicked out of the club, so they better vote
the party line even if their consciousness tells them otherwise.&lt;&#x2F;p&gt;
&lt;p&gt;We need to have secrecy of the vote also in parliament! Otherwise its just a
joke.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;Well this has been long. And a bit emotional. Like I said, somehow we are more
attached to the things we &lt;em&gt;chose&lt;&#x2F;em&gt; to believe in.&lt;&#x2F;p&gt;
&lt;p&gt;In general, I feel both quite chill, and afraid at the same time. So you say
&lt;code&gt;1+1 = 3&lt;&#x2F;code&gt;, or wait, is it &lt;code&gt;1+1 = 5&lt;&#x2F;code&gt;. Doesn’t matter, just do your thing.
(2 + 2 is 4, minus 1 thats 3, quick mafs!)&lt;&#x2F;p&gt;
&lt;p&gt;Its just that I’m a bit disappointed. We came quite far from darker times where
you were discriminated against based on the skin color, genitalia, or a patch
sewn on your jacket. While we are still far away from true justice, haven’t we
learned anything? Why do we start start fights over wearing, or not wearing
masks? Why are we even debating discriminating against people based on whether
they are vaccinated, or not. Vegan or meat eater.&lt;&#x2F;p&gt;
&lt;p&gt;But you might say, I know that pizza with pineapple is better. It is the right
thing to do! And it is okay to shove it down peoples throats who hate it.
Because the ends justifies the means.&lt;&#x2F;p&gt;
&lt;p&gt;I disagree. And I live in a time right now in which I actually have to be afraid
to speak my opinion. Shoving pizza down peoples throats is wrong! It does not
matter which kind it is!&lt;&#x2F;p&gt;
&lt;p&gt;I do believe in freedom. Freedom to express an opinion. To not be censored and
blocked for it. I might not agree with the opinions that are being expressed.
But I do fight for the right of expressing those. Because I believe that is the
right thing to do. And I do believe that it should be laws decided upon with a
democratic process, enforced by courts, which decide what is okay and what is not.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ordnung muss sein. ;-)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;And we need to take back control over our services and our data. The big
oligarchs literally have us by our family photos and means of communication.
We need free and open networks, protocols, instruction sets, operating systems,
devices, etc, etc. Federated, decentralized, peer-to-peer. With the right to
repair, and to modify. To copy and to encrypt. It might be more work than just
forking over the key to your lives to some private company, but it might just
be worth it in the end.&lt;&#x2F;p&gt;
&lt;p&gt;Others may disagree.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Anyway, this really got a lot longer than anticipated.&lt;&#x2F;p&gt;
&lt;p&gt;So the real conclusion here is: I do like pineapple pizza. And I like to eat my
Nutella bread with butter.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Why?&lt;&#x2F;strong&gt; you might ask. &lt;strong&gt;Why does it even matter why?&lt;&#x2F;strong&gt; I will ask in return.&lt;&#x2F;p&gt;
&lt;p&gt;I have friends who prefer it either way, and thats okay.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Feedback on Rusts Code Coverage</title>
        <published>2020-11-23T00:00:00+00:00</published>
        <updated>2020-11-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/rust-cov/"/>
        <id>https://swatinem.de/blog/rust-cov/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/rust-cov/">&lt;p&gt;In my &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;rust-2021&#x2F;&quot;&gt;Rust 2021&lt;&#x2F;a&gt; wishlist, I was expressing
my excitement about having high-quality, precise code coverage in Rust. I have
been playing around with it a bit these days, and here comes my feedback and a
wishlist.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;why-code-coverage-matters&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#why-code-coverage-matters&quot; aria-label=&quot;Anchor link for: why-code-coverage-matters&quot;&gt;#&lt;&#x2F;a&gt;
Why Code Coverage matters&lt;&#x2F;h1&gt;
&lt;p&gt;I think this is a matter of personal preference to some degree. But in general
I think most developers do care about testing their software. And code coverage
simply answers the question what parts of your code you actually test. Every
part of the code that is not tested can potentially have bugs. Or maybe that
part is also dead code?&lt;&#x2F;p&gt;
&lt;p&gt;The other question is how detailed you want coverage to be. I think that testing
every single permutation is a bit overkill, but on the other hand, just having
per-function or per-line statistics is way too less in my opinion. For me
personally, the sweet spot is at the branch level. I want all the branches in
my code to be covered by tests. If one branch is not covered, it might mean that
a condition is always true. Either because my tests are lacking, or because
I have basically dead code.&lt;&#x2F;p&gt;
&lt;p&gt;Branch-level coverage makes sure that all conditions of conditional-code are
hit. This is especially important when chaining conditions using
short-circuiting operators. So for the expression &lt;code&gt;a() &amp;amp;&amp;amp; b()&lt;&#x2F;code&gt;, &lt;code&gt;b()&lt;&#x2F;code&gt; will only
be executed if the result of &lt;code&gt;a()&lt;&#x2F;code&gt; is true. And you can nest a couple of those
conditions.&lt;&#x2F;p&gt;
&lt;p&gt;Also, code coverage is a really nice way to gamify writing tests. Because you
can write tests specifically that exercise certain parts of your code base,
which also increases your understanding of the code at the same time.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-i-expect-from-tools&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#what-i-expect-from-tools&quot; aria-label=&quot;Anchor link for: what-i-expect-from-tools&quot;&gt;#&lt;&#x2F;a&gt;
What I expect from Tools&lt;&#x2F;h1&gt;
&lt;p&gt;So far, I have been used to the excellent tools that are available for
JavaScript, more specifically &lt;a href=&quot;https:&#x2F;&#x2F;istanbul.js.org&#x2F;&quot;&gt;istanbul&lt;&#x2F;a&gt;. It does
function, statement and branch-level coverage. It does so by instrumenting the
code, giving each source-file a preamble with some metadata, and then for each
function, statement or branch, it generates code to increment a counter. In
post-processing, it will then generate a report out of that.&lt;&#x2F;p&gt;
&lt;p&gt;Since a few versions, node has had builtin coverage which is supposed to be a
lot quicker and support &quot;block level&quot; granularity. This does go as deep as
expressions, not sure about branches though. But there is
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bcoe&#x2F;c8&quot;&gt;c8&lt;&#x2F;a&gt; which can basically create the same output as
istanbul, but a lot quicker. I have tried this some time ago with an older
version, but found that the output quality was a bit lacking.&lt;&#x2F;p&gt;
&lt;p&gt;I think in the end both of these tools are reasonably good at producing code
coverage for &lt;em&gt;JavaScript&lt;&#x2F;em&gt;, however, JS is not always the code that you &lt;em&gt;write&lt;&#x2F;em&gt;,
it just happens to be the code that the engine &lt;em&gt;executes&lt;&#x2F;em&gt;. And the problem now
becomes to map between those two. In the JS world, sourcemaps are the way that
is done, but they are quite a pain sometimes and the results have varying
quality.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway. What I expect is to have a single command line option, or a wrapper
around my command that will just magically provide me with a code coverage
report that I can view and act on.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rust-process&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#rust-process&quot; aria-label=&quot;Anchor link for: rust-process&quot;&gt;#&lt;&#x2F;a&gt;
Rust Process&lt;&#x2F;h1&gt;
&lt;p&gt;The process of how to get reports is actually &lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;rust-cov&#x2F;rust-cov&quot;&gt;well documented&lt;&#x2F;a&gt;, but
still super complex.&lt;&#x2F;p&gt;
&lt;p&gt;Lets start from the beginning. The first step is to provide a switch to the rust
compiler instructing it to generate an instrumented library or executable.
Running cargo with &lt;code&gt;RUSTFLAGS=&quot;-Zinstrument-coverage&quot;&lt;&#x2F;code&gt; does a wonderful job
there, but is has one major disadvantage: It passes these rustflags to &lt;em&gt;all&lt;&#x2F;em&gt; of
the code it compiles. But I would argue that in 99% of the cases, you only care
about your &lt;em&gt;own&lt;&#x2F;em&gt; code, which translates to: &lt;em&gt;crates in your workspace&lt;&#x2F;em&gt;. This
creates two problems: I have to explicitly &lt;em&gt;ignore&lt;&#x2F;em&gt; code that is not part of my
workspace, and instrumentation does have a negative effect on both compile time,
and also on runtime. Although I imagine with enough caching this won’t matter
as much. Still, I am paying the cost for something that I don’t want to use!&lt;&#x2F;p&gt;
&lt;p&gt;The second env var that I have to provide is
&lt;code&gt;LLVM_PROFILE_FILE=$PWD&#x2F;cov&#x2F;%p.profraw&lt;&#x2F;code&gt;. Note that I have to provide an
absolute path here, and use the &lt;code&gt;%p&lt;&#x2F;code&gt; placeholder because unit tests, integration
tests, and also doctests are basically their own executable and are run
independently. Another side-effect of that is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;issues&#x2F;2832&quot;&gt;cargo#2832&lt;&#x2F;a&gt; which makes
&lt;code&gt;cargo test&lt;&#x2F;code&gt; output rather unreadable.&lt;&#x2F;p&gt;
&lt;p&gt;Then run &lt;code&gt;llvm-profdata merge -sparse cov&#x2F;*.profraw -o coverage.profdata&lt;&#x2F;code&gt; to
merge these individual files. Well fair enough, I can fully understand why.
I had to basically manually write something like that for &lt;a href=&quot;https:&#x2F;&#x2F;istanbul.js.org&#x2F;&quot;&gt;istanbul&lt;&#x2F;a&gt; because
that functionality was somehow missing in that ecosystem, oh well.&lt;&#x2F;p&gt;
&lt;p&gt;Now the next step is the really annoying one, as I have to give a list of
&lt;em&gt;objects&lt;&#x2F;em&gt; to &lt;code&gt;llvm-cov&lt;&#x2F;code&gt; for it to generate a report. I am far from actually
&lt;em&gt;knowing&lt;&#x2F;em&gt; how this all works, but my &lt;em&gt;guess&lt;&#x2F;em&gt; is that it is using the debuginfo
embedded&#x2F;referenced by the object files to actually map to the sourcefiles and
the line&#x2F;offset in those. This is super tedious when dealing with cargo. Lets
illustrate this with an example.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So lets start with a really simple toy example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; src&#x2F;lib.rs:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F; ```
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F; assert_eq!(fucov::generic_fn(&amp;quot;doc&amp;quot;, &amp;quot;oh hai&amp;quot;), Ok(&amp;quot;doctest&amp;quot;));
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F; ```
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;generic_fn&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; T) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; s {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;unit&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;unit-test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;integration&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;integration-test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;doc&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;doctest&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(val)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;unit_test&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;generic_fn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;unit&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;unit-test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; tests&#x2F;test_integration.rs:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;integration_test&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        fucov&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;generic_fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;integration&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;integration-test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running my tests, I get the following output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt; cargo +nightly test
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Finished test [unoptimized + debuginfo] target(s) in 0.00s
&lt;&#x2F;span&gt;&lt;span&gt;     Running target&#x2F;debug&#x2F;deps&#x2F;fucov-e207e6174e8f3968
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;running 1 test
&lt;&#x2F;span&gt;&lt;span&gt;test unit_test ... ok
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     Running target&#x2F;debug&#x2F;deps&#x2F;test_integration-d1ff69dad6b5720c
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;running 1 test
&lt;&#x2F;span&gt;&lt;span&gt;test integration_test ... ok
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   Doc-tests fucov
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;running 1 test
&lt;&#x2F;span&gt;&lt;span&gt;test src&#x2F;lib.rs - generic_fn (line 1) ... ok
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well, so much for clean output… anyway… I do see which executables cargo is
running, which is good. Except, which executable is run for my doctests?
Checking the &lt;code&gt;target&#x2F;debug&#x2F;deps&lt;&#x2F;code&gt; folder, I do see a &lt;code&gt;libfucov-HASH.rlib&lt;&#x2F;code&gt;, maybe
thats my library that was linked for my doctests?&lt;&#x2F;p&gt;
&lt;p&gt;Playing around with this a little, I played around with variations of this
command line: &lt;code&gt;llvm-cov show --format=html --show-instantiations=false --instr-profile coverage&#x2F;fucov.profdata --object target&#x2F;debug&#x2F;deps&#x2F;fucov-e207e6174e8f3968 --object target&#x2F;debug&#x2F;deps&#x2F;test_integration-d1ff69dad6b5720c&lt;&#x2F;code&gt;.
This is really a mouthful. As you can see, I don’t have listed my rlib file
there, as it did not make any difference in output. In the end, I was not able
to get the coverage from my doctest at all. Thats a shame.&lt;&#x2F;p&gt;
&lt;p&gt;Looking at html output or json&#x2F;lcov output, it was also interesting how this
generic function was treated. The command line I gave explicitly excluded
showing individual instantiations of the generic, as that would surely be
overload if there were lots of generics, as I think there usually are with rust.
In that case, also providing a demangler would have been useful as it will show
each block of code captioned with the function name.&lt;&#x2F;p&gt;
&lt;p&gt;What I can see from the output is that my unit and integration test functions
themselves are also covered, as is kind of expected but a bit useless.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;I’m really impressed with the quality of the reports, although the process to
get there is a bit too convoluted IMO. So the foundation is there, now its just
a matter of optimizing and making it simple to use. And well, maybe I feel like
it and will create my own cargo command called &lt;code&gt;fucov&lt;&#x2F;code&gt;, which does all that,
because well, fuck off and give me my coverage!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding the limitations of functional record update</title>
        <published>2020-11-19T00:00:00+00:00</published>
        <updated>2020-11-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/frufru-1/"/>
        <id>https://swatinem.de/blog/frufru-1/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/frufru-1/">&lt;p&gt;This story starts with the sentry protocol and event payloads, and how to make
them both typesafe, easy-to-use, and extensible at the same time, which they
are currently not, and probably won’t be with current Rust.&lt;&#x2F;p&gt;
&lt;p&gt;So these definitions are just plain-old-data (POD), they have no logic or other
functionality, they are just used to transfer data to the server. And they have
a whole bunch of properties, most of which are optional. You mostly just create
them, and very rarely look inside them. So we want to optimize the ergonomics
for creation.&lt;&#x2F;p&gt;
&lt;p&gt;I would argue the most ergonomic solution here is to use a plain struct with
public fields (notice that we derive &lt;code&gt;Default&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Default)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;MyStructure &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;field_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;field_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And you can very easily create it via a struct literal:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;MyStructure {
&lt;&#x2F;span&gt;&lt;span&gt;    field_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    field_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We don’t really care about &lt;code&gt;field_b&lt;&#x2F;code&gt; that much, and when its not 2 fields, but
rather 20, its very tedious to list each and every one of those especially if
you don’t really care about them.&lt;&#x2F;p&gt;
&lt;p&gt;One solution to this is to use the functional record update (FRU) syntax.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;MyStructure {
&lt;&#x2F;span&gt;&lt;span&gt;    field_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;default()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;FRU has the additional benefit that adding new fields will still work without
changes. However when a user really wants to exhaustively list all of the
fields, and you add another one later, they will receive a compile error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0063]: missing field `field_c` in initializer of `MyStructure`
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; src\main.rs:11:5
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;11 |     MyStructure {
&lt;&#x2F;span&gt;&lt;span&gt;   |     ^^^^^^^^^^^ missing `field_c`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Adding fields to public structures is thus a breaking change, because it breaks
the code of users who don’t use FRU.&lt;&#x2F;p&gt;
&lt;p&gt;The go-to solution to be able to extend structs without breaking peoples code
is to use the &lt;code&gt;#[non_exhaustive]&lt;&#x2F;code&gt; attribute. But this is a really big hammer,
and it basically prevents users from using struct literals &lt;em&gt;at all&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0639]: cannot create non-exhaustive struct using struct expression
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; src\main.rs:11:5
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;11 | &#x2F;     MyStructure {
&lt;&#x2F;span&gt;&lt;span&gt;12 | |         field_a: 123,
&lt;&#x2F;span&gt;&lt;span&gt;13 | |         ..Default::default()
&lt;&#x2F;span&gt;&lt;span&gt;14 | |     };
&lt;&#x2F;span&gt;&lt;span&gt;   | |_____^
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One is forced to create an object first using a constructor (or default), and
then assign properties one-by-one, or use setters for that purpose, maybe
through the builder pattern. However, for this use-case, this is really heavy
and kind of destroys the ergonomics. So right now its essentially impossible to
have ergonomic &lt;em&gt;and&lt;&#x2F;em&gt; extensible structs.&lt;&#x2F;p&gt;
&lt;p&gt;But why shouldn’t that be possible? If you have a complete object via &lt;code&gt;Default&lt;&#x2F;code&gt;,
why can’t you just override those properties that you care about? The &lt;code&gt;Default&lt;&#x2F;code&gt;
will make sure its always the right struct, even if it changes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;digging-through-rust-code&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#digging-through-rust-code&quot; aria-label=&quot;Anchor link for: digging-through-rust-code&quot;&gt;#&lt;&#x2F;a&gt;
Digging through Rust code&lt;&#x2F;h2&gt;
&lt;p&gt;Thinking that it should be easily possible, I dusted off my 5 year old Rust
clone and after some initial difficulties I managed to get it to build on
Windows.&lt;&#x2F;p&gt;
&lt;p&gt;Since Rust Errors have a specific code, its easy to search for that and sure
enough, I quickly find the actual
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;57edf88b400ff6c6ae1de255fbd7e3448aca4fb2&#x2F;compiler&#x2F;rustc_typeck&#x2F;src&#x2F;errors.rs#L166-L172&quot;&gt;type implementing &lt;code&gt;E0639&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(SessionDiagnostic)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;E0639&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;StructExprNonExhaustive &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;cannot create non-exhaustive {what} using struct expression&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;span&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Span,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;what&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Searching for that type gives me a single use, which is exactly
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;e0ef0fc392963438af5f0343bf7caa46fb9c3ec3&#x2F;compiler&#x2F;rustc_typeck&#x2F;src&#x2F;check&#x2F;expr.rs#L1110-L1116&quot;&gt;the code I was looking for&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Prohibit struct expressions when non-exhaustive flag is set.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; adt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; adt_ty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;ty_adt_def&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;`check_struct_path` returned non-ADT type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;adt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;did&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;is_local&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; variant&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;is_field_list_non_exhaustive&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;tcx
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;sess
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;emit_err&lt;&#x2F;span&gt;&lt;span&gt;(StructExprNonExhaustive { span&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;span&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; what&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; adt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;variant_descr&lt;&#x2F;span&gt;&lt;span&gt;() })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Reading the code a bit, its obvious that the optional &lt;code&gt;base_expr&lt;&#x2F;code&gt; holds the
record update if there is one. So I added a &lt;code&gt;&amp;amp;&amp;amp; base_expr.is_none()&lt;&#x2F;code&gt; and
recompiled.&lt;&#x2F;p&gt;
&lt;p&gt;And lo and behold, my code suddenly compiles.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;this-was-way-too-simple&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#this-was-way-too-simple&quot; aria-label=&quot;Anchor link for: this-was-way-too-simple&quot;&gt;#&lt;&#x2F;a&gt;
This was way too simple&lt;&#x2F;h2&gt;
&lt;p&gt;I couldn’t believe that a oneliner was enough to fix this. This was way too
simple. I must be missing something. So I went back to research, and found
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;blob&#x2F;master&#x2F;text&#x2F;2008-non-exhaustive.md#functional-record-updates&quot;&gt;RFC 2008&lt;&#x2F;a&gt;
which specified the &lt;code&gt;#[non_exhaustive]&lt;&#x2F;code&gt; feature, and had a paragraph dedicated
to FRU. Im paraphrasing here:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It will not work, because you could, in the future, add private fields that the user didn&#x27;t account for.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So you can add public fields without a problem, but private fields will run
into a different Error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0451]: field `field_d` of struct `MyStructure` is private
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; src\main.rs:13:11
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;13 |         ..Default::default()
&lt;&#x2F;span&gt;&lt;span&gt;   |           ^^^^^^^^^^^^^^^^^^ field `field_d` is private
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As a side note, this error seems to happen at a different compiler stage, as it
would only show up in my tests when I solve all other compiler errors.&lt;&#x2F;p&gt;
&lt;p&gt;There are &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;63538&quot;&gt;two issues&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;70564&quot;&gt;for that&lt;&#x2F;a&gt; already, and probably
lots of duplicates since this is obviously a much desired feature.&lt;&#x2F;p&gt;
&lt;p&gt;It looks like there were some experiments 3 years ago that weren’t successful,
so I guess things get a bit more complicated after all.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dealing-with-private-fields&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#dealing-with-private-fields&quot; aria-label=&quot;Anchor link for: dealing-with-private-fields&quot;&gt;#&lt;&#x2F;a&gt;
Dealing with private Fields&lt;&#x2F;h2&gt;
&lt;p&gt;Searching for this new error &lt;code&gt;E0451&lt;&#x2F;code&gt; also gives me a single usage in the Rust
compiler in a function called
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;7d747db0d5dd8f08f2efb073e2e77a34553465a7&#x2F;compiler&#x2F;rustc_privacy&#x2F;src&#x2F;lib.rs#L952-L985&quot;&gt;check_field&lt;&#x2F;a&gt; in the &lt;code&gt;rustc_privacy&lt;&#x2F;code&gt; crate. Surprisingly,
this method takes a &lt;code&gt;in_update_syntax&lt;&#x2F;code&gt; parameter which is used to customize the
error message.&lt;&#x2F;p&gt;
&lt;p&gt;This in turn comes from checking the privacy of structs, which has the following
to say related to FRU:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the expression uses FRU we need to make sure all the unmentioned fields
are checked for privacy (RFC 736). Rather than computing the set of
unmentioned fields, just check them all.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Ok, time to skim through
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;blob&#x2F;master&#x2F;text&#x2F;0736-privacy-respecting-fru.md&quot;&gt;RFC 736&lt;&#x2F;a&gt;.
The RFC seems to be very thorough, and explicitly mentions our desired
extensibility. The reasoning for the change was to plug an abstraction-violating
hole. The example given in the RFC is pretty clear on why that is a bad idea.
And indeed disallowing FRU for structs with private fields solves it neatly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;moving-on&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#moving-on&quot; aria-label=&quot;Anchor link for: moving-on&quot;&gt;#&lt;&#x2F;a&gt;
Moving on&lt;&#x2F;h2&gt;
&lt;p&gt;Now we know why things are the way they are, and they make perfect sense.
I’m positively surprised how reasonably well things are documented. Although its
sad that our problem is a lot harder to solve than it seemed at first. I mean
otherwise surely someone would have done it in the last 5 or so years.&lt;&#x2F;p&gt;
&lt;p&gt;So the challenge becomes: Can we still find a way to improve things?
That is for another time to find out.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Forms of blocking and non-blocking I&#x2F;O</title>
        <published>2020-11-15T00:00:00+00:00</published>
        <updated>2020-11-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/forms-of-io/"/>
        <id>https://swatinem.de/blog/forms-of-io/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/forms-of-io/">&lt;p&gt;My fiance is often challenging me to explain some programmers topic in simple
terms for non-programmers like her to understand. We call these stories
&lt;em&gt;Programmers Fairytales&lt;&#x2F;em&gt;. I was surprisingly successful explaining to her the
differences between blocking, and different forms of non-blocking I&#x2F;O
(input-output) in a way that she understood. Surprisingly, these thoughts have
come back recently, thinking about a problem at work that came up and needs
brainstorming.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;programmers-fairytale&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#programmers-fairytale&quot; aria-label=&quot;Anchor link for: programmers-fairytale&quot;&gt;#&lt;&#x2F;a&gt;
Programmers Fairytale&lt;&#x2F;h1&gt;
&lt;p&gt;So our programmers fairytale starts with us having to endure the overly
bureaucratic and annoying process of getting married. We have to frequently go
to the &lt;em&gt;Standesamt&lt;&#x2F;em&gt; (apparently it’s &lt;em&gt;civil registration office&lt;&#x2F;em&gt; in english).
There are different ways we can talk to them, which is how I explained I&#x2F;O to
her.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;blocking-i-o&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#blocking-i-o&quot; aria-label=&quot;Anchor link for: blocking-i-o&quot;&gt;#&lt;&#x2F;a&gt;
Blocking I&#x2F;O&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello there. We would like you to get this work done, we will wait here until
you are done.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Blocking I&#x2F;O is like knocking at someones door and giving them something to
work, while waiting patiently at the door until that work is done. Depending on
the kind of work, this is obviously a bad idea, because you just keep waiting
&#x2F; &lt;em&gt;blocking&lt;&#x2F;em&gt; until the work is finished, while you can’t do anything meaningful
in the meantime yourself.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;polling-based-i-o&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#polling-based-i-o&quot; aria-label=&quot;Anchor link for: polling-based-i-o&quot;&gt;#&lt;&#x2F;a&gt;
Polling-based I&#x2F;O&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello there. We have some work for you. We will check back tomorrow.&lt;&#x2F;p&gt;
&lt;p&gt;Tomorrow: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=QfaSLHOm4rw&quot;&gt;Yo, you about done? Tick tock, motherfucker!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;When doing non-blocking I&#x2F;O based on polling, it means to periodically check
back and see if the work you wanted to get done is finished already or not.
It’s a lot better already, because we can spend the meantime doing other things
while we wait. It’s however not ideal, because we still have to walk over to
the office and ring the door, or alternatively do a phone-call and wait for it
to get answered. The other person might also be interrupted in whatever they
were doing at that time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;completion-based-i-o&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#completion-based-i-o&quot; aria-label=&quot;Anchor link for: completion-based-i-o&quot;&gt;#&lt;&#x2F;a&gt;
Completion-based I&#x2F;O&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Us: Hello there. We have some work for you.&lt;&#x2F;p&gt;
&lt;p&gt;Office: Cool. Leave your number, we will call you when its done.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;With this form of I&#x2F;O, we register a &lt;em&gt;callback&lt;&#x2F;em&gt;, to be notified of the
completion of the work later on. In our case, we just leave our phone number
and email with the office. Less interruptions from checking back every day,
and eventually the work is done. This works fine for software, although not so
well when dealing with civil offices.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;queueing-io-uring&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#queueing-io-uring&quot; aria-label=&quot;Anchor link for: queueing-io-uring&quot;&gt;#&lt;&#x2F;a&gt;
Queueing (io_uring)&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Us: We have some work for you, we will leave it in your letter box. When you
are done, put the reply in our letter box please.&lt;&#x2F;p&gt;
&lt;p&gt;Office: I have some spare time right now, I guess I can check my letter box.&lt;&#x2F;p&gt;
&lt;p&gt;Us: Might as well check my letter box on the way out. Oh, there is the reply.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Now we have introduced something in between, a letterbox, to hold the messages
and the work instructions. We don’t interrupt anyone by ringing the doorbell or
calling the phone. Whenever they have some spare time, they will just check
their letter box. In terms of software, I would call this an ideal solution.
Every party can just focus on doing its own thing, no distractions.&lt;&#x2F;p&gt;
&lt;p&gt;There is one complication though. You have this new concept of a letter box to
think about. In particular to think about what you want to do in case it fills
up with messages that you don’t have time to reply to.&lt;&#x2F;p&gt;
&lt;p&gt;Interestingly enough, this form of I&#x2F;O was recently introduced in the Linux
kernel under the name &lt;code&gt;io_uring&lt;&#x2F;code&gt;. It is based around a &lt;em&gt;submission queue&lt;&#x2F;em&gt;
(office letter box) and a &lt;em&gt;completion queue&lt;&#x2F;em&gt; (our letter box). Submitting
requests and polling the result works without any syscall &#x2F; context-switches
(ringing the doorbell).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;spectre-for-non-programmers&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#spectre-for-non-programmers&quot; aria-label=&quot;Anchor link for: spectre-for-non-programmers&quot;&gt;#&lt;&#x2F;a&gt;
Spectre for non-programmers&lt;&#x2F;h3&gt;
&lt;p&gt;A small digression here. I was even able to kind-of explain spectre to my fiance.
Remember when we ring the doorbell of the office. It would be super bad if they
open the door and we would see all of the paperwork of other people laying
around. So naturally, they will first get that stuff out of the way before
opening the door for us. Kind of like how CPU caches have to be wiped before
switching contexts, so other processes are not able to do cache-timing attacks.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Anyway, &lt;code&gt;io_uring&lt;&#x2F;code&gt; does not involve syscalls, so it does not need to do any of
that. Which means its super fast. And I’m certainly very excited about its
potential. Since it is quite young, it’s not yet possible to use it for
&lt;em&gt;everything&lt;&#x2F;em&gt;, and also programs and runtimes need to be updated to actually make
use of it.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;languages-and-runtimes&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#languages-and-runtimes&quot; aria-label=&quot;Anchor link for: languages-and-runtimes&quot;&gt;#&lt;&#x2F;a&gt;
Languages and Runtimes&lt;&#x2F;h1&gt;
&lt;p&gt;In another programmers fairytale, I tried to explain &lt;code&gt;async&#x2F;await&lt;&#x2F;code&gt; to her,
although I think I was not as successful as before. Interestingly, you can mix
different forms of async.&lt;&#x2F;p&gt;
&lt;p&gt;Lets start with some work that you want to get done asynchronously. We call
this &lt;code&gt;Future&lt;&#x2F;code&gt; in Rust, and &lt;code&gt;Promise&lt;&#x2F;code&gt; in JS. Its a &lt;em&gt;promise&lt;&#x2F;em&gt; that the work you
requested may eventually be done in the &lt;em&gt;future&lt;&#x2F;em&gt; (or not).&lt;&#x2F;p&gt;
&lt;p&gt;The old way of using these futures was with callbacks, the &lt;em&gt;completion-based&lt;&#x2F;em&gt;
model from above. You &lt;em&gt;leave your number&lt;&#x2F;em&gt; by providing a function &#x2F; closure.
Its just a block of code thats separate from your other code.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;em&gt;new&lt;&#x2F;em&gt; way of doing things is by using the &lt;code&gt;await&lt;&#x2F;code&gt; keyword. In Rust, it is
put &lt;em&gt;behind&lt;&#x2F;em&gt; an expression, in JS it’s in front. What it does is, it
&lt;em&gt;looks like&lt;&#x2F;em&gt; blocking, like the &lt;em&gt;we will wait here&lt;&#x2F;em&gt; from above, hence the
&lt;code&gt;await&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;However, under the hood its implemented completely differently in different
languages. Rust futures are based on polling, while JS promises use a completion
callback. This has interesting implications, both good and bad.&lt;&#x2F;p&gt;
&lt;p&gt;In Rust, its kind of bad that you have to poll all the time, but on the other
hand, if you don’t care about the result anymore, you just stop polling and
the work stops as well. In JS, you can easily say &lt;em&gt;I don’t really care, just do it&lt;&#x2F;em&gt;.
On the other hand, its a lot harder to actually &lt;em&gt;stop&lt;&#x2F;em&gt; doing something that you
already started. Sometimes the office just burns down and you have no idea why.&lt;&#x2F;p&gt;
&lt;p&gt;Coming back to our fairytale, I think the office is more like Rust futures. You
constantly have to bug them and say &lt;em&gt;yes, we still want that stuff to get done&lt;&#x2F;em&gt;,
or they just won’t move a muscle. It’s sad actually :-(&lt;&#x2F;p&gt;
&lt;p&gt;There are also differences on the operating system level. While &lt;code&gt;io_uring&lt;&#x2F;code&gt; is
the new hotness on Linux, previously things were based on polling. Although in a
more optimized way, where you have a whole list of things and ask
&lt;em&gt;is any of these done yet?&lt;&#x2F;em&gt; As far as I know, Windows is based on callbacks.
This is interesting, because a language&#x2F;runtime has to work in a uniform way
across operating systems, although under the hood it does completely different
things.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;tradeoffs&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#tradeoffs&quot; aria-label=&quot;Anchor link for: tradeoffs&quot;&gt;#&lt;&#x2F;a&gt;
Tradeoffs&lt;&#x2F;h1&gt;
&lt;p&gt;It’s interesting to think a bit more about tradeoffs though. Depending on the
work you want to get done, it might be the best idea to just block. When its a
matter of &lt;em&gt;latency&lt;&#x2F;em&gt;, it might be the best idea to just make the trip to the
office once and wait a little. Having to come back the next day might just delay
things unnecessarily. Also, providing phone numbers (callbacks) or installing
letter boxes (queues) may increase the complexity, even polling has complexity,
as the other person may just ask &lt;em&gt;who were you again?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;networked-services&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#networked-services&quot; aria-label=&quot;Anchor link for: networked-services&quot;&gt;#&lt;&#x2F;a&gt;
Networked Services&lt;&#x2F;h1&gt;
&lt;p&gt;All of these concepts map to networked services as well. The difference might be,
instead of ringing our next door neighbors, we actually have to walk 10 minutes
down the street to the office. The &lt;em&gt;round trip time&lt;&#x2F;em&gt; is a lot longer. But you
can still decide if you want to wait right there, or come back tomorrow. Or
even both. Wait there for a certain amount of time, but then you get bored and
decide to rather check back later.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;This is exactly how &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;symbolicator&quot;&gt;symbolicator&lt;&#x2F;a&gt;
works right now. Or rather, symbolicator is like the office.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here, take a number and have a seat. I might have your answer right away,
otherwise check back tomorrow.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This system is starting to be a problem, and we are looking into ways to
improve it. I tend to favor the queueing solution. Coming back to our story,
when it comes to networked services, the &lt;em&gt;letter box&lt;&#x2F;em&gt; itself is a separate
service, like a post office. You submit your work request to the post office
nearest to you, and they will deliver the request to the post office box nearest
to the office that will serve that request. In that scenario, &lt;code&gt;symbolicator&lt;&#x2F;code&gt;
will just walk to its post office box whenever it has nothing to do, get the job
done and bring the result back to the post office. Kind of like the
&lt;em&gt;submission queue&lt;&#x2F;em&gt; and &lt;em&gt;completion queue&lt;&#x2F;em&gt; from &lt;code&gt;io_uring&lt;&#x2F;code&gt;. No distractions,
although in this case the distractions don’t matter that much. It is more the
concept of &lt;em&gt;take a number and check back&lt;&#x2F;em&gt; that bothers me personally. Overall,
I think the question is rather, do we want to build and manage a new post office,
and have contingency plans in place on what we should be doing when the letter
boxes start piling up and eventually overflow? Also, should we introduce another
service, someone who is responsible for deciding and delivering the messages to
the right letter box?&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Well thats it for today. I think the main takeaway here is this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Public offices are like Rust futures. You have to poll them constantly or
they won’t be doing any work. &lt;em&gt;sadface&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>PSA: Clearing global debugger properties</title>
        <published>2020-11-11T00:00:00+00:00</published>
        <updated>2020-11-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/windows-debuggers/"/>
        <id>https://swatinem.de/blog/windows-debuggers/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/windows-debuggers/">&lt;h2 id=&quot;tldr&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#tldr&quot; aria-label=&quot;Anchor link for: tldr&quot;&gt;#&lt;&#x2F;a&gt;
TLDR&lt;&#x2F;h2&gt;
&lt;p&gt;So your &lt;code&gt;UnhandledExceptionFilter&lt;&#x2F;code&gt; is just not being called? Maybe you program
is being run under a debugger without you even knowing.
Check the &lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\&lt;&#x2F;code&gt;
registry key and make sure it does not specify any special treatment for your
&lt;code&gt;.exe&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-whole-story&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-whole-story&quot; aria-label=&quot;Anchor link for: the-whole-story&quot;&gt;#&lt;&#x2F;a&gt;
The whole story&lt;&#x2F;h2&gt;
&lt;p&gt;Working at sentry, one of my responsibilities is to take care of the native SDK.
And yesterday I was in a really strange situation. For unknown reasons, all my
integration tests using the crashpad backend were failing. Admittedly, those
were the only tests I was running since I didn’t touch any other code.
But it was strange and it didn’t make any sense. I tried the &lt;code&gt;master&lt;&#x2F;code&gt; branch,
and it was the same, even though everything was working as expected on CI.&lt;&#x2F;p&gt;
&lt;p&gt;A quick internet search didn’t give me any good ideas at first. But I noticed
that log output was missing from our &lt;code&gt;FirstChanceHandler&lt;&#x2F;code&gt;, which I
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;crashpad&#x2F;pull&#x2F;20&quot;&gt;added on Windows&lt;&#x2F;a&gt; in addition
to Linux. Its a piece of code that can still run in-process at the time of a
crash to flush any internal state. It is based around the
&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;errhandlingapi&#x2F;nf-errhandlingapi-setunhandledexceptionfilter&quot;&gt;&lt;code&gt;SetUnhandledExceptionFilter&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
mechanism, which it seems is the Windows way of handling native crashes in the
process.&lt;&#x2F;p&gt;
&lt;p&gt;This refined my search a bit, and lead me to a SO post highlighting a paragraph
from the official documentation.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;[…] if an exception occurs in a process &lt;strong&gt;that is not being debugged&lt;&#x2F;strong&gt; […]
the exception makes it to the unhandled exception filter […]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So having an unhandled exception filter, and a debugger is mutually exclusive.
But I was not using a debugger. At this point I was also testing all the other
sentry backends, none of which was working.&lt;&#x2F;p&gt;
&lt;p&gt;And then I remembered, I was running the
&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows-hardware&#x2F;drivers&#x2F;devtest&#x2F;application-verifier&quot;&gt;Application Verifier&lt;&#x2F;a&gt;,
which does not really do anything by itself, but it apparently through some kind
of global magic enables additional checks when running programs in the Visual
Studio Debugger. But I was not doing that in this case, how come my exceptions
still didn’t reach the handler?&lt;&#x2F;p&gt;
&lt;p&gt;Another round of searching got me to a page that mentioned the registry key
&lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\&lt;&#x2F;code&gt;
which can be used to attach a debugger automatically right when spawning a
process, and its
&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;previous-versions&#x2F;windows&#x2F;desktop&#x2F;xperf&#x2F;image-file-execution-options&quot;&gt;documentation&lt;&#x2F;a&gt;
mentions something along those lines as well.&lt;&#x2F;p&gt;
&lt;p&gt;And sure enough, there was an entry for &lt;code&gt;sentry_example.exe&lt;&#x2F;code&gt;. Just deleting that
registry key solved the whole problem. All my integration tests returned to
running correctly. So it seems all of this is a bit of magic on Windows, and
sadly not really well documented. But now I’m eager to learn more about how all
this works.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust 2021</title>
        <published>2020-09-24T00:00:00+00:00</published>
        <updated>2020-09-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/rust-2021/"/>
        <id>https://swatinem.de/blog/rust-2021/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/rust-2021/">&lt;h1 id=&quot;tldr&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#tldr&quot; aria-label=&quot;Anchor link for: tldr&quot;&gt;#&lt;&#x2F;a&gt;
TLDR&lt;&#x2F;h1&gt;
&lt;p&gt;’Tis the planning season for Rust 2021 already, and as suggested, I will start
with a very short list of bullet points:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;As a long-time observer of the Rust project, I would to see some long-time
projects come to an end, to reap the promised benefits ;-)&lt;&#x2F;li&gt;
&lt;li&gt;As an ex-TypeScript&#x2F;JS developer, I am super excited to see high quality,
source-based code coverage (with branch coverage even) being worked on, and
would like to see this project get the attention it deserves.&lt;&#x2F;li&gt;
&lt;li&gt;Related, as a developer who loves testing and gamification, I want to have
an easier way to get an overview of how my project is doing, and where I can
improve it.&lt;&#x2F;li&gt;
&lt;li&gt;As a maintainer of a mid-sized workspace of Rust crates, I would like to have
better tooling, to deal with versioning, and publishing of my crates, as the
process feels very hacky right now.&lt;&#x2F;li&gt;
&lt;li&gt;As a maintainer of some crates that have a lot of feature flags, I would like
feature flags to be less of a pain and easier to work with, to give me the
confidence that my crate works no matter what feature flags the consumers use.&lt;&#x2F;li&gt;
&lt;li&gt;As a developer who has recently switched to GitHub Actions, I would have
liked that process to be more straight forward, so that I can avoid a lot of
copy&amp;amp;paste, and be sure that my CI builds are as fast as they can be.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;a-big-thank-you&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#a-big-thank-you&quot; aria-label=&quot;Anchor link for: a-big-thank-you&quot;&gt;#&lt;&#x2F;a&gt;
A Big Thank You!&lt;&#x2F;h1&gt;
&lt;p&gt;I have actually already written about
&lt;a href=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;doc-driven-development&#x2F;&quot;&gt;my wishlist for Rust tooling&lt;&#x2F;a&gt; a
few month ago, and like always, things have changed, and I have learned a lot.&lt;&#x2F;p&gt;
&lt;p&gt;Let me start off that I am super happy where Rust and the ecosystem are moving.
&lt;a href=&quot;https:&#x2F;&#x2F;rust-analyzer.github.io&#x2F;&quot;&gt;&lt;code&gt;rust-analyzer&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; has been a major success and is a great productivity booster!
It is also test-driving &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;chalk&quot;&gt;&lt;code&gt;chalk&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, which is supposed to become the new trait
solver in Rust hopefully soon. It is already working amazingly well in my IDE,
as I can get type hints and hover information in cases where the main Rust
compiler still wants me to manually type-annotate things.&lt;&#x2F;p&gt;
&lt;p&gt;Also, another project that I am super excited about and that gets a lot less
publicity than it deserves is precise source-based code coverage support built
into the compiler. I only know about this because I regularly scan through the
list of PRs to the compiler. This definitely needs more marketing around it!
And of course a way to easily use it. From all PRs I have seen, I would have no
idea how to actually use it and maybe even combine it with codecov, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Another great thing that I see was recently stabilized is intra-doc links. I am
super excited about this, and am already starting to use them, as they have been
available on &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&quot;&gt;docs.rs&lt;&#x2F;a&gt; for quite some time.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;where-rust-needs-to-improve&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#where-rust-needs-to-improve&quot; aria-label=&quot;Anchor link for: where-rust-needs-to-improve&quot;&gt;#&lt;&#x2F;a&gt;
Where Rust needs to improve&lt;&#x2F;h1&gt;
&lt;p&gt;The pain points I have right now are mostly related to tooling, and also related
to having bigger more complex projects, possibly workspaces consisting of
multiple crates.&lt;&#x2F;p&gt;
&lt;p&gt;I think the experience of creating and maintaining a small, simple Rust project
is amazing right now. But things start to get annoying as soon as the project
starts to grow.&lt;&#x2F;p&gt;
&lt;p&gt;I read that a lot of people are still complaining about long compile times. It
is actually a very complex problem, and when looking into more detail, it is
not really the speed of the Rust compiler that is at fault here.
For me, local development, especially with rust-analyzer has been a pleasure.
Things only start to fall apart when a small change means that all the
interdependent crates in my workspace have to be updated, or the problem is the
final linking step that is taking forever. Or the problem is not even my own
machine, but rather CI that is super slow because of tons of possibly duplicated
dependencies, and bad caching.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;improving-ci&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#improving-ci&quot; aria-label=&quot;Anchor link for: improving-ci&quot;&gt;#&lt;&#x2F;a&gt;
Improving CI&lt;&#x2F;h1&gt;
&lt;p&gt;Speaking of CI, my team and I have been migrating a few workspaces to GitHub
Actions recently, and while we do like it in general, there are a few rough
edges that should be smoother. Not all are strictly Rust problems, some are
also GHA.&lt;&#x2F;p&gt;
&lt;p&gt;The primary goal of CI in my opinion is to both be as fast as possible, and as
thorough as possible, while also being efficient and easy to use.
Which is the first tradeoff that a developer needs to choose from.
Do I want to fail fast, or rather have &lt;em&gt;all&lt;&#x2F;em&gt; the failures visible?
When we fan out wide, we get a ton of different status reports, which IMO is a
UI concern to begin with; but that also means more overhead.
While the wall-time might be smaller, the machine-time is increased, because the
common steps of checkout, toolchain, etc are run by every job.&lt;&#x2F;p&gt;
&lt;p&gt;Right now, setting up a CI pipeline is too cumbersome. There is too many
decisions a developer has to do, and way too much copy-paste going on in the
CI definition itself. I wish a lot of these things would just be done out of the
box.&lt;&#x2F;p&gt;
&lt;p&gt;One of the big problems for CI right now, especially for big projects is caching.
Caching is not free! If cargo creates a big &lt;code&gt;target&lt;&#x2F;code&gt; folder, persisting and
restoring that cache can already take a considerable amount of CI time.
This problem gets a lot worse because cargo does not auto-clean that cache.
There are some &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;issues&#x2F;5885&quot;&gt;open issues&lt;&#x2F;a&gt;
about that, but nothing much has happened in years. A lot of projects have
custom solutions to deal with this, and it does not really scale. Also, should
one disable incremental compilation on CI? I don’t know. I would like if there
would be a simple out of the box solution that covers 90% of the usecases.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;workspaces-and-features&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#workspaces-and-features&quot; aria-label=&quot;Anchor link for: workspaces-and-features&quot;&gt;#&lt;&#x2F;a&gt;
Workspaces and Features&lt;&#x2F;h1&gt;
&lt;p&gt;A bit related to CI is features. Lets start off by saying that I dislike having
feature flags in the first place. They are just a pain to work with, and a pain
to test, both locally and on CI. What I would like to see is official support
for something like &lt;code&gt;--feature-powerset&lt;&#x2F;code&gt; of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;taiki-e&#x2F;cargo-hack&quot;&gt;&lt;code&gt;cargo-hack&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Just make sure that
every permutation of features works.&lt;&#x2F;p&gt;
&lt;p&gt;I saw some time ago that cargo is working on something called
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;issues&#x2F;8088&quot;&gt;Features 2.0&lt;&#x2F;a&gt;, which I hope
will solve some of the pain points that I have. But so far I didn’t have the
time or motivation to actually read up on what the proposed changes there are.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Another thing that I mentioned in my earlier blog post was some quality of
life improvements related to workspaces. I think as a minimum, I would like to
see an atomic
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;issues&#x2F;1169&quot;&gt;&lt;code&gt;cargo publish --all&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and
maybe a tool to deal with versioning.
As an ex-JS developer, there were a ton of tools available, but unfortunately,
I was not really satisfied with any of them. I have the feeling that the Rust
community as a whole creates a lot more high-quality tools, and I am hopeful
that will also be the case here.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;in-closing&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#in-closing&quot; aria-label=&quot;Anchor link for: in-closing&quot;&gt;#&lt;&#x2F;a&gt;
In Closing&lt;&#x2F;h1&gt;
&lt;p&gt;I do feel Rust is headed in the right direction, but there is a lot of polishing
still to do. Not necessarily with the language itself, but with the tools and
ecosystem around it.
And its not really specific to Rust either. In a lot of ecosystems, I feel like
the tasks that are &lt;em&gt;not&lt;&#x2F;em&gt; coding related are often a lot more complex than they
need to be.
Rust, both as a language and as an ecosystem has proved that it can solve
complex problems in a nice and high quality way. I’m looking forward to seeing
these problems solved as well.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Documentation Driven Development</title>
        <published>2020-05-19T00:00:00+00:00</published>
        <updated>2020-05-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/doc-driven-development/"/>
        <id>https://swatinem.de/blog/doc-driven-development/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/doc-driven-development/">&lt;p&gt;I have been working on documenting a growing rust project, and ran into some papercuts along the way. Also, writing good
documentation is actually very hard and sometimes tedious work, but I think it is very much worth it.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;why-i-love-doctests&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#why-i-love-doctests&quot; aria-label=&quot;Anchor link for: why-i-love-doctests&quot;&gt;#&lt;&#x2F;a&gt;
Why I love Doctests&lt;&#x2F;h1&gt;
&lt;p&gt;I can’t really stress how important both testing, and documentation is! Testing makes sure that your project meets its
goals and certain quality criteria. And documentation makes sure that your potential users know how to effectively use
your project. Without documentation (and marketing), a project will struggle hard to grow its user base.&lt;&#x2F;p&gt;
&lt;p&gt;However, maintaining good documentation is really hard. And depending on the language ecosystem, it is too easy for your
code and documentation to drift apart and become broken &#x2F; outdated. That is one reason why I really love the concept of
doctests. On a high level, they are just example code snippets that you want to present to your users. But they also run
as part of your testsuite, just like any other tests. So they can’t drift apart. It is a really good way to give usage
examples of your API, and document corner cases all at the same time.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rusts-unique-position&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#rusts-unique-position&quot; aria-label=&quot;Anchor link for: rusts-unique-position&quot;&gt;#&lt;&#x2F;a&gt;
Rusts Unique Position&lt;&#x2F;h1&gt;
&lt;p&gt;Rust actually is in a very good position here. I originally come from the TypeScript ecosystem, and it is actually a
huge pain that TypeScript suffers a lot from the &lt;em&gt;“new day, new framework”&lt;&#x2F;em&gt; syndrome. There is way too much choice among
linters, build systems &#x2F; bundlers, testing frameworks, benchmark frameworks, and probably documentation tools, although
I haven’t really used any of those. It is quite tiring to wade through all the options. At least that ecosystem now has
a code formatter that everybody agrees on.&lt;&#x2F;p&gt;
&lt;p&gt;It is really refreshing that Rust is super opinionated in this regard. It ships with a default build system (which also
has workspace support), testing tool, a linter, a benchmarking tool (with support for custom frameworks) and a first
class documentation tool. You get all of this out of the box (or rather, via &lt;code&gt;rustup&lt;&#x2F;code&gt;) and don’t have to worry about any
of this. What a way to boost productivity!&lt;&#x2F;p&gt;
&lt;p&gt;Also, rusts tools are &lt;em&gt;really good&lt;&#x2F;em&gt;, even though they have some shortcomings as we will see.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;my-wishlist-for-better-tools&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#my-wishlist-for-better-tools&quot; aria-label=&quot;Anchor link for: my-wishlist-for-better-tools&quot;&gt;#&lt;&#x2F;a&gt;
My Wishlist for better Tools&lt;&#x2F;h1&gt;
&lt;p&gt;But unfortunately, testing and writing doctests is a bit painful right now. But as I see it, those obstacles should be
fairly straight forward to overcome. Here is just a short wishlist of things I would love to see in the Rust ecosystem
that would make my life a bit easier ;-)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;issues&#x2F;2832&quot;&gt;cargo#2832&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;issues&#x2F;4324&quot;&gt;cargo#4324&lt;&#x2F;a&gt;: In general, the output of &lt;code&gt;cargo test&lt;&#x2F;code&gt; is horrible. Especially if you have workspaces,
or a number of examples and integration tests. It is super hard to actually find failures, and the signal to noise
ratio is horrible. I would love if cargo had a better way to put tests into suites, and to better visualize those.&lt;&#x2F;p&gt;
&lt;p&gt;Related, it would be nice to better filter tests, and to re-run only previously failed tests.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;issues&#x2F;6424&quot;&gt;cargo#6424&lt;&#x2F;a&gt;: Apparently, &lt;code&gt;cargo check&lt;&#x2F;code&gt; does not check doctests? Oh well. I haven’t run into this so far, but its a
minor oversight.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-analyzer&#x2F;rust-analyzer&#x2F;issues&#x2F;4170&quot;&gt;rust-analyzer#4170&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-analyzer&#x2F;rust-analyzer&#x2F;issues&#x2F;571&quot;&gt;rust-analyzer#571&lt;&#x2F;a&gt;: My number one productivity win would probably come from being able to
write doctests just like any other code, with syntax highlighting and auto-completion and realtime linting.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rustfmt&#x2F;issues&#x2F;3348&quot;&gt;rustfmt#3348&lt;&#x2F;a&gt;: Similarly, code in doctests should be nicely formatted just like any other code.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;44732&quot;&gt;rust#44732&lt;&#x2F;a&gt;: Especially for crate-level or module-level documentation, I would very much prefer to write that in an
external markdown file. This would also solve all the problems with duplicated, nearly empty, or outdated README
files.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rustfmt&#x2F;issues&#x2F;2036&quot;&gt;rustfmt#2036&lt;&#x2F;a&gt;: A bit related to the point above, I would love to also have auto-formatting and re-wrapping for
markdown. I spend way too much time manually formatting my doc comments.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;43466&quot;&gt;rust#43466&lt;&#x2F;a&gt;: Another small quality of life issue which makes linking to other items easier and avoids the problems of
links going stale when moving or renaming items.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;45599&quot;&gt;rust#45599&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;67295&quot;&gt;rust#67295&lt;&#x2F;a&gt;: Its a bit broken right now how to use feature-flagged things in doctests. But I found a
workaround I explain in the next section.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;One pipedream would be to also have a kind of linter for doc comments. Things like length limits for captions,
enforcing formatting rules such as “end captions with a period”. A spell checker would also be nice ;-)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some of the mentioned issues are already implemented on nightly versions, and are just pending stabilization. Others are
quite big and complex, or seem to stuck in bikeshedding discussions. But one thing that actually sounds quite doable is
to have &lt;code&gt;rustfmt&lt;&#x2F;code&gt; format and re-wrap markdown. I might even look into this if I have too much free time on my hands, or
as something of a hackweek project.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;forcing-features-in-tests&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#forcing-features-in-tests&quot; aria-label=&quot;Anchor link for: forcing-features-in-tests&quot;&gt;#&lt;&#x2F;a&gt;
Forcing Features in Tests&lt;&#x2F;h1&gt;
&lt;p&gt;So the crate I am working on right now has quite some feature flags, and I would like to refer to those feature-flagged
items in my doctests. But that breaks the tests when run with &lt;code&gt;--no-default-features&lt;&#x2F;code&gt;, or in general if the features I
want to use are not default.&lt;&#x2F;p&gt;
&lt;p&gt;Also, you can’t &lt;code&gt;#[cfg(test)]&lt;&#x2F;code&gt; those items, since doctests won’t pick those up due to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;45599&quot;&gt;rust#45599&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;67295&quot;&gt;rust#67295&lt;&#x2F;a&gt;. But
I have found a rather nice workaround for that. Whereas Rust disallows normal dependency cycles. Defining circular
&lt;code&gt;dev-dependencies&lt;&#x2F;code&gt; actually works fine, which is quite magical. So you can just dev-depend on yourself, with certain
features. The same also works across circular workspace crates.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;package&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;doctests&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;0.1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;edition &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;2018&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;features&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;featured &lt;&#x2F;span&gt;&lt;span&gt;= []
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;dev-dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;doctests &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;featured&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F; ```
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F; doctests::featured();
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F;&#x2F; ```
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;doctest&lt;&#x2F;span&gt;&lt;span&gt;() {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(feature &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;featured&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;featured&lt;&#x2F;span&gt;&lt;span&gt;() {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;unittest&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;featured()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>PSA: Deactivate Windows Security for your Source Repository</title>
        <published>2020-04-17T00:00:00+00:00</published>
        <updated>2020-04-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/windows-security/"/>
        <id>https://swatinem.de/blog/windows-security/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/windows-security/">&lt;p&gt;I’m very happy that I have been moving to a somewhat large Rust project
recently ;-) And because of the COVID mandated home-office, I have started
doing a lot more development on my Desktop, which runs Windows for gaming
reasons.&lt;&#x2F;p&gt;
&lt;p&gt;Anyhow. So far I had no reason to complain about compile times, since my
(still, but not for long) oil cooled Ryzen has a lot of cores and power. But I
was noticing that quite a lot of annoying Windows Security notifications have
been popping up when doing compiles, or in general when &lt;code&gt;rust-analyzer&lt;&#x2F;code&gt; was
running in the background. I also noticed that for some reason, the CPU was
also not being utilized fully when doing builds.&lt;&#x2F;p&gt;
&lt;p&gt;So I began researching, and profiling. Running nightly cargo with &lt;code&gt;-Z timings&lt;&#x2F;code&gt;
revealed that especially custom build scripts were taking a very long time.
My research yielded
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;issues&#x2F;5028&quot;&gt;this cargo issue&lt;&#x2F;a&gt; which was
talking about windows defender. There is also an official windows
&lt;a href=&quot;https:&#x2F;&#x2F;support.microsoft.com&#x2F;en-us&#x2F;help&#x2F;4028485&#x2F;windows-10-add-an-exclusion-to-windows-security&quot;&gt;guide&lt;&#x2F;a&gt;
on how to disable windows security for a whole directory tree.&lt;&#x2F;p&gt;
&lt;p&gt;I just went ahead and tried doing that.
Disabling Windows Security for my whole coding directory improved my clean
&lt;code&gt;cargo test&lt;&#x2F;code&gt; times of &lt;code&gt;sentry-rust&lt;&#x2F;code&gt; from &lt;strong&gt;3m17s&lt;&#x2F;strong&gt; to &lt;strong&gt;1m22s&lt;&#x2F;strong&gt;. What a jaw
dropping difference. My compile times are cut by more than half &lt;strong&gt;!!!&lt;&#x2F;strong&gt;,
and the annoying notifications are gone as well.&lt;&#x2F;p&gt;
&lt;p&gt;So for anyone on Windows, go ahead and add a security exception, and save
yourself some headaches!&lt;&#x2F;p&gt;
&lt;p&gt;A word of caution though, as I advocate for &lt;em&gt;disabling&lt;&#x2F;em&gt; a security feature.
I think as developers, we are all a bit more cautious than regular people when
it comes to internet security. On the other hand, we download and run tons of
third party software from package archives all the time. And software supply
chain attacks are a real thing, should I remind everyone of the
&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;intrinsic&#x2F;compromised-npm-package-event-stream-d47d08605502&quot;&gt;&lt;code&gt;event-stream&lt;&#x2F;code&gt; fiasco&lt;&#x2F;a&gt;?
Nonetheless, I don’t think Windows Security would actually help in such a case,
so I doubt we are worse off disabling it.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Fear, the class keyword, you must not!</title>
        <published>2020-02-28T00:00:00+00:00</published>
        <updated>2020-02-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/moar-ts-optimization/"/>
        <id>https://swatinem.de/blog/moar-ts-optimization/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/moar-ts-optimization/">&lt;p&gt;So, my TypeScript patch that I wrote about previously was recently merged.
This gave me quite some motivation to start up the profiler again, and look
for some more wins.&lt;&#x2F;p&gt;
&lt;p&gt;Being able to memory profile JS can be considered a dark art sometimes, as even
the TS team recognized in their
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;TypeScript&#x2F;issues&#x2F;36948&quot;&gt;current half-year roadmap&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;much of what we discovered was also that profiling memory allocations in
JavaScript applications is really hard. Infrastructure seems lacking in this
area (e.g. figuring out what is being allocated too much), and much of our
work may reside in learning about more tools&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So I want to take this chance to highlight how I discovered another easy
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;TypeScript&#x2F;pull&#x2F;36845&quot;&gt;~2% win&lt;&#x2F;a&gt; just by looking
at the memory profile and squinting really hard.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;assumptions&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#assumptions&quot; aria-label=&quot;Anchor link for: assumptions&quot;&gt;#&lt;&#x2F;a&gt;
Assumptions&lt;&#x2F;h1&gt;
&lt;p&gt;Most memory optimizations I did were the result of an informed guess, based on
some assumptions. Followed by experiments to see if my guess was right or not.&lt;&#x2F;p&gt;
&lt;p&gt;That being said, these things are not an exact science, and they might work
very differently on all the different js engines.
But I will be focusing on node&#x2F;v8 here, since I would guess that is the &amp;gt;95%
case of how typescript is used.&lt;&#x2F;p&gt;
&lt;p&gt;The main thing that I focus on here is a few things that I learned by watching
recorded talks about v8 performance:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;v8 can &lt;em&gt;inline&lt;&#x2F;em&gt; properties of objects&lt;&#x2F;li&gt;
&lt;li&gt;inlined properties are &lt;em&gt;good&lt;&#x2F;em&gt; for performance, and also memory usage&lt;&#x2F;li&gt;
&lt;li&gt;v8 learns what to inline by observing your code&lt;&#x2F;li&gt;
&lt;li&gt;adding the same properties, with the same types in the same order, as early
as possible is &lt;em&gt;good&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;slapping on random properties in random order is &lt;em&gt;bad&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;v8 will try to group objects together based on their &lt;em&gt;constructor function&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;analysing-a-memory-profile&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#analysing-a-memory-profile&quot; aria-label=&quot;Anchor link for: analysing-a-memory-profile&quot;&gt;#&lt;&#x2F;a&gt;
Analysing a Memory Profile&lt;&#x2F;h1&gt;
&lt;p&gt;So I just opened up a memory profile and started looking for anything that
popped into my eyes. Here is what I saw:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;moar-ts-optimization&#x2F;before.png&quot; alt=&quot;Memory Profile Before&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;There is a really large Array, which has a &lt;em&gt;retained size&lt;&#x2F;em&gt; of &lt;em&gt;24M&lt;&#x2F;em&gt;, which
means garbage collecting it would transitively free up 8% of the memory usage (?)&lt;&#x2F;li&gt;
&lt;li&gt;That Array is assigned to a variable called &lt;code&gt;nodeLinks&lt;&#x2F;code&gt; somewhere&lt;&#x2F;li&gt;
&lt;li&gt;Its elements are all anonymous &lt;code&gt;Object&lt;&#x2F;code&gt;s, so they don’t have a dedicated
constructor.&lt;&#x2F;li&gt;
&lt;li&gt;Each one of those is &lt;em&gt;32 bytes&lt;&#x2F;em&gt;, which is &lt;code&gt;4 * 8&lt;&#x2F;code&gt;, so apart from the v8
internal special properties &lt;code&gt;map&lt;&#x2F;code&gt;, &lt;code&gt;properties&lt;&#x2F;code&gt; and &lt;code&gt;elements&lt;&#x2F;code&gt;, it has just
one inlined property.&lt;&#x2F;li&gt;
&lt;li&gt;Expanding &lt;code&gt;map.descriptors&lt;&#x2F;code&gt; shows us the property descriptors. I didn’t know
that one before. We can also see that different objects have different
properties on them.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Now comes a wild speculation on my part, which turned out to be correct in
the end: What if, instead of having anonymous objects, we actually create a
dedicated constructor function? Will that help v8 to make better inlining
decisions?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;optimizing-the-code&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#optimizing-the-code&quot; aria-label=&quot;Anchor link for: optimizing-the-code&quot;&gt;#&lt;&#x2F;a&gt;
Optimizing the Code&lt;&#x2F;h1&gt;
&lt;p&gt;So I started looking at the TS codebase, searching for this &lt;code&gt;nodeLinks&lt;&#x2F;code&gt; variable.&lt;&#x2F;p&gt;
&lt;p&gt;The variable comes from &lt;code&gt;checker.ts&lt;&#x2F;code&gt;, which is too large for github to
display so I can’t permalink it, but here it is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; definition:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;nodeLinks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;NodeLinks&lt;&#x2F;span&gt;&lt;span&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; usage:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getNodeLinks&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;NodeLinks &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;nodeId &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getNodeId&lt;&#x2F;span&gt;&lt;span&gt;(node)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;nodeLinks[nodeId] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;(nodeLinks[nodeId] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;NodeLinks&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You might also want to look at the definition of
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;TypeScript&#x2F;blob&#x2F;f883bf3acbb207dfa1dc134738abcf565f14a835&#x2F;src&#x2F;compiler&#x2F;types.ts#L4250-L4277&quot;&gt;&lt;code&gt;NodeLinks&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;NodeLinks&lt;&#x2F;code&gt; interface defines &lt;strong&gt;26&lt;&#x2F;strong&gt; properties, of which only &lt;code&gt;flags&lt;&#x2F;code&gt; and
&lt;code&gt;jsxFlags&lt;&#x2F;code&gt; are mandatory, and btw &lt;code&gt;jsxFlags&lt;&#x2F;code&gt; is not defined in the the
&lt;code&gt;getNodeLinks&lt;&#x2F;code&gt; function, so there is null-unsafety right there!&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, lets create a quick constructor function for all the NodeLinks, call
it with &lt;code&gt;new&lt;&#x2F;code&gt; and see if it helped v8 better optimize the object allocations.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;verifying-the-optimization&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#verifying-the-optimization&quot; aria-label=&quot;Anchor link for: verifying-the-optimization&quot;&gt;#&lt;&#x2F;a&gt;
Verifying the Optimization&lt;&#x2F;h1&gt;
&lt;p&gt;Since optimizing these cases is actually a lot of guesswork and shots in the
dark, it is very important to also check what the results of the code changes
are. So lets take a look:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;moar-ts-optimization&#x2F;after.png&quot; alt=&quot;Memory Profile After&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;We now have a new group for all the &lt;code&gt;NodeLinks&lt;&#x2F;code&gt;, and we have &lt;em&gt;~277k&lt;&#x2F;em&gt;
of those, quite a lot actually.&lt;&#x2F;li&gt;
&lt;li&gt;Each one of them is &lt;em&gt;48 bytes&lt;&#x2F;em&gt;, which is &lt;code&gt;6 * 8&lt;&#x2F;code&gt;, so we can have &lt;em&gt;3&lt;&#x2F;em&gt; inlined
properties. On a side note, the whole &lt;code&gt;nodeLinks&lt;&#x2F;code&gt; Array now has a retained
size of &lt;em&gt;17M&lt;&#x2F;em&gt;, vs the &lt;em&gt;24M&lt;&#x2F;em&gt; from before.&lt;&#x2F;li&gt;
&lt;li&gt;Some smaller variants use only inline properties. BTW, the &lt;code&gt;flags&lt;&#x2F;code&gt; prop is
not listed here, I &lt;em&gt;think&lt;&#x2F;em&gt; because it is an integer type, and not a pointer
type.&lt;&#x2F;li&gt;
&lt;li&gt;Some larger variants still have external &lt;code&gt;properties&lt;&#x2F;code&gt; which are bad for both
performance and memory usage.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;So from this quick look we can see that we were successful. The memory usage
has dropped by a bit, and we how have all the &lt;code&gt;NodeLinks&lt;&#x2F;code&gt; grouped together,
and at least half of them have all of their properties inlined, without the
need for an external &lt;code&gt;properties&lt;&#x2F;code&gt; hashtable.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-typescript-codebase&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-typescript-codebase&quot; aria-label=&quot;Anchor link for: the-typescript-codebase&quot;&gt;#&lt;&#x2F;a&gt;
The TypeScript Codebase&lt;&#x2F;h1&gt;
&lt;p&gt;However, just by looking at the definition of &lt;code&gt;NodeLinks&lt;&#x2F;code&gt;, and at the memory
profile, we can clearly see that there is probably no object that has &lt;em&gt;all&lt;&#x2F;em&gt; the
26 properties it could potentially have, but that they could most likely be
grouped into separate types.
I do see this general code pattern a lot in the TS codebase, the &lt;code&gt;Node&lt;&#x2F;code&gt;
interface that I was previously looking at was another case.
The TS codebase defines a &lt;em&gt;very broad&lt;&#x2F;em&gt; interface type, with tons of optional
properties. Then is uses explicit and apparently very unsafe casts all around
the codebase, and adds properties some time later, in a probably arbitrary
order. Exactly the things you should not do, both from a v8 optimization
standpoint, and a general type-safety standpoint.&lt;&#x2F;p&gt;
&lt;p&gt;Well there is probably a reason for it. The TypeScript codebase is ancient.
I think it has been self-hosting since the very beginning? but it only had
proper union types and &lt;code&gt;strictNullChecks&lt;&#x2F;code&gt; since &lt;em&gt;2.0&lt;&#x2F;em&gt;, and
&lt;code&gt;strictPropertyInitialization&lt;&#x2F;code&gt; since &lt;em&gt;2.7&lt;&#x2F;em&gt;. Also, engines did not have native
&lt;code&gt;class&lt;&#x2F;code&gt; support back then.&lt;&#x2F;p&gt;
&lt;p&gt;So from my perspective, there is quite some technical debt to be paid! I would
very much suggest to embrace union types of native &lt;code&gt;class&lt;&#x2F;code&gt;es with initialized
properties in the codebase.
Or as Yoda would say:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fear, the class keyword, you must not!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In my opinion, it would help engines to better optimize the code, it would
help type safety, and it would also help onboarding new contributors.&lt;&#x2F;p&gt;
&lt;p&gt;Well so long, hope this has helped some people better understand the
memory optimization tools, and how to approach such problems.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rewrite it in Rust</title>
        <published>2020-02-20T00:00:00+00:00</published>
        <updated>2020-02-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/rewrite-in-rust/"/>
        <id>https://swatinem.de/blog/rewrite-in-rust/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/rewrite-in-rust/">&lt;p&gt;Early this year, I managed to mostly move away from JS development into native
code, which in my case means a lot of C&#x2F;C++, as well as Rust, hopefully more
of that in the future.&lt;&#x2F;p&gt;
&lt;p&gt;Most of what I will write about comes from my experience with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;sentry-native&quot;&gt;sentry-native&lt;&#x2F;a&gt;,
which will soon release a rewritten version in C. That being said, all of the
opinions in this post are my own.&lt;&#x2F;p&gt;
&lt;p&gt;I also want to start this with a quote from &lt;em&gt;Bruce Lee&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If I tell you I&#x27;m good, probably you will say I&#x27;m boasting. But if I tell you I&#x27;m not good, you&#x27;ll know I&#x27;m lying.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;imposter-syndrome&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#imposter-syndrome&quot; aria-label=&quot;Anchor link for: imposter-syndrome&quot;&gt;#&lt;&#x2F;a&gt;
Imposter Syndrome&lt;&#x2F;h1&gt;
&lt;p&gt;While it has been quite some time since I have actively dealt with C code, I
can up to speed with anything you can throw at me pretty quickly.&lt;&#x2F;p&gt;
&lt;p&gt;I do make quite good progress with my work on &lt;code&gt;sentry-native&lt;&#x2F;code&gt;; my code compiles,
runs and passes tests. But for some reason, I don’t really feel confident in it.
I’m not really sure if the things that I do are really correct, or if it is just
luck that it works. And I constantly have the feeling that I must be missing
something, or that things will probably blow up at some point later.&lt;&#x2F;p&gt;
&lt;p&gt;This is just in my mind though, and a classic example of &lt;em&gt;imposter syndrome&lt;&#x2F;em&gt;.
And surprisingly, I don’t have this when writing Rust. Writing Rust code
really &lt;em&gt;empowers&lt;&#x2F;em&gt; me, in the literal sense that I feel &lt;em&gt;powerful and confident&lt;&#x2F;em&gt;
when writing Rust code. I have the feeling that whatever I do is &lt;em&gt;correct&lt;&#x2F;em&gt;.
Quite remarkable actually.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;distractions-and-explicitness&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#distractions-and-explicitness&quot; aria-label=&quot;Anchor link for: distractions-and-explicitness&quot;&gt;#&lt;&#x2F;a&gt;
Distractions and Explicitness&lt;&#x2F;h1&gt;
&lt;p&gt;One reason that I don’t feel very productive with C is that there is a lot of
boilerplate and ceremony around almost everything.&lt;&#x2F;p&gt;
&lt;p&gt;Dealing with allocations, strings, iterables and generics is very tedious.
I sometimes have the feeling that I don’t even see the &lt;em&gt;real&lt;&#x2F;em&gt; application logic
because it is so obfuscated and drowns among all the &lt;code&gt;malloc&lt;&#x2F;code&gt;s, &lt;code&gt;NULL&lt;&#x2F;code&gt;-checks,
manual copying and pointer-chasing.&lt;&#x2F;p&gt;
&lt;p&gt;One of the big distractions is checking for &lt;code&gt;NULL&lt;&#x2F;code&gt; all the time. There is two
issues with this. One is that obviously, these checks do come with a runtime
cost.&lt;&#x2F;p&gt;
&lt;p&gt;The other one is about explicitness. Is returning &lt;code&gt;NULL&lt;&#x2F;code&gt; part of the API
contract, like &lt;code&gt;Option&lt;&#x2F;code&gt; in Rust? Does it actually &lt;em&gt;mean something&lt;&#x2F;em&gt;?
Or is it just cargo-culted boilerplate that people copy-paste, because its
what everyone else is doing?&lt;&#x2F;p&gt;
&lt;p&gt;I actually had to deal with a bug where &lt;code&gt;NULL&lt;&#x2F;code&gt; had special meaning.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;infallible-allocation&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#infallible-allocation&quot; aria-label=&quot;Anchor link for: infallible-allocation&quot;&gt;#&lt;&#x2F;a&gt;
Infallible allocation&lt;&#x2F;h1&gt;
&lt;p&gt;Most of the checks however are just unnecessary boilerplate in my opinion. And
this boilerplate multiplies btw.
Say you have &lt;em&gt;3&lt;&#x2F;em&gt; allocations in a functions. When you assume that they can fail,
you would have to make sure to &lt;code&gt;free&lt;&#x2F;code&gt; the ones &lt;em&gt;before&lt;&#x2F;em&gt; the failing one, right?&lt;&#x2F;p&gt;
&lt;p&gt;And what do you want to do anyway? Just return &lt;code&gt;NULL&lt;&#x2F;code&gt; from your function?
What if the function has a different return function? Will it silently fail?
Can you actually recover from a possible allocation failure? Your program needs
memory to do its job. If it doesn’t, it can’t do its job, and it might be the
best idea to just crash hard.&lt;&#x2F;p&gt;
&lt;p&gt;The other question is, will you ever get a &lt;code&gt;NULL&lt;&#x2F;code&gt; from &lt;code&gt;malloc&lt;&#x2F;code&gt; anyway? I have
read some quite good blog posts about this topic in the past, but don’t have
any links handy.&lt;&#x2F;p&gt;
&lt;p&gt;In any case. Nowadays, most software you run will be 64-bit, which means that
virtual adress space is practically unlimited. And most systems, even
smartphones have a lot of physical memory. A lot more than a typical program
should allocate. If it does, it is very likely that it has some leaks anyway.&lt;&#x2F;p&gt;
&lt;p&gt;And it is not only about your own program. It is kind of the behavior of the OS.
Some time ago, there was &lt;a href=&quot;https:&#x2F;&#x2F;lkml.org&#x2F;lkml&#x2F;2019&#x2F;8&#x2F;4&#x2F;15&quot;&gt;post&lt;&#x2F;a&gt; about linux
behaving horribly under low memory conditions, which I have also experienced
some time.
Your system will &lt;strong&gt;stall hard&lt;&#x2F;strong&gt;, up to the point of requiring you to
power-cycle, long before your programm will get a &lt;code&gt;NULL&lt;&#x2F;code&gt; from &lt;code&gt;malloc&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There has really been said enough about this, but C developers still cargo-cult
these &lt;code&gt;NULL&lt;&#x2F;code&gt;-checks everywhere.
Rust allocations are infallible. If they &lt;em&gt;do&lt;&#x2F;em&gt; fail, I think it raises a &lt;code&gt;panic&lt;&#x2F;code&gt;,
which you can decide to recover from, or not. Anyway, from a developer point of
view, the code looks a lot cleaner! You can actually start to see the business
logic underneath all the boilerplate.&lt;&#x2F;p&gt;
&lt;p&gt;Oh, and the use of &lt;code&gt;Option&lt;&#x2F;code&gt; makes intentions very clear, which brings me to the
next point.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;documentation&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#documentation&quot; aria-label=&quot;Anchor link for: documentation&quot;&gt;#&lt;&#x2F;a&gt;
Documentation&lt;&#x2F;h1&gt;
&lt;p&gt;This has been praised a lot, and for good reason. The Rust documentation is
excellent! The format is awesome, and most of the docs have examples, which
thanks to doctests will also never be out of sync.
When looking for C docs, there are a ton of different websites, and most of them
are just horrible.&lt;&#x2F;p&gt;
&lt;p&gt;Rustdoc itself is awesome, but the whole
&lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;learn&quot;&gt;spectrum of rust documentation&lt;&#x2F;a&gt; is a delight!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ownership-and-mutability&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#ownership-and-mutability&quot; aria-label=&quot;Anchor link for: ownership-and-mutability&quot;&gt;#&lt;&#x2F;a&gt;
Ownership and Mutability&lt;&#x2F;h1&gt;
&lt;p&gt;Speaking of Documentation and Memory-management.&lt;&#x2F;p&gt;
&lt;p&gt;The ownership model of Rust actually makes so much sense! Working with C code,
I often don’t know who is responsible for freeing some memory. And I would
guess that there is a lot of unnecessary copying going on because of that. And
not to mention memory leaks. Sure, you can also leak memory in Rust, but its
a lot harder!&lt;&#x2F;p&gt;
&lt;p&gt;One kind-of way to guess this in C is the &lt;code&gt;const&lt;&#x2F;code&gt; keyword. If a function returns
something &lt;code&gt;const&lt;&#x2F;code&gt;, it usually means that ownership is not transfered. But the
other way around, ownership and mutability is something completely different.
Maybe I return something that is &lt;em&gt;mutable&lt;&#x2F;em&gt;, but must not be freed!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;strings&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#strings&quot; aria-label=&quot;Anchor link for: strings&quot;&gt;#&lt;&#x2F;a&gt;
Strings&lt;&#x2F;h1&gt;
&lt;p&gt;Another thing that deserves a lot of praise is the Rust &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; type, which
really is just a &lt;code&gt;&amp;amp;[u8]&lt;&#x2F;code&gt; slice, which is guaranteed to be valid utf8, which is
a really awesome guarantee to have! For interfacing with the OS, there is
&lt;code&gt;OsStr&lt;&#x2F;code&gt;, with appropriate conversion functions. I had to touch a bit of
OS-specific string code in C recently, and it was horrible.&lt;&#x2F;p&gt;
&lt;p&gt;But the real power actually lies in the way that strings in Rust are
represented as slices, as a pair of &lt;code&gt;(pointer, length)&lt;&#x2F;code&gt;, whereas strings in
C need to be &lt;code&gt;\0&lt;&#x2F;code&gt; terminated. This makes Rust strings &lt;em&gt;a lot&lt;&#x2F;em&gt; more efficient.&lt;&#x2F;p&gt;
&lt;p&gt;In Rust, you can trivially get a sub-slice of the string, whereas in C, you
have to copy the sub-slice, and &lt;code&gt;\0&lt;&#x2F;code&gt;-terminate it.
To actually make a copy, you will also need the length of the string, which is
a &lt;code&gt;O(N)&lt;&#x2F;code&gt; operation in C, but &lt;code&gt;O(1)&lt;&#x2F;code&gt; in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;Apart from this, the &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; API of Rust is &lt;em&gt;very&lt;&#x2F;em&gt; rich! I miss &lt;code&gt;.lines()&lt;&#x2F;code&gt; and
&lt;code&gt;.ends_with()&lt;&#x2F;code&gt; so much!&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand, I also made the experience that Rust strings are not as easy
to deal with than for example JS. But now I think that maybe the way that I
index into, and slice my JS strings is actually unsafe, considering unicode
outside the ASCII range.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;api-and-abi&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#api-and-abi&quot; aria-label=&quot;Anchor link for: api-and-abi&quot;&gt;#&lt;&#x2F;a&gt;
API and ABI&lt;&#x2F;h1&gt;
&lt;p&gt;Now that I have touched a bit on both memory allocation, and having to copy
a lot when working with C, one way Rust avoids this is by better dealing with
&lt;em&gt;value-types&lt;&#x2F;em&gt; and &lt;em&gt;reference-types&lt;&#x2F;em&gt;. In Rust, you can more easily return
structs from functions, and move them into functions via arguments. Those will
live on the stack and don’t require allocation, which makes it more efficient
than in C. Most of the time though you will deal with references, as in C. And
from a coding perspective, there is no difference, whereas in C, you will have
to learn the difference between &lt;code&gt;-&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;.&lt;&#x2F;code&gt;, which makes refactoring more
annoying in some places.
One of the reasons C has to allocate and return pointers in a lot of places is
that there is no other way to make a struct &lt;em&gt;opaque&lt;&#x2F;em&gt;, hiding its members, and
also making it extensible.
In C, you can either expose your structs, making them public API and requiring
breaking changes when touching them, or you use opaque pointers, which require
allocation.&lt;&#x2F;p&gt;
&lt;p&gt;Rust decouples API and ABI, and really Rust has no stable ABI at all. This means
that you can hide details of a struct, change its size without requiring major
version bumps, and still have the advantages of stack allocation.&lt;&#x2F;p&gt;
&lt;p&gt;Speaking of stack allocation. I actually ran into uninitialized memory issues
with structs on the stack already a couple of times. Very annoying, and for
some reason, the compiler didn’t warn me of those.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;generics-and-traits&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#generics-and-traits&quot; aria-label=&quot;Anchor link for: generics-and-traits&quot;&gt;#&lt;&#x2F;a&gt;
Generics and Traits&lt;&#x2F;h1&gt;
&lt;p&gt;Another thing that came to my mind is that Rusts Traits, Iterators and Generics
make it super easy to deal with streaming data, which can further improve
performance, and avoid a ton of intermediate allocations.&lt;&#x2F;p&gt;
&lt;p&gt;I am actually considering to re-implement something like &lt;code&gt;Write&lt;&#x2F;code&gt; in C, which
would abstract away serializing data either into an in-memory buffer, onto disk,
or right onto the network, without having to allocate a lot of intermediate
buffers. But I already know that the C-version can never be as fast as Rust, as
it would likely involve dynamic function calls, whereas Rust can just
specialize and inline everything.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;dependency-management&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#dependency-management&quot; aria-label=&quot;Anchor link for: dependency-management&quot;&gt;#&lt;&#x2F;a&gt;
Dependency Management&lt;&#x2F;h1&gt;
&lt;p&gt;A bit related to ABI is also the question of &lt;em&gt;static&lt;&#x2F;em&gt; vs &lt;em&gt;dynamic&lt;&#x2F;em&gt; linking.
Rust does not really do dynamic linking (or does it?)&lt;&#x2F;p&gt;
&lt;p&gt;There are some technical differences between static and dynamic linking. Dynamic
linking can better namespace things, and also share both memory, and disk space
among programs. But seriously, in a world where our phones run Java, our
Desktops run JavaScript, and the Cloud does heavy sandboxing and
containerization, we are way past caring about memory usage.&lt;&#x2F;p&gt;
&lt;p&gt;Static linking has some performance advantages, with link-time-optimization and
dead-code-elimination. And Rust has a good story on symbol mangling, avoiding
some of the pitfalls of static linking. And since it has no stable ABI anyway,
it pretty much can’t do dynamic linking anyway.&lt;&#x2F;p&gt;
&lt;p&gt;Anyhow, I recently asked colleagues about this, before I realized that I wanted
their opinion on something completely different. I was actually refering to
vendoring dependencies vs relying on OS provided libraries.&lt;&#x2F;p&gt;
&lt;p&gt;One of the only times I had problems compiling an older (unmaintained) rust
app was because of &lt;code&gt;openssl-sys&lt;&#x2F;code&gt;, which was trying to compile and link against
my OS provided version. Which got out of sync, prevented the already compiled
version of my app from starting, and made it impossible for me to actually
re-compile.&lt;&#x2F;p&gt;
&lt;p&gt;This is not a new problem either. There is a lot of talk about vendoring
dependencies. That way you are independent of the libraries and the versions
thereof, that your OS provides.
As always, there are tradeoffs. It might be a good idea that the Distribution
can update system libraries, to patch vulnerabilities, in case you don’t update
your own vendored version. On the other hand, this limits the version of a
library you can use, and also requiring your users to have that certain
library installed in the first place.&lt;&#x2F;p&gt;
&lt;p&gt;Having to deal with such things in C again is a real throwback, and I would
love to just be able to consume whatever version of a dependency that I want,
and have it statically link and just work, no matter where I copy my resulting
binary. This is true portability and &lt;em&gt;“run everywhere”&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;building&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#building&quot; aria-label=&quot;Anchor link for: building&quot;&gt;#&lt;&#x2F;a&gt;
Building&lt;&#x2F;h1&gt;
&lt;p&gt;Speaking of portability and dependencies. Rust has a really awesome story around
cross compilation. And the way it does &lt;code&gt;feature&lt;&#x2F;code&gt;-flags and platform specific
conditional code is awesome! This is just so much better than having tons of
inconsistent, platform and compiler specific define flags.&lt;&#x2F;p&gt;
&lt;p&gt;Oh, and it has a standard module system! And &lt;code&gt;cargo&lt;&#x2F;code&gt;!!!&lt;&#x2F;p&gt;
&lt;p&gt;Having dealt with &lt;code&gt;CMake&lt;&#x2F;code&gt; for the past week, I really can’t understand how it
has ever gained such popularity. The configuration syntax is horrific!
It is case-insensitive, functions have space separated, optional and variadic
arguments. Strings don’t need to be quoted unless you want to use certain
special chars (which ones?). And there is no clear distinction between plain
strings, and lists, at least not that I can tell. It has a global namespace of
artifacts, with frequent name clashes, and it is absolutely not obvious to me
how variables are scoped when you are dealing with multiple files. But at least
I have figured out that it is a good idea to set target-specific flags. Which
is not really obvious in the first place. Oh, and have I mentioned that the
documentation is also horrible.&lt;&#x2F;p&gt;
&lt;p&gt;How to best consume and integrate with external (vendored) dependencies is also
absolutely not obvious.&lt;&#x2F;p&gt;
&lt;p&gt;Since I had to look at build systems again, I want to quote from the
&lt;a href=&quot;https:&#x2F;&#x2F;mesonbuild.com&#x2F;&quot;&gt;meson docs&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;every moment a developer spends writing or debugging build definitions is a
second wasted.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I am so happy that Rust has &lt;code&gt;cargo&lt;&#x2F;code&gt; and &lt;code&gt;crates&lt;&#x2F;code&gt;. It is so refreshing to work
with! Things just work as they should, and as you would expect them to.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-paradox-of-choice&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-paradox-of-choice&quot; aria-label=&quot;Anchor link for: the-paradox-of-choice&quot;&gt;#&lt;&#x2F;a&gt;
The paradox of choice&lt;&#x2F;h1&gt;
&lt;p&gt;Building C code is very much non-trivial, which explains the plethora of tools
that exist out there. Not to mention that almost every project I know of has
its own way of building, its own way of dealing with feature flags, etc.&lt;&#x2F;p&gt;
&lt;p&gt;While choice and competition are certainly a good thing to have, and to allow.
Too much can lead to fragmentation, and is quite frankly overwhelming.&lt;&#x2F;p&gt;
&lt;p&gt;Rust on the other hand has one &lt;em&gt;clear and obvious&lt;&#x2F;em&gt; way of doing things. But it
still offers the possibility to extend this if necessary.&lt;&#x2F;p&gt;
&lt;p&gt;Rust has one way of building things. It has one way of configuring your builds.
It has one way of documenting things. It has one way of doing testing. Of
doing benchmarks. Etc, etc.&lt;&#x2F;p&gt;
&lt;p&gt;And these are very &lt;em&gt;good&lt;&#x2F;em&gt; choices as well. IMO, it is not the case of Rust being
too young to have fragmented. I have the impression that the things just work.&lt;&#x2F;p&gt;
&lt;p&gt;Less time spent dealing with all that, more time to actually getting stuff done.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;onboarding-and-confidence&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#onboarding-and-confidence&quot; aria-label=&quot;Anchor link for: onboarding-and-confidence&quot;&gt;#&lt;&#x2F;a&gt;
Onboarding and Confidence&lt;&#x2F;h1&gt;
&lt;p&gt;Coming full circle to the beginning. One thing that people criticize about Rust
is its learning curve. Well yes, Rust takes some time to learn. But I think
that investment provides a great return. As I said in my #rust2020 post, I do
think learning Rust makes you a better developer. And most of the time, when
there is no obvious easy solution to a problem, Rust kind-of leads the way to
a better and more correct solution. Hard things are still hard.&lt;&#x2F;p&gt;
&lt;p&gt;But once you have learned Rust, it is so much easier to get started and
anboarded to a bigger project, and feel productive very quickly. This is
important!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;In my short time being a C developer again, I have seen already seen logic
errors, threading problems, memory unsafety problems, and just plain
inefficient code, which could all have been avoided by using Rust. And some of
that code has been written by engineers far better than me. So much for the
argument that smart engineers don’t make mistakes.&lt;&#x2F;p&gt;
&lt;p&gt;And yes, I would love to rewrite everything is Rust, &lt;em&gt;just because&lt;&#x2F;em&gt;!
I am also very much in favor of a completely
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;issues&#x2F;2610&quot;&gt;&lt;code&gt;libc&lt;&#x2F;code&gt;-free Rust&lt;&#x2F;a&gt;!
Where we have completely self-contained binaries which do their own syscalls
with their only dependency being a specific kernel version. I have too little
knowledge about how this would look like on other platforms than linux, tbh.
This could be a true &lt;em&gt;cross-compile once, run everywhere&lt;&#x2F;em&gt; language.&lt;&#x2F;p&gt;
&lt;p&gt;Especially this cross-compiling, and the good things that I have heard about
&lt;code&gt;cbindgen&lt;&#x2F;code&gt; make me wish that I could just ship pre-built static and dynamic
libraries for all the platforms for users who don’t want to deal with compiling
rust themselves, instead of having to deal with building C on all kinds of
systems and compilers.&lt;&#x2F;p&gt;
&lt;p&gt;There is just so many good things to say about Rust! I didn’t even mention
things like enums, pattern-matching and the fact that it has integer types that
make sense (what is an &lt;code&gt;unsigned long long int&lt;&#x2F;code&gt; anyway?)!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Improving your JS Tooling</title>
        <published>2020-02-06T00:00:00+00:00</published>
        <updated>2020-02-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/js-tooling/"/>
        <id>https://swatinem.de/blog/js-tooling/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/js-tooling/">&lt;p&gt;So, I have recently given a talk at the local [viennajs] meetup, which was a
huge success apparently. I was basically talking about and live demoing my
improvements to the &lt;code&gt;tsc&lt;&#x2F;code&gt; compiler which I wrote about
&lt;a href=&quot;..&#x2F;optimizing-tsc&quot;&gt;on my blog already&lt;&#x2F;a&gt;.
(Side note: the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;TypeScript&#x2F;pull&#x2F;33431&quot;&gt;PR&lt;&#x2F;a&gt; is still
not merged &lt;em&gt;sigh&lt;&#x2F;em&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;Anyway. Following my talk, &lt;a href=&quot;https:&#x2F;&#x2F;www.michaelbromley.co.uk&#x2F;&quot;&gt;Michael Bromley&lt;&#x2F;a&gt;
of &lt;a href=&quot;https:&#x2F;&#x2F;www.vendure.io&#x2F;&quot;&gt;vendure.io&lt;&#x2F;a&gt; actually went ahead and tried some of
my suggestions on his codebase, achieving
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;michlbrmly&#x2F;status&#x2F;1222920727172669446&quot;&gt;massive wins&lt;&#x2F;a&gt;!
BTW, this is the best feedback anyone can give me! To see that I can have this
positive effect on people and their projects makes me super happy :-)&lt;&#x2F;p&gt;
&lt;p&gt;I have then gone ahead and looked in more detail into their testing setup and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vendure-ecommerce&#x2F;vendure&#x2F;commit&#x2F;3ebf6de1498b7ce887bd65def9a8dd18df44fc55#r37050063&quot;&gt;suggested further improvements&lt;&#x2F;a&gt;,
which have also propagated to
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getsentry&#x2F;sentry&#x2F;pull&#x2F;16837&quot;&gt;other projects&lt;&#x2F;a&gt;.
(As a side note, both Priscila and me have recently started at Sentry ;-)&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So in writing this post, I want to give more details and explanations on why
such simple things can have such profound impact, and also give further
suggestions on how to speed things up.
Because, to be honest, I am quite surprised how people can just put up with their
workflows being so slow.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;explaining-skiplibcheck&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#explaining-skiplibcheck&quot; aria-label=&quot;Anchor link for: explaining-skiplibcheck&quot;&gt;#&lt;&#x2F;a&gt;
Explaining &lt;code&gt;skipLibCheck&lt;&#x2F;code&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;The massive improvements mentioned above more or less boil down to using
&lt;code&gt;skipLibCheck&lt;&#x2F;code&gt;. To understand why, we need to understand how typescript treats
the files it loads.
There are basically 4 groups of files,
here is an excerpt from &lt;code&gt;tsc --listFiles&lt;&#x2F;code&gt; when run on my own &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Swatinem&#x2F;rollup-plugin-dts&quot;&gt;rollup-plugin-dts&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;.&#x2F;node_modules&#x2F;typescript&#x2F;lib&#x2F;lib.es2020.d.ts&lt;&#x2F;code&gt;:
This and all other files in this directory are the type definitions of the
JS built in types themselves. You can select the javascript edition you want
&lt;em&gt;write your project in&lt;&#x2F;em&gt; via the &lt;code&gt;tsconfig&#x2F;lib&lt;&#x2F;code&gt; setting.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.&#x2F;node_modules&#x2F;rollup&#x2F;dist&#x2F;rollup.d.ts&lt;&#x2F;code&gt;:
This is an example of the type definitions of an external library. &lt;code&gt;rollup&lt;&#x2F;code&gt;
ships with its own type definitions, but very often, you will consume
definitions via &lt;code&gt;@types&#x2F;XXX&lt;&#x2F;code&gt;, for example &lt;code&gt;@types&#x2F;node&lt;&#x2F;code&gt;, which you will very
likely use.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.&#x2F;.build&#x2F;index.d.ts&lt;&#x2F;code&gt;:
You might also author &lt;code&gt;.d.ts&lt;&#x2F;code&gt; definition files manually, for example if you
want to type external libraries that do not have any type definitions. Or if
you want to augment global types, and for various reasons.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.&#x2F;src&#x2F;index.ts&lt;&#x2F;code&gt;:
Well these are your source files. Nuff Said.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Now, typescript comes with two confusingly named settings, &lt;code&gt;skipDefaultLibCheck&lt;&#x2F;code&gt;
and &lt;code&gt;skipLibCheck&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;By default, typescript will parse, and typecheck &lt;strong&gt;all&lt;&#x2F;strong&gt; of the files. When
using &lt;code&gt;skipDefaultLibCheck&lt;&#x2F;code&gt;, it will only parse, but not typecheck files from
category 1, the type definitions that are bundled with typescript itself. In
99.99% of the cases, you would want to use this setting in your project, since
you will never ever touch those files yourself, or ever mess with definitions of
js builtins. The typescript team is even
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;TypeScript&#x2F;issues&#x2F;25658&quot;&gt;thinking about&lt;&#x2F;a&gt; making
it the default.&lt;&#x2F;p&gt;
&lt;p&gt;The other setting &lt;code&gt;skipLibCheck&lt;&#x2F;code&gt; will skip all &lt;code&gt;.d.ts&lt;&#x2F;code&gt; files, so categories 1, 2
and 3 in the list above. This is fine to use if you don’t write &lt;code&gt;.d.ts&lt;&#x2F;code&gt; files
yourself, which I would say is very likely. Most of the time, you can trust
the authors of your external dependencies to have done a proper job.
Or can you? :-D
Anyway, it is very unlikely that you will either mess with, or conflict with
any of the definitions that come from &lt;code&gt;node_modules&lt;&#x2F;code&gt;. And setting this flag can
considerably speed up your type checking times.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;optimizing-for-iteration-speed&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#optimizing-for-iteration-speed&quot; aria-label=&quot;Anchor link for: optimizing-for-iteration-speed&quot;&gt;#&lt;&#x2F;a&gt;
Optimizing for Iteration Speed&lt;&#x2F;h1&gt;
&lt;p&gt;To shine some more light on the massive saving that Michael was able to achieve,
we have to understand the tools that are very common in JS-land, and how they
use typescript in the background.&lt;&#x2F;p&gt;
&lt;p&gt;And what everyone has to decide for themselves is what you want to optimize for.
I personally want to optimize for development and iteration speed on the one
hand, and for correctness and efficiency on the other. As always, it is a matter
of tradeoffs.&lt;&#x2F;p&gt;
&lt;p&gt;But lets look at common tools and workflows first. I would argue there are more
or less these tasks that you want to do:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;run tests, for example via &lt;a href=&quot;https:&#x2F;&#x2F;jestjs.io&#x2F;&quot;&gt;jest&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;kulshekhar.github.io&#x2F;ts-jest&#x2F;&quot;&gt;ts-jest&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;lint your code, for example via &lt;a href=&quot;https:&#x2F;&#x2F;eslint.org&#x2F;&quot;&gt;eslint&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typescript-eslint&#x2F;typescript-eslint&quot;&gt;typescript-eslint&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;build &#x2F; bundle &#x2F; package your app, for example via &lt;a href=&quot;https:&#x2F;&#x2F;rollupjs.org&#x2F;&quot;&gt;rollup&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rollup&#x2F;plugins&#x2F;tree&#x2F;master&#x2F;packages&#x2F;typescript&quot;&gt;rollup-plugin-typescript&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;webpack.js.org&#x2F;&quot;&gt;webpack&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TypeStrong&#x2F;ts-loader&quot;&gt;ts-loader&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;and make sure everything is correct :-)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Wow, this is a long list of tools, and unfortunately, the default settings they
ship with are not optimal, as I think all of these tools run typescript in full
typechecking mode by default.&lt;&#x2F;p&gt;
&lt;p&gt;Lets show this visually because it is easier to understand:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;  typescript        eslint           jest            webpack
&lt;&#x2F;span&gt;&lt;span&gt;┌────────────┐ ┌──────┬───────┐ ┌──────┬───────┐ ┌──────┬────────┐
&lt;&#x2F;span&gt;&lt;span&gt;│typechecking│ │typeck│linting│ │typeck│testing│ │typeck│bundling│
&lt;&#x2F;span&gt;&lt;span&gt;└────────────┘ └──────┴───────┘ └──────┴───────┘ └──────┴────────┘
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In my beautiful unicode-art, you see that it is very inefficient if each one of
these tools does its own typechecking. Especially if the typechecking is super
slow. I even had to truncate the label to not overflow the diagram :-D&lt;&#x2F;p&gt;
&lt;p&gt;Now, for &lt;code&gt;eslint&lt;&#x2F;code&gt;, doing a typecheck is actually mandatory, since a lot of
rules actually use the typechecking information to function. But for jest and
webpack, this is both wasted time, and a distraction.&lt;&#x2F;p&gt;
&lt;p&gt;In my opinion, iteration speed is the major selling point of js. I want to
quickly try and validate some idea, and then polish it up later.
&lt;code&gt;jest&lt;&#x2F;code&gt; and &lt;code&gt;webpack&lt;&#x2F;code&gt; are tools that help me iterate, while &lt;code&gt;eslint&lt;&#x2F;code&gt; will help
me polish. I therefore have quite some beef with the default behavior of
&lt;code&gt;ts-jest&lt;&#x2F;code&gt; and also with things like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TypeStrong&#x2F;fork-ts-checker-webpack-plugin&quot;&gt;fork-ts-checker&lt;&#x2F;a&gt;. They are just slowing me
down.&lt;&#x2F;p&gt;
&lt;p&gt;And yes, I do use the default &lt;code&gt;ts-jest&lt;&#x2F;code&gt; behavior on two projects that I
maintain, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Swatinem&#x2F;rollup-plugin-dts&quot;&gt;rollup-plugin-dts&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eversport&#x2F;intl-codegen&quot;&gt;intl-codegen&lt;&#x2F;a&gt;, purely because of convenience
and because the projects are &lt;em&gt;small&lt;&#x2F;em&gt;. But even then &lt;code&gt;ts-jest&lt;&#x2F;code&gt; is very frequently
annoying me. I want to iterate over my tests quickly dammit, not having to
perfect my typings! And for webpack, all the errors scrolling through the
console are just distracting noise.&lt;&#x2F;p&gt;
&lt;p&gt;With eslint, it will most likely run together with my editor anyway, so I will
get auto-fix on save and live highlights. But I know I can ignore those for now
if all I want to do is iterate quickly.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So to summarize this point. My suggestion to other projects, especially big
ones, is to optimize your workflow for quick iteration on the one hand, for
example by disabling the slow, redundant and distracting typechecks in your
test runner and bundler. And rather enforce strict typechecks when linting.
Essentially configure &lt;code&gt;ts-jest&lt;&#x2F;code&gt; and whatever bundler you use to &lt;em&gt;transpile only&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;thinking-in-compute-time&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#thinking-in-compute-time&quot; aria-label=&quot;Anchor link for: thinking-in-compute-time&quot;&gt;#&lt;&#x2F;a&gt;
Thinking in Compute Time&lt;&#x2F;h1&gt;
&lt;p&gt;The above diagram showed very clearly the redundant and often very slow
typechecking pass that certain tools do by default.
Another thing that developers should be more aware of is
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Amdahl%27s_law&quot;&gt;Amdahl’s law&lt;&#x2F;a&gt;. What this says is
that there are limits to speedings things up when parallelizing.&lt;&#x2F;p&gt;
&lt;p&gt;Lets think of an example. Say your whole testsuite runs for &lt;em&gt;4 minutes&lt;&#x2F;em&gt;, of which
&lt;em&gt;1 minute&lt;&#x2F;em&gt; is spent typechecking, which is not parallelizable. So no matter how
much cores or machines you throw at it, it will never be faster than &lt;em&gt;1 minute&lt;&#x2F;em&gt;.
For example, we can split up our testsuite equally into &lt;em&gt;3 parts&lt;&#x2F;em&gt;. But each of
those runs a typecheck. We end up with a total runtime of &lt;em&gt;2 minutes&lt;&#x2F;em&gt;, but in
reality we actually used up &lt;em&gt;&lt;code&gt;3 * 2 = 6&lt;&#x2F;code&gt; minutes&lt;&#x2F;em&gt; of compute time. Meh!&lt;&#x2F;p&gt;
&lt;p&gt;Also, parallelism has some overhead itself. Especially in JS land!
For the two &lt;em&gt;small&lt;&#x2F;em&gt; projects that I maintain, I use &lt;code&gt;jest&lt;&#x2F;code&gt;s &lt;code&gt;--runInBand&lt;&#x2F;code&gt; flag,
to prevent its default behavior of spawning multiple workers, since all that
parallelism overhead actually &lt;em&gt;slows things down&lt;&#x2F;em&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Of course, this very much depends on the size of your project and testsuite, but
give it a try!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;bundling&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#bundling&quot; aria-label=&quot;Anchor link for: bundling&quot;&gt;#&lt;&#x2F;a&gt;
Bundling&lt;&#x2F;h1&gt;
&lt;p&gt;Now to another topic which I am very opinionated about. Mostly because I am a
big fan, advocate and contributor to &lt;a href=&quot;https:&#x2F;&#x2F;rollupjs.org&#x2F;&quot;&gt;rollup&lt;&#x2F;a&gt;. This small digression is prompted
by a project at my new job that I worked on this past week. Please note that
this here is my personal opinion only, yadda yadda yadda.&lt;&#x2F;p&gt;
&lt;p&gt;So, my work assignment made me aware of
&lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;metro&#x2F;&quot;&gt;metro bundler&lt;&#x2F;a&gt;, which is yet another js
bundler, as if we didn’t have enough of those already.&lt;&#x2F;p&gt;
&lt;p&gt;I was creating a very small testcase, similar to this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; module.js
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;export function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; index.js
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ foo } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;.&#x2F;module&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And I was expecting to get fairly simple code as a result. Like rollup gives
you. You can &lt;a href=&quot;https:&#x2F;&#x2F;rollupjs.org&#x2F;repl&#x2F;?version=1.31.0&amp;amp;shareable=JTdCJTIybW9kdWxlcyUyMiUzQSU1QiU3QiUyMm5hbWUlMjIlM0ElMjJtYWluLmpzJTIyJTJDJTIyY29kZSUyMiUzQSUyMmltcG9ydCUyMCU3QiUyMGZvbyUyMCU3RCUyMGZyb20lMjAlNUMlMjIuJTJGbW9kdWxlLmpzJTVDJTIyJTVDbmZvbygpJTNCJTIyJTJDJTIyaXNFbnRyeSUyMiUzQXRydWUlN0QlMkMlN0IlMjJuYW1lJTIyJTNBJTIybW9kdWxlLmpzJTIyJTJDJTIyY29kZSUyMiUzQSUyMmV4cG9ydCUyMGZ1bmN0aW9uJTIwZm9vKCklMjAlN0IlNUNuJTVDdGNvbnNvbGUubG9nKCU1QyUyMmZvbyU1QyUyMiklM0IlNUNuJTdEJTIyJTJDJTIyaXNFbnRyeSUyMiUzQWZhbHNlJTdEJTVEJTJDJTIyb3B0aW9ucyUyMiUzQSU3QiUyMmZvcm1hdCUyMiUzQSUyMmVzbSUyMiUyQyUyMm5hbWUlMjIlM0ElMjJteUJ1bmRsZSUyMiUyQyUyMmFtZCUyMiUzQSU3QiUyMmlkJTIyJTNBJTIyJTIyJTdEJTJDJTIyZ2xvYmFscyUyMiUzQSU3QiU3RCU3RCUyQyUyMmV4YW1wbGUlMjIlM0FudWxsJTdE&quot;&gt;check the repl&lt;&#x2F;a&gt;
for the output.&lt;&#x2F;p&gt;
&lt;p&gt;See, the native module syntax is &lt;em&gt;static&lt;&#x2F;em&gt;, which means it only has instructions
for either the native js engine, or a bundler like rollup to know how certain
modules interact with each other. All these statements do not actually
&lt;em&gt;execute any code at runtime&lt;&#x2F;em&gt;. That is why rollup can actually remove all of.
Even without any kind of dead code elimination, bundling should &lt;strong&gt;always&lt;&#x2F;strong&gt; make
your bundle smaller than the sum of your source files, because it should be
able to remove all of the boilerplate module code.&lt;&#x2F;p&gt;
&lt;p&gt;Well, at least that is what &lt;em&gt;should&lt;&#x2F;em&gt; happen. Or what I would expect to happen,
living in the year 2020, 5 years after the module syntax was specified.&lt;&#x2F;p&gt;
&lt;p&gt;But, alas, running this example through metro gave me a &lt;strong&gt;35k&lt;&#x2F;strong&gt; bundle!
It was wrapping every module in a function scope, replacing static module syntax
with &lt;code&gt;require&lt;&#x2F;code&gt; calls executed at runtime, and throwing in some polyfills for
good measure.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;WHYYYYYYY?¿?¿?¿?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Please tell me I have done something wrong! This can’t be true! It’s 2020 ffs!&lt;&#x2F;p&gt;
&lt;p&gt;Well, there is one code pattern however that rollup can’t really deal with that well:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;NODE_ENV &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;production&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;exports &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;.&#x2F;production.min.js&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;exports &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;.&#x2F;development.js&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are some tricks to make things like this work, but there are some things
that you can’t handle with static &lt;em&gt;synchronous&lt;&#x2F;em&gt; module syntax. Sadface!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Long story short: Give rollup a try! It is amazing! Especially when publishing
a library to npm, bundling via rollup is a must! And when you also ship type
definitions, give &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Swatinem&#x2F;rollup-plugin-dts&quot;&gt;rollup-plugin-dts&lt;&#x2F;a&gt; a try as well ;-)&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;Well, this got a bit longer than expected.&lt;&#x2F;p&gt;
&lt;p&gt;What I wanted to do is raise awareness about how your favorite tools work, and
how you can configure them in a way that might better suit your workflows and
save you time and money. And to also advocate to bundle your libraries and
types ;-)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Optimizing TypeScript Memory Usage</title>
        <published>2020-01-08T00:00:00+00:00</published>
        <updated>2020-01-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/optimizing-tsc/"/>
        <id>https://swatinem.de/blog/optimizing-tsc/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/optimizing-tsc/">&lt;h2 id=&quot;update-2020-02-28&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#update-2020-02-28&quot; aria-label=&quot;Anchor link for: update-2020-02-28&quot;&gt;#&lt;&#x2F;a&gt;
Update (2020-02-28)&lt;&#x2F;h2&gt;
&lt;p&gt;The recording of my talk is online:&lt;&#x2F;p&gt;
&lt;div class=&quot;video&quot; &gt;
  &lt;iframe
    src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;455MyKMwXGY&quot;
    webkitallowfullscreen
    mozallowfullscreen
    allowfullscreen
  &gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Also, my PR was merged a few week ago!
Motivated by that, I created
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;TypeScript&#x2F;pull&#x2F;36844&quot;&gt;two&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;TypeScript&#x2F;pull&#x2F;36845&quot;&gt;followups&lt;&#x2F;a&gt;,
and I plan to write another post on one of those, so watch closely.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Since quite some time, I have been completely sold on TypeScript, though the
typechecker itself can be very slow sometimes.&lt;&#x2F;p&gt;
&lt;p&gt;At my previous job, we had a &lt;em&gt;huge&lt;&#x2F;em&gt; TS project, with more than &lt;strong&gt;4.000&lt;&#x2F;strong&gt; files,
which took roughly &lt;em&gt;30 seconds&lt;&#x2F;em&gt; to check. But the worst problem was, that it
was running very close to the node memory limit, and would frequently just go
out of memory.&lt;&#x2F;p&gt;
&lt;p&gt;That problem was even worse when running &lt;code&gt;tsserver&lt;&#x2F;code&gt; in combination with &lt;code&gt;tslint&lt;&#x2F;code&gt;,
which would crash due to OOM every few minutes, as I already wrote about
&lt;a href=&quot;..&#x2F;dx-challenges&#x2F;&quot;&gt;in a previous post&lt;&#x2F;a&gt;.
Well, since one of the more recent VSCode updates, it is possible to
&lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;updates&#x2F;v1_40#_typescripttsservermaxtsservermemory&quot;&gt;increase the memory limit&lt;&#x2F;a&gt;
of &lt;code&gt;tsserver&lt;&#x2F;code&gt;, which would have saved my life back then.&lt;&#x2F;p&gt;
&lt;p&gt;At some point, all this got too unbearable, and I started profiling and looking
deeper into how things worked. In the end, I was able to save up to &lt;strong&gt;6~8%&lt;&#x2F;strong&gt; of
memory usage with a very trivial change.&lt;&#x2F;p&gt;
&lt;p&gt;Let me take you on a journey of what I did to achieve these improvements.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-a-reduced-testcase&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#creating-a-reduced-testcase&quot; aria-label=&quot;Anchor link for: creating-a-reduced-testcase&quot;&gt;#&lt;&#x2F;a&gt;
Creating a reduced testcase&lt;&#x2F;h2&gt;
&lt;p&gt;Demonstrating this with a &lt;em&gt;4.000&lt;&#x2F;em&gt; file project is not really feasible, but
luckily, we can reduce this to a &lt;strong&gt;very&lt;&#x2F;strong&gt; simple testcase.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; npm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt; typescript @types&#x2F;node
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Throughout this post, I will be using versions
&lt;strong&gt;typescript@3.7.4&lt;&#x2F;strong&gt; and &lt;strong&gt;@types&#x2F;node@13.1.4&lt;&#x2F;strong&gt;, the most recent versions at
the time. My &lt;code&gt;tsconfig.json&lt;&#x2F;code&gt; looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;compilerOptions&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;diagnostics&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;noEmit&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;strict&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;target&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;ES2020&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;lib&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;ESNext&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;moduleResolution&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Node&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;module&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;ESNext&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Very basic stuff. Using the latest lib version and target, with node modules, and
without generating any emit output.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;diagnostics&lt;&#x2F;code&gt; option is the same as if you would use it on the command line
with &lt;code&gt;tsc --diagnostics&lt;&#x2F;code&gt;, just a convenient shortcut, because I always find the
infos useful.&lt;&#x2F;p&gt;
&lt;p&gt;And then just create an empty file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; touch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;index.ts
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running &lt;code&gt;tsc&lt;&#x2F;code&gt; now gives us some (abbreviated) output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt; tsc
&lt;&#x2F;span&gt;&lt;span&gt;Files:           82
&lt;&#x2F;span&gt;&lt;span&gt;Lines:        22223
&lt;&#x2F;span&gt;&lt;span&gt;Memory used: 61029K
&lt;&#x2F;span&gt;&lt;span&gt;Total time:   1.28s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can use the command line option &lt;code&gt;tsc --listFiles&lt;&#x2F;code&gt; to find out what those
&lt;code&gt;82&lt;&#x2F;code&gt; files are. Hint: it is just all the ts internal &lt;code&gt;lib&lt;&#x2F;code&gt; files,
plus all of &lt;code&gt;@types&#x2F;node&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Ok, so far this is not really interesting, lets extend our testcase a little bit:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; npm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt; aws-sdk
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;export * from &amp;quot;aws-sdk&amp;quot;;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; index.ts
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(Note: This just installed &lt;strong&gt;aws-sdk@2.598.0&lt;&#x2F;strong&gt; which btw is &lt;strong&gt;48M&lt;&#x2F;strong&gt; on disk)&lt;&#x2F;p&gt;
&lt;p&gt;Lets run &lt;code&gt;tsc&lt;&#x2F;code&gt; again:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt; tsc
&lt;&#x2F;span&gt;&lt;span&gt;Files:           345
&lt;&#x2F;span&gt;&lt;span&gt;Lines:        396419
&lt;&#x2F;span&gt;&lt;span&gt;Nodes:       1178724
&lt;&#x2F;span&gt;&lt;span&gt;Identifiers:  432925
&lt;&#x2F;span&gt;&lt;span&gt;Memory used: 465145K
&lt;&#x2F;span&gt;&lt;span&gt;Parse time:    2.38s
&lt;&#x2F;span&gt;&lt;span&gt;Bind time:     0.78s
&lt;&#x2F;span&gt;&lt;span&gt;Check time:    2.22s
&lt;&#x2F;span&gt;&lt;span&gt;Total time:    5.38s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Say whaaaaaat?¿?¿&lt;&#x2F;strong&gt; Adding a single dependency adds a whooping &lt;strong&gt;400M&lt;&#x2F;strong&gt; of
memory usage and roughly &lt;strong&gt;4 seconds&lt;&#x2F;strong&gt; of runtime.&lt;&#x2F;p&gt;
&lt;p&gt;I will let you in on a little secret: &lt;code&gt;tsc&lt;&#x2F;code&gt; is actually typechecking &lt;em&gt;all&lt;&#x2F;em&gt; of
the &lt;code&gt;aws-sdk&lt;&#x2F;code&gt;, which can be slow. We can avoid that by using &lt;code&gt;--skipLibCheck&lt;&#x2F;code&gt;,
which is recommended all over the internet to speed up &lt;code&gt;tsc&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt; tsc --skipLibCheck
&lt;&#x2F;span&gt;&lt;span&gt;Memory used: 375234K
&lt;&#x2F;span&gt;&lt;span&gt;Parse time:    2.28s
&lt;&#x2F;span&gt;&lt;span&gt;Bind time:     0.77s
&lt;&#x2F;span&gt;&lt;span&gt;Check time:    0.00s
&lt;&#x2F;span&gt;&lt;span&gt;Total time:    3.05s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Not &lt;em&gt;that&lt;&#x2F;em&gt; much of an improvement, but we got rid of the &lt;code&gt;check time&lt;&#x2F;code&gt;, and about
&lt;em&gt;~100M&lt;&#x2F;em&gt; of memory usage.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lets-start-profiling&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#lets-start-profiling&quot; aria-label=&quot;Anchor link for: lets-start-profiling&quot;&gt;#&lt;&#x2F;a&gt;
Lets start profiling&lt;&#x2F;h2&gt;
&lt;p&gt;In order to find out where all of this memory usage is coming from, we need to
start profiling. Luckily, the
&lt;a href=&quot;https:&#x2F;&#x2F;nodejs.org&#x2F;en&#x2F;docs&#x2F;guides&#x2F;debugging-getting-started&#x2F;&quot;&gt;node docs&lt;&#x2F;a&gt; are
quite good. Take a minute to read that page.&lt;&#x2F;p&gt;
&lt;p&gt;So, from now on, we will start &lt;code&gt;tsc&lt;&#x2F;code&gt; like this:
&lt;code&gt;node --inspect-brk node_modules&#x2F;.bin&#x2F;tsc --skipLibCheck&lt;&#x2F;code&gt;.
And I will be using chromium, navigate to &lt;code&gt;chrome:&#x2F;&#x2F;inspect&lt;&#x2F;code&gt; and wait for my
node process to appear.&lt;&#x2F;p&gt;
&lt;p&gt;Once the debugger is attached, we can resume execution
(the &lt;code&gt;--inspect-brk&lt;&#x2F;code&gt; switch actually suspends execution). We watch our console
in the background, and once we get the &lt;code&gt;--diagnostics&lt;&#x2F;code&gt; output, &lt;code&gt;tsc&lt;&#x2F;code&gt; is basically
done, but it still holds on to its memory.&lt;&#x2F;p&gt;
&lt;p&gt;Now we can switch to the &lt;code&gt;Memory&lt;&#x2F;code&gt; tab, and take a heap snapshot. This will take
a while. In my opinion, the
&lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;tools&#x2F;chrome-devtools&#x2F;memory-problems&#x2F;heap-snapshots&quot;&gt;documentation&lt;&#x2F;a&gt;
for this tool could be a lot better, but it gives you the very basics.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;optimizing-tsc&#x2F;heap-overview.png&quot; alt=&quot;Heap Profiler&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For someone who has never before seen this, this might be a bit overwhelming
and confusing. And well, yes, it is. Memory profiling is actually a lot about
intuition, and digging deeper into things.&lt;&#x2F;p&gt;
&lt;p&gt;I have expanded the &lt;code&gt;(string)&lt;&#x2F;code&gt; category. We see &lt;strong&gt;9M&lt;&#x2F;strong&gt; for &lt;code&gt;tsc&lt;&#x2F;code&gt; itself, and
then a number of files which look very much like the sources of the &lt;code&gt;aws-sdk&lt;&#x2F;code&gt;,
for a total of &lt;strong&gt;67M&lt;&#x2F;strong&gt;. &lt;code&gt;tsc&lt;&#x2F;code&gt; essentially reads all the source files of &lt;code&gt;aws-sdk&lt;&#x2F;code&gt;
and keeps them in-memory. According to our &lt;code&gt;--diagnostics&lt;&#x2F;code&gt; output, that is roughly
&lt;em&gt;~250&lt;&#x2F;em&gt; files, and the complete &lt;code&gt;aws-sdk&lt;&#x2F;code&gt; is roughly &lt;em&gt;48M&lt;&#x2F;em&gt; on disk, so the
numbers start to add up.&lt;&#x2F;p&gt;
&lt;p&gt;Moving on, lets expand the &lt;code&gt;Node&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;optimizing-tsc&#x2F;nodes.png&quot; alt=&quot;Nodes&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here we see that each of the nodes is &lt;strong&gt;160 bytes&lt;&#x2F;strong&gt;, and both according to the
memory profiler, and the &lt;code&gt;tsc --diagnostics&lt;&#x2F;code&gt; output, we have a bit more than
1 million &lt;code&gt;Node&lt;&#x2F;code&gt;s, which adds up to almost &lt;strong&gt;180M&lt;&#x2F;strong&gt; of memory.&lt;&#x2F;p&gt;
&lt;p&gt;Expanding some &lt;code&gt;Node&lt;&#x2F;code&gt;s, we also see that the &lt;code&gt;Node&lt;&#x2F;code&gt;s have very different
properties on them. One very relevant detail is also that not every property is
shown, more on that later.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;diving-into-some-theory&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#diving-into-some-theory&quot; aria-label=&quot;Anchor link for: diving-into-some-theory&quot;&gt;#&lt;&#x2F;a&gt;
Diving into some theory&lt;&#x2F;h2&gt;
&lt;p&gt;To progress further, we need to know a little bit about how v8 manages its
memory. Luckily, the v8 team talks quite a bit about this and other performance
relevant topics. Go and read &lt;a href=&quot;https:&#x2F;&#x2F;v8.dev&#x2F;blog&#x2F;react-cliff&quot;&gt;one of&lt;&#x2F;a&gt; the very
good posts on the &lt;a href=&quot;https:&#x2F;&#x2F;v8.dev&#x2F;blog&quot;&gt;v8 blog&lt;&#x2F;a&gt;, or watch one of the recordings
from various conferences.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Also note that this is specific to v8, and other JS engines are different,
though surprisingly still quite similar. Also, I might get some of the details
wrong, or they might get outdated, so take this with a grain of salt.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Alright! To move on, we have to understand how v8 saves JS objects in memory.
Very simplified, an object looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;┌────────────┐
&lt;&#x2F;span&gt;&lt;span&gt;│ Map        │
&lt;&#x2F;span&gt;&lt;span&gt;├────────────┤
&lt;&#x2F;span&gt;&lt;span&gt;│ Properties │
&lt;&#x2F;span&gt;&lt;span&gt;├────────────┤
&lt;&#x2F;span&gt;&lt;span&gt;│ Elements   │
&lt;&#x2F;span&gt;&lt;span&gt;├────────────┤
&lt;&#x2F;span&gt;&lt;span&gt;│ …          │
&lt;&#x2F;span&gt;&lt;span&gt;└────────────┘
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each one of these entries (slots) is &lt;em&gt;&quot;pointer sized&quot;&lt;&#x2F;em&gt;, which on 64-bit system
means &lt;strong&gt;8 bytes&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;Map&lt;&#x2F;strong&gt;, also called &lt;em&gt;Hidden Class&lt;&#x2F;em&gt; or &lt;em&gt;Shape&lt;&#x2F;em&gt;, is an internal
data-structure which describes the object. V8 and other JS engines have a lot of
internal optimizations that depend on this &lt;em&gt;Shape&lt;&#x2F;em&gt;. For example, optimized code
is specialized for one or more &lt;em&gt;Shape&lt;&#x2F;em&gt;s. When you pass in an object of a
different &lt;em&gt;Shape&lt;&#x2F;em&gt;, the engine will bail out to slower code.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Properties&lt;&#x2F;strong&gt;, is a pointer to an optional hashmap, which can hold additional
properties that get added later to an object. You will sometimes hear or read
about &lt;em&gt;&quot;dictionary mode&quot; objects&lt;&#x2F;em&gt;. This is it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Elements&lt;&#x2F;strong&gt; is a pointer to some optional indexed properties, like for an
array.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;…&lt;&#x2F;strong&gt;: And then each object can have a number of &lt;em&gt;inlined&lt;&#x2F;em&gt; properties. This is
what makes property access fast. The &lt;em&gt;Map&lt;&#x2F;em&gt; describes which properties are
inlined at which index, and optimized code will just fetch the property from
index &lt;code&gt;X&lt;&#x2F;code&gt; instead of looking it up through &lt;em&gt;Properties&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Each object at least has the three special properties, so each object is at
least &lt;strong&gt;24 bytes&lt;&#x2F;strong&gt;. In our example, each &lt;code&gt;Node&lt;&#x2F;code&gt; is &lt;strong&gt;160 bytes&lt;&#x2F;strong&gt;, so it has
&lt;strong&gt;20 slots&lt;&#x2F;strong&gt;, minus the special ones leaves us with up to &lt;strong&gt;17 slots&lt;&#x2F;strong&gt; for
arbitrary properties. That is quite a lot.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So, what is such a &lt;code&gt;Node&lt;&#x2F;code&gt; anyway? When typescript, or any other parser
essentially, parses the source code, it creates an internal data-structure,
called the &lt;em&gt;Abstract Syntax Tree&lt;&#x2F;em&gt; (AST). And as the name says, it is a tree,
consisting of &lt;code&gt;Node&lt;&#x2F;code&gt;s. Each syntax construct is represented by a different
type of node.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;An &lt;em&gt;Identifier&lt;&#x2F;em&gt; (&lt;code&gt;ident&lt;&#x2F;code&gt;) for example only has to know its &lt;em&gt;name&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;em&gt;MemberExpression&lt;&#x2F;em&gt; (&lt;code&gt;object.property&lt;&#x2F;code&gt;) has references the &lt;em&gt;object&lt;&#x2F;em&gt; and the &lt;em&gt;property&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;em&gt;IfStatement&lt;&#x2F;em&gt; (&lt;code&gt;if (condition) { consequent } else { alternate }&lt;&#x2F;code&gt;) also has references to its child blocks.&lt;&#x2F;li&gt;
&lt;li&gt;… and so on …&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While each one of these nodes share some common properties, like their location
in the source file for example, each syntax node has very different properties.
Which makes it hard for JS engines to optimize this particular data structure,
and functions that work with these.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;trying-to-improve-things&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#trying-to-improve-things&quot; aria-label=&quot;Anchor link for: trying-to-improve-things&quot;&gt;#&lt;&#x2F;a&gt;
Trying to improve things&lt;&#x2F;h2&gt;
&lt;p&gt;There is one more very important detail I left out.&lt;&#x2F;p&gt;
&lt;p&gt;V8 has a lot of heuristics, and one of them is that it groups all these objects
based on &lt;strong&gt;the constructor function&lt;&#x2F;strong&gt;. And typescript unfortunately uses a single
constructor function for all of these very different node types. It is quite
unlikely that every AST node will need &lt;em&gt;17&lt;&#x2F;em&gt; properties.&lt;&#x2F;p&gt;
&lt;p&gt;With this is mind, we can try to improve things.&lt;&#x2F;p&gt;
&lt;p&gt;For a live demo, we can just live-patch the &lt;code&gt;node_modules&#x2F;typescript&#x2F;lib&#x2F;tsc.js&lt;&#x2F;code&gt;
file, and search for &lt;code&gt;function Node(&lt;&#x2F;code&gt;. In the typescript source tree, we find
the code &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;TypeScript&#x2F;blob&#x2F;8ed92dcecda8b9d5cc5b9e22c5ebe2aae91a9670&#x2F;src&#x2F;compiler&#x2F;utilities.ts#L4987-L5016&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Surprisingly, right next to it is this thing called the &lt;code&gt;objectAllocator&lt;&#x2F;code&gt;:
(I added a &lt;code&gt;prettier-ignore&lt;&#x2F;code&gt; comments, otherwise my editor will auto-format this)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;end &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;kind &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;kind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;flags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;modifierFlagsCache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;transformFlags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;parent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;original &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; [… snip …]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; prettier-ignore
&lt;&#x2F;span&gt;&lt;span&gt;ts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;objectAllocator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getNodeConstructor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getTokenConstructor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getIdentifierConstructor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getSourceFileConstructor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getSymbolConstructor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getTypeConstructor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getSignatureConstructor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Signature&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getSourceMapSourceConstructor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;SourceMapSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So apparently, TypeScript already has all the necessary infrastructure in place
to at least split the Nodes into four categories. Also note that it uses the
same constructor function for &lt;code&gt;SourceFile&lt;&#x2F;code&gt;s, which are &lt;em&gt;very&lt;&#x2F;em&gt; different from
AST Nodes.&lt;&#x2F;p&gt;
&lt;p&gt;So just for fun, lets copy-paste this &lt;code&gt;Node&lt;&#x2F;code&gt; function, rename it, and use it for
all of these different types…&lt;&#x2F;p&gt;
&lt;p&gt;With this trivial change done, lets try running &lt;code&gt;tsc&lt;&#x2F;code&gt; again:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;Memory used: 353732K
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Scrolling back up, and running these commands a few more times, the numbers are
very reproducible. Our memory usage went from &lt;strong&gt;375M&lt;&#x2F;strong&gt; to &lt;strong&gt;353M&lt;&#x2F;strong&gt;. We just
saved ourselves &lt;strong&gt;22M&lt;&#x2F;strong&gt; of memory usage, which amounts to roughly &lt;strong&gt;~6%&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Lets double-check using the memory profiler.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;optimizing-tsc&#x2F;nodes-after.png&quot; alt=&quot;Nodes after Optimization&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the end, we end up with these sizes:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Type&lt;&#x2F;th&gt;&lt;th&gt;Size (bytes)&lt;&#x2F;th&gt;&lt;th&gt;Frequency&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;SourceFile&lt;&#x2F;td&gt;&lt;td&gt;160&lt;&#x2F;td&gt;&lt;td&gt;~0%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Identifier&lt;&#x2F;td&gt;&lt;td&gt;104&lt;&#x2F;td&gt;&lt;td&gt;~37%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Token&lt;&#x2F;td&gt;&lt;td&gt;104&lt;&#x2F;td&gt;&lt;td&gt;~13%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Node&lt;&#x2F;td&gt;&lt;td&gt;144&lt;&#x2F;td&gt;&lt;td&gt;~50%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;What we see from this is that mixing &lt;code&gt;SourceFile&lt;&#x2F;code&gt; with all the rest of the
&lt;code&gt;Node&lt;&#x2F;code&gt;s is not a really good idea. Also, &lt;strong&gt;104 bytes&lt;&#x2F;strong&gt; equals &lt;strong&gt;10&lt;&#x2F;strong&gt; non-special
properties, which is a lot for things like &lt;code&gt;Token&lt;&#x2F;code&gt;s, which are usually
punctuation, but TS uses them for literals, or &lt;code&gt;Identifier&lt;&#x2F;code&gt;s,
which just represent one word in the source text.
Careful analysis could further shrink the memory usage, by removing unused
properties, or further splitting up and organizing the different token types.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bad-news&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#bad-news&quot; aria-label=&quot;Anchor link for: bad-news&quot;&gt;#&lt;&#x2F;a&gt;
Bad news&lt;&#x2F;h2&gt;
&lt;p&gt;While I only write about this in early January, I did all the analysis and
patching in mid September last year. You can check the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;TypeScript&#x2F;pull&#x2F;33431&quot;&gt;pull request&lt;&#x2F;a&gt; on the
typescript repo; it is still open as I write this blog. :-(
When running typescripts own performance test suite,
my patch demonstrated a &lt;strong&gt;6~8%&lt;&#x2F;strong&gt; decrease in memory usage, so even more
significant than the saving demonstrated with the testcase here. But there is
apparently no interest from the maintainers to merge it. I asked again early
December, &lt;em&gt;one month ago&lt;&#x2F;em&gt;, to get some feedback, but got no reply whatsoever.
Compared to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;TypeScript&#x2F;pull&#x2F;33390&quot;&gt;my first PR&lt;&#x2F;a&gt;
, which was merged in less than 24 hours, this is super disappointing and
frustrating for an external contributor. So if anyone has any connections to
the maintainers, please kick some ass to get some progress here. :-)&lt;&#x2F;p&gt;
&lt;p&gt;The other thing is &lt;code&gt;aws-sdk&lt;&#x2F;code&gt;, which I used as the testcase here.
One thing people could do it to better organize their library, for example by
bundling both library code and their types. And it just so happens that I
maintain &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Swatinem&#x2F;rollup-plugin-dts&quot;&gt;rollup-plugin-dts&lt;&#x2F;a&gt;
which you should definitely check out :-)
But introducing bundling after the fact might be a breaking change for library
users, so I understand its not always feasible.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;BUT&lt;&#x2F;em&gt;, after some digging around, I found out that the &lt;code&gt;aws-sdk&lt;&#x2F;code&gt; actually has
more focused imports, so instead of &lt;code&gt;import { S3 } from &quot;aws-sdk&quot;&lt;&#x2F;code&gt;, one can do
&lt;code&gt;import S3 from &quot;aws-sdk&#x2F;clients&#x2F;s3&quot;&lt;&#x2F;code&gt; (one reason why bundling would break things).
You might want to use such focused imports to save both startup time and memory
usage &lt;em&gt;at runtime&lt;&#x2F;em&gt;. I haven’t checked what the runtime code actually does, but
the type definitions end up including &lt;em&gt;the whole world&lt;&#x2F;em&gt;, even though you would
like to use focused imports.
I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-js&#x2F;issues&#x2F;2846&quot;&gt;created an issue&lt;&#x2F;a&gt;, also in
September, which got a single comment along the lines of
&lt;em&gt;&quot;we don’t really care, wait for the next major version&quot;&lt;&#x2F;em&gt;, which is also quite
disappointing. I don’t have such a deep insight, but I would guess that a fix
for this would be quite simple; especially since &lt;code&gt;aws-sdk&lt;&#x2F;code&gt; has a ton of
duplicated type aliases.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Memory optimization is hard, especially in JS. Also, parsers and compilers are
even harder to optimize in JS. It is amazing that something like an &lt;code&gt;Identifier&lt;&#x2F;code&gt;,
which in minified code is only &lt;strong&gt;1 character = 1 byte&lt;&#x2F;strong&gt;, is blown up to
&lt;strong&gt;160 bytes&lt;&#x2F;strong&gt; by parsing it into a data structure that a compiler can work with.&lt;&#x2F;p&gt;
&lt;p&gt;Profiling JS is a complex thing to do. Engines have a ton of optimizations and
heuristics. They try to be very smart. They mostly succeed, but there are some
code patterns that are very hard to optimize. Figuring out what is really
happening requires a lot experience, knowledge, guessing, and sometimes
just luck. I hope I have opened the eyes of some by showing how I approach these
kinds of problems.&lt;&#x2F;p&gt;
&lt;p&gt;One recommendation for other developers, that you can also read and hear about
&lt;em&gt;a lot&lt;&#x2F;em&gt; is to use constructor functions, which initialize all the properties
that an object can have, with correct types. Just putting random properties on
objects at random times, like typescript apparently does is really bad for
performance.&lt;&#x2F;p&gt;
&lt;p&gt;But in the end, the number one rule is to:
&lt;strong&gt;measure, measure, measure! and then measure some more!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>My immersion-cooled Oil PC</title>
        <published>2019-12-06T00:00:00+00:00</published>
        <updated>2019-12-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/oil-immersion-cooling/"/>
        <id>https://swatinem.de/blog/oil-immersion-cooling/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/oil-immersion-cooling/">&lt;p&gt;&lt;strong&gt;TLDR&lt;&#x2F;strong&gt;: scroll down for pictures and a video :-)&lt;&#x2F;p&gt;
&lt;p&gt;It was actually quite some time ago when I stumbled upon the concepts of
immersion cooling, by which you immerse your whole hardware in a di-electric
cooling fluid, and by phase-change cooling, which means that the coolant
actually evaporates on the hot parts to carry away the heat, and then condenses
again to build a cycle. Go ahead and search the internet&#x2F;youtube for the
keywords
&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;results?search_query=novec+cooling&quot;&gt;novec cooling&lt;&#x2F;a&gt;,
you &lt;em&gt;will&lt;&#x2F;em&gt; be amazed! So was I! There is just this
sense of peace and calm when you see bubbles rising from your PC components.&lt;&#x2F;p&gt;
&lt;p&gt;I wanted to have something like that myself. So I put in a bit of research.
There are a few specifically engineered fluids, which are di-electric (insulators)
and have a quite low boiling point. The &lt;code&gt;3M Novec&lt;&#x2F;code&gt; line of fluids are an example.
One of them has a boiling point of 30°C, which in theory means that your
hardware components will rarely exceed those temps.&lt;&#x2F;p&gt;
&lt;p&gt;But there are a few problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;With global warming, and without an AC, I get incredibly hot summers,
sometimes up to 35°C in my room, which is absolutely no pleasure, believe me!
But this means that I simply can’t realistically cool the fluid down below its
boiling point in summer with conventional means.&lt;&#x2F;li&gt;
&lt;li&gt;You simply can’t buy &lt;code&gt;3M Novec&lt;&#x2F;code&gt; as a private person. It’s just not possible.&lt;&#x2F;li&gt;
&lt;li&gt;Even if it was, I read that it is &lt;em&gt;prohibitively expensive&lt;&#x2F;em&gt;, well above the
&lt;em&gt;100€&#x2F;l&lt;&#x2F;em&gt; point apparently.&lt;&#x2F;li&gt;
&lt;li&gt;Novec is very volatile &#x2F; fleeting (sorry, I don’t really know the correct word),
which means you would have to a very air-tight and possibly pressurized
container for it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So considering all this, phase-change cooling was out of the picture. But
immersion cooling was still an option. And there is quite some prior art on just
using oil for that, which is a di-electric, and has quite good thermal properties
as well.&lt;&#x2F;p&gt;
&lt;p&gt;But information on how to properly do it was quite scarce. Do I actually need a
heatsink? (With Novec, you don’t really) How about fans? How large? How to cool
the oil? When using standard water-cooling equipment, how large should that be?
BTW, I am still missing a comprehensive overview of the &lt;em&gt;actually performance&lt;&#x2F;em&gt;
of water-cooling hardware. Like how many Watts of heat can a &lt;code&gt;2 * 140mm x 45mm&lt;&#x2F;code&gt;
radiator dissipate, when combined with Fans that have an Airflow of &lt;code&gt;X&lt;&#x2F;code&gt;. I
haven’t really found any info on that one! Also, what kind of pump do you need
for a combination of radiators, etc… Info such as this is really scarce to
non-existent on the web. I really wish such info was more widespread. Also,
oil is a lot more viscous than water, so that has to be taken into account as
well.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;build-timeline&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#build-timeline&quot; aria-label=&quot;Anchor link for: build-timeline&quot;&gt;#&lt;&#x2F;a&gt;
Build Timeline&lt;&#x2F;h1&gt;
&lt;p&gt;… Anyway, I just made a best guess on the components and started planning.&lt;&#x2F;p&gt;
&lt;p&gt;My first idea was to have the Motherboard and the GPU back-to-back,
such as in the &lt;a href=&quot;https:&#x2F;&#x2F;www.dan-cases.com&#x2F;dana4.php&quot;&gt;DAN A4&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I actually bought the hardware itself about a year ago, together with a PCI-E
riser card to try different configurations. Turns out that a faulty riser card
can actually randomly crash your games! It was either faulty, or I just bent it
too much, but hey! Those cards are supposed to be bent, so they better handle
the stress! Anyway, I got a refund for the faulty riser and went with a
different one.&lt;&#x2F;p&gt;
&lt;p&gt;Along the way, I also had the epiphany to do some kind of triangle or star shape.
And thus, also the projects code-name was born: &lt;strong&gt;Trinity-Force&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I actually sketched it up on paper first:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;oil-immersion-cooling&#x2F;sketch.jpg&quot; alt=&quot;Paper Sketch&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The ideas got a lot more concrete when I started modeling everything in
&lt;a href=&quot;https:&#x2F;&#x2F;www.freecadweb.org&#x2F;&quot;&gt;FreeCAD&lt;&#x2F;a&gt;, which I learned just to make this project.&lt;&#x2F;p&gt;
&lt;p&gt;Researching all the data-sheets for the different Mainboard Form-Factors, and
being able to precisely apply them in CAD was really appealing to my inner
engineer.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;oil-immersion-cooling&#x2F;mb-mount.png&quot; alt=&quot;MB Mount&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After more learning, and long nights of CAD Design, I was done:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;oil-immersion-cooling&#x2F;cad-3d.png&quot; alt=&quot;3D CAD Model&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And then came the actual fabrication. I had all the parts cut out of an acrylic
sheet by a laser cutter:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;oil-immersion-cooling&#x2F;cutting.jpg&quot; alt=&quot;Laser-cut Acrylic&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I then continued to glue all the pieces together. An important note here: Do not
glue laser-cut edges, they &lt;em&gt;will&lt;&#x2F;em&gt; get ugly! Make sure to smooth &#x2F; file them off
somehow before glueing. Well, lesson learned.
The next step was to assembly all the hardware into their place, which ran on
air cooling for another month or so:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;oil-immersion-cooling&#x2F;assembled.jpg&quot; alt=&quot;Assembled Innards&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And then with the outer basin completed came the final assembly and pouring in
the oil:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;oil-immersion-cooling&#x2F;mating.jpg&quot; alt=&quot;Mating the two parts&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;oil-immersion-cooling&#x2F;ready.jpg&quot; alt=&quot;Ready to fill&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;oil-immersion-cooling&#x2F;half.jpg&quot; alt=&quot;Half Full&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;swatinem.de&#x2F;blog&#x2F;oil-immersion-cooling&#x2F;full.jpg&quot; alt=&quot;Full&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And some shaky-cam footage of the final beast running:&lt;&#x2F;p&gt;
&lt;div class=&quot;video&quot; &gt;
  &lt;iframe
    src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;Q0BQbAdOaBQ&quot;
    webkitallowfullscreen
    mozallowfullscreen
    allowfullscreen
  &gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;BTW, from planning to actually pouring in the oil was almost half a year.
I started ordering hardware around December last year, and I poured in the oil
around April…&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-good&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-good&quot; aria-label=&quot;Anchor link for: the-good&quot;&gt;#&lt;&#x2F;a&gt;
The Good&lt;&#x2F;h1&gt;
&lt;p&gt;Well I wanted to do a proper case-mod for quite some time. And I can truly say
that I have an absolutely unique PC! It was an amazing project to plan, design
and build. I’m really proud to have pulled this off!
And oh boy does it look cool!&lt;&#x2F;p&gt;
&lt;p&gt;Also, the performance is great, and the cooling works. I rarely hit ~70°C on
either CPU or GPU. And this Setup is running an &lt;strong&gt;RTX 2070&lt;&#x2F;strong&gt; and a
&lt;strong&gt;Ryzen 2700X&lt;&#x2F;strong&gt;, with a tiny low-profile cooler! The ambient oil temperature
(as measured by chipset &#x2F; SSD) does hit &amp;gt;40°C in summer, but things are still
stable and performing well. I haven’t noticed any thermal throttling so far.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-bad&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-bad&quot; aria-label=&quot;Anchor link for: the-bad&quot;&gt;#&lt;&#x2F;a&gt;
The Bad&lt;&#x2F;h1&gt;
&lt;p&gt;Although this is an amazing piece of work, it did fail some of the requirements
for a PC that I have.&lt;&#x2F;p&gt;
&lt;p&gt;I it actually quite big! The radiator itself is already quite bulky, but the
unique trinity-shaped design actually takes up quite some place. And it is still
sitting on my desk, taking up precious space.
The other bad thing is that it is not actually &lt;em&gt;that&lt;&#x2F;em&gt; quiet. You see, the pump
is quite loud, and it even emits some low-frequency vibrations. I’m not quite
sure if this is just the way that watercooling pumps are, or if it’s a faulty
pump itself. Or maybe I made a mistake when starting it up. Apparently you have
a specific procedure to prime the pump. But I have had it running dry while I
was slowly pouring in the Oil. Not sure if that is the reason it is this loud
now.&lt;&#x2F;p&gt;
&lt;p&gt;Also, having two separate outlets from the Radiator was probably not a good idea,
since the flow is uneven. Which also reminds me that, while definitely nice to
look at, the trinity-shaped design is not really that good for fluid dynamics.
Especially the Mainboard compartment gets hotter than other parts of the
assembly. You can even feel it when you touch the outsides.&lt;&#x2F;p&gt;
&lt;p&gt;Another thing to mention. You might not see it so well on the pictures, but I
have disassembled the power supply into its own compartment as well. Which
meant soldering cables and so on. Very tedious work, I don’t recommend doing it.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-ugly&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-ugly&quot; aria-label=&quot;Anchor link for: the-ugly&quot;&gt;#&lt;&#x2F;a&gt;
The Ugly&lt;&#x2F;h1&gt;
&lt;p&gt;Well… What is the worst that can happen when you are dealing with oil? Well,
it leaks. And it does. Very slowly, most likely in tiny cracks of the basin.
Remember, never directly glue laser-cut edges! After all, the unique shape makes
it very difficult to glue, and I didn’t really do a great job at that :-(
Anyway, I have the PC on a piece of cardboard to soak up the leaks which I had
to change once so far.&lt;&#x2F;p&gt;
&lt;p&gt;Also, this is something that I have read already somewhere, but it is still
very surprising because it kind-of defies the laws of gravity. You see, oil can
actually flow &lt;strong&gt;upward&lt;&#x2F;strong&gt; &lt;em&gt;inside&lt;&#x2F;em&gt; of cables! Incredible. But the oil actually
travels upwards in one of the USB cables and drips under my table. Haha!&lt;&#x2F;p&gt;
&lt;p&gt;The problem is, the RTX 2070 Mini that I have has a fan which is quite close to
the PCI bracket, so when angled upside-down, this means I have to fill the oil
quite near the top for the fan not to splash it. That means that all USB and
other connectors on the Mainboard are also soaked in oil, which gets on all the
cables you plug in. Not nice :-(&lt;&#x2F;p&gt;
&lt;h1 id=&quot;future-ideas&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#future-ideas&quot; aria-label=&quot;Anchor link for: future-ideas&quot;&gt;#&lt;&#x2F;a&gt;
Future ideas&lt;&#x2F;h1&gt;
&lt;p&gt;Well this was basically it. It was an amazing project to build, and I learned
a tremendous amount doing it.&lt;&#x2F;p&gt;
&lt;p&gt;Am I done though? I’m not quite sure. I do have the slight urge to re-do the
project at some point. To correct all the mistakes that I made and learned from.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Go with a more usual rectangular design, without the need for a riser card.&lt;&#x2F;li&gt;
&lt;li&gt;At least for the outer basin, have someone else assemble&#x2F;glue it who knows
their job. Using a rectangular shape should make that a lot easier anyway!&lt;&#x2F;li&gt;
&lt;li&gt;Do not disassemble and mess with the power supply, just get an SFX PSU with
cable management and some nicely sleeved cables. Even doing the cable-sleeving
yourself can’t be as tedious as soldering cables :-D&lt;&#x2F;li&gt;
&lt;li&gt;Get a GPU that has more space between bracket and fan, so I don’t have to
fill the oil quite to the top.&lt;&#x2F;li&gt;
&lt;li&gt;Better optimize for fluid dynamics. Hot fluid rises to the top, which means
that somewhere on the top should be an outlet that leads to the radiator, and
from there an inlet on the bottom somewhere.&lt;&#x2F;li&gt;
&lt;li&gt;Not sure why this is currently so bad, but make sure to get a &lt;em&gt;quiet&lt;&#x2F;em&gt; pump.&lt;&#x2F;li&gt;
&lt;li&gt;Make sure to design the inner part to be more easily accessible &#x2F; removable.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I do have some ideas revolving around a dual-basin design. One basin with the
hardware, which overflows like a waterfall into a second basin at the bottom.
This should in itself already cool the oil down a bit. From there, through the
radiator and into the bottom of the inner tank. This would however necessitate
a directional flow valve. And as I have learned that oil is quite fleeting, I’m
not sure this is possible? Well it has to somehow!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Lets learn Dependency Injection</title>
        <published>2019-11-25T00:00:00+00:00</published>
        <updated>2019-11-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/learn-di/"/>
        <id>https://swatinem.de/blog/learn-di/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/learn-di/">&lt;p&gt;I believe a lot in the saying “learning by doing”, and often the best thing I
can do to better understand a specific problem, topic, library or paradigm, is
to actually implement it myself.&lt;&#x2F;p&gt;
&lt;p&gt;Often its enough to only think about how I would implement it, but sometimes
its good to also write it down, so that’s what I will do here.&lt;&#x2F;p&gt;
&lt;p&gt;So this specific journey started already a few month ago, when at my previous
job, we started to embrace DI (dependency injection), more specifically in the
form of &lt;a href=&quot;https:&#x2F;&#x2F;nestjs.com&#x2F;&quot;&gt;nestjs&lt;&#x2F;a&gt;. The specific question I wanted answered
was: Why does nestjs come with its own module system while JS already has
modules, and the nestjs modules, depending on your project size only ever
have one Service&#x2F;Provider in it. The concept didn’t immediately click for me,
I only got it after I thought about how I would implement a DI solution myself.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So lets go!&lt;&#x2F;p&gt;
&lt;p&gt;Actually the concept behind DI is very simple. In my own words, what it does is
to decouple the &lt;strong&gt;what&lt;&#x2F;strong&gt; from the &lt;strong&gt;how&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;That is also how we can think about the moving parts. The central part in DI is
called the &lt;code&gt;Container&lt;&#x2F;code&gt;. What you do is ask the container to give you the thing
you want, the &lt;strong&gt;what&lt;&#x2F;strong&gt;, which essentially boils down to just a &lt;em&gt;type&lt;&#x2F;em&gt;. This is
most commonly the type of your service, but you can also use it with primitives
such as &lt;code&gt;string&lt;&#x2F;code&gt; or &lt;code&gt;number&lt;&#x2F;code&gt; if you wan’t to manage configuration via DI.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typestack&#x2F;typedi&quot;&gt;typedi&lt;&#x2F;a&gt; calls this a &lt;code&gt;Token&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; The class is empty, its only purpose is to hold the type `T`, the **what**.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Token&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Service &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Define some specific things you want to expose.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;MyConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Token&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;MyService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Token&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Service&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But how do we actually construct the things that we want, the &lt;strong&gt;how&lt;&#x2F;strong&gt;?
Really, the DI container itself does not really need to know itself how things
are created. It just delegates this to any kind of function that does so, which
is called the &lt;code&gt;Provider&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Provider&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;container&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In my example, I want to keep things as simple as possible from the container
point of view, which means it is the responsibility of the &lt;code&gt;Provider&lt;&#x2F;code&gt; to:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;initialize any dependency and&lt;&#x2F;li&gt;
&lt;li&gt;cache&#x2F;memoize things. Thus, we arrive at this very simple &lt;code&gt;Container&lt;&#x2F;code&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Container &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;** The registry holds the `Provider`s keyed by `Token`s. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span&gt;registry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Token&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Provider&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;** Register a new Provider for a Token, the **how**. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Token&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Provider&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;provider)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;** This will give you **what** you want, you don’t need to care **how**. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Token&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(token)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; NOTE: this may throw!
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is essentially a very simple but working DI Container in &lt;strong&gt;12&lt;&#x2F;strong&gt; lines of
code! Lets use it!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;ConcreteService &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;container &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; We can use a static value
&lt;&#x2F;span&gt;&lt;span&gt;container&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;(MyConfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;my config value&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Here, our `Provider` constructs a new value matching the `Service` interface,
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; and uses the DI container to get any dependency value.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Again, neither the DI container itself nor the user does not need to care.
&lt;&#x2F;span&gt;&lt;span&gt;container&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  MyService&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; If we want to have a singleton, we can just wrap this function with some
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; kind of `memoize`, which is left as an excercise for the reader.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;container &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;ConcreteService&lt;&#x2F;span&gt;&lt;span&gt;(container&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(MyConfig))
&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; This will lazily create a new instance:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;myService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;container&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(MyService)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also play with the complete example in the
&lt;a href=&quot;https:&#x2F;&#x2F;www.typescriptlang.org&#x2F;play&#x2F;#code&#x2F;MYGwhgzhAEAqD2BrApgOwDywHzQN4F8AoAFwE8AHZaABQCd4A3ASwBNlbMcBeaACmHipiYJqnYAuaAGFBw0ewCU0LjlgBuQqEgwZQkWNp5C0aAHoAVObgALKrWQBzJhGK1S0a-BAsYxW9AADOkZWdgCYFFJkFmgAI3cAhBRUcIA6aHNTY2hyWiYGMGI7R2dXdx4xAHdoAFkwckwkNHQwVFIsABoaemY2Dlb2rF4FDWyLKwAlEpd2aDBoKu6QvugAM3hDeaS0Lr8qS09Ky3TM7PIAV1iQJmBoeycZjmxeYibUSW2MbC7c5Ykl3rsTgKSR+ZxGEwmMEQVL3UpuVIQZDEF5vH49UK0EbZEz2YjnWioaDQjQmIhjSw2cGVJggEDQJwMKikeDnDLmSrWQqUllsyqtYhdXnQFiCQCYBMQFshosT4NBgGB7OzDscMlkTBcrjcGcjOKjkh83sCPhDIXiCUTobDpmVUg5kfq0AoAIQvazOEZmUzQAByAHlYABRUHumAAWzA7j89EqzuyRHJoiKtFWYGAVAAyuxmOnTet4JIXHlUA4NOTTN6ACLIVbyaAQeBhqgQSjAJi125gkswYX8oSy6DIAAe5HgSNSmkELlqpF0tYcyil1U+6CLogcQ2xAlQ05qpCztBzVAqyGXRoPR83oy0UGkgmAeOQF5uVFw2W3RfOwFetF4muutz5oWrjrkoBCEOSH6StucgGIuiy6LB7DDKMFbQAA6lQCpEucSJzPWwjENqBQgOcyCTno8i0NaDzJrwe5zkwDhdMMyg4AARGG7jbvO0AkWR7HYoQaEABLsMgXSsoYQQYn0ATylOrhfsQMDzIs-FUBGxDAO6JbEv4ATPum8lJuwqbph0wneq0MS4cgvj+JWACSCmUXBrw6pKAwisglCoGwqDAO4GkTmhACCDj6F0YhMHshh7NAzmuUhhixUiICrAsGz6VQdmGKK9lZZKYgyh5Cr2BOMH6OwNGlMh2R7kZEljN6TmZZUVB9pKHlcky+EQOuIDIoIXQdfKrTQAAVrhkqVLQ9T6eCqznIFRGCNANJ+PWjbkSYaGIKIMTwJlARNmG8BMAAXsgASje6OnQOCQ2rF5qlEsO6a0G2eHrPF-j2GAfQTiYVVUWxS53oFj5NfwsjVdR9oogxgjzgoCiEEJaGwKGG20vS4CXbS3EA0U+GLKILitOm4gUdOXFNYuoMGHaDqNdmL5blOXjIKkIDwA4vD0+z6bYkAA&quot;&gt;TypeScript Playground&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;making-it-more-useful&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#making-it-more-useful&quot; aria-label=&quot;Anchor link for: making-it-more-useful&quot;&gt;#&lt;&#x2F;a&gt;
Making it more useful&lt;&#x2F;h1&gt;
&lt;p&gt;Obviously, the example is optimized for simplicity and has some obvious
problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;As noted in the comment, using &lt;code&gt;get&lt;&#x2F;code&gt; without previously &lt;code&gt;register&lt;&#x2F;code&gt;-ing a
&lt;code&gt;Provider&lt;&#x2F;code&gt; will throw.&lt;&#x2F;li&gt;
&lt;li&gt;It will run into infinite recursion when you have circular dependencies. I
would argue to avoid circular dependencies in general. They work only in very
specific circumstances and will blow up and burn your house down when you don’t
take very good care.&lt;&#x2F;li&gt;
&lt;li&gt;We can easily make this &lt;code&gt;async&lt;&#x2F;code&gt; as well.&lt;&#x2F;li&gt;
&lt;li&gt;It might be a good idea to actually bake more sophisticated knowledge about
dependencies into the &lt;code&gt;Container&lt;&#x2F;code&gt; itself, to optimize your dependency graph.&lt;&#x2F;li&gt;
&lt;li&gt;The example is also completely missing things like scopes and inheritance.&lt;&#x2F;li&gt;
&lt;li&gt;You might want to be able to use a &lt;code&gt;Service&lt;&#x2F;code&gt; both as &lt;code&gt;Token&lt;&#x2F;code&gt; and as &lt;code&gt;Provider&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But even implemented like this, it very clearly highlights the main selling
point of DI:
Neither you as a programmer, nor any of your &lt;code&gt;Provider&lt;&#x2F;code&gt;s need to know &lt;strong&gt;how&lt;&#x2F;strong&gt;
other values are constructed. It just works.
This makes it very easy to override one of your &lt;code&gt;Provider&lt;&#x2F;code&gt;s to construct a
&lt;em&gt;mock&lt;&#x2F;em&gt; object for your unit tests. Or to delegate to two different specific
implementations of a service, depending on your configuration, etc.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;circling-back-to-modules&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#circling-back-to-modules&quot; aria-label=&quot;Anchor link for: circling-back-to-modules&quot;&gt;#&lt;&#x2F;a&gt;
Circling back to modules&lt;&#x2F;h1&gt;
&lt;p&gt;Coming back to my original question about modules. We don’t see them in this
very simple example. So lets think a bit about what happens when we start to
scale this, when we have a lot more Providers to worry about, tens, or even
hundreds of them.&lt;&#x2F;p&gt;
&lt;p&gt;We would need to call the &lt;code&gt;register&lt;&#x2F;code&gt; function of our &lt;code&gt;Container&lt;&#x2F;code&gt; for every
single one, which gets tedious very quickly. Also, we want to both have some
kind of encapsulation, and to not have to care about what specific &lt;code&gt;Provider&lt;&#x2F;code&gt;s
there are.&lt;&#x2F;p&gt;
&lt;p&gt;So how can we simplify that? Lets add an extremely simple Module definition,
and extend our &lt;code&gt;register&lt;&#x2F;code&gt; method to deal with it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; Tokens and Providers go hand-in-hand, let’s call it a `Definition`.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Definition&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Token&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  provider&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Provider&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; A `Module` is essentially just a list of definitions.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Definition&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Container &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Token&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Provider&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Module&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;modOrToken&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Token&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Provider&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;isArray&lt;&#x2F;span&gt;&lt;span&gt;(modOrToken)) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;of &lt;&#x2F;span&gt;&lt;span&gt;modOrToken) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(def&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;def&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;provider)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;provider)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; And then we can create and use a `Module`:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;ConfigModule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  { token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;MyConfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;module config value&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;container&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;(ConfigModule)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here is another &lt;a href=&quot;https:&#x2F;&#x2F;www.typescriptlang.org&#x2F;play&#x2F;#code&#x2F;MYGwhgzhAEAqD2BrApgOwDywHzQN4F8AoAFwE8AHZaABQCd4A3ASwBNlbMcBeaACmHipiYJqnYAuaAGFBw0ewCU0LjlgBuQoQD0WuEjQwwqFjXrM2tGAHN40ABZGWAWlFOHxgDTQQyYoEwCGGAwEBBoJmJoMGgAAwARZAAzUXCmQWiAOkJRYnYEsGAqeKTUFMFOPEJoaGJ9VEkEFAxsDSryM1YJU0YOjmbCIh1oAEEYgFl4FgBXH2iwmGQoNGImYJBSaAArSYgIqJAmHeh4BOg2YtLUCEyySmhxqZ9lYdpaMFJ0IuTlsqNSLCwNIRQJAYDIhCIxLQKlUtAAqWFwOxUWjIKwHYi0dZ2eAgFgwYhImJ0boWaIwFCkZAmABG62iDTQZPS0FhWkq0DaTAYYBy0BRaJ2mKeYgA7ncwORMLV0L8sF5ieZ2DLUH8sLwFIDWpNqftgHzUeildheDVGvVpdgvG0SZ0FT1OApJASDi0OdrdfqBTlaLwALYTabIST3QOO6p2F3s8juph6-mG3pq-0sADytAZdTuAceAB89I1OFb2hYAPySO0WB3QqphE68IYvN7pA4N16kP0TNMZhRKXDsmvQBLwKH8QSHM5HE7Jru1Xv9gfhg7peOC0jpCC+XhndKmtBebfWxW0DXzqpEAf4aDIEAb6sD51XFcYtcb4gd1Pp2pFm20ACEJ4vecUWISZaFQRcIFdIh2ThBFYAjGARSYEJoDRBgqFIeBJhZWERQcYh4WgTDsJFIxiC8YjTkEPwIjEKlqlsIIURw7ERXhZlWSjGM9SsXxOBNWpzQLbAw1gO99RAsCIOXA1V3SXi313VAFF-E0EI1aBBgAORTWAAFEnQQ6BfTecN6BFX92SIaDslyfIqAAZXYZgCmrId4EkQVRCsDRoMGT4xGgCB4F9KgIEoYAmCSPVnVQKwYEo0ihAYq8AA9yHgDdMgES4IlGUgwSSKxhWQMUM3QLy4rVE8csOfKnNoFyqB4UV8zQdAGqa6rAWBKBpEEYBgOQTrYyoPsqlqjFJmAGofWjHVY0HeAPKCjFvN7azNEm6AcrkSESrFME9vYdVAUGAB1KggnA7YqCiHYeUW7kQEmZAgVkCF2Bkr0TvywqmCsLx1WUHAACJfXWHKiugZ7XtBk9tF0AAJdhkC8LCoWiCt2FmSbaGm4hDGgVrYaoEziGACM4vDKhohGgpZls2g8gKDxEciYxoFu-FCViABJHaPvkKEalQ3wOfWNhKGMNBgHWUnMkGIYrAhLwxHCJERd5gXds+qFwg3EATlQYcaa5jcoRYeAFmJ+BaOQejRaY5BsqFyFvoTXh2Xq5zRrZmFdD5k4RSoJKIlFhx0MiILvJ8GpUC8EOdqMTZtgiEVXnICDB0mVAZtScCkIJIKQregPoEQUQTGOGJQv9JgAC9kGiROI0puZvESXZDHA5BUoKWhItvIcteRZAwAsTIJrd9gQeJ0r+rzob6eQUdwWF+TNz+wQip7QgEaVzmCTQaAk+unaUR5O7Odu6PohDGZxHe3LF6Kh-mugABtdlcAYs07gKjvAG34jySGBioaA4NsxXSAcVUmoNoBEAALoaF1hvJ8J1-pWHfgfXQ8EDin2QqEcADdkKQ0vryKIrVRAPTzkGZ+hwIYryeGg92CleA+0aqNGqY4cQuxAPAKwfpSArxPEAA&quot;&gt;Playground Link&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There you go! A &lt;code&gt;Module&lt;&#x2F;code&gt; here is just an opaque set of Providers. Again, the
benefit is that you don’t need to care about what is actually in it.&lt;&#x2F;p&gt;
&lt;p&gt;You can use it to group multiple configuration values together, or to mock
&lt;em&gt;all the things&lt;&#x2F;em&gt; at once.&lt;&#x2F;p&gt;
&lt;p&gt;There is one last pitfall though: we only have one registry per container, and
the way it is implemented mains that whatever you get now depends on the
&lt;strong&gt;order&lt;&#x2F;strong&gt; in which you register things. And there could be potentially nasty
surprises depending on your modules, because well, modules are supposed to be
opaque. In some more complex examples you would still have to manually optimize
the order of things.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, this is it. Actually writing this blog post showed me even more how
simple the basic concepts behind DI actually are!&lt;&#x2F;p&gt;
&lt;p&gt;It does get more complicated if you want a richer API, which is &lt;code&gt;async&lt;&#x2F;code&gt;,
supports circular dependencies (please don’t), and if you want to handle
dependencies and memoization in the &lt;code&gt;Container&lt;&#x2F;code&gt; itself.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust 2021: Confidence</title>
        <published>2019-11-05T00:00:00+00:00</published>
        <updated>2019-11-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/rust-2020/"/>
        <id>https://swatinem.de/blog/rust-2020/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/rust-2020/">&lt;p&gt;It is that time of year again. The Rust Team
&lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2019&#x2F;10&#x2F;29&#x2F;A-call-for-blogs-2020.html&quot;&gt;is soliciting ideas&lt;&#x2F;a&gt;
about rusts roadmap for the next years, so here goes mine.&lt;&#x2F;p&gt;
&lt;p&gt;Thinking about the tagline I would give the coming editions, it is this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rust 2015: &lt;strong&gt;Stability&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Rust 2018: &lt;strong&gt;Productivity&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Rust 2021: &lt;strong&gt;Confidence&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I will explain what this means for me, but lets digress a bit first&lt;&#x2F;p&gt;
&lt;h1 id=&quot;about-me&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#about-me&quot; aria-label=&quot;Anchor link for: about-me&quot;&gt;#&lt;&#x2F;a&gt;
About me&lt;&#x2F;h1&gt;
&lt;p&gt;I would describe myself as a Rust developer by heart, but a TypeScript developer
by profession. What does this mean?&lt;&#x2F;p&gt;
&lt;p&gt;Well, I have been &lt;em&gt;watching&lt;&#x2F;em&gt; the Rust project ever since the 2010 Mozilla Summit,
when Graydon Hoare presented a new programming language in a small overcrowded
room full of curious developers.
(Was this the first ever &lt;em&gt;public&lt;&#x2F;em&gt; announcement? I’m not sure…)&lt;&#x2F;p&gt;
&lt;p&gt;I have been &lt;em&gt;following along&lt;&#x2F;em&gt; since Rust still had a &lt;code&gt;libuv&lt;&#x2F;code&gt;-based runtime, and
the syntax was full of strange sigils.
And I am super excited about the progress made since then, and all the great
things the language itself, and especially the community have done.&lt;&#x2F;p&gt;
&lt;p&gt;But there is one problem though: So far, I have been mostly idly standing by,
since apart from some tiny PRs here and there, I don’t really write any
&lt;em&gt;serious&lt;&#x2F;em&gt; Rust. &lt;em&gt;Why is that?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-social-perspective&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-social-perspective&quot; aria-label=&quot;Anchor link for: the-social-perspective&quot;&gt;#&lt;&#x2F;a&gt;
The social perspective&lt;&#x2F;h1&gt;
&lt;p&gt;Well, simply put, there haven’t been any real employment opportunities so far.
I feel that, so far, Rust has been a kind-of grassroots, bottom-up movement.
Most developers I meet have at least heard of Rust, and some are also
actively experimenting with it. But so far I have only met resistance when talking
about Rust to potential employers.&lt;&#x2F;p&gt;
&lt;p&gt;As developers, I would say we have an intrinsic urge to try and experiment with
exciting new tech. Companies have other priorities.&lt;&#x2F;p&gt;
&lt;p&gt;It is only now that I start to see demand from enterprise for engineers that
are working with Rust. However, it is still far from where I would like it to be.
I see a few reasons for that, and most of them have to do with &lt;em&gt;confidence&lt;&#x2F;em&gt;.
Over my professional career, I have mostly worked in smaller companies or teams,
around 2-5 people. Only recently have I been part of a larger team of 15-20
engineers, spread across multiple countries, with a diverse set of backgrounds
and skills. I was in a lead position, mostly focused on product quality,
developer happiness and mentoring. One internal challenge was to gradually
introduce static typing in the form of TypeScript, and to teach and educate the
rest of the team, and seeing the challenges others have with it.
I would also like to thank my former colleagues for all the great feedback I got :-)
While I haven’t done any direct management duties, I have learned a lot about
the bigger picture.&lt;&#x2F;p&gt;
&lt;p&gt;See, one priority of a company focused on a longtime project is to actually find
engineers that can maintain a projects over years to come, and to deliver
features in a timely fashion with a reasonable quality.&lt;&#x2F;p&gt;
&lt;p&gt;For other languages, there is a huge pool of engineers to hire from, but I do
have the feeling that most of them are quite novice. The cynic in me says that,
well, companies get what they pay for. And the salaries here in Vienna are not
that great, with most companies not willing to pay good money for good engineers.&lt;&#x2F;p&gt;
&lt;p&gt;There is a joke about Java, that it makes both experts and novice engineers into
mediocre engineers. I do feel the same about the JS community by now, where it
is very easy to find &lt;em&gt;some&lt;&#x2F;em&gt; engineers, but really hard to find truely &lt;em&gt;good&lt;&#x2F;em&gt; ones.&lt;&#x2F;p&gt;
&lt;p&gt;I am hopeful that this will be different with Rust. I just have the feeling that
both the language itself, as well as the larger community produce some really
&lt;em&gt;high quality&lt;&#x2F;em&gt; software, and just do things &lt;em&gt;right&lt;&#x2F;em&gt;. There is a lot of inspiration
that I take from the Rust ecosystem that I try to apply to TypeScript where
possible.&lt;&#x2F;p&gt;
&lt;p&gt;I do feel that knowing&#x2F;following Rust has made me a better developer in general.
And this is the hope that I have for the future; that Rust &lt;em&gt;empowers&lt;&#x2F;em&gt; people
to become better.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of lamenting the steep learning curve, and fighting the compiler, we
should rather see it as an opportunity to become better engineers.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Hm, I might have digressed a little.
The point I wanted to make is that companies
need to have the &lt;em&gt;confidence&lt;&#x2F;em&gt; to find great talent that works with Rust, and
to have the &lt;em&gt;confidence&lt;&#x2F;em&gt; that betting on Rust is a good choice.
As developer, I want to have the &lt;em&gt;confidence&lt;&#x2F;em&gt; that learning Rust is a great
investment. That there are good employment opportunities, and that learning
Rust actually makes me a better engineer :-)&lt;&#x2F;p&gt;
&lt;p&gt;And well… maybe employers will someday realize they need to pay good salaries
to get good people :-)&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-ecosystem-perspective&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-ecosystem-perspective&quot; aria-label=&quot;Anchor link for: the-ecosystem-perspective&quot;&gt;#&lt;&#x2F;a&gt;
The ecosystem perspective&lt;&#x2F;h1&gt;
&lt;p&gt;From the ecosystem perspective, I can still see that large parts of it are
still very immature and experimental.
It is not as bad as JS, where there are memes about having a new framework every
day of the week.
For some usecases though, I feel there is just too much choice right now.&lt;&#x2F;p&gt;
&lt;p&gt;I want to be &lt;em&gt;confident&lt;&#x2F;em&gt; that the framework &#x2F; library that I pick will be well
supported in the future, and that it is high quality.&lt;&#x2F;p&gt;
&lt;p&gt;I also want to be &lt;em&gt;confident&lt;&#x2F;em&gt; that whatever I do is correct. Here, it is very
important to have good defaults.&lt;&#x2F;p&gt;
&lt;p&gt;One specific thing I can point out that can be improved here is &lt;code&gt;wasm&lt;&#x2F;code&gt;
optimization. I see quite a few guides about this, which mess with compiler flags
and a variety of external tools to make wasm binaries smaller.
TBH, I don’t feel &lt;em&gt;confident&lt;&#x2F;em&gt; doing all that by hand. I want wasm code be optimal
by default, and to integrate well into the host systems exception mechanism etc.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-technical-perspective&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-technical-perspective&quot; aria-label=&quot;Anchor link for: the-technical-perspective&quot;&gt;#&lt;&#x2F;a&gt;
The technical perspective&lt;&#x2F;h1&gt;
&lt;p&gt;From a technical perspective, I feel that Rust is generally on the right track.
Great progress has been made so far, and is still underway. Now it is just a
matter of getting things over the finish line. I will just dump a list of
projects here that are already well defined and I’m excited to read more progress
on them: rust-analyzer, salsa, demand-driven compiler, chalk, polonius, async in
traits, wasi, wasm interface types, etc…&lt;&#x2F;p&gt;
&lt;p&gt;I would like to thank the Rust teams that have recently started to give regular
status updates. It is really great to follow along!&lt;&#x2F;p&gt;
&lt;p&gt;Also, please do take your time! Good things need time! I wish for the Rust developers
to be &lt;em&gt;confident&lt;&#x2F;em&gt; in being able to deliver high quality features when they are
ready, without any time pressure :-)&lt;&#x2F;p&gt;
&lt;h1 id=&quot;tldr&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#tldr&quot; aria-label=&quot;Anchor link for: tldr&quot;&gt;#&lt;&#x2F;a&gt;
TLDR&lt;&#x2F;h1&gt;
&lt;p&gt;I want Rust to become the &lt;em&gt;obvious&lt;&#x2F;em&gt; choice when deciding on the technology for
a new project or a rewrite.&lt;&#x2F;p&gt;
&lt;p&gt;For this, I wish that enterprises can be &lt;em&gt;confident&lt;&#x2F;em&gt; to find good talent,
to be &lt;em&gt;confident&lt;&#x2F;em&gt; that the libraries and frameworks they choose are high quality
and well maintained.
I want both newcomer and experienced developers to be
&lt;em&gt;confident&lt;&#x2F;em&gt; that learning Rust is a great investment, and have the &lt;em&gt;confidence&lt;&#x2F;em&gt;
that they might find employment working with Rust.&lt;&#x2F;p&gt;
&lt;p&gt;Looking into the future, I hope that by 2021, rust will be &lt;strong&gt;mainstream&lt;&#x2F;strong&gt;, and
not only a niche thing that only enthusiasts know about.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Comparing Cypress and Puppeteer</title>
        <published>2019-10-08T00:00:00+00:00</published>
        <updated>2019-10-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/cypress-puppeteer/"/>
        <id>https://swatinem.de/blog/cypress-puppeteer/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/cypress-puppeteer/">&lt;p&gt;&lt;em&gt;Note:&lt;&#x2F;em&gt; I actually wrote most of this post 2 months ago when I did a deep dive
into comparing &lt;a href=&quot;https:&#x2F;&#x2F;www.cypress.io&#x2F;&quot;&gt;cypress&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;pptr.dev&#x2F;&quot;&gt;puppeteer&lt;&#x2F;a&gt;. Unfortunately I cannot give a clear
recommendation on either. You will have to make up your mind yourself, but I hope
I can help a bit by presenting the learnings I did with this experiment,
so here goes…&lt;&#x2F;p&gt;
&lt;h1 id=&quot;cypress-api&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#cypress-api&quot; aria-label=&quot;Anchor link for: cypress-api&quot;&gt;#&lt;&#x2F;a&gt;
Cypress API&lt;&#x2F;h1&gt;
&lt;p&gt;First of, one of the main selling points of cypress is that it is a very
convenient all-in-one solution for e2e testing.
It comes with its own way to structure your tests, and with its own test runner.&lt;&#x2F;p&gt;
&lt;p&gt;The tests themselves are also written in a very special way, which certainly
seems very strange and not quite intuitive at times.&lt;&#x2F;p&gt;
&lt;p&gt;One of the confusion comes from the fact that cypress actually hides the fact
that every interaction with the website is by definition asynchronous.&lt;&#x2F;p&gt;
&lt;p&gt;Cypress test code might frequently look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span&gt;cy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;#A&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;cy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;#B&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;should&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;be.visible&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First of all, I personally dislike the usage of &lt;code&gt;jQuery&lt;&#x2F;code&gt; for selectors and basically
everything else. Second, it uses &lt;code&gt;chai-jQuery&lt;&#x2F;code&gt; in the background, the way it does
that is horrible. cypress’ &lt;code&gt;should&lt;&#x2F;code&gt; method basically takes the chai chainable
&lt;strong&gt;as a string&lt;&#x2F;strong&gt;. So long type checking and typos!
I have also seen the usage of &lt;code&gt;.then()&lt;&#x2F;code&gt; inside some tests. But guess what, while
you can &lt;code&gt;return&lt;&#x2F;code&gt; a &lt;code&gt;Promise&lt;&#x2F;code&gt; from that function, the return value of that
function itself is &lt;strong&gt;not&lt;&#x2F;strong&gt; a &lt;code&gt;Promise&lt;&#x2F;code&gt;. You can’t &lt;code&gt;await&lt;&#x2F;code&gt; that.&lt;&#x2F;p&gt;
&lt;p&gt;It is just now that I write this blog post that I begin to understand how
cypress actually works. Essentially, you just can’t think of the test code you
write as real &lt;em&gt;code&lt;&#x2F;em&gt; that is &lt;em&gt;executed&lt;&#x2F;em&gt;. Rather, the code you write just
defines a list of commands and assertions. And cypress is free to run them and
re-run them however it sees fit. Wow, mind blown.&lt;&#x2F;p&gt;
&lt;p&gt;This is extremely unintuitive for someone who is used to write imperative async
code. You have no control over what is actually run when, and in which context.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;puppeteer-api&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#puppeteer-api&quot; aria-label=&quot;Anchor link for: puppeteer-api&quot;&gt;#&lt;&#x2F;a&gt;
Puppeteer API&lt;&#x2F;h1&gt;
&lt;p&gt;Puppeteer is &lt;strong&gt;very&lt;&#x2F;strong&gt; different! To start with, puppeteer is not a testing
framework. It is an &lt;strong&gt;imperative, async&lt;&#x2F;strong&gt; API to automate a browser. Everything
else is up to you, such as using it for building e2e tests.&lt;&#x2F;p&gt;
&lt;p&gt;In this sense, the puppeteer API makes &lt;strong&gt;a lot more sense&lt;&#x2F;strong&gt;. You know exactly
&lt;em&gt;what&lt;&#x2F;em&gt; runs &lt;em&gt;when&lt;&#x2F;em&gt;, and you have control over the &lt;code&gt;context&lt;&#x2F;code&gt; your code runs in.
You have code which is evaluated &lt;strong&gt;inside&lt;&#x2F;strong&gt; the browser frame, and your normal
testing code runs &lt;strong&gt;outside&lt;&#x2F;strong&gt; the browser.&lt;&#x2F;p&gt;
&lt;p&gt;The distinction, at least to me, is very clear and &lt;em&gt;just makes sense&lt;&#x2F;em&gt;. However,
there are also some limitations and pitfalls to be aware of.
Puppeteer has so called &lt;em&gt;page functions&lt;&#x2F;em&gt; which are evaluated in the context of
the page&#x2F;frame. But they are defined in your code just like normal JS functions.
But they &lt;strong&gt;can’t&lt;&#x2F;strong&gt; reference any values of their containing scope &lt;strong&gt;!!!&lt;&#x2F;strong&gt;.
You have to explicitly pass everything as additional parameter.
It can also lead to surprising and unintuitive errors when using
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;jest&#x2F;issues&#x2F;7962&quot;&gt;code coverage&lt;&#x2F;a&gt;. At least there
well documented workarounds for this.
And with time you will get used to spotting and treating page functions
differently eventually.&lt;&#x2F;p&gt;
&lt;p&gt;There are two more pain points with the puppeteer API.
The first one is that the API is &lt;em&gt;too&lt;&#x2F;em&gt; async. You know you can extend Native
Promises to offer a conveniently chainable API right? Maybe I will blog about
that separately.&lt;&#x2F;p&gt;
&lt;p&gt;The other annoyance is that the API feels a bit inconsistent at times. Up until
&lt;code&gt;&amp;lt;1.20&lt;&#x2F;code&gt;, some convenience methods like &lt;code&gt;page.select(selector, ...options)&lt;&#x2F;code&gt;
and &lt;code&gt;page.click(selector)&lt;&#x2F;code&gt; were only available on the &lt;code&gt;Page&lt;&#x2F;code&gt; object. It would
make a lot more sense to provide such helpers on a generic &lt;code&gt;Parent&lt;&#x2F;code&gt; or &lt;code&gt;Container&lt;&#x2F;code&gt;
type, which could be used to scope everything to a DOM subtree, such as a modal
dialog, because right now such scoping is a huge pain.&lt;&#x2F;p&gt;
&lt;p&gt;Combining such lazy chainable Promises with a &lt;code&gt;Container&lt;&#x2F;code&gt;-focused API, I could
imagine an API like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;page
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;#my-modal&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;.some-other-container&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;.nested-child&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, it is absolutely possible to chain methods onto a custom Promise
type and just await the final result.&lt;&#x2F;p&gt;
&lt;p&gt;But with great power also comes great responsibility. You definitely have more
control with puppeteer, but you also have to take care to correctly use it.
While cypress automatically retries commands until it hits a timeout, with puppeteer
I had to insert explicit &lt;code&gt;.waitForSelector&lt;&#x2F;code&gt; or &lt;code&gt;.waitForNavigation&lt;&#x2F;code&gt; calls quite
frequently.
While this might be tedious and inconvenient, it also makes sense. And it kind
of highlights that you should actually optimize your app for more instantaneous
interactions :-)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;running-non-headless&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#running-non-headless&quot; aria-label=&quot;Anchor link for: running-non-headless&quot;&gt;#&lt;&#x2F;a&gt;
Running Non-Headless&lt;&#x2F;h2&gt;
&lt;p&gt;One big issue I had with puppeteer was the fact that it is basically a different
browser depending on if you run it headless vs when you really have a browser
window.&lt;&#x2F;p&gt;
&lt;p&gt;One problem was &lt;strong&gt;language&lt;&#x2F;strong&gt;. Running a headless puppeteer apparently has no
language at all. I don’t really know what &lt;code&gt;Accept-Language&lt;&#x2F;code&gt; header it provides,
but express’ &lt;code&gt;.acceptsLanguages()&lt;&#x2F;code&gt; turns it into &lt;code&gt;[&quot;*&quot;]&lt;&#x2F;code&gt;, which revealed
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eversport&#x2F;intl-codegen&#x2F;issues&#x2F;39&quot;&gt;a bug&lt;&#x2F;a&gt; in a library that I
maintain, which I then promptly fixed.&lt;&#x2F;p&gt;
&lt;p&gt;Anyhow, &lt;em&gt;headless&lt;&#x2F;em&gt; puppeteer has &lt;em&gt;no&lt;&#x2F;em&gt; language by default, and setting it needs
to be done via the startup parameter &lt;code&gt;--lang=en&lt;&#x2F;code&gt;.
But that on the other hand does not work with &lt;em&gt;non-headless&lt;&#x2F;em&gt; puppeteer, which
instead uses the &lt;code&gt;LANG&lt;&#x2F;code&gt; environment variable.
Well this took me some time to figure out, so as a recommendation, you better
set an explicit language via both startup parameter as well as env.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;working-with-multiple-tabs&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#working-with-multiple-tabs&quot; aria-label=&quot;Anchor link for: working-with-multiple-tabs&quot;&gt;#&lt;&#x2F;a&gt;
Working with multiple tabs&lt;&#x2F;h2&gt;
&lt;p&gt;One thing that puppeteer supports, which is not possible in cypress is to run
multiple &lt;code&gt;Page&lt;&#x2F;code&gt; objects &#x2F; tabs in parallel, well kind of.
In &lt;em&gt;headless&lt;&#x2F;em&gt; puppeteer, you can do that mostly without problems. But when
running in &lt;em&gt;non-headless&lt;&#x2F;em&gt; mode, only the currently focused foreground tab will
actually do anything. Background tabs will just hang indefinitely.
To make it work, you will have to call &lt;code&gt;page.bringToFront()&lt;&#x2F;code&gt; every time you want
to switch focus between pages. And of course make sure that your testing
framework of choice does not run multiple tests in parallel.
This has also caused my a lot of headaches. Depending on what you want to
test, and what testing tools you are using, it might not be worth the hassle to
use multiple pages.
So essentially when your usecase is to run E2E tests, you should try to work with
only one page object &#x2F; tab.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;integrating-with-jest&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#integrating-with-jest&quot; aria-label=&quot;Anchor link for: integrating-with-jest&quot;&gt;#&lt;&#x2F;a&gt;
Integrating with Jest&lt;&#x2F;h2&gt;
&lt;p&gt;Speaking of tools, since we use Jest for all of our other tests, I thought it
would be a good idea to stick with it, since most engineers are already
familiar with it. So I went ahead and set up &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;smooth-code&#x2F;jest-puppeteer&quot;&gt;jest-puppeteer&lt;&#x2F;a&gt;, which was a bit
tedious but otherwise quite straight forward.&lt;&#x2F;p&gt;
&lt;p&gt;Since we have other limitations about testing a website running in a separate
process, and the tests not being independent of each other in the first place,
I went with running jest with &lt;code&gt;--runInBand&lt;&#x2F;code&gt; anyway.
But coming back to what I just said about being limited to only one tab that has
focus, I’m not quite sure how &lt;em&gt;non-headless&lt;&#x2F;em&gt; mode would actually work with the
normal way that jest splits up tests into multiple worker processes.&lt;&#x2F;p&gt;
&lt;p&gt;Oh, and I also
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;smooth-code&#x2F;jest-puppeteer&#x2F;issues&#x2F;272&quot;&gt;filed a bug&lt;&#x2F;a&gt; with
&lt;code&gt;expect-puppeteer&lt;&#x2F;code&gt; which fails to work when using a different &lt;code&gt;Page&lt;&#x2F;code&gt; instance.&lt;&#x2F;p&gt;
&lt;p&gt;Another really severe bug I found was in jest itself, which just
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;jest&#x2F;issues&#x2F;8688&quot;&gt;ignores thrown errors in async &lt;code&gt;beforeAll&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
Wow!&lt;&#x2F;p&gt;
&lt;p&gt;What I also noticed is that sometimes the stack traces of errors are just swallowed up
somehow. Not sure why, but I get hit by the infamous
&lt;code&gt;Node is either not visible or not an HTMLElement&lt;&#x2F;code&gt; quite often without knowing
which command, selector or element is responsible because the error has no stack trace.
This makes it a nightmare to debug. Especially if things run fine for 90% of the
time when run locally but fail all the time when run on CI.&lt;&#x2F;p&gt;
&lt;p&gt;But the problem of unreliable and flaky tests can happen with any tool. Both the
website you are testing as well as the test code itself just needs to written
in a way that either minimizes random failure, or explicitly optimize for it.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;It has definitely been a bumpy ride, but I learned a lot. In the end I am still
quite disappointed with the current state of tools.
I am also still not very confident in all of this considering that it took quite
some time to get tests to pass on CI that were successful locally.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To summarize, puppeteer definitely has the more intuitive imperative async API.&lt;&#x2F;p&gt;
&lt;p&gt;IMO, a declarative test syntax such as cucumber can make a lot of sense, but
not when you are writing JS code and really expect things to be imperative.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Puppeteer is a lot less opinionated, so you can use whatever test runner and
assertion library you want.&lt;&#x2F;p&gt;
&lt;p&gt;Which ofc means that you have to invest time into that. Also, I am not quite
happy with &lt;code&gt;jest-puppeteer&lt;&#x2F;code&gt; and &lt;code&gt;expect-puppeteer&lt;&#x2F;code&gt;, so I might recommend to
just roll your own.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Puppeteer also forces you to be more explicit, especially around the
different cases of &lt;code&gt;waitForXXX&lt;&#x2F;code&gt;. While this might be more tedious at first,
I think in the end its a good thing to think about this, and to optimize the
app under test itself to avoid long wait times.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Really think about if you want to use multiple tabs. It might not be worth the
hassle. Here also the app we are testing is the problem, because the app loses
state when you refresh the page or open the same URL in a different tab.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The debugging experience, at least with the other tools I use puppeteer with
is horrible. As I said in the previous section, I had to struggle a lot with
errors that had absolutely no context, which makes it impossible to debug.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;In the end, the choice is yours. I might still prefer cypress when the goal is
to write E2E tests. The visual test runner that you can pause, and inspect the
real DOM is really convenient to write and debug testcases. The automatic video
recordings also add incredible value for tests run on CI.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I just wish cypress would have done better technological choices. I mean it
largely uses jQuery and is itself still largely written in coffeescript FFS.
Also it does not yet have any predictable release schedule.
I hope electrons move to a predictable release schedule will propagate to all
the projects that depend on it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Oh, and another note on cypress is that its pricing for its premium service
is based around the number of &lt;em&gt;test recordings&lt;&#x2F;em&gt;, which they define as:
&lt;code&gt;[…] each time the it() function is called […]&lt;&#x2F;code&gt;. This definition is totally
broken because you can easily game it by just putting &lt;em&gt;everything&lt;&#x2F;em&gt; into one
giant &lt;code&gt;it&lt;&#x2F;code&gt; function, which runs contrary to the general notion of keeping your
test cases as small as possible. A much better metric would be total runtime
or something like that, since they save all your video recordings which scale
with the runtime of your tests.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Lets talk about Pagination</title>
        <published>2019-08-06T00:00:00+00:00</published>
        <updated>2019-08-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/pagination/"/>
        <id>https://swatinem.de/blog/pagination/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/pagination/">&lt;p&gt;Just recently, I have had to tackle some quite challenging problems related to
pagination. And during some discussions I noticed that some concepts are not
yet clear to some engineers. So I will try to explain all of these.&lt;&#x2F;p&gt;
&lt;p&gt;I will focus on both &lt;strong&gt;page-based&lt;&#x2F;strong&gt;, as well as &lt;strong&gt;cursor-based&lt;&#x2F;strong&gt; pagination,
and explain how both methods work. I will also focus on some common
questions an API consumer might have, and how easy it is to implement, with a
special look at SQL. And lastly, I will look at how these pagination methods
behave when the data itself changes in certain ways.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;prerequisites&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#prerequisites&quot; aria-label=&quot;Anchor link for: prerequisites&quot;&gt;#&lt;&#x2F;a&gt;
Prerequisites&lt;&#x2F;h1&gt;
&lt;p&gt;To make any kind of pagination useful at all, we need to have a sorted list of
entities with some kind of stable sorting order. We do not want the entities to
randomly re-order, unless we explicitly change entities inside of that list.&lt;&#x2F;p&gt;
&lt;p&gt;Lets try to visualize such list, so behold my awesome ascii box drawing skills:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;E = Entity, K: Sort Key, W: Pagination Window, C: Cursor
&lt;&#x2F;span&gt;&lt;span&gt;   ┌──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┐
&lt;&#x2F;span&gt;&lt;span&gt;E: │ A│ B│ C│ D│ E│ F│ G│ H│ I│ J│ K│
&lt;&#x2F;span&gt;&lt;span&gt;   ├──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┤
&lt;&#x2F;span&gt;&lt;span&gt;K: │ 2│ 3│ 5│ 7│ 9│10│10│15│20│28│99│
&lt;&#x2F;span&gt;&lt;span&gt;   └──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┘
&lt;&#x2F;span&gt;&lt;span&gt;          └ W ┘  ↑
&lt;&#x2F;span&gt;&lt;span&gt;                C:9
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So here we have 11 &lt;em&gt;Entities&lt;&#x2F;em&gt;, sorted by their &lt;em&gt;Sort Key&lt;&#x2F;em&gt;. And we a view into
that list, which I call the &lt;em&gt;Pagination Window&lt;&#x2F;em&gt;. I will also talk about a
left-to-right traversal order, so anything &lt;em&gt;left&lt;&#x2F;em&gt; in the drawing can also be
called &lt;em&gt;before&lt;&#x2F;em&gt; or &lt;em&gt;front&lt;&#x2F;em&gt;, and likewise &lt;em&gt;after&lt;&#x2F;em&gt; or &lt;em&gt;end&lt;&#x2F;em&gt; for the things on
the right.
Also, to make things easier, I will assume a &lt;em&gt;Pagination Window&lt;&#x2F;em&gt; of &lt;code&gt;2&lt;&#x2F;code&gt; elements.
And we assume that we are walking this list from front to back.&lt;&#x2F;p&gt;
&lt;p&gt;We also have some meta information that we want to know about, as stated above.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Are there &lt;em&gt;any&lt;&#x2F;em&gt; items &lt;em&gt;before&lt;&#x2F;em&gt; the pagination window, and &lt;em&gt;how many&lt;&#x2F;em&gt;?&lt;&#x2F;li&gt;
&lt;li&gt;Are there &lt;em&gt;any&lt;&#x2F;em&gt; items &lt;em&gt;after&lt;&#x2F;em&gt; the pagination window, and &lt;em&gt;how many&lt;&#x2F;em&gt;?&lt;&#x2F;li&gt;
&lt;li&gt;Can I &lt;em&gt;jump&lt;&#x2F;em&gt; to an &lt;em&gt;absolute&lt;&#x2F;em&gt; or &lt;em&gt;relative&lt;&#x2F;em&gt; position in the list? &lt;em&gt;Absolute&lt;&#x2F;em&gt;
here means to the item &lt;em&gt;at position N&lt;&#x2F;em&gt;, and &lt;em&gt;relative&lt;&#x2F;em&gt; means to the item
&lt;em&gt;with key K&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I will also consider a few mutations to the list, such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Adding a new entity in &lt;em&gt;front&lt;&#x2F;em&gt; of the pagination window&lt;&#x2F;li&gt;
&lt;li&gt;Removing an entity &lt;em&gt;before&lt;&#x2F;em&gt; the pagination window&lt;&#x2F;li&gt;
&lt;li&gt;Moving an entity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As we are walking the list front to back, adding&#x2F;removing new entities to
the &lt;em&gt;back&lt;&#x2F;em&gt; of the list are neither observable, nor do we really care about them.
Unless its a &lt;em&gt;move&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;page-based-pagination&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#page-based-pagination&quot; aria-label=&quot;Anchor link for: page-based-pagination&quot;&gt;#&lt;&#x2F;a&gt;
Page-Based Pagination&lt;&#x2F;h1&gt;
&lt;p&gt;Implementing this kind of pagination is very simple, you just split the list
into equally-sized slices called pages. Obviously, the pagination window is the
page size. Depending on the implementation, you might also chose to allow an
arbitrary offset, but for simplicity we will not.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;┌──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┐
&lt;&#x2F;span&gt;&lt;span&gt;│ A│ B│ C│ D│ E│ F│ G│ H│ I│ J│ K│
&lt;&#x2F;span&gt;&lt;span&gt;├──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┤
&lt;&#x2F;span&gt;&lt;span&gt;│ 2│ 3│ 5│ 7│ 9│10│10│15│20│28│99│
&lt;&#x2F;span&gt;&lt;span&gt;└──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┘
&lt;&#x2F;span&gt;&lt;span&gt; └ 1 ┘ └ 2 ┘ └ 3 ┘ └ 4 ┘ └ 5 ┘ └ 6 ┘
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Answering &lt;em&gt;how many&lt;&#x2F;em&gt; items are &lt;em&gt;before&lt;&#x2F;em&gt; the pagination window is trivial:
It is exactly &lt;code&gt;(p - 1) * w&lt;&#x2F;code&gt; where &lt;code&gt;p&lt;&#x2F;code&gt; is the page number and &lt;code&gt;w&lt;&#x2F;code&gt; is the
page size.&lt;&#x2F;li&gt;
&lt;li&gt;Answering &lt;em&gt;how many&lt;&#x2F;em&gt; items are &lt;em&gt;after&lt;&#x2F;em&gt; the pagination window is trickier, as
we need the total number of items, &lt;code&gt;N&lt;&#x2F;code&gt;: &lt;code&gt;N - (p * w)&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;There is one neat shortcut if you only care about &lt;em&gt;if&lt;&#x2F;em&gt; there are &lt;em&gt;any&lt;&#x2F;em&gt; items
&lt;em&gt;after&lt;&#x2F;em&gt; the pagination window. Just select &lt;code&gt;w + 1&lt;&#x2F;code&gt; items, and if the resulting
slice has more than &lt;code&gt;w&lt;&#x2F;code&gt; items, you know there are items following the
pagination window. Just remove that superfluous item and you are done.&lt;&#x2F;li&gt;
&lt;li&gt;Jumping to an &lt;em&gt;absolute&lt;&#x2F;em&gt; position in the list is trivial, it is on page
&lt;code&gt;floor(p &#x2F; w) + 1&lt;&#x2F;code&gt;, assuming zero-indexed position &lt;code&gt;p&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Jumping to a &lt;em&gt;relative&lt;&#x2F;em&gt; position is non-trivial, it basically requires you to
do a binary search, usually in &lt;code&gt;O(log n)&lt;&#x2F;code&gt; time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;changing-data&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#changing-data&quot; aria-label=&quot;Anchor link for: changing-data&quot;&gt;#&lt;&#x2F;a&gt;
Changing Data&lt;&#x2F;h2&gt;
&lt;p&gt;One problem with page-based pagination is how it reacts to changes in the data.&lt;&#x2F;p&gt;
&lt;p&gt;Lets look at insertion and deletion &lt;em&gt;before&lt;&#x2F;em&gt; the pagination window.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;┌──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┐
&lt;&#x2F;span&gt;&lt;span&gt;│ A│ B│ C│ D│ E│ F│ G│ H│ I│ J│ K│
&lt;&#x2F;span&gt;&lt;span&gt;├──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┤
&lt;&#x2F;span&gt;&lt;span&gt;│ 2│ 3│ 5│ 7│ 9│10│10│15│20│28│99│
&lt;&#x2F;span&gt;&lt;span&gt;└──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┘
&lt;&#x2F;span&gt;&lt;span&gt;             └ W ┘
&lt;&#x2F;span&gt;&lt;span&gt;  ↓ inserted here
&lt;&#x2F;span&gt;&lt;span&gt;┌──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┐
&lt;&#x2F;span&gt;&lt;span&gt;│ X│ A│ B│ C│ D│ E│ F│ G│ H│ I│ J│ K│
&lt;&#x2F;span&gt;&lt;span&gt;├──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┤
&lt;&#x2F;span&gt;&lt;span&gt;│ 1│ 2│ 3│ 5│ 7│ 9│10│10│15│20│28│99│
&lt;&#x2F;span&gt;&lt;span&gt;└──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┘
&lt;&#x2F;span&gt;&lt;span&gt;                   └ W ┘
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, we moved one page right, but the whole list was shifted by
one position, which means we see &lt;code&gt;F&lt;&#x2F;code&gt; twice. Not good, not terrible.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;┌──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┐
&lt;&#x2F;span&gt;&lt;span&gt;│ A│ B│ C│ D│ E│ F│ G│ H│ I│ J│ K│
&lt;&#x2F;span&gt;&lt;span&gt;├──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┤
&lt;&#x2F;span&gt;&lt;span&gt;│ 2│ 3│ 5│ 7│ 9│10│10│15│20│28│99│
&lt;&#x2F;span&gt;&lt;span&gt;└──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┘
&lt;&#x2F;span&gt;&lt;span&gt;  ↑          └ W ┘
&lt;&#x2F;span&gt;&lt;span&gt;  └ removed this
&lt;&#x2F;span&gt;&lt;span&gt;┌──┬──┬──┬──┬──┬──┬──┬──┬──┬──┐
&lt;&#x2F;span&gt;&lt;span&gt;│ B│ C│ D│ E│ F│ G│ H│ I│ J│ K│
&lt;&#x2F;span&gt;&lt;span&gt;├──┼──┼──┼──┼──┼──┼──┼──┼──┼──┤
&lt;&#x2F;span&gt;&lt;span&gt;│ 3│ 5│ 7│ 9│10│10│15│20│28│99│
&lt;&#x2F;span&gt;&lt;span&gt;└──┴──┴──┴──┴──┴──┴──┴──┴──┴──┘
&lt;&#x2F;span&gt;&lt;span&gt;                   └ W ┘
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, the whole list was shifted, but in this case we have a more severe
problem, since element &lt;code&gt;G&lt;&#x2F;code&gt; was skipped completely.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementation&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#implementation&quot; aria-label=&quot;Anchor link for: implementation&quot;&gt;#&lt;&#x2F;a&gt;
Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;Implementing page-based pagination is really trivial, both in memory, as well as
in SQL, as you have the dedicated syntax &lt;code&gt;LIMIT&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;OFFSET&lt;&#x2F;code&gt; exactly for this
use case. However, jumping to a relative position is complex.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;cursor-based-pagination&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#cursor-based-pagination&quot; aria-label=&quot;Anchor link for: cursor-based-pagination&quot;&gt;#&lt;&#x2F;a&gt;
Cursor-Based Pagination&lt;&#x2F;h1&gt;
&lt;p&gt;With cursor based pagination, you have a &lt;em&gt;Cursor&lt;&#x2F;em&gt; that points to a position
on the &lt;strong&gt;sort axis&lt;&#x2F;strong&gt;. With cursors, you can usually select items &lt;em&gt;before&lt;&#x2F;em&gt; and
&lt;em&gt;after&lt;&#x2F;em&gt; the cursor, since we focus on left to right traversal, we will only
consider items &lt;em&gt;after&lt;&#x2F;em&gt; the cursor.&lt;&#x2F;p&gt;
&lt;p&gt;Navigating using cursors is possible when in addition to the item itself, we
return the &lt;code&gt;cursor&lt;&#x2F;code&gt; of the item as well. In the next step, we set our new cursor
to the cursor of the &lt;em&gt;last&lt;&#x2F;em&gt; item, and query again.&lt;&#x2F;p&gt;
&lt;p&gt;One popular example of cursor-based pagination is the
&lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;relay&#x2F;graphql&#x2F;connections.htm&quot;&gt;relay connections&lt;&#x2F;a&gt;
specification which is popular when dealing with graphql.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;unique-cursors&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#unique-cursors&quot; aria-label=&quot;Anchor link for: unique-cursors&quot;&gt;#&lt;&#x2F;a&gt;
Unique Cursors&lt;&#x2F;h2&gt;
&lt;p&gt;One important restriction cursor based pagination has is that the cursor itself
needs to be &lt;em&gt;unique&lt;&#x2F;em&gt;! Why? Lets demonstrate with an example.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;┌──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┐
&lt;&#x2F;span&gt;&lt;span&gt;│ A│ B│ C│ D│ E│ F│ G│ H│ I│ J│ K│
&lt;&#x2F;span&gt;&lt;span&gt;├──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┤
&lt;&#x2F;span&gt;&lt;span&gt;│ 2│ 3│ 5│ 7│ 9│10│10│15│20│28│99│
&lt;&#x2F;span&gt;&lt;span&gt;└──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┘
&lt;&#x2F;span&gt;&lt;span&gt;           ↑ └ W ┘
&lt;&#x2F;span&gt;&lt;span&gt;          C:7
&lt;&#x2F;span&gt;&lt;span&gt;┌──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┐
&lt;&#x2F;span&gt;&lt;span&gt;│ A│ B│ C│ D│ E│ F│ G│ H│ I│ J│ K│
&lt;&#x2F;span&gt;&lt;span&gt;├──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┤
&lt;&#x2F;span&gt;&lt;span&gt;│ 2│ 3│ 5│ 7│ 9│10│10│15│20│28│99│
&lt;&#x2F;span&gt;&lt;span&gt;└──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┘
&lt;&#x2F;span&gt;&lt;span&gt;                 ↑  ↑ └ W ┘
&lt;&#x2F;span&gt;&lt;span&gt;                 C:10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, first we were at cursor &lt;code&gt;7&lt;&#x2F;code&gt;, and selected 2 items &lt;em&gt;after&lt;&#x2F;em&gt; it. No problem
so far. The last item &lt;code&gt;F&lt;&#x2F;code&gt; has the cursor &lt;code&gt;10&lt;&#x2F;code&gt;.
Lets move one step further, selecting 2 items &lt;em&gt;after&lt;&#x2F;em&gt; &lt;code&gt;F&lt;&#x2F;code&gt;, using its cursor &lt;code&gt;10&lt;&#x2F;code&gt;.
Now we have the problem that we skipped &lt;code&gt;G&lt;&#x2F;code&gt;, because its cursor is duplicated
to the one of &lt;code&gt;F&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So depending on your use case, if the property you want to sort by is not unique,
such as a typical &lt;em&gt;modification time&lt;&#x2F;em&gt;, you have to combine it with another
property that is, such as &lt;em&gt;uuid&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-at-metadata&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#getting-at-metadata&quot; aria-label=&quot;Anchor link for: getting-at-metadata&quot;&gt;#&lt;&#x2F;a&gt;
Getting at metadata&lt;&#x2F;h2&gt;
&lt;p&gt;Answering some meta questions becomes a lot more complicated with cursor based
pagination.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Knowing &lt;em&gt;how many&lt;&#x2F;em&gt; items are &lt;em&gt;before&lt;&#x2F;em&gt; or &lt;em&gt;after&lt;&#x2F;em&gt; the pagination window
requires you to &lt;em&gt;actually count them&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Depending on how the cursor itself is implemented, it might be easier to
count &lt;em&gt;all&lt;&#x2F;em&gt; the items and use math: &lt;code&gt;before = all - after - w&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The same shortcut to know &lt;em&gt;if&lt;&#x2F;em&gt; there are any items &lt;em&gt;after&lt;&#x2F;em&gt; the pagination
window also applies to cursor-based pagination. Just select &lt;code&gt;w + 1&lt;&#x2F;code&gt; elements,
and if the result set has more than &lt;code&gt;w&lt;&#x2F;code&gt;, there &lt;em&gt;are&lt;&#x2F;em&gt; items &lt;em&gt;after&lt;&#x2F;em&gt; the
pagination window.&lt;&#x2F;li&gt;
&lt;li&gt;I also found a shortcut to know &lt;em&gt;if&lt;&#x2F;em&gt; there are any items &lt;em&gt;before&lt;&#x2F;em&gt; the cursor.
Here we rely on the fact that the cursor itself needs to be unique. So instead
of selecting only items following the cursor, I use an &lt;em&gt;inclusive&lt;&#x2F;em&gt; selection
which might also return the item that &lt;em&gt;exactly&lt;&#x2F;em&gt; matches the cursor. If it does,
I know there are items &lt;em&gt;before&lt;&#x2F;em&gt; the cursor. Also make sure to remove this
superfluous item. If there is no item matching the cursor &lt;em&gt;exactly&lt;&#x2F;em&gt;, you have
to fall back to counting however.&lt;&#x2F;li&gt;
&lt;li&gt;Jumping to a &lt;em&gt;relative&lt;&#x2F;em&gt; position in the list is essentially the same as normal
cursor based navigation. Your cursor just happens to be the relative position
you want to jump to.&lt;&#x2F;li&gt;
&lt;li&gt;Jumping to an &lt;em&gt;absolute&lt;&#x2F;em&gt; position however is more complex. I think it can be
done with a binary search, but each iteration would need to answer the question
&lt;em&gt;what is my absolute position&lt;&#x2F;em&gt;, which itself is not a trivial question as shown
above.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;changing-data-1&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#changing-data-1&quot; aria-label=&quot;Anchor link for: changing-data-1&quot;&gt;#&lt;&#x2F;a&gt;
Changing Data&lt;&#x2F;h2&gt;
&lt;p&gt;As the cursor denotes a &lt;em&gt;relative&lt;&#x2F;em&gt; position inside the list, it is immune to
changes in the data. Even removing the element under the cursor is not a problem.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;┌──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┐
&lt;&#x2F;span&gt;&lt;span&gt;│ A│ B│ C│ D│ E│ F│ G│ H│ I│ J│ K│
&lt;&#x2F;span&gt;&lt;span&gt;├──┼──┼──┼──┼──┼──┼──┼──┼──┼──┼──┤
&lt;&#x2F;span&gt;&lt;span&gt;│ 2│ 3│ 5│ 7│ 9│10│12│15│20│28│99│
&lt;&#x2F;span&gt;&lt;span&gt;└──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┘
&lt;&#x2F;span&gt;&lt;span&gt;             └ W ┘
&lt;&#x2F;span&gt;&lt;span&gt;                 ↑ removed this
&lt;&#x2F;span&gt;&lt;span&gt;┌──┬──┬──┬──┬──┬──┬──┬──┬──┬──┐
&lt;&#x2F;span&gt;&lt;span&gt;│ A│ B│ C│ D│ E│ G│ H│ I│ J│ K│
&lt;&#x2F;span&gt;&lt;span&gt;├──┼──┼──┼──┼──┼──┼──┼──┼──┼──┤
&lt;&#x2F;span&gt;&lt;span&gt;│ 2│ 3│ 5│ 7│ 9│12│15│20│28│99│
&lt;&#x2F;span&gt;&lt;span&gt;└──┴──┴──┴──┴──┴──┴──┴──┴──┴──┘
&lt;&#x2F;span&gt;&lt;span&gt;               ↑└ W ┘
&lt;&#x2F;span&gt;&lt;span&gt;              C:10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since the cursor of &lt;code&gt;F&lt;&#x2F;code&gt; is &lt;code&gt;10&lt;&#x2F;code&gt;, we can still query everything &lt;em&gt;after&lt;&#x2F;em&gt; &lt;code&gt;10&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementation-1&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#implementation-1&quot; aria-label=&quot;Anchor link for: implementation-1&quot;&gt;#&lt;&#x2F;a&gt;
Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;Since cursors themselves give a &lt;em&gt;relative&lt;&#x2F;em&gt; position inside the list, implementing
this in-memory requires doing a binary search.&lt;&#x2F;p&gt;
&lt;p&gt;Implementation in SQL is also quite simple, at least for a simple non-compound
cursor. You just apply a simple &lt;code&gt;WHERE&lt;&#x2F;code&gt; condition.
I have found
&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;38017054&#x2F;mysql-cursor-based-pagination-with-multiple-columns&#x2F;38017813#38017813&quot;&gt;this stack overflow post&lt;&#x2F;a&gt;
to be a really good in explaining how to deal with compound cursors.&lt;&#x2F;p&gt;
&lt;p&gt;In general, after implementing cursor based pagination, together with the
optimizations explained above, I can say it is a lot of work, with a lot of
details you have to pay attention to.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion-and-recommendations&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion-and-recommendations&quot; aria-label=&quot;Anchor link for: conclusion-and-recommendations&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion and Recommendations&lt;&#x2F;h1&gt;
&lt;p&gt;Lets repeat some important things.&lt;&#x2F;p&gt;
&lt;p&gt;First of all, both approaches require you to have a stable sort order.
Furthermore, cursor-based pagination additionally needs to have a &lt;em&gt;unique&lt;&#x2F;em&gt;
sort key for each entity, that you also have to expose.&lt;&#x2F;p&gt;
&lt;p&gt;So for this reason, good performance requires that you either have the data
pre-sorted, or have some kind of index, especially in the case of SQL.&lt;&#x2F;p&gt;
&lt;p&gt;This also means that sorting by some computed property or one that is not indexed
can result in bad performance.&lt;&#x2F;p&gt;
&lt;p&gt;Cursor-based pagination makes &lt;em&gt;relative&lt;&#x2F;em&gt; jumps easier, while page-based
pagination makes &lt;em&gt;absolute&lt;&#x2F;em&gt; jumps easier.&lt;&#x2F;p&gt;
&lt;p&gt;Both methods make it easy to implement the typical &lt;em&gt;previous&lt;&#x2F;em&gt; &#x2F; &lt;em&gt;next&lt;&#x2F;em&gt;
navigation. But cursor-based navigation makes it more resilient to changing data.&lt;&#x2F;p&gt;
&lt;p&gt;Like always, it is a matter of tradeoffs and use-cases.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Do you want to support &lt;em&gt;absolute&lt;&#x2F;em&gt; jumps, or &lt;em&gt;page links&lt;&#x2F;em&gt;, go with &lt;em&gt;page-based&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Do you want to support &lt;em&gt;relative&lt;&#x2F;em&gt; jumps, go &lt;em&gt;cursor-based&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Do you want to have more consistent data when having typical &lt;em&gt;previous&lt;&#x2F;em&gt; &#x2F; &lt;em&gt;next&lt;&#x2F;em&gt;,
buttons, use &lt;em&gt;cursor-based&lt;&#x2F;em&gt; pagination.&lt;&#x2F;li&gt;
&lt;li&gt;Do you want something that is both easy to use and to implement? And also
possibly more performant? Go &lt;em&gt;page-based&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And also summarize the problems around changing data:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Considering left-to-right traversal, both are fine with &lt;em&gt;appending&lt;&#x2F;em&gt; data.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Removing&lt;&#x2F;em&gt; data can lead to skipped items when using &lt;em&gt;page-based&lt;&#x2F;em&gt; pagination.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Prepending&lt;&#x2F;em&gt; data can lead to &lt;em&gt;double&lt;&#x2F;em&gt; processing of items when using &lt;em&gt;page-based&lt;&#x2F;em&gt; pagination.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Considering these limitations, when you are dealing with &lt;em&gt;prepend only&lt;&#x2F;em&gt; data,
starting at the front again once you finished traversing should make sure you
get &lt;em&gt;all&lt;&#x2F;em&gt; the data.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;After implementing both page-based and cursor-based pagination, and now that I
have written down all my thoughts about it, I do feel a bit more comfortable
with the choice we made for &lt;em&gt;cursor-based&lt;&#x2F;em&gt; pagination.
But for &lt;em&gt;one reason only&lt;&#x2F;em&gt;: the data we return depends on &lt;em&gt;the current time&lt;&#x2F;em&gt;, so
it can have unpredictable data removal, which can lead to missed items when
using page-based pagination as shown above.&lt;&#x2F;p&gt;
&lt;p&gt;Otherwise I would probably go with &lt;em&gt;page-based&lt;&#x2F;em&gt; pagination, for reasons of
performance and ease of implementation. Which also reminds me to rant about the
fact that cursor-based pagination is really complicated to implement using SQL.&lt;&#x2F;p&gt;
&lt;p&gt;One thing we still struggle with is performance. Not because of the pagination
method we chose but rather that our sort order depends on a non-indexed compound
value. Meh. So we come full circle to the matter of caching and cache invalidation :-)&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Announcing intl-codegen 2</title>
        <published>2019-07-10T00:00:00+00:00</published>
        <updated>2019-07-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/intl-codegen-2/"/>
        <id>https://swatinem.de/blog/intl-codegen-2/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/intl-codegen-2/">&lt;p&gt;I have been thinking for a long time about how &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eversport&#x2F;intl-codegen&quot;&gt;intl-codegen&lt;&#x2F;a&gt; 2 would look like,
and some time ago I went about implementing it.
Since then I have validated the concepts by migrating the &lt;a href=&quot;https:&#x2F;&#x2F;eversports.com&quot;&gt;eversports&lt;&#x2F;a&gt; codebase
to it. The migration was quite painless, with some mechanical steps.&lt;&#x2F;p&gt;
&lt;p&gt;Since it is a proper &lt;em&gt;version 2&lt;&#x2F;em&gt;, it does have some breaking changes, together
with some exciting features, so lets dive in.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;changes-in-v2&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#changes-in-v2&quot; aria-label=&quot;Anchor link for: changes-in-v2&quot;&gt;#&lt;&#x2F;a&gt;
Changes in v2&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;fluent-syntax-support&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#fluent-syntax-support&quot; aria-label=&quot;Anchor link for: fluent-syntax-support&quot;&gt;#&lt;&#x2F;a&gt;
Fluent syntax support&lt;&#x2F;h2&gt;
&lt;p&gt;One very big item here is support for the &lt;a href=&quot;https:&#x2F;&#x2F;projectfluent.org&#x2F;&quot;&gt;fluent&lt;&#x2F;a&gt; syntax. Well, limited support
that is. Fluent has some features that are not yet supported by &lt;code&gt;intl-codegen&lt;&#x2F;code&gt;,
but might be in the future. One example is missing support for &lt;code&gt;terms&lt;&#x2F;code&gt; and
referencing other messages. Another feature that is missing is support for fluent
&lt;code&gt;attributes&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;MessageFormat&lt;&#x2F;code&gt; is still supported, and has some nice improvements in this
release.&lt;&#x2F;p&gt;
&lt;p&gt;But in general, I consider fluent to be the better format in general, and I will
likely drop &lt;code&gt;MessageFormat&lt;&#x2F;code&gt; support at some point when the tooling around fluent
matures.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;proper-typing-support&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#proper-typing-support&quot; aria-label=&quot;Anchor link for: proper-typing-support&quot;&gt;#&lt;&#x2F;a&gt;
Proper typing support&lt;&#x2F;h2&gt;
&lt;p&gt;Another very big item is support for proper types. Every placeholder that is
used in translations needs to be declared beforehand. The easiest way to do so
is via doc comments in fluent syntax.
There is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;projectfluent&#x2F;fluent&#x2F;issues&#x2F;140&quot;&gt;proposal&lt;&#x2F;a&gt; to
properly add these type of comments to the fluent syntax, but it is not final
yet.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;fluent&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-fluent &quot;&gt;&lt;code class=&quot;language-fluent&quot; data-lang=&quot;fluent&quot;&gt;&lt;span&gt;# $value (monetary)
&lt;&#x2F;span&gt;&lt;span&gt;fluent-monetary = a monetary value: { $value }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So far, it supports the types &lt;code&gt;string&lt;&#x2F;code&gt;, &lt;code&gt;number&lt;&#x2F;code&gt;, &lt;code&gt;datetime&lt;&#x2F;code&gt;, &lt;code&gt;monetary&lt;&#x2F;code&gt; and
&lt;code&gt;element&lt;&#x2F;code&gt;. Together with these changes, there was also a split to separate the
message &lt;code&gt;template&lt;&#x2F;code&gt; declaration from the translations.&lt;&#x2F;p&gt;
&lt;p&gt;When using &lt;code&gt;MessageFormat&lt;&#x2F;code&gt;, there is an explicit API to declare messages and
the placeholder types.&lt;&#x2F;p&gt;
&lt;p&gt;Having type declarations improves both the typescript side of things, since it
gives better code completion and errors.
But it also made it possible to better check the correctness of the translations
themselves.
At &lt;a href=&quot;https:&#x2F;&#x2F;eversports.com&quot;&gt;eversports&lt;&#x2F;a&gt;, we have a small team of translators, which are not engineers
and do struggle with the &lt;code&gt;MessageFormat&lt;&#x2F;code&gt; syntax a bit and sometimes translate
parts of the syntax itself.&lt;&#x2F;p&gt;
&lt;p&gt;I plan to further improve this, such as validating the plural rules, since
translators that struggle with the syntax actually translate the &lt;code&gt;one&lt;&#x2F;code&gt; or &lt;code&gt;other&lt;&#x2F;code&gt;
selectors.&lt;&#x2F;p&gt;
&lt;p&gt;Some examples of useful errors:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;test.tsx (15,24): Type &amp;#39;number&amp;#39; is not assignable to type &amp;#39;string&amp;#39;.
&lt;&#x2F;span&gt;&lt;span&gt;[wrong-type: template&#x2F;msgfmt-string-as-plural]: Messageformat `plural` selector is only valid for type &amp;quot;number&amp;quot;, but parameter `param` has type `string`.
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 1 | {param} {param,plural,
&lt;&#x2F;span&gt;&lt;span&gt;    |         ^^^^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 2 |   one {parameter}
&lt;&#x2F;span&gt;&lt;span&gt;    | ^^^^^^^^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 3 |   other {parameters}
&lt;&#x2F;span&gt;&lt;span&gt;    | ^^^^^^^^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 4 | }
&lt;&#x2F;span&gt;&lt;span&gt;| ^^
&lt;&#x2F;span&gt;&lt;span&gt;[missing-other: template&#x2F;msgfmt]: MessageFormat requires an `other` case to be defined.
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 1 | selector: {param, select, foo {its foo} bar {its bar}}.
&lt;&#x2F;span&gt;&lt;span&gt;    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All these checks have actually caught some real bugs, both in our typescript
code and especially inside of the translation strings themselves.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;proper-language-detection&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#proper-language-detection&quot; aria-label=&quot;Anchor link for: proper-language-detection&quot;&gt;#&lt;&#x2F;a&gt;
Proper language detection&lt;&#x2F;h2&gt;
&lt;p&gt;One pain points with &lt;code&gt;intl-codegen 1.x&lt;&#x2F;code&gt; was that it was only able to load the
defined list of locales, and one had to build language detection around it.
Version 2 now ships with a small runtime that uses &lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;fluent-langneg&quot;&gt;fluent-langneg&lt;&#x2F;a&gt; to do proper
language detection, based on either the &lt;code&gt;Accept-Language&lt;&#x2F;code&gt; header,
or the &lt;code&gt;navigator.languages&lt;&#x2F;code&gt; property.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;better-formatting-and-pluralization&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#better-formatting-and-pluralization&quot; aria-label=&quot;Anchor link for: better-formatting-and-pluralization&quot;&gt;#&lt;&#x2F;a&gt;
Better formatting and pluralization&lt;&#x2F;h2&gt;
&lt;p&gt;Related to this, version 1 also had a severe design limitation, as it hardcoded
the formatting based on the translation. So it would use the same formatting
for the &lt;code&gt;de&lt;&#x2F;code&gt; language, even though the formatting differs quite a bit based on
the locale. When formatting monetary values, you have &lt;code&gt;1.234,56 €&lt;&#x2F;code&gt; for &lt;code&gt;de-de&lt;&#x2F;code&gt;,
&lt;code&gt;€ 1.234,56&lt;&#x2F;code&gt; for &lt;code&gt;de-at&lt;&#x2F;code&gt; and &lt;code&gt;CHF 1’234.56&lt;&#x2F;code&gt; for &lt;code&gt;de-ch&lt;&#x2F;code&gt;, but it is still the
same language.&lt;&#x2F;p&gt;
&lt;p&gt;In version 2, the &lt;code&gt;loaded&lt;&#x2F;code&gt; language and the locale used for the &lt;code&gt;formatter&lt;&#x2F;code&gt; are
now decoupled, so you should always get the correct formatting for the locale
you requested.&lt;&#x2F;p&gt;
&lt;p&gt;Apart from formatting, version 2 also has proper support for pluralization. This
means you can use the &lt;code&gt;one&lt;&#x2F;code&gt; selector instead of an explicit &lt;code&gt;=0&lt;&#x2F;code&gt;, or any of the
other &lt;strong&gt;6&lt;&#x2F;strong&gt; cases. There is also support for &lt;code&gt;ordinal&lt;&#x2F;code&gt; cases. This all depends
on platform support for &lt;code&gt;Intl.PluralRules&lt;&#x2F;code&gt;, so the developer needs to provide
appropriate polyfills if support for old platforms is a priority.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;split-out-react-support&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#split-out-react-support&quot; aria-label=&quot;Anchor link for: split-out-react-support&quot;&gt;#&lt;&#x2F;a&gt;
Split out react support&lt;&#x2F;h2&gt;
&lt;p&gt;All the react-specific codegen is now output into a separate &lt;code&gt;react&lt;&#x2F;code&gt; file. So
it is possible to use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eversport&#x2F;intl-codegen&quot;&gt;intl-codegen&lt;&#x2F;a&gt; without react, at least when you do not
declare &lt;code&gt;element&lt;&#x2F;code&gt;-type placeholders.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;some-recommendations-and-best-practices&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#some-recommendations-and-best-practices&quot; aria-label=&quot;Anchor link for: some-recommendations-and-best-practices&quot;&gt;#&lt;&#x2F;a&gt;
Some recommendations and best practices&lt;&#x2F;h1&gt;
&lt;p&gt;There are some clear dos and don’ts that pop into your eyes when you are
involved with localization tools, which are not that obvious to other engineers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;put-everything-into-translations&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#put-everything-into-translations&quot; aria-label=&quot;Anchor link for: put-everything-into-translations&quot;&gt;#&lt;&#x2F;a&gt;
Put &lt;em&gt;everything&lt;&#x2F;em&gt; into translations&lt;&#x2F;h2&gt;
&lt;p&gt;I still often see engineers that are translating single words, and then building
those fragments into sentences in code.
A constructed example would be &lt;code&gt;_(&quot;Hello, &quot;) + name + _(&quot;. How are you?&quot;)&lt;&#x2F;code&gt;.
A more common, and less obvious, case is when you are just combining formatted
values with some whitespace and punctuation such as &lt;code&gt;{date} - {time}&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The problems you could potentially have here are not that obvious if you are
primarily working with germanic languages. But there are other languages out
there, which change the order of some placeholders based on grammar. Or
left-to-right languages. Some languages may want to use different punctuation
symbols. And so on… So the easiest thing to do is to just put &lt;strong&gt;everything&lt;&#x2F;strong&gt;
into a translation string. Also your translators will thank you, because it
gives them both more freedom and more context to know what needs to be done.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;use-formatters&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#use-formatters&quot; aria-label=&quot;Anchor link for: use-formatters&quot;&gt;#&lt;&#x2F;a&gt;
Use formatters&lt;&#x2F;h2&gt;
&lt;p&gt;Similar to the case above, I still see engineers that are not using formatters
properly. Things like formatting a &lt;code&gt;datetime&lt;&#x2F;code&gt; value ahead-of-time, and putting
it into the translation as a &lt;code&gt;string&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Or the quite frequent case where engineers are not aware of the builtin
&lt;code&gt;monetary&lt;&#x2F;code&gt; support, and are creating translation strings such as
&lt;code&gt;{value}{currency}&lt;&#x2F;code&gt;, which will be wrongly formatted for 2 out of the 3 german
languages I highlighted above.&lt;&#x2F;p&gt;
&lt;p&gt;One problem, both related to formatters and to translation context is
&lt;code&gt;element&lt;&#x2F;code&gt;-type placeholders.
I considered experimenting with a feature called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eversport&#x2F;intl-codegen&#x2F;issues&#x2F;15&quot;&gt;DOM Overlays&lt;&#x2F;a&gt;, but decided to
postpone it to later. Essentially, DOM Overlays would give a much larger context
to translators, and would make it more easily possible to put some placeholders
into styled elements, with proper typing support. Maybe :-D&lt;&#x2F;p&gt;
&lt;h2 id=&quot;establish-guidelines&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#establish-guidelines&quot; aria-label=&quot;Anchor link for: establish-guidelines&quot;&gt;#&lt;&#x2F;a&gt;
Establish guidelines&lt;&#x2F;h2&gt;
&lt;p&gt;Apart from the two cases above, to put &lt;em&gt;everything&lt;&#x2F;em&gt; into the translations, and
to properly use formatters. There is also the question of how to structure
translations. How to name them? How to deal with conditional placeholders?&lt;&#x2F;p&gt;
&lt;p&gt;How should you name your translation keys?
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eversport&#x2F;intl-codegen&quot;&gt;intl-codegen&lt;&#x2F;a&gt; is a little bit opinionated already in this regard. Mainly because
there is a syntactic difference between identifiers in js, and translation keys.
&lt;code&gt;a-translation-key&lt;&#x2F;code&gt; will become &lt;code&gt;aTranslationKey()&lt;&#x2F;code&gt;.
In general, I would recommend using dashed translation keys, as in this example.
Give the keys descriptive names that give some context. Do not name the key
&lt;code&gt;continue&lt;&#x2F;code&gt;, but rather &lt;code&gt;registration-finished-continue-button&lt;&#x2F;code&gt;, or something. :-D&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Database Access</title>
        <published>2019-06-18T00:00:00+00:00</published>
        <updated>2019-06-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/database-access/"/>
        <id>https://swatinem.de/blog/database-access/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/database-access/">&lt;p&gt;I had the pleasure recently of looking at a few js&#x2F;typescript solutions to
database access, mostly focused on SQL.&lt;&#x2F;p&gt;
&lt;p&gt;I was tasked with evaluating &lt;a href=&quot;https:&#x2F;&#x2F;typeorm.io&#x2F;&quot;&gt;TypeORM&lt;&#x2F;a&gt;, which is gaining quite some traction,
in comparison to &lt;a href=&quot;https:&#x2F;&#x2F;knexjs.org&#x2F;&quot;&gt;knex&lt;&#x2F;a&gt;, which we currently use.&lt;&#x2F;p&gt;
&lt;p&gt;While knex is more focused on being a generic query-builder, typeorm is a fully
featured ORM that can model entities and their relation, but with additional
functionality for query building.&lt;&#x2F;p&gt;
&lt;p&gt;Some people may know that I’m a big rust fan, even though I still didn’t manage
to write any significant amount of production code in that language.
But the broader rust community does a lot of things really well, one of them
is &lt;a href=&quot;https:&#x2F;&#x2F;diesel.rs&#x2F;&quot;&gt;diesel&lt;&#x2F;a&gt;, the go-to database access and query builder library. I will also
mention some things about diesel and what we can learn from it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;type-safety&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#type-safety&quot; aria-label=&quot;Anchor link for: type-safety&quot;&gt;#&lt;&#x2F;a&gt;
Type Safety&lt;&#x2F;h2&gt;
&lt;p&gt;One of the major problems with &lt;a href=&quot;https:&#x2F;&#x2F;knexjs.org&#x2F;&quot;&gt;knex&lt;&#x2F;a&gt; in particular is that it is inherently
untyped. Everything is based on strings, which can either break because of typos,
or because of refactoring mistakes. Also the return value of a knex query is
&lt;code&gt;any&lt;&#x2F;code&gt; by definition, which is really bad. Engineers will have to manually type
the result, which of course is prone to bugs and type mismatches.&lt;&#x2F;p&gt;
&lt;p&gt;This is one of the points that is even embedded in the name of &lt;a href=&quot;https:&#x2F;&#x2F;typeorm.io&#x2F;&quot;&gt;typeorm&lt;&#x2F;a&gt;, but
it does not quite deliver on its promise. While yes, when you work with decorated
entities, you have strict typing for results and for &lt;em&gt;simple&lt;&#x2F;em&gt; find conditions.
But once you dig into the lower level querybuilder, things also become
&lt;code&gt;stringly-typed&lt;&#x2F;code&gt;, and all bets are off. Not quite what I had hoped for.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;code-organization&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#code-organization&quot; aria-label=&quot;Anchor link for: code-organization&quot;&gt;#&lt;&#x2F;a&gt;
Code Organization&lt;&#x2F;h2&gt;
&lt;p&gt;Another problem we have is that our business domain is very broad, and each feature
we need to build needs to hook very deeply into the database. Apart from that,
there are also challenges around organizing the code itself. Where to put code,
if and when to use query builders, how to make the code more maintainable etc.
A lot of these problems are also very related to the API that the database
access library provides.&lt;&#x2F;p&gt;
&lt;p&gt;Here, both &lt;a href=&quot;https:&#x2F;&#x2F;knexjs.org&#x2F;&quot;&gt;knex&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;typeorm.io&#x2F;&quot;&gt;typeorm&lt;&#x2F;a&gt; are coming up short.
What I essentially want, is to define an &lt;em&gt;abstract representation&lt;&#x2F;em&gt; of what I want
to query, and then execute it.
Well for &lt;a href=&quot;https:&#x2F;&#x2F;knexjs.org&#x2F;&quot;&gt;knex&lt;&#x2F;a&gt;, I need an established connection to be able to use the query
builder. For &lt;a href=&quot;https:&#x2F;&#x2F;typeorm.io&#x2F;&quot;&gt;typeorm&lt;&#x2F;a&gt; as well, One only gets an &lt;code&gt;entity manager&lt;&#x2F;code&gt; or &lt;code&gt;repository&lt;&#x2F;code&gt;
from an established connection.
Things are even worse when it comes to transactions.
Also, is the connection or transaction &lt;em&gt;per request&lt;&#x2F;em&gt; scoped? I think it is, in
order to offer better consistency guarantees. It would certainly be bad if one
query hits the &lt;code&gt;master&lt;&#x2F;code&gt; inside of a transaction and a different query hits a
&lt;code&gt;read replica&lt;&#x2F;code&gt;. Good luck debugging the resulting problems.&lt;&#x2F;p&gt;
&lt;p&gt;In contrast, I quite like how in &lt;a href=&quot;https:&#x2F;&#x2F;diesel.rs&#x2F;&quot;&gt;diesel&lt;&#x2F;a&gt;, you can statically define your queries,
which then have a &lt;code&gt;execute(connection)&lt;&#x2F;code&gt; method. There, the application author
has more control over which queries run on which connection.&lt;&#x2F;p&gt;
&lt;p&gt;This plays a lot nicer together with prepared statements.
Essentially, the SQL server has to parse a query, run it through the query
optimizer and then run it with some parameters. Wouldn’t it be nice if we could
re-use the first two steps over a few executions? Just like how the JS JIT engines
can optimize some hot code better if it runs more frequently. I’m no expert in
neither SQL servers, nor the libraries I am writing about here.
But as far as the JS APIs are structured, it seems like they are building
a fresh query string each and every time you call the query builder. Which is
bad for the performance of JS code in the first place, but I think the SQL side
of things could also be improved with a better structure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;performance-pitfalls&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#performance-pitfalls&quot; aria-label=&quot;Anchor link for: performance-pitfalls&quot;&gt;#&lt;&#x2F;a&gt;
Performance Pitfalls&lt;&#x2F;h2&gt;
&lt;p&gt;One problem we face increasingly with the increasing amounts of data we handle
is fetching too much data.
Here, all three APIs that I mentioned mostly offer the same methods to access
your data, lets call them &lt;code&gt;findOne&lt;&#x2F;code&gt; and &lt;code&gt;findAll&lt;&#x2F;code&gt;. None of the APIs has a streaming
interface as first class citizen. Which is quite bad, because you can quite
easily DDOS a complete service when one query fetches so much data at once that
the complete process runs OOM.
While I do love &lt;a href=&quot;https:&#x2F;&#x2F;diesel.rs&#x2F;&quot;&gt;diesel&lt;&#x2F;a&gt; in general, it pre-dates rusts &lt;code&gt;async&#x2F;await&lt;&#x2F;code&gt; story by
quite some time, and only offers &lt;em&gt;synchronous&lt;&#x2F;em&gt; calls, which requires you to
manually manage a thread pool. But I hope this will all be solved when &lt;code&gt;async&#x2F;await&lt;&#x2F;code&gt;
in rust becomes stable.
Also, async iteration is only supported since &lt;code&gt;node 10&lt;&#x2F;code&gt;, and the js projects are
also around for quite a longer time before that.&lt;&#x2F;p&gt;
&lt;p&gt;What I would like essentially is an API that at least has first class support
for streaming, or even goes one step further and offers &lt;em&gt;only&lt;&#x2F;em&gt; streaming in its
base API. Things like &lt;code&gt;findOne&lt;&#x2F;code&gt; and &lt;code&gt;findAll&lt;&#x2F;code&gt; can be built on top of that.&lt;&#x2F;p&gt;
&lt;p&gt;Also, none of the APIs offer a good solution to pagination, but more on that
later.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;do-one-thing-and-do-it-right&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#do-one-thing-and-do-it-right&quot; aria-label=&quot;Anchor link for: do-one-thing-and-do-it-right&quot;&gt;#&lt;&#x2F;a&gt;
Do one thing and do it right.&lt;&#x2F;h2&gt;
&lt;p&gt;Something else that kind of bothers me, is that both js projects have a far too
broad scope. Yes, &lt;a href=&quot;https:&#x2F;&#x2F;typeorm.io&#x2F;&quot;&gt;typeorm&lt;&#x2F;a&gt; is a fully featured ORM, but still both come with
solutions for managing migrations, and additional features that a focused
project could serve better.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;dreaming-up-an-ideal-api&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#dreaming-up-an-ideal-api&quot; aria-label=&quot;Anchor link for: dreaming-up-an-ideal-api&quot;&gt;#&lt;&#x2F;a&gt;
Dreaming up an ideal API&lt;&#x2F;h1&gt;
&lt;p&gt;So with all these things in mind, lets dream up an API that can do better than
what we have right now. First things first, lets focus on one thing only:
Creating a type safe query builder, which makes it possible to deliver good
performance and flexibility for developers.&lt;&#x2F;p&gt;
&lt;p&gt;Already more than half a year ago, I experimented a bit with creating a
&lt;a href=&quot;https:&#x2F;&#x2F;diesel.rs&#x2F;&quot;&gt;diesel&lt;&#x2F;a&gt;-like project in typescript called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Swatinem&#x2F;motorina&#x2F;&quot;&gt;motorina&lt;&#x2F;a&gt;. (Some people will get the
reference :-)&lt;&#x2F;p&gt;
&lt;p&gt;Sadly enough, I haven’t had any time or motivation to continue that effort.
Its most important goal was to be completely typesafe, and convenient as well.
It should make typos impossible and type mismatches impossible.&lt;&#x2F;p&gt;
&lt;p&gt;A second goal was to be high performance. I wanted to create &lt;em&gt;abstract queries&lt;&#x2F;em&gt;
on the toplevel scope, which have a strictly typed set of &lt;em&gt;placeholders&lt;&#x2F;em&gt; and a
strictly typed result, even with the possibility to define custom type conversions.
Since well you know, mysql does not even have a native boolean type, and it does
not map well to typescript enums.&lt;&#x2F;p&gt;
&lt;p&gt;Defining &lt;em&gt;abstract queries&lt;&#x2F;em&gt; in the toplevel scope also decouples queries from
connections. I don’t really want to care if a query runs on a read-only replicate,
or inside a transaction.
This should also in theory play very well with prepared statements. You can cache
the query on a per-connection basis, and reuse it a thousand times, with different
parameters each time.&lt;&#x2F;p&gt;
&lt;p&gt;One problem here is the sql data model itself, which at least for mysql does not
allow to actually pass in an &lt;em&gt;array&lt;&#x2F;em&gt; for a &lt;code&gt;IN(?)&lt;&#x2F;code&gt; placeholder. Meh :-(&lt;&#x2F;p&gt;
&lt;p&gt;Apart from the query builder itself, I think a connection wrapper, which exposes
a streaming interface as first class citizen, with maybe helpers to just
return a single entity might also be a good idea.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;excursion-cursor-based-pagination&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#excursion-cursor-based-pagination&quot; aria-label=&quot;Anchor link for: excursion-cursor-based-pagination&quot;&gt;#&lt;&#x2F;a&gt;
Excursion: Cursor based pagination&lt;&#x2F;h1&gt;
&lt;p&gt;I said I will also briefly talk about cursor based pagination, which is not a
first class citizen in sql unfortunately. Page-based pagination with &lt;code&gt;limit&lt;&#x2F;code&gt; and
&lt;code&gt;offset&lt;&#x2F;code&gt; is the standard. But that does have some problems when the data
underneath changes. Cursor-based pagination itself also has some problems, but
at least is a bit more stable. I am currently working on generalizing such a
cursor based pagination system, but it seems to be quite a bit more complex than
initially thought. But I don’t think a generic query builder should itself
provide such functionality, but it should be easy to extend it with such
functionality.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>GraphQL Code generators</title>
        <published>2019-05-25T00:00:00+00:00</published>
        <updated>2019-05-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/graphql-codegen/"/>
        <id>https://swatinem.de/blog/graphql-codegen/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/graphql-codegen/">&lt;p&gt;Prompted by a recent meetup with former work colleagues, I had another short look at &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;relay&#x2F;en&#x2F;&quot;&gt;relay&lt;&#x2F;a&gt;
as an alternative to &lt;a href=&quot;https:&#x2F;&#x2F;www.apollographql.com&#x2F;docs&#x2F;react&quot;&gt;apollo&lt;&#x2F;a&gt; which we currently use and with which we are not quite that happy.&lt;&#x2F;p&gt;
&lt;p&gt;Both libraries have support for typescript code generation, but relay puts it more in the center.&lt;&#x2F;p&gt;
&lt;p&gt;All in all, the problems, or rather improvements and dreams I have come from the fact that
strict typing and code generation was added as an afterthought.
You can use both libraries a) with untyped JS and b) without code generation at all.&lt;&#x2F;p&gt;
&lt;p&gt;Apart from the very obvious problem that the apollo-cli itself is horrible, both from a usage as well
as a project viewpoint (I mean it pulls in &lt;code&gt;yarn&lt;&#x2F;code&gt; as a dependency transitively, wtf?), I see
the following problems or lack of features in both relay and apollo when it comes to typescript
support and codegen.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;there-is-a-lot-of-footguns&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#there-is-a-lot-of-footguns&quot; aria-label=&quot;Anchor link for: there-is-a-lot-of-footguns&quot;&gt;#&lt;&#x2F;a&gt;
There is a lot of footguns&lt;&#x2F;h2&gt;
&lt;p&gt;Lets create an example slightly changed from the &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;relay&#x2F;docs&#x2F;en&#x2F;type-emission&quot;&gt;relay docs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ ExampleQuery } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;__generated__&#x2F;ExampleQuery.graphql&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;QUERY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;graphql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;    query ExampleQuery($artistID: ID!) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;      artist(id: $artistID) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;        name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;      }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;  `
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;QueryRenderer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;ExampleQuery&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{QUERY}
&lt;&#x2F;span&gt;&lt;span&gt;  variables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{{ artistID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;banksy&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As this example shows, code generation and typescript support revolves around importing a generated
type definition and manually providing it as optional type parameter to the &lt;code&gt;QueryRenderer&lt;&#x2F;code&gt; component.
This perfectly demonstrates the two points I made before. Remove the &lt;code&gt;import&lt;&#x2F;code&gt; and the type parameter,
and the code becomes valid untyped JS.&lt;&#x2F;p&gt;
&lt;p&gt;However, there are a couple of obvious footguns even with this very simple example.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The type parameter is optional and defaults to &lt;code&gt;any&lt;&#x2F;code&gt;. Developers are lazy, and using codegen in reality is a
lot more tedious than this example.&lt;&#x2F;li&gt;
&lt;li&gt;The type parameter needs to be provided &lt;em&gt;manually&lt;&#x2F;em&gt;, which means developers could potentially mess up,
the typescript compiler will not warn about this.&lt;&#x2F;li&gt;
&lt;li&gt;One way to mess up is to use mix up the &lt;code&gt;query&lt;&#x2F;code&gt; prop with a wrong type parameter.&lt;&#x2F;li&gt;
&lt;li&gt;It is not &lt;em&gt;DRY&lt;&#x2F;em&gt;, I will explain later on.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The example from the &lt;a href=&quot;https:&#x2F;&#x2F;www.apollographql.com&#x2F;docs&#x2F;react&#x2F;recipes&#x2F;static-typing&quot;&gt;apollo docs&lt;&#x2F;a&gt; is even worse, since the &lt;em&gt;results&lt;&#x2F;em&gt; and the &lt;em&gt;variables&lt;&#x2F;em&gt; are provided as two
separate type parameters. So there is even more opportunity to mess up.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;digression-component-based-api&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#digression-component-based-api&quot; aria-label=&quot;Anchor link for: digression-component-based-api&quot;&gt;#&lt;&#x2F;a&gt;
Digression: Component-based API&lt;&#x2F;h2&gt;
&lt;p&gt;This might just be a personal preference, but I consider Components with a render-prop API a horrible design pattern in general.
Especially for usage with graphql, I consider this to be extremely unergonomic and tedious.&lt;&#x2F;p&gt;
&lt;p&gt;Using react &lt;code&gt;hooks&lt;&#x2F;code&gt; is a hugely better alternative. But true, both relay and apollo are older than the hooks API, so I will
let this one slide.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;types-are-mis-used&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#types-are-mis-used&quot; aria-label=&quot;Anchor link for: types-are-mis-used&quot;&gt;#&lt;&#x2F;a&gt;
Types are mis-used&lt;&#x2F;h2&gt;
&lt;p&gt;One problem I see with the generated types in our codebase is that developers are actually mis-using them.
This is not really specific to the way graphql libraries work, but a problem I see in general when it comes to typed
react code.&lt;&#x2F;p&gt;
&lt;p&gt;One very good design pattern in react is to split code into &lt;em&gt;presentational&lt;&#x2F;em&gt; components, that just &lt;em&gt;display&lt;&#x2F;em&gt; some data,
and &lt;em&gt;container&lt;&#x2F;em&gt; components, which might include some business logic and data fetching logic.
In my opinion, a &lt;em&gt;presentational&lt;&#x2F;em&gt; component should itself declare what kind of props it wants to receive.
And the type checker makes sure that the &lt;em&gt;container&lt;&#x2F;em&gt; components provides valid props.&lt;&#x2F;p&gt;
&lt;p&gt;Well in reality, developers will just happily import graphql-generated types for use in their presentational components,
which I personally consider to be a red flag and a mis-use of those types.&lt;&#x2F;p&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ VenueLogoWrapperVenueQuery_venue_logo } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;..&#x2F;container&#x2F;genTypes&#x2F;VenueLogoWrapperVenueQuery&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;LogoWrapperProps &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  logo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;VenueLogoWrapperVenueQuery_venue_logo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This surely gets a huge &lt;em&gt;facepalm&lt;&#x2F;em&gt; from me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;it-does-not-support-custom-scalars&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#it-does-not-support-custom-scalars&quot; aria-label=&quot;Anchor link for: it-does-not-support-custom-scalars&quot;&gt;#&lt;&#x2F;a&gt;
It does not support custom scalars&lt;&#x2F;h2&gt;
&lt;p&gt;GraphQL itself has a &lt;em&gt;super simple&lt;&#x2F;em&gt; concept. You just provide a &lt;code&gt;query&lt;&#x2F;code&gt; string and optional &lt;code&gt;variables&lt;&#x2F;code&gt; and you get back some
json &lt;code&gt;data&lt;&#x2F;code&gt;. You don’t even need a big-ass library, all you need is &lt;code&gt;fetch&lt;&#x2F;code&gt;.
But this also means you are limited to datatypes representable as json.
Which means you have &lt;code&gt;null&lt;&#x2F;code&gt; instead of &lt;code&gt;undefined&lt;&#x2F;code&gt;, and you don’t have rich types such as &lt;code&gt;Date&lt;&#x2F;code&gt;.
There is even an old &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apollographql&#x2F;apollo-tooling&#x2F;issues&#x2F;622&quot;&gt;feature request&lt;&#x2F;a&gt; for apollo to generate
&lt;code&gt;undefined&lt;&#x2F;code&gt; instead of &lt;code&gt;null&lt;&#x2F;code&gt;, but I think it unlikely for that ever to happen.&lt;&#x2F;p&gt;
&lt;p&gt;For all of the sophistication these libraries have, they are actually quite dumb in this regard.
All they do is pass on the result json unaltered.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;a-dream-takes-form&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#a-dream-takes-form&quot; aria-label=&quot;Anchor link for: a-dream-takes-form&quot;&gt;#&lt;&#x2F;a&gt;
A dream takes form&lt;&#x2F;h1&gt;
&lt;p&gt;With all these issues in mind, lets brainstorm and dream up an ideal API.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What if&lt;&#x2F;strong&gt;, a next generation graphql code generator generated some code like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ getVenue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;getMe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;requestPasswordReset } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;.&#x2F;some-generated-file&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;venue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getVenue&lt;&#x2F;span&gt;&lt;span&gt;(conn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;{ id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;…&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; venue = { name: string, logo?: Image, … }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;me &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getMe&lt;&#x2F;span&gt;&lt;span&gt;(conn)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; me = { lastLogin: Date, … }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;requestPasswordReset&lt;&#x2F;span&gt;&lt;span&gt;(conn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;{ email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;…&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; …
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So my proposed next-generation graphql code generator will generate &lt;em&gt;ready to use&lt;&#x2F;em&gt;, &lt;em&gt;strongly typed&lt;&#x2F;em&gt;
async functions, which you can &lt;em&gt;just call&lt;&#x2F;em&gt; with a &lt;code&gt;connection&lt;&#x2F;code&gt; (essentially a parameterized &lt;code&gt;fetch&lt;&#x2F;code&gt;,
&lt;code&gt;apollo-client&lt;&#x2F;code&gt;, or whatever), and some &lt;em&gt;strongly typed&lt;&#x2F;em&gt; variables.&lt;&#x2F;p&gt;
&lt;p&gt;These functions will embed the query string itself, and will do &lt;em&gt;type conversions&lt;&#x2F;em&gt; for both &lt;em&gt;input&lt;&#x2F;em&gt; and
&lt;em&gt;result&lt;&#x2F;em&gt; types, in the example above the &lt;code&gt;Image&lt;&#x2F;code&gt; and &lt;code&gt;Date&lt;&#x2F;code&gt; scalars, which would be automatically deserialized
to typescript classes, or enums, or whatever.&lt;&#x2F;p&gt;
&lt;p&gt;This dreamed-up example was not react-specific, but it would be super easy to also create &lt;em&gt;ready to use&lt;&#x2F;em&gt; hooks
which would consume the &lt;code&gt;connection&lt;&#x2F;code&gt; via &lt;code&gt;context&lt;&#x2F;code&gt; and thus be &lt;em&gt;even easier&lt;&#x2F;em&gt; to use.&lt;&#x2F;p&gt;
&lt;p&gt;Essentially, it will solve the following problems, plus give even more advantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;simple, ready-to-use API&lt;&#x2F;li&gt;
&lt;li&gt;automatic scalar deserialization&lt;&#x2F;li&gt;
&lt;li&gt;strongly typed, with no opportunity for mis-use&lt;&#x2F;li&gt;
&lt;li&gt;DRY, because it embeds the &lt;code&gt;query&lt;&#x2F;code&gt; portion right in the function&lt;&#x2F;li&gt;
&lt;li&gt;very friendly to dead-code-elimination &#x2F; tree-shaking&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;inspiring-other-projects&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#inspiring-other-projects&quot; aria-label=&quot;Anchor link for: inspiring-other-projects&quot;&gt;#&lt;&#x2F;a&gt;
Inspiring other projects&lt;&#x2F;h2&gt;
&lt;p&gt;Now that I have brainstormed the graphql code generator of my dreams, it also got me thinking about another one of my
projects. Another code generation success story is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eversport&#x2F;intl-codegen&quot;&gt;intl-codegen&lt;&#x2F;a&gt;, which similarly generates &lt;em&gt;ready to use&lt;&#x2F;em&gt; functions out
of &lt;code&gt;MessageFormat&lt;&#x2F;code&gt; strings, with the goal of both avoiding to ship a &lt;code&gt;MessageFormat&lt;&#x2F;code&gt; parser to runtime as well as to provide
&lt;em&gt;not quite so strong&lt;&#x2F;em&gt; typing.&lt;&#x2F;p&gt;
&lt;p&gt;I could imagine that instead of having a single &lt;code&gt;Localized&lt;&#x2F;code&gt; component, it could actually generate a separate component for
each message.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; now:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Localized id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;some-message-id&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;params&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{{ name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;some name&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; future?:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;SomeMessageId name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;some name&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’m not quite convinced yet if this would be a worthwile change, but it certainly would make it impossible to mis-use
the current implementation by using a dynamic &lt;code&gt;id&lt;&#x2F;code&gt;, which circumvents typing.&lt;&#x2F;p&gt;
&lt;p&gt;In general, I have neglected &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eversport&#x2F;intl-codegen&quot;&gt;intl-codegen&lt;&#x2F;a&gt; quite a bit recently, but I do have a lot of ambitious ideas about its future.
But those ambitious ideas are also hard to implement so it will take quite some more time to think about those.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Error Handling Considerations</title>
        <published>2019-05-15T00:00:00+00:00</published>
        <updated>2019-05-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/error-handling/"/>
        <id>https://swatinem.de/blog/error-handling/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/error-handling/">&lt;p&gt;Error handling is a really important aspect of software engineering, and also a
very complex one with a lot of sides that need to be considered.
Lets try to break this down into a few key aspects.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;types-of-errors&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#types-of-errors&quot; aria-label=&quot;Anchor link for: types-of-errors&quot;&gt;#&lt;&#x2F;a&gt;
Types of Errors&lt;&#x2F;h2&gt;
&lt;p&gt;By &lt;em&gt;types&lt;&#x2F;em&gt;, I do mean the distinction between &lt;em&gt;recoverable errors&lt;&#x2F;em&gt; and
&lt;em&gt;unrecoverable errors&lt;&#x2F;em&gt;, or &lt;em&gt;expected errors&lt;&#x2F;em&gt; and &lt;em&gt;unexpected errors&lt;&#x2F;em&gt;.
In general the difference is that &lt;em&gt;expected&lt;&#x2F;em&gt; &#x2F; &lt;em&gt;recoverable&lt;&#x2F;em&gt;
errors are handled explicitly by code, and &lt;em&gt;unrecoverable&lt;&#x2F;em&gt; errors usually crash
the program or are handled at a much coarser granularity, such as per-thread
or per-request. One important thing to note first is that this distinction is up to the developers
on a per-project basis.
For example, a missing file can be treated as an unrecoverable error when reading
configuration on program start, where a crash will instruct the developers to
correctly configure it. In other parts of the program, a missing file must be
handled explicitly, because it might depend on user input and must not crash
the running program.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;errors-as-data&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#errors-as-data&quot; aria-label=&quot;Anchor link for: errors-as-data&quot;&gt;#&lt;&#x2F;a&gt;
Errors as Data&lt;&#x2F;h2&gt;
&lt;p&gt;Especially &lt;em&gt;expected errors&lt;&#x2F;em&gt; need to be displayed to end users. For example with
a nicely formatted Error Box in the case of web UI.&lt;&#x2F;p&gt;
&lt;p&gt;One very important aspect here, which sadly almost noone gets right is that
&lt;em&gt;error messages need to be localizable&lt;&#x2F;em&gt; &lt;strong&gt;(!!!)&lt;&#x2F;strong&gt; For this to work, the error
needs to be serializable, including every kind of meta information that might
be displayed to the user. For the example above, an abstract representation of
the error should include information that &lt;strong&gt;opening&lt;&#x2F;strong&gt; a file with a certain
&lt;strong&gt;path&#x2F;name&lt;&#x2F;strong&gt; failed (and possibly some more).&lt;&#x2F;p&gt;
&lt;p&gt;I would argue that this is not really important, or even bad for &lt;em&gt;unrecoverable&lt;&#x2F;em&gt;
errors. These should be &lt;em&gt;logged&lt;&#x2F;em&gt; instead, because they are most likely caused
by some developer fault. A stack trace should be provided as a form of metadata
to help developers fix this error. However, these kind of errors should only be
shown to end-users in a very opaque way, and avoid leaking internal implementation
details such as stack traces which could be used to maliciously attack a service.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;control-flow-of-errors&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#control-flow-of-errors&quot; aria-label=&quot;Anchor link for: control-flow-of-errors&quot;&gt;#&lt;&#x2F;a&gt;
Control Flow of Errors&lt;&#x2F;h2&gt;
&lt;p&gt;Here I see a distinction between &lt;em&gt;explicit&lt;&#x2F;em&gt; treatment of errors, and &lt;em&gt;explicit&lt;&#x2F;em&gt;
handling. This is very tightly coupled to language syntax features or idioms.
In general, &lt;em&gt;explicit&lt;&#x2F;em&gt; error handling comes at the expense of more boilerplate
but can also potentially lead to better software in my opinion.&lt;&#x2F;p&gt;
&lt;p&gt;But what do I mean by &lt;em&gt;explicit&lt;&#x2F;em&gt; or &lt;em&gt;implicit&lt;&#x2F;em&gt; at all?
Well, per my definition &lt;em&gt;explicit&lt;&#x2F;em&gt; means that functions will &lt;code&gt;return&lt;&#x2F;code&gt; or pass as
&lt;code&gt;callback parameter&lt;&#x2F;code&gt; a strictly typed error object, and&#x2F;or a value.
&lt;em&gt;Implicit&lt;&#x2F;em&gt; error handling in contrast means that errors are &lt;code&gt;throw&lt;&#x2F;code&gt;n &lt;em&gt;somewhere&lt;&#x2F;em&gt;
and unwind the call stack up to a &lt;code&gt;catch&lt;&#x2F;code&gt; block. This way they lose most&#x2F;all of
their type information. However this reduces a lot of boilerplate, because code
does not deal with statements that could potentially throw everywhere.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;comparing-different-languages&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#comparing-different-languages&quot; aria-label=&quot;Anchor link for: comparing-different-languages&quot;&gt;#&lt;&#x2F;a&gt;
Comparing different Languages&lt;&#x2F;h2&gt;
&lt;p&gt;Now lets look at some examples in different programming languages. Most of them
support both explicit and implicit error handling. And in most cases, explicit
handling does not need to be a language feature itself, but can also be
implemented as a library.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example-haskell&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#example-haskell&quot; aria-label=&quot;Anchor link for: example-haskell&quot;&gt;#&lt;&#x2F;a&gt;
Example: Haskell&lt;&#x2F;h3&gt;
&lt;p&gt;First off: I don’t really know this language well, so I might be wrong about
some points.&lt;&#x2F;p&gt;
&lt;p&gt;Haskell is a very strictly function language, and claims to be very &lt;em&gt;safe&lt;&#x2F;em&gt;.
Instead of nullable values, it has a &lt;code&gt;Maybe&lt;&#x2F;code&gt; type that either has &lt;code&gt;Just&lt;&#x2F;code&gt; a value
or &lt;code&gt;Nothing&lt;&#x2F;code&gt;. Similarly, it uses the type &lt;code&gt;Either&lt;&#x2F;code&gt; to denote a &lt;code&gt;Right&lt;&#x2F;code&gt; value or
a &lt;code&gt;Left&lt;&#x2F;code&gt; error.
The language has special syntax to chain functions together that either work with
a &lt;code&gt;Just&lt;&#x2F;code&gt; or &lt;code&gt;Right&lt;&#x2F;code&gt; value, or short circuit and just return the &lt;code&gt;Nothing&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;Left&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I might be wrong about this, but I think Haskell and other very strict functional
languages don’t even have the notion of &lt;code&gt;throw&lt;&#x2F;code&gt; that unwinds the stack.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example-go&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#example-go&quot; aria-label=&quot;Anchor link for: example-go&quot;&gt;#&lt;&#x2F;a&gt;
Example: Go&lt;&#x2F;h3&gt;
&lt;p&gt;Again, I don’t really know go, this only summarized some things I have read online.&lt;&#x2F;p&gt;
&lt;p&gt;In Go, most functions will return a compound value, with a &lt;code&gt;value&lt;&#x2F;code&gt; and an &lt;code&gt;error&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;someFn&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;error
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I don’t really know how strict the go typechecker is. But having to explicitly
check for &lt;code&gt;nil&lt;&#x2F;code&gt; everywhere is a real anti-pattern IMO.&lt;&#x2F;p&gt;
&lt;p&gt;Again, I don’t know if go actually has the concept of &lt;code&gt;throw&lt;&#x2F;code&gt;, however I have
never seen any example of it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example-ts&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#example-ts&quot; aria-label=&quot;Anchor link for: example-ts&quot;&gt;#&lt;&#x2F;a&gt;
Example: TS&lt;&#x2F;h3&gt;
&lt;p&gt;TypeScript actually supports different kinds of error handling patterns.&lt;&#x2F;p&gt;
&lt;p&gt;The callback-based style that is common in &lt;code&gt;node&lt;&#x2F;code&gt; and in older libraries will
look similar to the &lt;code&gt;go&lt;&#x2F;code&gt; example. You will provide a callback function with
two parameters, and need to explicitly check and early-return on errors.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;someFn&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(error) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;(error)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; …
&lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;More modern &lt;code&gt;async&#x2F;await&lt;&#x2F;code&gt; based code has support for &lt;code&gt;try&#x2F;catch&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Apart from this, some code might also use explicit return types such as
&lt;code&gt;Haskell&lt;&#x2F;code&gt;s &lt;code&gt;Maybe&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But using either callbacks or explicit library provided types such as &lt;code&gt;Maybe&lt;&#x2F;code&gt; has
the significant drawback that basically &lt;strong&gt;any&lt;&#x2F;strong&gt; code can just &lt;code&gt;throw&lt;&#x2F;code&gt; and punch
though that abstraction layer.&lt;&#x2F;p&gt;
&lt;p&gt;Also, since the support for these explicit styles have no dedicated language&#x2F;syntax
support, they come with some boilerplate and inconvenience.&lt;&#x2F;p&gt;
&lt;p&gt;The problem with &lt;code&gt;try&#x2F;catch&lt;&#x2F;code&gt; however is, that there is absolutely no guarantee on
the value in a catch block by definition.
TS even has an explicit compiler error that states that
&lt;code&gt;Catch clause variable cannot have a type annotation.&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can just &lt;code&gt;throw 1&lt;&#x2F;code&gt; and that is valid code. This by itself can cause a lot of
problems. We actually shipped code to production that &lt;code&gt;throw&lt;&#x2F;code&gt;-ing inside of a
&lt;code&gt;catch&lt;&#x2F;code&gt; block because it made wrong assumptions on the shape of object it caught.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example-rust&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#example-rust&quot; aria-label=&quot;Anchor link for: example-rust&quot;&gt;#&lt;&#x2F;a&gt;
Example: Rust&lt;&#x2F;h3&gt;
&lt;p&gt;Even though I have not actually &lt;em&gt;used&lt;&#x2F;em&gt; Rust that much, I read a lot about it and
I admire a lot of the things it does.&lt;&#x2F;p&gt;
&lt;p&gt;IMO, Rust gets &lt;em&gt;a lot&lt;&#x2F;em&gt; of things &lt;em&gt;just right&lt;&#x2F;em&gt;. Error handling is no different.&lt;&#x2F;p&gt;
&lt;p&gt;It basically has two mechanisms, a Haskell-esque &lt;code&gt;Result&lt;&#x2F;code&gt; type for recoverable
errors, and a &lt;code&gt;throw&lt;&#x2F;code&gt;-like mechanism (called &lt;code&gt;panic!&lt;&#x2F;code&gt;) for unrecoverable errors.&lt;&#x2F;p&gt;
&lt;p&gt;Apart from this, it has dedicated syntax (&lt;code&gt;?&lt;&#x2F;code&gt;) to make explicit error handling
extremely convenient. It is also possible to implement the special &lt;code&gt;From&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;Into&lt;&#x2F;code&gt;
trait to convert between error types &lt;em&gt;completely automatically&lt;&#x2F;em&gt;, without any
additional boilerplate.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  File&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;open(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;read_to_string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(s)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, both &lt;code&gt;open&lt;&#x2F;code&gt;ing the file and &lt;code&gt;read&lt;&#x2F;code&gt;ing can potentially error, and just
chaining the &lt;code&gt;?&lt;&#x2F;code&gt; operator will early-return a &lt;code&gt;Result&lt;&#x2F;code&gt; and &lt;em&gt;automatically&lt;&#x2F;em&gt;
convert the IoError into your application specific Error type if a corresponding
&lt;code&gt;From&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;Into&lt;&#x2F;code&gt; implementation exists.&lt;&#x2F;p&gt;
&lt;p&gt;In contrast to that, the &lt;code&gt;panic!&lt;&#x2F;code&gt; mechanism will unwind the callstack in the
case of unrecoverable errors.&lt;&#x2F;p&gt;
&lt;p&gt;In general, there is also the community consensus that &lt;em&gt;libraries&lt;&#x2F;em&gt; should always
return &lt;code&gt;Result&lt;&#x2F;code&gt;s. It is the choice of the application if and how to handle those
errors. An application can use &lt;code&gt;unwrap&lt;&#x2F;code&gt; or &lt;code&gt;expect&lt;&#x2F;code&gt; to essentially &lt;code&gt;throw&lt;&#x2F;code&gt; on
errors.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch09-00-error-handling.html&quot;&gt;Read more&lt;&#x2F;a&gt; on how
error handling in Rust works.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;where-to-handle-errors&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#where-to-handle-errors&quot; aria-label=&quot;Anchor link for: where-to-handle-errors&quot;&gt;#&lt;&#x2F;a&gt;
Where to handle Errors&lt;&#x2F;h2&gt;
&lt;p&gt;There is quite some controversy in our team around where to actually &lt;em&gt;handle&lt;&#x2F;em&gt;
these errors.&lt;&#x2F;p&gt;
&lt;p&gt;Lets take a simple Database Repository as an example. Lets assume there is a
&lt;code&gt;findOne&lt;&#x2F;code&gt; method. By definition, this will return a &lt;code&gt;nullable&lt;&#x2F;code&gt; type. At least
if the &lt;em&gt;manual type declaration&lt;&#x2F;em&gt; is correct. Sadly, most database libraries are
completely untyped in TS :-(&lt;&#x2F;p&gt;
&lt;p&gt;Currently we have three different patterns around this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;First, the type definition might just be wrong, and assume a non-nullable type
which is actually nullable and might result in the typical
&lt;code&gt;undefined is not a function&lt;&#x2F;code&gt; kind of errors.&lt;&#x2F;li&gt;
&lt;li&gt;Developers might use the non-nullable assertion operator (&lt;code&gt;!&lt;&#x2F;code&gt;) and &lt;em&gt;consciously&lt;&#x2F;em&gt;
decide to implicitly throw a &lt;code&gt;undefined is not a function&lt;&#x2F;code&gt; error.&lt;&#x2F;li&gt;
&lt;li&gt;A developer might add an &lt;code&gt;if&lt;&#x2F;code&gt; with an explicit &lt;code&gt;throw&lt;&#x2F;code&gt;. This is &lt;em&gt;a lot&lt;&#x2F;em&gt; of
boilerplate.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When we go back one step and say that &lt;em&gt;libraries&lt;&#x2F;em&gt; should return the most correct
types, it means that the types need to be marked as nullable, so the first case
is definitely wrong.&lt;&#x2F;p&gt;
&lt;p&gt;But lets focus on &lt;strong&gt;where&lt;&#x2F;strong&gt; we are in the program flow.&lt;&#x2F;p&gt;
&lt;p&gt;When we are at the &lt;strong&gt;IO&lt;&#x2F;strong&gt; boundary to some user provided data, such as an &lt;code&gt;id&lt;&#x2F;code&gt;,
we have a &lt;em&gt;recoverable&lt;&#x2F;em&gt; error in the sense that we can provide the user with a
meaningful error message, such as a &lt;code&gt;404&lt;&#x2F;code&gt; error.&lt;&#x2F;p&gt;
&lt;p&gt;However, in a deeper layer of the application, I would argue that this case should
not occur, and if it does, it would be a programmer logic error.
In my opinion, doing explicit error handling in this layer is way too much
boilerplate and is actually harmful to the readability and understandability of
the code logic.&lt;&#x2F;p&gt;
&lt;p&gt;For this reason, I would argue that once user input is validated, any deeper code
should just use non-null assertions, or maybe a more explicit &lt;code&gt;.expect()&lt;&#x2F;code&gt; function
and throw with a normal JS error.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;#&lt;&#x2F;a&gt;
Summary&lt;&#x2F;h2&gt;
&lt;p&gt;We currently have a mix of different error handling patterns. I also experimented
with returning a &lt;code&gt;Result&lt;&#x2F;code&gt;-ish type using TS discriminated unions, which is just
too inconvenient in TS to be viable.
The first conclusion thus is to just stick to &lt;code&gt;throw&lt;&#x2F;code&gt; for the control flow.&lt;&#x2F;p&gt;
&lt;p&gt;I would also rephrase the distinction between &lt;em&gt;recoverable&lt;&#x2F;em&gt; and &lt;em&gt;unrecoverable&lt;&#x2F;em&gt;
errors, to better understand what the goals and requirements are.&lt;&#x2F;p&gt;
&lt;p&gt;Lets use the words &lt;em&gt;user facing error&lt;&#x2F;em&gt; in contrast to &lt;em&gt;developer facing error&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;em&gt;user facing error&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;must be &lt;em&gt;translatable&lt;&#x2F;em&gt;, and thus needs to include enough metadata to be able
to do so.&lt;&#x2F;li&gt;
&lt;li&gt;must be &lt;em&gt;serializable&lt;&#x2F;em&gt;, for example to be returned by an API to its users.&lt;&#x2F;li&gt;
&lt;li&gt;should not leak any implementation detail of the application.&lt;&#x2F;li&gt;
&lt;li&gt;should provide a link to user input if possible.&lt;&#x2F;li&gt;
&lt;li&gt;should make it possible to group &#x2F; display multiple errors at once.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In contrast, a &lt;em&gt;developer facing error&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;must be &lt;em&gt;debuggable&lt;&#x2F;em&gt;, with enough metadata, such as a &lt;em&gt;stack trace&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;need not be translatable, since only developers should ever see it.&lt;&#x2F;li&gt;
&lt;li&gt;likely has no correlation to user input.&lt;&#x2F;li&gt;
&lt;li&gt;IMO, should actually &lt;em&gt;not&lt;&#x2F;em&gt; be translated, to make it easier to communicate
across teams and to search for solutions online.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;From these requirements, I would first conclude that &lt;em&gt;unexpected&lt;&#x2F;em&gt; &#x2F;
&lt;em&gt;unrecoverable&lt;&#x2F;em&gt; &#x2F; &lt;em&gt;developer facing&lt;&#x2F;em&gt; errors should use the standard
&lt;code&gt;throw new Error()&lt;&#x2F;code&gt; pattern. I am also strongly in favor of just using non-null
assertions to cut down on unnecessary boilerplate. When both inputs and logic
assumptions are sufficiently validated, these kind of errors should ideally
never occur, so adding boilerplate for these kind of errors in unnecessary.&lt;&#x2F;p&gt;
&lt;p&gt;In contrast, for &lt;em&gt;expected&lt;&#x2F;em&gt; &#x2F; &lt;em&gt;recoverable&lt;&#x2F;em&gt; &#x2F; &lt;em&gt;user facing&lt;&#x2F;em&gt; errors, I would rather
create a custom error type, which might, but need not necessarily &lt;code&gt;extends Error&lt;&#x2F;code&gt;.
This type &lt;em&gt;must&lt;&#x2F;em&gt; be &lt;em&gt;serializable&lt;&#x2F;em&gt;, and include enough metadata to make translation
possible. It should also include metadata to link back to any user input.
Apart from that, it should be possible to return &lt;em&gt;multiple&lt;&#x2F;em&gt; such errors, even
though that needs to be done explicitly by developers.&lt;&#x2F;p&gt;
&lt;p&gt;These two different kinds of errors should also be handled separately in &lt;code&gt;catch&lt;&#x2F;code&gt;
blocks depending on the specific usecase.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;User facing&lt;&#x2F;em&gt; errors should be explicitly checked for and either re-thrown when
deep inside of the application or returned to the user explicitly on a
&lt;em&gt;per request&lt;&#x2F;em&gt; &#x2F; &lt;em&gt;per operation&lt;&#x2F;em&gt; basis. These kind of errors will most likely
both &lt;em&gt;happen&lt;&#x2F;em&gt; and be &lt;em&gt;handled&lt;&#x2F;em&gt; close to the user. Since &lt;em&gt;translation&lt;&#x2F;em&gt; is also
one requirement, this should also happen as close to the IO-layer as possible.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Anything else&lt;&#x2F;em&gt; should definitely be &lt;em&gt;logged&lt;&#x2F;em&gt; at least. Then it is up to the
developer how to handle these, and how course-grained the handling should be.
Possibilities are to just retry the operation, or maybe to ignore it completely.
But also these errors &lt;em&gt;must&lt;&#x2F;em&gt; be caught on a &lt;em&gt;per request&lt;&#x2F;em&gt; basis and converted to
an &lt;em&gt;opaque&lt;&#x2F;em&gt; user facing error.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Well, error handling is a really big and controversial topic. Most of the hard
decisions really depend on the specific application usecase.&lt;&#x2F;p&gt;
&lt;p&gt;What makes me kind of sad is that most solutions fail my most important requirement
of &lt;em&gt;user facing&lt;&#x2F;em&gt; errors. They make translating errors really hard.
Especially for libraries that are focused on validating user input, this is a
&lt;em&gt;must have&lt;&#x2F;em&gt; requirement!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Enforcing Rules</title>
        <published>2019-05-10T00:00:00+00:00</published>
        <updated>2019-05-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/enforcing-rules/"/>
        <id>https://swatinem.de/blog/enforcing-rules/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/enforcing-rules/">&lt;p&gt;Previously I have written extensively about the &lt;a href=&quot;..&#x2F;dx-challenges&quot;&gt;problems I face&lt;&#x2F;a&gt;
and some ideas how I would like to &lt;a href=&quot;..&#x2F;managing-intermediates&quot;&gt;organize a larga codebase&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Another challenge is to integrate this all into a monorepo but in a way that
best isolates &lt;em&gt;new&lt;&#x2F;em&gt; code from &lt;em&gt;old&lt;&#x2F;em&gt; code.
Best way to do that is via linting, so lets look at that in more depth.&lt;&#x2F;p&gt;
&lt;p&gt;Put very simply, a linter is a tool to enforce certain rules on your code. From
formatting concerns to more sophisticated rules such as making sure that you
handle async promise-based code correctly.&lt;&#x2F;p&gt;
&lt;p&gt;Linting can happen at a few distinct phases during development:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;During development inside an IDE, which can point the developer to problems
immediately, and can do formatting and fix some auto-fixable lints directly at
&lt;em&gt;format on save&lt;&#x2F;em&gt; time.&lt;&#x2F;li&gt;
&lt;li&gt;At commit-time via a pre-commit hook. To make sure developers only commit valid
code.&lt;&#x2F;li&gt;
&lt;li&gt;On a CI server, to make sure that only code that conforms to the set of rules
will land in the repository.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These use-cases are also listed in the order of &lt;em&gt;responsiveness expectations&lt;&#x2F;em&gt;.
The in-editor usage should be instant, while on the other hand you don’t really
care how long linting will take on CI.&lt;&#x2F;p&gt;
&lt;p&gt;And here comes the problem that I already mentioned in my previous posts.
I &lt;em&gt;suspect&lt;&#x2F;em&gt; that my editor integration via &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Microsoft&#x2F;typescript-tslint-plugin&quot;&gt;typescript-tslint-plugin&lt;&#x2F;a&gt; might be
the cause why the language server frequently becomes super slow, and might even
reliably OOM when I change a lot of files at one, for example by changing branches.&lt;&#x2F;p&gt;
&lt;p&gt;Also the pre-commit hook is super slow depending on many files are being changed.&lt;&#x2F;p&gt;
&lt;p&gt;One reason for this slowness might be that the linter needs to start up from scratch
every time, and needs to typecheck the code again every time. There is no way
to share some state between these tools.&lt;&#x2F;p&gt;
&lt;p&gt;Back in the days when I was still using vim, I used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mantoni&#x2F;eslint_d.js&quot;&gt;eslint_d&lt;&#x2F;a&gt; which starts a
long running process and communicates with that via a socket. That way it can
avoid all the startup and warmup costs of node. (One very good reason why you
should bundle your code as much as possible)&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;One of the problems with at least the &lt;code&gt;vscode&lt;&#x2F;code&gt; integration of &lt;code&gt;tslint&lt;&#x2F;code&gt; was that
it did not support rules that relied on typechecking. That was the main usecase
of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Microsoft&#x2F;typescript-tslint-plugin&quot;&gt;typescript-tslint-plugin&lt;&#x2F;a&gt;. But now &lt;code&gt;tslint&lt;&#x2F;code&gt; is officially deprecated in
favor of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typescript-eslint&#x2F;typescript-eslint&quot;&gt;typescript-eslint&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I haven’t tried that one yet, but I do know that there is no deep integration
with the language server yet, I have
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typescript-eslint&#x2F;typescript-eslint&#x2F;issues&#x2F;254&quot;&gt;asked specifically&lt;&#x2F;a&gt;.
And I am not sure yet if the &lt;code&gt;eslint&lt;&#x2F;code&gt; plugin of vscode can correctly work with
rules that depend on typechecking. I would like to think that it does.&lt;&#x2F;p&gt;
&lt;p&gt;But even so, that would make things even worse, since it means I would have two
long-running processes in the background, both doing redundant work. Maybe someone
will write a &lt;code&gt;tsserver&lt;&#x2F;code&gt; integration at some point, maybe even myself.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;But enough about that. The challenge at hand is to isolate code inside a
monorepo in a way that can guarantee to you can’t cross the import barrier from
&lt;em&gt;new&lt;&#x2F;em&gt; to &lt;em&gt;old&lt;&#x2F;em&gt; code.&lt;&#x2F;p&gt;
&lt;p&gt;I &lt;em&gt;hope&lt;&#x2F;em&gt; that a combination of eslints &lt;a href=&quot;https:&#x2F;&#x2F;eslint.org&#x2F;docs&#x2F;rules&#x2F;no-restricted-imports&quot;&gt;no-restricted-imports&lt;&#x2F;a&gt; together with
&lt;code&gt;eslint-plugin-import&lt;&#x2F;code&gt;s &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;benmosher&#x2F;eslint-plugin-import&#x2F;blob&#x2F;master&#x2F;docs&#x2F;rules&#x2F;no-restricted-paths.md&quot;&gt;no-restricted-paths&lt;&#x2F;a&gt; will be enough in that regard.&lt;&#x2F;p&gt;
&lt;p&gt;Other than that, I think the story here is quite good. I still need to spend
some time evaluating all the linting rules we have, again. :-D&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Managing Intermediate Artifacts</title>
        <published>2019-05-09T15:00:00+00:00</published>
        <updated>2019-05-09T15:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/managing-intermediates/"/>
        <id>https://swatinem.de/blog/managing-intermediates/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/managing-intermediates/">&lt;p&gt;In my last post, I talked about &lt;a href=&quot;..&#x2F;dx-small-projects&quot;&gt;small public&lt;&#x2F;a&gt; projects.
When the project gets bigger however, the workflows I presented quickly become
a pain. As I showed in the &lt;a href=&quot;..&#x2F;dx-challenges&quot;&gt;first post of the series&lt;&#x2F;a&gt; we have
reached a size where typechecking, testing and linting have slowed to a crawl,
even to the point that the language intelligence of my IDE keeps crashing when
I switch branches.&lt;&#x2F;p&gt;
&lt;p&gt;As I also showed in the first post, another problem is that the developer tools
often do duplicate work, which both makes things slower, and opens the door for
bugs.
We use different tools to compile serverside code for production use, which is
different from the way we run the code in local testing, also jest does
its own thing to run the code, and webpack does its own thing when
bundling code for the web.&lt;&#x2F;p&gt;
&lt;p&gt;Now I want to define some goals I would like to achieve, as well as to define
some rules.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;First off, I would like to start with a &lt;strong&gt;clean slate&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;This implies that we are only caring about &lt;em&gt;TypeScript&lt;&#x2F;em&gt; code, which will be
important in a sec.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;There should be &lt;em&gt;as little difference as possible&lt;&#x2F;em&gt; between running code for
local development and running code in production&lt;&#x2F;li&gt;
&lt;li&gt;Running code in local development should be &lt;strong&gt;convenient&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;It should be &lt;strong&gt;fast&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;It should involve as little boilerplate as possible&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;It should support code that targets &lt;code&gt;web&lt;&#x2F;code&gt; as well as &lt;code&gt;node&lt;&#x2F;code&gt;!&lt;&#x2F;li&gt;
&lt;li&gt;It should make it easier and convenient to organize code
&lt;ul&gt;
&lt;li&gt;Specifically, it should support deep &lt;code&gt;import X from &quot;deep&#x2F;within&#x2F;other&#x2F;modules&quot;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;(Yes, I absolutely believe that &lt;em&gt;small, public&lt;&#x2F;em&gt; libraries should only support
a single entry point and hide their internal structure! But this usecase is different.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;It should have strong rules in place to enforce best practices&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After extensively exploring the problem space, I think it will become necessary
to rethink some of the conveniences that I came to rely on coming from &lt;em&gt;small&lt;&#x2F;em&gt;
projects. I think it is necessary to explicitly manage intermediate artifacts.&lt;&#x2F;p&gt;
&lt;p&gt;I think this will come with some significant advantages for local development
as well as running code in production. But it comes with one significant
disadvantage, which is that most development workflows are not &lt;em&gt;self contained&lt;&#x2F;em&gt;
anymore, but rely on other steps.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tsc-to-compile-files&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#tsc-to-compile-files&quot; aria-label=&quot;Anchor link for: tsc-to-compile-files&quot;&gt;#&lt;&#x2F;a&gt;
&lt;code&gt;tsc&lt;&#x2F;code&gt; to compile files&lt;&#x2F;h2&gt;
&lt;p&gt;First step here would be to use &lt;code&gt;tsc&lt;&#x2F;code&gt; &lt;em&gt;explicitly&lt;&#x2F;em&gt; to transpile to code that
runs natively in node 8 and modern browsers, with one very important twist:
The code will use native &lt;code&gt;esm&lt;&#x2F;code&gt; modules instead of &lt;code&gt;commonjs&lt;&#x2F;code&gt;! To make this work
in node, I propose to use the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;standard-things&#x2F;esm&quot;&gt;esm&lt;&#x2F;a&gt; module to be able to natively load those.&lt;&#x2F;p&gt;
&lt;p&gt;I am very wary of using such require hooks in production, but I really want to
give this one a shot. Apart from this one, we already use &lt;code&gt;source-map-support&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Using &lt;code&gt;tsc&lt;&#x2F;code&gt; in &lt;code&gt;--watch&lt;&#x2F;code&gt; mode, combined with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;standard-things&#x2F;esm&quot;&gt;esm&lt;&#x2F;a&gt; would mean the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We would run &lt;strong&gt;the exact same&lt;&#x2F;strong&gt; code in local development as we will do in
production!&lt;&#x2F;li&gt;
&lt;li&gt;We wouldn’t need &lt;em&gt;any&lt;&#x2F;em&gt; webpack loader at all. Webpack&#x2F;rollup can consume native
&lt;code&gt;esm&lt;&#x2F;code&gt; modules. So we would also run the same code on the web as we do on the
server.&lt;&#x2F;li&gt;
&lt;li&gt;Things would be &lt;em&gt;fast&lt;&#x2F;em&gt;: Since we don’t need any &lt;em&gt;transpiling&lt;&#x2F;em&gt; require hook or
webpack loader anymore, hot reloads should actually get faster.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;BUT&lt;&#x2F;strong&gt;: we would need to have &lt;code&gt;tsc --watch&lt;&#x2F;code&gt; running in the background at all
times, which is an inconvenience.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Now that we have decided to actually have &lt;code&gt;tsc&lt;&#x2F;code&gt; &lt;code&gt;emit&lt;&#x2F;code&gt; something, combined with
the fact that we will deal with TS files &lt;em&gt;only&lt;&#x2F;em&gt;, we can use &lt;a href=&quot;https:&#x2F;&#x2F;www.typescriptlang.org&#x2F;docs&#x2F;handbook&#x2F;project-references.html&quot;&gt;project references&lt;&#x2F;a&gt;
which will hopefully significantly reduce the resource usage and startup time
of the IDE.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;code-organization&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#code-organization&quot; aria-label=&quot;Anchor link for: code-organization&quot;&gt;#&lt;&#x2F;a&gt;
Code Organization&lt;&#x2F;h2&gt;
&lt;p&gt;We currently use path mapping, which needs to be set up separately for &lt;code&gt;tsc&lt;&#x2F;code&gt; and
&lt;code&gt;jest&lt;&#x2F;code&gt;, plus a custom require hook using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dividab&#x2F;tsconfig-paths&quot;&gt;tsconfig-paths&lt;&#x2F;a&gt;, which I had to patch
myself BTW because it was both horribly slow and buggy.&lt;&#x2F;p&gt;
&lt;p&gt;After some time, I come to the conclusion that relying on path mapping was not
a good idea. Apart from the problems with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dividab&#x2F;tsconfig-paths&quot;&gt;tsconfig-paths&lt;&#x2F;a&gt; itself and the need
to correctly set it up, it was also a source of problems because the code had
different behavior in local development as it had in production.&lt;&#x2F;p&gt;
&lt;p&gt;So far, we also used npm packages which were published to a private registry,
which in itself has caused us a lot of problems every now and then. Instead of
consuming code via npm, we decided to just put the whole &lt;em&gt;monorepo&lt;&#x2F;em&gt; (a more
fitting name would be &lt;em&gt;code dump&lt;&#x2F;em&gt;) into a docker image, to make us independent
from an npm registry.&lt;&#x2F;p&gt;
&lt;p&gt;However, I still think using npm packages, or more specifically &lt;code&gt;node_modules&lt;&#x2F;code&gt;
has its merits.&lt;&#x2F;p&gt;
&lt;p&gt;So we established that we want to use the &lt;em&gt;exact same&lt;&#x2F;em&gt; code in production as in
local development, and that we don’t want to rely on path mapping anymore. And
we would like to have both &lt;em&gt;convenient&lt;&#x2F;em&gt; import paths and &lt;em&gt;deep&lt;&#x2F;em&gt; import paths.
One of the reasons path mapping caused problems was the fact that we had &lt;code&gt;src&lt;&#x2F;code&gt;
and &lt;code&gt;dist&lt;&#x2F;code&gt; folders, which would allow deep import paths in local development but
fail in non obvious ways when running in production.&lt;&#x2F;p&gt;
&lt;p&gt;My proposal here, which I would still have to validate with a running example,
is to remove the &lt;code&gt;src&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;dist&lt;&#x2F;code&gt; folders, and have &lt;code&gt;tsc&lt;&#x2F;code&gt; emit its artifacts right
in the root folder. You would end up with a structure like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;| some-package
&lt;&#x2F;span&gt;&lt;span&gt;+- README.md (maybe)
&lt;&#x2F;span&gt;&lt;span&gt;+- package.json
&lt;&#x2F;span&gt;&lt;span&gt;+- tsconfig.json
&lt;&#x2F;span&gt;&lt;span&gt;+- .eslintrc.js (maybe)
&lt;&#x2F;span&gt;&lt;span&gt;+- index.ts
&lt;&#x2F;span&gt;&lt;span&gt;+- index.js
&lt;&#x2F;span&gt;&lt;span&gt;+- index.js.map
&lt;&#x2F;span&gt;&lt;span&gt;+- index.d.ts
&lt;&#x2F;span&gt;&lt;span&gt;\- index.d.ts.map (not quite sure if these can be inlined?)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Yes, this does look very untidy. At least in &lt;code&gt;vscode&lt;&#x2F;code&gt;, the IDE can be configured
to hide all the output artifacts if a corresponding &lt;code&gt;.ts&lt;&#x2F;code&gt; file exists. Not sure
about other editors.&lt;&#x2F;p&gt;
&lt;p&gt;I think there are ways to organize things differently, for example by moving the
&lt;code&gt;package.json&lt;&#x2F;code&gt; file into a different folder that would be the &lt;em&gt;output&lt;&#x2F;em&gt; folder
with the intermediate artifacts, separate from the source files.
But I think that would be more confusing than beneficial.&lt;&#x2F;p&gt;
&lt;p&gt;Also note that since we will not rely on publishing to an npm registry anymore,
the &lt;code&gt;package.json&lt;&#x2F;code&gt; is free to define arbitrary names, such as this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;private&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;name&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;~components&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;yarn&lt;&#x2F;code&gt; workspaces or &lt;a href=&quot;https:&#x2F;&#x2F;pnpm.js.org&#x2F;&quot;&gt;pnpm&lt;&#x2F;a&gt; would make sure that a deep import such as
&lt;code&gt;import X from &quot;~components&#x2F;Button&quot;&lt;&#x2F;code&gt; would find the correct file.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;digression-code-generators&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#digression-code-generators&quot; aria-label=&quot;Anchor link for: digression-code-generators&quot;&gt;#&lt;&#x2F;a&gt;
Digression: Code Generators&lt;&#x2F;h2&gt;
&lt;p&gt;One other thing that is causing me a lot of concerns recently is how to deal
with other intermediate artifacts, such as code created via code generation.
We use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eversport&#x2F;intl-codegen&quot;&gt;intl-codegen&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apollographql&#x2F;apollo-tooling&quot;&gt;apollo codegen&lt;&#x2F;a&gt; to produce code that depends on other
source files. The have written the former myself and I’m not quite sure how happy
I am with the latter.&lt;&#x2F;p&gt;
&lt;p&gt;We have multiple problems with the way we use these tools currently.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The generated files are currently committed to git, and cause a lot of churn
and merge conflicts.&lt;&#x2F;li&gt;
&lt;li&gt;The files can get out of sync, since developers are not &lt;em&gt;forced&lt;&#x2F;em&gt; to re-generate
and commit them.&lt;&#x2F;li&gt;
&lt;li&gt;Generating these files can break either the typechecking, or far worse, the
code itself in unpredictable ways. Which is both inconvenient when CI builds
suddenly turn red, and dangerous when things are shipped to production.&lt;&#x2F;li&gt;
&lt;li&gt;Translators often mess up the &lt;code&gt;MessageFormat&lt;&#x2F;code&gt; syntax, which will only break
when a developer runs the codegen.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I think to solve this problem, it would be a good idea to &lt;code&gt;.gitignore&lt;&#x2F;code&gt; these
files and rather integrate them better with file watcher running in the background.&lt;&#x2F;p&gt;
&lt;p&gt;For &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eversport&#x2F;intl-codegen&quot;&gt;intl-codegen&lt;&#x2F;a&gt;, this should be easy and straightforward, but apollo is more
complex, since it relies on a graphql schema, which itself depends on running
your code first.
In this case, I propose to actually commit the schema, but write an automated
test that runs the schema creation on CI and fails when the cached schema file
differs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I think the proposal shown here would solve quite some problems while introducing
only minimal inconveniences. I would really love to explore this further.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>DX on Small Projects</title>
        <published>2019-05-09T13:00:00+00:00</published>
        <updated>2019-05-09T13:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/dx-small-projects/"/>
        <id>https://swatinem.de/blog/dx-small-projects/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/dx-small-projects/">&lt;p&gt;Continuing my series, I will take a look at what tools and workflows I use to
manage my small projects. I will also explain some of the very opinionated
guidelines that I follow.&lt;&#x2F;p&gt;
&lt;p&gt;We will specifically talk about code that will be &lt;em&gt;published&lt;&#x2F;em&gt;, and can be consumed
&lt;em&gt;publicly&lt;&#x2F;em&gt; by anyone. This has some implications on the structure of the code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;maintaining-a-public-api&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#maintaining-a-public-api&quot; aria-label=&quot;Anchor link for: maintaining-a-public-api&quot;&gt;#&lt;&#x2F;a&gt;
Maintaining a public API&lt;&#x2F;h2&gt;
&lt;p&gt;I do have quite a strong opinion on bundling and how to best publish &#x2F; expose
code that you write, which has implications on how you &lt;em&gt;consume&lt;&#x2F;em&gt; that code.&lt;&#x2F;p&gt;
&lt;p&gt;Writing a &lt;em&gt;small&lt;&#x2F;em&gt; and &lt;em&gt;focused&lt;&#x2F;em&gt; library means that you should ideally have only
one, or very limited and &lt;em&gt;explicit&lt;&#x2F;em&gt; set of entry points.&lt;&#x2F;p&gt;
&lt;p&gt;The problem is that &lt;em&gt;in theory&lt;&#x2F;em&gt;, people can just import any file that is included
in an npm package. And others will start to begin relying on internal
implementation details they really shouldn’t. And they will complain if you
break things by re-organizing your internal code.&lt;&#x2F;p&gt;
&lt;p&gt;People will just happily &lt;code&gt;import { SomeInternalClass } from &quot;your-library&#x2F;some&#x2F;internal&#x2F;file&quot;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bundling-code&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#bundling-code&quot; aria-label=&quot;Anchor link for: bundling-code&quot;&gt;#&lt;&#x2F;a&gt;
Bundling Code&lt;&#x2F;h2&gt;
&lt;p&gt;One way to avoid this is to bundle your code, which I highly recommend everyone
should do.
I am a big fan of, and an early adopter and contributor to &lt;a href=&quot;https:&#x2F;&#x2F;rollupjs.org&#x2F;&quot;&gt;rollup&lt;&#x2F;a&gt;, and one
project I would like to show off to highlight some of my recommendations is
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Swatinem&#x2F;rollup-plugin-dts&quot;&gt;rollup-plugin-dts&lt;&#x2F;a&gt;, which you can use also bundle up TS type definitions alongside
your code.&lt;&#x2F;p&gt;
&lt;p&gt;The README of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Swatinem&#x2F;rollup-plugin-dts&quot;&gt;rollup-plugin-dts&lt;&#x2F;a&gt; shows a clear example of how to best use it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;managing-dependencies&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#managing-dependencies&quot; aria-label=&quot;Anchor link for: managing-dependencies&quot;&gt;#&lt;&#x2F;a&gt;
Managing Dependencies&lt;&#x2F;h2&gt;
&lt;p&gt;I am still surprised how often people get this wrong. Or how little thought they
put into it.&lt;&#x2F;p&gt;
&lt;p&gt;For example, there are
&lt;a href=&quot;https:&#x2F;&#x2F;renovatebot.com&#x2F;docs&#x2F;dependency-pinning&#x2F;#ranges-for-libraries&quot;&gt;multiple&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;faq.html#why-do-binaries-have-cargolock-in-version-control-but-not-libraries&quot;&gt;sources&lt;&#x2F;a&gt;
out there that explain why &lt;em&gt;libraries&lt;&#x2F;em&gt; should not pin their dependencies, but
rather delegate that choice to the &lt;em&gt;users&lt;&#x2F;em&gt; of that library.&lt;&#x2F;p&gt;
&lt;p&gt;Another important thing to understand is the difference between direct
&lt;code&gt;dependencies&lt;&#x2F;code&gt; and &lt;code&gt;peerDependencies&lt;&#x2F;code&gt;.
&lt;a href=&quot;https:&#x2F;&#x2F;yarnpkg.com&#x2F;blog&#x2F;2018&#x2F;04&#x2F;18&#x2F;dependencies-done-right&#x2F;&quot;&gt;The yarn blog&lt;&#x2F;a&gt;
has a good article about that.
TLDR: When your libraries users should not care or even know, put it into
&lt;code&gt;dependencies&lt;&#x2F;code&gt;. If your library is used &lt;em&gt;alongside&lt;&#x2F;em&gt; or &lt;em&gt;together with&lt;&#x2F;em&gt; some other
dependency, put it into &lt;code&gt;peerDependencies&lt;&#x2F;code&gt;.
For example, &lt;code&gt;rollup-plugin-dts&lt;&#x2F;code&gt; put both &lt;code&gt;rollup&lt;&#x2F;code&gt; and &lt;code&gt;typescript&lt;&#x2F;code&gt; into
&lt;code&gt;peerDependencies&lt;&#x2F;code&gt;, because it can’t work independently of those two, and someone
using &lt;code&gt;rollup-plugin-dts&lt;&#x2F;code&gt; will have to use the other two as well.&lt;&#x2F;p&gt;
&lt;p&gt;Something else I see quite often, which I think is just wrong is that some
libraries are putting &lt;code&gt;@types&lt;&#x2F;code&gt; into their &lt;code&gt;dependencies&lt;&#x2F;code&gt;. This is &lt;strong&gt;only&lt;&#x2F;strong&gt; valid
for other &lt;code&gt;@types&lt;&#x2F;code&gt; packages!&lt;&#x2F;p&gt;
&lt;p&gt;Why? Because &lt;code&gt;@types&lt;&#x2F;code&gt; should never ever be used in production. They are by
definition &lt;code&gt;devDependencies&lt;&#x2F;code&gt;. Just because users of &lt;code&gt;your-library&lt;&#x2F;code&gt; happen to
also use typescript and are getting typechecking errors because they are missing
&lt;code&gt;@types&#x2F;node&lt;&#x2F;code&gt; does not mean that &lt;code&gt;@types&#x2F;node&lt;&#x2F;code&gt; belongs into &lt;code&gt;dependencies&lt;&#x2F;code&gt;.
The code will run in production without that!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;support-targets&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#support-targets&quot; aria-label=&quot;Anchor link for: support-targets&quot;&gt;#&lt;&#x2F;a&gt;
Support Targets&lt;&#x2F;h2&gt;
&lt;p&gt;A little bit related to dependencies. I would recommend to people to &lt;em&gt;publish&lt;&#x2F;em&gt;
code in the most recent JS dialect possible, that you can run &lt;em&gt;natively&lt;&#x2F;em&gt; in the
&lt;em&gt;most up-to-date&lt;&#x2F;em&gt; runtime. Make your users pick a support target. Don’t force
transpiled code or polyfills on your users.
A short test showed that &lt;em&gt;not&lt;&#x2F;em&gt; transpiling async&#x2F;await but rather using it
natively cut down the bundle size by &lt;em&gt;~10%&lt;&#x2F;em&gt;, but more importantly, it cut the
&lt;em&gt;startup time&lt;&#x2F;em&gt; of the code by &lt;strong&gt;~25%&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This sadly is one of the disadvantages of JS being a language that relies on a
runtime. :-(&lt;&#x2F;p&gt;
&lt;p&gt;When talking about a &lt;em&gt;target&lt;&#x2F;em&gt;, I would also encourage people to publish code
that targets a &lt;em&gt;standard&lt;&#x2F;em&gt; module system, by which I mean &lt;em&gt;native&lt;&#x2F;em&gt; &lt;code&gt;import&#x2F;export&lt;&#x2F;code&gt;
syntax. That way the user of your library has the choice how to best consume it,
such as by bundling it with the rest of their code.&lt;&#x2F;p&gt;
&lt;p&gt;Sadly though, this goal is at odds with being able to run that code in node
natively &lt;em&gt;sadface&lt;&#x2F;em&gt;. One solution is to publish the code both as commonjs, and as
native modules, which however is also at odds with using deep import paths, which
I previously argued you should avoid anyway :-).&lt;&#x2F;p&gt;
&lt;p&gt;But the takeaway is to publish code in a way that is friendly to bundlers. Which
also has implications on the &lt;em&gt;dependencies&lt;&#x2F;em&gt;, which also need to be friendly to
bundlers, which sadly most code still is not.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;testing-and-linting&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#testing-and-linting&quot; aria-label=&quot;Anchor link for: testing-and-linting&quot;&gt;#&lt;&#x2F;a&gt;
Testing and Linting&lt;&#x2F;h2&gt;
&lt;p&gt;Todays post is about &lt;strong&gt;small&lt;&#x2F;strong&gt; libraries, such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Swatinem&#x2F;rollup-plugin-dts&quot;&gt;rollup-plugin-dts&lt;&#x2F;a&gt;, of which
I wrote, say &lt;em&gt;~98%&lt;&#x2F;em&gt; myself. This means I don’t really need a complex linting
setup, apart from &lt;em&gt;format on save&lt;&#x2F;em&gt; that the IDE provides. I will focus more on
linting in a future post.&lt;&#x2F;p&gt;
&lt;p&gt;Being a small and focused library also means its easy to test, which I usually
put quite some effort into doing, as close to 100% coverage as possible.&lt;&#x2F;p&gt;
&lt;p&gt;For this I use &lt;a href=&quot;https:&#x2F;&#x2F;jestjs.io&#x2F;&quot;&gt;jest&lt;&#x2F;a&gt; in combination with &lt;a href=&quot;https:&#x2F;&#x2F;kulshekhar.github.io&#x2F;ts-jest&#x2F;&quot;&gt;ts-jest&lt;&#x2F;a&gt;. Being &lt;strong&gt;small&lt;&#x2F;strong&gt; also means
that the convenience of having a single command to both typecheck and test my
code including code coverage outweighs the disadvantage of that workflow being
slow.
Running the testsuite takes around &lt;em&gt;~6 seconds&lt;&#x2F;em&gt; for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Swatinem&#x2F;rollup-plugin-dts&quot;&gt;rollup-plugin-dts&lt;&#x2F;a&gt; and maybe
&lt;em&gt;~10 seconds&lt;&#x2F;em&gt; for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eversport&#x2F;intl-codegen&quot;&gt;intl-codegen&lt;&#x2F;a&gt;. The slowness probably comes from the fact that
both tools do typechecking using TS as &lt;em&gt;part of the tests themselves&lt;&#x2F;em&gt;, rather
than the tooling itself.&lt;&#x2F;p&gt;
&lt;p&gt;One nice thing about software engineering itself is that you are constantly
challenged, and you need to re-evaluate all your decisions and opinions all the
time, which makes you grow. There is a saying that if you are not somewhat
ashamed of your own code you wrote a year ago, you didn’t really grow as a
developer. But I digress.&lt;&#x2F;p&gt;
&lt;p&gt;So, while yes, I do like &lt;a href=&quot;https:&#x2F;&#x2F;jestjs.io&#x2F;&quot;&gt;jest&lt;&#x2F;a&gt; for its convenience and especially for its
&lt;code&gt;expect&lt;&#x2F;code&gt; matchers and snapshot testing, I also dislike it at the same time.
It is an overly large behemoth that tries to do too much, and creates a lot of
problems doing so.&lt;&#x2F;p&gt;
&lt;p&gt;One example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;create-react-app&#x2F;issues&#x2F;5868&quot;&gt;buggy handling of TS code&lt;&#x2F;a&gt;,
because well jest aims to support TS out of the box, but fails to do so ever so
subtly.
And while it supports file-level mocking, the way it does that is not always
obvious and can lead to quite some surprising problems. You can mock the local
&lt;code&gt;.&#x2F;send.ts&lt;&#x2F;code&gt; file by creating a &lt;code&gt;.&#x2F;__mocks__&#x2F;send.ts&lt;&#x2F;code&gt;, but it will then also use
that mock for &lt;code&gt;import X from &quot;send&quot;&lt;&#x2F;code&gt; in a completely different part of your
codebase. This was surprising. But once I figured it out, it also kind of
explains why jest spews tons of warnings when you have two mocks named
&lt;code&gt;.&#x2F;__mocks__&#x2F;index.ts&lt;&#x2F;code&gt; in different parts of your codebase.&lt;&#x2F;p&gt;
&lt;p&gt;Learning from this, I would recommend to just avoid file based mocking. I will
also re-evaluate my opinion about having a &lt;code&gt;test runner&lt;&#x2F;code&gt; &lt;em&gt;running&lt;&#x2F;em&gt; your tests.
Maybe it would be a better idea to build a testsuite as a dedicated executable
that you can &lt;em&gt;run&lt;&#x2F;em&gt;, which &lt;em&gt;explicitly uses&lt;&#x2F;em&gt; a &lt;em&gt;testing library&lt;&#x2F;em&gt; internally for
organizational purpuses, a concept that for example &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lorenzofox3&#x2F;zora&quot;&gt;zora&lt;&#x2F;a&gt; advocates.
I grew quite wary of tools that force you to organize your code in a certain way.&lt;&#x2F;p&gt;
&lt;p&gt;I think I will experiment with this concept in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Swatinem&#x2F;rollup-plugin-dts&quot;&gt;rollup-plugin-dts&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eversport&#x2F;intl-codegen&quot;&gt;intl-codegen&lt;&#x2F;a&gt; in the future.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>DX Challenges of TS&#x2F;JS Projects</title>
        <published>2019-05-08T00:00:00+00:00</published>
        <updated>2019-05-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/dx-challenges/"/>
        <id>https://swatinem.de/blog/dx-challenges/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/dx-challenges/">&lt;p&gt;Well… It has actually been more than one year since my last blog. Back then I
bid farewell to programming for a while, and had plans to switch to Rust
development. Fast forward more than a year, I am back working with TypeScript,
and haven’t written any production Rust code yet.
While I still have high hopes for Rust, it was just more convenient for me to
stick to something I have a lot of experience with, while also trying to learn
from things that Rust does well.
Anyway, I digress.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;What I want to do right now is to start with a small blog series, in
&lt;em&gt;rubber duck debugging&lt;&#x2F;em&gt; style, to documenting my thoughts and opinions on how to
manage JS&#x2F;TS projects, and maybe in the process coming up with some viable
solutions to the problems we face.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s start explaining the challenges we currently face by giving some
statistics on our codebase.&lt;&#x2F;p&gt;
&lt;p&gt;According to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;XAMPPRocky&#x2F;tokei&quot;&gt;tokei&lt;&#x2F;a&gt;, we currently have &lt;strong&gt;~4000&lt;&#x2F;strong&gt; source files with &lt;strong&gt;&amp;gt;300kLOC&lt;&#x2F;strong&gt;,
excluding external dependencies, tests and automatically generated code.
We are going all-in on TypeScript and use it for all the &lt;em&gt;new&lt;&#x2F;em&gt; code we write.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;code&gt;tsc&lt;&#x2F;code&gt; invocation gives the following statistics right now:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#61676c;&quot;&gt;&lt;code&gt;&lt;span&gt;Files:           3780
&lt;&#x2F;span&gt;&lt;span&gt;Memory used: 1060813K
&lt;&#x2F;span&gt;&lt;span&gt;Total time:    31.56s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running &lt;code&gt;yarn&lt;&#x2F;code&gt; to install all external dependencies takes &lt;strong&gt;~50 seconds&lt;&#x2F;strong&gt;
and pre-compiling &lt;strong&gt;~1500&lt;&#x2F;strong&gt; of our source files another &lt;strong&gt;~18 seconds&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Our unit and integration test suites run for &lt;strong&gt;~3 minutes&lt;&#x2F;strong&gt; each, with another
&lt;strong&gt;~12 minutes&lt;&#x2F;strong&gt; for our end-to-end tests running in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Microsoft&#x2F;vscode&quot;&gt;cypress&lt;&#x2F;a&gt; (on CI).
BTW, we have a mixed opinion on cypress, mostly related to their inability to
upgrade their browser to a version that is more recent than &lt;em&gt;electron 1&lt;&#x2F;em&gt; &lt;em&gt;*sigh*&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Running a full lint with both &lt;code&gt;eslint&lt;&#x2F;code&gt; and &lt;code&gt;tslint&lt;&#x2F;code&gt; takes &lt;strong&gt;~2 minutes&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And since we are creating both more code, and more tests, things will only get
slower.&lt;&#x2F;p&gt;
&lt;p&gt;For local development, I now switched from vim to &lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;&quot;&gt;vscode&lt;&#x2F;a&gt;, with which I am super
happy in general. If it were not for the TS language server.
I showed some stats above that running the TS typechecker itself takes &lt;em&gt;~30 seconds&lt;&#x2F;em&gt;
and consumes some &lt;em&gt;~1G&lt;&#x2F;em&gt; of RAM. The language server itself, combined with the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Microsoft&#x2F;typescript-tslint-plugin&quot;&gt;typescript-tslint-plugin&lt;&#x2F;a&gt; plugin takes an incredibly long time to start, while
consuming in excess of &lt;strong&gt;2G&lt;&#x2F;strong&gt; of RAM. In my last blog post I was lamenting the
way JS apps waste resources like CPU and RAM. Well today I am using more than
&lt;strong&gt;8G&lt;&#x2F;strong&gt; of my 16G just to run a browser, IDE, email client and desktop environment,
all written in JS &lt;em&gt;*sigh*&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But that isn’t even that much of a problem, if at least it would be stable. Hint:
It’s not! While I do love all the code assist features, including the integration
with tslint, it frequently takes &lt;em&gt;ages&lt;&#x2F;em&gt; to give me code-completion or even expand
snippets. Worst of all, I have reached a level of slowness where switching branches
would reliably kill &lt;code&gt;tsserver&lt;&#x2F;code&gt; after a minute due to OOM &lt;em&gt;*sadface*&lt;&#x2F;em&gt;. By now
this starts to slow me down significantly.&lt;&#x2F;p&gt;
&lt;p&gt;Also, it kind of bothers me that these separate tools, such as IDE integration,
linting (for example on pre-commit) and actually running your code share no
state, and thus are doing a lot of redundant work that makes them slow.
More on that in a later post.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Apart from these problems that revolve around DX tooling, we also face problems
when pushing code into production, related to building &#x2F; bundling the code and
around how to deal with external and internal dependencies.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;This is it for now. In the followup posts, I want to go into more detail on how
I would like to better manage these challenges.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Farewell WebTech</title>
        <published>2017-03-18T00:00:00+00:00</published>
        <updated>2017-03-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/farewell-webtech/"/>
        <id>https://swatinem.de/blog/farewell-webtech/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/farewell-webtech/">&lt;h3 id=&quot;tldr&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#tldr&quot; aria-label=&quot;Anchor link for: tldr&quot;&gt;#&lt;&#x2F;a&gt;
TLDR:&lt;&#x2F;h3&gt;
&lt;p&gt;End of this month, I will quit web programming and programming in general for
some time, taking a much deserved time off and decide on my future direction.&lt;&#x2F;p&gt;
&lt;p&gt;It has been a nice ride, let me share a few things.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-beginnings&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-beginnings&quot; aria-label=&quot;Anchor link for: the-beginnings&quot;&gt;#&lt;&#x2F;a&gt;
The beginnings&lt;&#x2F;h2&gt;
&lt;p&gt;I edited my first piece of HTML back when using Netscape Navigator in Windows 95.
It quickly grew into a hobby and starting in 2000, I was managing a few
game-related fan pages.&lt;&#x2F;p&gt;
&lt;p&gt;Back in those days &lt;code&gt;&amp;lt;table&amp;gt;&lt;&#x2F;code&gt; based layouts with &lt;code&gt;bgcolor&lt;&#x2F;code&gt; and &lt;code&gt;&amp;lt;img&amp;gt;&lt;&#x2F;code&gt; were all
the rage. There was no CSS back then, and noone was using JS for anything
really. You basically did some PHP3, maybe with a MySQL 3 in the backend. No
real classes in the backend code, no transactional database, no client side
code.&lt;&#x2F;p&gt;
&lt;p&gt;At one point, I made the move from IE6 to Firebird as it was called back then,
simply because it supported these semitransparent images called &lt;code&gt;PNG&lt;&#x2F;code&gt;. It was
crazy, really.&lt;&#x2F;p&gt;
&lt;p&gt;Apart from some game-related fanpages, I also contributed to a browser-based
MMO and did some occasional paid work when I was not in school. I also
contributed to bigger pieces of software, both closed source and open source.&lt;&#x2F;p&gt;
&lt;p&gt;I was always the one embracing bleeding edge technologies. Table-less layouts,
pure-CSS dropdowns, &lt;code&gt;-moz-border-radius&lt;&#x2F;code&gt;, etc.
I actually wrote my Bachelors theses about WebGL, in a time when it was just an
experimental thing in Firefox only, back in 2010.&lt;&#x2F;p&gt;
&lt;p&gt;Before that, I also switched to Linux full-time (apart from gaming), mostly
motivated by the horribly bad Windows Vista. Well thanks for that actually :-)&lt;&#x2F;p&gt;
&lt;p&gt;Along the way, I developed a strong focus on frondend code and JavaScript. My
Masters Thesis was about implementing a sophisticated code completion engine
for JS. I know the language inside and out, hell I even wrote some of it. That
refers to some of the ES2015 features I implemented in SpiderMonkey, the JS
engine running Firefox. One of the achievements I am most proud of.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;problems-ensue&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#problems-ensue&quot; aria-label=&quot;Anchor link for: problems-ensue&quot;&gt;#&lt;&#x2F;a&gt;
Problems ensue&lt;&#x2F;h2&gt;
&lt;p&gt;But the web ecosystem itself moves in a direction I am not happy with and that
I also do not want to be part of anymore, really.&lt;&#x2F;p&gt;
&lt;p&gt;One of the problems is the community that is increasingly moving towards a
Java-esque mindset where it is ok to just layer abstraction over abstraction,
all that after you have to install hundreds of megabytes of tooling, all while
wrestling with packagers and half-broken solutions to things like hot module
reloading and things like that.&lt;&#x2F;p&gt;
&lt;p&gt;You are left with either choosing library A that can’t handle usecase X you
have, or with library B that sucks because of completely different reasons.
Things are buggy and incomplete, and nodejs still has not figured out what to
do about ES2015 modules, predictions are it will take a year to sort it out. It
is a real mess.&lt;&#x2F;p&gt;
&lt;p&gt;People jokingly call all this &lt;em&gt;JS fatigue&lt;&#x2F;em&gt;, but it really is draining all your
energy, especially if you have been at it as long as I have.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-web-as-a-platform&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-web-as-a-platform&quot; aria-label=&quot;Anchor link for: the-web-as-a-platform&quot;&gt;#&lt;&#x2F;a&gt;
The web as a platform&lt;&#x2F;h2&gt;
&lt;p&gt;Proponents always say that the web is a single platform that can finally
achieve the &lt;em&gt;“write once, run everywhere”&lt;&#x2F;em&gt; thing we always wanted. Sadly, it is
far from it. It is actually four main browser engines running on different
operating systems on different hardware and form factors. All of those break in
surprising ways and have subtle incompatibilities that haunt you any time you
want to do anything interesting. Not to mention legacy systems.&lt;&#x2F;p&gt;
&lt;p&gt;For the last 2+ years I have been working on
&lt;a href=&quot;https:&#x2F;&#x2F;pagestrip.com&quot;&gt;pagestrip&lt;&#x2F;a&gt;, which provides a system for digital
publishing which brings user authored content to the web and scales it to the
available viewport pixel-perfectly. It does sound pretty easy, and that is the
reaction I got from most people who asked what I (used to) do for a living.&lt;&#x2F;p&gt;
&lt;p&gt;But the devil is in the detail, and making those things work on all those
different platforms with halfway decent performance and visual fidelity is, at
least for certain things we want to do, simply impossible because of platform
limitations. Chasing down all the edge cases is really frustrating work. Up to
the point where I just &lt;em&gt;snapped&lt;&#x2F;em&gt; and said I could not take it any more.&lt;&#x2F;p&gt;
&lt;p&gt;(As a funny side story, a former collegue of mine quit a few month prior after
a very long time struggling with implementing proper snapping in the editor
part of our platform. He just &lt;em&gt;snapped&lt;&#x2F;em&gt; :-)&lt;&#x2F;p&gt;
&lt;p&gt;I am also jokingly referred to as the &lt;strong&gt;CSO&lt;&#x2F;strong&gt; of the company, the &lt;em&gt;chief
scrolling officer&lt;&#x2F;em&gt;, because one of my recent projects was to implement proper
scrolling with snapping support. You know, because browser-native scroll
snapping is a changing spec that only has some incomplete, incompatible and
buggy implementations in browsers. And we kind of need to have that stuff
working.&lt;&#x2F;p&gt;
&lt;p&gt;But oh boy is it hard! With all those different browers, devices and input
methods. Its a real mess, believe me! One might rightfully say that it really
was what broke me at last.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-future-of-software&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-future-of-software&quot; aria-label=&quot;Anchor link for: the-future-of-software&quot;&gt;#&lt;&#x2F;a&gt;
The Future of Software&lt;&#x2F;h2&gt;
&lt;p&gt;But lets get back to software development and programming languages in general.
There is one big trend I see in recent times, which is to write more and more
software in javascript.&lt;&#x2F;p&gt;
&lt;p&gt;Actually, I think the main goal was to have one language that you could use to
write software for all platforms. Something Java failed to do (thank god for
that), but now JS is kind of achieving, for better or for worse.&lt;&#x2F;p&gt;
&lt;p&gt;I can see this trend looking at the proliferation of both
&lt;a href=&quot;https:&#x2F;&#x2F;electron.atom.io&#x2F;&quot;&gt;Electron&lt;&#x2F;a&gt; for desktop development and
&lt;a href=&quot;http:&#x2F;&#x2F;facebook.github.io&#x2F;react-native&#x2F;&quot;&gt;react-native&lt;&#x2F;a&gt; for mobile. And I
really see the appeal of both approaches. You can share, say 80-90%, of your
code across platforms. And electron itself is much more of a &lt;em&gt;single platform&lt;&#x2F;em&gt;
than the mess of incompatible browsers is.&lt;&#x2F;p&gt;
&lt;p&gt;But I am deeply opposed to this trend. Simply because JS &#x2F; web technologies is
not the right technology to use for this. As much as I have worked with JS over
the years, also my own opinion about things like type systems has changed a lot
over the years. And by now I am ready to say that JS is a horrible language,
just as the web platform is a horrible platform.&lt;&#x2F;p&gt;
&lt;p&gt;One of the reasons is the nature of web technology. It is extremely flexible
and dynamic. But that is also one of the weaknesses. Because it is only ever
going to grow. Let me give you an example.&lt;&#x2F;p&gt;
&lt;p&gt;The number of properties of &lt;code&gt;CSSStyleDeclaration&lt;&#x2F;code&gt; (aka &lt;code&gt;Element.style&lt;&#x2F;code&gt;) will
only ever grow, it will never ever increase. There is no thing like
deprecations or semver-major releases of web tech. Features will never ever be
removed.&lt;&#x2F;p&gt;
&lt;p&gt;The goal of &lt;em&gt;pay for what you use&lt;&#x2F;em&gt; does not work in the context of web
technology. It is impossible just by the nature of the technology. Browsers
will only ever get more complex. They will use up more memory and system
resources, just because of the standards development. And that does not even
mention the ever increasing bloated libraries that pile up layers of
abstraction in a language that &lt;em&gt;has no zero cost abstractions&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I mean we now have 4 cores and 4G of RAM in our phones, and easily 8 cores
and up to 32G of RAM in our desktop computers. Because we actually need that
much to run all the bloated software. Sure, &lt;em&gt;“unused memory is wasted memory”&lt;&#x2F;em&gt;,
but maybe I want actually multitask and be able to run more than one program at
the same time.&lt;&#x2F;p&gt;
&lt;p&gt;Not to mention startup cost. I would argue that before the advent of SSDs,
system bootup and app startup was mostly IO limited. But now with more and more
desktop apps moving over to things like electron, things become CPU bound again
and a simple text editor needs
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;atom&#x2F;atom&#x2F;pull&#x2F;13916&quot;&gt;up to one second&lt;&#x2F;a&gt; to start. This is
simply unacceptable. I want the PC to wait for me, not the other way around.
And speaking of SSDs, storage might also become a bottleneck when every piece
of software needs a ~100-200M electron bundle. At least on linux distribution
packaged software can deduplicate that. No idea how huge react-native packages
are though, but I bet they aren’t light either.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;opposing-trends&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#opposing-trends&quot; aria-label=&quot;Anchor link for: opposing-trends&quot;&gt;#&lt;&#x2F;a&gt;
Opposing trends&lt;&#x2F;h2&gt;
&lt;p&gt;Speaking of react-native, I am actually happy that it will hopefully kill this
thing called mobile web apps. I think those were a terrible idea, contrary to
what other Mozilla fanboys might think, related to Firefox OS.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, I think mobile web apps were a terrible idea, because they were never
able to match both the performance and the look-and-feel of native mobile apps.
React-native takes care of that by at least providing a native look-and-feel.
And react-native is also increasingly moving performance critical things (such
as animations) to native code, because, oh what a surprise, JS sucks when it
comes to performance.&lt;&#x2F;p&gt;
&lt;p&gt;Electron is kind of the opposite. It rather provides a unified look (and
themeable, that really is a plus) of one app &lt;em&gt;across&lt;&#x2F;em&gt; platforms, although
electron apps will not really match the look-and-feel of native apps for each
desktop platform. And like I mentioned, people are apparently happy with subpar
performance on desktop for whatever reason.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-hero-we-deserve&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#the-hero-we-deserve&quot; aria-label=&quot;Anchor link for: the-hero-we-deserve&quot;&gt;#&lt;&#x2F;a&gt;
The hero we deserve&lt;&#x2F;h2&gt;
&lt;p&gt;Well I am personally betting quite heavily on
&lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt;, a language that is extremely high
performance (on par or even beating C++), but also safe (no crashes) and most
importantly easy to use. Well at least once its ergonomics are improved a bit,
which is an
&lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2017&#x2F;03&#x2F;02&#x2F;lang-ergonomics.html&quot;&gt;ongoing task&lt;&#x2F;a&gt;.
I am especially excited about
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-roadmap&#x2F;issues&#x2F;16&quot;&gt;non-lexical lifetimes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I am also happy to see some progress for the general problem of 2D graphics and
performance, a problem that former(?) Qt developer Zack Rusin was talking about
&lt;a href=&quot;http:&#x2F;&#x2F;zrusin.blogspot.co.at&#x2F;2010&#x2F;11&#x2F;2d-musings.html&quot;&gt;7 years ago&lt;&#x2F;a&gt;. I mean it
really surprises me every time why modern games can render millions of polygons
and extremely high quality graphics at buttery smooth framerates but web pages
still stutter. I do think that finally we have the proper technologies to move
2D content to the GPU. Not surprisingly, part of that stack is written in Rust.
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pcwalton&#x2F;pathfinder&quot;&gt;Pathfinder&lt;&#x2F;a&gt;, a high quality GPU font
renderer and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;servo&#x2F;webrender&quot;&gt;webrender&lt;&#x2F;a&gt;, a 2D scene graph
renderer optimized for web content.&lt;&#x2F;p&gt;
&lt;p&gt;Also the GNOME&#x2F;GTK community is making progress towards hardware accelerated
drawing in GTK4 via
&lt;a href=&quot;https:&#x2F;&#x2F;www.bassi.io&#x2F;articles&#x2F;2016&#x2F;07&#x2F;05&#x2F;gsk-demystified-1&#x2F;&quot;&gt;GSK&lt;&#x2F;a&gt;, and doing
experiments around bringing GTK and Rust closer together, which I am very
excited about.&lt;&#x2F;p&gt;
&lt;p&gt;Since electron clearly shows that desktop apps are moving toward a custom
themeable look-and-feel across platforms instead of platform native
look-and-feel, maybe the time would be ripe for a completely new toolkit
powered by webrender, with a css inspired theming solution, but still with a
clear strategy on deprecation and purging&#x2F;detoxing of obsolete features.&lt;&#x2F;p&gt;
&lt;p&gt;Coupled with a language that actually supports &lt;em&gt;zero cost abstractions&lt;&#x2F;em&gt; and
&lt;em&gt;pay for what you use&lt;&#x2F;em&gt; resource usage.&lt;&#x2F;p&gt;
&lt;p&gt;Or maybe it will rather happen in the form of react-native for desktop powered
by WebAssembly, so you can still use a decent language.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;in-closing&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#in-closing&quot; aria-label=&quot;Anchor link for: in-closing&quot;&gt;#&lt;&#x2F;a&gt;
In closing&lt;&#x2F;h2&gt;
&lt;p&gt;Exciting times, certainly. Only time will tell, but I sure am too tired to be
on for the ride. I will just wait this one out, practicing my Rust game in the
meantime, hoping that things will turn out for the better in the long run.&lt;&#x2F;p&gt;
&lt;p&gt;Peace out.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Inadequacies of typed JavaScript</title>
        <published>2016-09-10T00:00:00+00:00</published>
        <updated>2016-09-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/inadequacies-of-typed-javascript/"/>
        <id>https://swatinem.de/blog/inadequacies-of-typed-javascript/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/inadequacies-of-typed-javascript/">&lt;p&gt;The last week I have been playing extensively with both &lt;a href=&quot;https:&#x2F;&#x2F;flowtype.org&#x2F;&quot;&gt;flow&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;www.typescriptlang.org&#x2F;&quot;&gt;TypeScript&lt;&#x2F;a&gt;. And I have noticed two things that I consider to be bugs in
both of them. So is there something wrong with my expectations maybe? Lets
analyze both of the cases.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;non-nullable-class-members&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#non-nullable-class-members&quot; aria-label=&quot;Anchor link for: non-nullable-class-members&quot;&gt;#&lt;&#x2F;a&gt;
non-nullable class members&lt;&#x2F;h2&gt;
&lt;p&gt;TypeScript (TS) introduces non-nullable types with version 2, and flow has had them
for quite a while I think. There have been tons of stories about how bad the
null type&#x2F;value is. Some call it the worst mistake in computer science. And
indeed, most of the errors we have at runtime are related to null. Accessing
properties of null, or calling null. Having to check values for null all the
time is tedious and as the runtime errors prove, null can slip through at all
kinds of places.&lt;&#x2F;p&gt;
&lt;p&gt;It is even worse in JavaScript because it does not have one null type but
actually two: &lt;code&gt;null&lt;&#x2F;code&gt; and &lt;code&gt;undefined&lt;&#x2F;code&gt;. To make things worse &lt;code&gt;typeof null === &quot;object&quot;&lt;&#x2F;code&gt; and &lt;code&gt;typeof undefined === &quot;undefined&lt;&#x2F;code&gt;, so you can’t even check for
both cases at the same time; well actually you can use &lt;code&gt;value == null&lt;&#x2F;code&gt; since
that also works for undefined. Go figure.&lt;&#x2F;p&gt;
&lt;p&gt;To make more worse still, JS also has boolean coercion. Which itself can be
convenient, but you can very easily trip up. If you have a value that has the
type &lt;code&gt;number | null&lt;&#x2F;code&gt;, using a simple &lt;code&gt;if (value)&lt;&#x2F;code&gt; will fail for the value &lt;code&gt;0&lt;&#x2F;code&gt;.
Probably not the thing you intended. And you &lt;em&gt;will&lt;&#x2F;em&gt; get it wrong at some point.
I have done so over and over again.&lt;&#x2F;p&gt;
&lt;p&gt;So, to come back to the topic at hand. Both flow and TS now prevent you from
tripping up on most of the null issues, except for the boolean coercion. But
both of them get one case wrong:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  prop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;prop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; typechecks just fine, fails at runtime
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This simple code will typecheck just fine in both flow and TS, but will fail at
runtime with a TypeError because you are accessing a property on null.
I have reported this on the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Microsoft&#x2F;TypeScript&#x2F;issues&#x2F;10827&quot;&gt;TS issue tracker&lt;&#x2F;a&gt; but it
was closed as a duplicate of a &lt;em&gt;wontfix&lt;&#x2F;em&gt;ed issue. Apparently it is too
difficult to correctly cover all the different ways in which constructors can
behave.&lt;&#x2F;p&gt;
&lt;p&gt;As far as I see it, the root of the problem is twofold.
First, JS objects were never meant to have a guaranteed shape, its only these
type checkers that kind of try to enforce those things. And the second problem
is that JS constructors work by assigning&#x2F;creating properties on &lt;code&gt;this&lt;&#x2F;code&gt;, which
can be aliased or delegated to other functions, etc…&lt;&#x2F;p&gt;
&lt;p&gt;In other languages with stricter guarantees, such as Rust, you do not have
&lt;code&gt;this&lt;&#x2F;code&gt; or constructor functions at all. The language itself guarantees that
creating an object of a certain type is atomic via an object literal that is
guaranteed to include all properties. (You can still use object spread for
convenience)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ideas-to-solve-the-problem&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#ideas-to-solve-the-problem&quot; aria-label=&quot;Anchor link for: ideas-to-solve-the-problem&quot;&gt;#&lt;&#x2F;a&gt;
Ideas to solve the Problem&lt;&#x2F;h3&gt;
&lt;p&gt;Both flow and TS can hold up the typesystem guarantees if you are using object
literals instead of classes. Use plain functions and object instead of classes.
I have heard that one before. The whole functional programming crowd advocates
this. Maybe they have a point? But I do like having methods on
objects&#x2F;prototypes. So maybe we can combine object literals that are correctly
checked for null properties with methods somehow. Well there is this special
&lt;code&gt;__proto__&lt;&#x2F;code&gt; property that was specified for ES2015. I tried using it with TS,
but failed. The method works perfectly in JS, but typechecking in TS fails.
Well unless I want to copy every method into the object, which completely
defeats the purpose of shared prototype methods.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    __proto__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;AProto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; can’t assign to unknown property
&lt;&#x2F;span&gt;&lt;span&gt;    a
&lt;&#x2F;span&gt;&lt;span&gt;  }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;AProto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;a&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; can’t call unknown method
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So no luck here :-(&lt;&#x2F;p&gt;
&lt;h2 id=&quot;aliasing-literal-union-types&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#aliasing-literal-union-types&quot; aria-label=&quot;Anchor link for: aliasing-literal-union-types&quot;&gt;#&lt;&#x2F;a&gt;
Aliasing literal &#x2F; union types&lt;&#x2F;h2&gt;
&lt;p&gt;Both flow and TS have the notion of literal types and union types. Union types
are really simple. The type &lt;code&gt;A | B&lt;&#x2F;code&gt; can either be &lt;code&gt;A&lt;&#x2F;code&gt; or &lt;code&gt;B&lt;&#x2F;code&gt;. But since those
are not native to JS, you have to have some way to actually assert the type at
runtime. For primitives its easy, since you can just check via &lt;code&gt;typeof&lt;&#x2F;code&gt;. But
discriminating objects needs to be done manually with a property used to &lt;em&gt;tag&lt;&#x2F;em&gt;
the object. In the following example, &lt;code&gt;U&lt;&#x2F;code&gt; is such a union type and it can be
discriminated by looking at the &lt;code&gt;type&lt;&#x2F;code&gt; property. And here we are actually using
strings as types: literal types. So in this case &lt;code&gt;U.type&lt;&#x2F;code&gt; has the type &lt;code&gt;&quot;a&quot; | &quot;b&quot;&lt;&#x2F;code&gt;, so it can either be the string &lt;code&gt;&quot;a&quot;&lt;&#x2F;code&gt; or &lt;code&gt;&quot;b&quot;&lt;&#x2F;code&gt;, but nothing else.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;a&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;propA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;b&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;propB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;number &lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;U &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Both flow and TS handle these things quite well. If you use &lt;code&gt;.type&lt;&#x2F;code&gt; in a
&lt;code&gt;switch&lt;&#x2F;code&gt; or &lt;code&gt;if&lt;&#x2F;code&gt; statement, you can match for the exact type. But both
typecheckers fail if you want to alias that property, for example via
destructuring: &lt;code&gt;const {type} = X;&lt;&#x2F;code&gt;. Here, the type of &lt;code&gt;type&lt;&#x2F;code&gt; is widened to
&lt;code&gt;string&lt;&#x2F;code&gt; and it can no longer be used to discriminate the union type.
I also reported this in the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Microsoft&#x2F;TypeScript&#x2F;issues&#x2F;10830&quot;&gt;TS issue tracker&lt;&#x2F;a&gt; and
got the answer that is would be two complicated to implement this, because it
would involve tracking the dependency between the two variables, increasing the
depth of the dependency as more aliases are added.&lt;&#x2F;p&gt;
&lt;p&gt;Well at least this can be easily fixed by just always using the property
instead of extracting it into a local.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;closing-remarks&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#closing-remarks&quot; aria-label=&quot;Anchor link for: closing-remarks&quot;&gt;#&lt;&#x2F;a&gt;
Closing remarks&lt;&#x2F;h2&gt;
&lt;p&gt;I wish one of the compile-to-js languages would actually support &lt;em&gt;real&lt;&#x2F;em&gt; union
types and has a &lt;em&gt;real&lt;&#x2F;em&gt; match expression. Automatically tagging variants or even
supporting null-pointer optimization so you don’t have to have unnecessary
indirections if a simple &lt;code&gt;typeof&lt;&#x2F;code&gt; check would be enough.&lt;&#x2F;p&gt;
&lt;p&gt;There are already compile-to-js languages that support things like this. For
Example &lt;a href=&quot;http:&#x2F;&#x2F;elm-lang.org&#x2F;&quot;&gt;Elm&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;www.purescript.org&#x2F;&quot;&gt;PureScript&lt;&#x2F;a&gt; (both based on Haskell).
And possibly &lt;a href=&quot;https:&#x2F;&#x2F;clojurescript.org&#x2F;&quot;&gt;ClojureScript&lt;&#x2F;a&gt;, even though I know too little about that
language. With the recently released &lt;a href=&quot;https:&#x2F;&#x2F;bloomberg.github.io&#x2F;bucklescript&#x2F;&quot;&gt;BuckleScript&lt;&#x2F;a&gt;, you can also
compile OCaml to JS, with quite readable code, although I don’t quite like that
it encodes structures as arrays and thus misses out on hidden class
optimizations of JS engines (I could be wrong though). With &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;reason&#x2F;&quot;&gt;Reason&lt;&#x2F;a&gt;
you can even write readable OCaml.&lt;&#x2F;p&gt;
&lt;p&gt;And of cause, I am very excited to see steady, although very slow progress
towards compiling Rust to WebAssembly. Although I’m unsure about the FFI
between WebAssembly&#x2F;asm.js and real JS. It relies on a preallocated
&lt;code&gt;ArrayBuffer&lt;&#x2F;code&gt; as a kind of heap, which might be good for low level performance
but does not play well with consuming and outputting plain JS objects.&lt;&#x2F;p&gt;
&lt;p&gt;So the future is still very much open. I really hope there will be a readable,
convenient, fast and &lt;em&gt;safe&lt;&#x2F;em&gt; compile-to-js language that can solve all these
problems and integrates seamlessly into existing JS projects. One can dream
though.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Individualismus</title>
        <published>2016-06-12T00:00:00+00:00</published>
        <updated>2016-06-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/individualismus/"/>
        <id>https://swatinem.de/blog/individualismus/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/individualismus/">&lt;p&gt;Aus gegebenem Anlass möchte ich gerne meine Meinung zu verschieden Themen
erläutern die mir am Herzen liegen. Da ich schriftlich meine Gedanken besser
ordnen kann ziehe ich das einer wörtlichen Diskussion vorerst vor.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mich-stort&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#mich-stort&quot; aria-label=&quot;Anchor link for: mich-stort&quot;&gt;#&lt;&#x2F;a&gt;
Mich stört&lt;&#x2F;h2&gt;
&lt;p&gt;Ich sehe oft Verhaltensmuster in Individuen und in der Gesellschaft die mich
durchaus stören und die ich für gefährlich erachte. Hier einige Beispiel,
manche aktuell, manche alt.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Person A schließt Personen aus ihrem Freundeskreis aus weil diese Partei X
wählen.&lt;&#x2F;li&gt;
&lt;li&gt;Person B würde am liebsten Menschen verprügeln die Partei X wählen.&lt;&#x2F;li&gt;
&lt;li&gt;Person C geht zu einer Demostration mit der Absicht Menschen zu beschimpfen.&lt;&#x2F;li&gt;
&lt;li&gt;Personen D und E verarschen mich weil ich &lt;em&gt;nicht gegen&lt;&#x2F;em&gt; Organisation Y bin.&lt;&#x2F;li&gt;
&lt;li&gt;Personen boykottieren und hetzen gegen eine IT Konferenz weil auf dieser
Person F einen Vortrag hält.&lt;&#x2F;li&gt;
&lt;li&gt;Personen hetzen gegen Person G weil diese Jahre zuvor Geld für einen
politischen Zweck gespendet hat.&lt;&#x2F;li&gt;
&lt;li&gt;Person H will am liebsten Partei X verbieten.&lt;&#x2F;li&gt;
&lt;li&gt;Person G bezeichner alle Wähler von Partei X als &lt;em&gt;dumm&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Website W löscht und zensiert Kommentare mit gewissen Inhalten.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Wenn man etwas verallgemeinert könnte man dieses Verhalten als Mobbing
bezeichnen. Und glaubt mir, ich kenne mich mit Mobbing aus. Ich war mein Leben
lang Außenseiter und wurde mein Leben lang gemobbt. Genau aus dem Grund
will ich vor den Gefahren dieser Verhaltensmuster warnen.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;die-demokratische-grundordnung-in-gefahr&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#die-demokratische-grundordnung-in-gefahr&quot; aria-label=&quot;Anchor link for: die-demokratische-grundordnung-in-gefahr&quot;&gt;#&lt;&#x2F;a&gt;
Die demokratische Grundordnung in Gefahr&lt;&#x2F;h2&gt;
&lt;p&gt;Auf den ersten Blick scheint es sehr weit hergeholt, aber ich finde das dieses
Verhalten im Zusammenhang mit Politik die gesamte Grundordnung auf den Kopf
stellt.&lt;&#x2F;p&gt;
&lt;p&gt;Mal angenommen Person H bekommt ihren wunsch und Partei X wird verboten.
Vielleicht weil Partei X &lt;em&gt;zu rechts&lt;&#x2F;em&gt; ist. Als nächstes verbieten wir dann noch
Partei Y weil sie &lt;em&gt;zu kommunistisch&lt;&#x2F;em&gt; ist. Dann Partei Z weil sie &lt;em&gt;zu öko&lt;&#x2F;em&gt; ist.
Partei W verbieten wir auch aus irgendeinem anderen Grund. Und ehe wir uns
versehen haben wir Scheinwahlen auf deren Stimmzettel nur eine
Auswahlmöglichkeit ist.&lt;&#x2F;p&gt;
&lt;p&gt;Und wie sieht es mit Überwachung und Zensur aus? Es wird tatsächlich zunehmend
zensiert im Internet. Unter dem vorbehalt &lt;em&gt;rechte&lt;&#x2F;em&gt; oder &lt;em&gt;hass verbreitende&lt;&#x2F;em&gt;
Kommentare zu löschen. Aber es geht auch schon einen Schritt weiter. Ein Freund
hat mir neulich geschildert wie er zum lösches seines Facebook Kontos
getrieben wurde. Nachdem er einen Beitrag einer politischen Partei kommentiert
hat wollte Facebook urplötzlich seine Identität durch eine Passkopie
feststellen. Ich selbst nenne es einen meiner Lebensgrundsätze niemals bei
Facebook zu sein und nenne schon seit Jahren Facebook als eine der größten
Gefahren für das freie Internet.&lt;&#x2F;p&gt;
&lt;p&gt;Die Frage ist auch wo wir die Grenzen ziehen. Wir haben heute schon Person C
die absichtlich Menschen wegen ihrer politischen Meinung beschimpft, wir haben
schon Hetzkampagnen gegen Einzelpersonen, Parteien oder sogar IT Konferenzen.
Wo ist die Grenze? Was ist wenn Person B tatsächlich anfängt Anhänger von
Partei X zu verprügeln? Irgendwann sind wir so weit das wir deren Häuser
anzünden, und sie schlussendlich ermorden.&lt;&#x2F;p&gt;
&lt;p&gt;Ist das alles so weit hergeholt? Vor 70-80 Jahren hat es sicherlich auch mit
Mobbing angefangen. Mit dem ausschließen aus dem Freundeskreis. Mit
Beschimpfungen und dem Boykott von Veranstaltungen. Wie es geendet hat steht in
den Geschichtsbüchern.&lt;&#x2F;p&gt;
&lt;p&gt;Mobbing ist tatsächlich eine starke Waffe. Es kann dem Menschen den Gedanken
in den Kopf setzen er müsse sich für seinen Körper schämen. Oder für seine
sexuelle Orientierung. Und jetzt sogar für die politische Meinung? Wenn durch
Mobbing dies auch noch manipuliert wird sehe ich auch deswegen die
demokratischen Grundsätze in Gefahr.
Noch gut das es ein Wahlgeheimnis gibt. Oder sollen wir dieses auch bald
abschaffen?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ein-apell-fur-ein-friedliches-zusammenleben&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#ein-apell-fur-ein-friedliches-zusammenleben&quot; aria-label=&quot;Anchor link for: ein-apell-fur-ein-friedliches-zusammenleben&quot;&gt;#&lt;&#x2F;a&gt;
Ein Apell für ein friedliches Zusammenleben&lt;&#x2F;h2&gt;
&lt;p&gt;Ich habe zwar selbst viele Vorurteile. Aber ich versuche dennoch jeden Menschen
mit Respekt und Würde zu behandeln, ungeachtet dessen Hautfarbe, Geschlecht,
Religion und &lt;em&gt;politischer Meinung&lt;&#x2F;em&gt;. Sofern sie mir den selben Respekt entgegen
bringen :-)&lt;&#x2F;p&gt;
&lt;p&gt;Ich finde es sehr schade dass viele Leute die ich kenne, und die sich selbst
als ach so tolerant bezeichnen dessen nicht fähig sind und stattdessen Menschen
mit anderer politischer Meinung beschimpfen oder am liebsten verprügeln würden.
Eben von den Leuten erwarte ich das sie es besser wissen sollten.&lt;&#x2F;p&gt;
&lt;p&gt;Ich würde die Menschen in meiner Umgebung eher als &lt;em&gt;links&lt;&#x2F;em&gt; einordnen, falls ihr
mir das Schubladendenken verzeiht. Aber das Maß an Hass den diese Menschen
gegen &lt;em&gt;rechte&lt;&#x2F;em&gt; versprühen übersteigt meine Toleranz etwas.
Und nicht nur das. Auch Menschen die &lt;em&gt;nicht gegen&lt;&#x2F;em&gt; rechts sind kriegen diesen
Hass teilweise ab. So wie ich.&lt;&#x2F;p&gt;
&lt;p&gt;Ich bin nicht &lt;em&gt;gegen&lt;&#x2F;em&gt; rechts. Ich bin auch nicht &lt;em&gt;für&lt;&#x2F;em&gt; rechts. Ich bin dafür
das jeder Mensch ein Recht darauf hat sich frei zu entfalten und mit Würde
behandelt zu werden. Und ein Recht auf freie Meinungsäußerung usw, auch wenn
die Meinung vielen Leuten nicht gefällt.&lt;&#x2F;p&gt;
&lt;p&gt;Dennoch muss man sich im Kopf behalten dass die eigene Freiheit dort aufhört wo
sie die Freiheit anderer Menschen einschränkt. In diesem Sinne: Seid lieb
zueinander :-)&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The one killer feature icon fonts have over svg</title>
        <published>2016-01-31T00:00:00+00:00</published>
        <updated>2016-01-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/the-one-killer-feature-of-icon-fonts/"/>
        <id>https://swatinem.de/blog/the-one-killer-feature-of-icon-fonts/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/the-one-killer-feature-of-icon-fonts/">&lt;p&gt;The reason I write about this now is githubs icons started to look like shit on
my screen&#x2F;system since a week or so. I asked myself why and looked at the
source to find out they switched from using an icon font to inline svgs.
There is quite some controversy about whether to use an icon font or svgs for
icons. Just &lt;a href=&quot;https:&#x2F;&#x2F;www.google.at&#x2F;search?q=svg+vs+icon+font&quot;&gt;google for it&lt;&#x2F;a&gt; to
find some articles about that topic.&lt;&#x2F;p&gt;
&lt;p&gt;What neither of those articles mentions is the one killer feature that icon
fonts have over svg. Actually its two features, but they are a bit related.
It is this: &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Font_hinting&quot;&gt;&lt;strong&gt;hinting&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Subpixel_rendering&quot;&gt;&lt;strong&gt;subpixel anti-aliasing&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In english, hinting means that the font rendering will &lt;em&gt;snap straight lines to
device pixels&lt;&#x2F;em&gt;, to make sure that fonts always look crisp. And subpixel AA
means that the font rendering can boost the horizontal resolution by 3 due to
the fact how lcd hardware actually works.&lt;&#x2F;p&gt;
&lt;p&gt;Both of these features are unique to fonts, they do not apply to svg. Hinting
can actually distort the proportions somewhat to make sure straight lines snap
to pixels, you clearly do not want that for svg. And although subpixel AA may
be possible for svg, I have never seen that been done so far.&lt;&#x2F;p&gt;
&lt;p&gt;There is quite some hoops you have to just through to make svg, and especially
&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;&#x2F;code&gt; look good and crisp. If you want a line that is &lt;code&gt;1px&lt;&#x2F;code&gt; &lt;em&gt;wide&lt;&#x2F;em&gt; to look
good, you have to place it at a &lt;code&gt;0.5px&lt;&#x2F;code&gt; coordinate, so when you add the width,
it ends up at &lt;code&gt;[0, 1]&lt;&#x2F;code&gt; and therefore looks crisp. You do &lt;em&gt;not&lt;&#x2F;em&gt; want to do that
for a &lt;code&gt;2px&lt;&#x2F;code&gt; line though, because you end up with &lt;code&gt;[-0.5, 1.5]&lt;&#x2F;code&gt; which looks like
shit again. It’s hard. Believe me, I’ve been through that already.&lt;&#x2F;p&gt;
&lt;p&gt;The point im trying to make here though is that in order to make svgs look
good, you actually have to give up on one key selling point of svgs:
&lt;strong&gt;scalability&lt;&#x2F;strong&gt;! You have to author svgs, specifically for one size to make
sure that lines snap to device pixels. Fonts will just do the work for you.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;caveats&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#caveats&quot; aria-label=&quot;Anchor link for: caveats&quot;&gt;#&lt;&#x2F;a&gt;
Caveats&lt;&#x2F;h2&gt;
&lt;p&gt;All that I have written about here applies to my personal system, which has a
device pixel density of 1. For low dpi screens, hinting matters &lt;em&gt;a lot&lt;&#x2F;em&gt;. The
problems I described here are &lt;em&gt;much&lt;&#x2F;em&gt; less of a problem on high resolution
screens.&lt;&#x2F;p&gt;
&lt;p&gt;The second thing to note is that &lt;strong&gt;content authors do not control font
rendering&lt;&#x2F;strong&gt; all the way. Sure, there are css properties like &lt;code&gt;font-rendering&lt;&#x2F;code&gt;
and friends, but for example the hinting behavior can not be controlled by the
author, but is a system wide setting. On my system, I have hinting turned up
quite high because I prefer light crisp fonts rather than thick blurry ones.
One of the hits you find on google for that topic mentions that icon fonts look
blurry compared to svgs. They might, &lt;em&gt;depending on your font rendering
settings&lt;&#x2F;em&gt;. On the other hand though, svgs look blurry if lines do not line up
with physical pixels, pun intended.&lt;&#x2F;p&gt;
&lt;p&gt;Fact is that font rendering settings also very much depend on your personal
taste. Some people for example have font smoothing &#x2F; anti-aliasing disabled
altogether, most likely because they don’t know such settings exist. If I have
to use someone elses system, turning on font AA is the first thing I do,
because it really hurts my eyes.&lt;&#x2F;p&gt;
&lt;p&gt;I have a also recently seen a developer post a
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;243#issuecomment-172473100&quot;&gt;screenshot&lt;&#x2F;a&gt;
without font AA that also hurt my eyes really bad. Come on, it’s 2016 for fucks
sake! There is absolutely no reason to not activate this single most important
feature of a modern desktop!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Doing the impossible:</title>
        <published>2015-07-26T00:00:00+00:00</published>
        <updated>2015-07-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/doing-the-impossible-choosing-a-material-design-framework/"/>
        <id>https://swatinem.de/blog/doing-the-impossible-choosing-a-material-design-framework/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/doing-the-impossible-choosing-a-material-design-framework/">&lt;p&gt;The story starts like this: I am about to start developing a native-looking
mobile App. And I would like to use Material Design for it. Since its awesome
and I want a native look and feel.&lt;&#x2F;p&gt;
&lt;p&gt;And just as a precursor: Similar to Paul Lewis, I am also known to &lt;a href=&quot;https:&#x2F;&#x2F;aerotwist.com&#x2F;blog&#x2F;polymer-for-the-performance-obsessed&#x2F;&quot;&gt;hate
everything that looks and smells like a
framework&lt;&#x2F;a&gt;.
Even though Material Design is just about styling, most of the Material Design
Frameworks do come with some baggage in the form of JS and Framework lock-in.
I am also extremely opinionated when it comes to JS Frameworks and Conventions.
I kind of feel like I am chasing for perfection instead of getting shit done.
But well that’s just how I roll :-(&lt;&#x2F;p&gt;
&lt;p&gt;So I was mainly looking at
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dogfalo&#x2F;materialize&#x2F;&quot;&gt;Materialize&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;callemall&#x2F;material-ui&quot;&gt;Material-UI&lt;&#x2F;a&gt; and the paper elements
of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PolymerElements&#x2F;polymer-starter-kit&#x2F;&quot;&gt;Polymer&lt;&#x2F;a&gt;. And then
just during my research google released
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;material-design-lite&quot;&gt;Material Design Lite&lt;&#x2F;a&gt;. I also
looked at some other smaller contestants, but those four came out top.&lt;&#x2F;p&gt;
&lt;p&gt;Before I start dissecting the choices, lets just say that every one of those is
missing some things that I kind of need. It is kind of disappointing really. So
many contestants, but all are lacking in some ways. :-(&lt;&#x2F;p&gt;
&lt;p&gt;So lets start.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;materialize&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#materialize&quot; aria-label=&quot;Anchor link for: materialize&quot;&gt;#&lt;&#x2F;a&gt;
Materialize&lt;&#x2F;h2&gt;
&lt;p&gt;Seeing how materialize was a bunch of jquery plugins, I quickly removed it from
the list of options. jQuery was nice ten years ago, but I think we can do
without it by now.&lt;&#x2F;p&gt;
&lt;p&gt;I actually did try the other three, Material-UI, MDL and Polymer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;material-ui&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#material-ui&quot; aria-label=&quot;Anchor link for: material-ui&quot;&gt;#&lt;&#x2F;a&gt;
Material-UI&lt;&#x2F;h2&gt;
&lt;p&gt;While I do like the concept and the composability of a react-like library,
react itself is a bit too big for my taste. Putting material-ui into the mix, a
simple page with just an AppBar comes to 1M of code. As opposed to all others,
I actually talk unminified ungzipped code here. LOC would be a better measure
but I don’t have exact numbers, except that it is HUGE.&lt;&#x2F;p&gt;
&lt;p&gt;It also has some kind of boilerplate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;React &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;react&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;injectTapEventPlugin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;react-tap-event-plugin&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ Styles&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;AppBar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;IconButton } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;material-ui&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;injectTapEventPlugin&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;ThemeManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Styles&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;ThemeManager&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;App &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;React&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#399ee6;&quot;&gt;Component &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getChildContext&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      muiTheme&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;ThemeManager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getCurrentTheme&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;AppBar
&lt;&#x2F;span&gt;&lt;span&gt;        title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Foo&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        iconElementLeft&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;IconButton iconClassName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;material-icons&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;arrow_back&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;IconButton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;childContextTypes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  muiTheme&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;React&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;PropTypes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;object
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;React&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;(&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;document&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;body)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As far as I understand, this means that you can change the theme dynamically,
which would be awesome. But the boilerplate is a bit annoying nonetheless.&lt;&#x2F;p&gt;
&lt;p&gt;On the plus side, Material-UI has some nice special elements like date and time
pickers. It seems to be quite complete.&lt;&#x2F;p&gt;
&lt;p&gt;What I don’t like about React is that you can’t have arrays of elements, except
for &lt;code&gt;children&lt;&#x2F;code&gt;. But you can only have one &lt;code&gt;children&lt;&#x2F;code&gt; array per element. So
Material-UI passes some children as props, which just feels wrong to me. I know
that a lot of React libraries use this pattern, but it still feels wrong to me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;polymer&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#polymer&quot; aria-label=&quot;Anchor link for: polymer&quot;&gt;#&lt;&#x2F;a&gt;
Polymer&lt;&#x2F;h2&gt;
&lt;p&gt;I started out with the full polymer starter. Maybe that was a problem, since
its also HUGE. It was downloading 300M of npm packages, plus a lot of things
from bower. It just generated hundreds of files and I have no idea for what
purpose. I simply couldn’t understand all that code. And that’s not even
library code. It’s supposed to be your own app code.&lt;&#x2F;p&gt;
&lt;p&gt;Also, I’m not really a friend of html imports. I would rather have ES6 modules
and wire up as much through JS as possible, maybe even CSS. But having
everything as HTML modules with code inside script tags just feels kind of
backwards to me. Maybe I should start with an empty project so I wont be
overwhelmed from the start.&lt;&#x2F;p&gt;
&lt;p&gt;I am also kind of ambivalent when it comes to web components in general. Sure,
it is supposed to be implemented natively in the Browser. But you still have to
pay high costs for it. The browser will have to (recursively) resolve the
imports and load the things. HTTP2 Push will help a lot, but still. Also there
is a lot of JS involved at app start. While it does not matter for the project
at hand, I think think web components, depending on the way you use them might
not be that great for SEO, serving static html and load times. But I might be
mistaken completely. For now the whole machinery with html imports and the
tools that are used to vulcanize them seem to be a little overkill for me.&lt;&#x2F;p&gt;
&lt;p&gt;I actually haven’t looked into how big the resulting code is, but I would
probably have to use it in conjunction with a React-like library anyway so that
would grow the size considerably as well.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;material-design-lite&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#material-design-lite&quot; aria-label=&quot;Anchor link for: material-design-lite&quot;&gt;#&lt;&#x2F;a&gt;
Material Design Lite&lt;&#x2F;h2&gt;
&lt;p&gt;MDL was actually released right the moment when I was starting my research.
Being mainly about CSS, with just little JS involved (sadly you can’t quite do
without), and directly from google, it felt like it might be the best
contestant. But it is also quite new and incomplete. It has no list components
as of yet. And the Appbar kind of has a menu button hardcoded, I’m not sure how
to replace that menu button by a back button.&lt;&#x2F;p&gt;
&lt;p&gt;Also something that really annoys me is that it is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;material-design-lite&#x2F;issues&#x2F;833&quot;&gt;not yet easily embeddable
in a typical app based on CJS or ES6
modules&lt;&#x2F;a&gt;. The JS
code relies on being globally imported, which I don’t particularly like.
Hopefully this will be fixed, but until then its just annoying.&lt;&#x2F;p&gt;
&lt;p&gt;The JS Code comes to roughly 110K unminified and it is not too bad to read. The
CSS also amounts to roughly the same size.&lt;&#x2F;p&gt;
&lt;p&gt;Again, I would use it in conjunction with a React-like library so that would
add some weight. All in all, it feels to be the simplest base if I happen to
do a lot of custom things. And since it has no lists yet, I would have to do at
least those myself.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;#&lt;&#x2F;a&gt;
Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I am still not happy with the choices I have to be honest. And I still feel
like I’m standing in my own way. Since I want to use something that I actually
like to use, as in feeling like I’m doing the right thing as opposed to getting
things done but feeling like its all a big hack.&lt;&#x2F;p&gt;
&lt;p&gt;So I’m basically standing still for now. Maybe I will give a clean Polymer
project another chance, maybe I will go with MDL and just implement certain
things myself. Most likely I would have to implement quite some things myself
anyways.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>New Blog</title>
        <published>2015-07-23T00:00:00+00:00</published>
        <updated>2015-07-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://swatinem.de/blog/new-blog/"/>
        <id>https://swatinem.de/blog/new-blog/</id>
        
        <content type="html" xml:base="https://swatinem.de/blog/new-blog/">&lt;p&gt;I have decided to start over.
This time instead of rolling my own static site generator or blogging system, I
decided to try hexo with a slight modification of its default theme.&lt;&#x2F;p&gt;
&lt;p&gt;And from now on I think I will blog more about technical things rather than
personal or philosophical ones. And also to do so in english.&lt;&#x2F;p&gt;
&lt;p&gt;So enjoy!&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
