<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Predrag Gruevski&#x27;s blog and personal site.</title>
    <subtitle>Predrag Gruevski&#x27;s blog and personal site.</subtitle>
    <link rel="self" type="application/atom+xml" href="https://predr.ag/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://predr.ag"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-09-03T00:00:00+00:00</updated>
    <id>https://predr.ag/atom.xml</id>
    <entry xml:lang="en">
        <title>Is this trait sealed, or not sealed — that is the question</title>
        <published>2024-09-03T00:00:00+00:00</published>
        <updated>2024-09-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/is-this-trait-sealed-or-not-sealed/"/>
        <id>https://predr.ag/blog/is-this-trait-sealed-or-not-sealed/</id>
        
        <summary type="html">&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;releases&#x2F;tag&#x2F;v0.35.0&quot;&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; v0.35&lt;&#x2F;a&gt; can determine whether Rust traits are &quot;sealed&quot;, allowing it to catch many tricky new instances of SemVer breakage. Why is accurate sealed trait detection so important, and why is implementing it correctly so hard?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>How to Query (Almost) Everything</title>
        <published>2024-07-22T00:00:00+00:00</published>
        <updated>2024-07-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/how-to-query-almost-everything-hytradboi/"/>
        <id>https://predr.ag/blog/how-to-query-almost-everything-hytradboi/</id>
        
        <summary type="html">&lt;p&gt;In 2022, I gave a talk at a virtual conference with an unforgettable name: &lt;a href=&quot;https:&#x2F;&#x2F;www.hytradboi.com&#x2F;&quot;&gt;HYTRADBOI, which stands for &quot;Have You Tried Rubbing a Database On It?&quot;&lt;&#x2F;a&gt; Its goal was to discuss unconventional uses of database-like technology, and featured many excellent talks.&lt;&#x2F;p&gt;
&lt;p&gt;My talk &quot;How to Query (Almost) Everything&quot; &lt;a href=&quot;https:&#x2F;&#x2F;fnordig.de&#x2F;2022&#x2F;04&#x2F;30&#x2F;hytradboi&#x2F;&quot;&gt;received&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;stevekrouse&#x2F;status&#x2F;1520144870605656064&quot;&gt;copious&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jeremyjkun&#x2F;status&#x2F;1580329307381321728&quot;&gt;praise&lt;&#x2F;a&gt;. It describes the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall&lt;&#x2F;a&gt; query engine&#x27;s architecture, and includes real-world examples of how my (now-former) employer relies on it to statically catch and prevent cross-domain bugs across a monorepo with hundreds of services and shared libraries. For example:&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>The Wi-Fi only works when it&#x27;s raining</title>
        <published>2024-04-01T00:00:00+00:00</published>
        <updated>2024-04-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/wifi-only-works-when-its-raining/"/>
        <id>https://predr.ag/blog/wifi-only-works-when-its-raining/</id>
        
        <content type="html" xml:base="https://predr.ag/blog/wifi-only-works-when-its-raining/">&lt;p&gt;&lt;em&gt;Happy April 1st! This post is part of &lt;a href=&quot;https:&#x2F;&#x2F;aprilcools.club&#x2F;&quot;&gt;April Cools Club&lt;&#x2F;a&gt;: an April 1st effort to publish genuine essays on unexpected topics. Please enjoy this true story, and rest assured that the tech content will be back soon!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s what my dad said when I asked what was wrong with our home internet connection. &quot;The Wi-Fi only works when it&#x27;s raining.&quot;&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;wifi-router-on-balcony-cropped.e7d44f4b1754784b.jpg&quot; alt=&quot;Illustration of a Wi-Fi antenna attached to the exterior of an upper floor of an apartment building. It&amp;#x27;s currently raining, and the Wi-Fi is working flawlessly.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Let&#x27;s back up a few steps, so we&#x27;re all on the same page about the &lt;em&gt;utter ridiculousness&lt;&#x2F;em&gt; of this situation.&lt;&#x2F;p&gt;
&lt;p&gt;At the time, I was still a college student — this was over 10 years ago. I had come back home to spend a couple of weeks with my parents before the fall semester kicked off. I hadn&#x27;t been back home in almost a full year, because home and school were on different continents.&lt;&#x2F;p&gt;
&lt;p&gt;My dad is an engineer who had already been tinkering with networking gear longer than I&#x27;d been alive. Through the company he started, he had designed and deployed all sorts of complex network systems at institutions across the country — everything from gigabit Ethernet for an office building, to inter-city connections over &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Line-of-sight_propagation&quot;&gt;line-of-sight&lt;&#x2F;a&gt; microwave links.&lt;&#x2F;p&gt;
&lt;p&gt;He is &lt;em&gt;the last person on Earth&lt;&#x2F;em&gt; who would say a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Magical_thinking&quot;&gt;&quot;magical thinking&quot;&lt;&#x2F;a&gt; phrase like that.&lt;&#x2F;p&gt;
&lt;p&gt;&quot;What?&quot; I uttered, stunned. &quot;The Wi-Fi only works while it&#x27;s raining,&quot; he repeated patiently. &quot;It started a couple of weeks ago, and I haven&#x27;t had a chance to look into it yet.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;&quot;No way,&quot; I said. If anything, &lt;a href=&quot;https:&#x2F;&#x2F;www.microwave-link.com&#x2F;microwave&#x2F;rain-fade-on-microwave-links&#x2F;&quot;&gt;rain makes wireless signal quality &lt;em&gt;worse&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;, not &lt;em&gt;better&lt;&#x2F;em&gt;. Never &lt;em&gt;better&lt;&#x2F;em&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Two weeks without reliable internet? I started a speed-run through the stages of grief...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;denial&quot;&gt;Denial&lt;&#x2F;h2&gt;
&lt;p&gt;I pulled open my laptop and started poking at the network.&lt;&#x2F;p&gt;
&lt;p&gt;Pinging any website had a 98% packet loss rate. The internet connection was still up, but only in the most annoying &quot;technically accurate&quot; sense. Nothing loads when you have a 98% packet loss rate! The network may as well have been dead.&lt;&#x2F;p&gt;
&lt;p&gt;I was upset. I had just started dating someone a few months prior, and she was currently on the other side of the planet! How was I to explain that I couldn&#x27;t stay in touch because it wasn&#x27;t raining?&lt;label for=&quot;sn-mobile-internet&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-mobile-internet&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Mobile data at the time was &lt;em&gt;exorbitantly&lt;&#x2F;em&gt; expensive, so much so that I didn&#x27;t have a data plan at all for my cell service at home. I couldn&#x27;t just use my phone&#x27;s data plan to work around the problem, like one might do today in a similar situation.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;I was pacing around the house, fuming. Grief, stage two!&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s when the rain started.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bargaining&quot;&gt;Bargaining&lt;&#x2F;h2&gt;
&lt;p&gt;Like a miracle, within 5 minutes of the rain starting, the packet loss rate was down to 0%!&lt;&#x2F;p&gt;
&lt;p&gt;I couldn&#x27;t believe my eyes! I was ready for the connection to die at any second, so I opened a million tabs at once — as if I don&#x27;t normally do that anyway...&lt;&#x2F;p&gt;
&lt;p&gt;The rain held up for about an hour, and so did the internet connection.&lt;&#x2F;p&gt;
&lt;p&gt;Then, 15 minutes or so after the rain stopped, the packet loss rate shot back up to 90%+. The internet connection went back to being unusable.&lt;&#x2F;p&gt;
&lt;p&gt;I was ready to do just about anything to get more rain.&lt;&#x2F;p&gt;
&lt;p&gt;Thankfully, the weather stayed grey and murky for the next few days. Each time, the pattern stayed the same:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The rain starts, and not even a few minutes later the internet connection is crisp and fast.&lt;&#x2F;li&gt;
&lt;li&gt;The rain stops, and within 15 minutes the internet connection is unusable again.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As much as I hated to admit it, the evidence was solid. The Wi-Fi only works when it&#x27;s raining!&lt;&#x2F;p&gt;
&lt;p&gt;At this point, I had a choice to make.&lt;&#x2F;p&gt;
&lt;p&gt;I could keep going through the stages of grief: I could sulk and plan my calls with my girlfriend around the weather forecast.&lt;&#x2F;p&gt;
&lt;p&gt;Or, I could break out of that downward spiral and get to the bottom of what was going on.&lt;&#x2F;p&gt;
&lt;p&gt;&quot;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Magical_thinking&quot;&gt;Magical thinking&lt;&#x2F;a&gt; be damned! Am I an engineer or what?&quot; I told myself.&lt;&#x2F;p&gt;
&lt;p&gt;That settled it. I wasn&#x27;t going to take this lying down.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;determination&quot;&gt;Determination&lt;&#x2F;h2&gt;
&lt;p&gt;Some context on our home networking setup is in order.&lt;&#x2F;p&gt;
&lt;p&gt;Remember how my dad&#x27;s company had extensive experience with networking solutions? Well, we had a fancy networking setup at home too — and it had worked flawlessly for the best part of 10 years!&lt;&#x2F;p&gt;
&lt;p&gt;My dad&#x27;s office had a very expensive, very fast&lt;label for=&quot;sn-contemporaneous&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-contemporaneous&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;For the time, of course.&lt;&#x2F;span&gt;
 commercial internet connection. The home internet options, meanwhile, weren&#x27;t great! In my family, we are often stubbornly against settling for less unless there&#x27;s absolutely no other choice.&lt;&#x2F;p&gt;
&lt;p&gt;The office and our apartment were a few blocks away from each other along a small hill, with our second-floor apartment holding the higher ground. With a bit of work, my dad set up a line-of-sight Wi-Fi bridge — &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Long-range_Wi-Fi&quot;&gt;a couple of high-gain directional Wi-Fi antennas pointed at each other&lt;&#x2F;a&gt; — between the office and our apartment. This let us enjoy the faster commercial internet connection at home!&lt;&#x2F;p&gt;
&lt;p&gt;I started poking around the network to figure out where the connection was breaking down.&lt;&#x2F;p&gt;
&lt;p&gt;The local Wi-Fi router at home was working well — no packets lost. The local end of the Wi-Fi bridge was fine too.&lt;&#x2F;p&gt;
&lt;p&gt;But pinging the remote end of the Wi-Fi bridge was showing a 90%+ packet loss rate — and so did pinging any other network device behind it. Aha, there&#x27;s something wrong with the Wi-Fi bridge!&lt;&#x2F;p&gt;
&lt;p&gt;But &lt;em&gt;what&lt;&#x2F;em&gt;? And why &lt;em&gt;now&lt;&#x2F;em&gt;, when the system had been working fine for almost 10 years, rain or shine?&lt;label for=&quot;sn-work-experience&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-work-experience&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Maybe &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;mediocrity-can-be-a-sign-of-excellence&#x2F;#years-of-experience-vs-experience-in-those-years&quot;&gt;years of work experience isn&#x27;t a good metric&lt;&#x2F;a&gt; here either 😄&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;How&lt;&#x2F;em&gt; can a rain storm &lt;em&gt;fix&lt;&#x2F;em&gt; a Wi-Fi bridge, anyway?&lt;&#x2F;p&gt;
&lt;p&gt;So many confusing questions. Time to get some answers!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;&#x2F;h2&gt;
&lt;p&gt;Like any experienced engineer, the first thing I tried was turning everything off and then on again. It didn&#x27;t work.&lt;&#x2F;p&gt;
&lt;p&gt;Then I checked all the devices on the network individually:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Maybe one of the devices has gone bad with age? Nope.&lt;label for=&quot;sn-diagnostics&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-diagnostics&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;I physically connected my laptop to each device&#x27;s local Ethernet, then ran diagnostics, pinged the devices over the wired connection, etc.&lt;&#x2F;span&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Maybe a cable got unseated or came loose? Nope.&lt;&#x2F;li&gt;
&lt;li&gt;Maybe a power brick has become faulty over time? Nope.&lt;&#x2F;li&gt;
&lt;li&gt;Maybe an automatic firmware update failed and broke something? Nope.&lt;&#x2F;li&gt;
&lt;li&gt;Maybe an antenna connector has corroded from spending years outdoors? Nope.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Unlike debugging software, a lot of this hardware debugging was annoyingly &lt;em&gt;physical&lt;&#x2F;em&gt;. I had to climb up ladders, trace cables that hadn&#x27;t been touched in 10 years, and do a lot of walking back and forth between our home and my dad&#x27;s office.&lt;&#x2F;p&gt;
&lt;p&gt;On my umpteenth back-and-forth walk, as I was bored and exasperated, I started noticing how much our neighborhood had changed in the many years I hadn&#x27;t been living at home full-time.&lt;label for=&quot;sn-boarding-school&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-boarding-school&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Before college, I spent four years at a boarding high school. I was on our national math and programming teams for the &lt;a href=&quot;https:&#x2F;&#x2F;www.imo-official.org&#x2F;&quot;&gt;IMO&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;ioinformatics.org&#x2F;&quot;&gt;IOI&lt;&#x2F;a&gt;), so I even spent most of each summer away from home at prep camps and at the competitions themselves.&lt;&#x2F;span&gt;
 Many of the little neighborhood shops were new. Many houses had gotten a fresh coat of paint. Trees that used to be barely more than saplings had grown tall and strong.&lt;&#x2F;p&gt;
&lt;p&gt;Then it hit me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;realization&quot;&gt;Realization&lt;&#x2F;h2&gt;
&lt;p&gt;I ran home and climbed up onto the scaffolding holding up the Wi-Fi bridge&#x27;s antenna. I was hanging precariously off the side of our apartment building, two stories up in the air.&lt;label for=&quot;sn-safety-harness&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-safety-harness&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;In retrospect, a safety harness would have been a good idea... Things people do for internet! Don&#x27;t forget, a girl was involved too — I wasn&#x27;t doing this merely for Netflix or Twitter.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Then I looked downhill, at the antenna that formed the second half of the Wi-Fi bridge.&lt;&#x2F;p&gt;
&lt;p&gt;Or at least, &lt;em&gt;toward&lt;&#x2F;em&gt; the antenna, because I couldn&#x27;t see it — a tree in a neighbor&#x27;s yard was in the way! Its topmost branches were swaying back and forth in the line-of-sight between the antenna pair.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Bingo!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem-and-the-fix&quot;&gt;The Problem and the Fix&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s what was going on.&lt;&#x2F;p&gt;
&lt;p&gt;Many years ago, we installed the Wi-Fi bridge. For a long time, everything was great!&lt;&#x2F;p&gt;
&lt;p&gt;But every year, our neighbor&#x27;s tree grew taller and taller. Shortly before when I came back home that summer, its topmost branches had managed to reach high enough to interfere with our Wi-Fi signal.&lt;&#x2F;p&gt;
&lt;p&gt;It was &lt;em&gt;only barely&lt;&#x2F;em&gt; tall enough to interfere with the signal, though!&lt;&#x2F;p&gt;
&lt;p&gt;Every time it rained, the rain collected on its leaves and branches and &lt;em&gt;weighed them down&lt;&#x2F;em&gt;. The extra weight bent them out of the way of the Wi-Fi line-of-sight!&lt;label for=&quot;sn-fresnel&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-fresnel&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Interestingly, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Line-of-sight_propagation#Impairments_to_line-of-sight_propagation&quot;&gt;objects &lt;em&gt;outside&lt;&#x2F;em&gt; the straight line between antennas can still cause interference&lt;&#x2F;a&gt;! For best signal quality, the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fresnel_zone&quot;&gt;Fresnel zone&lt;&#x2F;a&gt; between the antennas should be clear of obstructions. But perfection isn&#x27;t achievable in practice, so RF equipment like Wi-Fi uses techniques like error-correcting codes so that it can still work without a perfectly clear Fresnel zone.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Each time the rain stopped, the rainwater would continue to drip off the tree. Slowly, over the course of 15ish minutes, that would unburden the tree — letting it rise back up into the path of our bits and bytes. That&#x27;s when the Wi-Fi would stop working.&lt;&#x2F;p&gt;
&lt;p&gt;The fix was easy: upgrade our hardware. We replaced &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;IEEE_802.11g-2003&quot;&gt;our old 802.11g devices&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;IEEE_802.11n-2009&quot;&gt;new 802.11n ones&lt;&#x2F;a&gt;, which took advantage of new &lt;del&gt;magic&lt;&#x2F;del&gt; math and physics to make signals more resistant to interference.&lt;label for=&quot;sn-beamforming&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-beamforming&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;One such piece of magic new to 802.11n Wi-Fi is called &quot;&lt;a href=&quot;https:&#x2F;&#x2F;www.oreilly.com&#x2F;library&#x2F;view&#x2F;80211ac-a-survival&#x2F;9781449357702&#x2F;ch04.html&quot;&gt;beamfoming&lt;&#x2F;a&gt;&quot; — it&#x27;s when a transmitter can use multiple antennas transmitting on the same frequency to shape and steer the signal in a way that improves the effective range and signal quality. Modern Wi-Fi does beamforming with only a few antenna elements, but if we scale that number way up we get &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Phased_array&quot;&gt;a phased array antenna&lt;&#x2F;a&gt;. Ever wondered how come &lt;a href=&quot;https:&#x2F;&#x2F;www.pcmag.com&#x2F;news&#x2F;spacex-reveals-next-gen-starlink-dish-for-residential-users&quot;&gt;Starlink antennas are flat&lt;&#x2F;a&gt; and not a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Satellite_dish#Gallery&quot;&gt;&quot;dish&quot; like old satellite TV antennas&lt;&#x2F;a&gt;? They use phased arrays to aim their signal at &lt;a href=&quot;https:&#x2F;&#x2F;www.space.com&#x2F;starlink-satellite-train-how-to-see-and-track-it&quot;&gt;the Starlink satellites streaking across the sky&lt;&#x2F;a&gt; — without any moving parts. &lt;del&gt;Magic!&lt;&#x2F;del&gt; Physics!&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;A few days later, the new gear arrived and I eagerly climbed back up the scaffolding to install the new antennas.&lt;&#x2F;p&gt;
&lt;p&gt;A few screws, zip ties, and cable connections later, the Wi-Fi&#x27;s &quot;link established&quot; lights flashed green once again.&lt;&#x2F;p&gt;
&lt;p&gt;This time, &lt;em&gt;it wasn&#x27;t raining.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;All was well once again.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Hope you enjoyed this true story! &lt;a href=&quot;https:&#x2F;&#x2F;aprilcools.club&#x2F;&quot;&gt;April Cools&lt;&#x2F;a&gt; is about surprising our readers with fun posts on topics outside our usual beat. Check out the other April Cools posts on &lt;a href=&quot;https:&#x2F;&#x2F;aprilcools.club&#x2F;&quot;&gt;our website&lt;&#x2F;a&gt;, and consider making your own blog part of April Cools Club next year!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;If you liked this post, consider &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;subscribe&#x2F;&quot;&gt;subscribing or following me on social media&lt;&#x2F;a&gt;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;hillelwayne.com&#x2F;&quot;&gt;Hillel Wayne&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;jeremykun.com&#x2F;&quot;&gt;Jeremy Kun&lt;&#x2F;a&gt; for reading drafts of this post. All mistakes are my own.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>SemVer in Rust: Tooling, Breakage, and Edge Cases — FOSDEM 2024</title>
        <published>2024-03-18T00:00:00+00:00</published>
        <updated>2024-03-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/semver-in-rust-tooling-breakage-and-edge-cases/"/>
        <id>https://predr.ag/blog/semver-in-rust-tooling-breakage-and-edge-cases/</id>
        
        <content type="html" xml:base="https://predr.ag/blog/semver-in-rust-tooling-breakage-and-edge-cases/">&lt;p&gt;Last month, I gave a talk titled &lt;a href=&quot;https:&#x2F;&#x2F;fosdem.org&#x2F;2024&#x2F;schedule&#x2F;event&#x2F;fosdem-2024-2682-semver-in-the-rust-ecosystem-breakage-tooling-and-edge-cases&#x2F;&quot;&gt;&quot;SemVer in Rust: Breakage, Tooling, and Edge Cases&quot;&lt;&#x2F;a&gt; at the &lt;a href=&quot;https:&#x2F;&#x2F;fosdem.org&#x2F;2024&#x2F;&quot;&gt;FOSDEM 2024&lt;&#x2F;a&gt; conference.&lt;&#x2F;p&gt;
&lt;p&gt;The talk is a practical look at what semantic versioning (SemVer) buys us, why SemVer goes wrong in practice, and how the &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; linter can help prevent the damage caused by SemVer breakage.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;&#x2F;strong&gt; SemVer is impossibly hard for humans, but automated tools can cover our greatest weaknesses.&lt;!-- more --&gt;&lt;label for=&quot;sn-parallel&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-parallel&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;This is common theme in Rust, isn&#x27;t it? At scale, lots of problems are too hard for humans. Memory safety is too hard, so Rust has the borrow checker. Parallelism is too hard, so we have the compiler help us. And so on...&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;details&gt;
&lt;summary&gt;
Full talk abstract (click to expand)
&lt;&#x2F;summary&gt;
&lt;p&gt;&lt;em&gt;In theory, semantic versioning (SemVer) is simple: breaking changes require major versions. SemVer rules do not change over time. Crates always adhere to SemVer. Careful coding is enough to avoid accidental breaking changes.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;None of those statements are true!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;In practice, SemVer is complex and accidental breakage is common: 1 in 6 of the top 1000 Rust crates has violated semantic versioning at least once, frustrating both users and maintainers alike.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;If you write Rust but don&#x27;t have the time for a PhD in SemVer, this talk is for you. We&#x27;ll take a practical look at SemVer in Rust: what it buys us, how Rust&#x27;s features lead to strange SemVer edge cases, and how we can prevent accidental breakage using a SemVer linter called &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;cargo-semver-checks&quot;&gt;cargo-semver-checks&lt;&#x2F;a&gt;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;You can watch my talk &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=VArNQtYBC6Y&quot;&gt;on YouTube&lt;&#x2F;a&gt;, or embedded below.&lt;label for=&quot;sn-different-talk&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-different-talk&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;An A&#x2F;V equipment failure during my talk caused 10min of my talk to be missing from the official FOSDEM recording. I re-recorded the missing portion, and edited it into a complete video of the talk — that&#x27;s the version I&#x27;m including here.&lt;&#x2F;span&gt;
 Read on for an annotated version of the talk,&lt;label for=&quot;sn-annotated-talk&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-annotated-talk&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;I believe Simon Willison coined the term &quot;annotated talk&quot;, and described it &lt;a href=&quot;https:&#x2F;&#x2F;simonwillison.net&#x2F;2023&#x2F;Aug&#x2F;6&#x2F;annotated-presentations&#x2F;&quot;&gt;on his blog&lt;&#x2F;a&gt;. I like this idea, and I&#x27;m broadly aiming to follow the same approach.&lt;&#x2F;span&gt;
 covering the same ideas in written form and including some additional content that did not make it into the talk due to time constraints.&lt;&#x2F;p&gt;
&lt;p&gt;The talk video and outline are below, so you can jump ahead or switch between the written and video formats as you like.&lt;&#x2F;p&gt;
&lt;div &gt;
  &lt;iframe class=&quot;yt-video&quot; src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;VArNQtYBC6Y?rel=0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;outline&quot;&gt;Outline&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-in-rust-tooling-breakage-and-edge-cases&#x2F;#what-semantic-versioning-semver-buys-us&quot;&gt;What semantic versioning (SemVer) buys us&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-in-rust-tooling-breakage-and-edge-cases&#x2F;#semver-is-hard-we-keep-breaking-it-by-accident&quot;&gt;SemVer is hard — we keep breaking it by accident&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-in-rust-tooling-breakage-and-edge-cases&#x2F;#everyone-loses-when-accidental-semver-breakage-happens&quot;&gt;Everyone loses when accidental SemVer breakage happens&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-in-rust-tooling-breakage-and-edge-cases&#x2F;#why-just-be-more-careful-won-t-fix-it&quot;&gt;Why &quot;just be more careful&quot; won&#x27;t fix it&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-in-rust-tooling-breakage-and-edge-cases&#x2F;#semver-s-rules-are-much-more-complex-than-they-seem&quot;&gt;SemVer&#x27;s rules are much more complex than they seem&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-in-rust-tooling-breakage-and-edge-cases&#x2F;#how-cargo-semver-checks-fits-into-the-picture&quot;&gt;How cargo-semver-checks fits into the picture&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-in-rust-tooling-breakage-and-edge-cases&#x2F;#example-can-deleting-a-pub-fn-not-be-a-breaking-change&quot;&gt;Example: Can deleting a pub fn &lt;em&gt;not&lt;&#x2F;em&gt; be a breaking change?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-in-rust-tooling-breakage-and-edge-cases&#x2F;#example-can-adding-fields-to-a-struct-be-a-breaking-change&quot;&gt;Example: Can adding fields to a struct be a breaking change?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-in-rust-tooling-breakage-and-edge-cases&#x2F;#example-can-modifying-a-private-item-cause-a-breaking-change&quot;&gt;Example: Can modifying a private item cause a breaking change?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-in-rust-tooling-breakage-and-edge-cases&#x2F;#cargo-semver-checks-lints-are-database-queries-in-disguise&quot;&gt;cargo-semver-checks lints are database queries in disguise&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-in-rust-tooling-breakage-and-edge-cases&#x2F;#a-peek-at-trustfall-an-engine-for-querying-everything&quot;&gt;A peek at Trustfall, an engine for querying everything&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-in-rust-tooling-breakage-and-edge-cases&#x2F;#conclusion-solving-maintainability-led-to-a-tool-that-users-love&quot;&gt;Conclusion: Solving maintainability led to a tool that users love&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-semantic-versioning-semver-buys-us&quot;&gt;What semantic versioning (SemVer) buys us&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=VArNQtYBC6Y&amp;amp;t=58s&quot;&gt;Jump to this chapter&lt;&#x2F;a&gt; in the video.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;SemVer is about communication.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s a way for library maintainers to communicate with users, and with the tooling those users use. It sets expectations on the amount and nature of work required to adopt a new version of a library.&lt;&#x2F;p&gt;
&lt;p&gt;If the changes are substantial and may require action from the user of the library, we say that&#x27;s a major change. The maintainer would bump the major version number, and users will know that this version upgrade might require a bit of work to adopt. Automated tooling will &lt;em&gt;usually&lt;&#x2F;em&gt; avoid making this kind of upgrade on its own.&lt;label for=&quot;sn-codemod&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-codemod&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Some ecosystems and companies have created &lt;a href=&quot;https:&#x2F;&#x2F;libcst.readthedocs.io&#x2F;en&#x2F;latest&#x2F;codemods.html&quot;&gt;&quot;codemod&quot; systems&lt;&#x2F;a&gt;, which can automatically refactor &lt;em&gt;downstream&lt;&#x2F;em&gt; code to make it comply with breaking API changes. This makes it possible to apply major changes automatically, but it requires a substantial amount of extra work on top of a large amount of pre-existing infrastructure.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Otherwise, if the library remains compatible with the previous version, users expect their automated tooling to take care of upgrading them. This is great! They benefit from performance upgrades, security patches, and new functionality — and (in the ideal case) no human time was spent to get those benefits.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a concrete example.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-02.66ca75dbb4a68d1b.png&quot; alt=&quot;GitHub pull request with description: &amp;quot;Automation to keep dependencies in Cargo.lock current. The following is the output from &amp;quot;cargo update&amp;quot;, followed by 25 libraries being bumped to new non-major versions. The pull request has passed tests and is merged.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Many of my projects have a job that runs &lt;code&gt;cargo update&lt;&#x2F;code&gt; once a week, commits the results, opens a pull request, and merges it automatically if CI passes.&lt;&#x2F;p&gt;
&lt;p&gt;In this example, we just got 25 libraries&#x27; worth of improvements — without requiring any time investment from this project&#x27;s maintainers. Excellent! This frees up maintainers to invest their limited time elsewhere, starting &lt;em&gt;a virtuous cycle that leaves the entire community better off.&lt;&#x2F;em&gt;&lt;label for=&quot;sn-manual-version-bumps&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-manual-version-bumps&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;To see why this is such a big deal, imagine manually bumping versions in a project &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;thekurtwk&#x2F;status&#x2F;1767452635697660088&quot;&gt;with a dependency tree as big as this one&lt;&#x2F;a&gt; — yikes! 😱&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;But this only works as long as none of these dependencies have accidentally violated SemVer.&lt;label for=&quot;sn-specific-to-rust&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-specific-to-rust&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;And so long as they use SemVer in the first place. SemVer is not the only versioning scheme, but it&#x27;s overwhelmingly common in Rust since &lt;code&gt;cargo update&lt;&#x2F;code&gt; by default assumes all crates adhere to SemVer. In other language ecosystems, this kind of automation might not work as well as it does in Rust.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;If a breaking change has accidentally slipped into one of these versions, then our CI run fails, the pull request doesn&#x27;t get merged, and a maintainer has to intervene to fix the problem manually. Our automation didn&#x27;t work, so we&#x27;re back to square one.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;overview-semver-is-hard-but-automation-can-help&quot;&gt;Overview: SemVer is hard, but automation can help&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=VArNQtYBC6Y&amp;amp;t=140s&quot;&gt;Jump to this chapter&lt;&#x2F;a&gt; in the video.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m going to convince you of two major things.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-03.2624a02c3b3ddab9.png&quot; alt=&quot;&amp;quot;SemVer is so hard, no mere mortals can uphold it.&amp;quot; above an image of the Rust urchin looking spiky and dangerous.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;First, that semantic versioning in practice is so hard that no mere mortals can uphold it. &lt;em&gt;None of us&lt;&#x2F;em&gt; are good enough to do it on a consistent basis.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll show you that the rules of semantic versioning are much more complex than they seem.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll show you that even the rules that seem simple have a ton of non-obvious edge cases.&lt;&#x2F;p&gt;
&lt;p&gt;And I&#x27;ll show you empirical evidence based on real world data that this is not a skill issue. It&#x27;s not something that can be solved with more experience, or with harder work, or just by caring more about your projects and your users.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-04.c703725b9cc62835.png&quot; alt=&quot;&amp;quot;Computers are no mere mortals. They are really good at SemVer.&amp;quot; next to a pair of Ferris claws carefully holding up a crate to inspect it.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Then I&#x27;ll show you that computers are really good at semantic versioning.&lt;&#x2F;p&gt;
&lt;p&gt;We can use linters like &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; to address almost all of the problems we&#x27;re going to run into as part of this talk.&lt;&#x2F;p&gt;
&lt;p&gt;And I&#x27;ll even show you how &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; works under the hood, so you can trust its results and so you can contribute to it for the benefit of all of us in the Rust community.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;semver-is-hard-we-keep-breaking-it-by-accident&quot;&gt;SemVer is hard — we keep breaking it by accident&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=VArNQtYBC6Y&amp;amp;t=213s&quot;&gt;Jump to this chapter&lt;&#x2F;a&gt; in the video.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Throughout this talk, we&#x27;ll go through a series of falsehoods about SemVer in Rust. Each of those statements will sounds plausible and reasonable, but is actually false. This is how we&#x27;ll get a sense of how hard SemVer really is.&lt;&#x2F;p&gt;
&lt;p&gt;Our first falsehood: Rust crates always adhere to SemVer.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-05.30e924c80ddb5749.png&quot; alt=&quot;Slide titled &amp;quot;Falsehoods we believed about SemVer.&amp;quot; First bullet point: crates always adhere to SemVer. There is copious space left over on the slide, hinting that there will many more items on the list by the end of the talk.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;If you&#x27;ve been part of the Rust ecosystem for long enough, you know this to be false.&lt;&#x2F;p&gt;
&lt;p&gt;Issues reporting breaking changes get opened everywhere &lt;em&gt;all the time&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-06.3632fba2148dfa82.png&quot; alt=&quot;Slide packed with screenshots of GitHub issues with titles: &amp;quot;Version 0.5.1 breaks SemVer guarantees&amp;quot;; &amp;quot;Backwards incompatibility for ArgMatches and UnwindSafe&amp;quot;; &amp;quot;SemVer breaking change caused by mio upgrade to 0.8&amp;quot;; &amp;quot;Semver violation in 0.18.12 — please re-export &amp;#x27;git2&amp;#x27; since it&amp;#x27;s part of public API&amp;quot;&quot;&gt;
&lt;&#x2F;figure&gt;

&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-07.ddc9addbc27f27d4.png&quot; alt=&quot;Another GitHub issue overlaid on all the ones from the previous slide. This one is titled &amp;quot;tracing 0.1.38 included accidentally-breaking change from added Drop impl.&amp;quot; The &amp;quot;accidentally-breaking&amp;quot; portion of the title is circled, and a spiky Rusturchin is looking at it.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;This last one perfectly sums up the issue: the breakage wasn&#x27;t intended, it was &lt;em&gt;accidental&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;No maintainer wakes up in the morning and says: &quot;I&#x27;m going to break the entire ecosystem today.&quot;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;everyone-loses-when-accidental-semver-breakage-happens&quot;&gt;Everyone loses when accidental SemVer breakage happens&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=VArNQtYBC6Y&amp;amp;t=251s&quot;&gt;Jump to this chapter&lt;&#x2F;a&gt; in the video.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;SemVer breakage is a lose-lose all around.&lt;&#x2F;p&gt;
&lt;p&gt;Everyone is worse off: maintainers, downstream users, and the community as a whole.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-08.079e9d2c48d2854b.png&quot; alt=&quot;A large sobbing emoji over the pile of GitHub issues reporting accidental SemVer breakage.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;From a maintainer&#x27;s perspective, nobody likes to see an issue like this get reported.&lt;&#x2F;p&gt;
&lt;p&gt;None of us like realizing that we accidentally broke the entire ecosystem.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-09.9a0f5c3de417fffb.png&quot; alt=&quot;A large sobbing emoji next to our automated workflow for updating project dependencies, which has been stamped with a big red &amp;quot;denied&amp;quot; symbol.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;As a user, we lose because our automation doesn&#x27;t work and our project&#x27;s build might be broken.&lt;&#x2F;p&gt;
&lt;p&gt;We no longer get improvements &quot;for free.&quot; Instead, we have to update our dependencies manually.&lt;&#x2F;p&gt;
&lt;p&gt;In a &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;thekurtwk&#x2F;status&#x2F;1767452635697660088&quot;&gt;large project with many dependencies&lt;&#x2F;a&gt;, this could be a huge amount of work.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-10.52ebc5d67d959031.png&quot; alt=&quot;A large sobbing emoji next to the activity log on a GitHub issue about an accidental breaking change. The activity log shows that dozens of people had to make changes to their own projects to rectify the breakage. Items in the activity log have titles like &amp;quot;Can&amp;#x27;t build 0.23.0&amp;quot; or &amp;quot;Revert tracing from 0.1.38 back to 0.1.37.&amp;quot; The screenshot shows ten such items, and UI elements indicate the activity log continues past the bottom edge of the screenshot.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;From an ecosystem perspective, the breakage means a lot of work across many projects needs to happen just to make everyone&#x27;s build start passing again.&lt;&#x2F;p&gt;
&lt;p&gt;The screenshot above is &lt;em&gt;just a fraction&lt;&#x2F;em&gt; of all the issues and commits referencing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tracing&#x2F;issues&#x2F;2578&quot;&gt;that particular accidental breakage&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This work is stressful, disruptive, and ultimately unproductive. Maintainers have to drop what they were doing, and instead do work that doesn&#x27;t lead to any new features nor performance improvements.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s pure wasted effort, community-wide.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-11.6f1872c728c9a820.png&quot; alt=&quot;A large sobbing emoji next to the text: &amp;quot;SemVer violations are miscommunication&amp;quot;&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;SemVer is about communication, so SemVer violations are &lt;em&gt;miscommunication.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When a release goes out with the wrong version number, it sets incorrect expectations with users and their tooling. Then the tooling fails and we all end up frustrated.&lt;&#x2F;p&gt;
&lt;p&gt;This is &lt;em&gt;expensive&lt;&#x2F;em&gt; miscommunication! All of us would be much better off if it didn&#x27;t happen. Even if our own projects aren&#x27;t directly affected by a given breakage incident, we&#x27;d all prefer if the maintainers of our tools and dependencies could invest their limited time toward more productive endeavors.&lt;&#x2F;p&gt;
&lt;p&gt;So why does breakage keep happening?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-just-be-more-careful-won-t-fix-it&quot;&gt;Why &quot;just be more careful&quot; won&#x27;t fix it&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=VArNQtYBC6Y&amp;amp;t=316s&quot;&gt;Jump to this chapter&lt;&#x2F;a&gt; in the video.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;At this point, one might think that maybe we should &quot;just&quot; be more careful. Maybe this is a skill issue! Maybe the answer is to &quot;just get good.&quot;&lt;label for=&quot;sn-git-gud&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-git-gud&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;For any readers unfamiliar with the phrase, this is a reference to &lt;a href=&quot;https:&#x2F;&#x2F;en.wiktionary.org&#x2F;wiki&#x2F;git_gud&quot;&gt;&quot;git gud&quot;&lt;&#x2F;a&gt;, a phrase coined in gaming culture. It&#x27;s used as an unconstructive response, implying that &quot;real&quot; gamers (in our case, serious maintainers) don&#x27;t have the indicated problem — they learn to overcome it through hard work and skill. In SemVer&#x27;s case, that won&#x27;t work — &quot;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=kGpsXuMvApo&quot;&gt;would that it were so simple!&lt;&#x2F;a&gt;&quot;&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-12.c259d9e622bd66bb.png&quot; alt=&quot;The same slide titled &amp;quot;Falsehoods we believed about SemVer&amp;quot; from earlier. The first bullet point, &amp;quot;crates always adhere to SemVer,&amp;quot; is crossed off. The next bullet point says: &amp;quot;Careful coding is enough to avoid violating SemVer.&amp;quot;&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;This is another falsehood.&lt;&#x2F;p&gt;
&lt;p&gt;Careful coding is not enough to avoid SemVer violations.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-13.6b1983ebb4e7483e.png&quot; alt=&quot;&amp;quot;1 in 6 of the top 1000 crates have broken SemVer at least once,&amp;quot; in large text above the cargo-semver-checks logo. The bottom of the slide says: &amp;quot;Joint work with Tomasz Nowak, Mieszko Grodzicki, Bartosz Smolarczyk, Michał Staniewski&amp;quot;&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;That&#x27;s right. More than 1 in 6 of our most popular crates have shipped a SemVer violation at least once.&lt;&#x2F;p&gt;
&lt;p&gt;These are the crates that are maintained by the most experienced, most careful maintainers in our entire community. Without a doubt, they&#x27;ve personally experienced the pain of accidental SemVer breakage. If &lt;em&gt;they&lt;&#x2F;em&gt; can&#x27;t get semantic versioning right day in and day out, what hope is there for the rest of us?!&lt;&#x2F;p&gt;
&lt;p&gt;This is data that &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-violations-are-common-better-tooling-is-the-answer&#x2F;&quot;&gt;we gathered by running &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. We worked hard to ensure our results are faithful and not just the result of false-positives.&lt;label for=&quot;sn-regular-readers&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-regular-readers&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Regular readers may remember &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-violations-are-common-better-tooling-is-the-answer&#x2F;#detailed-results-how-we-validated-them&quot;&gt;reading about our process on this blog&lt;&#x2F;a&gt;, or seeing &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;16cj1mo&#x2F;semver_violations_are_common_better_tooling_is&#x2F;&quot;&gt;the discussion about our results on r&#x2F;rust&lt;&#x2F;a&gt;. For example, the maintainer of the &lt;code&gt;time&lt;&#x2F;code&gt; crate requested to see our findings for their crate, and &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;16cj1mo&#x2F;comment&#x2F;jzm6kfl&#x2F;&quot;&gt;we discussed them here&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-14.e61a06ad2352b45b.png&quot; alt=&quot;&amp;quot;Over 3% of the 14000 scanned releases had at least one SemVer violation,&amp;quot; in large text above the cargo-semver-checks logo. The bottom of the slide says: &amp;quot;Joint work with Tomasz Nowak, Mieszko Grodzicki, Bartosz Smolarczyk, Michał Staniewski&amp;quot;&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;As part of the study, we scanned more than 14000 releases.&lt;&#x2F;p&gt;
&lt;p&gt;More than 3% of them had &lt;em&gt;at least one&lt;&#x2F;em&gt; semantic versioning violation that &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; discovered and would have prevented.&lt;&#x2F;p&gt;
&lt;p&gt;To put this 3% number in context:&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-15.8ff8f76a1a18ec58.png&quot; alt=&quot;The pull request automatically updating dependencies from earlier in the presentation. An arrow next to the 25 upgraded dependency versions points to the text: &amp;quot;Statistically, there&amp;#x27;s a SemVer violation somewhere in here...&amp;quot;&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Statistically, we shouldn&#x27;t be surprised if a SemVer violation is lurking somewhere in these updated crates.&lt;&#x2F;p&gt;
&lt;p&gt;Now, this pull request happened to pass our tests just fine. Maybe we got lucky, and there is no SemVer violation. Maybe we just weren&#x27;t affected by it this time.&lt;&#x2F;p&gt;
&lt;p&gt;But luck is not a strategy. With a breakage rate that high, many pull requests like this one will fail due to accidental breakage. That&#x27;s just the cost for one project — multiply it out across the entire community and the cost quickly gets out of hand.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;semver-s-rules-are-much-more-complex-than-they-seem&quot;&gt;SemVer&#x27;s rules are much more complex than they seem&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=VArNQtYBC6Y&amp;amp;t=424s&quot;&gt;Jump to this chapter&lt;&#x2F;a&gt; in the video.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-16.8b684fc7cffe042d.png&quot; alt=&quot;The same slide titled &amp;quot;Falsehoods we believed about SemVer&amp;quot; from earlier. This time the second bullet point, &amp;quot;careful coding is enough to avoid violating SemVer,&amp;quot; is also crossed off. A third bullet point says &amp;quot;Breaking changes always require major versions.&amp;quot; There is still plenty of blank space left where more items can be added to the list.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Another surprising falsehood is that not all breaking changes require major versions in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;For this, we need to consult Rust&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;blob&#x2F;master&#x2F;text&#x2F;1105-api-evolution.md&quot;&gt;API evolution RFC 1105&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-17.c5263706768e548f.png&quot; alt=&quot;Screenshot from Rust&amp;#x27;s &amp;quot;API evolution&amp;quot; RFC 1105. It defines the terms &amp;quot;major change&amp;quot; and &amp;quot;minor change&amp;quot; as requiring a major and minor SemVer bump, respectively, and defines the term &amp;quot;breaking change&amp;quot; to mean a change that strictly speaking can cause downstream code to fail to compile. Of the remaining text, two portions are highlighted: &amp;quot;in Rust today, almost any change is technically a breaking change&amp;quot; and &amp;quot;all major changes are breaking, but not all breaking changes are major.&amp;quot;&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;In Rust today, almost any change is technically a breaking change!&lt;label for=&quot;sn-previously-non-major-breaking&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-previously-non-major-breaking&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Regular readers may recall &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;some-rust-breaking-changes-do-not-require-major-version&#x2F;&quot;&gt;my blog post on this exact topic&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;A rules-first approach would require almost every new release of a Rust crate to come with a major version bump. This isn&#x27;t helpful! This is why SemVer isn&#x27;t about the rules — it&#x27;s about communication.&lt;&#x2F;p&gt;
&lt;p&gt;For example, if almost every release is a major bump, then our dependency-updating automation still wouldn&#x27;t work. And all this because of some changes that are &lt;em&gt;technically&lt;&#x2F;em&gt; breaking — but where that breakage &lt;em&gt;in practice&lt;&#x2F;em&gt; is avoidable, is extremely rare, or is only triggered by particularly convoluted code that is inadvisable to write in the first place.&lt;&#x2F;p&gt;
&lt;p&gt;This is why not all breaking changes are major.&lt;label for=&quot;sn-not-just-rust&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-not-just-rust&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Surprisingly, this isn&#x27;t unique to Rust! What&#x27;s unique to Rust is that this rule is explicitly written down in an easy-to-cite place. You&#x27;ll see shortly that many of the &quot;breaking but not major&quot; cases clearly apply to other programming languages too.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;The rules of SemVer are meant to serve users, &lt;em&gt;not vice versa&lt;&#x2F;em&gt;. This is the choice that best serves users.&lt;&#x2F;p&gt;
&lt;p&gt;Here are &lt;em&gt;some&lt;&#x2F;em&gt; of the breaking changes that are not major. These are merely the most common edge cases — there are more!&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-18.0c7f4ef014a21cc9.png&quot; alt=&quot;The same API evolution RFC slide as before, with a text bubble showing examples of breaking changes that are not major. There&amp;#x27;s room for four bullet points in the bubble, but only two bullet points are shown at the moment: &amp;quot;adding new items to a module&amp;quot; and &amp;quot;changes that break type inference, requiring type annotations in downstream code.&amp;quot;&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;The first one is that adding new items to a module is technically a breaking change.&lt;&#x2F;p&gt;
&lt;p&gt;This is because of &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;some-rust-breaking-changes-do-not-require-major-version&#x2F;#adding-a-new-public-item-is-technically-a-breaking-change&quot;&gt;some quirks related to glob imports&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I think we&#x27;d all agree that adding new functionality to a library should not in general be a major change, so it makes sense that this is considered minor even though it&#x27;s breaking.&lt;label for=&quot;sn-not-unique-to-rust-1&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-not-unique-to-rust-1&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Nearly all languages that support glob imports have the same breakage case! For example, exposing a new non-underscored function in Python is also a breaking change — a one-to-one Python translation of &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;some-rust-breaking-changes-do-not-require-major-version&#x2F;#adding-a-new-public-item-is-technically-a-breaking-change&quot;&gt;the Rust code here&lt;&#x2F;a&gt; will demonstrate it. Most languages &lt;em&gt;implicitly&lt;&#x2F;em&gt; agree that this type of breakage &quot;doesn&#x27;t count&quot; for SemVer purposes; Rust merely made that rule &lt;em&gt;explicit&lt;&#x2F;em&gt; by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;blob&#x2F;master&#x2F;text&#x2F;1105-api-evolution.md&quot;&gt;writing it down&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Another example is that breaking type inference is not considered major.&lt;&#x2F;p&gt;
&lt;p&gt;This is because it&#x27;s possible to avoid being broken by such a change by adding explicit type annotations in downstream code. In principle, better tooling should be able to add these kinds of type annotations when they become necessary. In the future, this change might no longer be breaking — so it&#x27;s a reasonable choice to make it non-major today.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-19.ef17edb6b6f2bb50.png&quot; alt=&quot;The same API evolution RFC slide as before, with the remaining two bullet points added to the text bubble. They say: &amp;quot;reverting API changes&amp;quot; and &amp;quot;critical soundness or security fixes, subject to the maintainer&amp;#x27;s judgment call.&amp;quot;&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;A third example is reverting accidental API changes.&lt;label for=&quot;sn-not-unique-to-rust-2&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-not-unique-to-rust-2&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Again, not unique to Rust! Rust just wrote it down explicitly.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;This is something we ran into as part of &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-violations-are-common-better-tooling-is-the-answer&#x2F;&quot;&gt;our SemVer study&lt;&#x2F;a&gt;. A few times, a maintainer had accidentally caused a private portion of their library to become public API. It would be extremely unfortunate if undoing that accident required a major bump, even if it was caused and corrected mere minutes apart.&lt;&#x2F;p&gt;
&lt;p&gt;The last example is that critical soundness or security fixes can be published in minor changes &lt;em&gt;even if they are breaking&lt;&#x2F;em&gt;.&lt;label for=&quot;sn-not-unique-to-rust-3&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-not-unique-to-rust-3&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Not unique to Rust either!&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;This again comes back to &quot;SemVer is about communication.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;Semantic versioning allows the maintainer to make a judgment call about what is the lesser evil: whether it&#x27;s more dangerous to risk letting the soundness or security vulnerability persist, or to break everyone&#x27;s build.&lt;&#x2F;p&gt;
&lt;p&gt;If the vulnerability is bad enough, forcing faster adoption by breaking everyone&#x27;s build might be the better outcome &lt;em&gt;overall&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is not a complete list of all the edge cases! For more details, including a code example of how adding a new public item is a breaking change, check out &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;some-rust-breaking-changes-do-not-require-major-version&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-20.29cf80330ea20278.png&quot; alt=&quot;The same slide titled &amp;quot;Falsehoods we believed about SemVer&amp;quot; from earlier. All three bullet points shown so far are crossed off: &amp;quot;crates always adhere to SemVer&amp;quot; &amp;#x2F; &amp;quot;careful coding is enough to avoid violating SemVer&amp;quot; &amp;#x2F; &amp;quot;breaking changes always require major versions.&amp;quot; There is still plenty of blank space left where more items can be added to the list.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Zooming out — we&#x27;ve already seen three reasonable-looking statements that turned out to be false. We&#x27;re just getting started!&lt;&#x2F;p&gt;
&lt;p&gt;The takeaway so far is that &lt;strong&gt;SemVer is hard&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There are many rules with many edge cases. &lt;em&gt;Learning&lt;&#x2F;em&gt; all the rules means earning &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Doctor_of_Philosophy&quot;&gt;a PhD&lt;&#x2F;a&gt; in SemVer. &lt;em&gt;Following&lt;&#x2F;em&gt; all the rules requires superhuman attention to detail. The odds are stacked against us!&lt;&#x2F;p&gt;
&lt;p&gt;Say we cared about SemVer &lt;em&gt;so much&lt;&#x2F;em&gt; that we forced all maintainers to learn all the rules, then demanded perfect SemVer adherence at all costs. We&#x27;d have SemVer, but at what cost? Progress would grind to a halt!&lt;&#x2F;p&gt;
&lt;p&gt;Instead we&#x27;d like to &lt;em&gt;accelerate&lt;&#x2F;em&gt; the pace of development. We can only do that by &lt;em&gt;drastically lowering the cost&lt;&#x2F;em&gt; of SemVer adherence.&lt;&#x2F;p&gt;
&lt;p&gt;Automation like &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is how we do that. &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;uelA7KRLINA?t=4&quot;&gt;This is the way!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-cargo-semver-checks-fits-into-the-picture&quot;&gt;How cargo-semver-checks fits into the picture&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=VArNQtYBC6Y&amp;amp;t=582s&quot;&gt;Jump to this chapter&lt;&#x2F;a&gt; in the video.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Computers are really good at SemVer.&lt;&#x2F;p&gt;
&lt;p&gt;They can&#x27;t do everything — the Halting Problem gets in the way as usual. But our abilities are complementary: computers are the best where we do poorly, and vice versa.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-21.bef1d4e7200ec3c0.png&quot; alt=&quot;The cargo-semver-checks logo, joined by the logos of the tokio and PyO3 projects, the cargo tool&amp;#x27;s logo, and the logos of Amazon AWS and Google.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is a SemVer linter that is broadly adopted across the Rust ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s used by fundamental Rust crates like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio&quot;&gt;tokio&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pyo3&#x2F;pyo3&quot;&gt;PyO3&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;blob&#x2F;403fbe2b490d6cbb715ed768462bb7f977a6d514&#x2F;.github&#x2F;workflows&#x2F;main.yml#L94-L110&quot;&gt;Cargo itself uses &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to check its own library components.&lt;&#x2F;p&gt;
&lt;p&gt;Companies like Amazon and Google use it to prevent breaking changes in the crates they publish.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-22.1a12afafc4a6ad74.png&quot; alt=&quot;The cargo-semver-checks logo, shown together with the intended usage command: `cargo semver-checks &amp;amp;&amp;amp; cargo publish`. A text bubble explains that in this invocation, the `cargo semver-checks` command detects the version bump, then scans for API changes inappropriate for that bump.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is designed to be used as: &lt;code&gt;cargo semver-checks &amp;amp;&amp;amp; cargo publish&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It detects the kind of version bump that you&#x27;re making (major, minor, or patch), then scans for API changes that might be inappropriate for that bump.&lt;&#x2F;p&gt;
&lt;p&gt;You can get &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; through &lt;code&gt;cargo install&lt;&#x2F;code&gt;, or by downloading &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;releases&quot;&gt;a pre-built binary&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-23.8ca2ac67e3e921b6.png&quot; alt=&quot;Screenshot from the README of the &amp;quot;release-plz&amp;quot; release manager for Rust. It shows capabilities like automatic changelog generation with git-cliff, version bumps in Cargo.toml, and automatic scanning for API breaking changes with cargo-semver-checks.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Release managers like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MarcoIeni&#x2F;release-plz&quot;&gt;&lt;code&gt;release-plz&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; can automatically run &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; as part of publishing your crate, and we have &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks-action&quot;&gt;a GitHub Action&lt;&#x2F;a&gt; designed to be used in CI,&lt;label for=&quot;sn-pr-centric-workflow&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-pr-centric-workflow&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Today, that GitHub Action is most suitable for use as part of a CI publishing pipeline, and is &lt;em&gt;not a great fit&lt;&#x2F;em&gt; for running on individual pull requests. This is something &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;cargo-semver-checks-today-and-in-2023&#x2F;#semver-check-prs-not-just-cargo-publish&quot;&gt;we plan to fix&lt;&#x2F;a&gt;! The limiting factor is finding &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;four-challenges-cargo-semver-checks-has-yet-to-tackle&#x2F;#existential-threat-sustainable-project-funding&quot;&gt;a sustainable source of funding&lt;&#x2F;a&gt; for the project. We&#x27;d love your help!&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example-can-deleting-a-pub-fn-not-be-a-breaking-change&quot;&gt;Example: Can deleting a pub fn &lt;em&gt;not&lt;&#x2F;em&gt; be a breaking change?&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=VArNQtYBC6Y&amp;amp;t=692s&quot;&gt;Jump to this chapter&lt;&#x2F;a&gt; in the video.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-24.46ffea2498500c40.png&quot; alt=&quot;A GitHub pull request showing a public function called &amp;quot;add&amp;quot; being deleted from a Rust file.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Say a crate exposes a public function called &lt;code&gt;add&lt;&#x2F;code&gt;, and a pull request deletes that function.&lt;&#x2F;p&gt;
&lt;p&gt;This is obviously a breaking change, and &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; will point that out:&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-25.98cf184eeee5a50e.png&quot; alt=&quot;Output of running `cargo semver-checks` on the aforementioned pull request. It indicates the failure of a lint called `function_missing` which says that the function `easy_01::add` previously at line 1 in file `src&amp;#x2F;lib.rs` is no longer part of the public API of the crate. The output indicates this is a major breaking change, and the total runtime was 0.012 seconds.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;This is great! But maybe we didn&#x27;t need a tool here — we would have caught this &quot;by eye&quot; too.&lt;&#x2F;p&gt;
&lt;p&gt;Not so fast!&lt;&#x2F;p&gt;
&lt;p&gt;Deletions of public items &lt;em&gt;are not always&lt;&#x2F;em&gt; a major breaking change!&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-26.a3030f4b7a021b1e.png&quot; alt=&quot;The same slide titled &amp;quot;Falsehoods we believed about SemVer&amp;quot; from earlier. A fourth bullet point says &amp;quot;Deletions of public items are always a major breaking change.&amp;quot; The three prior bullet points are crossed off, and there is still plenty of space left for more bullet points.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;There are at least two ways to delete a public function without a breaking change.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-27.f370f5f806b1cc06.png&quot; alt=&quot;Two blocks of code. The first shows a public function defined inside a private module — even though it&amp;#x27;s public, the function cannot be imported from outside its crate. Deleting it is not a breaking change. The second block shows a public module marked `#[doc(hidden)]`, and a public function defined inside it. Even though this function can be imported, it is not considered public API since it would have to be imported from a `#[doc(hidden)]` module. Deleting it is not a SemVer major change either.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;One way is if the public function is inside a private module. The function isn&#x27;t reachable — there&#x27;s no way to import it. Nothing outside its crate could have used it, so deleting it can&#x27;t break anyone.&lt;&#x2F;p&gt;
&lt;p&gt;The other way is trickier: it involves the &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; attribute. This is a way to mark a piece of your crate&#x27;s public surface area as &lt;em&gt;not being public API&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; is most often used by crates that define macros: macro-generated code lives in the downstream crate, so it can only access &lt;em&gt;public&lt;&#x2F;em&gt; items from the crate that defined the macro. But those publicly-visible implementation details are intended to be used &lt;em&gt;only by the macro&lt;&#x2F;em&gt; — they are not public API on their own. That&#x27;s why they are marked &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If our public function is &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt;, or if it must be imported from a &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; module, then it isn&#x27;t public API and its deletion is not a major breaking change.&lt;&#x2F;p&gt;
&lt;p&gt;So is it safe to say &quot;oh, this function is defined inside a &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; module so it must not be public API?&quot;&lt;&#x2F;p&gt;
&lt;p&gt;Surprisingly, no!&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-28.1bf01fb31677dc5b.png&quot; alt=&quot;Another block of code. It shows a public module marked `#[doc(hidden)]` containing a public function. A line of code adjacent to the module performs a re-export (`pub use`) of the public function, making it possible for other crates to import the function without touching any non-public APIs. Neither the function nor its re-export are themselves `#[doc(hidden)]`, so this function is public API under the path `this_crate::example`. Its deletion would be a major breaking change.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Here we have a public module that&#x27;s &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; and a public function inside it.&lt;&#x2F;p&gt;
&lt;p&gt;But that public function &lt;em&gt;is&lt;&#x2F;em&gt; public API, because it&#x27;s re-exported without &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt;. Users of this crate could have imported it that way without using any &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; items.&lt;&#x2F;p&gt;
&lt;p&gt;Who knew that a simple question like &quot;is it breaking if I delete a public function&quot; could have so many edge cases!&lt;label for=&quot;sn-doc-hidden-difficulty&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-doc-hidden-difficulty&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;There even more edge cases than I&#x27;ve mentioned here. Properly handling &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; was hard! For example, &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; could be applied to enum &lt;em&gt;variants&lt;&#x2F;em&gt;, or even individual &lt;em&gt;fields&lt;&#x2F;em&gt; within a struct or enum variant. In that case, the struct or enum itself &lt;em&gt;is&lt;&#x2F;em&gt; public API but some of its components &lt;em&gt;are not&lt;&#x2F;em&gt;. Another example is that maintainers often apply &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; on deprecated items in order to hide them from documentation such as &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;&quot;&gt;docs.rs&lt;&#x2F;a&gt; — but deprecating an item is not a major breaking change, and in this case &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; does &lt;em&gt;not&lt;&#x2F;em&gt; exempt that item from the public API. For even more edge cases, check out my post on &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;checking-semver-for-doc-hidden-items&#x2F;&quot;&gt;how we check SemVer in the presence of hidden items&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;So far, we&#x27;ve seen that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Deleting&lt;&#x2F;em&gt; a public function &lt;em&gt;might not be&lt;&#x2F;em&gt; breaking.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Adding&lt;&#x2F;em&gt; a public function &lt;em&gt;is definitely breaking&lt;&#x2F;em&gt;, but not SemVer-major.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This might seem completely backwards, but it&#x27;s accurate! SemVer is hard.&lt;&#x2F;p&gt;
&lt;p&gt;We found hundreds of SemVer violations here while &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-violations-are-common-better-tooling-is-the-answer&#x2F;&quot;&gt;scanning the top 1000 Rust crates&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; handles all these cases correctly.&lt;label for=&quot;sn-cross-crate&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-cross-crate&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;As of this writing, there&#x27;s a rare edge case that the tool sometimes doesn&#x27;t handle correctly: re-exporting an item defined in another crate. All cross-crate analysis is &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;four-challenges-cargo-semver-checks-has-yet-to-tackle&#x2F;#blocked-upstream-cross-crate-analysis&quot;&gt;currently blocked on upstream functionality&lt;&#x2F;a&gt;. Thankfully, this is not something crates often do, so at the moment this is an occasional annoyance than a show-stopping bug.&lt;&#x2F;span&gt;
 Computers easily outperform humans here.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example-can-adding-fields-to-a-struct-be-a-breaking-change&quot;&gt;Example: Can adding fields to a struct be a breaking change?&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=VArNQtYBC6Y&amp;amp;t=878s&quot;&gt;Jump to this chapter&lt;&#x2F;a&gt; in the video.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-29.99d593505f7e4292.png&quot; alt=&quot;GitHub pull request showing a `pub struct Foo` with two existing public fields called `first` and `second`, and a new public field `third` of type `Option&amp;lt;String&amp;gt;` being added as part of the pull request. The struct has a public constructor `Foo::new()`, and this pull request does not modify its function signature. Instead, it ensures that the created struct sets the new `third` field to a default value of `None`.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Here we have a pull request that is adding a new field to an existing public struct &lt;code&gt;Foo&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The author of this pull request was quite careful! They noticed the struct has a constructor &lt;code&gt;Foo::new()&lt;&#x2F;code&gt;, and they made sure the new field doesn&#x27;t cause a change in the constructor. Instead, they initialized the new field to a default value.&lt;&#x2F;p&gt;
&lt;p&gt;This seems entirely reasonable! None of the methods are broken. All the prior public fields still work. This is a purely additive change. It&#x27;s a solid pull request, merge it!&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-30.7bfb396717f24e9f.png&quot; alt=&quot;The same slide titled &amp;quot;Falsehoods we believed about SemVer&amp;quot; from earlier. A fifth bullet point says &amp;quot;Adding fields to a struct can only be breaking via changes to its methods.&amp;quot; The four prior bullet points are crossed off, and there is space left for more bullet points.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;&lt;em&gt;Oops!&lt;&#x2F;em&gt; 💥&lt;&#x2F;p&gt;
&lt;p&gt;A breaking change just slipped past us.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-31.f6572d49141d5359.png&quot; alt=&quot;Annotations over the code in the aforementioned pull request. They point out that the `pub struct Foo` was not marked `#[non_exhaustive]`, and that all its prior fields were public, therefore downstream users were allowed to construct `Foo` values with struct literal notation: `Foo { first: 0, second: false }` Such uses are broken by this pull request, since they don&amp;#x27;t specify any value for the new field named `third`.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;The issue is that this struct is not marked &lt;code&gt;#[non_exhaustive]&lt;&#x2F;code&gt;, and all of its prior fields were public. This means downstream crates could have constructed the struct directly via a struct literal, by specifying values for all its fields instead of calling &lt;code&gt;Foo::new()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Adding a new field will break that code since it doesn&#x27;t specify what value the new field should have — that&#x27;s a compile error.&lt;&#x2F;p&gt;
&lt;p&gt;This is not at all obvious! No human is perfect, and this could easily slip through code review. We found breakage like this hundreds of times &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-violations-are-common-better-tooling-is-the-answer&#x2F;&quot;&gt;in our SemVer study of the top 1000 Rust crates&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-32.acc4afa4b5c07d9d.png&quot; alt=&quot;Output of running `cargo semver-checks` on the aforementioned pull request. It indicates the failure of a lint called `constructible_struct_adds_field` which says that a new field has been added to a struct constructible with a literal, which requires that all literals of that struct must be updated to include the new field. The lint identifies the problematic field as `Foo::third` at line 4 in file `src&amp;#x2F;lib.rs`. The output indicates this is a major breaking change, and the total runtime was 0.010 seconds.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; will catch this issue 100% of the time.&lt;label for=&quot;sn-two-lints&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-two-lints&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;In fact, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; even differentiates between two ways to cause breakage here: adding a new &lt;em&gt;public&lt;&#x2F;em&gt; field will require specifying the field in struct literals, while adding a new &lt;em&gt;private&lt;&#x2F;em&gt; field will disallow using struct literals altogether.&lt;&#x2F;span&gt;
&lt;label for=&quot;sn-struct-non-exhaustive&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-struct-non-exhaustive&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Anecdotally, many Rustaceans I&#x27;ve spoken to were surprised to learn that structs could be marked non-exhaustive at all! If you use &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;, you don&#x27;t need to be an expert in Rust — the necessary expertise is distilled into the tool and is a few keystrokes away.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Adding fields to a struct can &lt;em&gt;sometimes&lt;&#x2F;em&gt; be a breaking change; terms and conditions apply. If you use &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;, you don&#x27;t have to remember this fact — let alone its terms and conditions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example-can-modifying-a-private-item-cause-a-breaking-change&quot;&gt;Example: Can modifying a private item cause a breaking change?&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=VArNQtYBC6Y&amp;amp;t=1018s&quot;&gt;Jump to this chapter&lt;&#x2F;a&gt; in the video.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-33.7c8fbd3b99582648.png&quot; alt=&quot;GitHub pull request showing a private struct `Foo` that holds a `&amp;amp;&amp;#x27;static str` value, and derives `Clone`. The pull request changes the struct&amp;#x27;s field from `&amp;amp;&amp;#x27;static str` to `Rc&amp;lt;str&amp;gt;`, mentioning that this adds support for non-static strings while also preserving cheap cloning via the ref-counted string type.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Here we have a &lt;em&gt;private&lt;&#x2F;em&gt; struct &lt;code&gt;Foo&lt;&#x2F;code&gt;, and we&#x27;re just changing some internal implementation details. It used to hold a &lt;code&gt;&amp;amp;&#x27;static  str&lt;&#x2F;code&gt;, and we now want to support non-&lt;code&gt;&#x27;static&lt;&#x2F;code&gt; strings.&lt;&#x2F;p&gt;
&lt;p&gt;The struct is &lt;code&gt;Clone&lt;&#x2F;code&gt;, so to keep cloning cheap we&#x27;re going to use a reference-counted string type: &lt;code&gt;Rc&amp;lt;str&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We changed private implementation details of a private type. We didn&#x27;t touch any public API. Surely we couldn&#x27;t have broken any public API? If I didn&#x27;t touch it, I didn&#x27;t break it!&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-34.1a4cf29a73b178e4.png&quot; alt=&quot;The same slide titled &amp;quot;Falsehoods we believed about SemVer&amp;quot; from earlier. A sixth bullet point says &amp;quot;If I didn&amp;#x27;t touch it, I didn&amp;#x27;t break it!&amp;quot; The five prior bullet points are all crossed off.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Darn! 💥&lt;&#x2F;p&gt;
&lt;p&gt;But ... how?! What broke?&lt;&#x2F;p&gt;
&lt;p&gt;Run &lt;code&gt;cargo semver-checks&lt;&#x2F;code&gt; and let&#x27;s see what it says.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-35.eb94894efcef78ed.png&quot; alt=&quot;Output of running `cargo semver-checks` on the aforementioned pull request. It indicates the failure of a lint called `auto_trait_impl_removed` which means that a public type has stopped implementing one or more auto traits, which may break downstream code that depends on those traits being implemented. The lint identifies that type `Bar` is no longer `Send` nor `Sync`, on line 16 of file `src&amp;#x2F;lib.rs`. The output indicates this is a major breaking change, and the total runtime was 0.010 seconds.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;How strange! The pull request changed the private &lt;code&gt;struct Foo&lt;&#x2F;code&gt;, but &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; complains about a public type &lt;code&gt;Bar&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Our pull request didn&#x27;t change any type &lt;code&gt;Bar&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-36.8b8ca304e420a176.png&quot; alt=&quot;GitHub pull request UI and cargo-semver-checks output laid out side by side. The pull request UI shows the only changes are in `struct Foo`, while cargo-semver-checks mentions a breaking change in type `Bar`. An annotation saying `type Bar is in here` sits on top of the pull request UI, pointing to a clickable UI element used to display the rest of the file — which was hidden by default since it wasn&amp;#x27;t modified.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;&lt;code&gt;Bar&lt;&#x2F;code&gt;&#x27;s definition isn&#x27;t even shown in the pull request review screen, so surely it&#x27;s irrelevant here? Maybe this is a false-positive in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, no such luck. We &lt;em&gt;did&lt;&#x2F;em&gt; cause a breaking change, and since the broken API was never shown in the UI, we were never likely to spot it during code review.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s what happened.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-37.b8f5238d1cc99a64.png&quot; alt=&quot;A series of annotations over source code. They point out that `pub struct Bar` is a public type which contains a value of type `Foo`. As a public type, `Bar`&amp;#x27;s implemented traits are public API as well. Another annotation says that auto traits are automatically implemented whenever possible: a type implements an auto trait if all its constituents also implement the trait. The `&amp;amp;&amp;#x27;static str` was both `Send` and `Sync` (the two auto traits cargo-semver-checks identified as being no longer implemented), but `Rc&amp;lt;str&amp;gt;` is neither. This means `Foo` stopped being `Send` and `Sync`, which made `Bar` stop being `Send` or `Sync`.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;&lt;code&gt;pub struct Bar&lt;&#x2F;code&gt; exists elsewhere in our library, and contains a &lt;code&gt;Foo&lt;&#x2F;code&gt; value.&lt;&#x2F;p&gt;
&lt;p&gt;As a public struct, the traits it implements are public API as well.&lt;&#x2F;p&gt;
&lt;p&gt;Rust has a small group of traits called &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;special-types-and-traits.html#auto-traits&quot;&gt;&lt;em&gt;auto traits&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;, which are automatically implemented for types whenever possible. &lt;code&gt;Send&lt;&#x2F;code&gt; and &lt;code&gt;Sync&lt;&#x2F;code&gt; are the most commonly used auto traits — this is how the Rustonomicon describes them:&lt;label for=&quot;sn-previously-auto-traits&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-previously-auto-traits&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;We&#x27;ve previously discussed auto traits and the SemVer breakage they might cause &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;toward-fearless-cargo-update&#x2F;&quot;&gt;in this post&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;own&quot; cite=&quot;https:&amp;#x2F;&amp;#x2F;doc.rust-lang.org&amp;#x2F;nomicon&amp;#x2F;send-and-sync.html&quot;&gt;
  &lt;p&gt;
    &lt;code&gt;Send&lt;&#x2F;code&gt; and &lt;code&gt;Sync&lt;&#x2F;code&gt; are also automatically derived traits. This means that, unlike every other trait, if a type is composed entirely of &lt;code&gt;Send&lt;&#x2F;code&gt; or &lt;code&gt;Sync&lt;&#x2F;code&gt; types, then it is &lt;code&gt;Send&lt;&#x2F;code&gt; or &lt;code&gt;Sync&lt;&#x2F;code&gt;. Almost all primitives are &lt;code&gt;Send&lt;&#x2F;code&gt; and &lt;code&gt;Sync&lt;&#x2F;code&gt;, and as a consequence pretty much all types you&#x27;ll ever interact with are &lt;code&gt;Send&lt;&#x2F;code&gt; and &lt;code&gt;Sync&lt;&#x2F;code&gt;. Major exceptions include: [...] &lt;code&gt;Rc&lt;&#x2F;code&gt; isn&#x27;t &lt;code&gt;Send&lt;&#x2F;code&gt; or &lt;code&gt;Sync&lt;&#x2F;code&gt; (because the refcount is shared and unsynchronized).
  &lt;&#x2F;p&gt;
  &lt;footer&gt;
    &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;doc.rust-lang.org&amp;#x2F;nomicon&amp;#x2F;send-and-sync.html&quot; rel=&quot;noreferrer&quot;&gt;Send and Sync, Rustonomicon&lt;&#x2F;a&gt;
  &lt;&#x2F;footer&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The &lt;code&gt;struct Foo&lt;&#x2F;code&gt;&#x27;s original &lt;code&gt;&amp;amp;&#x27;static str&lt;&#x2F;code&gt; field implemented both &lt;code&gt;Send&lt;&#x2F;code&gt; and &lt;code&gt;Sync&lt;&#x2F;code&gt;, whereas &lt;code&gt;Rc&amp;lt;str&amp;gt;&lt;&#x2F;code&gt; implements neither. That change makes &lt;code&gt;struct Foo&lt;&#x2F;code&gt; no longer implement &lt;code&gt;Send&lt;&#x2F;code&gt; or &lt;code&gt;Sync&lt;&#x2F;code&gt;, so &lt;code&gt;pub struct Bar&lt;&#x2F;code&gt; is no longer &lt;code&gt;Send&lt;&#x2F;code&gt; nor &lt;code&gt;Sync&lt;&#x2F;code&gt; either.&lt;&#x2F;p&gt;
&lt;p&gt;This change in the traits of a public API type is breaking!&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-38.26f9accf5ce26dfe.png&quot; alt=&quot;Rust playground output showing a compilation error: `Rc&amp;lt;str&amp;gt;` cannot be shared between threads safely. The error occurs at the point where a function called `use_parallelism()` attempts to use a value of type `Bar` while requiring it to implement the `Sync` trait. The `Bar` value does not implement the trait `Sync`. The compiler helpfully points out that `Bar` is not `Sync` because its contained `Foo` is not `Sync`, whose contained `Rc&amp;lt;str&amp;gt;` in turn is the underlying source of the problem.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Our downstream users might have been using &lt;code&gt;Bar&lt;&#x2F;code&gt; in a use case that relies on parallelism. Some &lt;code&gt;Bar&lt;&#x2F;code&gt; may have been shared across threads, or passed between threads.&lt;&#x2F;p&gt;
&lt;p&gt;Their code is now broken. Instead of working code, they will see an error like the above.&lt;&#x2F;p&gt;
&lt;p&gt;We saw hundreds of accidental breaking changes like this &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-violations-are-common-better-tooling-is-the-answer&#x2F;&quot;&gt;in our SemVer study of the top 1000 Rust crates&lt;&#x2F;a&gt;. But this wasn&#x27;t a skill issue!&lt;&#x2F;p&gt;
&lt;p&gt;Not only do the maintainers of those crates &lt;em&gt;know&lt;&#x2F;em&gt; about auto traits — they&#x27;ve certainly been &lt;em&gt;on the receiving end&lt;&#x2F;em&gt; of breakage caused by auto traits. They have the skills — but they weren&#x27;t set up for success here.&lt;&#x2F;p&gt;
&lt;p&gt;This is a case where private code can break public API via &quot;spooky action at a distance,&quot; where the affected public API is never displayed during code review. None of us stand a chance in such circumstances — without automated help, shipping breakage like this is a question of time.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; uses the Rust compiler&#x27;s own machinery to determine the auto traits each type implements.&lt;&#x2F;p&gt;
&lt;p&gt;It will catch this issue 100% of the time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cargo-semver-checks-lints-are-database-queries-in-disguise&quot;&gt;cargo-semver-checks lints are database queries in disguise&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=VArNQtYBC6Y&amp;amp;t=1265s&quot;&gt;Jump to this chapter&lt;&#x2F;a&gt; in the video.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now that you&#x27;ve seen some of the issues &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; can flag, let&#x27;s talk about how it works and why you should trust what it can find.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s come back to the earlier example of determining whether deleting a public function is a major breaking change.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-39.fd107125b3143acd.png&quot; alt=&quot;Checklist of conditions that must be true if a function&amp;#x27;s removal is a major breaking change: previously, the function must have been public; another crate could have imported and used it; that import did not rely on any `#[doc(hidden)]` items, and now that same import name no longer satisfies the previous conditions. Finding all such functions sounds like a database query...&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;We have a major breaking change only if all of those conditions are true.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s breaking because we&#x27;ve found a case where an import of a public API component from an older version no longer works in the newer version. Either the function is no longer publicly available, or it can&#x27;t be imported anymore, or it&#x27;s &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; meaning it isn&#x27;t public API anymore. In any case, that&#x27;s a major breaking change.&lt;&#x2F;p&gt;
&lt;p&gt;Say we want to find all such functions that have caused a breaking change.&lt;&#x2F;p&gt;
&lt;p&gt;One could read the rule on this slide as &quot;select functions where X and Y and Z ...&quot;&lt;&#x2F;p&gt;
&lt;p&gt;That sounds like a database query!&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-40.5f34373e5be8a283.png&quot; alt=&quot;Diagram showing a visual representation of the aforementioned query. It shows a pair of crate versions. A function at a public importable path is singled out in the old crate version. In the new crate version, a function at the same importable path is also shown, and a circle around it is annotated with the condition `count = 0`, indicating that no such function in the new crate version exists.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Structurally, it looks like this.&lt;&#x2F;p&gt;
&lt;p&gt;We are comparing a pair of versions: old version on the left, new one on the right.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re looking for public functions that are importable and public API on the left. We&#x27;re going to try to match them to public functions in the new version, at the same import path as the function that we were just looking at.&lt;&#x2F;p&gt;
&lt;p&gt;If we can&#x27;t find any such matching function in the new version of the crate (i.e. if &quot;we count zero matching functions&quot;) then we&#x27;ve found a breaking change: we&#x27;ve found a specific function that previously could be imported and used, but now it can&#x27;t be imported and used anymore.&lt;&#x2F;p&gt;
&lt;p&gt;This is exactly what &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; runs under the hood.&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-41.603bebcdff508875.png&quot; alt=&quot;The same slide with the checklist of conditions required for a function&amp;#x27;s removal to be a major breaking change. The left side of the slide has the checklist, while the right side shows a database query in the Trustfall query language. An arrow annotation connects each condition in the checklist to its corresponding clause in the query, demonstrating that they both describe the same operation.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;We aren&#x27;t going to dig into the query syntax here.&lt;&#x2F;p&gt;
&lt;p&gt;But at a glance, we can see the query does the same thing we described in plain language earlier:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It looks at public functions in the old version of the crate.&lt;&#x2F;li&gt;
&lt;li&gt;It ensures that some public API path could be used to import them.&lt;&#x2F;li&gt;
&lt;li&gt;In the new version, it attempts to match each function to a corresponding public function at the same public API import path.&lt;&#x2F;li&gt;
&lt;li&gt;It sets the &lt;code&gt;count = 0&lt;&#x2F;code&gt; condition on the number of such matching functions in the new crate.&lt;&#x2F;li&gt;
&lt;li&gt;Along the way, it outputs some of the values that will be handy when constructing our error message: we want to know which function was the problem, at which path, etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We just wrote down the SemVer rule in human language, we translated it into a database query, and we called it a day. The business logic of SemVer can be entirely ignorant of how we run the query, or how we obtain the information on the public API.&lt;&#x2F;p&gt;
&lt;p&gt;This is pretty nice!&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-42.c4b57bbfe796256e.png&quot; alt=&quot;Layer diagram of the cargo-semver-checks architecture. The top layer is titled &amp;quot;cargo-semver-checks&amp;quot; and contains all the lint logic. It&amp;#x27;s connected to the middle layer, titled &amp;quot;Trustfall&amp;quot; and representing the query engine. That layer in turn is connected to multiple blocks titled &amp;quot;Rust 1.73 rustdoc&amp;quot; through &amp;quot;Rust 1.76 rustdoc&amp;quot;, which are collectively titled &amp;quot;adapters&amp;quot; and hold the format-specific logic. The diagram shows that the lint logic is not related at all to the format logic — the cargo-semver-checks lints don&amp;#x27;t know anything about the format of the data they are querying!&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Here&#x27;s how that works under the hood.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; on top is where all the lints are stored. Each lint consists of a query, some string templating for forming the user-facing diagnostic message, and some metadata such as a reference link where the user can learn more about the type of breaking change that was detected. This layer doesn&#x27;t know where the data is coming from, or what format it&#x27;s in.&lt;&#x2F;p&gt;
&lt;p&gt;At the bottom is all the logic related to the incoming data format. We use Rust&#x27;s built-in &lt;code&gt;rustdoc&lt;&#x2F;code&gt; tool to generate JSON describing the API of each version of the crate being checked. This JSON format is not stable — it changes often — so we have different code paths in order to support multiple formats.&lt;&#x2F;p&gt;
&lt;p&gt;In the middle lies the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall query engine&lt;&#x2F;a&gt;. &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; runs its lints as Trustfall queries, and Trustfall in turn uses small pieces of code called &lt;em&gt;adapters&lt;&#x2F;em&gt; that understand the nuances of each rustdoc JSON format we support.&lt;&#x2F;p&gt;
&lt;p&gt;This separation between the SemVer logic and the underlying data format is the key to &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; success:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Support for multiple stable Rust versions.&lt;&#x2F;strong&gt; Unlike many other tools that use rustdoc JSON, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; does not require using a specific &lt;code&gt;nightly&lt;&#x2F;code&gt; Rust version. Any reasonably recent Rust stable release would do, as would most pre-releases.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Lints are easy to write.&lt;&#x2F;strong&gt; They query a high-level schema which talks about Rust structs and fields, enums and variants, functions and their arguments — the familiar concepts of the Rust language, instead of implementation details of a specific JSON format. No prior knowledge of static analysis or query optimization is required to write lints or ensure they run quickly!&lt;label for=&quot;sn-lint-perf&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-lint-perf&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;For a deeper dive into how the query optimizations work, check out &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;speeding-up-rust-semver-checking-by-over-2000x&#x2F;&quot;&gt;my &quot;Speeding up Rust semver-checking by  over 2000x&quot; post&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Maintenance is easy.&lt;&#x2F;strong&gt; When the JSON format gets changed, we &lt;em&gt;do not&lt;&#x2F;em&gt; need to change any lints. There are dozens of lints (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;releases&#x2F;tag&#x2F;v0.30.0&quot;&gt;more are added every week!&lt;&#x2F;a&gt;), so it would be prohibitive if we had to update them on every format change. Instead, we make a new adapter copy and tweak it as needed to accommodate the changes in the format, and everything &lt;em&gt;just works&lt;&#x2F;em&gt;.&lt;label for=&quot;sn-not-first-semver-linter&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-not-first-semver-linter&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; isn&#x27;t the first SemVer linter for Rust! Prior attempts at linting SemVer were either abandoned due to excessive maintenance burden, or require a specific nightly Rust version to work — or both.&lt;&#x2F;span&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;a-peek-at-trustfall-an-engine-for-querying-everything&quot;&gt;A peek at Trustfall, an engine for querying everything&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=VArNQtYBC6Y&amp;amp;t=1627s&quot;&gt;Jump to this chapter&lt;&#x2F;a&gt; in the video.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-43.000fb9a6a78cc66e.png&quot; alt=&quot;Slide titled &amp;quot;Trustfall: Turn everything into a database!&amp;quot; Represent data as a graph, then query any data sources. Battle-tested: 7+ years in production. Engine built in Rust; adapters can be Rust, Python, JavaScript, or WebAssembly. You can query APIs, databases, arbitrary file formats — all in-place and without ETL. The project is free &amp;amp; open-source on GitHub: https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;obi1kenobi&amp;#x2F;trustfall&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall&lt;&#x2F;a&gt; is another project I started.&lt;&#x2F;p&gt;
&lt;p&gt;It allows us to represent data as a graph and query any kind of data sources. It is not something that&#x27;s specific to Rust or rustdoc at all.&lt;&#x2F;p&gt;
&lt;p&gt;Its first iteration was deployed to production in late 2016,&lt;label for=&quot;sn-graphql-compiler&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-graphql-compiler&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;The modern Trustfall query engine is the &quot;from the ground up&quot; Rust rewrite of a Python project called &lt;a href=&quot;https:&#x2F;&#x2F;graphql-compiler.readthedocs.io&#x2F;en&#x2F;latest&#x2F;&quot;&gt;&lt;code&gt;graphql-compiler&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; which my previous employer open-sourced.&lt;&#x2F;span&gt;
 so it&#x27;s had 7+ years in production use.&lt;&#x2F;p&gt;
&lt;p&gt;It can be used to query any kind of API, database, file format, etc. It can run queries in-place, without needing &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;what-is&#x2F;etl&#x2F;&quot;&gt;ETL&lt;&#x2F;a&gt; or any similarly heavyweight process.&lt;&#x2F;p&gt;
&lt;p&gt;Its adapters can be written in Rust, Python, JavaScript, or WASM — or any other language that can have bindings to Rust.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve given two prior talks related to Trustfall:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.hytradboi.com&#x2F;2022&#x2F;how-to-query-almost-everything&quot;&gt;“How to Query (Almost) Everything” — HYTRADBOI 2022&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Fqo8r4bInsk&quot;&gt;“How Database Tricks Sped up Rust Linting Over 2000x” — P99 CONF 2023&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can try Trustfall in our playgrounds over &lt;a href=&quot;https:&#x2F;&#x2F;play.predr.ag&#x2F;rustdoc&quot;&gt;rustdoc JSON&lt;&#x2F;a&gt; or over the &lt;a href=&quot;https:&#x2F;&#x2F;play.predr.ag&#x2F;hackernews&quot;&gt;HackerNews REST APIs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The rustdoc JSON playground uses the same exact code that powers &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;, and lets you find out interesting things about a variety of Rust crates — such as &lt;a href=&quot;https:&#x2F;&#x2F;play.predr.ag&#x2F;rustdoc#?f=2&amp;amp;q=*3-Items-where-lints-were-allowed.-Not-all-crates-have-these*L*l*3-try-one-of*B-anyhow*L-httparse*L-hyper*L-itertools.*lquery---0Crate---2item---4__typename-*o*l--_4name-*o*l*l--_4attribute---6raw_attribute-*o*l*l--_6content---8base-*f*9*p-***e***L-*v-*c***4allow_lint***j*0*l--_6--*4*J*l*l--_4span---6filename-*o*l--_6begin_line-*o*l--_4--*2--*0*J*l*J&amp;amp;v=--0**allow_lint***B-**allow***l*J&quot;&gt;which Rust or clippy lints they&#x27;ve disabled and where&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;play.predr.ag&#x2F;hackernews&quot;&gt;HackerNews playground&lt;&#x2F;a&gt; lets you check, for example, &lt;a href=&quot;https:&#x2F;&#x2F;play.predr.ag&#x2F;hackernews#?f=2&amp;amp;q=*3-Cross-API-query-*9Algolia-%2B-Firebase*0*B*l*3-Find-comments-on-stories-about-**openai.com**-where*l*3-the-commenter%27s-bio-has-at-least-one-GitHub-or-Twitter-link*lquery---0*3-This-hits-the-Algolia-search-API-for-HackerNews.*l--_0*3-The-stories%2Fcomments%2Fusers-data-is-from-the-Firebase-HN-API.*l--_0*3-The-transition-is-seamless-*-*--it-isn%27t-visible-from-the-query.*l--_0SearchByDate*9query*B-**openai.com***0---2*E-Story---4*3-All-data-from-here-onward-is-from-the-Firebase-API.*l--_4storyTitle*B-title-*o*l--_4storyLink*B-url-*o*l--_4story*B-submittedUrl-*o*l--_o*f*9*p-**regex***L-*v-*c***4sitePattern***j*0*l*l--_4comment---6reply-*r*9*d-5*0---8comment*B-textPlain-*o*l*l--_8byUser---acommenter*B-id-*o*l--_acommenterBio*B-aboutPlain-*o*l*l--_a*3-The-profile-must-have-at-least-one*l--_a*3-link-that-points-to-either-GitHub-or-Twitter.*l--_alink*l--_c*F*l--_c*T*9*p-**count***0*l--_c*f*9*p-***G*e***L-*v-*c***4minProfiles***j*0*l--_a--ccommenterIDs*B-url-*f*9*p-**regex***L-*v-*c***4socialPattern***j*0*l--_u*o*l--_a--*8--*6--*4--*2--*0*J*l*J&amp;amp;v=--0**sitePattern***B-**http*cs*j*B%2F%2F*9*c%5E.*j*8%5C%5C.*0*8openai.com%2F.*8***L*l--_0**minProfiles***B-1*L*l--_0**socialPattern***B-***9github%7Ctwitter*0%5C%5C.com%2F***l*J&quot;&gt;which Twitter or GitHub users comment on stories about OpenAI&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In both of these cases, the Trustfall query engine is compiled to WASM and runs entirely in your browser. So feel free to run any query you like, no matter how expensive — it&#x27;s your CPU and your bandwidth that&#x27;s used to compute it 😁&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion-solving-maintainability-led-to-a-tool-that-users-love&quot;&gt;Conclusion: Solving maintainability led to a tool that users love&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=VArNQtYBC6Y&amp;amp;t=1752s&quot;&gt;Jump to this chapter&lt;&#x2F;a&gt; in the video.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-44.5c7c1d3a545c2dbf.png&quot; alt=&quot;Slide titled: &amp;quot;Trustfall makes cargo-semver-checks possible.&amp;quot; The slide has the following text: &amp;quot;Focus on linting and ergonomics, not rustdoc JSON format changes. 58 lints and growing — twice as many as a year ago. 32 contributors and growing — many new lints are first-time contributions! Our users love us!&amp;quot; Below this text is a screenshot of a GitHub comment from user &amp;quot;thomaseizinger&amp;quot; saying: &amp;quot;CI just caught an accidental breaking change! How good is this 😍&amp;quot;&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;There are hundreds of ways to accidentally break semantic versioning rules in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;That problem is hard enough to solve by itself, without also worrying about JSON format changes breaking your implementation.&lt;label for=&quot;sn-format-changes&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-format-changes&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;We want to have a working SemVer linter, and we &lt;em&gt;also&lt;&#x2F;em&gt; want the rustdoc maintainers to be able to freely change the JSON format if that has benefits across the Rust community! The Rust language is still growing — for example, &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2023&#x2F;12&#x2F;28&#x2F;Rust-1.75.0.html#async-fn-and-return-position-impl-trait-in-traits&quot;&gt;Rust 1.75 added &lt;code&gt;async fn&lt;&#x2F;code&gt; in traits&lt;&#x2F;a&gt; — and rustdoc JSON has to be able to express these new concepts. The rustdoc team has a hard enough job as it is, and we don&#x27;t want to tie their hands further by restricting which kinds of format changes may happen when.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Trustfall makes cargo-semver-checks possible.&lt;&#x2F;p&gt;
&lt;p&gt;It lets us prevent an ever-growing number of accidental breaking changes, while also making lint-writing approachable to people of all backgrounds. Many lints are first-time contributions from our community members who had no prior experience writing linters!&lt;&#x2F;p&gt;
&lt;p&gt;Most importantly, our users love us. Everyone prefers to find out about accidentally-breaking changes before they get pushed to production, instead of finding out when someone opens an issue like &quot;hey, you broke my project.&quot;&lt;&#x2F;p&gt;
&lt;figure&gt;
  

  

  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;slide-45.74cc1db1d4e9c7ab.png&quot; alt=&quot;Slide titled: &amp;quot;Toward fearless cargo update.&amp;quot; SemVer is valuable, but impossible without automated help. cargo-semver-checks is a solution with lots of happy users. How you can help: contribute code and lints to cargo-semver-checks. Sponsor its development: https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;sponsors&amp;#x2F;obi1kenobi . Use cargo-semver-checks when others depend on your packages.&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Hopefully by this point I&#x27;ve convinced you that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Semantic versioning is valuable, but it&#x27;s impossible without automated help.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is a solution to this problem that has lots of happy users.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you&#x27;d like to help, you can contribute &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&quot;&gt;code&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues?q=is%3Aissue+is%3Aopen+label%3AE-help-wanted+label%3AA-lint&quot;&gt;lints&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&#x2F;obi1kenobi&quot;&gt;funding&lt;&#x2F;a&gt; to &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There are &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;5&quot;&gt;dozens more breaking changes that we need to write lints for&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;four-challenges-cargo-semver-checks-has-yet-to-tackle&#x2F;&quot;&gt;lots of other not-yet-built functionality&lt;&#x2F;a&gt; as well. So please consider becoming a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&#x2F;obi1kenobi&quot;&gt;GitHub Sponsor&lt;&#x2F;a&gt; — either personally or via your company.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, for the sake of everyone in the Rust community, please try to avoid accidental breaking changes. Nobody will blame you for them, but it&#x27;s a lot better for everyone if you find them &lt;em&gt;before&lt;&#x2F;em&gt; you ship the new release.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo update&lt;&#x2F;code&gt; should be fearless — &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is here to help!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Four challenges cargo-semver-checks has yet to tackle</title>
        <published>2024-01-23T00:00:00+00:00</published>
        <updated>2024-01-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/four-challenges-cargo-semver-checks-has-yet-to-tackle/"/>
        <id>https://predr.ag/blog/four-challenges-cargo-semver-checks-has-yet-to-tackle/</id>
        
        <summary type="html">&lt;p&gt;&lt;em&gt;My &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;highlights-of-2023-for-cargo-semver-checks&#x2F;&quot;&gt;last post&lt;&#x2F;a&gt; covered the key &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; achievements from 2023. Here are the biggest challenges that lie ahead!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Many of the remaining challenges in cargo-semver-checks are obvious: we all want more lints, fewer false-positives, etc. etc. Let&#x27;s set those aside.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, let&#x27;s talk about four non-obvious challenges we have yet to tackle:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;four-challenges-cargo-semver-checks-has-yet-to-tackle&#x2F;#obvious-in-retrospect-project-edge-cases&quot;&gt;The Obvious in Retrospect&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;four-challenges-cargo-semver-checks-has-yet-to-tackle&#x2F;#blocked-upstream-cross-crate-analysis&quot;&gt;The Blocked Upstream&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;four-challenges-cargo-semver-checks-has-yet-to-tackle&#x2F;#surprising-limitation-no-checking-of-types&quot;&gt;The Surprising Limitation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;four-challenges-cargo-semver-checks-has-yet-to-tackle&#x2F;#existential-threat-sustainable-project-funding&quot;&gt;The Existential Threat&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Highlights of 2023 for cargo-semver-checks</title>
        <published>2024-01-16T00:00:00+00:00</published>
        <updated>2024-01-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/highlights-of-2023-for-cargo-semver-checks/"/>
        <id>https://predr.ag/blog/highlights-of-2023-for-cargo-semver-checks/</id>
        
        <summary type="html">&lt;p&gt;&lt;em&gt;2023 was a big year for &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;! We saw ecosystem-wide adoption in projects of all shapes and sizes: the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio&quot;&gt;&lt;code&gt;tokio&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pyo3&#x2F;pyo3&quot;&gt;&lt;code&gt;PyO3&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; ecosystems, company-backed OSS projects from companies like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-sdk-rust&quot;&gt;Amazon&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;zerocopy&quot;&gt;Google&lt;&#x2F;a&gt;, and even in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;blob&#x2F;9d3473c727b776c165b03c3be26ae77c148474d6&#x2F;.github&#x2F;workflows&#x2F;main.yml#L96-L102&quot;&gt;&lt;code&gt;cargo&lt;&#x2F;code&gt; itself&lt;&#x2F;a&gt;. Here&#x27;s a look back at the highlights of 2023!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Checking semver in the presence of doc(hidden) items</title>
        <published>2023-11-18T00:00:00+00:00</published>
        <updated>2023-11-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/checking-semver-for-doc-hidden-items/"/>
        <id>https://predr.ag/blog/checking-semver-for-doc-hidden-items/</id>
        
        <summary type="html">&lt;p&gt;&lt;em&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; v0.25 squashes nearly all bugs related to &lt;code&gt;doc(hidden)&lt;&#x2F;code&gt; items — its most common source of false-positives. What does &lt;code&gt;doc(hidden)&lt;&#x2F;code&gt; mean in Rust, and why was handling it correctly so hard?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Semver violations are common, better tooling is the answer</title>
        <published>2023-09-07T00:00:00+00:00</published>
        <updated>2023-09-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/semver-violations-are-common-better-tooling-is-the-answer/"/>
        <id>https://predr.ag/blog/semver-violations-are-common-better-tooling-is-the-answer/</id>
        
        <content type="html" xml:base="https://predr.ag/blog/semver-violations-are-common-better-tooling-is-the-answer/">&lt;p&gt;&lt;em&gt;This post is coauthored by &lt;a href=&quot;https:&#x2F;&#x2F;tonowak.com&#x2F;&quot;&gt;Tomasz Nowak&lt;&#x2F;a&gt; and Predrag Gruevski. It describes work the two of us did together with Bartosz Smolarczyk, Michał Staniewski, and Mieszko Grodzicki.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PredragGruevski&#x2F;status&#x2F;1587877518018756609&#x2F;photo&#x2F;1&quot;&gt;Anecdotally&lt;&#x2F;a&gt;, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is a helpful tool for preventing the semver violations that every so often cause ecosystem-wide pain.
This is why it earned a spot in the CI pipelines of key Rust crates like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio&#x2F;blob&#x2F;37bb47c4a2aff8913e536767645772f15650e6cd&#x2F;.github&#x2F;workflows&#x2F;ci.yml#L393-L403&quot;&gt;&lt;code&gt;tokio&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, and also why &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;61&quot;&gt;the &lt;code&gt;cargo&lt;&#x2F;code&gt; team hopes to integrate it into &lt;code&gt;cargo&lt;&#x2F;code&gt; itself&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;While anedotal evidence is nice, we wanted to get concrete data across a large sample of real-world Rust code. &lt;!-- more --&gt;
Inspired by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;crater&quot;&gt;Crater&lt;&#x2F;a&gt;,&lt;label for=&quot;sn-crater&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-crater&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;A tool that builds a large number of public Rust crates and runs their test suites to check for Rust compiler regressions.&lt;&#x2F;span&gt;
 we used &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; to lint the top 1000 most-downloaded library crates on crates.io.&lt;label for=&quot;sn-semver-crater&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-semver-crater&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Our test setup has no connection to the Crater project. However, between us this work was affectionately known as &lt;code&gt;semver-crater&lt;&#x2F;code&gt; as a succinct and clear description of the work. We hope the team working on Crater doesn&#x27;t mind this way of paying homage to our source of inspiration.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;The outcome was a goldmine of valuable data.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tl-dr-table-of-contents&quot;&gt;TL;DR + table of contents&lt;&#x2F;h2&gt;
&lt;p&gt;Long story short: semver accidents are common.
They happen even in the most carefully-developed projects run by the most experienced maintainers.
The maintainers are not to blame, and improved tooling is our best way forward.
&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is part of that improved tooling story, since it found every semver violation we report here.&lt;&#x2F;p&gt;
&lt;p&gt;Across more than 14000 releases&lt;label for=&quot;sn-releases&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-releases&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;We only considered non-yanked releases published in 2017 or later. We only scanned &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;specifying-dependencies.html#specifying-dependencies-from-cratesio&quot;&gt;minor and patch releases&lt;&#x2F;a&gt;, since major version releases do not have any semver obligations. We also skipped 919 releases which we were not able to build with a modern version of Rust. That left us with 14389 total scanned releases.&lt;&#x2F;span&gt;
 of the top 1000 most downloaded crates, on average:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Around 1 in 31 releases had at least one semver violation&lt;&#x2F;strong&gt; – we found one or more violations in 464 releases (3.22%).&lt;label for=&quot;sn-not-equivalent&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-not-equivalent&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;If you never use the affected functionality, it&#x27;s possible that a semver-violating release does not break your project. This means that most projects will break due to a semver violation in less than 1-in-31 dependency upgrades on average. But with many projects having hundreds of dependencies, the odds are still concerningly high!&lt;&#x2F;span&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;More than 1 in 6 crates violated semver at least once&lt;&#x2F;strong&gt; – 172 crates (17.2%) had at least one release with a semver violation!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The most common sources of semver violations were:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A change to an exhaustive type, like adding new variants to an existing enum, or adding new fields to an existing struct that previously contained only public fields.&lt;&#x2F;li&gt;
&lt;li&gt;A struct that has been removed, or a type which had one of its methods removed,&lt;&#x2F;li&gt;
&lt;li&gt;A type that stopped implementing one or more auto traits.&lt;label for=&quot;sn-auto-traits-example&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-auto-traits-example&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;A &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;toward-fearless-cargo-update&#x2F;#breaking-semver-with-auto-traits&quot;&gt;previous post&lt;&#x2F;a&gt; has an example of how such semver violations may go unnoticed. While unexpected removals of &lt;code&gt;Send&lt;&#x2F;code&gt; or &lt;code&gt;Sync&lt;&#x2F;code&gt; can be frustrating, they are just the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shooting_the_messenger&quot;&gt;bearers of bad news&lt;&#x2F;a&gt;. Making a type stop being thread-safe is a major breaking change in &lt;em&gt;every&lt;&#x2F;em&gt; language, and Rust merely chooses to point that out at compile-time instead of in production at 3am.&lt;&#x2F;span&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;table-of-contents&quot;&gt;Table of contents&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-violations-are-common-better-tooling-is-the-answer&#x2F;#this-is-a-failure-of-tooling-not-humans&quot;&gt;This is a failure of tooling, not humans&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-violations-are-common-better-tooling-is-the-answer&#x2F;#detailed-results-how-we-validated-them&quot;&gt;Detailed results &amp;amp; how we validated them&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-violations-are-common-better-tooling-is-the-answer&#x2F;#automated-validation-via-witnesses&quot;&gt;Automated validation via &quot;witnesses&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-violations-are-common-better-tooling-is-the-answer&#x2F;#handling-the-doc-hidden-attribute&quot;&gt;Handling the &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; attribute&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-violations-are-common-better-tooling-is-the-answer&#x2F;#non-exhaustiveness-prior-to-non-exhaustive&quot;&gt;Non-exhaustiveness prior to &lt;code&gt;#[non_exhaustive]&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-violations-are-common-better-tooling-is-the-answer&#x2F;#consulting-maintainers&quot;&gt;Consulting maintainers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-violations-are-common-better-tooling-is-the-answer&#x2F;#this-is-only-a-fraction-of-all-semver-violations&quot;&gt;This is only a fraction of all semver violations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;semver-violations-are-common-better-tooling-is-the-answer&#x2F;#just-scratching-the-surface-of-our-work&quot;&gt;Just scratching the surface of our work&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We&#x27;ll dig deeper into our findings in a bit.
First, we have to discuss a key point: &lt;em&gt;none of this is maintainers&#x27; fault&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;this-is-a-failure-of-tooling-not-humans&quot;&gt;This is a failure of tooling, not humans&lt;&#x2F;h2&gt;
&lt;p&gt;Thanks to semver, &lt;code&gt;cargo update&lt;&#x2F;code&gt; can easily upgrade dependency versions to bring in performance upgrades, security fixes, and new functionality.
These benefits are significant and should not be understated.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, the benefits come at a cost to maintainers.
While many semver rules seem &quot;obvious,&quot; there&#x27;s also a long tail of complex rules with tricky edge cases.
For example, editing the details of private types can sometimes result in &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;toward-fearless-cargo-update&#x2F;#breaking-semver-with-auto-traits&quot;&gt;a major breaking change in a public API elsewhere&lt;&#x2F;a&gt; in the library — &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;breaking-semver-in-rust-by-adding-private-type-or-import&#x2F;&quot;&gt;in more than one way&lt;&#x2F;a&gt;.
Spooky action at a distance!&lt;&#x2F;p&gt;
&lt;p&gt;Demanding perfection from maintainers would be naïve, unreasonable, and unfair.
Whenever hardworking, conscientious, well-intentioned people make a mistake, the failure is not with &lt;em&gt;the people&lt;&#x2F;em&gt; but in &lt;em&gt;the system&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Blaming human error would also be out of line with Rust&#x27;s existing practices.
After all, Rust adopted borrow-checking to address accidental and costly mistakes originating from another system of complex rules.
The parallels to semver and &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; are clear: in both cases, we rely on automated systems to check the rules that are not amenable to manual checking by humans.&lt;&#x2F;p&gt;
&lt;p&gt;Analyses like this one are key to learning how we can do better.
Our findings help us understand the needs of the ecosystem, contextualize our impact thus far, and determine how to best help Rustaceans going forward.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;detailed-results-how-we-validated-them&quot;&gt;Detailed results &amp;amp; how we validated them&lt;&#x2F;h2&gt;
&lt;p&gt;Automated linters can sometimes have false-positives, so we spent substantial effort on validating our results.&lt;&#x2F;p&gt;
&lt;p&gt;We discovered a total of 3062 verified semver violations across all scanned crate releases.
Each of those was first reported by &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; and then validated by a combination of automated and manual means.&lt;&#x2F;p&gt;
&lt;details&gt;
&lt;summary&gt;
Detailed results (click to expand)
&lt;&#x2F;summary&gt;
&lt;p&gt;Here is a table showing all the different kinds of verified semver violations we discovered. We show which &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; lint caught each semver violation, and how many different releases and crates had that kind of violation.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: left&quot;&gt;lint name&lt;&#x2F;th&gt;&lt;th&gt;individual items&lt;&#x2F;th&gt;&lt;th&gt;different releases&lt;&#x2F;th&gt;&lt;th&gt;affected crates&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;inherent_method_missing.ron&quot;&gt;inherent method missing&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;791&lt;&#x2F;td&gt;&lt;td&gt;41&lt;&#x2F;td&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;enum_variant_added.ron&quot;&gt;enum variant added&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;382&lt;&#x2F;td&gt;&lt;td&gt;138&lt;&#x2F;td&gt;&lt;td&gt;60&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;constructible_struct_adds_field.ron&quot;&gt;constructible struct adds field&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;343&lt;&#x2F;td&gt;&lt;td&gt;123&lt;&#x2F;td&gt;&lt;td&gt;34&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;auto_trait_impl_removed.ron&quot;&gt;auto trait impl removed&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;318&lt;&#x2F;td&gt;&lt;td&gt;57&lt;&#x2F;td&gt;&lt;td&gt;45&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;struct_missing.ron&quot;&gt;struct missing&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;291&lt;&#x2F;td&gt;&lt;td&gt;66&lt;&#x2F;td&gt;&lt;td&gt;40&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;function_missing.ron&quot;&gt;function missing&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;267&lt;&#x2F;td&gt;&lt;td&gt;50&lt;&#x2F;td&gt;&lt;td&gt;33&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;inherent_method_const_removed.ron&quot;&gt;inherent method const removed&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;139&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;derive_trait_impl_removed.ron&quot;&gt;derive trait impl removed&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;115&lt;&#x2F;td&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;enum_variant_missing.ron&quot;&gt;enum variant missing&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;112&lt;&#x2F;td&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;struct_pub_field_missing.ron&quot;&gt;struct pub field missing&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;79&lt;&#x2F;td&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;enum_missing.ron&quot;&gt;enum missing&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;78&lt;&#x2F;td&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;trait_missing.ron&quot;&gt;trait missing&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;45&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;method_parameter_count_changed.ron&quot;&gt;method parameter count changed&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;enum_marked_non_exhaustive.ron&quot;&gt;enum marked non-exhaustive&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;struct_repr_c_removed.ron&quot;&gt;struct repr(C) removed&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;constructible_struct_adds_private_field.ron&quot;&gt;constructible struct adds private field&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;inherent_method_unsafe_added.ron&quot;&gt;inherent method unsafe added&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;function_parameter_count_changed.ron&quot;&gt;function parameter count changed&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;function_unsafe_added.ron&quot;&gt;function unsafe added&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;unit_struct_changed_kind.ron&quot;&gt;unit struct changed kind&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;enum_tuple_variant_field_missing.ron&quot;&gt;enum tuple variant field missing&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;tuple_struct_to_plain_struct.ron&quot;&gt;tuple struct to plain struct&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;enum_tuple_variant_field_added.ron&quot;&gt;enum tuple variant field added&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;enum_repr_int_removed.ron&quot;&gt;enum repr int removed&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;enum_struct_variant_field_added.ron&quot;&gt;enum struct variant field added&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;As part of our validation process, we discarded approximately 10000 other instances where &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; reported an issue that was determined to be either erroneous (confirmed false-positive) or inconclusive (e.g., causing &lt;code&gt;rustc&lt;&#x2F;code&gt; to crash when attempting to use the affected release in a new crate).&lt;&#x2F;p&gt;
&lt;p&gt;Here are the major components of our validation process.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;automated-validation-via-witnesses&quot;&gt;Automated validation via &quot;witnesses&quot;&lt;&#x2F;h3&gt;
&lt;p&gt;For each reported semver violation, we created a &lt;em&gt;witness&lt;&#x2F;em&gt; – a code snippet that compiles on the older library version, but fails to compile on the newer version due to the semver-violating change.
This is how we prove that code external to the library, such as code in a downstream use case, can be impacted by that semver issue.&lt;&#x2F;p&gt;
&lt;p&gt;For example, imagine a library with the following code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;Example {
&lt;&#x2F;span&gt;&lt;span&gt;    First,
&lt;&#x2F;span&gt;&lt;span&gt;    Second,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Imagine the following variant is added
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in a minor version. This violates semver,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; since `Example` is an exhaustive enum.
&lt;&#x2F;span&gt;&lt;span&gt;    Third,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The witness for this code would look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;dependency::Example;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;witness&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: Example) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; value {
&lt;&#x2F;span&gt;&lt;span&gt;        Example::First =&amp;gt; {}
&lt;&#x2F;span&gt;&lt;span&gt;        Example::Second =&amp;gt; {}
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This snippet compiles successfully with the original version, but is affected by the breaking change in the new version:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust_errors&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust_errors &quot;&gt;&lt;code class=&quot;language-rust_errors&quot; data-lang=&quot;rust_errors&quot;&gt;&lt;span&gt;error[E0004]: non-exhaustive patterns: `Example::Third` not covered
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; src&#x2F;lib.rs:4:11
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;4  |     match value {
&lt;&#x2F;span&gt;&lt;span&gt;   |           ^^^^^ pattern `Example::Third` not covered
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;handling-the-doc-hidden-attribute&quot;&gt;Handling the &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; attribute&lt;&#x2F;h3&gt;
&lt;p&gt;In the code above, what if the &lt;code&gt;Example&lt;&#x2F;code&gt; enum was marked &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt;?
Items marked with this attribute don&#x27;t appear in the documentation of the crate&#x27;s public API, but are still accessible outside the crate.
This can be useful, for example, in crates that expose macros: the macros&#x27; internal implementation details are usually not themselves a stable public API, even though they must be public for the macros to work.
&lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; items therefore have reduced semver obligations: if our &lt;code&gt;Example&lt;&#x2F;code&gt; enum above was &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt;, adding a new variant would not have violated semver.&lt;label for=&quot;sn-reduced-not-none&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-reduced-not-none&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Interestingly, &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; items still &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;120#issuecomment-1496766897&quot;&gt;have &lt;em&gt;some&lt;&#x2F;em&gt; semver obligations&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;While &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;120#issuecomment-1496766897&quot;&gt;we&#x27;ve done some work on correctly handling &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, today&#x27;s version of &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; still has a false-positive here.&lt;label for=&quot;sn-fixing-doc-hidden-false-positives&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-fixing-doc-hidden-false-positives&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Thanks to this survey, we saw that &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; is by far the most common source of false-positives in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;. We are prioritizing shipping a fix here.&lt;&#x2F;span&gt;

A witness wouldn&#x27;t detect this as false-positive, either — it would &lt;em&gt;also&lt;&#x2F;em&gt; claim a violation.&lt;&#x2F;p&gt;
&lt;p&gt;We discarded over 6000 such false-positives!
We used a combination of automated and manual triage, ensuring that flagged items are neither directly hidden nor indirectly hidden via &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; on a containing module.&lt;&#x2F;p&gt;
&lt;p&gt;Our automated triage process relied on rustdoc&#x27;s JSON output format.
It detected hidden items by finding items that are emitted only when rustdoc is passed the nightly-only &lt;code&gt;--document-hidden-items&lt;&#x2F;code&gt; flag.&lt;&#x2F;p&gt;
&lt;p&gt;We followed this up by manually inspecting the source code of any items that were not eliminated as hidden via automated means.
This step protected our results against possible false-negatives caused by bugs in our automated script, in rustdoc or its JSON backend, or in the nightly-only rustdoc flag we used.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;non-exhaustiveness-prior-to-non-exhaustive&quot;&gt;Non-exhaustiveness prior to &lt;code&gt;#[non_exhaustive]&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;These days, it&#x27;s easy to forget that &lt;code&gt;#[non_exhaustive]&lt;&#x2F;code&gt; is a fairly recent addition — it was only stabilized &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2019&#x2F;12&#x2F;19&#x2F;Rust-1.40.0.html&quot;&gt;in Rust 1.40&lt;&#x2F;a&gt;, released in late December 2019.
Our analysis covers releases made from 2017 onward, covering 3 years in which &lt;code&gt;#[non_exhaustive]&lt;&#x2F;code&gt; &lt;em&gt;did not exist&lt;&#x2F;em&gt; in the Rust language.
In 2023, we expect that non-exhaustive types are marked &lt;code&gt;#[non_exhaustive]&lt;&#x2F;code&gt;, and additions to exhaustive types are a clear-cut major breaking change.
It seems unfair to apply the same standard to code released in 2017–2019.&lt;&#x2F;p&gt;
&lt;p&gt;Semver is about &lt;em&gt;communicating expectations with users&lt;&#x2F;em&gt;.
Prior to the introduction of the &lt;code&gt;#[non_exhaustive]&lt;&#x2F;code&gt; attribute, maintainers noted non-exhaustiveness in doc comments or via enum variants with names like &lt;code&gt;__Nonexhaustive&lt;&#x2F;code&gt;.
As these were the community-accepted ways of indicating non-exhaustiveness at the time, that is the standard to which we held crates in our analysis.
We manually triaged exhaustiveness violations with those kinds of documented non-exhaustiveness.&lt;label for=&quot;sn-changing-semver-standards&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-changing-semver-standards&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;This is an example of how the rules of semver &lt;em&gt;change over time&lt;&#x2F;em&gt; as a function of community expectations. In 2018, Rustaceans might have expected an enum to have its non-exhaustiveness communicated via a doc comment or a &lt;code&gt;__Nonexhaustive&lt;&#x2F;code&gt; variant. In 2023, we expect that non-exhaustive enums have the &lt;code&gt;#[non_exhaustive]&lt;&#x2F;code&gt; attribute — if the attribute isn&#x27;t set, we probably wouldn&#x27;t look for exhaustiveness information in the enum&#x27;s doc comment. Then consider the act of adding a variant to an enum &lt;em&gt;only&lt;&#x2F;em&gt; specified as non-exhaustive in a doc comment: that&#x27;s a major breaking change in 2023, but not in 2018.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;h3 id=&quot;consulting-maintainers&quot;&gt;Consulting maintainers&lt;&#x2F;h3&gt;
&lt;p&gt;Having verified our results via both automated and manual means, we decided to add one last check: we privately reached out to several maintainers of affected crates and discussed our findings with them.&lt;&#x2F;p&gt;
&lt;p&gt;In all cases, those maintainers confirmed our findings as correct.&lt;&#x2F;p&gt;
&lt;p&gt;In most cases, the maintainers stated the semver violations were novel, and not previously discovered nor reported anywhere to their knowledge.&lt;&#x2F;p&gt;
&lt;p&gt;In a tiny number of cases, maintainers reported making a semver-breaking change on purpose.
In one example, a part of a library was unintentionally made public in one release and that change was rolled back in the subsequent release, which is technically a removal of public API.&lt;&#x2F;p&gt;
&lt;p&gt;Such situations are why &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; aims to aid and inform maintainers, not take away their power to decide what&#x27;s best for their crate.
We consider semver-checking akin to the &lt;code&gt;cargo publish&lt;&#x2F;code&gt; check about uncommitted changes: inform the user about the findings, but allow them to explicitly opt into proceeding if they are confident that&#x27;s the right thing to do.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;this-is-only-a-fraction-of-all-semver-violations&quot;&gt;This is only a fraction of all semver violations&lt;&#x2F;h2&gt;
&lt;p&gt;While this work found many real-world semver violations, our current setup could only hope to detect a fraction of all such issues.&lt;&#x2F;p&gt;
&lt;p&gt;There are good reasons to believe there are many more semver issues still to be discovered:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is currently able to detect &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks#will-cargo-semver-checks-catch-every-semver-violation&quot;&gt;only a subset of semver violations&lt;&#x2F;a&gt;. More lints are added in every new release, so repeating this analysis in the future is likely to find more semver violations in the same crate releases.&lt;&#x2F;li&gt;
&lt;li&gt;We only counted semver violations for which we were able to construct a witness. In some cases, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; reported violations in code that relied on complex uses of generics where our witness-generator failed to produce a working witness. We consider such cases &lt;em&gt;inconclusive&lt;&#x2F;em&gt;, and believe that re-analyzing our dataset with more sophisticated witness generation may confirm more semver violations among these inconclusive cases.&lt;&#x2F;li&gt;
&lt;li&gt;Scanning the top crates likely makes our analysis heavily biased toward Rust code written by highly experienced maintainers. We believe that analyzing a broader set of crates is likely to produce a more-than-linear increase in discovered semver violations, since many ways to accidentally break semver would likely be non-obvious to many Rustaceans.&lt;&#x2F;li&gt;
&lt;li&gt;We semver-checked only the crates&#x27; default features. Crate features produce a combinatorial increase in a crate&#x27;s API surface area, so it&#x27;s likely that checking more feature combinations would find evidence of more semver issues.&lt;label for=&quot;sn-default-features-only&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-default-features-only&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;We only checked default features to avoid compilation failures due to platform-specific code tucked behind feature flags. Otherwise, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; by default &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks#what-features-does-cargo-semver-checks-enable-in-the-tested-crates&quot;&gt;checks all crate features except ones with names commonly used to indicate unstable or internal-only code&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;just-scratching-the-surface-of-our-work&quot;&gt;Just scratching the surface of our work&lt;&#x2F;h2&gt;
&lt;p&gt;This case study summarizes several engineer-years&#x27; worth of work done by five people.
It shows that &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; can discover semver violations in real-world Rust code, and is therefore effective in helping today&#x27;s maintainers avoid semver violations in their new releases.&lt;&#x2F;p&gt;
&lt;p&gt;But this is just a slice of what we built and discovered.
We didn&#x27;t get to talk about many other interesting topics, like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;how witness-generation works and how it might one day become part of &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; itself,&lt;&#x2F;li&gt;
&lt;li&gt;how &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; items sometimes have semver obligations after all,&lt;&#x2F;li&gt;
&lt;li&gt;how &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; can also be used to discover crates whose &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;features.html?highlight=additive#feature-unification&quot;&gt;features are not additive&lt;&#x2F;a&gt;, or&lt;&#x2F;li&gt;
&lt;li&gt;all the &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; bugs we discovered and fixed as a result of proactively scanning such a large number of crates.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you are curious to learn more, we have a few resources for you to check out!&lt;&#x2F;p&gt;
&lt;p&gt;The work described in this post was part of the bachelors&#x27; thesis project for &lt;a href=&quot;https:&#x2F;&#x2F;tonowak.com&#x2F;&quot;&gt;Tomasz Nowak&lt;&#x2F;a&gt;, Bartosz Smolarczyk, Michał Staniewski, and Mieszko Grodzicki.
Their thesis is &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2308.14623&quot;&gt;available here&lt;&#x2F;a&gt;, and contains many more details that we couldn&#x27;t fit here.&lt;&#x2F;p&gt;
&lt;p&gt;More information on &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is available on its &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&quot;&gt;GitHub page&lt;&#x2F;a&gt;.
It&#x27;s safe to assume that the vast majority of bug reports opened by Tomasz, Bartosz, Michał, Mieszko, or Predrag in the last year were discovered as a result of the semver survey described in this post.&lt;&#x2F;p&gt;
&lt;p&gt;Various nuances of semver in Rust &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;tags&#x2F;semver&#x2F;&quot;&gt;have already been covered on this blog&lt;&#x2F;a&gt;, and more posts on the subject are sure to follow.
You can subscribe to this blog &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;atom.xml&quot;&gt;via RSS&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;subscribe&#x2F;&quot;&gt;via email&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you maintain Rust crates, are you using &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; already? Why, or why not?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Discuss on &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;16cj1mo&#x2F;semver_violations_are_common_better_tooling_is&#x2F;&quot;&gt;r&#x2F;rust&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;lobste.rs&#x2F;s&#x2F;lsvmkq&#x2F;semver_violations_are_common_better&quot;&gt;lobste.rs&lt;&#x2F;a&gt;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;tim.mcnamara.nz&#x2F;&quot;&gt;Tim McNamara&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.lpalmieri.com&#x2F;&quot;&gt;Luca Palmieri&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;steveklabnik.com&#x2F;&quot;&gt;Steve Klabnik&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oli-obk&quot;&gt;oli-obk&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;weihanglo&quot;&gt;weihanglo&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;epage&quot;&gt;Ed Page&lt;&#x2F;a&gt; for their feedback on drafts of this post. All mistakes belong to the post authors alone.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Breaking semver in Rust by adding a private type, or by adding an import</title>
        <published>2023-05-08T00:00:00+00:00</published>
        <updated>2023-05-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/breaking-semver-in-rust-by-adding-private-type-or-import/"/>
        <id>https://predr.ag/blog/breaking-semver-in-rust-by-adding-private-type-or-import/</id>
        
        <summary type="html">&lt;p&gt;A few days ago, I started polls on &lt;a href=&quot;https:&#x2F;&#x2F;hachyderm.io&#x2F;@predrag&#x2F;110307228646682326&quot;&gt;Mastodon&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PredragGruevski&#x2F;status&#x2F;1653895888048214016&quot;&gt;Twitter&lt;&#x2F;a&gt; whether adding a new private type, or an import, can ever be a major breaking change. The consensus was that this should be impossible.&lt;&#x2F;p&gt;
&lt;p&gt;I agree with that. It &lt;em&gt;should&lt;&#x2F;em&gt; be impossible.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve discovered a way to cause a previously-public type or function to disappear from a crate&#x27;s public API by making innocuous-seeming changes like adding a private type or adding an import, etc.
It is not a hypothetical problem, either — I&#x27;ve found at least one real-world Rust project that has been affected by it.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>A definitive guide to sealed traits in Rust</title>
        <published>2023-04-05T00:00:00+00:00</published>
        <updated>2023-04-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/definitive-guide-to-sealed-traits-in-rust/"/>
        <id>https://predr.ag/blog/definitive-guide-to-sealed-traits-in-rust/</id>
        
        <summary type="html">&lt;p&gt;For the longest time, I thought that &quot;sealed trait&quot; in Rust was a singular concept implementable in one specific way. To prevent downstream crates from implementing your traits, you make the traits sealed — done, end of story. &lt;strong&gt;I was wrong!&lt;&#x2F;strong&gt; &lt;a href=&quot;https:&#x2F;&#x2F;hachyderm.io&#x2F;@epage&#x2F;109820270237801122&quot;&gt;It turns out there are multiple ways to seal traits&lt;&#x2F;a&gt;, forming a pleasant spectrum of options:&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Mediocrity can be a sign of excellence, and other stories</title>
        <published>2023-04-01T00:00:00+00:00</published>
        <updated>2023-04-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/mediocrity-can-be-a-sign-of-excellence/"/>
        <id>https://predr.ag/blog/mediocrity-can-be-a-sign-of-excellence/</id>
        
        <content type="html" xml:base="https://predr.ag/blog/mediocrity-can-be-a-sign-of-excellence/">&lt;p&gt;&lt;em&gt;Happy April 1st! This post is part of &lt;a href=&quot;https:&#x2F;&#x2F;aprilcools.club&#x2F;&quot;&gt;April Cools Club&lt;&#x2F;a&gt;: an effort to publish genuine posts on topics our usual audience would find unexpected. The tech content will be back soon!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Over the many years I spent heavily involved in intern and full-time recruiting at &lt;code&gt;$PREVIOUS_JOB&lt;&#x2F;code&gt;, multiple people have commented something to the effect of: &quot;How come Predrag always gets the best people?&quot;&lt;&#x2F;p&gt;
&lt;p&gt;This post is a series of vignettes showing three of the &lt;em&gt;less-obvious&lt;&#x2F;em&gt; ideas that gave us an edge,&lt;!-- more --&gt; despite being a startup of ~100ish people that was far from a household name.&lt;&#x2F;p&gt;
&lt;figure&gt;
    
    
    

    
    
    

    
    
    

    
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;baseball_made_from_cash_dalle.acf3a4bc0855f9ac.png&quot; alt=&quot;Moneyball: a baseball made from a currency collage, with a large dollar sign inked on the side facing the camera.&quot;&gt;
    &lt;label for=&quot;mn-lead&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;mn-lead&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
    &lt;span class=&quot;marginnote figcaption&quot;&gt;
        Over twenty years ago, the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Moneyball&quot;&gt;Moneyball&lt;&#x2F;a&gt; concept changed sports forever. Surprisingly, 20 years later, tech hiring is still reluctant to adopt many of the same principles, so early adopters of Moneyball-inspired hiring practices get to reap the rewards. Here&#x27;s some of what I learned over the years.
        Source:
        DALL·E 2
    &lt;&#x2F;span&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;But why should you pay attention to me about any of this?&lt;&#x2F;p&gt;
&lt;p&gt;While building compilers and distributed query infrastructure,&lt;label for=&quot;sn-credibility&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-credibility&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Don&#x27;t take my word for it: a representative portion of this work is public &lt;a href=&quot;https:&#x2F;&#x2F;blog.kensho.com&#x2F;compiled-graphql-as-a-database-query-language-72e106844282&quot;&gt;via&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;blog.kensho.com&#x2F;database-agnostic-querying-is-unavoidable-at-scale-18895f6df2f0&quot;&gt;blog&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;blog.kensho.com&#x2F;making-large-scale-data-systems-usable-with-schema-renaming-bd6b13e8ab7&quot;&gt;posts&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kensho-technologies&#x2F;graphql-compiler&quot;&gt;on GitHub&lt;&#x2F;a&gt;. The GitHub &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kensho-technologies&#x2F;graphql-compiler&#x2F;graphs&#x2F;contributors&quot;&gt;contributor data&lt;&#x2F;a&gt; can substantiate the below claims.&lt;&#x2F;span&gt;
 my team had:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;freshmen&lt;label for=&quot;sn-terminology&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-terminology&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;In the U.S. education system, college is usually a 4-year program. Depending on their year, students are called: freshmen, sophomores, juniors, and seniors.&lt;&#x2F;span&gt;
 interns who hadn&#x27;t yet taken any systems classes&lt;label for=&quot;sn-systems-class&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-systems-class&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Classes on compilers, databases, distributed systems, OS, networking, etc.&lt;&#x2F;span&gt;
 yet, but were pulling their weight and contributing as if senior SWEs;&lt;&#x2F;li&gt;
&lt;li&gt;a sophomore intern who over the course of &lt;em&gt;two weeks&lt;&#x2F;em&gt; designed and prototyped &lt;a href=&quot;https:&#x2F;&#x2F;blog.kensho.com&#x2F;database-agnostic-querying-is-unavoidable-at-scale-18895f6df2f0&quot;&gt;our cross-database query execution system&lt;&#x2F;a&gt;, as easily as if it were a warmup task;&lt;&#x2F;li&gt;
&lt;li&gt;a bunch of barely-20-year-olds (some of them still in college!) contributing at staff+ levels;&lt;&#x2F;li&gt;
&lt;li&gt;overall, among the best diversity&lt;label for=&quot;sn-diversity-axes&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-diversity-axes&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Across multiple axes, not just gender balance.&lt;&#x2F;span&gt;
 of all teams across the company — and multiple times better than the industry-wide average;&lt;label for=&quot;sn-industry-average-diversity&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-industry-average-diversity&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Comparing to industry-wide diversity numbers is a low bar, I know.&lt;&#x2F;span&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;zero&lt;&#x2F;em&gt; team attrition to other companies — we lost a total of three people over ~five years, all to academia.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;moneyball-hiring&quot;&gt;Moneyball hiring&lt;&#x2F;h2&gt;
&lt;p&gt;Just like in pro sports, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Moneyball&quot;&gt;Moneyball&lt;&#x2F;a&gt; strategies can work in tech hiring too: know the market and your competitors, find which traits they under- and over-value in candidates, and hire the top people they missed.&lt;&#x2F;p&gt;
&lt;p&gt;For example, many companies have rules that explicitly exclude freshmen&lt;label for=&quot;sn-more-extreme&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-more-extreme&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Or sometimes even a more extreme version, a juniors-only interns policy that only selects people who can convert to a full-time role after the end of the following year.&lt;&#x2F;span&gt;
 for their internship programs.&lt;&#x2F;p&gt;
&lt;p&gt;This caused a funny situation when I was a freshman in college: a top tech company refused to even interview me for their internship program since &quot;they didn&#x27;t hire freshmen,&quot; and then two weeks later offered me an interview for a &lt;em&gt;full-time&lt;&#x2F;em&gt; position on the basis of my results in a programming competition they had sponsored 😆&lt;label for=&quot;sn-competition-profile&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-competition-profile&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;My profile on the competition site didn&#x27;t list my age or the fact I was a freshman at the time!&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;These factors leave freshmen and sophomores systematically undervalued as interns, while overvaluing juniors (for non-American readers, third-year students in a four-year program).&lt;&#x2F;p&gt;
&lt;p&gt;One year, a surprisingly large fraction of our &quot;campus recruiting competitors&quot; imposed new no-freshmen and&#x2F;or juniors-only policies for their internship programs.
In response, at all college career fairs I attended, I purposefully sought out and connected with the most awesome freshmen and sophomores I could find! They were being turned away by most other companies, so that was one of our best-ever recruiting years!&lt;&#x2F;p&gt;
&lt;p&gt;We hired many exceptional interns that year, including multiple medallists from worldwide math and programming competitions.
They were already amazing engineers &lt;em&gt;despite&lt;&#x2F;em&gt; being only freshmen or sophomores.
They only got better from there!&lt;&#x2F;p&gt;
&lt;p&gt;This move also paid dividends for years to come:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;our interns referred their (similarly-exceptional) friends;&lt;&#x2F;li&gt;
&lt;li&gt;many of them came back in full-time roles, and&lt;&#x2F;li&gt;
&lt;li&gt;our company became much more recognizable on college campuses, because &lt;em&gt;our interns still had 2-3 more years left on campus&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;years-of-experience-vs-experience-in-those-years&quot;&gt;&quot;Years of experience&quot; vs &quot;experience in those years&quot;&lt;&#x2F;h2&gt;
&lt;p&gt;Most companies and hiring managers put a lot of weight on candidates&#x27; years of work experience.
It&#x27;s especially a large factor when considering levelling and compensation.&lt;&#x2F;p&gt;
&lt;p&gt;But years of experience is a weird metric: I&#x27;ll explain via a personal anecdote.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve always loved playing hockey in all its forms.
In 2011, I joined an ice hockey team and I&#x27;ve been playing regularly ever since.
I now have 12 years of experience in ice hockey.&lt;&#x2F;p&gt;
&lt;p&gt;And yet, somehow I haven&#x27;t managed to make it onto my city&#x27;s NHL club yet! What gives?!
With 12 years of experience, by now surely I should have become a Senior Hockey Player on their team, if not even Staff+?&lt;&#x2F;p&gt;
&lt;p&gt;Almost as if the number of years by itself is the wrong metric...&lt;&#x2F;p&gt;
&lt;p&gt;Instead of &quot;number of years&quot; or &quot;success per se,&quot; measure the &quot;density of success.&quot;
Some candidates have experience beyond their years, and many candidates have remarkably little experience despite their years.&lt;&#x2F;p&gt;
&lt;p&gt;A related idea is &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;gtallen1187&#x2F;e83ed02eac6cc8d7e185&quot;&gt;&quot;slope, not y-intercept&quot;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mediocrity-can-be-a-sign-of-excellence&quot;&gt;Mediocrity can be a sign of excellence&lt;&#x2F;h2&gt;
&lt;p&gt;A huge barrier for diversity in tech hiring is using an incorrect frame of reference when evaluating accomplishments.&lt;&#x2F;p&gt;
&lt;p&gt;Let me explain by way of example: I&#x27;ll describe the backgrounds of two people, and you tell me which person seems more promising.
Assume both people are the same age — say, college freshmen — so we don&#x27;t have to worry about normalizing for density of success purposes.&lt;&#x2F;p&gt;
&lt;p&gt;Person A&#x27;s extracurriculars include math and programming competitions, where they posted some of the best results in their country&#x27;s history.
Not only did they win medals on the worldwide stage, but in doing so they broke a 6-year medal dry spell for their country.
They also won their country&#x27;s first-ever gold medals in a few events, despite their country not having a well-developed system of training camps and mentors to prepare students for such competitions.
In fact, Person A needed less than 6 months of training to go from zero to eclipsing the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Elo_rating_system&quot;&gt;Elo ratings&lt;&#x2F;a&gt; of their &lt;em&gt;mentors&lt;&#x2F;em&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Person B also did math and programming competitions. They worked hard and showed flashes of promise, but their outcomes were mediocre: predominantly ~50-70%th percentile in their worldwide age group.&lt;label for=&quot;sn-percentiles&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-percentiles&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Due to a quirk of these competitions, this percentile range is usually awarded a bronze medal.&lt;&#x2F;span&gt;
 In fact, those percentiles are almost certainly an overestimate: all countries send a fixed number of students to the competition, so qualifying for a large country&#x27;s team requires much more skill than qualifying in a smaller country. Person B comes from a tiny country, and their demonstrated skill level would without a doubt have been insufficient to qualify for the same competitions if they hailed from a larger country instead. Thousands of their worldwide peers are more accomplished than Person B.&lt;&#x2F;p&gt;
&lt;p&gt;Is there even a shred of doubt that Person A is more promising than Person B?&lt;&#x2F;p&gt;
&lt;p&gt;Except ... they are both the same person! They&#x27;re both &lt;strong&gt;me!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;What happened here?
The answer is in the framing.&lt;&#x2F;p&gt;
&lt;p&gt;Person A is presented in context and relative to their &lt;em&gt;comparable&lt;&#x2F;em&gt; peers.
Person B is presented sans context, and is graded on the same fixed scale with everyone else regardless of initial conditions.&lt;label for=&quot;sn-privilege&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-privilege&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;One might have also used the word &quot;privilege&quot; here. I intentionally did not use that word, so as not to give the false impression that I feel unprivileged. Even though I&#x27;m an immigrant in a foreign country, as a cis white male in tech with a degree from a top university, I have way more privilege than most.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Person A is impressive in a &lt;em&gt;relative&lt;&#x2F;em&gt; sense: they over-achieved compared to the expectations arising from their situation.
Person B is &quot;meh&quot; because in an &lt;em&gt;absolute&lt;&#x2F;em&gt; sense, their achievements aren&#x27;t notable at all — and would actually be considered a big failure for most countries with well-developed training systems.
Person B&#x27;s mediocrity is quite impressive in the frame of Person A.&lt;label for=&quot;sn-first-robotics&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-first-robotics&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;For another example, I recommend watching &lt;a href=&quot;https:&#x2F;&#x2F;disneyplusoriginals.disney.com&#x2F;movie&#x2F;more-than-robots&quot;&gt;&quot;More Than Robots&quot;&lt;&#x2F;a&gt;, a documentary that follows multiple teams competing in the FIRST Robotics competition. One of the teams has to build their robot in a school hallway with nothing more advanced than drills and screwdrivers. Another team&#x27;s workshop has a few million dollars&#x27; worth of advanced tools and machinery, plus a contingent of professional engineers to mentor them. The appropriate definitions of &quot;success&quot; for these two teams are radically different.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Many organizations fall for this fallacy. &quot;Why would you ever hire a worse candidate,&quot; they might say,&lt;label for=&quot;sn-slope-not-intercept&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-slope-not-intercept&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matt-rickard.com&#x2F;hire-slope-not-intercept&quot;&gt;Slope, not y-intercept&lt;&#x2F;a&gt;, as just one of many possible and perfectly logical reasons.&lt;&#x2F;span&gt;
 completely failing to understand the candidates&#x27; broader context. In fact, many organizations are actively geared &lt;em&gt;against&lt;&#x2F;em&gt; understanding. They often won&#x27;t even &lt;em&gt;interview&lt;&#x2F;em&gt; such candidates, let alone hire them.&lt;label for=&quot;sn-hidden-figures&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-hidden-figures&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;The book &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hidden_Figures_(book)&quot;&gt;&quot;Hidden Figures&quot;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hidden_Figures&quot;&gt;the movie based on it&lt;&#x2F;a&gt; both show visceral depictions of real-world situations like this. Highly, highly recommended.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;In Moneyball terms, people that succeed &lt;em&gt;in spite of&lt;&#x2F;em&gt; their circumstances are massively, shockingly undervalued.
They&#x27;ve already outpaced their comparable peers — just imagine what they could do if for once they got a proper support system that sets them up for success!
A related idea is &lt;a href=&quot;https:&#x2F;&#x2F;www.merriam-webster.com&#x2F;words-at-play&#x2F;equality-vs-equity-difference&quot;&gt;&quot;equality vs equity&quot;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You don&#x27;t have to look far to find people succeeding &lt;em&gt;in spite of&lt;&#x2F;em&gt; their circumstances. The worse the overall industry does on this axis, the more likely you are to find underrated people in the groups that industry is biased against. You&#x27;ve heard of gender or racial discrimination, but how about: college dropouts, people with disabilities, &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=H7oZuz0bc1w&quot;&gt;folks with criminal records&lt;&#x2F;a&gt;? Even people that speak English with a foreign accent get measurably worse outcomes in tech company interviews.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m only able to write this today because MIT&#x27;s admissions system might work similarly to what I&#x27;ve described here.
They could have admitted a dozen people who had won better prizes at all the same competitions I did.
Instead, they admitted &lt;em&gt;me&lt;&#x2F;em&gt;: a fairly mediocre nobody from a tiny country — the big fish from a pond so small that most people can&#x27;t even find it on the world map.&lt;&#x2F;p&gt;
&lt;p&gt;Going to MIT was like &lt;a href=&quot;https:&#x2F;&#x2F;mitadmissions.org&#x2F;help&#x2F;faq&#x2F;drinking-from-a-firehose&#x2F;&quot;&gt;drinking from a firehose&lt;&#x2F;a&gt;: it will knock you over no matter how prepared you thought you were.
I was &lt;em&gt;used to&lt;&#x2F;em&gt; being knocked over.
So I came back up, again and again.
New to me was the number of opportunities available everywhere — so, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Wait_for_It_(song)&quot;&gt;much like Hamilton, I didn&#x27;t hesitate nor exhibit restraint&lt;&#x2F;a&gt; and instead tried to seize every opportunity like it was my last.&lt;&#x2F;p&gt;
&lt;p&gt;It appears to have worked.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Tech hiring is broken.&lt;&#x2F;p&gt;
&lt;p&gt;Many companies just adopt industry-standard hiring processes and call it a day.
But those industry-standard processes lead to the usual industry-standard problems.&lt;&#x2F;p&gt;
&lt;p&gt;Raise your hand if you&#x27;ve heard &quot;we can&#x27;t find good people&quot; or &quot;we need more people with experience&quot; or &quot;nobody wants to work anymore.&quot;
Yeah, me too.
We have to do better.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re a hiring manager, hopefully this post has given you some ideas on how to turn better hiring into a competitive advantage.
If you&#x27;d like more personalized help with your company&#x27;s hiring processes, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PredragGruevski&quot;&gt;please reach out&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re a job-seeker, you&#x27;ve probably already experienced how random and nonsensical the hiring system can be.
You are not alone!
Just like there&#x27;s a broad spectrum of candidates, there&#x27;s also a broad spectrum of companies!
The best ones are a lot better than the worst ones, and knowing which is which is key.
Ask your friends, your former coworkers, folks you meet at meetups and conferences.&lt;&#x2F;p&gt;
&lt;p&gt;Then, pay it forward.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;hegdenu.net&#x2F;&quot;&gt;Hayden Stainsby&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;saul.pw&#x2F;&quot;&gt;Saul Pwanson&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;hillelwayne.com&#x2F;post&#x2F;weird-things-you-can-buy&quot;&gt;Hillel Wayne&lt;&#x2F;a&gt; for feedback on drafts of this post.&lt;&#x2F;em&gt;
&lt;em&gt;All mistakes are mine alone.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Re-exporting an enum with a type alias is breaking, but not major</title>
        <published>2023-03-06T00:00:00+00:00</published>
        <updated>2023-03-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/re-exporting-enum-with-type-alias-breaking-change-not-major/"/>
        <id>https://predr.ag/blog/re-exporting-enum-with-type-alias-breaking-change-not-major/</id>
        
        <summary type="html">&lt;p&gt;We&#x27;ve already explored some of the dark corners of Rust semantic versioning on this blog:&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Speeding up Rust semver-checking by over 2000x</title>
        <published>2023-02-07T00:00:00+00:00</published>
        <updated>2023-02-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/speeding-up-rust-semver-checking-by-over-2000x/"/>
        <id>https://predr.ag/blog/speeding-up-rust-semver-checking-by-over-2000x/</id>
        
        <summary type="html">&lt;p&gt;&lt;em&gt;This post describes work in progress: how &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;cargo-semver-checks&quot;&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; will benefit from the upcoming query optimization API in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall query engine&lt;&#x2F;a&gt;. Read on to learn how a modern linter works under the hood, and how ideas from the world of databases can improve its performance.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Moving and re-exporting a Rust type can be a major breaking change</title>
        <published>2023-01-31T00:00:00+00:00</published>
        <updated>2023-01-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/moving-and-reexporting-rust-type-can-be-major-breaking-change/"/>
        <id>https://predr.ag/blog/moving-and-reexporting-rust-type-can-be-major-breaking-change/</id>
        
        <content type="html" xml:base="https://predr.ag/blog/moving-and-reexporting-rust-type-can-be-major-breaking-change/">&lt;p&gt;I recently embarked on a quest: revamp the &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; import-handling system so that moving and re-exporting an item stops being incorrectly flagged as a major breaking change. This is how crate authors can reorganize or rename items: just re-export the items in the original location under their original names, and downstream users shouldn&#x27;t notice.&lt;&#x2F;p&gt;
&lt;p&gt;Sounds simple, right?&lt;&#x2F;p&gt;
&lt;p&gt;I thought so too.&lt;&#x2F;p&gt;
&lt;p&gt;Then I started coming up with &lt;a href=&quot;https:&#x2F;&#x2F;hachyderm.io&#x2F;@predrag&#x2F;109700055807297291&quot;&gt;strange edge cases&lt;&#x2F;a&gt;, each more cursed than the last. But &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; has to handle them correctly, cursed or not! So off I went down yet another Rust rabbit hole...&lt;&#x2F;p&gt;
&lt;p&gt;After a few weeks of adventuring, I have emerged, seemingly&lt;label for=&quot;sn-seemingly&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-seemingly&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Only time will tell, won&#x27;t it? It&#x27;s looking good so far, though I did &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall-rustdoc-adapter&#x2F;pull&#x2F;52&quot;&gt;originally miss at least one edge case&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
 victorious! Let me now regale you with some tales from my travels.&lt;label for=&quot;sn-travels&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-travels&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Although &#x27;travails&#x27; might be a more accurate word choice.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;h2 id=&quot;moving-and-re-exporting-an-item&quot;&gt;Moving and re-exporting an item&lt;&#x2F;h2&gt;
&lt;p&gt;Say we have a crate called &lt;code&gt;example&lt;&#x2F;code&gt; containing the following code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Foo {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rust modules can include other modules&#x27; items in their own API: they can use &lt;code&gt;pub use&lt;&#x2F;code&gt; to re-export the other module&#x27;s item. Our &lt;code&gt;example&lt;&#x2F;code&gt; crate&#x27;s users won&#x27;t notice if we do the following change:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span&gt;inner {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Foo {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Users of this crate can import this
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; as `example::Foo` just as before.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub use &lt;&#x2F;span&gt;&lt;span&gt;inner::Foo;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The re-export is allowed to rename the item:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span&gt;inner {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Renamed; used to be called `Foo`.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Bar {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Users of this crate can import this
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; as `example::Foo` just as before.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub use &lt;&#x2F;span&gt;&lt;span&gt;inner::Bar as Foo;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Re-exports can also use a &quot;glob&quot; pattern to select and re-export &lt;em&gt;all&lt;&#x2F;em&gt; public items in the target module:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span&gt;inner {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Foo {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Users of this crate can import
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; `example::Foo` just as before,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; because all public items in `inner`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; are selected for re-export.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub use &lt;&#x2F;span&gt;&lt;span&gt;inner::*;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So far so good! But now the fun begins...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-a-type-alias-to-re-export&quot;&gt;Using a type alias to re-export&lt;&#x2F;h2&gt;
&lt;p&gt;Rust&#x27;s &lt;code&gt;pub type&lt;&#x2F;code&gt; statement allows us to define a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;items&#x2F;type-aliases.html&quot;&gt;&lt;em&gt;type alias&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;, an &quot;equivalent name&quot; for some Rust type.&lt;&#x2F;p&gt;
&lt;p&gt;This isn&#x27;t the same thing as &lt;code&gt;pub use&lt;&#x2F;code&gt;, but in many cases&lt;label for=&quot;sn-foreshadowing&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-foreshadowing&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;&lt;em&gt;Ominous music starts...&lt;&#x2F;em&gt;&lt;&#x2F;span&gt;
 can be used equivalently to &lt;code&gt;pub use&lt;&#x2F;code&gt;.
For example, we could use a &lt;code&gt;pub type&lt;&#x2F;code&gt; to accomplish the same renaming that earlier used a &lt;code&gt;pub use&lt;&#x2F;code&gt; by doing the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span&gt;inner {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Renamed; used to be called `Foo`.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Bar {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Users of this crate can import this
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; as `example::Foo` just as before.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub type &lt;&#x2F;span&gt;&lt;span&gt;Foo = inner::Bar;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Many crates use &lt;code&gt;pub type&lt;&#x2F;code&gt; instead of &lt;code&gt;pub use&lt;&#x2F;code&gt; to re-export items.
Some crates actively encourage using &lt;code&gt;pub type&lt;&#x2F;code&gt; instead of &lt;code&gt;pub use&lt;&#x2F;code&gt;, for reasons that are out of scope here.
They produce valid Rust code, and &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; should support that code.&lt;&#x2F;p&gt;
&lt;p&gt;Using &lt;code&gt;pub type&lt;&#x2F;code&gt; as if it were a &lt;code&gt;pub use&lt;&#x2F;code&gt; is fine ... &lt;em&gt;most of the time&lt;&#x2F;em&gt;. But every so often, it&#x27;s a ✨ major breaking change! ✨&lt;&#x2F;p&gt;
&lt;h2 id=&quot;accidental-major-breaking-change-via-pub-type&quot;&gt;Accidental major breaking change via &lt;code&gt;pub type&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Say our original crate had defined &lt;code&gt;Foo&lt;&#x2F;code&gt; to be a unit struct instead of a plain struct:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Previously, `Foo` was defined
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; with curly braces like so:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; `pub struct Foo {}`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Foo;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We now make the same completely innocuous-seeming change as before:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span&gt;inner {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Renamed; used to be called `Foo`.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This one is also a unit struct:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; no curly braces this time.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Bar;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Is this `Foo` equivalent to the old one?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub type &lt;&#x2F;span&gt;&lt;span&gt;Foo = inner::Bar;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;💥 Oops! 💥 What happened?&lt;&#x2F;p&gt;
&lt;p&gt;The idiomatic way to construct a unit struct is to just name it: &lt;code&gt;let _ = Foo&lt;&#x2F;code&gt;. But that &lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2021&amp;amp;gist=887f6acb84a1ad60f8db80cf84fc26da&quot;&gt;doesn&#x27;t work&lt;&#x2F;a&gt; if &lt;code&gt;Foo&lt;&#x2F;code&gt; is a type alias to a unit struct!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0423]: expected value, found type alias `Foo`
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt; ... &amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  = note: can&amp;#39;t use a type alias as a constructor
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The same thing happens if &lt;code&gt;Foo&lt;&#x2F;code&gt; is a tuple struct: &lt;code&gt;Foo(42)&lt;&#x2F;code&gt; works fine on the struct itself but &lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2021&amp;amp;gist=6eae299dee41001d2c2c1ea7e83c1443&quot;&gt;doesn&#x27;t work on the type alias&lt;&#x2F;a&gt;.&lt;label for=&quot;sn-future-edition&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-future-edition&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;There&#x27;s an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;73191&quot;&gt;open issue&lt;&#x2F;a&gt; suggesting that in a future Rust edition, this kind of &lt;code&gt;pub type&lt;&#x2F;code&gt; may become completely equivalent to a &lt;code&gt;pub use&lt;&#x2F;code&gt;. In that case, this would no longer be a breaking change. Thanks to this &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;10q0o4t&#x2F;comment&#x2F;j6plmrr&#x2F;&quot;&gt;r&#x2F;rust comment&lt;&#x2F;a&gt; for the link!&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;This seems like exactly the sort of thing one would find right &lt;em&gt;after&lt;&#x2F;em&gt; publishing a new version, when some poor user opens an issue saying their build is now broken.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-cargo-semver-checks-handles-this&quot;&gt;How &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; handles this&lt;&#x2F;h2&gt;
&lt;p&gt;The immediate goal (achieved in v0.17) was to stop flagging re-exports as major breaking changes. In our philosophy, it&#x27;s better to &lt;em&gt;miss&lt;&#x2F;em&gt; a real semver-major change than to &lt;em&gt;falsely report&lt;&#x2F;em&gt; a breaking change. Nobody likes it when CI turns red due to &lt;em&gt;a tool being wrong&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Prior to 0.17, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; would simply miss many re-exports and would claim that the type had been entirely removed from the API. That lint was obviously not correct — not even in the case of a &lt;code&gt;pub type&lt;&#x2F;code&gt; of a unit or tuple struct as in the example above.&lt;&#x2F;p&gt;
&lt;p&gt;We plan to add &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;338&quot;&gt;a new lint&lt;&#x2F;a&gt; to catch this case and explain the specific problem in detail, since we expect most users would be quite surprised to see a major breaking change reported there.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Did you notice the major breaking change above? Probably not, right? You are not alone!&lt;&#x2F;p&gt;
&lt;p&gt;I only found it because &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;pull&#x2F;337#discussion_r1091341652&quot;&gt;someone pointed me in the correct general direction&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;tags&#x2F;semver&#x2F;&quot;&gt;Semver in Rust is hard to get right&lt;&#x2F;a&gt;, example number zillion and one, right here. This is why we use automated tools.&lt;&#x2F;p&gt;
&lt;p&gt;And I haven&#x27;t even gotten a chance to bring up any truly cursed Rust examples of re-exports yet.&lt;label for=&quot;sn-tests&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-tests&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;I wrote approximately 30 test crates while implementing this. Nearly all of them are more cursed than any code in this post. They are split between &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;pull&#x2F;330&quot;&gt;itself&lt;&#x2F;a&gt; and its &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall-rustdoc-adapter&#x2F;pull&#x2F;34&quot;&gt;dependency&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall-rustdoc-adapter&#x2F;pull&#x2F;52&quot;&gt;crate&lt;&#x2F;a&gt; &lt;code&gt;trustfall-rustdoc-adapter&lt;&#x2F;code&gt;, which allows &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; to &lt;a href=&quot;https:&#x2F;&#x2F;play.predr.ag&#x2F;rustdoc#?f=1&amp;amp;q=IyBJdGVtcyB3aGVyZSBsaW50cyB3ZXJlIGFsbG93ZWQuIE5vdCBhbGwgY3JhdGVzIGhhdmUgdGhlc2UsCiMgdHJ5IG9uZSBvZjogYW55aG93LCBjbGFwLCBodHRwLCBodHRwYXJzZSwgaHlwZXIsIGl0ZXJ0b29scy4KcXVlcnkgewogIENyYXRlIHsKICAgIGl0ZW0gewogICAgICBuYW1lIEBvdXRwdXQKCiAgICAgIGF0dHJpYnV0ZSB7CiAgICAgICAgYXR0cjogdmFsdWUgQG91dHB1dAogICAgICAgICAgICAgICAgICAgIEBmaWx0ZXIob3A6ICJyZWdleCIsIHZhbHVlOiBbIiRwYXR0ZXJuIl0pCiAgICAgIH0KCiAgICAgIHNwYW4gewogICAgICAgIGZpbGVuYW1lIEBvdXRwdXQKICAgICAgICBiZWdpbl9saW5lIEBvdXRwdXQKICAgICAgfQogICAgfQogIH0KfQ%3D%3D&amp;amp;v=ewogICJwYXR0ZXJuIjogIiNcXFthbGxvd1xcKC4rXFwpXFxdIgp9&quot;&gt;declaratively query&lt;&#x2F;a&gt; rustdoc JSON via the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall query engine&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
 If my adventure into Rust re-exports is like Frodo&#x27;s journey in Lord of the Rings, then this post covers Frodo leaving his front yard.&lt;&#x2F;p&gt;
&lt;p&gt;If you liked this post, let me know! Then I&#x27;ll write up the rest of the trip to Mount Doom.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Some Rust breaking changes don&#x27;t require a major version</title>
        <published>2023-01-26T00:00:00+00:00</published>
        <updated>2023-01-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/some-rust-breaking-changes-do-not-require-major-version/"/>
        <id>https://predr.ag/blog/some-rust-breaking-changes-do-not-require-major-version/</id>
        
        <content type="html" xml:base="https://predr.ag/blog/some-rust-breaking-changes-do-not-require-major-version/">&lt;p&gt;I&#x27;ve &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;toward-fearless-cargo-update&#x2F;&quot;&gt;been saying&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;cargo-semver-checks-today-and-in-2023&#x2F;&quot;&gt;for a while now&lt;&#x2F;a&gt; that &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;turning-rust-struct-to-enum-is-not-always-breaking&#x2F;&quot;&gt;semantic versioning in Rust is tricky and full of unexpected edge cases&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;turning-rust-struct-to-enum-is-not-always-breaking&#x2F;&quot;&gt;My last post&lt;&#x2F;a&gt; mentioned that some Rust structs can be converted into enums without requiring a major version bump. It introduced a non-exhaustive struct called &lt;code&gt;Chameleon&lt;&#x2F;code&gt; that had no public fields, and claimed it was totally safe to turn it into an enum. But surely there was some sort of mistake, since syntax like &lt;code&gt;let Chameleon { .. } = value&lt;&#x2F;code&gt; would break if the &lt;code&gt;Chameleon&lt;&#x2F;code&gt; struct became an enum?&lt;&#x2F;p&gt;
&lt;p&gt;Yes, that statement would break.&lt;label for=&quot;sn-reddit&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-reddit&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Thanks to the alert readers on r&#x2F;rust and Mastodon that pointed it out and even provided Rust Playground links! &lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;10k0eox&#x2F;turning_a_rust_struct_into_an_enum_is_not_always&#x2F;j5t213a&#x2F;&quot;&gt;This discussion&lt;&#x2F;a&gt; was particularly nuanced and interesting.&lt;&#x2F;span&gt;
 And yet, this breaking change does not require a major version under Rust&#x27;s semantic versioning rules!&lt;&#x2F;p&gt;
&lt;p&gt;How could a breaking change not be a semver-major change? Let&#x27;s dig in and find out!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;all-major-changes-are-breaking-but-not-all-breaking-changes-are-major&quot;&gt;All major changes are breaking, but not all breaking changes are major&lt;&#x2F;h2&gt;
&lt;p&gt;There are two authoritative sources for semantic versioning in Rust: &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;semver.html&quot;&gt;the cargo semver reference&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;1105-api-evolution.html&quot;&gt;the API evolution RFC&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s what the API evolution RFC says about breaking changes:
&lt;blockquote class=&quot;own&quot; cite=&quot;https:&amp;#x2F;&amp;#x2F;rust-lang.github.io&amp;#x2F;rfcs&amp;#x2F;1105-api-evolution.html#detailed-design&quot;&gt;
  &lt;p&gt;
    What we will see is that in Rust today, almost any change is technically a breaking change. For example, given the way that globs currently work, adding any public item to a library can break its clients [...] But not all breaking changes are equal.&lt;br&gt;&lt;br&gt;So, this RFC proposes that all major changes are breaking, but not all breaking changes are major.
  &lt;&#x2F;p&gt;
  &lt;footer&gt;
    &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;rust-lang.github.io&amp;#x2F;rfcs&amp;#x2F;1105-api-evolution.html#detailed-design&quot; rel=&quot;noreferrer&quot;&gt;Rust API evolution RFC&lt;&#x2F;a&gt;
  &lt;&#x2F;footer&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;This feels ... strange. Running &lt;code&gt;cargo update&lt;&#x2F;code&gt; will by default update dependencies to the latest version in the same major version series, yet breaking changes are allowed without a new major version?&lt;&#x2F;p&gt;
&lt;p&gt;Ultimately, I feel&lt;label for=&quot;sn-non-official&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-non-official&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;I only recently got involved in Rust&#x27;s semver story by working on &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;, so I wasn&#x27;t part of the discussion or decisions in the API evolution RFC. This post is on my personal blog, not the Rust blog, so you&#x27;re reading my own opinion and interpretation.&lt;&#x2F;span&gt;
 this is a case of Rust choosing pragmatism — and in my opinion, getting it right. I&#x27;ll try to convince you of this in the rest of this post.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a look at two examples where breaking changes are &lt;em&gt;explicitly not&lt;&#x2F;em&gt; semver-major.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-a-new-public-item-is-technically-a-breaking-change&quot;&gt;Adding a new public item is technically a breaking change&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s pretend that in the below example, &lt;code&gt;first&lt;&#x2F;code&gt; and &lt;code&gt;second&lt;&#x2F;code&gt; are dependency crates of our library.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span&gt;first {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Foo;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span&gt;second {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; what happens if we uncomment this?
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; pub struct Foo;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;first::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;second::*;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Foo) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; do stuff with foo
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our library uses globs to import all public items from &lt;code&gt;first&lt;&#x2F;code&gt; and &lt;code&gt;second&lt;&#x2F;code&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2021&amp;amp;gist=1f87403328f8b811ce0572b032c8aa04&quot;&gt;This works fine!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now imagine &lt;code&gt;second&lt;&#x2F;code&gt; adds some new functionality: uncomment its &lt;code&gt;pub struct Foo&lt;&#x2F;code&gt; line. This is a purely additive change: &lt;code&gt;second&lt;&#x2F;code&gt; can still do everything it could previously do, and has gained some new functionality via the new type &lt;code&gt;Foo&lt;&#x2F;code&gt;. Purely additive API changes are semver-minor, right?&lt;&#x2F;p&gt;
&lt;p&gt;Try &lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2021&amp;amp;gist=1f87403328f8b811ce0572b032c8aa04&quot;&gt;compiling the code&lt;&#x2F;a&gt; after uncommenting that line, though. 💥 Oops! 💥&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0659]: `Foo` is ambiguous
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; src&#x2F;lib.rs:13:18
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;13 | fn process(foo: &amp;amp;Foo) {
&lt;&#x2F;span&gt;&lt;span&gt;   |                  ^^^ ambiguous name
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;   = note: ambiguous because of multiple glob imports of a name in the same module
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; ... fix suggestions omitted for brevity ... &amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code that depends on both &lt;code&gt;first&lt;&#x2F;code&gt; and &lt;code&gt;second&lt;&#x2F;code&gt; was broken by &lt;code&gt;second&lt;&#x2F;code&gt;&#x27;s purely additive change. Additive or not, it was &lt;em&gt;unquestionably&lt;&#x2F;em&gt; a breaking change.&lt;label for=&quot;sn-rfc-example-1&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-rfc-example-1&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;If you read the API evolution RFC&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;blob&#x2F;master&#x2F;text&#x2F;1105-api-evolution.md#minor-change-adding-new-public-items&quot;&gt;section on adding public items&lt;&#x2F;a&gt;, you may have noticed that its example of breaking code by adding a public item is much shorter than the one here — and also that in today&#x27;s Rust, that example isn&#x27;t broken anymore! This is because Rust adopted another recommendation from that RFC: if a locally-defined item&#x27;s name conflicts with a glob-imported name, the local item &quot;wins&quot; and shadows the other one instead of breaking with an ambiguous resolution error.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;If Rust semver demanded that all breaking changes must be semver-major, here are a few ways this could work:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Option 1: Nearly all API additions are semver-major. This obviously doesn&#x27;t seem right.&lt;&#x2F;li&gt;
&lt;li&gt;Option 2: Glob imports are &quot;last definition wins&quot; (like in Python), or &quot;first definition wins.&quot; I think this makes the problem worse, not better: now it&#x27;s even less obvious which &lt;code&gt;Foo&lt;&#x2F;code&gt; is getting imported, and we&#x27;re setting ourselves up for even worse compilation errors than otherwise.&lt;&#x2F;li&gt;
&lt;li&gt;Option 3: Glob imports are removed from the language, since they play a part in causing this problem. That also means no more &lt;code&gt;prelude&lt;&#x2F;code&gt; modules designed for glob-importing, harming the ergonomics of awesome crates like &lt;code&gt;pyo3&lt;&#x2F;code&gt; and &lt;code&gt;futures&lt;&#x2F;code&gt;. This isn&#x27;t good either.&lt;&#x2F;li&gt;
&lt;li&gt;Option 4: When we write code like &lt;code&gt;&amp;amp;Foo&lt;&#x2F;code&gt;, a tool (say, &lt;code&gt;cargo&lt;&#x2F;code&gt; or &lt;code&gt;rustc&lt;&#x2F;code&gt;) immediately replaces &lt;code&gt;Foo&lt;&#x2F;code&gt; with its fully-qualified name: in this case, &lt;code&gt;first::Foo&lt;&#x2F;code&gt;. Glob imports serve only to tell that tool where to look while rewriting our code. This solution has way too many moving pieces, and doesn&#x27;t feel particularly ergonomic, either.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;None of these options are good. Rust opted to go in another direction:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;adding public items is semver-&lt;em&gt;minor&lt;&#x2F;em&gt;;&lt;&#x2F;li&gt;
&lt;li&gt;glob imports are discouraged, to minimize (but not &lt;em&gt;prevent&lt;&#x2F;em&gt;) breakage, and&lt;&#x2F;li&gt;
&lt;li&gt;maintainers of crates with &lt;code&gt;prelude&lt;&#x2F;code&gt; modules are encouraged to be mindful of what they add to the prelude, again to minimize but not prevent breakage.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;A similar problem exists with trait methods: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;blob&#x2F;master&#x2F;text&#x2F;1105-api-evolution.md#minor-change-implementing-any-non-fundamental-trait&quot;&gt;implementing a public trait for any existing type is also technically breaking&lt;&#x2F;a&gt;, and is also &lt;em&gt;explicitly defined&lt;&#x2F;em&gt; as semver-minor &lt;em&gt;despite&lt;&#x2F;em&gt; the breakage.&lt;label for=&quot;sn-existing-trait&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-existing-trait&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;blob&#x2F;master&#x2F;text&#x2F;1105-api-evolution.md#minor-change-implementing-any-non-fundamental-trait&quot;&gt;RFC states that&lt;&#x2F;a&gt; the breakage occurs if the breakage-causing trait already existed prior to being implemented. But in the RFC&#x27;s example code, it&#x27;s actually sufficient for the trait to make its way into crate B&#x27;s scope. For example, crate B glob-importing of all of crate A&#x27;s public items would cause the same breakage even if the conflicting trait did not previously exist.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;h2 id=&quot;breakage-of-patterns-is-not-always-semver-major&quot;&gt;Breakage of patterns is not always semver-major&lt;&#x2F;h2&gt;
&lt;p&gt;Pattern-matching on structs is always allowed in Rust, even if the struct being matched has no visible fields: &lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2021&amp;amp;gist=5c8ad567eda2afde921b57769bc09c9b&quot;&gt;playground link&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; say this is in some other crate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span&gt;other {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Foo(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;other::Foo) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Foo&amp;#39;s field is not visible here!
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This `let` does nothing useful:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; - it can&amp;#39;t extract any fields, and
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; - can&amp;#39;t learn anything else about `value`.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; Foo { .. } = value;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Some kinds of changes to &lt;code&gt;Foo&lt;&#x2F;code&gt; can cause &lt;code&gt;let Foo { .. } = value;&lt;&#x2F;code&gt; to break. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;blob&#x2F;master&#x2F;text&#x2F;1105-api-evolution.md#minor-change-going-from-a-tuple-struct-with-all-private-fields-with-at-least-one-field-to-a-normal-struct-or-vice-versa&quot;&gt;The RFC is unambiguous here&lt;&#x2F;a&gt;: statements like &lt;code&gt;let Foo { .. } = value&lt;&#x2F;code&gt; serve no purpose other than to be broken if &lt;code&gt;Foo&lt;&#x2F;code&gt; changes, and its breakage is not sufficient to make this change semver-major.&lt;label for=&quot;sn-rfc-example-2&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-rfc-example-2&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Again, the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;blob&#x2F;master&#x2F;text&#x2F;1105-api-evolution.md#minor-change-going-from-a-tuple-struct-with-all-private-fields-with-at-least-one-field-to-a-normal-struct-or-vice-versa&quot;&gt;RFC&#x27;s example for this case&lt;&#x2F;a&gt; doesn&#x27;t quite work as written: Rust has evolved in the nearly 8 years since that RFC was written. But its point stands regardless.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;There are cases where the &lt;code&gt;Foo { .. }&lt;&#x2F;code&gt; pattern is useful to aid type inference, for example: &lt;code&gt;if let Some(x @ Foo { .. }) = x.downcast_ref()&lt;&#x2F;code&gt;.&lt;label for=&quot;sn-reddit-example&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-reddit-example&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;10k0eox&#x2F;comment&#x2F;j5t213a&#x2F;&quot;&gt;this r&#x2F;rust comment&lt;&#x2F;a&gt; for this excellent example!&lt;&#x2F;span&gt;
 However, those cases are specifically addressed in the RFC as well (original emphasis retained):
&lt;blockquote class=&quot;own&quot; cite=&quot;https:&amp;#x2F;&amp;#x2F;rust-lang.github.io&amp;#x2F;rfcs&amp;#x2F;1105-api-evolution.html#principles-of-the-policy&quot;&gt;
  &lt;p&gt;
    For example, changes that may require occasional type annotations or use of UFCS to disambiguate are not automatically &quot;major&quot; changes. [...] any breakage in a minor release must be very &quot;shallow&quot;: it must always be possible to locally fix the problem through some kind of disambiguation &lt;em&gt;that could have been done in advance&lt;&#x2F;em&gt; (by using more explicit forms) or other annotation (like disabling a lint).
  &lt;&#x2F;p&gt;
  &lt;footer&gt;
    &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;rust-lang.github.io&amp;#x2F;rfcs&amp;#x2F;1105-api-evolution.html#principles-of-the-policy&quot; rel=&quot;noreferrer&quot;&gt;Principles of the policy, Rust API evolution RFC&lt;&#x2F;a&gt;
  &lt;&#x2F;footer&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;This is why turning &lt;code&gt;Chameleon&lt;&#x2F;code&gt; from a struct into an enum &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;turning-rust-struct-to-enum-is-not-always-breaking&#x2F;&quot;&gt;in the last post&lt;&#x2F;a&gt; did not require a new major version:
the only breakage that could happen was in type inference or in a statement that did not serve any purpose.
Barring some kind of exceptional situation (e.g., potential for ecosystem-wide breakage, definitely not the case here), the API evolution RFC &lt;em&gt;explicitly&lt;&#x2F;em&gt; disqualifies both of those categories from triggering a semver-major change.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Before reading this post, did you know that not all breaking changes require a new major version under Rust&#x27;s semantic versioning principles?&lt;&#x2F;p&gt;
&lt;p&gt;Semver in Rust is hard for many reasons. There are a zillion strange ways to cause major breaking changes: &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;semver.html#struct-add-private-field-when-public&quot;&gt;example&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;semver.html#possibly-breaking-change-adding-any-inherent-items&quot;&gt;another example&lt;&#x2F;a&gt;. There&#x27;s even &quot;spooky action at a distance&quot; where &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;toward-fearless-cargo-update&#x2F;&quot;&gt;adding a field to a type can cause traits to silently stop being implemented for that type&lt;&#x2F;a&gt;. And as we saw here, not all breaking changes are semver-major!&lt;&#x2F;p&gt;
&lt;p&gt;As if to prove my point, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;317&quot;&gt;was recently broken&lt;&#x2F;a&gt; by a dependency crate&#x27;s semver-incompatible (and now &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;commands&#x2F;cargo-yank.html&quot;&gt;yanked&lt;&#x2F;a&gt;) release.&lt;label for=&quot;sn-locked&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-locked&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;This is why installing with &lt;code class=&quot;nobr&quot;&gt;cargo install --locked&lt;&#x2F;code&gt; is a good idea! Locked installs didn&#x27;t break.&lt;&#x2F;span&gt;
 Breaking semver is not shameful, and is not a sign of maintainers&#x27; carelessness, poor skill, or anything of the sort. It&#x27;s just another language ergonomics problem solvable by better tooling.&lt;&#x2F;p&gt;
&lt;p&gt;This is the raison d&#x27;être for &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Turning a Rust struct into an enum is not always a major breaking change</title>
        <published>2023-01-24T00:00:00+00:00</published>
        <updated>2023-01-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/turning-rust-struct-to-enum-is-not-always-breaking/"/>
        <id>https://predr.ag/blog/turning-rust-struct-to-enum-is-not-always-breaking/</id>
        
        <content type="html" xml:base="https://predr.ag/blog/turning-rust-struct-to-enum-is-not-always-breaking/">&lt;p&gt;&lt;em&gt;&lt;strong&gt;EDIT&lt;&#x2F;strong&gt;: The Rust &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;1105-api-evolution.html#detailed-design&quot;&gt;API evolution RFC&lt;&#x2F;a&gt; distinguishes between breaking changes and changes that require a new semver-major version (called major changes). All major changes are breaking, but not all breaking changes are major. Changing a struct to an enum is always breaking (as pointed out &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;10k0eox&#x2F;comment&#x2F;j5nrm6z&#x2F;&quot;&gt;on r&#x2F;rust&lt;&#x2F;a&gt;) but is not always major (equivalent to &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;1105-api-evolution.html#minor-change-going-from-a-tuple-struct-with-all-private-fields-with-at-least-one-field-to-a-normal-struct-or-vice-versa&quot;&gt;this case&lt;&#x2F;a&gt;). In this post, we&#x27;re trying to avoid making a major change.&lt;&#x2F;em&gt;&lt;label for=&quot;sn-edit&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-edit&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;The title and content has been slightly edited since the original publication for clarity on the &quot;major vs breaking&quot; point.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Upholding semantic versioning &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;toward-fearless-cargo-update&#x2F;&quot;&gt;is critical in the Rust ecosystem&lt;&#x2F;a&gt;.
But semver has a million non-obvious edge cases.
It&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;cargo-semver-checks-today-and-in-2023&#x2F;&quot;&gt;unreasonable to expect&lt;&#x2F;a&gt; all Rustaceans to master semver trivia to be able to safely publish crates — and it doesn&#x27;t make for a welcoming, inclusive environment, either.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; cares about the edge cases of semver compliance so you won&#x27;t have to.&lt;&#x2F;p&gt;
&lt;p&gt;To do that, it must also correctly implement all those edge cases.
Every so often, my work on &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; leads me to a semver edge case that surprises me.
For example: &lt;em&gt;turning a Rust struct into an enum doesn&#x27;t necessarily require a major version!&lt;&#x2F;em&gt; Here&#x27;s how!&lt;&#x2F;p&gt;
&lt;p&gt;Our protagonist in this post is &lt;code&gt;pub struct Chameleon&lt;&#x2F;code&gt;.
Our goal is to turn it into &lt;code&gt;pub enum Chameleon&lt;&#x2F;code&gt; without needing to release v2.0 of our (fictional) crate.
Not every struct is capable of this feat, so we&#x27;ll show how our little camouflaged friend manages to blend into the environment so well.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implemented-methods-and-traits&quot;&gt;Implemented methods and traits&lt;&#x2F;h2&gt;
&lt;p&gt;One possible major breaking change is removing the implementation of a method or trait on &lt;code&gt;pub enum Chameleon&lt;&#x2F;code&gt; when that method or trait were implemented for the old &lt;code&gt;pub struct Chameleon&lt;&#x2F;code&gt;.
Any code that relies on that method or trait will be broken when the method or trait disappears.&lt;&#x2F;p&gt;
&lt;p&gt;In fact, many kinds of major breaking changes are possible within &lt;code&gt;impl&lt;&#x2F;code&gt; blocks.
To make things easy on ourselves:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We won&#x27;t change or remove any &lt;code&gt;#[derive(...)]&lt;&#x2F;code&gt; or similar derive-macro attributes that already existed on the struct.&lt;&#x2F;li&gt;
&lt;li&gt;We&#x27;ll be careful when altering existing &lt;code&gt;impl Chameleon&lt;&#x2F;code&gt; or &lt;code&gt;impl SomeTrait for Chameleon&lt;&#x2F;code&gt; blocks.
Removing or altering methods, changing implemented traits&#x27; associated types, or changing the bounds on a trait implementation can all be major breaking changes.&lt;&#x2F;li&gt;
&lt;li&gt;We&#x27;ll keep an eye on our type&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;special-types-and-traits.html#auto-traits&quot;&gt;auto-traits&lt;&#x2F;a&gt; — we don&#x27;t want to find out our new type is not &lt;code&gt;Send&lt;&#x2F;code&gt; or &lt;code&gt;Sync&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;toward-fearless-cargo-update&#x2F;&quot;&gt;like in a prior post&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As of v0.16.0, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; can automatically check &lt;em&gt;some of this&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;inherent_method_missing.ron&quot;&gt;The &lt;code&gt;inherent_method_missing&lt;&#x2F;code&gt; lint&lt;&#x2F;a&gt; ensure that all inherent methods (ones in &lt;code&gt;impl Chameleon&lt;&#x2F;code&gt;, not &lt;code&gt;impl Foo for Chameleon&lt;&#x2F;code&gt;) continue to exist.&lt;&#x2F;li&gt;
&lt;li&gt;Other lints check that methods &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;method_parameter_count_changed.ron&quot;&gt;did not change their number of parameters&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;inherent_method_const_removed.ron&quot;&gt;did not stop being &lt;code&gt;const&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;inherent_method_unsafe_added.ron&quot;&gt;did not become &lt;code&gt;unsafe&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, etc.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;auto_trait_impl_removed.ron&quot;&gt;&lt;code&gt;auto_trait_impl_removed&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;sized_impl_removed.ron&quot;&gt;&lt;code&gt;sized_impl_removed&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;derive_trait_impl_removed.ron&quot;&gt;&lt;code&gt;derive_trait_impl_removed&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; lints check that &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;special-types-and-traits.html#auto-traits&quot;&gt;auto-traits&lt;&#x2F;a&gt;, the special &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;special-types-and-traits.html#sized&quot;&gt;&lt;code&gt;Sized&lt;&#x2F;code&gt; marker trait&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;attributes&#x2F;derive.html&quot;&gt;built-in traits used in &lt;code&gt;#[derive(...)]&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; did not stop being implemented.&lt;&#x2F;li&gt;
&lt;li&gt;As of v0.16, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is not able to check method parameter or return types, trait associated types, or generic bounds. Here&#x27;s our &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;5&quot;&gt;tracking issue for not-yet-implemented lints&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;public-fields&quot;&gt;Public fields&lt;&#x2F;h2&gt;
&lt;p&gt;Rust structs may have publicly-visibile fields:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;NotChameleon {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Given such a struct, code in another crate is allowed to read or mutate that field directly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;rename&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; NotChameleon) {
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Current name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, value.name);   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; reading the field
&lt;&#x2F;span&gt;&lt;span&gt;    value.name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Not a chameleon&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; mutating the field
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rust enums cannot have fields — &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rust-by-example&#x2F;custom_types&#x2F;enum.html&quot;&gt;they only have variants&lt;&#x2F;a&gt;.
If &lt;code&gt;pub struct NotChameleon&lt;&#x2F;code&gt; here became an enum, all accesses of the &lt;code&gt;name&lt;&#x2F;code&gt; field would be broken since that field no longer exists!&lt;&#x2F;p&gt;
&lt;p&gt;This is why our &lt;code&gt;pub struct Chameleon&lt;&#x2F;code&gt; must not expose any fields directly.
Instead, it uses accessor methods to provide both immutable and mutable access to its contents:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Chameleon {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Chameleon {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; one option: an explicit setter
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;set_name&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name = name;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; another option, useful to allow appending
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; to the existing string without copying first
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;name_mut&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The implementation of these accessor methods may need to change as a result of the switch from struct to enum, but those changes are internal implementation details.
The methods&#x27; callers will remain blissfully ignorant of the change.&lt;&#x2F;p&gt;
&lt;p&gt;Since the &lt;code&gt;NotChameleon&lt;&#x2F;code&gt; struct has public fields, attempting to turn it into an enum without incrementing the major version will trigger &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;struct_with_pub_fields_changed_type.ron&quot;&gt;a lint in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
Our friend &lt;code&gt;Chameleon&lt;&#x2F;code&gt; has no public fields, and won&#x27;t have that problem.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;surprise-one-more-thing-to-consider&quot;&gt;Surprise! One more thing to consider&lt;&#x2F;h2&gt;
&lt;p&gt;Just for fun, let&#x27;s now say that &lt;code&gt;Chameleon&lt;&#x2F;code&gt; has &lt;em&gt;no fields whatsoever&lt;&#x2F;em&gt; — not even private fields.
Perhaps it&#x27;s a unit struct like &lt;code&gt;pub struct Chameleon&lt;&#x2F;code&gt; or an empty tuple struct like &lt;code&gt;pub struct Chameleon()&lt;&#x2F;code&gt;, or even an empty plain struct like &lt;code&gt;pub struct Chameleon {}&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Quick aside: did you know that changing between those three struct kinds can be a major breaking change?
Don&#x27;t worry, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;struct_with_pub_fields_changed_type.ron&quot;&gt;has you covered&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;unit_struct_changed_kind.ron&quot;&gt;with its lints&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway...
Since the struct has no fields, there are no field accesses to worry about when changing it to an enum.
We&#x27;ll leave all  the &lt;code&gt;impl&lt;&#x2F;code&gt; blocks and &lt;code&gt;#[derive(...)]&lt;&#x2F;code&gt; attributes untouched, so all the methods and traits will be fine.
Looks good to me, ship it! 🚀&lt;&#x2F;p&gt;
&lt;p&gt;💥 &lt;strong&gt;Oops!!&lt;&#x2F;strong&gt; 💥 We broke semver 😬&lt;&#x2F;p&gt;
&lt;p&gt;Thankfully &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oli-obk&#x2F;cargo_metadata&#x2F;blob&#x2F;main&#x2F;.github&#x2F;workflows&#x2F;release.yml#L51-L61&quot;&gt;runs in our release pipeline before &lt;code&gt;cargo publish&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;figure class=&quot;fullwidth&quot;&gt;
  

  

  
  
  

  
  &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;caught-semver-violation.bc0fac1d8cc37036.png&quot; alt=&quot;Terminal output from cargo-semver-checks showing a &amp;#x27;constructible_struct_changed_type&amp;#x27; lint. The lint&amp;#x27;s description says &amp;quot;A struct became an enum or union, and is no longer publicly constructible with a struct literal.&amp;quot; The lint specifies the offending code as &amp;quot;struct semver_example::Chameleon became enum in file src&amp;#x2F;lib.rs:1&amp;quot;&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Here are examples of struct literal syntax for unit, tuple, and plain structs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = UnitStruct;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = EmptyTupleStruct();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = EmptyPlainStruct {};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If the &lt;code&gt;Chameleon&lt;&#x2F;code&gt; struct was usable like this, converting it to an enum would be a major breaking change.
We couldn&#x27;t create an enum value like this — we have to specify a particular enum variant, not just supply the enum&#x27;s name with parens or curly braces.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately, Rust&#x27;s built-in &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;attributes&#x2F;type_system.html&quot;&gt;&lt;code&gt;#[non_exhaustive]&lt;&#x2F;code&gt; attribute&lt;&#x2F;a&gt; can prevent other crates from using the literal syntax to directly create &lt;code&gt;Chameleon&lt;&#x2F;code&gt; values, instead requiring them to use a constructor like &lt;code&gt;Chameleon::new()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But be careful: adding &lt;code&gt;#[non_exhaustive]&lt;&#x2F;code&gt; to an existing type or enum variant is itself a major breaking change — one that &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;struct_marked_non_exhaustive.ron&quot;&gt;will&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;enum_marked_non_exhaustive.ron&quot;&gt;always&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;variant_marked_non_exhaustive.ron&quot;&gt;catch&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So for the &lt;code&gt;Chameleon&lt;&#x2F;code&gt; struct with no fields to be able to become an enum without a major change, it must have been marked &lt;code&gt;#[non_exhaustive]&lt;&#x2F;code&gt; &lt;em&gt;at the time it was originally added&lt;&#x2F;em&gt; to the public API.
One day, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; might even start suggesting that you consider adding &lt;code&gt;#[non_exhaustive]&lt;&#x2F;code&gt; when you add a type like this to your crate&#x27;s public API — but that&#x27;s a topic for a future post.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Semver violations are much like memory safety violations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;They can happen to anyone, even if you&#x27;re extremely careful.&lt;&#x2F;li&gt;
&lt;li&gt;There&#x27;s an overwhelming amount of real-world evidence of the above.&lt;&#x2F;li&gt;
&lt;li&gt;Automated tools can prevent semver violations, or at least significantly reduce their likelihood.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is not yet a perfect tool.
For example, it catches &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues?q=is%3Aissue+is%3Aopen+label%3AC-enhancement&quot;&gt;an ever-growing yet still incomplete list of semver issues&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;At the same time, adopting &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; v0.16 today means 40 fewer possible kinds of semver violations in your crate&#x27;s API.
Specifically, it will prevent exactly the semver violations that have already happened &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;toward-fearless-cargo-update&#x2F;&quot;&gt;in past versions of &lt;code&gt;clap&lt;&#x2F;code&gt;, &lt;code&gt;pyo3&lt;&#x2F;code&gt;, and many other top crates&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;What&#x27;s stopping your crate from adopting &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; today?
I&#x27;d love to &lt;a href=&quot;https:&#x2F;&#x2F;hachyderm.io&#x2F;@predrag&quot;&gt;hear about it&lt;&#x2F;a&gt; and resolve it!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>cargo-semver-checks today and in 2023</title>
        <published>2022-12-23T00:00:00+00:00</published>
        <updated>2022-12-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/cargo-semver-checks-today-and-in-2023/"/>
        <id>https://predr.ag/blog/cargo-semver-checks-today-and-in-2023/</id>
        
        <content type="html" xml:base="https://predr.ag/blog/cargo-semver-checks-today-and-in-2023/">&lt;p&gt;&lt;em&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; ends 2022 with &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;cargo-semver-checks&quot;&gt;40,000 downloads from crates.io&lt;&#x2F;a&gt;, able to prevent 30 different kinds of semver issues, and having done so &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PredragGruevski&#x2F;status&#x2F;1587877518018756609&quot;&gt;in real-world use cases&lt;&#x2F;a&gt;.
Inspired by Yoshua Wuyts&#x27; &lt;a href=&quot;https:&#x2F;&#x2F;blog.yoshuawuyts.com&#x2F;rust-2023&#x2F;&quot;&gt;&quot;Rust in 2023 (by Yosh)&quot;&lt;&#x2F;a&gt; post, here are my thoughts on &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; in 2022, and what I look forward to in 2023 and beyond.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Following semver in Rust is a perfect example of a workflow worth automating:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Important to get right, painful if done wrong:&lt;&#x2F;strong&gt; &lt;code&gt;cargo&lt;&#x2F;code&gt; requires all crates to follow semver, so breaking semver in one crate can have a ripple effect across the ecosystem.&lt;label for=&quot;sn-re-learned&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-re-learned&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;I recently &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;210&quot;&gt;re-learned this lesson&lt;&#x2F;a&gt; myself, for the umpteenth time.&lt;&#x2F;span&gt;

But if done right, semver is completely invisible.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Countless complex rules:&lt;&#x2F;strong&gt; There are &lt;em&gt;hundreds&lt;&#x2F;em&gt; of ways to cause a breaking change, many of them non-obvious.&lt;label for=&quot;sn-countless-ways-to-break&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-countless-ways-to-break&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;5&quot;&gt;The tracking issue&lt;&#x2F;a&gt; for not-yet-implemented lints in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; lists 60+ ways, and is far from an exhaustive list. I&#x27;m currently reading &lt;a href=&quot;https:&#x2F;&#x2F;rust-for-rustaceans.com&#x2F;&quot;&gt;Rust for Rustaceans&lt;&#x2F;a&gt; and discovering new ways to break semver, each more surprising than the last. For a quick taste, check out my &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;toward-fearless-cargo-update&#x2F;#breaking-semver-with-auto-traits&quot;&gt;previous blog post&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Code that violates semver doesn&#x27;t look wrong&lt;&#x2F;strong&gt;: No code reviewer can be expected to reliably flag most of the semver issues, &lt;em&gt;even assuming&lt;&#x2F;em&gt; they are well-versed in all the semver rules.
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PyO3&#x2F;pyo3&#x2F;issues&#x2F;285&quot;&gt;The evidence&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clap-rs&#x2F;clap&#x2F;issues&#x2F;3876&quot;&gt;on this&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RustCrypto&#x2F;utils&#x2F;issues&#x2F;22&quot;&gt;point is&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PredragGruevski&#x2F;status&#x2F;1587877518018756609&quot;&gt;particularly&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2201.11821.pdf&quot;&gt;overwhelming&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some might say the solution is to &lt;a href=&quot;https:&#x2F;&#x2F;en.wiktionary.org&#x2F;wiki&#x2F;git_gud&quot;&gt;&quot;git gud&quot;&lt;&#x2F;a&gt;.
I deeply &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PredragGruevski&#x2F;status&#x2F;1289949333626986496&quot;&gt;respect operational excellence&lt;&#x2F;a&gt;, but this is not the way.&lt;&#x2F;p&gt;
&lt;p&gt;Civilization advances at the rate at which we develop robust abstractions.
I am writing this on a computer I cannot build, under a blanket I cannot weave, having enjoyed a meal with ingredients I cannot grow.
I dedicated &lt;em&gt;ten years&lt;&#x2F;em&gt; to math competitions,&lt;label for=&quot;sn-test-taking-strategies&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-test-taking-strategies&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;And developing test-taking strategies aimed at &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;to-ace-exams-get-better-at-the-easy-questions&#x2F;&quot;&gt;getting a perfect score given limited time!&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;
 and I can&#x27;t even calculate a logarithm by hand! Can you?&lt;label for=&quot;sn-newton-raphson&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-newton-raphson&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;If my life depended on it, I&#x27;d use the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Newton%27s_method&quot;&gt;Newton-Raphson method&lt;&#x2F;a&gt; to approximate my way to it, but there&#x27;s &lt;em&gt;zero chance&lt;&#x2F;em&gt; that&#x27;s actually the best way. My friends with aero-astro engineering degrees still find it hilarious that I once used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;kosmos&#x2F;blob&#x2F;master&#x2F;maneuver_planning.ks#L56-L70&quot;&gt;binary search to calculate orbital maneuvers&lt;&#x2F;a&gt; for Kerbal Space Program, instead of the closed-form formula that apparently existed 😅&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Gatekeeping to only include people with a PhD in &quot;Semver in Rust&quot; won&#x27;t cut it.&lt;&#x2F;p&gt;
&lt;p&gt;Yosh Wuyts &lt;a href=&quot;https:&#x2F;&#x2F;blog.yoshuawuyts.com&#x2F;rust-2023&#x2F;&quot;&gt;quotes another Rust contributor&lt;&#x2F;a&gt; as saying: &quot;The job of an expert is to learn everything about a field there is to learn, and then distill it so that others don&#x27;t have to.&quot;&lt;label for=&quot;sn-quote&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-quote&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;I&#x27;ll gladly put their name here if the quote is confirmed as coming from them. I wasn&#x27;t present when this was said, and didn&#x27;t want to risk misattributing.&lt;&#x2F;span&gt;
 I couldn&#x27;t agree more!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2022-rust-semver-tedium-sparkling-heart&quot;&gt;2022: Rust + semver - tedium = 💖&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; was born in mid-July 2022, when I realized that building a semver linter boils down to only two things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a list of machine-checkable rules, and&lt;&#x2F;li&gt;
&lt;li&gt;a system to check them.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;At a high level, that&#x27;s all &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;tree&#x2F;main&#x2F;src&#x2F;lints&quot;&gt;a checklist&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;4567eca9e1b9e957b2282140ca63e4a8c51349b3&#x2F;src&#x2F;check_release.rs#L142&quot;&gt;a for-loop over it&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As is usually the case:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I wasn&#x27;t the first person to realize this.
&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; isn&#x27;t the first attempt at a semver linter for Rust.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; stands on the shoulders of giants: without rustdoc JSON and serde, the same work would have taken ten times as long.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The novel trick in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is that lint rules are written &lt;em&gt;declaratively&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Given the need to have hundreds of different lints defined over an ever-changing data format,&lt;label for=&quot;sn-rustdoc-json-unstable&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-rustdoc-json-unstable&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;The rustdoc JSON format is unstable and frequently has breaking changes — sometimes even multiple times per week in nightly Rust.&lt;&#x2F;span&gt;
 this is a huge win.&lt;&#x2F;p&gt;
&lt;p&gt;But creating a good declarative query language is a much harder problem than semver!
Generally one shouldn&#x27;t replace an easier problem with a harder one.
This is why linters rarely build their own query language.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately, I spent the last 7+ years of my career working on &lt;a href=&quot;https:&#x2F;&#x2F;blog.kensho.com&#x2F;database-agnostic-querying-is-unavoidable-at-scale-18895f6df2f0&quot;&gt;high-performance query languages for heterogeneous data&lt;&#x2F;a&gt;, so I didn&#x27;t need to start from scratch.
Instead, I just plugged in my existing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall query engine&lt;&#x2F;a&gt; which is &lt;a href=&quot;https:&#x2F;&#x2F;www.hytradboi.com&#x2F;2022&#x2F;how-to-query-almost-everything&quot;&gt;able to query any data source(s)&lt;&#x2F;a&gt; no matter whether they are local files, remote APIs, or a terabyte-scale SQL cluster.&lt;label for=&quot;sn-trustfall-examples&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-trustfall-examples&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Ever wonder &lt;a href=&quot;https:&#x2F;&#x2F;play.predr.ag&#x2F;rustdoc#?f=1&amp;amp;q=IyBJdGVtcyB3aGVyZSBsaW50cyB3ZXJlIGFsbG93ZWQuIE5vdCBhbGwgY3JhdGVzIGhhdmUgdGhlc2UsCiMgdHJ5IG9uZSBvZjogYW55aG93LCBjbGFwLCBodHRwLCBodHRwYXJzZSwgaHlwZXIsIGl0ZXJ0b29scy4KcXVlcnkgewogIENyYXRlIHsKICAgIGl0ZW0gewogICAgICBuYW1lIEBvdXRwdXQKCiAgICAgIGF0dHJpYnV0ZSB7CiAgICAgICAgYXR0cjogdmFsdWUgQG91dHB1dAogICAgICAgICAgICAgICAgICAgIEBmaWx0ZXIob3A6ICJyZWdleCIsIHZhbHVlOiBbIiRwYXR0ZXJuIl0pCiAgICAgIH0KCiAgICAgIHNwYW4gewogICAgICAgIGZpbGVuYW1lIEBvdXRwdXQKICAgICAgICBiZWdpbl9saW5lIEBvdXRwdXQKICAgICAgfQogICAgfQogIH0KfQ%3D%3D&amp;amp;v=ewogICJwYXR0ZXJuIjogIiNcXFthbGxvd1xcKC4rXFwpXFxdIgp9&quot;&gt;which lints do popular crates like &lt;code&gt;itertools&lt;&#x2F;code&gt; allow in their code&lt;&#x2F;a&gt;? Or maybe you&#x27;re curious &lt;a href=&quot;https:&#x2F;&#x2F;play.predr.ag&#x2F;hackernews#?f=1&amp;amp;q=IyBDcm9zcyBBUEkgcXVlcnkgKEFsZ29saWEgKyBGaXJlYmFzZSk6CiMgRmluZCBjb21tZW50cyBvbiBzdG9yaWVzIGFib3V0ICJvcGVuYWkuY29tIiB3aGVyZQojIHRoZSBjb21tZW50ZXIncyBiaW8gaGFzIGF0IGxlYXN0IG9uZSBHaXRIdWIgb3IgVHdpdHRlciBsaW5rCnF1ZXJ5IHsKICAjIFRoaXMgaGl0cyB0aGUgQWxnb2xpYSBzZWFyY2ggQVBJIGZvciBIYWNrZXJOZXdzLgogICMgVGhlIHN0b3JpZXMvY29tbWVudHMvdXNlcnMgZGF0YSBpcyBmcm9tIHRoZSBGaXJlYmFzZSBITiBBUEkuCiAgIyBUaGUgdHJhbnNpdGlvbiBpcyBzZWFtbGVzcyAtLSBpdCBpc24ndCB2aXNpYmxlIGZyb20gdGhlIHF1ZXJ5LgogIFNlYXJjaEJ5RGF0ZShxdWVyeTogIm9wZW5haS5jb20iKSB7CiAgICAuLi4gb24gU3RvcnkgewogICAgICAjIEFsbCBkYXRhIGZyb20gaGVyZSBvbndhcmQgaXMgZnJvbSB0aGUgRmlyZWJhc2UgQVBJLgogICAgICBzdG9yeVRpdGxlOiB0aXRsZSBAb3V0cHV0CiAgICAgIHN0b3J5TGluazogdXJsIEBvdXRwdXQKICAgICAgc3Rvcnk6IHN1Ym1pdHRlZFVybCBAb3V0cHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgQGZpbHRlcihvcDogInJlZ2V4IiwgdmFsdWU6IFsiJHNpdGVQYXR0ZXJuIl0pCgogICAgICBjb21tZW50IHsKICAgICAgICByZXBseSBAcmVjdXJzZShkZXB0aDogNSkgewogICAgICAgICAgY29tbWVudDogdGV4dFBsYWluIEBvdXRwdXQKCiAgICAgICAgICBieVVzZXIgewogICAgICAgICAgICBjb21tZW50ZXI6IGlkIEBvdXRwdXQKICAgICAgICAgICAgY29tbWVudGVyQmlvOiBhYm91dFBsYWluIEBvdXRwdXQKCiAgICAgICAgICAgICMgVGhlIHByb2ZpbGUgbXVzdCBoYXZlIGF0IGxlYXN0IG9uZQogICAgICAgICAgICAjIGxpbmsgdGhhdCBwb2ludHMgdG8gZWl0aGVyIEdpdEh1YiBvciBUd2l0dGVyLgogICAgICAgICAgICBsaW5rCiAgICAgICAgICAgICAgQGZvbGQKICAgICAgICAgICAgICBAdHJhbnNmb3JtKG9wOiAiY291bnQiKQogICAgICAgICAgICAgIEBmaWx0ZXIob3A6ICI%2BPSIsIHZhbHVlOiBbIiRtaW5Qcm9maWxlcyJdKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgY29tbWVudGVySURzOiB1cmwgQGZpbHRlcihvcDogInJlZ2V4IiwgdmFsdWU6IFsiJHNvY2lhbFBhdHRlcm4iXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAb3V0cHV0CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0%3D&amp;amp;v=ewogICJzaXRlUGF0dGVybiI6ICJodHRwW3NdOi8vKFteLl0qXFwuKSpvcGVuYWkuY29tLy4qIiwKICAibWluUHJvZmlsZXMiOiAxLAogICJzb2NpYWxQYXR0ZXJuIjogIihnaXRodWJ8dHdpdHRlcilcXC5jb20vIgp9&quot;&gt;which GitHub or Twitter users comment on HackerNews stories about OpenAI&lt;&#x2F;a&gt;? The answers are one browser-executed query away!&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to Trustfall, each cargo-semver-checks lint is a type-checked structured query in Trustfall&#x27;s GraphQL-like syntax.
(More on this in future blog posts!)
In practice, this means:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;New lints are super easy to add: writing a new lint takes only 1-2 minutes.
The vast majority of effort can then be spent on great test cases that reflect the diversity of use cases for each Rust language construct.&lt;&#x2F;li&gt;
&lt;li&gt;Lints are not tied to a specific rustdoc JSON format version.
Even though the rustdoc JSON format changes frequently, the changes are absorbed by the Trustfall adapter for rustdoc and are completely invisible to the lints — an airtight abstraction layer.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; benefits from the performance and correctness guarantees of Trustfall, whose optimizations and test suite are far more intricate than would be feasible to write for a semver-checker alone.
(If you&#x27;d like to hear more, &lt;a href=&quot;https:&#x2F;&#x2F;hachyderm.io&#x2F;@predrag&quot;&gt;tell me&lt;&#x2F;a&gt; and I&#x27;ll write more blog posts!)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;All this allowed us to go from zero to 30 different semver lints in just five months.&lt;&#x2F;p&gt;
&lt;p&gt;We are ending 2022 on a particularly high note: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PredragGruevski&#x2F;status&#x2F;1584563200011382784&quot;&gt;four students&lt;&#x2F;a&gt; have begun contributing to &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; as part of their Bachelors&#x27; theses!
The pace of development has sped up dramatically thanks to their hard work, and the codebase is healthier than ever.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;looking-ahead-to-2023&quot;&gt;Looking ahead to 2023&lt;&#x2F;h2&gt;
&lt;p&gt;At RustConf 2022 I had the pleasure of meeting several &lt;code&gt;cargo&lt;&#x2F;code&gt; team members, and we decided that the end goal for &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;61&quot;&gt;merging into &lt;code&gt;cargo&lt;&#x2F;code&gt; itself&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Another goal for &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is adding &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;5&quot;&gt;even more lints&lt;&#x2F;a&gt; to prevent more kinds of semver violations.&lt;&#x2F;p&gt;
&lt;p&gt;These goals are self-explanatory, and I won&#x27;t dig into them further. Instead, I&#x27;ll mention three of my personal favorite things I&#x27;d like to see in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; in 2023.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;proactively-discover-and-prevent-false-positives&quot;&gt;Proactively discover and prevent false-positives&lt;&#x2F;h3&gt;
&lt;p&gt;A false-positive error in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is when the tool &lt;em&gt;incorrectly&lt;&#x2F;em&gt; claims it found a semver violation.
I consider false-positives extremely serious bugs&lt;label for=&quot;sn-false-negative&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-false-negative&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Much more serious than false-negatives! A false-&lt;em&gt;negative&lt;&#x2F;em&gt; means there &lt;em&gt;was&lt;&#x2F;em&gt; a semver violation but the tool &lt;em&gt;didn&#x27;t&lt;&#x2F;em&gt; find it. There are dozens of ways to break semver that &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; can&#x27;t yet detect, each of which is a false-negative.&lt;&#x2F;span&gt;
 because they give the user incorrect advice, confusing them and slowing them down while also hurting the credibility of &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; itself.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, in 2022 our users &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;147&quot;&gt;reported&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;193&quot;&gt;multiple&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;167&quot;&gt;false-positive&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;202&quot;&gt;errors&lt;&#x2F;a&gt;.
I am grateful to everyone that spent their precious time helping debug problems that shouldn&#x27;t have happened in the first place.&lt;&#x2F;p&gt;
&lt;p&gt;We have &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;225&quot;&gt;already begun strengthening&lt;&#x2F;a&gt; the &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; test systems to discover and prevent future false-positives, so our users won&#x27;t have to. In the process, we already discovered and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;pull&#x2F;222&quot;&gt;fixed three&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;pull&#x2F;220&quot;&gt;previously-unknown&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;pull&#x2F;218&quot;&gt;false-positives&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In 2023, we plan to take a page from Rust&#x27;s book: testing &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; on the most popular crates on &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;&quot;&gt;crates.io&lt;&#x2F;a&gt; as part of our release process.
This would have a dual benefit: in addition to proactively discovering false-positives, it would also ensure &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is ready to be adopted by those crates at their maintainers&#x27; convenience.
And if we happen to discover more semver issues in the wild, that&#x27;ll be a nice bonus!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;faster-semver-checking-via-rustdoc-caching&quot;&gt;Faster semver-checking via rustdoc caching&lt;&#x2F;h3&gt;
&lt;p&gt;A &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; run consists of two steps: generating rustdoc JSON, and running lints over the generated JSON files.&lt;&#x2F;p&gt;
&lt;p&gt;The &quot;run the lints&quot; step is &lt;em&gt;much faster&lt;&#x2F;em&gt;&lt;label for=&quot;sn-much-faster&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-much-faster&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Even though we&#x27;ve put in negligible effort at optimizing them beyond what Trustfall provides out of the box.&lt;&#x2F;span&gt;
 than the process of generating the rustdoc, which can take a few minutes in CI environments with low core counts like GitHub Actions.&lt;&#x2F;p&gt;
&lt;p&gt;In 2023, we&#x27;ll implement rustdoc caching to limit how often the rustdoc has to be rebuilt.&lt;&#x2F;p&gt;
&lt;p&gt;We expect to cut rustdoc generation time in half: we&#x27;ll still have to generate the current version&#x27;s rustdoc, but we can avoid repeatedly rebuilding rustdoc for crate versions that are already published on &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;&quot;&gt;crates.io&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;semver-check-prs-not-just-cargo-publish&quot;&gt;Semver-check PRs, not just &lt;code&gt;cargo publish&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Currently, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; is most ergonomic when used right before &lt;code&gt;cargo publish&lt;&#x2F;code&gt;: it checks whether the publish step with the specified version&lt;label for=&quot;sn-assumed-version&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-assumed-version&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;If the version in &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; is already on &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&quot;&gt;crates.io&lt;&#x2F;a&gt;, it assumes a patch version bump.&lt;&#x2F;span&gt;
 would result in a semver-compliant release.&lt;&#x2F;p&gt;
&lt;p&gt;But wouldn&#x27;t it be nice to know about breaking changes in a pull request &lt;em&gt;before&lt;&#x2F;em&gt; merging it and committing to a major version bump?
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;libp2p&#x2F;rust-libp2p&quot;&gt;Multiple&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pest-parser&#x2F;pest&quot;&gt;projects&lt;&#x2F;a&gt; have already begun running &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; like this, generally via custom scripts they&#x27;ve adapted specifically for that purpose.&lt;&#x2F;p&gt;
&lt;p&gt;In 2023, I hope we&#x27;re able to make this an officially-supported mode of operation, complete with a GitHub Action.
Bonus points if the Action reports semver issues as inline PR comments using the lints&#x27; span information!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;onwards&quot;&gt;Onwards!&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m thrilled and humbled by the response that &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; has received in the Rust community.
I&#x27;ve never been more excited about building the future with Rust, and I&#x27;m excited to see what 2023 has in store for &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; and the Rust ecosystem as a whole.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Falsehoods programmers believe about undefined behavior</title>
        <published>2022-11-27T00:00:00+00:00</published>
        <updated>2022-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/falsehoods-programmers-believe-about-undefined-behavior/"/>
        <id>https://predr.ag/blog/falsehoods-programmers-believe-about-undefined-behavior/</id>
        
        <content type="html" xml:base="https://predr.ag/blog/falsehoods-programmers-believe-about-undefined-behavior/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Undefined_behavior&quot;&gt;Undefined behavior (UB)&lt;&#x2F;a&gt; is a tricky concept in programming languages and compilers.
Over the many years I&#x27;ve been an industry mentor for &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLUl4u3cNGP63VIBQVWguXxZZi0566y7Wf&quot;&gt;MIT&#x27;s 6.172 Performance Engineering course&lt;&#x2F;a&gt;,&lt;label for=&quot;sn-class-6172&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-class-6172&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;An &lt;em&gt;excellent&lt;&#x2F;em&gt; class that I &lt;em&gt;highly&lt;&#x2F;em&gt; recommend. It&#x27;s very thorough and hands-on, at the expense of also requiring a lot of work at a very fast pace. When I took it as an undergrad, that was a great tradeoff, but YMMV.&lt;&#x2F;span&gt;
 I&#x27;ve heard many misconceptions about what the compiler guarantees in the presence of UB.
This is unfortunate but not surprising!&lt;&#x2F;p&gt;
&lt;p&gt;For a primer on undefined behavior and why we can&#x27;t just &quot;define all the behaviors,&quot; I highly recommend &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=yG1OZ69H_-o&quot;&gt;Chandler Carruth&#x27;s talk&lt;&#x2F;a&gt; &quot;Garbage In, Garbage Out: Arguing about Undefined Behavior with Nasal Demons.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;You might also be familiar with my &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;tags&#x2F;compiler-adventures&#x2F;&quot;&gt;Compiler Adventures blog series&lt;&#x2F;a&gt; on how compiler optimizations work.
An upcoming episode is about implementing optimizations that take advantage of undefined behavior like dividing by zero, where we&#x27;ll see UB &quot;from the other side.&quot;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;undefined-behavior-implementation-defined-behavior&quot;&gt;Undefined behavior != implementation-defined behavior&lt;&#x2F;h2&gt;
&lt;p&gt;Undefined behavior is not the same as implementation-defined behavior.&lt;label for=&quot;sn-unspec-behavior&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-unspec-behavior&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Undefined behavior is also not the same as &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unspecified_behavior&quot;&gt;&lt;em&gt;unspecified behavior&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;, which is similar to implementation-defined behavior minus the requirement that the implementation document its choices and stick to them. Here we&#x27;re focusing on &lt;em&gt;undefined&lt;&#x2F;em&gt; behavior, not &lt;em&gt;unspecified&lt;&#x2F;em&gt; behavior, so we&#x27;ll lump &lt;em&gt;unspecified&lt;&#x2F;em&gt; behavior and implementation-defined behavior together.&lt;&#x2F;span&gt;

Program behaviors fall into &lt;em&gt;three&lt;&#x2F;em&gt; buckets, not two:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Specification-defined:&lt;&#x2F;strong&gt; The programming language itself defines what happens. This is the vast majority of every program.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Implementation-defined:&lt;&#x2F;strong&gt; The exact behavior is defined by your compiler, operating system, or hardware. For example: &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;C_data_types#Basic_types&quot;&gt;how many bits exactly&lt;&#x2F;a&gt; are in a &lt;code&gt;char&lt;&#x2F;code&gt; or &lt;code&gt;int&lt;&#x2F;code&gt; in C++.&lt;label for=&quot;sn-char-width&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-char-width&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;The specification guarantees &lt;em&gt;at least&lt;&#x2F;em&gt; 8 bits for &lt;code&gt;char&lt;&#x2F;code&gt; and at least 16 bits for &lt;code&gt;int&lt;&#x2F;code&gt;. The rest is implementation-defined.&lt;&#x2F;span&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Undefined behavior&lt;&#x2F;strong&gt;: &lt;em&gt;Anything&lt;&#x2F;em&gt; is allowed to happen, and you might no longer have a computer left after it all happens. No outcome is a bug if caused by UB. For example: signed integer overflow in C, or using &lt;code&gt;unsafe&lt;&#x2F;code&gt; to create two &lt;code&gt;&amp;amp;mut&lt;&#x2F;code&gt; references to the same data in Rust.&lt;label for=&quot;sn-ub-in-c-cpp&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-ub-in-c-cpp&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Wikipedia has &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Undefined_behavior#Examples_in_C_and_C++&quot;&gt;an excellent list of examples&lt;&#x2F;a&gt; if you&#x27;d like to see more.&lt;&#x2F;span&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here&#x27;s the list of guarantees compilers make about the outcomes of undefined behavior:&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s the whole list. No, I didn&#x27;t forget any items. Yes, seriously.&lt;&#x2F;p&gt;
&lt;p&gt;It is possible to analyze how UB affects &lt;em&gt;a specific program&lt;&#x2F;em&gt; when compiled by a &lt;em&gt;specific compiler&lt;&#x2F;em&gt; or executed on &lt;em&gt;a specific target platform&lt;&#x2F;em&gt;.
For example, there exist exotic compilers, operating systems, and hardware that offer additional guarantees&lt;label for=&quot;sn-cheri&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-cheri&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Like &lt;a href=&quot;https:&#x2F;&#x2F;www.cl.cam.ac.uk&#x2F;research&#x2F;security&#x2F;ctsrd&#x2F;cheri&#x2F;cheri-faq.html&quot;&gt;CHERI&lt;&#x2F;a&gt;, with awesome powers around pointer safety.&lt;&#x2F;span&gt;
 relative to most common platforms, which only guarantee OS-level &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Process_isolation&quot;&gt;process isolation&lt;&#x2F;a&gt;.
We aren&#x27;t talking about those in this post.&lt;&#x2F;p&gt;
&lt;p&gt;The mindset for this post is this: &quot;If my program contains UB, and the compiler produced a binary that does X, is that a compiler bug?&quot;&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s not a compiler bug.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;all-of-the-following-assumptions-are-wrong&quot;&gt;All of the following assumptions are wrong&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;falsehoods-about-when-ub-happens&quot;&gt;Falsehoods about when UB &quot;happens&quot;&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Undefined behavior only &quot;happens&quot; at high optimization levels like &lt;span class=&quot;nobr&quot;&gt;&lt;code&gt;-O2&lt;&#x2F;code&gt;&lt;&#x2F;span&gt; or &lt;span class=&quot;nobr&quot;&gt;&lt;code&gt;-O3&lt;&#x2F;code&gt;&lt;&#x2F;span&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;If I turn off optimizations with a flag like &lt;span class=&quot;nobr&quot;&gt;&lt;code&gt;-O0&lt;&#x2F;code&gt;&lt;&#x2F;span&gt;, then there&#x27;s no UB.&lt;&#x2F;li&gt;
&lt;li&gt;If I include debug symbols in the build, there&#x27;s no UB.&lt;&#x2F;li&gt;
&lt;li&gt;If I run the program under a debugger, there&#x27;s no UB.&lt;&#x2F;li&gt;
&lt;li&gt;Okay there&#x27;s still UB with all of these, but my code will &quot;do the right thing&quot; regardless.&lt;&#x2F;li&gt;
&lt;li&gt;It will either &quot;do the right thing&quot; or crash with a &lt;code&gt;Segmentation Fault&lt;&#x2F;code&gt; (&lt;code&gt;SIGSEGV&lt;&#x2F;code&gt; signal).&lt;&#x2F;li&gt;
&lt;li&gt;It will either &quot;do the right thing&quot; or crash &lt;em&gt;somehow&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;It will either &quot;do the right thing&quot; or crash or infinite-loop or deadlock.&lt;&#x2F;li&gt;
&lt;li&gt;At least it won&#x27;t run some unrelated code from elsewhere in the program.&lt;&#x2F;li&gt;
&lt;li&gt;At least it won&#x27;t &lt;a href=&quot;https:&#x2F;&#x2F;kristerw.blogspot.com&#x2F;2017&#x2F;09&#x2F;why-undefined-behavior-may-call-never.html&quot;&gt;run any unreachable code&lt;&#x2F;a&gt; the program might contain.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;falsehoods-around-the-behavior-of-executing-ub&quot;&gt;Falsehoods around the behavior of executing UB&lt;&#x2F;h3&gt;
&lt;ol start=&quot;11&quot;&gt;
&lt;li&gt;If a line with UB previously &quot;did the right thing,&quot; then it will continue to &quot;do the right thing&quot; the next time we run the program.&lt;&#x2F;li&gt;
&lt;li&gt;The UB line will at least continue to &quot;do the right thing&quot; while the program is still running.&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s possible to determine if a previous line was UB and prevent it from causing problems.&lt;&#x2F;li&gt;
&lt;li&gt;At least the impact of the UB is limited to code which uses values produced from the UB.&lt;&#x2F;li&gt;
&lt;li&gt;At least the impact of the UB is limited to code which is in the same compilation unit as the line with UB.&lt;&#x2F;li&gt;
&lt;li id=&quot;falsehood-16&quot;&gt;Okay, but at least the impact of the UB is limited to code which runs after the line with UB.&lt;label for=&quot;sn-runs-after-ub&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-runs-after-ub&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;UB is explicitly allowed to alter the behavior of other code, even including operations preceding it! &quot;Alter&quot; here encompasses corrupting, undoing, or altogether preventing (as if it never happened) the outcomes of that other code. To learn more and see examples of UB causing &quot;time travel,&quot; check out &lt;a href=&quot;https:&#x2F;&#x2F;devblogs.microsoft.com&#x2F;oldnewthing&#x2F;20140627-00&#x2F;?p=633&quot;&gt;this blog post&lt;&#x2F;a&gt;.&lt;br&gt;&lt;br&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;z7115a&#x2F;comment&#x2F;iy4w557&#x2F;&quot;&gt;these two&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;z7115a&#x2F;comment&#x2F;iy51rtl&#x2F;&quot;&gt;Reddit posts&lt;&#x2F;a&gt; for suggesting better wording for these items. For the original text, see the Errata section at the end of this post.&lt;&#x2F;span&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;falsehoods-about-the-possible-outcomes-of-ub&quot;&gt;Falsehoods about the possible outcomes of UB&lt;&#x2F;h3&gt;
&lt;ol start=&quot;17&quot;&gt;
&lt;li&gt; At least it won&#x27;t corrupt the memory of the program.&lt;&#x2F;li&gt;
&lt;li&gt; At least it won&#x27;t corrupt the memory of the program other than where the UB-affected data was located.&lt;&#x2F;li&gt;
&lt;li&gt; At least it won&#x27;t corrupt the heap.&lt;&#x2F;li&gt;
&lt;li&gt; At least it won&#x27;t corrupt the stack.&lt;&#x2F;li&gt;
&lt;li&gt; At least it won&#x27;t corrupt the current stack frame. (My name for this is the &quot;local variables are safely in registers&quot; fallacy.)&lt;&#x2F;li&gt;
&lt;li&gt; At least it won&#x27;t corrupt the stack pointer.&lt;&#x2F;li&gt;
&lt;li&gt; At least it won&#x27;t corrupt the CPU flags register &#x2F; any other CPU state.&lt;&#x2F;li&gt;
&lt;li&gt; At least it won&#x27;t corrupt the &lt;em&gt;executable&lt;&#x2F;em&gt; memory of the program.&lt;label for=&quot;sn-w-x-bits&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-w-x-bits&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;OS and hardware security features like &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;W%5EX&quot;&gt;W^X&lt;&#x2F;a&gt; can make this unlikely, but self-modifying programs can be built so it&#x27;s in principle possible through UB as well. Certainly there&#x27;s no guarantee that UB &lt;em&gt;won&#x27;t&lt;&#x2F;em&gt; do this!&lt;&#x2F;span&gt;
&lt;&#x2F;li&gt;
&lt;li&gt; At least it won&#x27;t corrupt streams like stdout or stderr.&lt;&#x2F;li&gt;
&lt;li&gt; At least it won&#x27;t overwrite any files the program already had open.&lt;&#x2F;li&gt;
&lt;li&gt; At least it won&#x27;t open new files and overwrite them.&lt;&#x2F;li&gt;
&lt;li&gt; At least &lt;a href=&quot;https:&#x2F;&#x2F;kristerw.blogspot.com&#x2F;2017&#x2F;09&#x2F;why-undefined-behavior-may-call-never.html&quot;&gt;it won&#x27;t completely wipe the drive.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt; At least it won&#x27;t damage or destroy any hardware components.&lt;label for=&quot;sn-ub-hardware-damage&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-ub-hardware-damage&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Not all devices have the same level of self-protection against bad inputs written to their control registers. This is the kind of lesson one tends to learn the hard way.&lt;&#x2F;span&gt;
&lt;&#x2F;li&gt;
&lt;li&gt; At least it won&#x27;t start playing Doom if the program didn&#x27;t already have the Doom source code in it.&lt;label for=&quot;sn-ub-doom&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-ub-doom&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;I&#x27;d be quite impressed if you made a compiler that makes programs run Doom when they encounter UB. Consider it a challenge!&lt;&#x2F;span&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;falsehoods-like-but-it-worked-fine-before&quot;&gt;Falsehoods like &quot;but it worked fine before&quot;&lt;&#x2F;h3&gt;
&lt;ol start=&quot;31&quot;&gt;
&lt;li&gt;If a UB-containing program &quot;worked fine&quot; previously, recompiling the program without any code changes will still produce a binary that &quot;works fine.&quot;&lt;&#x2F;li&gt;
&lt;li&gt;Recompiling without code changes and with the same compiler and flags will produce a binary that still &quot;works fine.&quot;&lt;&#x2F;li&gt;
&lt;li&gt;Recompiling as above + on the same machine will produce a binary that still &quot;works fine.&quot;&lt;&#x2F;li&gt;
&lt;li&gt;Recompiling as above + if you haven&#x27;t rebooted the machine since the last compilation will produce a binary that still &quot;works fine.&quot;&lt;&#x2F;li&gt;
&lt;li&gt;Recompiling as above + with the same environment variables will produce a binary that still &quot;works fine.&quot;&lt;&#x2F;li&gt;
&lt;li&gt;Recompiling as above + at the same time of day and day of week as before, during a Lunar eclipse, having first sacrificed a fresh stick of RAM to the binary gods, will produce a binary that still &quot;works fine.&quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;falsehoods-about-self-consistent-behavior-of-ub&quot;&gt;Falsehoods about self-consistent behavior of UB&lt;&#x2F;h3&gt;
&lt;ol start=&quot;37&quot;&gt;
&lt;li&gt;Multiple runs of the program compiled as above and with the same inputs will produce the same behavior in each run.&lt;&#x2F;li&gt;
&lt;li&gt;Those multiple runs will produce the same behavior if the program, ignoring the UB, is deterministic.&lt;&#x2F;li&gt;
&lt;li&gt;But they will if the program is also single-threaded.&lt;&#x2F;li&gt;
&lt;li&gt;But they will if the program also doesn&#x27;t read any external data (files, network, environment variables, etc.).&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;community-contributed-falsehoods-around-ub&quot;&gt;Community-contributed falsehoods around UB&lt;&#x2F;h3&gt;
&lt;ol start=&quot;41&quot;&gt;
&lt;li&gt;Using a debugger on a UB-containing program will show program state that corresponds to the source code.&lt;label for=&quot;sn-debugging&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-debugging&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;This is a corrolary of &lt;a href=&quot;#falsehood-16&quot;&gt;falsehood #16&lt;&#x2F;a&gt;, further explained in &lt;a href=&quot;https:&#x2F;&#x2F;devblogs.microsoft.com&#x2F;oldnewthing&#x2F;20140627-00&#x2F;?p=633&quot;&gt;this post&lt;&#x2F;a&gt;. UB can corrupt the behavior of the program both before and after the UB, so the source code you see in your editor no longer matches the actual executing program. Of course, you can still use the debugger to step through assembly instructions and view register state. But highly optimized assembly isn&#x27;t easy to understand to begin with, and UB-induced weirdness will only make it harder. Overall, a situation that is best avoided. Contributed &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;z7115a&#x2F;comment&#x2F;iy51rtl&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Undefined behavior is purely a runtime phenomenon.&lt;label for=&quot;sn-runtime-only&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-runtime-only&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;In Rust, a counter-example is misusing &lt;span class=&quot;nobr&quot;&gt;&lt;code&gt;#[no_mangle]&lt;&#x2F;code&gt;&lt;&#x2F;span&gt; &lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;z7115a&#x2F;falsehoods_programmers_believe_about_undefined&#x2F;iy4ztkm&#x2F;&quot;&gt;to overwrite a symbol with an incorrect type&lt;&#x2F;a&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=33776047&quot;&gt;A C++ counter-example&lt;&#x2F;a&gt; is violations of the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;One_Definition_Rule&quot;&gt;One Definition Rule (ODR)&lt;&#x2F;a&gt;, some of which the compiler is not required to report before causing havoc.&lt;&#x2F;span&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;false-expectations-around-ub-in-general&quot;&gt;False expectations around UB, in general&lt;&#x2F;h3&gt;
&lt;ol start=&quot;43&quot;&gt;
&lt;li&gt;Any kind of reasonable or unreasonable behavior happening with any consistency or any guarantee of any sort.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The moment your program contains UB, &lt;strong&gt;all bets are off&lt;&#x2F;strong&gt;.
Even if it&#x27;s just one little UB.
Even if it&#x27;s never executed.
Even if you don&#x27;t know it&#x27;s there at all.
Probably even if you wrote the language spec and compiler yourself.&lt;label for=&quot;sn-from-experience&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-from-experience&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Speaking from experience. Hopefully not one you have to relive to believe.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;This is not to say that all outcomes in the list above are equally likely, or even plausible.&lt;label for=&quot;sn-ub-doom2&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-ub-doom2&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Especially the one about running Doom.&lt;&#x2F;span&gt;

But they are all allowed, valid, spec-compliant behavior.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s perfectly possible that your program has UB, and it&#x27;s been running fine for years without issues.
That&#x27;s great!
I&#x27;m happy to hear it!
I&#x27;m not even saying you need to go back and rewrite it to remove the UB.
But as you make your decisions, it&#x27;s good to know the full picture of what the compiler will or won&#x27;t guarantee for your program.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;honorable-mention-for-one-special-assumption&quot;&gt;Honorable mention for one special assumption&lt;&#x2F;h2&gt;
&lt;p&gt;&quot;If the program compiles without errors then it doesn&#x27;t have UB.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;This is 100% false in C and C++.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s also false as stated in Rust, but with one tweak it&#x27;s &lt;em&gt;almost&lt;&#x2F;em&gt; true.
If your Rust program never uses &lt;code&gt;unsafe&lt;&#x2F;code&gt;, then it &lt;em&gt;should&lt;&#x2F;em&gt; be free of UB.
In other words: causing UB without &lt;code&gt;unsafe&lt;&#x2F;code&gt; is considered
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues?q=is%3Aopen+is%3Aissue+label%3AI-unsound&quot;&gt;a bug in the Rust compiler&lt;&#x2F;a&gt;.
These are rare and you are quite unlikely to run into them.&lt;&#x2F;p&gt;
&lt;p&gt;When Rust &lt;code&gt;unsafe&lt;&#x2F;code&gt; is used, then all bets are off just as in C or C++.
But the assumption that &quot;Safe Rust programs that compile are free of UB&quot; is &lt;em&gt;mostly true&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is not an easy feat.
We owe a debt of gratitude to the folks who cumulatively put engineer-centuries into making it so.
It&#x27;s Thanksgiving, and I thank you!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;errata-and-edit-history&quot;&gt;Errata and edit history&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;2022-11-29-items-13-16-corrected-and-updated&quot;&gt;2022-11-29: Items 13-16 corrected and updated&lt;&#x2F;h3&gt;
&lt;p&gt;The original version of this post contained the following items at positions 13-16 in the list:&lt;&#x2F;p&gt;
&lt;ol start=&quot;13&quot;&gt;
&lt;li&gt;But if the line with UB isn&#x27;t executed, then the program will work normally as if the UB wasn&#x27;t there.&lt;&#x2F;li&gt;
&lt;li&gt;Okay, but if the line with UB is &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dead_code&quot;&gt;unreachable (dead) code&lt;&#x2F;a&gt;, then it&#x27;s as if the UB wasn&#x27;t there.&lt;label for=&quot;sn-dead-code&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-dead-code&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Surprising, right? It isn&#x27;t obvious why code that should be perfectly safe to delete would have any effect on the behavior of the program. But it turns out that sometimes &lt;a href=&quot;https:&#x2F;&#x2F;www.ralfj.de&#x2F;blog&#x2F;2020&#x2F;07&#x2F;15&#x2F;unused-data.html&quot;&gt;optimizations can make some dead code live again&lt;&#x2F;a&gt;. EDIT: This was originally footnote #6 before being moved down here.&lt;&#x2F;span&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;If the line with UB is unreachable code, then the program won&#x27;t crash because of the UB.&lt;&#x2F;li&gt;
&lt;li&gt;If the line with UB is unreachable code, then the program will at least stop running &lt;em&gt;somehow&lt;&#x2F;em&gt; and &lt;em&gt;at some point&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This wording was not precise enough, and as a result the claims were arguably incorrect as stated.
I have updated the post near those claims to better capture the subtleties involved.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2022-11-29-added-community-contributed-items&quot;&gt;2022-11-29: Added community-contributed items&lt;&#x2F;h3&gt;
&lt;p&gt;The &quot;False expectations around UB, in general&quot; section now contains a selection of community-suggested items.
Previously it only contained a single item (the last one in the current list) at position number 41.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arriven&quot;&gt;arriven&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;conradludgate&quot;&gt;Conrad Ludgate&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sharnoff&quot;&gt;sharnoff&lt;&#x2F;a&gt;, Brian Graham, and a few folks who preferred to remain unnamed, for feedback on drafts of this post.&lt;&#x2F;em&gt;
&lt;em&gt;Any mistakes are mine alone.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>My HYTRADBOI&#x27;22 Jam</title>
        <published>2022-10-03T00:00:00+00:00</published>
        <updated>2022-10-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/my-hytradboi-22-jam/"/>
        <id>https://predr.ag/blog/my-hytradboi-22-jam/</id>
        
        <content type="html" xml:base="https://predr.ag/blog/my-hytradboi-22-jam/">&lt;p&gt;I had a lot of fun spending nights-and-weekends time participating in the &lt;a href=&quot;https:&#x2F;&#x2F;www.hytradboi.com&#x2F;jam&quot;&gt;HYTRADBOI Jam&lt;&#x2F;a&gt;, a global hack week aimed at building &quot;exciting and weird&quot; data-centric solutions to familiar problems.
The name &lt;a href=&quot;https:&#x2F;&#x2F;www.hytradboi.com&#x2F;&quot;&gt;HYTRADBOI&lt;&#x2F;a&gt; might sound familiar: the jam is associated with the same conference where I gave my &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;talks&#x2F;#how-to-query-almost-everything&quot;&gt;&quot;How to Query (Almost) Everything&quot; talk&lt;&#x2F;a&gt; talk in April this year.&lt;&#x2F;p&gt;
&lt;p&gt;I jammed on two projects: one solo and one with &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;Bojan93112526&quot;&gt;a friend&lt;&#x2F;a&gt;. The projects ultimately were very successful and mostly-successful, respectively.&lt;!-- more --&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll summarize the goals and progress on each project here.
I&#x27;ll save the deep technical details for a future post.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;semver-queries-over-multiple-rustdoc-versions&quot;&gt;Semver queries over multiple rustdoc versions&lt;&#x2F;h2&gt;
&lt;p&gt;My solo project was to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-check&#x2F;pull&#x2F;133&quot;&gt;add support for multiple rustdoc versions&lt;&#x2F;a&gt; to &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;.&lt;label for=&quot;sn-semver-linter&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-semver-linter&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;That&#x27;s the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;cargo-semver-checks&quot;&gt;semver linter for Rust&lt;&#x2F;a&gt; I built using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall&lt;&#x2F;a&gt; a few months ago.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Before the Jam, each &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; version could only support a single version of rustdoc.
As an unstable Rust feature under active development, the rustdoc JSON format changes frequently: I counted 7 breaking changes in a ~two-month period.&lt;&#x2F;p&gt;
&lt;p&gt;Thus, users had to match their version of &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; to the nightly Rust compiler version they were using.
Also, every time a new nightly included an updated rustdoc JSON format, I had to scramble to publish a corresponding update for &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;.
All around, this was &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-check&#x2F;issues&#x2F;122&quot;&gt;less than ideal&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;My Jam project was to use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall&lt;&#x2F;a&gt; to decouple the semver lint queries from the changes in the rustdoc JSON format version.
In broad strokes, JSON format changes don&#x27;t affect the data model semver queries are interested in — Rust functions, structs, fields etc. — so the Trustfall adapter can absorb format changes and prevent them from leaking through to the queries.
More details in a future post!&lt;&#x2F;p&gt;
&lt;p&gt;This project was very successful: &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; version 0.12.0 includes this functionality, and &lt;em&gt;none of the semver queries needed any changes&lt;&#x2F;em&gt; whatsoever.
From this version onward, each new &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; version will support at least the most-recent stable and beta Rust versions.
Version 0.12.0 simultaneously supports &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-check&#x2F;pull&#x2F;133&quot;&gt;three rustdoc format versions&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;rustdoc v16, shipped in Rust stable 1.64&lt;&#x2F;li&gt;
&lt;li&gt;rustdoc v21, shipped in Rust beta 1.65&lt;&#x2F;li&gt;
&lt;li&gt;rustdoc v22, in the current nightly Rust.
The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks-action&quot;&gt;GitHub Action&lt;&#x2F;a&gt; is also updated to match, and now uses the latest stable Rust by default.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;unlimited-depth-recursion-in-trustfall-queries&quot;&gt;Unlimited-depth recursion in Trustfall queries&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;@recurse&lt;&#x2F;code&gt; directive is one of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall&#x27;s&lt;&#x2F;a&gt; key improvements over GraphQL.
For example, it allows queries like &lt;a href=&quot;https:&#x2F;&#x2F;play.predr.ag&#x2F;hackernews#?f=1&amp;amp;q=IyBHZXQgY29tbWVudHMgYW5kIHJlcGxpZXMgdXAgdG8gMyBsZXZlbHMgZGVlcAojIG9uIHRvcCBIYWNrZXJOZXdzIHN0b3JpZXMuCnF1ZXJ5IHsKICBUb3AgewogICAgLi4uIG9uIFN0b3J5IHsKICAgICAgdGl0bGUgQG91dHB1dAogICAgICBzdWJtaXR0ZWRVcmwgQG91dHB1dAogICAgICBzdG9yeVVybDogdXJsIEBvdXRwdXQKICAgICAgCiAgICAgIGNvbW1lbnQgewogICAgICAgIHJlcGx5IEByZWN1cnNlKGRlcHRoOiAzKSB7CiAgICAgICAgICBjb21tZW50OiB0ZXh0UGxhaW4gQG91dHB1dAogICAgICAgICAgY29tbWVudGVyOiBieVVzZXJuYW1lIEBvdXRwdXQKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0%3D&amp;amp;v=ewoKfQ%3D%3D&quot;&gt;&quot;What comments and replies up to 3 levels deep have been posted on HackerNews&#x27; top stories?&quot;&lt;&#x2F;a&gt;&lt;label for=&quot;sn-recurse-defn&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-recurse-defn&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;This isn&#x27;t the same as nesting the &lt;code&gt;reply&lt;&#x2F;code&gt; edge in that query three times: that would give us all replies that are &lt;em&gt;exactly&lt;&#x2F;em&gt; 3 levels deep in the comment tree, instead of all comments at levels 0-3 inclusive.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;When deploying &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall&lt;&#x2F;a&gt; over a dataset, engineers don&#x27;t need to worry about the complexity of implementing recursion over the edges (relations) in their data model.
The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall&lt;&#x2F;a&gt; interpreter handles the execution of &lt;code&gt;@recurse&lt;&#x2F;code&gt; directives transparently, and the underlying dataset adapter sees only a series of non-recursive edge-traversal requests.&lt;&#x2F;p&gt;
&lt;p&gt;This outward-facing elegance comes at the cost of significant internal complexity within &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall&lt;&#x2F;a&gt;.
In fact, the internals that make &lt;code&gt;@recurse&lt;&#x2F;code&gt; work are &lt;em&gt;the most complex code in the entire project&lt;&#x2F;em&gt;, and are already the product of many months of painstaking work.&lt;&#x2F;p&gt;
&lt;p&gt;But &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;Bojan93112526&quot;&gt;my friend Bojan&lt;&#x2F;a&gt; and I love to push the limits of what can be achieved.
We wanted to further improve &lt;code&gt;@recurse&lt;&#x2F;code&gt; in two ways:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Today, &lt;code&gt;@recurse&lt;&#x2F;code&gt; requires a fixed maximum recursion depth, and can&#x27;t express &quot;recurse until you run out of data&quot; queries.
This is in part because the current implementation eagerly allocates &lt;code&gt;O(d)&lt;&#x2F;code&gt; memory for &lt;code&gt;d&lt;&#x2F;code&gt;-depth recursion.
Thus, it would attempt to allocate an infinite amount of memory if attempting to perform unlimited recursion, which wouldn&#x27;t work.&lt;&#x2F;li&gt;
&lt;li&gt;Today&#x27;s &lt;code&gt;@recurse&lt;&#x2F;code&gt; implementation is asymptotically optimal,&lt;label for=&quot;sn-asymptotically&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-asymptotically&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Essentially, computing the first result involves a bit more work (&lt;code&gt;O(d)&lt;&#x2F;code&gt; for &lt;code&gt;d&lt;&#x2F;code&gt;-depth recursion) than strictly necessary. Subsequent results progressively recoup this upfront cost, so most of the time this isn&#x27;t a problem. But it can become noticeable when using extremely deep recursion, say 10,000+ levels deep.&lt;&#x2F;span&gt;
 and we wanted to make it &lt;em&gt;directly optimal&lt;&#x2F;em&gt; instead.
This would improve &lt;code&gt;@recurse&lt;&#x2F;code&gt; query performance by returning all results earlier than before: the first result would become available after &lt;code&gt;O(1)&lt;&#x2F;code&gt; recursion-related work instead of &lt;code&gt;O(d)&lt;&#x2F;code&gt; for &lt;code&gt;d&lt;&#x2F;code&gt;-depth recursion, etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bojanserafimov&#x2F;recurse&quot;&gt;Several prototypes&lt;&#x2F;a&gt; and lots of collaboration later, we have &lt;em&gt;mostly&lt;&#x2F;em&gt; achieved our objective: we have &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&#x2F;pull&#x2F;83&quot;&gt;a draft PR&lt;&#x2F;a&gt; containing a directly-optimal &lt;code&gt;@recurse&lt;&#x2F;code&gt; implementation that can support unlimited-depth recursion.&lt;&#x2F;p&gt;
&lt;p&gt;Our traces show the new implementation is &lt;em&gt;more than twice as fast&lt;&#x2F;em&gt; at delivering a query&#x27;s first result compared to the existing &lt;code&gt;@recurse&lt;&#x2F;code&gt; execution approach.
As the recursion depth increases, the new implementation&#x27;s performance advantage grows proportionally — the more-than-2x improvement is a &lt;em&gt;lower bound&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The best part: this is all without making &lt;em&gt;any&lt;&#x2F;em&gt; changes to the adapter interface used to plug in data sources into &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall&lt;&#x2F;a&gt;. All Trustfall users would benefit from this improvement without needing to change even one line of query or data adapter code.&lt;&#x2F;p&gt;
&lt;p&gt;This project was &lt;em&gt;mostly&lt;&#x2F;em&gt; successful.
We had (rather ambitiously!) hoped to have the new implementation merged by the end of the Jam.
However, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall&#x27;s&lt;&#x2F;a&gt; thorough test suite revealed that our new code currently mishandles &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&#x2F;blob&#x2F;main&#x2F;trustfall_core&#x2F;src&#x2F;resources&#x2F;test_data&#x2F;valid_queries&#x2F;implicit_coercion_in_recurse_to_supertype.graphql.ron#L4-L23&quot;&gt;a particularly subtle edge case&lt;&#x2F;a&gt; that can arise when recursing in particularly diabolical schemas.&lt;&#x2F;p&gt;
&lt;p&gt;We won&#x27;t let one edge case deter us from our pursuit of optimal performance!
But first, we need some rest after a week of thrilling jamming 😴&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;sc13ts&quot;&gt;Jamie Brandon&lt;&#x2F;a&gt; for organizing the &lt;a href=&quot;https:&#x2F;&#x2F;www.hytradboi.com&#x2F;jam&quot;&gt;HYTRADBOI Jam&lt;&#x2F;a&gt;! Participating was a lot of fun, and I am hoping there will be many more Jams to come.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;This blog post includes joint work with &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;Bojan93112526&quot;&gt;Bojan Serafimov&lt;&#x2F;a&gt;. However, any mistakes in this blog post are mine alone.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Debugging Safari: If at first you succeed, don&#x27;t try again</title>
        <published>2022-09-19T00:00:00+00:00</published>
        <updated>2022-09-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/debugging-safari-if-at-first-you-succeed/"/>
        <id>https://predr.ag/blog/debugging-safari-if-at-first-you-succeed/</id>
        
        <content type="html" xml:base="https://predr.ag/blog/debugging-safari-if-at-first-you-succeed/">&lt;p&gt;The saying usually goes: &quot;If at first you don&#x27;t succeed, try, try again.&quot;
But in the Safari web browser under the right conditions, trying again after succeeding once can get you in trouble.
This is my recent debugging adventure.&lt;!-- more --&gt;&lt;label for=&quot;sn-requested&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-requested&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;As requested &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;fasterthanlime&#x2F;status&#x2F;1569717345022509057&quot;&gt;on Twitter&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;While building &lt;a href=&quot;https:&#x2F;&#x2F;play.predr.ag&#x2F;&quot;&gt;Trustfall Playground&lt;&#x2F;a&gt;, I noticed that the playground editor in Safari was sporadically broken.
You guessed it, it was a caching problem — it&#x27;s always caching, unless &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PredragGruevski&#x2F;status&#x2F;1445098876113932293&quot;&gt;it&#x27;s DNS&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;When the page requested the problematic script, cache &lt;em&gt;misses&lt;&#x2F;em&gt; worked fine.
But on cache &lt;em&gt;hits&lt;&#x2F;em&gt;, Safari was deciding not to load the resource claiming it violated security rules — even if it had &lt;em&gt;already&lt;&#x2F;em&gt; accepted and loaded it earlier on the same page.
As long as the resource remained in cache, any attempt to use it would fail.&lt;&#x2F;p&gt;
&lt;p&gt;To explain what was happening, we&#x27;ll need a bit of background.
The bug is caused by a complex interaction of browser caching logic, new APIs for high-performance computing, and new browser security features.
We&#x27;ll get charged with breaking security rules, successfully proclaim our innocence, and ride off into the sunset while filing a bug on the Safari&#x2F;WebKit browser engine.&lt;&#x2F;p&gt;
&lt;p&gt;If mysteries aren&#x27;t your thing, &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;debugging-safari-if-at-first-you-succeed&#x2F;#a-bug-in-safari-webkit&quot;&gt;click here&lt;&#x2F;a&gt; to skip to the answer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;playground-needs-special-security-headers&quot;&gt;Playground needs special security headers&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;play.predr.ag&#x2F;&quot;&gt;Trustfall Playground&lt;&#x2F;a&gt; executes queries using one or more &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Web_Workers_API&#x2F;Using_web_workers&quot;&gt;web workers&lt;&#x2F;a&gt;.&lt;label for=&quot;sn-webwork&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-webwork&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Kind of like threads in a native app: a way to move computation off the UI thread to keep it responsive.&lt;&#x2F;span&gt;

One of the workers compiles and executes queries, another handles network requests, a third provides query editor functionality like syntax highlighting, and so on.&lt;&#x2F;p&gt;
&lt;figure&gt;
    

    

    
    
    

    
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;trustfall_playground.d6c8423993a2cf29.png&quot; alt=&quot;The Trustfall Playground website&amp;#x27;s page on querying HackerNews APIs, showing an example query titled &amp;quot;Comments With Links to HackerNews Stories.&amp;quot; The schema pane is open and shows documentation about fields available to query, like &amp;quot;FrontPage,&amp;quot; &amp;quot;Top,&amp;quot; and &amp;quot;Latest.&amp;quot;&quot;&gt;
    &lt;label for=&quot;mn-playground-screenshot&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;mn-playground-screenshot&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
    &lt;span class=&quot;marginnote figcaption&quot;&gt;
        Querying HackerNews APIs on &lt;a href=&quot;https:&#x2F;&#x2F;play.predr.ag&#x2F;hackernews&quot;&gt;Trustfall Playground&lt;&#x2F;a&gt;
    &lt;&#x2F;span&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;The workers coordinate through &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;SharedArrayBuffer&quot;&gt;an object called a&lt;&#x2F;a&gt; &lt;code&gt;SharedArrayBuffer&lt;&#x2F;code&gt;.
It represents a region of memory accessible to multiple workers, so that data written by one worker can be read by another.
Techniques that use shared memory buffers are a cornerstone of modern multicore computing: they are &lt;em&gt;extensively&lt;&#x2F;em&gt; used by both the browser where you are seeing these words and the operating system on which it runs, for example.&lt;&#x2F;p&gt;
&lt;p&gt;However, their pervasiveness also made them targets for exploitation via attacks like &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Spectre_(security_vulnerability)&quot;&gt;Spectre&lt;&#x2F;a&gt;.
To keep users safe, web worker code that uses such high-performance functionality needs to meet &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;SharedArrayBuffer#security_requirements&quot;&gt;a whole list of requirements&lt;&#x2F;a&gt; which make sure the sensitive code is delivered safely over HTTPS and remains isolated from other components, just in case they are up to no good.&lt;&#x2F;p&gt;
&lt;p&gt;Any page needing this functionality must be served with the following headers:&lt;label for=&quot;sn-corp-overview&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-corp-overview&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;This is just a high-level overview. For more depth, see &lt;a href=&quot;https:&#x2F;&#x2F;web.dev&#x2F;coop-coep&#x2F;&quot;&gt;https:&#x2F;&#x2F;web.dev&#x2F;coop-coep&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Cross-Origin-Opener-Policy: same-origin
&lt;&#x2F;span&gt;&lt;span&gt;Cross-Origin-Embedder-Policy: require-corp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first header demands that the browser not run our page&#x27;s code together with code from other origins, to prevent those other websites from running &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Spectre_(security_vulnerability)&quot;&gt;Spectre-like&lt;&#x2F;a&gt; attacks on our code. The second header restricts the page to only using resources that have headers&lt;label for=&quot;sn-sec-headers&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-sec-headers&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Cross-Origin_Resource_Policy_(CORP)&quot;&gt;CORP&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;CORS&quot;&gt;CORS&lt;&#x2F;a&gt; headers specifically.&lt;&#x2F;span&gt;
 which opt them into being used on our page.&lt;&#x2F;p&gt;
&lt;p&gt;Scripts loaded into the Playground web workers signal they opt in with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Cross-Origin-Resource-Policy: same-origin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If a worker&#x27;s script is delivered without this header, the browser will refuse to start the worker:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Refused to load &amp;#39;https:&#x2F;&#x2F;play.predr.ag&#x2F;broken_script.js)&amp;#39; worker
&lt;&#x2F;span&gt;&lt;span&gt;because of Cross-Origin-Embedder-Policy.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Worker load was blocked by Cross-Origin-Embedder-Policy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;violating-policy-but-only-sometimes&quot;&gt;Violating policy, but only sometimes&lt;&#x2F;h2&gt;
&lt;p&gt;Back to the story: the &lt;a href=&quot;https:&#x2F;&#x2F;play.predr.ag&#x2F;&quot;&gt;Trustfall Playground&lt;&#x2F;a&gt; was broken in Safari.
The page was visibly missing functionality, and those &quot;worker load was blocked&quot; messages were being printed in the console.&lt;&#x2F;p&gt;
&lt;p&gt;Over the next couple of hours, the adventure unfolded something like this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Wipe out all caches, so we start from a known configuration.&lt;&#x2F;li&gt;
&lt;li&gt;Open the browser&#x27;s dev tools network pane, then reload the page.&lt;&#x2F;li&gt;
&lt;li&gt;Find Safari&#x27;s request for the script that gets blocked.
Is the &lt;code&gt;Cross-Origin-Resource-Policy&lt;&#x2F;code&gt; header set correctly in the response?
Yes.
Unlikely to have been the problem (the page would have also been broken in other browsers too) but &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;b0rk&#x2F;status&#x2F;1570060516839641092&quot;&gt;it&#x27;s important to check our assumptions&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Double-check the top-level page&#x27;s headers too.
They look good.&lt;&#x2F;li&gt;
&lt;li&gt;Nothing &lt;em&gt;obvious&lt;&#x2F;em&gt; is broken.
Look for clues: things that look out of place.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;Checking lots of things that ended up not being the problem...&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Hmm, the script is loaded &lt;em&gt;three times&lt;&#x2F;em&gt; but Safari blocks it (and complains via the console) only &lt;em&gt;twice&lt;&#x2F;em&gt;.
Curious!&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s try to figure out which requests generate which complaints.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Clear caches, and pay close attention to order of requests and console log lines.&lt;&#x2F;li&gt;
&lt;li&gt;First request — miss, works fine.
Two more requests, two cache hits — each with a complaint.&lt;&#x2F;li&gt;
&lt;li&gt;Repeat a few times.
It&#x27;s reproducible!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Time to put the caching logic under a microscope.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;caching-on-the-web&quot;&gt;Caching on the web&lt;&#x2F;h2&gt;
&lt;p&gt;By default, &lt;a href=&quot;https:&#x2F;&#x2F;www.netlify.com&#x2F;blog&#x2F;2017&#x2F;02&#x2F;23&#x2F;better-living-through-caching&#x2F;&quot;&gt;Netlify sends caching headers&lt;&#x2F;a&gt; that ask the browser to ensure any cached copies of resource are up-to-date before being used.
If the browser has the resource in cache, it still makes a request to the server but includes an &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Headers&#x2F;ETag&quot;&gt;Etag&lt;&#x2F;a&gt; value which the server can use to determine if the cached copy is outdated or still good.&lt;&#x2F;p&gt;
&lt;p&gt;On cache miss (outdated or missing Etag), the server responds with &lt;code&gt;200 OK&lt;&#x2F;code&gt; and sends the resource together with any headers — including that &lt;code&gt;Cross-Origin-Resource-Policy&lt;&#x2F;code&gt; header we require.&lt;&#x2F;p&gt;
&lt;p&gt;On cache hit (matching Etag), the server instead &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Status&#x2F;304&quot;&gt;responds with&lt;&#x2F;a&gt; &lt;code&gt;304 Not Modified&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Inspecting the requests, we find a clue: the &lt;code&gt;200 OK&lt;&#x2F;code&gt; responses include our security header, but the &lt;code&gt;304 Not Modified&lt;&#x2F;code&gt; responses do not!&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s run an experiment: disable caching for web worker scripts by setting the &lt;code&gt;Cache-Control: no-store&lt;&#x2F;code&gt; header.
Yes, &lt;code&gt;no-store&lt;&#x2F;code&gt; — confusingly, &lt;code&gt;no-cache&lt;&#x2F;code&gt; means something else:
&lt;blockquote class=&quot;own&quot; cite=&quot;https:&amp;#x2F;&amp;#x2F;developer.mozilla.org&amp;#x2F;en-US&amp;#x2F;docs&amp;#x2F;Web&amp;#x2F;HTTP&amp;#x2F;Headers&amp;#x2F;Cache-Control#response_directives&quot;&gt;
  &lt;p&gt;
    Note that &lt;code&gt;no-cache&lt;&#x2F;code&gt; does not mean &quot;don&#x27;t cache&quot;. &lt;code&gt;no-cache&lt;&#x2F;code&gt; allows caches to store a response but requires them to revalidate it before reuse. If the sense of &quot;don&#x27;t cache&quot; that you want is actually &quot;don&#x27;t store&quot;, then &lt;code&gt;no-store&lt;&#x2F;code&gt; is the directive to use.
  &lt;&#x2F;p&gt;
  &lt;footer&gt;
    &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;developer.mozilla.org&amp;#x2F;en-US&amp;#x2F;docs&amp;#x2F;Web&amp;#x2F;HTTP&amp;#x2F;Headers&amp;#x2F;Cache-Control#response_directives&quot; rel=&quot;noreferrer&quot;&gt;&lt;code&gt;Cache-Control&lt;&#x2F;code&gt; Response Directives, MDN Web Docs&lt;&#x2F;a&gt;
  &lt;&#x2F;footer&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;With caching disabled, Safari loads all web worker scripts successfully, no matter how many times we reload the page.
The problem is definitely related to caching.
But which side is causing it: the browser or the site?&lt;&#x2F;p&gt;
&lt;p&gt;The Playground uses Netlify&#x27;s default caching configuration. Are Netlify&#x27;s defaults broken?&lt;&#x2F;p&gt;
&lt;p&gt;And why does all this work fine in other browsers?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;whose-responsibility-are-these-headers-anyway&quot;&gt;Whose responsibility are these headers, anyway?&lt;&#x2F;h2&gt;
&lt;p&gt;Opening Chrome, we see that Playground works fine there even though the &lt;code&gt;304 Not Modified&lt;&#x2F;code&gt; responses still don&#x27;t include the &lt;code&gt;Cross-Origin-Resource-Policy&lt;&#x2F;code&gt; security header.&lt;label for=&quot;sn-ok-resp&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-ok-resp&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Obviously, &lt;code&gt;200 OK&lt;&#x2F;code&gt; responses &lt;em&gt;do&lt;&#x2F;em&gt; include that header — the site was broken when they did not.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;So we&#x27;re either slipping a script past Chrome&#x27;s security protocols ... or Safari is failing to properly apply the security header on cached resources.&lt;&#x2F;p&gt;
&lt;p&gt;When in doubt, consult the &lt;a href=&quot;https:&#x2F;&#x2F;www.rfc-editor.org&#x2F;rfc&#x2F;rfc9110.html#section-15.4.5&quot;&gt;official specification&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;own&quot; cite=&quot;https:&amp;#x2F;&amp;#x2F;www.rfc-editor.org&amp;#x2F;rfc&amp;#x2F;rfc9110.html#section-15.4.5&quot;&gt;
  &lt;p&gt;
    The 304 (Not Modified) status code indicates that a conditional GET or HEAD request has been received and would have resulted in a &lt;a href=&quot;https:&#x2F;&#x2F;www.rfc-editor.org&#x2F;rfc&#x2F;rfc9110.html#status.200&quot;&gt;200 (OK)&lt;&#x2F;a&gt; response [...] the server is therefore redirecting the client to make use of that stored representation as if it were the content of a &lt;a href=&quot;https:&#x2F;&#x2F;www.rfc-editor.org&#x2F;rfc&#x2F;rfc9110.html#status.200&quot;&gt;200 (OK)&lt;&#x2F;a&gt; response.&lt;br&gt;[...]&lt;br&gt;Since the goal of a 304 response is to minimize information transfer when the recipient already has one or more cached representations, a sender SHOULD NOT generate representation metadata other than the above listed fields unless said metadata exists for the purpose of guiding cache updates [...]
  &lt;&#x2F;p&gt;
  &lt;footer&gt;
    &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;www.rfc-editor.org&amp;#x2F;rfc&amp;#x2F;rfc9110.html#section-15.4.5&quot; rel=&quot;noreferrer&quot;&gt;Section 15.4.5.: 304 Not Modified, RFC 9110, Internet Engineering Task Force (IETF)&lt;&#x2F;a&gt;
  &lt;&#x2F;footer&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As the &lt;code&gt;Cross-Origin-Resource-Policy&lt;&#x2F;code&gt; header has nothing to do with cache updates, the spec unambiguously says it &lt;em&gt;should not&lt;&#x2F;em&gt; be included in &lt;code&gt;304 Not Modified&lt;&#x2F;code&gt; responses.
Instead, the client is expected to use the stored resource as if from a &lt;code&gt;200 OK&lt;&#x2F;code&gt; response.
This surely includes any relevant headers that the &lt;code&gt;200 OK&lt;&#x2F;code&gt; would (and previously did!) contain, like our &lt;code&gt;Cross-Origin-Resource-Policy&lt;&#x2F;code&gt; header.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-bug-in-safari-webkit&quot;&gt;A bug in Safari &#x2F; WebKit&lt;&#x2F;h2&gt;
&lt;p&gt;Knowing what we know now, here&#x27;s a review of what was breaking in Playground and why:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;On cache miss, Safari gets the web worker script with proper security headers, and everything is fine.&lt;&#x2F;li&gt;
&lt;li&gt;On cache hit, the server doesn&#x27;t include security headers, expecting Safari to act as if the response were the prior &lt;code&gt;200 OK&lt;&#x2F;code&gt; which included those headers.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Safari does not do so&lt;&#x2F;em&gt;, and the missing headers cause the web worker script to be rejected.&lt;&#x2F;li&gt;
&lt;li&gt;If the page loads the script multiple times, we&#x27;ll see one rejection message in the console for each cache hit for that script.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The specification points to the Safari caching code as the cause of the bug.&lt;&#x2F;p&gt;
&lt;p&gt;But it&#x27;s also perfectly understandable how a bug like this might happen.
Browsers are among the most complex pieces of software in existence.
This bug is a complex interaction of different systems evolved under competing pressures: maximum performance versus uncompromising security.&lt;&#x2F;p&gt;
&lt;p&gt;Rather than being frustrated with Safari &#x2F; WebKit maintainers, we should appreciate their hard work, and make their job just a bit easier by providing the best possible description and reproduction of the bug.
I filed &lt;a href=&quot;https:&#x2F;&#x2F;bugs.webkit.org&#x2F;show_bug.cgi?id=245346&quot;&gt;a bug report for this bug&lt;&#x2F;a&gt; with the best information I could gather with my limited web development experience.&lt;&#x2F;p&gt;
&lt;p&gt;In the meantime, we can work around the bug by disabling caching for web worker scripts using our &lt;code&gt;Cache-Control: no-store&lt;&#x2F;code&gt; header.&lt;&#x2F;p&gt;
&lt;p&gt;Playground is sadly not yet functional on Safari or iOS due to another &lt;a href=&quot;https:&#x2F;&#x2F;bugs.webkit.org&#x2F;show_bug.cgi?id=238442&quot;&gt;more severe Safari&#x2F;WebKit bug&lt;&#x2F;a&gt; that the other Playground authors and I &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PredragGruevski&#x2F;status&#x2F;1569477190387118080&quot;&gt;haven&#x27;t managed to work around yet&lt;&#x2F;a&gt;.
We have some ideas, though, so all is not lost!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;Bojan93112526&quot;&gt;Bojan Serafimov&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;fasterthanli.me&#x2F;&quot;&gt;Amos Wenger&lt;&#x2F;a&gt; for their feedback on drafts of this post.&lt;&#x2F;em&gt;
&lt;em&gt;Any mistakes are mine alone.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Toward fearless cargo update</title>
        <published>2022-08-25T00:00:00+00:00</published>
        <updated>2022-08-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/toward-fearless-cargo-update/"/>
        <id>https://predr.ag/blog/toward-fearless-cargo-update/</id>
        
        <summary type="html">&lt;p&gt;&lt;em&gt;I recently built &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;, a linter that ensures crates adhere to semantic versioning. This is why and how I built it.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Fearless development is a key theme throughout Rust.
&lt;a href=&quot;https:&#x2F;&#x2F;rustacean-principles.netlify.app&#x2F;how_rust_empowers&#x2F;reliable.html&quot;&gt;&quot;If it compiles, it works&quot;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch16-00-concurrency.html&quot;&gt;fearless concurrency&lt;&#x2F;a&gt;, etc.&lt;&#x2F;p&gt;
&lt;p&gt;But there&#x27;s one aspect of Rust (and nearly all other languages) that isn&#x27;t entirely fearless yet: &lt;code&gt;cargo update&lt;&#x2F;code&gt;, upgrading the versions of the project&#x27;s dependencies.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Compiler Adventures, part 3: Value Numbering</title>
        <published>2022-05-17T00:00:00+00:00</published>
        <updated>2022-05-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/compiler-adventures-part3-value-numbering/"/>
        <id>https://predr.ag/blog/compiler-adventures-part3-value-numbering/</id>
        
        <content type="html" xml:base="https://predr.ag/blog/compiler-adventures-part3-value-numbering/">&lt;p&gt;&lt;em&gt;A beginner-friendly introduction to compilers: follow along as we build a compiler from scratch, or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&quot;&gt;fork the code on GitHub&lt;&#x2F;a&gt; and add your own optimizations too! In this episode: value numbering helps track how values are used in the program.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;compiler-adventures-part2-constant-propagation&#x2F;&quot;&gt;Last time on Compiler Adventures&lt;&#x2F;a&gt;, we implemented constant propagation: if &lt;code&gt;x = 2&lt;&#x2F;code&gt; and &lt;code&gt;y = 3&lt;&#x2F;code&gt; then &lt;code&gt;add x y&lt;&#x2F;code&gt; produces &lt;code&gt;5&lt;&#x2F;code&gt;. While it did help detect a few no-ops, we saw the optimization quickly become ineffective as it got overwhelmed by too many &lt;code&gt;Unknown&lt;&#x2F;code&gt; values.&lt;&#x2F;p&gt;
&lt;p&gt;In this episode, we&#x27;ll equip our compiler with the key tool for reasoning about those &lt;code&gt;Unknown&lt;&#x2F;code&gt; values. The starting code for this episode is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;tree&#x2F;part3&quot;&gt;on GitHub&lt;&#x2F;a&gt;, on branch &lt;code&gt;part3&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;figure&gt;
    
    
    

    
    
    

    
    
    

    
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;VLAArrayNiteClouds.59bf194ed778a9fb.jpg&quot; alt=&quot;Dark wispy clouds over a row of massive radio telescope dishes stretching toward the horizon, their white paint standing out against the background in the fading light.&quot;&gt;
    &lt;label for=&quot;mn-lead&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;mn-lead&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
    &lt;span class=&quot;marginnote figcaption&quot;&gt;
        A cloudy twilight over the giant radio telescopes of the Very Large Array, which has been helping humanity peer into the depths of the unknown for more than 40 years. In this episode, we&#x27;ll also do some peering into &lt;code&gt;Unknown&lt;&#x2F;code&gt;.
        Source:
        &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;public.nrao.edu&amp;#x2F;gallery&amp;#x2F;a-cloudy-twilight-at-the-vla&quot;&gt;NRAO&amp;#x2F;AUI&amp;#x2F;NSF&lt;&#x2F;a&gt;, CC BY 3.0
    &lt;&#x2F;span&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Let&#x27;s begin by solving the challenge from &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;compiler-adventures-part2-constant-propagation&#x2F;&quot;&gt;the last episode&lt;&#x2F;a&gt;. When examining the following program, our compiler claimed that the program ends with an &lt;code&gt;Unknown&lt;&#x2F;code&gt; value in the &lt;code&gt;w&lt;&#x2F;code&gt; register:&lt;label for=&quot;sn-1&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-1&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;I&#x27;m introducing a small change in notation to avoid confusion: instead of &lt;code&gt;Input(i)&lt;&#x2F;code&gt;, from now on I&#x27;ll write &lt;code&gt;Input_i&lt;&#x2F;code&gt;. This will help us avoid confusing &quot;i-th program input&quot; with &quot;input to the program with value &lt;code&gt;i&lt;&#x2F;code&gt;.&quot; When we know a program value represents the number &lt;code&gt;i&lt;&#x2F;code&gt;, we&#x27;ll continue to use the notation &lt;code&gt;Exact(i)&lt;&#x2F;code&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;div class=&quot;outer-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;5aa15ad19c0fe98723902fb70e96acf3.js?file=ep2_challenge.log&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Let&#x27;s simulate running this program:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When the program starts, all registers are set to zero: &lt;code&gt;w = x = y = z = 0&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;For &lt;code&gt;inp w&lt;&#x2F;code&gt;, say the input number is 5, so now &lt;code&gt;w = 5&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;add x w&lt;&#x2F;code&gt; computes &lt;code&gt;x = x + w&lt;&#x2F;code&gt; with &lt;code&gt;x = 0, w = 5&lt;&#x2F;code&gt;, so we get &lt;code&gt;x = 5&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;eql w x&lt;&#x2F;code&gt; checks &lt;code&gt;w&lt;&#x2F;code&gt; and &lt;code&gt;x&lt;&#x2F;code&gt; for equality. They are both set to 5, so we get &lt;code&gt;w = 1&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Try simulating again with a different number as an input for &lt;code&gt;inp w&lt;&#x2F;code&gt;. Does the final value of &lt;code&gt;w&lt;&#x2F;code&gt; change? &lt;em&gt;No — it&#x27;s always 1!&lt;&#x2F;em&gt; What&#x27;s going on here?&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s zoom in on the second-to-last instruction: &lt;code&gt;add x w&lt;&#x2F;code&gt;. The values that instruction operates on are &lt;code&gt;w = Input_0&lt;&#x2F;code&gt; i.e. &quot;the first program input value,&quot; and &lt;code&gt;x = Exact(0)&lt;&#x2F;code&gt; i.e. the number zero. After performing its operation &lt;code&gt;x = x + w&lt;&#x2F;code&gt;, our code from the previous episode decides the result is &lt;code&gt;x = Unknown&lt;&#x2F;code&gt;. This is technically true! We can&#x27;t know what value &lt;code&gt;x&lt;&#x2F;code&gt; has exactly. But we can do better than &lt;code&gt;Unknown&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;We know &lt;code&gt;x&lt;&#x2F;code&gt; was zero before &lt;code&gt;w&lt;&#x2F;code&gt; got added to it: &lt;code&gt;x = 0 + w&lt;&#x2F;code&gt;, so it must be the case that &lt;code&gt;x = w = Input_0&lt;&#x2F;code&gt; after the instruction. Imagine our compiler code was able to determine this as well, and thus computed &lt;code&gt;x = Input_0&lt;&#x2F;code&gt; as the outcome of the addition instead of &lt;code&gt;x = Unknown&lt;&#x2F;code&gt;. Continuing to the next instruction: &lt;code&gt;eql w x&lt;&#x2F;code&gt; then compares &lt;code&gt;w = Input_0&lt;&#x2F;code&gt; and &lt;code&gt;x = Input_0&lt;&#x2F;code&gt;. Those are clearly the same value! So the result of &lt;code&gt;eql w x&lt;&#x2F;code&gt; would be &lt;code&gt;w = Exact(1)&lt;&#x2F;code&gt;, just as our hand-simulation of the program showed!&lt;&#x2F;p&gt;
&lt;div class=&quot;outer-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;f2c1b7c206e17654ac20f706a85364e3.js?file=ep2_challenge_solved.log&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The key observation: &lt;code&gt;Input_0&lt;&#x2F;code&gt; represents a &lt;em&gt;specific fixed value&lt;&#x2F;em&gt;. We can&#x27;t know what number it represents until we run the program, but for a given execution of the program, it&#x27;s always going to be the same fixed number: the first number in the input. This is why we can know that &lt;code&gt;w = Input_0&lt;&#x2F;code&gt; and &lt;code&gt;x = Input_0&lt;&#x2F;code&gt; are equal to each other, and therefore &lt;code&gt;eql w x&lt;&#x2F;code&gt; results in an output of &lt;code&gt;w = Exact(1)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We managed to evaluate the &lt;code&gt;eql&lt;&#x2F;code&gt; instruction over values we don&#x27;t know exactly! Neat, right?&lt;&#x2F;p&gt;
&lt;p&gt;Could we do the same thing with &lt;code&gt;Unknown&lt;&#x2F;code&gt; values as well?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-known-about-unknown&quot;&gt;What is known about Unknown?&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s set up an equivalent example to the last episode’s challenge, but with an &lt;code&gt;eql w x&lt;&#x2F;code&gt; instruction that evaluates two &lt;code&gt;Unknown&lt;&#x2F;code&gt; values instead of two inputs.&lt;&#x2F;p&gt;
&lt;p&gt;Say we have some long program that’s been running for a while, and all the registers currently have &lt;code&gt;Unknown&lt;&#x2F;code&gt; values. The next instructions in the program do the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;zero out register &lt;code&gt;x&lt;&#x2F;code&gt; by multiplying its value by 0, then&lt;&#x2F;li&gt;
&lt;li&gt;make &lt;code&gt;x&lt;&#x2F;code&gt; also hold whatever value was in &lt;code&gt;w&lt;&#x2F;code&gt; by running &lt;code&gt;add x w&lt;&#x2F;code&gt;, and finally&lt;&#x2F;li&gt;
&lt;li&gt;compare &lt;code&gt;w&lt;&#x2F;code&gt; and &lt;code&gt;x&lt;&#x2F;code&gt; for equality using &lt;code&gt;eql w x&lt;&#x2F;code&gt; as before.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;outer-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;3db71d95fd0fc709f5820fd1a9b7f2bd.js?file=ep3_eql_of_unknowns.log&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Using the same reasoning as earlier in the post, we see that &lt;code&gt;x&lt;&#x2F;code&gt; and &lt;code&gt;w&lt;&#x2F;code&gt; must again have the same value at the point where they get compared, so the result of the equality check instruction should be &lt;code&gt;w = Exact(1)&lt;&#x2F;code&gt;. And yet, looking at the last row of the printout, our compiler claims that comparing &lt;code&gt;w = Unknown&lt;&#x2F;code&gt; to &lt;code&gt;x = Unknown&lt;&#x2F;code&gt; produces an output of &lt;code&gt;Unknown&lt;&#x2F;code&gt;. What’s up with that?&lt;&#x2F;p&gt;
&lt;p&gt;Right now, &lt;code&gt;Unknown&lt;&#x2F;code&gt; in our compiler means “we know absolutely nothing about this value.” It does not refer to a specific-yet-unknown value, so we can’t say for sure if two &lt;code&gt;Unknown&lt;&#x2F;code&gt; values are equal or not equal to each other. This is unlike input values, where &lt;code&gt;Input_0&lt;&#x2F;code&gt; refers specifically to the first program input, &lt;code&gt;Input_1&lt;&#x2F;code&gt; refers to the second program input, etc.&lt;&#x2F;p&gt;
&lt;p&gt;The registers &lt;code&gt;w = Input_0&lt;&#x2F;code&gt; and &lt;code&gt;x = Input_0&lt;&#x2F;code&gt; compare equal to each other because they both refer to the same fixed but still-unknown value. When our compiler evaluated &lt;code&gt;add x w&lt;&#x2F;code&gt; for &lt;code&gt;x = Exact(0)&lt;&#x2F;code&gt; and &lt;code&gt;w = Unknown&lt;&#x2F;code&gt;, it found the result was &lt;code&gt;x = Unknown&lt;&#x2F;code&gt; — but it had no way to represent that this is &lt;em&gt;the same&lt;&#x2F;em&gt; &lt;code&gt;Unknown&lt;&#x2F;code&gt; &lt;em&gt;that is also currently in&lt;&#x2F;em&gt; &lt;code&gt;w&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Just like we currently number program input values as &lt;code&gt;Input_0, Input_1&lt;&#x2F;code&gt; and so on, what if we tried numbering &lt;em&gt;every value&lt;&#x2F;em&gt; we encounter in the program, including &lt;code&gt;Unknown&lt;&#x2F;code&gt; ones? Then, we could express that two registers hold the same &lt;code&gt;Unknown&lt;&#x2F;code&gt; value: e.g. “the fifth value in the program, which is &lt;code&gt;Unknown&lt;&#x2F;code&gt;.” For convenience, we’ll use the notation &lt;code&gt;5: Unknown&lt;&#x2F;code&gt; to describe that “fifth program value, which is &lt;code&gt;Unknown&lt;&#x2F;code&gt;.”&lt;&#x2F;p&gt;
&lt;p&gt;We’ll apply this numbering scheme to all three kinds of values our compiler may encounter in the program: &lt;code&gt;Exact, Input, Unknown&lt;&#x2F;code&gt;. We’ll use a simple counter to ensure each new value gets its own unique number — let’s call this identifier a &lt;code&gt;Vid&lt;&#x2F;code&gt;. Whenever we know that an operation preserves the value of one of its operands (like adding a number to zero), we’ll keep the same value with the same &lt;code&gt;Vid&lt;&#x2F;code&gt; instead of making a new value with a new &lt;code&gt;Vid&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementing-our-idea&quot;&gt;Implementing our idea&lt;&#x2F;h2&gt;
&lt;p&gt;To help us skip straight to the interesting parts, I&#x27;ve added &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part3_finished&#x2F;src&#x2F;program.rs#L7-L49&quot;&gt;about 40 lines of boilerplate and helper code behind the scenes&lt;&#x2F;a&gt;. We now have a &lt;code&gt;Program&lt;&#x2F;code&gt; type that keeps track of which &lt;code&gt;Vid&lt;&#x2F;code&gt; numbers we&#x27;ve already used, and has three helper methods on it called &lt;code&gt;new_exact_value(), new_unknown_value(), new_input_value()&lt;&#x2F;code&gt; which ensure we correctly assign unique &lt;code&gt;Vid&lt;&#x2F;code&gt; numbers to newly-created values.&lt;&#x2F;p&gt;
&lt;p&gt;First, let&#x27;s implement the &lt;code&gt;Vid&lt;&#x2F;code&gt; type that represents the unique value IDs, and insert it into our existing &lt;code&gt;Value&lt;&#x2F;code&gt; enum&#x27;s variants.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;compiler-adventures-part2-constant-propagation&#x2F;&quot;&gt;In the previous episode&lt;&#x2F;a&gt;, we defined the &lt;code&gt;Value&lt;&#x2F;code&gt; enum like this:&lt;&#x2F;p&gt;
&lt;div class=&quot;captioned-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;1bd7da4a0d0ee1dc6e821148f6a5464c.js?file=value.rs&quot;&gt;&lt;&#x2F;script&gt;
  &lt;label for=&quot;mn-prevval&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;mn-prevval&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
  &lt;span class=&quot;marginnote&quot;&gt;Excerpt from &lt;code&gt;optimization.rs&lt;&#x2F;code&gt;. See this code in context &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part2_finished&#x2F;src&#x2F;optimization.rs#L101-L107&quot;&gt;in the GitHub repo&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Let&#x27;s change it to the following:&lt;&#x2F;p&gt;
&lt;div class=&quot;captioned-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;b71b2ea5dea55e8e14ca1e1a0352132d.js?file=value_and_vid.rs&quot;&gt;&lt;&#x2F;script&gt;
  &lt;label for=&quot;mn-nextval&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;mn-nextval&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
  &lt;span class=&quot;marginnote&quot;&gt;Excerpt from &lt;code&gt;values.rs&lt;&#x2F;code&gt;. See this code in context &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part3_finished&#x2F;src&#x2F;values.rs#L5-L49&quot;&gt;in the GitHub repo&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;When considering two &lt;code&gt;Value&lt;&#x2F;code&gt; entities in a program, when can our compiler know for sure that they must represent the same number? It&#x27;s in one of these cases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;if both are &lt;code&gt;Value::Exact&lt;&#x2F;code&gt; variants representing the same known constant number, or&lt;&#x2F;li&gt;
&lt;li&gt;if both of them have the same &lt;code&gt;Vid&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Importantly, if two &lt;code&gt;Value&lt;&#x2F;code&gt; entities have different &lt;code&gt;Vid&lt;&#x2F;code&gt; fields, this &lt;em&gt;does not&lt;&#x2F;em&gt; mean they must always hold different numbers. Different &lt;code&gt;Vid&lt;&#x2F;code&gt; fields means that we &lt;em&gt;don&#x27;t know one way or the other&lt;&#x2F;em&gt; whether the values are equivalent. For example, &lt;code&gt;5: Input_0&lt;&#x2F;code&gt; and &lt;code&gt;6: Input_1&lt;&#x2F;code&gt; have different &lt;code&gt;Vid&lt;&#x2F;code&gt; fields: &lt;code&gt;5&lt;&#x2F;code&gt; and &lt;code&gt;6&lt;&#x2F;code&gt;. Depending on the inputs given to any run of the program, they may sometimes but not always happen to represent the same number.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s implement this logic in the &lt;code&gt;==&lt;&#x2F;code&gt; operator for &lt;code&gt;Value&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;captioned-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;a23f80b0a1f5a9653ddc5dca55077244.js?file=value_eq.rs&quot;&gt;&lt;&#x2F;script&gt;
  &lt;label for=&quot;mn-valeq&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;mn-valeq&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
  &lt;span class=&quot;marginnote&quot;&gt;Excerpt from &lt;code&gt;values.rs&lt;&#x2F;code&gt;. See this code in context &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part3_finished&#x2F;src&#x2F;values.rs#L51-L58&quot;&gt;in the GitHub repo&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We can now simplify our no-op detection code to take advantage of our new ability to check values for equality. Instead of looking for a hardcoded set of instructions and values, we can directly compare the register values before and after each instruction. If an instruction did not change the value of its target register and had no other side-effects, that instruction is a no-op by definition.&lt;label for=&quot;sn-2&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-2&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;We have to consider instruction side-effects here. For example, reading program input via an &lt;code&gt;inp&lt;&#x2F;code&gt; instruction affects state that is outside the &lt;code&gt;w, x, y, z&lt;&#x2F;code&gt; registers: the next number that will be read by the next &lt;code&gt;inp&lt;&#x2F;code&gt; instruction. Eliminating an &lt;code&gt;inp&lt;&#x2F;code&gt; instruction would cause subsequent &lt;code&gt;inp&lt;&#x2F;code&gt; to read different program inputs. Fortunately, our implementation already guarantees that &lt;code&gt;inp&lt;&#x2F;code&gt; instructions can never be considered no-ops: they are assigned a brand-new &lt;code&gt;Vid&lt;&#x2F;code&gt; which could not possibly have been shared with the value previously in the destination register. If a future extension to the MONAD language adds more instructions, we may have to update our no-op detection code. For example, consider a hypothetical &lt;code&gt;print x&lt;&#x2F;code&gt; instruction that outputs the value of the selected register &lt;code&gt;x&lt;&#x2F;code&gt;: it doesn&#x27;t change the value of any register, and yet it isn&#x27;t a no-op because of the side-effect of printing out a number.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;So we can completely remove the &lt;code&gt;is_instruction_no_op()&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part2_finished&#x2F;src&#x2F;optimization.rs#L38-L67&quot;&gt;function we previously wrote&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part2_finished&#x2F;src&#x2F;optimization.rs#L88-L92&quot;&gt;replace its use inside&lt;&#x2F;a&gt; &lt;code&gt;constant_propagation()&lt;&#x2F;code&gt; with a simple equality check between the old and new values of the destination register of the current instruction:&lt;&#x2F;p&gt;
&lt;div class=&quot;captioned-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;fbc5e76563b7de409bf1051659ca9883.js?file=no_op_detection.rs&quot;&gt;&lt;&#x2F;script&gt;
  &lt;label for=&quot;mn-noop&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;mn-noop&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
  &lt;span class=&quot;marginnote&quot;&gt;Excerpt from &lt;code&gt;optimization.rs&lt;&#x2F;code&gt;. See this code in context &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part3_finished&#x2F;src&#x2F;optimization.rs#L123-L127&quot;&gt;in the GitHub repo&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;code&gt;constant_propagation()&lt;&#x2F;code&gt; will also require a small refactor to generate &lt;code&gt;Vid&lt;&#x2F;code&gt; data for each &lt;code&gt;Value&lt;&#x2F;code&gt;. This is straightforward and uses the convenience functions I earlier mentioned I added &quot;off screen.&quot; Here&#x27;s what our final &lt;code&gt;constant_propagation()&lt;&#x2F;code&gt; implementation looks like:&lt;&#x2F;p&gt;
&lt;div class=&quot;captioned-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;542e945a32eb1e7909060bc282586aeb.js?file=constant_propagation.rs&quot;&gt;&lt;&#x2F;script&gt;
  &lt;label for=&quot;mn-constprop&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;mn-constprop&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
  &lt;span class=&quot;marginnote&quot;&gt;Excerpt from &lt;code&gt;optimization.rs&lt;&#x2F;code&gt;. See this code in context &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part3_finished&#x2F;src&#x2F;optimization.rs#L102-L134&quot;&gt;in the GitHub repo&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Finally, we&#x27;ll need to update &lt;code&gt;evaluate_instruction()&lt;&#x2F;code&gt; to help it avoid generating new &lt;code&gt;Vid&lt;&#x2F;code&gt; entries whenever it&#x27;s possible to reuse one of the values on which the instruction operates. Recall the situation from the challenge program we&#x27;re solving this week:&lt;&#x2F;p&gt;
&lt;div class=&quot;outer-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;5aa15ad19c0fe98723902fb70e96acf3.js?file=ep2_challenge.log&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We want &lt;code&gt;evaluate_instruction()&lt;&#x2F;code&gt; applied to &lt;code&gt;add x w&lt;&#x2F;code&gt; to realize that the result in &lt;code&gt;x&lt;&#x2F;code&gt; is going to be that same &lt;code&gt;Input_0&lt;&#x2F;code&gt; value that is also in &lt;code&gt;w&lt;&#x2F;code&gt;, and not some new value for which nothing is known. Each of the possible instructions has different special cases, so we&#x27;ll split &lt;code&gt;evaluate_instruction()&lt;&#x2F;code&gt; into per-instruction cases:&lt;&#x2F;p&gt;
&lt;div class=&quot;captioned-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;1b857664558ccc59f3a6111622c3c136.js?file=evaluate_instruction.rs&quot;&gt;&lt;&#x2F;script&gt;
  &lt;label for=&quot;mn-evalinstr&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;mn-evalinstr&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
  &lt;span class=&quot;marginnote&quot;&gt;Excerpt from &lt;code&gt;optimization.rs&lt;&#x2F;code&gt;. See this code in context &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part3_finished&#x2F;src&#x2F;optimization.rs#L9-L23&quot;&gt;in the GitHub repo&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Then, we&#x27;ll implement the per-instruction functions, each with their own special cases. For example, here&#x27;s &lt;code&gt;evaluate_add()&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;captioned-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;659c03a634921b58730c42408e22fdfc.js?file=evaluate_add.rs&quot;&gt;&lt;&#x2F;script&gt;
  &lt;label for=&quot;mn-evaladd&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;mn-evaladd&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
  &lt;span class=&quot;marginnote&quot;&gt;Excerpt from &lt;code&gt;optimization.rs&lt;&#x2F;code&gt;. See this code in context &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part3_finished&#x2F;src&#x2F;optimization.rs#L25-L35&quot;&gt;in the GitHub repo&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Here&#x27;s &lt;code&gt;evaluate_mul()&lt;&#x2F;code&gt;, which has a few more cases to consider:&lt;&#x2F;p&gt;
&lt;div class=&quot;captioned-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;dd37d7774e85e9b812f61c044df44bd2.js?file=evaluate_mul.rs&quot;&gt;&lt;&#x2F;script&gt;
  &lt;label for=&quot;mn-evalmul&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;mn-evalmul&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
  &lt;span class=&quot;marginnote&quot;&gt;Excerpt from &lt;code&gt;optimization.rs&lt;&#x2F;code&gt;. See this code in context &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part3_finished&#x2F;src&#x2F;optimization.rs#L37-L52&quot;&gt;in the GitHub repo&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Most of the other instructions follow the same pattern, so I won&#x27;t include all of them in this post — you can find them all &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part3_finished&#x2F;src&#x2F;optimization.rs#L5-L93&quot;&gt;in the GitHub repo&lt;&#x2F;a&gt;. The exception is &lt;code&gt;evaluate_equal()&lt;&#x2F;code&gt; which has just a touch more nuance:&lt;&#x2F;p&gt;
&lt;div class=&quot;captioned-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;791a1164c61fcf11320e4a78d8afde4d.js?file=evaluate_equal.rs&quot;&gt;&lt;&#x2F;script&gt;
  &lt;label for=&quot;mn-evaleql&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;mn-evaleql&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
  &lt;span class=&quot;marginnote&quot;&gt;Excerpt from &lt;code&gt;optimization.rs&lt;&#x2F;code&gt;. See this code in context &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part3_finished&#x2F;src&#x2F;optimization.rs#L84-L100&quot;&gt;in the GitHub repo&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;And like that, we&#x27;ve implemented &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Value_numbering&quot;&gt;value numbering&lt;&#x2F;a&gt;.&lt;label for=&quot;sn-3&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-3&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Specifically, we&#x27;ve implemented &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Value_numbering#Global_value_numbering&quot;&gt;&lt;em&gt;global&lt;&#x2F;em&gt; value numbering&lt;&#x2F;a&gt;. The difference between global and local value numbering is whether the numbered values apply to the entire program, or are valid only within a given function, if-statement, loop, or similar program component (called a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Basic_block&quot;&gt;&quot;basic block&quot;&lt;&#x2F;a&gt;). The MONAD language does not have any functions, if-statements, or loops — making the entire program a single basic block — so our value numbering is global because it applies to the entire program. This simplicity is part of why this series chooses MONAD as the language to compile and optimize: its simplicity makes it easier to explain compiler ideas one at a time without requiring a lot of prerequisite knowledge. Case in point: basic blocks are a fundamental idea in compilers and a prerequisite for building a compiler for any language like Python or Rust or C&#x2F;C++, yet three episodes into the blog series, the first mention of the term &quot;basic block&quot; is in this entirely-optional footnote.&lt;&#x2F;span&gt;

As expected, our compiler now figures out that our challenge program ends with the number &lt;code&gt;1&lt;&#x2F;code&gt; in the &lt;code&gt;x&lt;&#x2F;code&gt; register instead of an &lt;code&gt;Unknown&lt;&#x2F;code&gt; value! 🎉&lt;&#x2F;p&gt;
&lt;div class=&quot;outer-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;323e8c8defaf9bd5bac423b1822309e4.js?file=value_numbering_outcome.log&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We&#x27;re again interested in the &quot;real-world&quot; impact of our optimization, as measured on the standard Advent of Code MONAD input program.&lt;&#x2F;p&gt;
&lt;p&gt;First, what kind of impact do we &lt;em&gt;expect&lt;&#x2F;em&gt; to find?&lt;&#x2F;p&gt;
&lt;p&gt;Without value numbering, in &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;compiler-adventures-part2-constant-propagation&#x2F;&quot;&gt;our previous Compiler Adventure&lt;&#x2F;a&gt; we saw our compiler was completely unable to reason about any value that is not &lt;code&gt;Exact&lt;&#x2F;code&gt;. Operations on &lt;code&gt;Input&lt;&#x2F;code&gt; values would produce &lt;code&gt;Unknown&lt;&#x2F;code&gt; values as we saw in the challenge program, and &lt;code&gt;Unknown&lt;&#x2F;code&gt; represented a total absence of any information at all.&lt;&#x2F;p&gt;
&lt;p&gt;In fact, the lack of value numbering meant our compiler was incapable of even simple reasoning like &quot;registers don&#x27;t change their value unless they are written to.&quot; For example, say the value in register &lt;code&gt;w&lt;&#x2F;code&gt; was &lt;code&gt;Unknown&lt;&#x2F;code&gt; and the compiler was considering an instruction that did not use &lt;code&gt;w&lt;&#x2F;code&gt;, such as &lt;code&gt;mul x y&lt;&#x2F;code&gt;. The value of &lt;code&gt;w&lt;&#x2F;code&gt; after that instruction would remain &lt;code&gt;Unknown&lt;&#x2F;code&gt; — but since &lt;code&gt;Unknown&lt;&#x2F;code&gt; values had no way to be compared for equality, even the &quot;before&quot; and &quot;after&quot; &lt;code&gt;Unknown&lt;&#x2F;code&gt; values of &lt;code&gt;w&lt;&#x2F;code&gt; could not be considered equal.&lt;&#x2F;p&gt;
&lt;p&gt;This severely limited our compiler&#x27;s ability to optimize MONAD code in the previous episode. In this episode, we&#x27;ve helped our compiler gain more insight about how &lt;code&gt;Unknown&lt;&#x2F;code&gt; values are used, but there aren&#x27;t many cases where value numbering &lt;em&gt;by itself&lt;&#x2F;em&gt; allows the compiler to eliminate instructions and optimize a program. We haven&#x27;t yet implemented any of the powerful optimizations that value numbering makes possible, but we&#x27;ve laid all the groundwork we&#x27;ll rely on in the next episodes! So we don&#x27;t expect to see much if any speedup just yet, and we should find a better way to measure our work.&lt;&#x2F;p&gt;
&lt;p&gt;A good metric for our work would capture how much difference adding the compiler equivalent of object permanence makes. In other words, when our compiler sees a non-&lt;code&gt;Exact&lt;&#x2F;code&gt; value, how often does it know that value to be identical to another value used elsewhere in the program?&lt;&#x2F;p&gt;
&lt;p&gt;Without value numbering, the answer would be &quot;never&quot; i.e. 0% of the time. Let&#x27;s update our compiler to measure these new stats:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo run registers sample_programs&#x2F;aoc_challenge.txt
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; ... snip ... &amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;Total non-input instructions: 238
&lt;&#x2F;span&gt;&lt;span&gt;- with 1+ non-exact value:    218 (91.6%)
&lt;&#x2F;span&gt;&lt;span&gt;- without any exact values:    53 (22.3%)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Total non-exact values uses: 462
&lt;&#x2F;span&gt;&lt;span&gt;- number of unique values: 191 (41.3%)
&lt;&#x2F;span&gt;&lt;span&gt;- non-unique uses: 271 (58.7%)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the Advent of Code MONAD program, instructions reference or produce an &lt;code&gt;Unknown&lt;&#x2F;code&gt; or &lt;code&gt;Input&lt;&#x2F;code&gt; value 462 times. Value numbering determined that there are no more than 191 (41.3%) unique &lt;code&gt;Unknown&lt;&#x2F;code&gt; or &lt;code&gt;Input&lt;&#x2F;code&gt; values in the program; the remaining 271 uses (58.7%) are guaranteed to be reuses of a value already in existence elsewhere. Each of these repeated uses is an opportunity for future optimizations! For now, that&#x27;s a job well done!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrap-up-challenge-question&quot;&gt;Wrap up + challenge question&lt;&#x2F;h2&gt;
&lt;p&gt;The completed code from this post is on branch &lt;code&gt;part3_finished&lt;&#x2F;code&gt; on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;tree&#x2F;part3_finished&quot;&gt;GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the meantime, consider the &lt;code&gt;eql_2_on_eql_result&lt;&#x2F;code&gt; program below, which is also &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part3_finished&#x2F;sample_programs&#x2F;eql_2_on_eql_result.txt&quot;&gt;available on GitHub&lt;&#x2F;a&gt; in the &lt;code&gt;sample_programs&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;tree&#x2F;part3_finished&#x2F;sample_programs&quot;&gt;directory&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;inp w
&lt;&#x2F;span&gt;&lt;span&gt;inp x
&lt;&#x2F;span&gt;&lt;span&gt;eql w x
&lt;&#x2F;span&gt;&lt;span&gt;eql w 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What is the value of &lt;code&gt;w&lt;&#x2F;code&gt; at the end of the program? Our compiler says it&#x27;s &lt;code&gt;9: Unknown&lt;&#x2F;code&gt; — can you do better?&lt;&#x2F;p&gt;
&lt;div class=&quot;outer-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;04dc411433533b97af1d316f8a2955ee.js?file=eql_2_on_eql_result.log&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;All this and more in the next Compiler Adventure — see you next time!&lt;&#x2F;p&gt;
&lt;p&gt;If you liked this post, please share it with friends — compilers are for everyone!
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PredragGruevski&quot;&gt;Reach out to me on Twitter&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=31412996&quot;&gt;join the discussion on HackerNews&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Thanks to Paul Hemberger, James Logan, Russell Cohen, and &lt;a href=&quot;https:&#x2F;&#x2F;vtjeng.com&#x2F;&quot;&gt;Vincent Tjeng&lt;&#x2F;a&gt; for their feedback on drafts of this post. Any mistakes are mine alone.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>To ace exams, get better at the easy questions</title>
        <published>2022-04-01T00:00:00+00:00</published>
        <updated>2022-04-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/to-ace-exams-get-better-at-the-easy-questions/"/>
        <id>https://predr.ag/blog/to-ace-exams-get-better-at-the-easy-questions/</id>
        
        <content type="html" xml:base="https://predr.ag/blog/to-ace-exams-get-better-at-the-easy-questions/">&lt;p&gt;&lt;em&gt;Happy April 1st! A group of folks and I decided to do something different this year: instead of publishing fake things, we’re publishing real posts on very different topics than our readers usually expect from our blogs. The tech content will be back soon! &lt;a href=&quot;https:&#x2F;&#x2F;aprilcools.club&#x2F;&quot;&gt;Check out the other April Cools posts here.&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;An extraordinary amount of ink has already been dedicated to describing various test-taking strategies. Many strategies, especially for standardized multiple-choice exams, are well-known: don’t get stuck and spend too much time on one question; guessing is worth it if you can eliminate some of the multiple-choice options, etc. Most such advice is sound and will boost your scores — but none of it will help you absolutely &lt;em&gt;ace&lt;&#x2F;em&gt; an exam.&lt;&#x2F;p&gt;
&lt;figure&gt;
    
    
    

    
    
    

    
    
    

    
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;Gold_medal_of_the_2018_Winter_Olympics_in_in_Pyeongchang.5ce61389d27be9ed.jpg&quot; alt=&quot;Close-up of a gold medal from the 2018 PyeongChang Olympics, showing a ridge-textured golden surface upon which the Olympic rings are set.&quot;&gt;
    &lt;label for=&quot;mn-lead&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;mn-lead&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
    &lt;span class=&quot;marginnote figcaption&quot;&gt;
        A gold medal from the 2018 PyeongChang Olympics. Just like common advice on staying in shape like &quot;try to exercise at least twice a week&quot; won&#x27;t get an athlete to an Olympic gold medal, common test-taking advice is similarly insufficient for getting a perfect score on an exam. The advice is directionally correct but not useful: Olympic athletes definitely exercise at least twice a week, but that&#x27;s not the key to winning gold.
        Source:
        &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;en.wikipedia.org&amp;#x2F;wiki&amp;#x2F;2018_Winter_Olympics#&amp;#x2F;media&amp;#x2F;File:Gold_medal_of_the_2018_Winter_Olympics_in_in_Pyeongchang.jpg&quot;&gt;Korea.net &amp;#x2F; Korean Culture and Information Service&lt;&#x2F;a&gt;, CC BY-SA 2.0
    &lt;&#x2F;span&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;This is because &lt;em&gt;common advice&lt;&#x2F;em&gt; describes what to do in &lt;em&gt;common situations&lt;&#x2F;em&gt;. A perfect score is hardly a common situation, so common advice doesn’t tend to help. For example, to get a near-perfect score, you need to know how to solve nearly every question on the exam — and that means there’s not a lot of room for guessing. If forced to guess, you should still apply the usual “good guessing” advice, but good guessing alone won’t get you a perfect score.&lt;&#x2F;p&gt;
&lt;p&gt;If your goal is to get a near-perfect score but you haven’t gotten there yet, odds are you need more practice on the questions you find &lt;em&gt;easiest&lt;&#x2F;em&gt; in the exam. This sounds impossible, unrealistic, and unwise, but it’s true. To explain why that’s true in a way you’ll believe, I need to tell you a bit more about myself first.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;math-kangaroo&quot;&gt;Math Kangaroo&lt;&#x2F;h2&gt;
&lt;p&gt;Growing up, I took part in competitions in many subjects, but math and programming were my favorites. Between 3rd grade and senior year of high school, I literally competed in every math competition my parents and I managed to find.&lt;&#x2F;p&gt;
&lt;p&gt;One of those math competitions was &lt;a href=&quot;https:&#x2F;&#x2F;mathkangaroo.org&#x2F;&quot;&gt;Math Kangaroo&lt;&#x2F;a&gt;, an intense multiple-choice exam where students have 75min to solve 30 problems&lt;label for=&quot;sn-1&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-1&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;The exam for grades 1 through 4 actually only has 24 problems, with 8 problems in each difficulty tier instead of 10 per tier. The allotted time is the same, so there’s still a significant amount of time pressure, if slightly less than at higher levels.&lt;&#x2F;span&gt;

in three difficulty tiers of 10 problems each: easy (worth 3 points each), medium (4 points), and hard (5 points). Contestants may choose between 5 possible answers for each question, and incorrect answers deduct a quarter of the point value of the problem — so a correct answer in the hard tier adds 5 points to your score, but an incorrect answer subtracts 1.25 points instead.&lt;&#x2F;p&gt;
&lt;p&gt;Every year I was eligible to compete in Math Kangaroo — a 10 year stretch&lt;label for=&quot;sn-2&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-2&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;At the time, Math Kangaroo was only available to students between 3rd grade and senior year of high school. Today, there’s also a Math Kangaroo exam for 1st and 2nd graders, but that was first introduced several years after I had finished 2nd grade.&lt;&#x2F;span&gt;
 — I won the competition by posting the national top score for my grade level. Including the “base” 30 points everyone starts with (to avoid negative scores due to too many incorrect answers) a perfect score at Math Kangaroo is 150 points.&lt;label for=&quot;sn-3&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-3&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;For the 24-problem Math Kangaroo exams for grades 1 through 4, the perfect score is 120 instead, but I only did two years of that (3rd and 4th grade).&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;My usual score was around 140, meaning that I had correctly solved all but one or two problems.&lt;&#x2F;p&gt;
&lt;p&gt;People used to accuse me of cheating. They said scores that high were impossible. They said someone must have given me the answer key. They said the proctors must have given me extra time. They said I must have had help solving the problems: from proctors, from my math teachers, from other students, from the government(?!), from the competition organizers and sponsors.&lt;&#x2F;p&gt;
&lt;p&gt;I never cheated. I solved the same problems in the same 75min as everyone else, and yet I solved them differently than everyone else.&lt;&#x2F;p&gt;
&lt;p&gt;Everyone else spent by far the most time practicing on the hardest problems. I drilled the hardest on the easiest problems.&lt;&#x2F;p&gt;
&lt;p&gt;Everyone else tried to get faster at solving the hardest problems, and found that really hard. I found it hard too!&lt;&#x2F;p&gt;
&lt;p&gt;I couldn’t really get significantly faster at solving the hardest problems. But I could maximize the time I had available to spend on those problems, by making sure I could solve everything else as fast as possible with no mistakes.&lt;&#x2F;p&gt;
&lt;p&gt;My objective was “20 problems in 15 minutes or less” — solve all the easy (3-point) and medium (4-point) problems completely correctly in less than 15 minutes, leaving a full hour for the ten hard (5-point) problems. I drilled this repeatedly until I could solve all ten easy problems correctly in 3–4 minutes (~20s per problem), and all ten medium problems in 10 minutes (~1min per problem), without even a single mistake. That would leave me an average of 6 minutes per hard problem, and in practice I’d usually be able to dedicate about 10 minutes apiece to the one or two problems I found the most difficult.&lt;&#x2F;p&gt;
&lt;p&gt;I have no doubt that most if not all contestants with above-average scores could solve just about any question on the exam if given 10 minutes to spend on only that problem. But based on my conversations with them, it sounded like they almost never had the luxury of that much leftover time. Instead, most were just crossing over into the medium (4-point) problem section when I was already working on the 5-pointers.&lt;&#x2F;p&gt;
&lt;p&gt;To make matters worse, the data also showed that most of the above-average performers still made many mistakes in the easy and medium problem sections, which cost them too many precious points. This is critical: you can’t just solve the easier problems &lt;em&gt;quickly&lt;&#x2F;em&gt;, you also have to do it &lt;em&gt;correctly&lt;&#x2F;em&gt;. That’s why you need to practice so hard on the easy problems — you are working your correctness percentage up to 100% &lt;em&gt;while&lt;&#x2F;em&gt; driving your time taken as close to zero as you can. Not one or the other, but both at once!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;test-of-speed-or-test-of-knowledge&quot;&gt;Test of speed or test of knowledge?&lt;&#x2F;h2&gt;
&lt;p&gt;Almost everyone treated Math Kangaroo as a &lt;em&gt;test of knowledge&lt;&#x2F;em&gt;, when in fact beyond a certain level it became mostly a &lt;em&gt;test of speed&lt;&#x2F;em&gt;. The “master the easy problems” strategy is perfect for tests of speed, and completely useless for tests of knowledge. Before you get a perfect score on an exam, you must learn to tell the difference and adjust your approach accordingly.&lt;&#x2F;p&gt;
&lt;p&gt;How can you tell the difference? First, practice for the exam until you can consistently post above-average scores — this is mostly to ensure you have a sound understanding of the subject matter, which is initially the most effective way to boost your scores. Then, ask yourself if doubling the allotted time for the exam would change how much of it you could solve. If the answer is “yes” then you have a test of speed on your hands.&lt;&#x2F;p&gt;
&lt;p&gt;Based on that, the SAT and other similar exams are all tests of speed when aiming for above-average scores.&lt;label for=&quot;sn-4&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-4&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;Why are so many standardized tests designed to test for speed rather than knowledge on the high end of the score distribution? I find this an interesting question, and while I have some guesses, I am definitely not a professional test-writer. If you know the answer, please &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PredragGruevski&quot;&gt;tweet it to me&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
 Back when I took the SAT, it was still scored out of 2400 points and consisted of three sections: math, writing, and critical reading. I speak English as a second language, so I knew that the critical reading section would be my weak spot. I worked hard to improve my critical reading! But I also knew that math was my strongest side, so I also worked hard to make sure I could flawlessly finish every math section with 10–15min to spare — time I could use to rest and catch my breath during the grueling 4-hour SAT exam. Critical reading sections are a lot easier after an extra-long break!&lt;&#x2F;p&gt;
&lt;p&gt;Conversely, this strategy fails completely if time isn’t the limiting factor on your test performance. The best knowledge-based exams are specifically designed like that: MIT’s “open-book, open-note, open-laptop” take-home exams are notorious for this. Nothing quite convinces you that you don’t understand a concept as well as &lt;em&gt;four days of failing to solve a problem while re-reading the textbook and course notes&lt;&#x2F;em&gt;. The four days may as well have been a week and it wouldn’t have mattered one bit.&lt;&#x2F;p&gt;
&lt;p&gt;Real-world tasks can similarly be knowledge-limited or time-limited. Have you ever written a complex and satisfying piece of code only to waste a lot of time having it repeatedly rejected by a linter? Have you ever tried to schedule an important meeting and found yourself spending hours finding a time that works for everyone? Even in the real world, the easiest way to get better at tackling big challenges is to optimize and perfect the easy tasks first.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;hillelwayne.com&#x2F;&quot;&gt;Hillel Wayne&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jeremyjkun&quot;&gt;Jeremy Kun&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;lars.hupel.info&#x2F;&quot;&gt;Lars Hupel&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;benbrubaker.com&#x2F;&quot;&gt;Ben Brubaker&lt;&#x2F;a&gt; for their support and feedback on early drafts of this post. All mistakes are mine alone.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Compiler Adventures, part 2: Constant Propagation</title>
        <published>2022-02-17T00:00:00+00:00</published>
        <updated>2022-02-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/compiler-adventures-part2-constant-propagation/"/>
        <id>https://predr.ag/blog/compiler-adventures-part2-constant-propagation/</id>
        
        <content type="html" xml:base="https://predr.ag/blog/compiler-adventures-part2-constant-propagation/">&lt;p&gt;&lt;em&gt;A beginner-friendly introduction to compilers: follow along as we build a compiler from scratch, or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&quot;&gt;fork the code on GitHub&lt;&#x2F;a&gt; and add your own optimizations too! In this episode: propagating constant values to eliminate more instructions.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;compiler-adventures-part1-no-op-instructions&#x2F;&quot;&gt;Last time on Compiler Adventures&lt;&#x2F;a&gt;, we wrote an optimization that eliminates no-op instructions like division by one: &lt;code&gt;div x 1&lt;&#x2F;code&gt;. At the end of the post, I challenged you to find other instructions that are always no-ops regardless of the register&#x27;s value. There are at least two more: &quot;add zero&quot; (e.g. &lt;code&gt;add x 0&lt;&#x2F;code&gt;) and &quot;multiply by one&quot; (e.g. &lt;code&gt;mul x 1&lt;&#x2F;code&gt;) — neither of those examples has any effect on register &lt;code&gt;x&lt;&#x2F;code&gt; regardless of its value.&lt;&#x2F;p&gt;
&lt;figure&gt;
    
    
    

    
    
    

    
    
    

    
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;Improvement_in_Hubble_images_after_SMM1.927cee8a294342a3.jpg&quot; alt=&quot;A blurry photo of a galaxy, with a bright blob in the middle surrounded by fuzzy swirling clouds of gas. Next to it, a crisp and sharp image of the same galaxy, showing many dots of light and and individual clouds where previously there was just a blur of color.&quot;&gt;
    &lt;label for=&quot;mn-lead&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;mn-lead&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
    &lt;span class=&quot;marginnote figcaption&quot;&gt;
        Dramatic improvement in the Hubble Space Telescope&#x27;s ability to see distant galaxies after corrective optics are installed.
        Source:
        &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;commons.wikimedia.org&amp;#x2F;wiki&amp;#x2F;File:Improvement_in_Hubble_images_after_SMM1.jpg&quot;&gt;NASA and ESA&lt;&#x2F;a&gt;, public domain
    &lt;&#x2F;span&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;In this episode, we&#x27;ll look at how we can use constants to find more no-op instructions that we can eliminate from our program. The starting code for this episode is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;tree&#x2F;part2&quot;&gt;on GitHub&lt;&#x2F;a&gt;, on branch &lt;code&gt;part2&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Recall that when a MONAD program starts, the values of &lt;code&gt;w, x, y, z&lt;&#x2F;code&gt; are all zero. Let&#x27;s look at the start of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part2&#x2F;sample_programs&#x2F;aoc_challenge.txt&quot;&gt;our MONAD input program&lt;&#x2F;a&gt; and simulate by hand what happens to the four registers:&lt;&#x2F;p&gt;
&lt;div class=&quot;outer-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;006faa594edfc3ec9985e47c0403ae46.js?file=simulated_registers.log&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Wow! Other than reading an input number with &lt;code&gt;inp w&lt;&#x2F;code&gt;, pretty much nothing else happens until that &lt;code&gt;add x 11&lt;&#x2F;code&gt; instruction. The &lt;code&gt;add x z&lt;&#x2F;code&gt; and &lt;code&gt;mod x 26&lt;&#x2F;code&gt; instructions have no effect on the registers&#x27; values, so we&#x27;ve found more instructions we could optimize out!&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;compiler-adventures-part1-no-op-instructions&#x2F;&quot;&gt;episode 1&lt;&#x2F;a&gt;, our compiler recognized that &lt;code&gt;div z 1&lt;&#x2F;code&gt; is a no-op because it divides by one. Well, why didn&#x27;t our compiler also notice that the adjacent instructions are no-ops?&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s because they aren&#x27;t &lt;em&gt;always&lt;&#x2F;em&gt; no-ops: &lt;code&gt;div z 1&lt;&#x2F;code&gt; is a no-op &lt;em&gt;regardless of the value of &lt;code&gt;z&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;, but &lt;code&gt;add x z&lt;&#x2F;code&gt; is only a no-op if &lt;code&gt;z&lt;&#x2F;code&gt; is zero. Similarly, the &lt;code&gt;mul x 0&lt;&#x2F;code&gt; and &lt;code&gt;mod x 26&lt;&#x2F;code&gt; instructions here are no-ops only because &lt;code&gt;x = 0&lt;&#x2F;code&gt; before the instruction executes: the operation&#x27;s result is zero and is written to &lt;code&gt;x&lt;&#x2F;code&gt;, therefore leaving &lt;code&gt;x = 0&lt;&#x2F;code&gt; unchanged.&lt;label for=&quot;sn-1&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-1&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;The no-ops we&#x27;ve looked at so far are all of the &quot;math operation that had the same result as its input register already held&quot; flavor. There are also other ways in which an instruction might have no effect on the rest of the program. For example, an instruction might calculate a value that is never used, and therefore didn&#x27;t need to be computed in the first place. We&#x27;ll explore this idea in detail in an upcoming episode.&lt;&#x2F;span&gt;

In order to optimize out instructions like these, we&#x27;ll need to teach the compiler to track the possible values registers can have.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tracking-register-values&quot;&gt;Tracking register values&lt;&#x2F;h2&gt;
&lt;p&gt;A register&#x27;s value can either be known exactly, or not known exactly. If a register is known to hold number &lt;code&gt;n&lt;&#x2F;code&gt;, let&#x27;s call that &lt;code&gt;Exact(n)&lt;&#x2F;code&gt;. If the register&#x27;s value is not known to be any specific number, let&#x27;s say the register holds &lt;code&gt;Unknown&lt;&#x2F;code&gt;. For our reading and debugging convenience, let&#x27;s also introduce a third kind of value a register can hold: &lt;code&gt;Input(i)&lt;&#x2F;code&gt;, representing the &lt;code&gt;i&lt;&#x2F;code&gt;th input to the program. (For folks not yet comfortable with Rust, quick reminder that &lt;code&gt;usize&lt;&#x2F;code&gt; is the unsigned integer type Rust prefers for counting things.)&lt;&#x2F;p&gt;
&lt;div class=&quot;captioned-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;1bd7da4a0d0ee1dc6e821148f6a5464c.js?file=value.rs&quot;&gt;&lt;&#x2F;script&gt;
  &lt;label for=&quot;mn-gist1&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;mn-gist1&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
  &lt;span class=&quot;marginnote&quot;&gt;Excerpt from &lt;code&gt;optimization.rs&lt;&#x2F;code&gt;. See this code in context &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part2_finished&#x2F;src&#x2F;optimization.rs#L101-L107&quot;&gt;in the GitHub repo&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;When the program starts, all four registers hold &lt;code&gt;Exact(0)&lt;&#x2F;code&gt;. Then, for each instruction, we evaluate a set of rules to determine what the next register state should be. For example, after reading the first program input with the &lt;code&gt;inp w&lt;&#x2F;code&gt; instruction, the &lt;code&gt;w&lt;&#x2F;code&gt; register&#x27;s value becomes &lt;code&gt;Input(0)&lt;&#x2F;code&gt;. Otherwise:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If the instruction operates on two &lt;code&gt;Exact&lt;&#x2F;code&gt; values, we&#x27;ll evaluate the operation on those values and record an &lt;code&gt;Exact&lt;&#x2F;code&gt; result. For example, &lt;code&gt;add x 11&lt;&#x2F;code&gt; when &lt;code&gt;x = Exact(0)&lt;&#x2F;code&gt; would produce &lt;code&gt;Exact(11)&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;If the instruction is a multiplication and one of the operands is &lt;code&gt;Exact(0)&lt;&#x2F;code&gt;, the result is &lt;code&gt;Exact(0)&lt;&#x2F;code&gt; regardless of the other operand value.&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise, we aren&#x27;t able to determine an exact result so we&#x27;ll record an &lt;code&gt;Unknown&lt;&#x2F;code&gt; instead. For example, &lt;code&gt;eql x w&lt;&#x2F;code&gt; below is comparing between &lt;code&gt;Input(0)&lt;&#x2F;code&gt; and &lt;code&gt;Exact(11)&lt;&#x2F;code&gt;, and produces an &lt;code&gt;Unknown&lt;&#x2F;code&gt; result. Similarly, the next instruction &lt;code&gt;eql x 0&lt;&#x2F;code&gt; compares &lt;code&gt;Unknown&lt;&#x2F;code&gt; to &lt;code&gt;Exact(0)&lt;&#x2F;code&gt;, and again produces an &lt;code&gt;Unknown&lt;&#x2F;code&gt; result.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Applying these rules, we get the following register values starting from the beginning of the program:&lt;&#x2F;p&gt;
&lt;div class=&quot;outer-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;c84797b4d8b8cae9b796cf9eaa0445cd.js?file=register_values.log&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;aside-rust-syntax-primer&quot;&gt;Aside: Rust syntax primer&lt;&#x2F;h3&gt;
&lt;p&gt;We’re about to use some syntax that may feel unfamiliar to folks not yet used to Rust, so let’s explain it first:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match&lt;&#x2F;code&gt; is used for &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch06-02-match.html&quot;&gt;pattern-matching in Rust&lt;&#x2F;a&gt;, in the same way that it is used &lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0636&#x2F;#abstract&quot;&gt;in Python 3.10+&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;docs.scala-lang.org&#x2F;tour&#x2F;pattern-matching.html&quot;&gt;in functional languages like Scala&lt;&#x2F;a&gt;. It&#x27;s a handy concept, and I encourage you to learn about it if you haven&#x27;t encountered it before!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;if let x = y { &amp;lt;code here&amp;gt; }&lt;&#x2F;code&gt; is shorthand for: &lt;code&gt;match y&lt;&#x2F;code&gt;, and if the pattern &lt;code&gt;x&lt;&#x2F;code&gt; matches, execute the given code block. &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch06-03-if-let.html&quot;&gt;The Rust book&#x27;s chapter on it&lt;&#x2F;a&gt; does a great job of explaining its benefits.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;implementing-the-register-value-rules&quot;&gt;Implementing the register value rules&lt;&#x2F;h3&gt;
&lt;p&gt;Since &lt;code&gt;inp&lt;&#x2F;code&gt; instructions only take one input instead of two, let&#x27;s make the code handle them separately. For all other instructions, we can handle them with a function that takes an instruction and two &lt;code&gt;Value&lt;&#x2F;code&gt; inputs, and returns the resulting &lt;code&gt;Value&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;captioned-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;6d0ac4ae4a0fb4188a56b47d696c9f64.js?file=evaluate_instruction.rs&quot;&gt;&lt;&#x2F;script&gt;
  &lt;label for=&quot;mn-gist2&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;mn-gist2&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
  &lt;span class=&quot;marginnote&quot;&gt;Excerpt from &lt;code&gt;optimization.rs&lt;&#x2F;code&gt;. See this code in context &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part2_finished&#x2F;src&#x2F;optimization.rs#L5-L36&quot;&gt;in the GitHub repo&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Observant readers might have noticed this code returns &lt;code&gt;Unknown&lt;&#x2F;code&gt; in
some situations where it could have done better.
&lt;em&gt;Cue the foreshadowing music.&lt;&#x2F;em&gt;
We&#x27;ll improve it further in future episodes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finding-more-no-op-instructions&quot;&gt;Finding more no-op instructions&lt;&#x2F;h2&gt;
&lt;p&gt;Earlier, we observed that to detect whether &lt;code&gt;add x z&lt;&#x2F;code&gt; is a no-op, we needed to know if &lt;code&gt;x&lt;&#x2F;code&gt; or &lt;code&gt;z&lt;&#x2F;code&gt; are zero — and now we can! In general, we see that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add x y&lt;&#x2F;code&gt; is a no-op if &lt;code&gt;y = Exact(0)&lt;&#x2F;code&gt;. However, it is not a no-op if &lt;code&gt;x = Exact(0)&lt;&#x2F;code&gt; since in that case &lt;code&gt;x&lt;&#x2F;code&gt; gets overwritten with &lt;code&gt;y&lt;&#x2F;code&gt;&#x27;s value.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;mul x y&lt;&#x2F;code&gt; is a no-op if &lt;code&gt;x = Exact(0)&lt;&#x2F;code&gt; (multiply zero by anything and it stays zero) or &lt;code&gt;y = Exact(1)&lt;&#x2F;code&gt; (multiply anything by one and it doesn’t change). The same no-op rule applies to &lt;code&gt;div x y&lt;&#x2F;code&gt; as well.&lt;&#x2F;li&gt;
&lt;li&gt;For &lt;code&gt;mod x y&lt;&#x2F;code&gt;, the MONAD language specifies that &lt;code&gt;x ≥ 0&lt;&#x2F;code&gt; and &lt;code&gt;y &amp;gt; 0&lt;&#x2F;code&gt;. Therefore, &lt;code&gt;mod x y&lt;&#x2F;code&gt; is a no-op whenever &lt;code&gt;x &amp;lt; y&lt;&#x2F;code&gt;, since the remainder when dividing a smaller number with a larger one is the smaller number itself.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;eql x y&lt;&#x2F;code&gt; can be a no-op in two ways. If &lt;code&gt;x = y&lt;&#x2F;code&gt;, we will get the result &lt;code&gt;x = Exact(1)&lt;&#x2F;code&gt; so we have a no-op if &lt;code&gt;x = y = Exact(1)&lt;&#x2F;code&gt;. If &lt;code&gt;x != y&lt;&#x2F;code&gt; then we’ll get the result &lt;code&gt;x = Exact(0)&lt;&#x2F;code&gt; so we have a no-op if &lt;code&gt;x = Exact(0)&lt;&#x2F;code&gt; and &lt;code&gt;y&lt;&#x2F;code&gt; is any &lt;code&gt;Exact&lt;&#x2F;code&gt; value &lt;em&gt;except&lt;&#x2F;em&gt; &lt;code&gt;Exact(0)&lt;&#x2F;code&gt;. So &lt;code&gt;eql x y&lt;&#x2F;code&gt; is a no-op if &lt;code&gt;x = y = Exact(1)&lt;&#x2F;code&gt; or if &lt;code&gt;x = Exact(0)&lt;&#x2F;code&gt; and &lt;code&gt;y != Exact(0)&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;For the forms of these instructions that involve a literal number instead of a second register, such as &lt;code&gt;add x 11&lt;&#x2F;code&gt;, we simply consider the literal number as its corresponding &lt;code&gt;Exact&lt;&#x2F;code&gt; value, then apply the same rules as above.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let’s move forward in two steps. First, let’s write a function that accepts a (non-&lt;code&gt;inp&lt;&#x2F;code&gt;) &lt;code&gt;Instruction&lt;&#x2F;code&gt; and two &lt;code&gt;Value&lt;&#x2F;code&gt; inputs &lt;code&gt;left&lt;&#x2F;code&gt; and &lt;code&gt;right&lt;&#x2F;code&gt;, and returns &lt;code&gt;true&lt;&#x2F;code&gt; if the instruction is a no-op when executed on those values:&lt;&#x2F;p&gt;
&lt;div class=&quot;captioned-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;8b419b6164781175a5dc53f1de6edd89.js?file=is_instruction_no_op.rs&quot;&gt;&lt;&#x2F;script&gt;
  &lt;label for=&quot;mn-gist3&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;mn-gist3&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
  &lt;span class=&quot;marginnote&quot;&gt;Excerpt from &lt;code&gt;optimization.rs&lt;&#x2F;code&gt;. See this code in context &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part2_finished&#x2F;src&#x2F;optimization.rs#L39-L67&quot;&gt;in the GitHub repo&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;For convenience, I&#x27;ve &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;bfa9f9596c0e991e3cb2707b1d8c1e3dfffecb96&#x2F;src&#x2F;program.rs#L62&quot;&gt;already defined&lt;&#x2F;a&gt; some helper methods on &lt;code&gt;Instruction&lt;&#x2F;code&gt; that simply return the source&#x2F;destination register index (the &lt;code&gt;register()&lt;&#x2F;code&gt; function) and the literal or register operand, if the instruction has one (the &lt;code&gt;operand()&lt;&#x2F;code&gt; function).&lt;&#x2F;p&gt;
&lt;p&gt;We can now use &lt;code&gt;is_instruction_no_op&lt;&#x2F;code&gt; to find many more no-op instructions than the &lt;code&gt;remove_div_by_1&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;bfa9f9596c0e991e3cb2707b1d8c1e3dfffecb96&#x2F;src&#x2F;optimization.rs#L3&quot;&gt;function&lt;&#x2F;a&gt; from &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;compiler-adventures-part1-no-op-instructions&#x2F;&quot;&gt;the last episode&lt;&#x2F;a&gt; could find. Let&#x27;s update &lt;code&gt;remove_div_by_1&lt;&#x2F;code&gt; to track registers&#x27; values and take advantage of our new functions. It&#x27;ll still go through the list of instructions, compute how the register values change at each step, and eliminate instructions it discovers are no-ops.&lt;label for=&quot;sn-2&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-2&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;For experienced Rustaceans: this code isn&#x27;t idiomatic Rust. I&#x27;m trying to make it easier to understand for people of any background.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;And like that, we&#x27;ve implemented &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Constant_folding#Constant_propagation&quot;&gt;constant propagation&lt;&#x2F;a&gt;! Let&#x27;s rename &lt;code&gt;remove_div_by_1&lt;&#x2F;code&gt; to &lt;code&gt;constant_propagation&lt;&#x2F;code&gt; to celebrate our achievement!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;analyzing-our-optimizations-impact&quot;&gt;Analyzing our optimizations&#x27; impact&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s run our compiler on our Advent of Code input program and measure how well we did:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo run analyze sample_programs&#x2F;aoc_challenge.txt
&lt;&#x2F;span&gt;&lt;span&gt;    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
&lt;&#x2F;span&gt;&lt;span&gt;     Running `...&#x2F;monad_compiler analyze sample_programs&#x2F;aoc_challenge.txt`
&lt;&#x2F;span&gt;&lt;span&gt;Original vs optimized length:    252 vs 238 (-14)
&lt;&#x2F;span&gt;&lt;span&gt;Optimized is more efficient by:  5.88%
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Adding &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Constant_folding#Constant_propagation&quot;&gt;constant propagation&lt;&#x2F;a&gt; made our no-op detection twice as good as &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;compiler-adventures-part1-no-op-instructions&#x2F;&quot;&gt;in part 1&lt;&#x2F;a&gt;! We managed to eliminate 7 more instructions compared to last time, for a total improvement of just under 6%.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand, maybe constant propagation should have had a larger impact? Let&#x27;s visualize our optimizations to figure out what&#x27;s going on.&lt;&#x2F;p&gt;
&lt;p&gt;We’ll use &lt;code&gt;cargo run registers &amp;lt;monad_program&amp;gt;&lt;&#x2F;code&gt; to generate a printout of the register values our optimizations determined at every instruction in the program, together with an indication whether that instruction was detected to be a no-op. I’ll include a few relevant snippets of the input program’s printout here — the full printout is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part2_finished&#x2F;printouts&#x2F;aoc_challenge_registers.txt&quot;&gt;available on GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The beginning of the program starts looking pretty good: in the first 10 instructions, most register values are &lt;code&gt;Exact&lt;&#x2F;code&gt;, and constant propagation helps eliminate 5 of these 10 instructions as no-ops. That’s a lot better than 6%!&lt;&#x2F;p&gt;
&lt;div class=&quot;outer-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;355fd4279e6f83880fd5f36dfc92437c.js?file=register_values.log&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Unfortunately, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part2_finished&#x2F;printouts&#x2F;aoc_challenge_registers.txt#L51&quot;&gt;just a bit farther down&lt;&#x2F;a&gt;, the simulated register values quickly become a sea of &lt;code&gt;Unknown&lt;&#x2F;code&gt;, and few if any no-ops are found:&lt;&#x2F;p&gt;
&lt;div class=&quot;outer-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;78c782f96f7c40ed372e909e91fead7c.js?file=continued_register_values.log&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Compiler optimizations use insight about the program&#x27;s behavior to make it more efficient. When the program starts, its initial state is fully known: all registers have &lt;code&gt;Exact(0)&lt;&#x2F;code&gt; values, and the only unknowns are values derived from input data read by &lt;code&gt;inp&lt;&#x2F;code&gt; instructions. It&#x27;s an insight-rich environment and our compiler performs nicely!&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, our compiler isn&#x27;t yet sophisticated enough to continue generating insight about the rest of the program, so its performance drops accordingly. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part2_finished&#x2F;printouts&#x2F;aoc_challenge_registers.txt#L258&quot;&gt;The statistics at the end of the printout&lt;&#x2F;a&gt; summarize the situation: 91.6% of the time, at least one of the values used by the instruction was unknown, and 22.3% of the time, both values were unknown. With so few known values to work with, constant propagation unsurprisingly has a limited effect.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Total non-input instructions: 238
&lt;&#x2F;span&gt;&lt;span&gt;- with 1+ non-exact value:    218 (91.6%)
&lt;&#x2F;span&gt;&lt;span&gt;- without any exact values:    53 (22.3%)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Shining a light on the patterns hiding within those &lt;code&gt;Unknown&lt;&#x2F;code&gt; values will be the focus of upcoming Compiler Adventures.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrap-up-challenge-question&quot;&gt;Wrap up + challenge question&lt;&#x2F;h2&gt;
&lt;p&gt;Implementing one compiler optimization can open up new opportunities for another optimization to work its magic. We already included &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;compiler-adventures-part1-no-op-instructions&#x2F;&quot;&gt;part 1&#x27;s &quot;eliminate no-ops&quot; idea&lt;&#x2F;a&gt; in this episode&#x27;s constant propagation code. In the next Compiler Adventure, we&#x27;ll use constant propagation as part of a fascinating new optimization that will become the foundation of most of our future work!&lt;&#x2F;p&gt;
&lt;p&gt;The completed code from this post is on branch &lt;code&gt;part2_finished&lt;&#x2F;code&gt; on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;tree&#x2F;part2_finished&quot;&gt;GitHub&lt;&#x2F;a&gt;. For a sneak peek of how we can improve our &lt;code&gt;Unknown&lt;&#x2F;code&gt; handling, consider the following program:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;inp w
&lt;&#x2F;span&gt;&lt;span&gt;add x w
&lt;&#x2F;span&gt;&lt;span&gt;eql w x
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Right now, our compiler says that last &lt;code&gt;eql w x&lt;&#x2F;code&gt; instruction would evaluate to &lt;code&gt;Unknown&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;outer-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;5aa15ad19c0fe98723902fb70e96acf3.js?file=ep2_challenge.log&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Look carefully at the register values around &lt;code&gt;add x w&lt;&#x2F;code&gt; and &lt;code&gt;eql w x&lt;&#x2F;code&gt;. Can you figure out what the &lt;code&gt;eql w x&lt;&#x2F;code&gt; evaluates to? Is it really &lt;code&gt;Unknown&lt;&#x2F;code&gt;? Why isn&#x27;t our current &lt;code&gt;constant_propagation()&lt;&#x2F;code&gt; function able to do better?&lt;&#x2F;p&gt;
&lt;p&gt;All this and more in &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;compiler-adventures-part3-value-numbering&#x2F;&quot;&gt;the next Compiler Adventure — see you next time!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you liked this post, please share it with friends — compilers are for everyone!
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PredragGruevski&quot;&gt;Reach out to me on Twitter&lt;&#x2F;a&gt; or join the discussion on &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=30375051&quot;&gt;HackerNews&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Thanks to Hillel Wayne, Russell Cohen, Jonathan Paulson,&lt;&#x2F;em&gt; &lt;a href=&quot;http:&#x2F;&#x2F;www.jameskoppel.com&#x2F;&quot;&gt;&lt;em&gt;Jimmy Koppel&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;em&gt;, Aaron Brooks, &lt;a href=&quot;https:&#x2F;&#x2F;vtjeng.com&#x2F;&quot;&gt;Vincent Tjeng&lt;&#x2F;a&gt;, James Logan, and Akshat Bubna for their feedback on drafts of this post. Any mistakes are mine alone.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Compiler Adventures, part 1: No-op Instructions</title>
        <published>2022-02-03T00:00:00+00:00</published>
        <updated>2022-02-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/compiler-adventures-part1-no-op-instructions/"/>
        <id>https://predr.ag/blog/compiler-adventures-part1-no-op-instructions/</id>
        
        <content type="html" xml:base="https://predr.ag/blog/compiler-adventures-part1-no-op-instructions/">&lt;p&gt;&lt;em&gt;A beginner-friendly introduction to compilers: follow along as we build a compiler from scratch, or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&quot;&gt;fork the code on GitHub&lt;&#x2F;a&gt; and add your own optimizations too! In this episode: eliminating no-op instructions.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;What part of computer science feels most like arcane magic? I&#x27;d say compilers. &quot;The magical incantation &lt;code&gt;gcc -O3 file.c&lt;&#x2F;code&gt; makes my program run 10x faster in ways I don&#x27;t understand&quot; sure sounds like arcane magic. Modern compilers are the product of engineer-centuries of work, so it&#x27;s unsurprising they feel intimidating.&lt;&#x2F;p&gt;
&lt;figure&gt;
    
    
    

    
    
    

    
    
    

    
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;victoria_falls.5bfe3a21fcd290b6.jpg&quot; alt=&quot;A set of three massive waterfalls surrounded by lush plant life and large trees basking in the sunshine. Water spray causes a vivid rainbow to appear against the cliffs and the pristine blue sky.&quot;&gt;
    &lt;label for=&quot;mn-lead&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;mn-lead&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
    &lt;span class=&quot;marginnote figcaption&quot;&gt;
        View of the Victoria Falls of the Zambezi River, the largest sheet of falling water in the world. A scene of immense arcane power, perhaps similar to the arcane power of compilers.
        Source:
        &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;delso.photo&amp;#x2F;wp-content&amp;#x2F;uploads&amp;#x2F;2020&amp;#x2F;01&amp;#x2F;Cataratas_Victoria_Zambia-Zimbabue_2018-07-27_DD_30-34_PAN-1280x960.jpg&quot;&gt;Diego Delso, delso.photo&lt;&#x2F;a&gt;, CC BY-SA
    &lt;&#x2F;span&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;But there&#x27;s no law of the universe that says compilers &lt;em&gt;have to be&lt;&#x2F;em&gt; complex and difficult to understand.&lt;label for=&quot;sn-1&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-1&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;In fact, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PredragGruevski&#x2F;status&#x2F;1470206964043071491&quot;&gt;simple compilers are everywhere&lt;&#x2F;a&gt;. We just don&#x27;t tend to notice that many tools fit the description of a compiler: a tool that takes input, analyzes it and performs some transformations on it, and produces output.&lt;&#x2F;span&gt;

In this blog post series, we&#x27;ll build a compiler from scratch, one straightforward step at a time. Each blog post will tackle a facet of the compiler, and over time, our optimizations will add up to create arcane magic of our own.&lt;&#x2F;p&gt;
&lt;p&gt;Our compiler will optimize the simple MONAD programming language from &lt;a href=&quot;https:&#x2F;&#x2F;adventofcode.com&#x2F;2021&#x2F;day&#x2F;24&quot;&gt;Advent of Code 2021 day 24&lt;&#x2F;a&gt;. However, this is not a guide to solving Advent of Code 2021 day 24, even though &lt;em&gt;there will definitely be spoilers&lt;&#x2F;em&gt;. Instead, our goal is to learn about compilers and have fun doing it. We’ll prioritize simple code and clear explanations of compiler ideas over everything else.&lt;&#x2F;p&gt;
&lt;p&gt;Even so, the techniques we cover here can generate some pretty impressive numbers! The Advent of Code challenge has &lt;strong&gt;22 trillion&lt;&#x2F;strong&gt; possible answers, and &lt;a href=&quot;https:&#x2F;&#x2F;www.mattkeeter.com&#x2F;blog&#x2F;2021-12-27-brute&#x2F;&quot;&gt;Matt Keeter&#x27;s blog&lt;&#x2F;a&gt; says that without optimizations, checking all of them would take more than &lt;strong&gt;3.5 years&lt;&#x2F;strong&gt;. The compiler techniques from this series can find the answer in &lt;strong&gt;0.16 seconds&lt;&#x2F;strong&gt;, more than &lt;strong&gt;700 million times faster&lt;&#x2F;strong&gt;. Not bad at all, right?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;&#x2F;h2&gt;
&lt;p&gt;We’ll write our compiler in Rust because of its excellent ergonomics, but knowing Rust isn’t a requirement for enjoying this series. Our compiler will be built from the most common data structures: tuples, maps (dictionaries), vectors (lists), etc. For example, Python&#x27;s &lt;code&gt;Tuple[int, int]&lt;&#x2F;code&gt; and &lt;code&gt;List[str]&lt;&#x2F;code&gt; type hints become &lt;code&gt;(i64, i64)&lt;&#x2F;code&gt; and &lt;code&gt;Vec&amp;lt;String&amp;gt;&lt;&#x2F;code&gt; in Rust, respectively. Another Rust type to know is &lt;code&gt;usize&lt;&#x2F;code&gt;: that&#x27;s Rust&#x27;s preferred unsigned integer type for counting and indexing operations.
When reading the code, feel free to mentally replace &lt;code&gt;usize&lt;&#x2F;code&gt; with &lt;code&gt;int&lt;&#x2F;code&gt; if coming from another programming language, like Python.&lt;label for=&quot;sn-2&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-2&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;If you aren&#x27;t familiar with Rust but are interested in learning it, the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch01-00-getting-started.html&quot;&gt;Rust Book&lt;&#x2F;a&gt; is an excellent free online resource (also available in print), and &lt;a href=&quot;https:&#x2F;&#x2F;www.rustinaction.com&#x2F;&quot;&gt;Rust in Action&lt;&#x2F;a&gt; is an excellent book on learning Rust with an emphasis on systems programming in particular.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;All the code in this series is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&quot;&gt;available on GitHub&lt;&#x2F;a&gt; — feel free to fork the repo to follow along and make your own changes and optimizations as well! Each episode&#x27;s start and finish points will have an associated git branch. This episode starts on branch &lt;code&gt;part1&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;representing-a-monad-program&quot;&gt;Representing a MONAD program&lt;&#x2F;h2&gt;
&lt;p&gt;Here is a quick intro to the MONAD programming language from &lt;a href=&quot;https:&#x2F;&#x2F;adventofcode.com&#x2F;2021&#x2F;day&#x2F;24&quot;&gt;Advent of Code 2021 day 24&lt;&#x2F;a&gt;. MONAD supports only four variables &lt;code&gt;w, x, y, z&lt;&#x2F;code&gt; (called &quot;registers&quot; in compiler terminology), and has six instructions that operate on them:&lt;&#x2F;p&gt;
&lt;figure&gt;
    
    
    

    
    
    

    
    
    

    
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;MONAD language.cedd0529b9028f48.png&quot; alt=&quot;Screenshot of https:&amp;#x2F;&amp;#x2F;adventofcode.com&amp;#x2F;2021&amp;#x2F;day&amp;#x2F;24 explaining the MONAD language. Variables w, x, y, z all start with the value 0. There are 6 instructions:
        - &amp;quot;inp a&amp;quot; reads input and saves it in variable a.
        - &amp;quot;add a b&amp;quot; performs a += b
        - &amp;quot;mul a b&amp;quot; performs a *= b
        - &amp;quot;div a b&amp;quot; performs a &amp;#x2F;= b
        - &amp;quot;mod a b&amp;quot; stores the remainder of a &amp;#x2F; b into a
        - &amp;quot;eql a b&amp;quot; stores 1 in a if a == b, and 0 otherwise
        In all instructions, &amp;quot;a&amp;quot; can be any variable, and &amp;quot;b&amp;quot; can be any variable or any integer number.&quot;&gt;
    &lt;label for=&quot;mn-monad&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;mn-monad&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
    &lt;span class=&quot;marginnote figcaption&quot;&gt;
        The six instructions available in the MONAD programming language. Screenshot from &lt;a href=&quot;https:&#x2F;&#x2F;adventofcode.com&#x2F;2021&#x2F;day&#x2F;24&quot;&gt;Advent of Code 2021 day 24&lt;&#x2F;a&gt;.
    &lt;&#x2F;span&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;We&#x27;ll represent &lt;code&gt;w, x, y, z&lt;&#x2F;code&gt; as &lt;code&gt;Register(0)&lt;&#x2F;code&gt; through &lt;code&gt;Register(3)&lt;&#x2F;code&gt;, which all have starting values of &lt;code&gt;0&lt;&#x2F;code&gt; at the beginning of a MONAD program. The six instructions can use any register, and sometimes take a second parameter which may be either a literal number or a register.&lt;&#x2F;p&gt;
&lt;div class=&quot;captioned-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;e8f9aea3ea2c14e3bb5bfd910ed5e379.js?file=program.rs&quot;&gt;&lt;&#x2F;script&gt;
  &lt;label for=&quot;mn-gist1&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;mn-gist1&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
  &lt;span class=&quot;marginnote&quot;&gt;Excerpt from &lt;code&gt;program.rs&lt;&#x2F;code&gt;. See this code in context &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part1&#x2F;src&#x2F;program.rs#L5-L52&quot;&gt;in the GitHub repo&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Based on this structure, MONAD instructions like &lt;code&gt;mul w 2&lt;&#x2F;code&gt; — &quot;multiply &lt;code&gt;w&lt;&#x2F;code&gt; by 2 and store the result in &lt;code&gt;w&lt;&#x2F;code&gt;&quot; — would become &lt;code&gt;Instruction::Mul(Register(0), Operand::Literal(2))&lt;&#x2F;code&gt;.
If the instruction specifies register &lt;code&gt;x&lt;&#x2F;code&gt; instead of the number &lt;code&gt;2&lt;&#x2F;code&gt;, the operand value would instead be &lt;code&gt;Operand::Register(Register(1))&lt;&#x2F;code&gt;: the &lt;code&gt;Operand::Register&lt;&#x2F;code&gt; enum variant with the struct &lt;code&gt;Register(1)&lt;&#x2F;code&gt; inside.&lt;label for=&quot;sn-3&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-3&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;The repetition of &lt;code&gt;Register&lt;&#x2F;code&gt; is a bit unfortunate. It is, however, idiomatic Rust to put structs inside enum variants of the same name. In principle, we could replace &lt;code&gt;Register&lt;&#x2F;code&gt; with &lt;code&gt;usize&lt;&#x2F;code&gt; everywhere, but then instructions would become a bit harder to read: &lt;code&gt;mul w 2&lt;&#x2F;code&gt; would become &lt;code&gt;Instruction::Mul(0, Operand::Literal(2))&lt;&#x2F;code&gt;, which reads dangerously close to &lt;code&gt;0 * 2&lt;&#x2F;code&gt; instead of &lt;code&gt;w * 2&lt;&#x2F;code&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;For this blog post, let&#x27;s assume we already have a way to parse a MONAD program into a list (&lt;code&gt;Vec&lt;&#x2F;code&gt;) of &lt;code&gt;Instruction&lt;&#x2F;code&gt; elements. This is a series on compilers, not parsers! But if you&#x27;re curious how the parser works, here is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;7b12dd8e425a161252f1b34580f80bf83e141189&#x2F;src&#x2F;parser.rs#L72&quot;&gt;a link to the function that will do our parsing&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;our-first-optimization&quot;&gt;Our first optimization&lt;&#x2F;h2&gt;
&lt;p&gt;The key to developing optimizations is looking at a program and thinking about how it might be improved without changing its meaning. Here are the first 5 instructions in the input program from Advent of Code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;inp w
&lt;&#x2F;span&gt;&lt;span&gt;mul x 0
&lt;&#x2F;span&gt;&lt;span&gt;add x z
&lt;&#x2F;span&gt;&lt;span&gt;mod x 26
&lt;&#x2F;span&gt;&lt;span&gt;div z 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In our Rust representation, the parsed program would look like:&lt;&#x2F;p&gt;
&lt;div class=&quot;outer-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;e3f2d37663d3a234f8f795c7562455d1.js?file=parsed_program.rs&quot;&gt;&lt;&#x2F;script&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Take a look at that last instruction: &lt;code&gt;div z 1&lt;&#x2F;code&gt;. We are dividing a number by ... one. That doesn&#x27;t seem like it does much, does it? We don&#x27;t know the value of &lt;code&gt;z&lt;&#x2F;code&gt;, but that doesn&#x27;t matter: the value of &lt;code&gt;z&lt;&#x2F;code&gt; remains unchanged regardless of what it was.&lt;&#x2F;p&gt;
&lt;p&gt;Optimizing a program means finding more efficient ways to execute parts of the program &lt;em&gt;without the rest of the program noticing&lt;&#x2F;em&gt;. For example, imagine we are executing this program, and when &lt;code&gt;div z 1&lt;&#x2F;code&gt; is the next instruction to execute, we simply &lt;em&gt;skip it&lt;&#x2F;em&gt; instead of executing it. Will anything in the program behave differently as a result? Definitely not — all the &lt;code&gt;w, x, y, z&lt;&#x2F;code&gt; registers will still have correct values — so we can &lt;em&gt;optimize the program&lt;&#x2F;em&gt; by removing that instruction.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s formalize our idea: we plan on looking through our list of instructions, and every time we see an instruction that says &quot;divide by the value &lt;code&gt;1&lt;&#x2F;code&gt;&quot;, we simply discard it:&lt;&#x2F;p&gt;
&lt;div class=&quot;captioned-gist&quot;&gt;
  &lt;script src=&quot;https:&amp;#x2F;&amp;#x2F;gist.github.com&amp;#x2F;obi1kenobi&amp;#x2F;0f2967c4d7863b397ea7873d2900b459.js?file=optimization.rs&quot;&gt;&lt;&#x2F;script&gt;
  &lt;label for=&quot;mn-gist3&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;mn-gist3&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
  &lt;span class=&quot;marginnote&quot;&gt;Excerpt from &lt;code&gt;optimization.rs&lt;&#x2F;code&gt;. See this code in context &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&#x2F;blob&#x2F;part1_finished&#x2F;src&#x2F;optimization.rs#L3-L18&quot;&gt;in the GitHub repo&lt;&#x2F;a&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Congratulations, we just created our first optimization pass:&lt;label for=&quot;sn-4&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;&#x2F;label&gt;
&lt;input type=&quot;checkbox&quot; id=&quot;sn-4&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
&lt;span class=&quot;sidenote&quot;&gt;A quick note for experienced Rustaceans: I know this code isn&#x27;t idiomatic Rust. I&#x27;m intentionally structuring the code to make it easier to understand for people of any background. Using &lt;code&gt;.into_iter().filter(...).collect()&lt;&#x2F;code&gt; would take the focus away from the compiler and move it onto Rust language features.&lt;&#x2F;span&gt;

a flavor of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Redundant_code&quot;&gt;redundant code elimination&lt;&#x2F;a&gt;, called that because it eliminates code that has no influence over the rest of the program. This kind of &quot;do-nothing&quot; instruction is usually called &lt;a href=&quot;https:&#x2F;&#x2F;english.stackexchange.com&#x2F;questions&#x2F;25993&#x2F;what-does-no-op-mean&quot;&gt;a &quot;no-op&quot;&lt;&#x2F;a&gt;. Let&#x27;s run the optimization on our Advent of Code input program and measure how well we did:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo run analyze sample_programs&#x2F;aoc_challenge.txt
&lt;&#x2F;span&gt;&lt;span&gt;    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
&lt;&#x2F;span&gt;&lt;span&gt;     Running `...&#x2F;monad_compiler analyze sample_programs&#x2F;aoc_challenge.txt`
&lt;&#x2F;span&gt;&lt;span&gt;Original vs optimized length:    252 vs 245 (-7)
&lt;&#x2F;span&gt;&lt;span&gt;Optimized is more efficient by:  2.86%
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this simple 16-line optimization, we&#x27;ve already eliminated 7 no-op instructions and optimized the program by about 3% — and we&#x27;re just getting started!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-bigger-picture&quot;&gt;The bigger picture&lt;&#x2F;h2&gt;
&lt;p&gt;Right now, one might think: “What a silly little optimization, surely we didn’t need a compiler for this?” In a narrow sense, that&#x27;s correct: we could have found and removed all the “divide by 1” instructions by hand (or used a regex like &lt;code&gt;div [wxyz] 1&lt;&#x2F;code&gt; to remove them) and gotten the same 3% improvement.&lt;&#x2F;p&gt;
&lt;p&gt;However, even the most sophisticated compilers are just a collection of individually-simple rules like the one we just implemented. While each rule by itself may feel too trivial to be valuable, the combination of all the rules working together is the source of all compilers’ power. Running one optimization can unlock opportunities to perform other optimizations as well, and thus the whole becomes greater than the sum of its parts!&lt;&#x2F;p&gt;
&lt;p&gt;Most programs contain little if any obviously-redundant code like division by one. Our Advent of Code input program is no exception. But it&#x27;s good to get the easier wins first, especially when that makes our future work easier. Many of our future optimizations will be &lt;em&gt;much simpler&lt;&#x2F;em&gt; to implement knowing that any such redundant code they discover or create is not something they&#x27;ll have to worry about.&lt;&#x2F;p&gt;
&lt;p&gt;This optimization &lt;em&gt;currently&lt;&#x2F;em&gt; has only a 3% impact. But the next Compiler Adventure episode will already rely on redundant code elimination as a component of a more sophisticated optimization pass, making the overall effect much higher.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrap-up-challenge-question&quot;&gt;Wrap up &amp;amp; challenge question&lt;&#x2F;h2&gt;
&lt;p&gt;The completed code at the end of this post is on branch &lt;code&gt;part1_finished&lt;&#x2F;code&gt; in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;monad_compiler&quot;&gt;GitHub repo&lt;&#x2F;a&gt;. The next Compiler Adventure will pick up here and introduce another optimization.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a little challenge in the meantime: there are two other instructions that have a no-op case like &lt;code&gt;div z 1&lt;&#x2F;code&gt;, where the instruction is a no-op regardless of the register&#x27;s value. Can you figure out what they are? We&#x27;ll solve this and more next time — see you in &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;compiler-adventures-part2-constant-propagation&#x2F;&quot;&gt;the next Compiler Adventure&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;If you liked this post, please share it with friends — compilers are for everyone!
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;PredragGruevski&quot;&gt;Reach out to me on Twitter&lt;&#x2F;a&gt; or join the discussion on &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=30194571&quot;&gt;HackerNews&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Thanks to Hillel Wayne, Russell Cohen, Jonathan Paulson,&lt;&#x2F;em&gt; &lt;a href=&quot;http:&#x2F;&#x2F;www.jameskoppel.com&#x2F;&quot;&gt;&lt;em&gt;Jimmy Koppel&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;em&gt;, Aaron Brooks, &lt;a href=&quot;https:&#x2F;&#x2F;vtjeng.com&#x2F;&quot;&gt;Vincent Tjeng&lt;&#x2F;a&gt;, James Logan, and Akshat Bubna for their feedback on drafts of this post. Any mistakes are mine alone.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How Paxos and Two-Phase Commit Differ</title>
        <published>2021-01-26T00:00:00+00:00</published>
        <updated>2021-01-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Predrag Gruevski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://predr.ag/blog/paxos-vs-2pc/"/>
        <id>https://predr.ag/blog/paxos-vs-2pc/</id>
        
        <content type="html" xml:base="https://predr.ag/blog/paxos-vs-2pc/">&lt;p&gt;Distributed systems courses frequently introduce
the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Paxos_(computer_science)&quot;&gt;Paxos&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Two-phase_commit_protocol&quot;&gt;two-phase commit (2PC)&lt;&#x2F;a&gt; protocols
in quick succession.
On one hand, this is a reasonable educational choice, as Paxos and 2PC are both examples
of consensus algorithms used in the real world.
On the other, it leads many students toward the dangerously incorrect conclusion
that Paxos and 2PC solve the same problem.
The best way to resolve this confusion is via an intuitive example &lt;em&gt;involving both algorithms&lt;&#x2F;em&gt;
where swapping their places &lt;em&gt;clearly does the wrong thing&lt;&#x2F;em&gt;.
Here we&#x27;ll dig into exactly such an example.&lt;&#x2F;p&gt;
&lt;figure&gt;
    
    
    

    
    
    

    
    
    

    
    &lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;predr.ag&amp;#x2F;processed_images&amp;#x2F;paxos-island.23a2130d3caa6811.png&quot; alt=&quot;A small town at the edge of a blue sea, surrounded by thickly forested rolling hills going as far as the eye can see.&quot;&gt;
    &lt;label for=&quot;mn-paxos&quot; class=&quot;margin-toggle&quot;&gt;&amp;#8853;&lt;&#x2F;label&gt;
    &lt;input type=&quot;checkbox&quot; id=&quot;mn-paxos&quot; class=&quot;margin-toggle&quot;&#x2F;&gt;
    &lt;span class=&quot;marginnote figcaption&quot;&gt;
        The island of Paxos, after which the Paxos consensus algorithm is named.
        Source:
        &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;commons.wikimedia.org&amp;#x2F;wiki&amp;#x2F;File:%CE%93%CE%AC%CE%B9%CE%BF%CF%82..png&quot;&gt;Wikipedia&lt;&#x2F;a&gt;, CC BY-SA 4.0
    &lt;&#x2F;span&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Imagine you are booking a trip.
(I&#x27;ve been doing a lot of such imagining since March 2020.)
On your favorite travel website, you pick a hotel, some airline tickets, and a rental car,
then you enter your credit card information and click &quot;Book!&quot;
What happens next?&lt;&#x2F;p&gt;
&lt;p&gt;Needless to say, this operation in the real world is significantly more complex than
we could hope to cover here.
We&#x27;ll routinely gloss over many unimportant but nonetheless fascinating details, such as
&lt;a href=&quot;https:&#x2F;&#x2F;stripe.com&#x2F;blog&#x2F;payment-api-design&quot;&gt;how paying for things over the Internet actually works&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;two-phase-commit&quot;&gt;Two-phase commit&lt;&#x2F;h2&gt;
&lt;p&gt;You only want to pay the travel website if your choice of hotel, flight, and rental car
are all available.
Similarly, the companies involved don&#x27;t want to hold any reservations in your name
unless they can be sure that your bank will accept the credit card charges.
To realize your trip, multiple independent computer systems need to examine their
local information (bank account state, flight schedules, hotel room availability, etc.)
and agree that the transaction is safe to perform.&lt;&#x2F;p&gt;
&lt;p&gt;The travel website acts as the transaction coordinator of the two-phase commit.
First, it sends a &quot;prepare to commit&quot; message to the hotel, airline, rental agency, and your bank.
These messages ask the protocol participants to confirm that they have no objections
to the transaction based on their individual information.
For example, your airline will confirm that your selected seats are still available —
if someone else has booked them in the meantime, the airline will respond to the message
with an &quot;abort&quot; command, and the transaction will fail without charging your credit card.&lt;&#x2F;p&gt;
&lt;p&gt;Responses to these &quot;prepare to commit&quot; messages are binding: for example, once your bank
says &quot;the transfer is allowed and sufficient funds are available,&quot;
it can&#x27;t change its mind at a later time (in practice, at least not until a &lt;em&gt;very&lt;&#x2F;em&gt; long timeout,
usually 7–10 days).
This is commonly called &quot;authorizing the charge&quot; on your card — you have not been charged yet,
but your funds are held in reserve to ensure they remain available.&lt;&#x2F;p&gt;
&lt;p&gt;If your hotel, airline, rental agency, and bank all respond positively to
the &quot;prepare to commit&quot; messages, then you know your trip is viable, and the various other
parties know that you are able to pay for it.
The next step is to send a message to all participants confirming the transaction:
your card gets charged, your airline sends you a ticket confirmation, your hotel sends you
a room reservation, etc.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-can-t-this-be-paxos-instead&quot;&gt;Why can&#x27;t this be Paxos instead?&lt;&#x2F;h2&gt;
&lt;p&gt;There are many reasons, so let&#x27;s tackle just the most obvious one:
Paxos can&#x27;t represent the fact that in this algorithm,
&lt;em&gt;the different parties care about different things&lt;&#x2F;em&gt;.
The hotel doesn&#x27;t know or care about airline tickets, the rental agency can&#x27;t find you
a place to stay, and neither of them knows whether you have enough credit available from your bank.&lt;&#x2F;p&gt;
&lt;p&gt;To demonstrate the concrete problem here, let&#x27;s say you tried to set up a Paxos
instance where the travel website, your bank, the hotel, the airline, and
the rental agency each have 1 node in the Paxos group — a total of 5 nodes.&lt;&#x2F;p&gt;
&lt;p&gt;Per the rules of Paxos, if 3 of the 5 nodes (a majority) agree on a proposal,
that proposal is accepted — irrevocably so.
But this doesn&#x27;t make sense!
That would mean that the travel agency&#x27;s node, the airline&#x27;s node, and the hotel&#x27;s node
could decide to agree on the proposal and promise you that you can take your trip,
even though your bank won&#x27;t cover the payment and the rental agency has no cars available to rent!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;you-said-the-example-had-both-paxos-and-2pc-where-s-the-paxos&quot;&gt;You said the example had both Paxos and 2PC — where&#x27;s the Paxos?&lt;&#x2F;h2&gt;
&lt;p&gt;Remember how we said 2PC steps are binding?
For example, your bank must not forget that it promised to reserve some of your credit to
cover a transaction that is in progress, regardless of what failures might happen in its system.
In general, 2PC has a hard time recovering from failures of either the transaction coordinator
(the travel website in our example) or the transaction participants
(hotel &#x2F; airline &#x2F; bank &#x2F; rental agency).&lt;&#x2F;p&gt;
&lt;p&gt;Turning the 2PC transaction coordinator and each transaction participant
into a Paxos group is the key to &quot;not forgetting&quot; in the presence of failures.
For example, a Paxos-replicated bank system can continue to process your transaction
even if a minority of its servers crash, and will not forget to pay your travel agency
for your trip once the transaction commits.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;could-you-have-used-2pc-instead-of-paxos-for-the-replication-here&quot;&gt;Could you have used 2PC instead of Paxos for the replication here?&lt;&#x2F;h2&gt;
&lt;p&gt;Replication &lt;em&gt;isn&#x27;t the objective here&lt;&#x2F;em&gt; — fault tolerance is!
While you could successfully set up 2PC to replicate state across multiple identical machines,
recall that 2PC does not tolerate failures:
the first time a participant machine crashes in a 2PC setup, the protocol grinds to a halt.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recap&quot;&gt;Recap&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Paxos and 2PC aim to solve different problems, and are not interchangeable for each other.&lt;&#x2F;li&gt;
&lt;li&gt;We use 2PC when multiple non-equivalent servers need to agree that a given operation is
safe to perform.
The &quot;non-equivalent&quot; part means Paxos doesn&#x27;t work for this use case.&lt;&#x2F;li&gt;
&lt;li&gt;In practice, each of the &quot;servers&quot; in the 2PC computation is actually a separate Paxos group.
This is how we ensure the &quot;2PC assumes all nodes never fail&quot; assumption holds up
in the real world — the Paxos groups provide fault tolerance.&lt;&#x2F;li&gt;
&lt;li&gt;Paxos provides fault tolerance through replication, and you could configure 2PC to
replicate data across multiple equivalent servers.
However, such 2PC replication cannot provide fault tolerance on its own because
2PC requires that &lt;em&gt;all nodes&lt;&#x2F;em&gt; continue to work — even a single failure will stop
the protocol&#x27;s progress.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
</feed>
