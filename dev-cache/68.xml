<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="https://lipanski.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lipanski.com/" rel="alternate" type="text/html" /><updated>2023-06-20T11:54:19+00:00</updated><id>https://lipanski.com/feed.xml</id><title type="html">Florin Lipan</title><subtitle>My personal website</subtitle><entry><title type="html">The smallest Docker image to serve static websites</title><link href="https://lipanski.com/posts/smallest-docker-image-static-website" rel="alternate" type="text/html" title="The smallest Docker image to serve static websites" /><published>2021-02-28T00:00:00+00:00</published><updated>2021-02-28T00:00:00+00:00</updated><id>https://lipanski.com/posts/smallest-docker-image-static-website</id><content type="html" xml:base="https://lipanski.com/posts/smallest-docker-image-static-website">&lt;h1 id=&quot;the-smallest-docker-image-to-serve-static-websites&quot;&gt;The smallest Docker image to serve static websites&lt;/h1&gt;

&lt;p&gt;Until recently, I used to think that serving static websites from Docker would be a waste of bandwith and storage. Bundling nginx or various other heavy runtimes inside a Docker image for the sole purpose of serving static files didn’t seem like the best idea - Netlify or Github Pages can handle this much better. But my hobby server was sad and cried digital tears.&lt;/p&gt;

&lt;p&gt;A recent HackerNews post about &lt;a href=&quot;https://justine.lol/redbean/index.html&quot;&gt;redbean&lt;/a&gt;, a single-binary, super tiny, static file server got me thinking. So begins my journey to find the most time/storage efficient Docker image to serve a static website.&lt;/p&gt;

&lt;p&gt;After evaluating a few static file servers with similar specs, I initially opted for &lt;a href=&quot;https://www.acme.com/software/thttpd/&quot;&gt;thttpd&lt;/a&gt;, which comes with a similar small footprint but seems a bit more battle-tested. This got me to a whooping &lt;strong&gt;186KB&lt;/strong&gt; image and you can read more about it in the &lt;a href=&quot;https://github.com/lipanski/lipanski.github.io/blob/8aa8994299d0314b4d113ea481c60561f97c2940/_posts/2021-02-28-smallest-docker-image-static-website.md&quot;&gt;previous version&lt;/a&gt; of this post.&lt;/p&gt;

&lt;p&gt;A later comment (thanks Sergey Ponomarev) suggested the &lt;a href=&quot;https://git.busybox.net/busybox/tree/networking/httpd.c&quot;&gt;BusyBox httpd&lt;/a&gt; file server, which seemed fairly small and more feature-rich so I gave it a try. Let’s see if it can produce an even smaller image (spoiler alert: it can).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.busybox.net/&quot;&gt;BusyBox&lt;/a&gt; is much more than just a file server - it’s a set of lightweight replacements for many common UNIX utilities, like &lt;em&gt;shell&lt;/em&gt;, &lt;em&gt;gzip&lt;/em&gt;, or &lt;em&gt;echo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Running the BusyBox httpd server goes like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;busybox httpd -f -v -p 3000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will launch the server in foreground (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt;), listening on port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3000&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p&lt;/code&gt;), serving all files inside the current directory. Access logs will be printend to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt;). It comes with a few other neat features, like serving gzipped content, custom error pages, basic auth, allow/deny rules, and reverse proxying, which can be enabled by adding a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;httpd.conf&lt;/code&gt; file. You can read more about it in the &lt;a href=&quot;https://git.busybox.net/busybox/tree/networking/httpd.c&quot;&gt;source code comments&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My first attempt used the official &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;busybox&lt;/code&gt; image:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; busybox:1.35&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create a non-root user to own the files and run our server&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;adduser &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; static
&lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; static&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /home/static&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy the static website&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Use the .dockerignore file to control what ends up inside the image!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . .&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Run BusyBox httpd&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;busybox&quot;, &quot;httpd&quot;, &quot;-f&quot;, &quot;-v&quot;, &quot;-p&quot;, &quot;3000&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can build and run the image by calling:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; static:latest &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--init&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 3000:3000 static:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…then browse to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:3000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The image builds quickly and, at &lt;strong&gt;1.25MB&lt;/strong&gt;, is fairly small:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker images | grep static
static   latest   854054cff457   1 second ago   1.25MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The image is already &lt;a href=&quot;https://github.com/docker-library/busybox/tree/master/stable/musl&quot;&gt;built&lt;/a&gt; using &lt;a href=&quot;https://hub.docker.com/_/scratch&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scratch&lt;/code&gt;&lt;/a&gt;, which is basically a &lt;em&gt;no-op&lt;/em&gt; image, light as vacuum. It contains only the statically compiled BusyBox binary and nothing else. There’s not much we can optimize there.&lt;/p&gt;

&lt;p&gt;Then again BusyBox comes packaged with much more than just the static file server - it contains all these other UNIX utilities. We can create a custom build of BusyBox limiting it to only &lt;em&gt;httpd&lt;/em&gt; and thus reducing its size.&lt;/p&gt;

&lt;p&gt;We start by downloading the BusyBox source code:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git://busybox.net/busybox.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then create a default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.config&lt;/code&gt; file for the build with all features disabled:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make allnoconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make menuconfig&lt;/code&gt; and select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;httpd&lt;/code&gt; features from within “Network Utilities”. Since we don’t want to depend on other OS libraries, we also need to check “Build static binary” from within “Settings”. The resulting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.config&lt;/code&gt; file looks like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ...
CONFIG_STATIC=y
# ...
CONFIG_HTTPD=y
CONFIG_FEATURE_HTTPD_PORT_DEFAULT=80
CONFIG_FEATURE_HTTPD_RANGES=y
CONFIG_FEATURE_HTTPD_SETUID=y
CONFIG_FEATURE_HTTPD_BASIC_AUTH=y
CONFIG_FEATURE_HTTPD_AUTH_MD5=y
CONFIG_FEATURE_HTTPD_CGI=y
CONFIG_FEATURE_HTTPD_CONFIG_WITH_SCRIPT_INTERPR=y
CONFIG_FEATURE_HTTPD_SET_REMOTE_PORT_TO_ENV=y
CONFIG_FEATURE_HTTPD_ENCODE_URL_STR=y
CONFIG_FEATURE_HTTPD_ERROR_PAGES=y
CONFIG_FEATURE_HTTPD_PROXY=y
CONFIG_FEATURE_HTTPD_GZIP=y
CONFIG_FEATURE_HTTPD_ETAG=y
CONFIG_FEATURE_HTTPD_LAST_MODIFIED=y
CONFIG_FEATURE_HTTPD_DATE=y
CONFIG_FEATURE_HTTPD_ACL_IP=y
# ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since building the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.config&lt;/code&gt; is a bit tedious, we’ll save it for later use. You can find a sample on &lt;a href=&quot;https://github.com/lipanski/docker-static-website/blob/master/.config&quot;&gt;my Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we compile the binary:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…which will be placed at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_install/bin/busybox&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you’ve built the binary in a glibc environment (e.g. Ubuntu), it would take up around &lt;strong&gt;1.5MB&lt;/strong&gt;, which is not that great. Actually, it’s worse than the official image containing all BusyBox utilities.&lt;/p&gt;

&lt;p&gt;Let’s try and build it on &lt;strong&gt;musl&lt;/strong&gt;, inside an Alpine container:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; alpine:3.13.2&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install all dependencies required for compiling busybox&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk add gcc musl-dev make perl

&lt;span class=&quot;c&quot;&gt;# Download busybox sources&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;wget https://busybox.net/downloads/busybox-1.35.0.tar.bz2 &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xf busybox-1.35.0.tar.bz2 &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; /busybox-1.35.0 /busybox

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /busybox&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy the busybox build config (limited to httpd)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; .config .&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Compile and install busybox&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The binary size looks much better now: &lt;strong&gt;177KB&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;We can improve further by dropping some unneeded &lt;em&gt;httpd&lt;/em&gt; features from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.config&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CONFIG_HTTPD=y
CONFIG_FEATURE_HTTPD_PORT_DEFAULT=80
# CONFIG_FEATURE_HTTPD_RANGES is not set
# CONFIG_FEATURE_HTTPD_SETUID is not set
CONFIG_FEATURE_HTTPD_BASIC_AUTH=y
# CONFIG_FEATURE_HTTPD_AUTH_MD5 is not set
# CONFIG_FEATURE_HTTPD_CGI is not set
# CONFIG_FEATURE_HTTPD_CONFIG_WITH_SCRIPT_INTERPR is not set
# CONFIG_FEATURE_HTTPD_SET_REMOTE_PORT_TO_ENV is not set
# CONFIG_FEATURE_HTTPD_ENCODE_URL_STR is not set
CONFIG_FEATURE_HTTPD_ERROR_PAGES=y
CONFIG_FEATURE_HTTPD_PROXY=y
CONFIG_FEATURE_HTTPD_GZIP=y
CONFIG_FEATURE_HTTPD_ETAG=y
CONFIG_FEATURE_HTTPD_LAST_MODIFIED=y
CONFIG_FEATURE_HTTPD_DATE=y
CONFIG_FEATURE_HTTPD_ACL_IP=y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can disable most of these features but in my experience the biggest impact comes from dropping MD5 support for basic auth and CGI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’ve now reached &lt;strong&gt;149KB&lt;/strong&gt;. It’s time to wrap things up and copy the static BusyBox binary to a Docker &lt;a href=&quot;https://hub.docker.com/_/scratch&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scratch&lt;/code&gt;&lt;/a&gt; image. Using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scratch&lt;/code&gt; image usually requires a multi-stage approach. We start from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alpine&lt;/code&gt;, download and compile &lt;em&gt;BusyBox&lt;/em&gt; as a static binary, create a user, then copy these assets over to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scratch&lt;/code&gt; and add our static files to the mix:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; alpine:3.13.2 AS builder&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install all dependencies required for compiling busybox&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk add gcc musl-dev make perl

&lt;span class=&quot;c&quot;&gt;# Download busybox sources&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;wget https://busybox.net/downloads/busybox-1.35.0.tar.bz2 &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xf busybox-1.35.0.tar.bz2 &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; /busybox-1.35.0 /busybox

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /busybox&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy the busybox build config (limited to httpd)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; .config .&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Compile and install busybox&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create a non-root user to own the files and run our server&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;adduser &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; static

&lt;span class=&quot;c&quot;&gt;# Switch to the scratch image&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; scratch&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;EXPOSE&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 3000&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy over the user&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=builder /etc/passwd /etc/passwd&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy the busybox static binary&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=builder /busybox/_install/bin/busybox /&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Use our non-root user&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; static&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /home/static&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Uploads a blank default httpd.conf&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This is only needed in order to set the `-c` argument in this base file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and save the developer the need to override the CMD line in case they ever&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# want to use a httpd.conf&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; httpd.conf .&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy the static website&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Use the .dockerignore file to control what ends up inside the image!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . .&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Run busybox httpd&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;/busybox&quot;, &quot;httpd&quot;, &quot;-f&quot;, &quot;-v&quot;, &quot;-p&quot;, &quot;3000&quot;, &quot;-c&quot;, &quot;httpd.conf&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s have another look at those numbers:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; docker images | grep static
static   latest   9b08b9509c32   1 second ago   154kB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/excellent.png&quot; alt=&quot;Excellent&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;154KB&lt;/strong&gt; we’re left with correspond to the size of the &lt;em&gt;BusyBox httpd&lt;/em&gt; static binary and the static files that were copied over, which in my case was just one file containing the text &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello world&lt;/code&gt;. Note that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alpine&lt;/code&gt; step of the multi-stage build is actually quite large in size (&lt;em&gt;~185MB&lt;/em&gt;), but it can be reused across builds and doesn’t get pushed to the registry. In order to skip the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alpine&lt;/code&gt; step entirely, I pushed the resulting image to the Docker registry.&lt;/p&gt;

&lt;p&gt;You can download it from &lt;a href=&quot;https://hub.docker.com/r/lipanski/docker-static-website&quot;&gt;Docker Hub&lt;/a&gt; and use it to serve your static websites:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; lipanski/docker-static-website:latest&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This produces a single-layer image of &lt;strong&gt;154KB&lt;/strong&gt; + whatever the size of your static website and &lt;em&gt;nothing else&lt;/em&gt;. If you need to configure &lt;em&gt;httpd&lt;/em&gt; in a different way, you can just override the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD&lt;/code&gt; line:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; lipanski/docker-static-website:latest&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . .&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;/busybox&quot;, &quot;httpd&quot;, &quot;-f&quot;, &quot;-v&quot;, &quot;-p&quot;, &quot;3000&quot;, &quot;-c&quot;, &quot;httpd.conf&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code and an FAQ about configuring &lt;em&gt;httpd&lt;/em&gt; is available at &lt;a href=&quot;https://github.com/lipanski/docker-static-website&quot;&gt;https://github.com/lipanski/docker-static-website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To conclude, Docker &lt;em&gt;can&lt;/em&gt; be used efficiently to package and serve static websites.&lt;/p&gt;</content><author><name></name></author><category term="devops" /><summary type="html">The smallest Docker image to serve static websites</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lipanski.com/assets/images/logo.jpg" /><media:content medium="image" url="https://lipanski.com/assets/images/logo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Some things you should know about eager loading in ActiveRecord</title><link href="https://lipanski.com/posts/activerecord-eager-loading" rel="alternate" type="text/html" title="Some things you should know about eager loading in ActiveRecord" /><published>2020-10-06T00:00:00+00:00</published><updated>2020-10-06T00:00:00+00:00</updated><id>https://lipanski.com/posts/activerecord-eager-loading</id><content type="html" xml:base="https://lipanski.com/posts/activerecord-eager-loading">&lt;h1 id=&quot;some-things-you-should-know-about-eager-loading-in-activerecord&quot;&gt;Some things you should know about eager loading in ActiveRecord&lt;/h1&gt;

&lt;p&gt;Tracking down &lt;em&gt;all&lt;/em&gt; the associations that need to be eager loaded in order to prevent N+1 queries can be tedious. Your code has to be &lt;em&gt;instrumented properly&lt;/em&gt; and most of the times you need to reason about every single query, &lt;em&gt;one by one&lt;/em&gt;. On top of that, eager loading can be fussy: calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;order&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;limit&lt;/code&gt; on your associations might invalidate your eager loading efforts in some &lt;em&gt;unexpected&lt;/em&gt; ways.&lt;/p&gt;

&lt;p&gt;This article will present an &lt;a href=&quot;#automatic-eager-loading&quot;&gt;&lt;strong&gt;automated way of dealing with N+1&lt;/strong&gt;&lt;/a&gt; queries and it will explain &lt;a href=&quot;#things-that-break-eager-loading-where-order-limit&quot;&gt;&lt;strong&gt;how to go around some of the limitations of eager loading&lt;/strong&gt;&lt;/a&gt; in ActiveRecord. Furthermore, it will show you &lt;a href=&quot;#use-the-cache-luke&quot;&gt;&lt;strong&gt;how to use the query cache to your benefit&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;#preventing-n1-regressions-with-tests&quot;&gt;&lt;strong&gt;how to write tests&lt;/strong&gt;&lt;/a&gt; to prevent those sneaky N+1 queries from coming back.&lt;/p&gt;

&lt;h2 id=&quot;automatic-eager-loading&quot;&gt;Automatic eager loading&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/salsify/goldiloader&quot;&gt;Goldiloader&lt;/a&gt; is a gem that eager loads your associations &lt;em&gt;automatically&lt;/em&gt; and &lt;em&gt;only when needed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Just add it in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;goldiloader&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…and watch as your associations are &lt;em&gt;magically&lt;/em&gt; eager loaded:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;users&quot;.* FROM &quot;users&quot; LIMIT 5&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; IN (1,2,3,4,5)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice how there was &lt;strong&gt;no need to explicitly call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includes(:posts)&lt;/code&gt;&lt;/strong&gt; when querying users. Without Goldiloader, that second call would have triggered &lt;em&gt;five&lt;/em&gt; queries instead of one. With Goldiloader, you basically don’t have to think about calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includes&lt;/code&gt; any more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goldiloader pairs very nicely with GraphQL APIs&lt;/strong&gt;. The moment your API allows for querying associations or associations of associations, you have a little &lt;em&gt;N+1 nightmare&lt;/em&gt; on your hands. GraphQL APIs with various different clients are hard to optimize because they might be used in so many different ways. Integrating something like &lt;a href=&quot;https://github.com/shopify/graphql-batch&quot;&gt;graphql-batch&lt;/a&gt; could address the problem, but you have to apply it to every individual case and it’s a more intrusive solution.&lt;/p&gt;

&lt;p&gt;On top of that, if you’re working on a large code base or if you’re inexperienced about dealing with N+1 queries, Goldiloader might give you a nice performance boost at a low cost, albeit with some limitations which we will discuss in the next part.&lt;/p&gt;

&lt;h2 id=&quot;things-that-break-eager-loading-where-order-limit&quot;&gt;Things that break eager loading: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;order&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;limit&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Applying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;order&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;limit&lt;/code&gt; clauses on your ActiveRecord associations will break eager loading, whether you’re using Goldiloader or not.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In order to make the following examples more generic, I’ll be using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includes&lt;/code&gt; calls instead of Goldiloader. If you’re using Goldiloader, simply remove them or consider them redundant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s see what happens when we try to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;order&lt;/code&gt; our posts:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;users&quot;.* FROM &quot;users&quot; LIMIT 5&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; IN (1,2,3,4,5)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; = 1 ORDER BY &quot;posts&quot;.&quot;created_at&quot; ASC&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; = 2 ORDER BY &quot;posts&quot;.&quot;created_at&quot; ASC&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; = 3 ORDER BY &quot;posts&quot;.&quot;created_at&quot; ASC&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; = 4 ORDER BY &quot;posts&quot;.&quot;created_at&quot; ASC&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; = 5 ORDER BY &quot;posts&quot;.&quot;created_at&quot; ASC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even though calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includes(:posts)&lt;/code&gt; produced an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IN&lt;/code&gt; query which seems to cover all our posts, applying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;order&lt;/code&gt; clause on our association ignored this and triggered a bunch of N+1 queries. In order for eager loading to work, &lt;strong&gt;the eager loaded query should match the query required to fetch your association&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;One way to avoid this is by moving the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;order&lt;/code&gt; inside a &lt;strong&gt;default scope&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;default_scope&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;users&quot;.* FROM &quot;users&quot; LIMIT 5&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; IN (1,2,3,4,5) ORDER BY &quot;posts&quot;.&quot;created_at&quot; ASC&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# No queries here, they've been eager loaded already&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…another way is by moving the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;order&lt;/code&gt; inside the &lt;strong&gt;parent association&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;users&quot;.* FROM &quot;users&quot; LIMIT 5&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; IN (1,2,3,4,5) ORDER BY &quot;posts&quot;.&quot;created_at&quot; ASC&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# No queries here, they've been eager loaded already&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…and yet another way is by moving the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;order&lt;/code&gt; inside a &lt;strong&gt;scoped parent association&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ordered_posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class_name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Post&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ordered_posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;users&quot;.* FROM &quot;users&quot; LIMIT 5&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; IN (1,2,3,4,5) ORDER BY &quot;posts&quot;.&quot;created_at&quot; ASC&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ordered_posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# No queries here, they've been eager loaded already&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s see what happens when we apply a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where&lt;/code&gt; condition to our posts:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;users&quot;.* FROM &quot;users&quot; LIMIT 5&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; IN (1,2,3,4,5)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at &amp;lt; ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; = 1 AND (created_at &amp;lt; '2020-09-25 08:55:05.919824')&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; = 2 AND (created_at &amp;lt; '2020-09-25 08:55:05.919824')&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; = 3 AND (created_at &amp;lt; '2020-09-25 08:55:05.919824')&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; = 4 AND (created_at &amp;lt; '2020-09-25 08:55:05.919824')&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;user_id&quot; = 5 AND (created_at &amp;lt; '2020-09-25 08:55:05.919824')&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok, that didn’t work. But we can fix it exactly the same way.&lt;/p&gt;

&lt;p&gt;You can move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where&lt;/code&gt; condition inside a &lt;strong&gt;default scope&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;default_scope&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at &amp;lt; ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…or inside the &lt;strong&gt;parent association&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at &amp;lt; ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…or inside a &lt;strong&gt;scoped parent association&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:posts_from_one_week_ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at &amp;lt; ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:posts_from_one_week_ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts_from_one_week_ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mastering eager loading basically means &lt;strong&gt;relying more on default scopes&lt;/strong&gt; and &lt;strong&gt;applying scopes inside your associations&lt;/strong&gt; rather than using those scopes directly.&lt;/p&gt;

&lt;p&gt;What about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;limit&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;offset&lt;/code&gt;? Depending on your use case, you could apply the same techniques. But there’s one big use case that just doesn’t fit here: &lt;strong&gt;pagination&lt;/strong&gt;. How would you supply the page number? And while we’re at it, how would you deal with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where&lt;/code&gt; conditions or &lt;strong&gt;scopes that contain a variable&lt;/strong&gt;?&lt;/p&gt;

&lt;h2 id=&quot;turn-your-queries-around&quot;&gt;Turn your queries around&lt;/h2&gt;

&lt;p&gt;Unlike scopes, &lt;strong&gt;default scopes and scoped associations don’t take arguments&lt;/strong&gt;. If we’d like to provide our associations with an outside parameter while avoiding N+1 queries, we’ll have to think of something else.&lt;/p&gt;

&lt;p&gt;Consider the following code which produces N+1 queries:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# An outside parameter&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at &amp;lt; ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# N+1!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In such cases, you can turn your queries around and &lt;strong&gt;let the association become the main subject of that query&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# An outside parameter&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at &amp;lt; ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE (created_at &amp;lt; '2020-09-27 10:03:23.478773')&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;id&quot; IN (1,2,3,4,5)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# No queries here, they've been eager loaded already&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;use-the-cache-luke&quot;&gt;Use the cache, Luke!&lt;/h2&gt;

&lt;p&gt;Let’s say you’d like to query the &lt;strong&gt;total number of posts for every user&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT &quot;users&quot;.* from &quot;users&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT COUNT(*) FROM &quot;posts&quot; WHERE user_id = 1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT COUNT(*) FROM &quot;posts&quot; WHERE user_id = 2&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT COUNT(*) FROM &quot;posts&quot; WHERE user_id = 3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT COUNT(*) FROM &quot;posts&quot; WHERE user_id = 4&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SELECT COUNT(*) FROM &quot;posts&quot; WHERE user_id = 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you assumed, it triggered a bunch of N+1 queries. But this time there’s no way to eager load these aggregate values by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Instead you can make use of the &lt;strong&gt;ActiveRecord query cache&lt;/strong&gt;. By default, ActiveRecord caches results for every individual SQL query, ensuring that &lt;strong&gt;subsequent calls placed within the same web request or background job will not hit the database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COUNT&lt;/code&gt; queries differ though – every distinct &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user_id&lt;/code&gt; will break the caching. Then again, there’s nothing speaking against &lt;strong&gt;rewriting our queries to produce the same SQL every time&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;posts_count_per_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Returns a Hash&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;posts_count_per_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running this code from within a web request will produce the following log output:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#        (1.4ms)  SELECT &quot;users&quot;.* from &quot;users&quot;
#        (2.0ms)  SELECT COUNT(*) AS count_all, &quot;posts&quot;.&quot;user_id&quot; AS posts_user_id FROM &quot;posts&quot; GROUP BY &quot;posts&quot;.&quot;user_id&quot;
# CACHE  (0.1ms)  SELECT COUNT(*) AS count_all, &quot;posts&quot;.&quot;user_id&quot; AS posts_user_id FROM &quot;posts&quot; GROUP BY &quot;posts&quot;.&quot;user_id&quot;
# CACHE  (0.1ms)  SELECT COUNT(*) AS count_all, &quot;posts&quot;.&quot;user_id&quot; AS posts_user_id FROM &quot;posts&quot; GROUP BY &quot;posts&quot;.&quot;user_id&quot;
# CACHE  (0.1ms)  SELECT COUNT(*) AS count_all, &quot;posts&quot;.&quot;user_id&quot; AS posts_user_id FROM &quot;posts&quot; GROUP BY &quot;posts&quot;.&quot;user_id&quot;
# CACHE  (0.1ms)  SELECT COUNT(*) AS count_all, &quot;posts&quot;.&quot;user_id&quot; AS posts_user_id FROM &quot;posts&quot; GROUP BY &quot;posts&quot;.&quot;user_id&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first iteration triggered a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COUNT&lt;/code&gt; query, but &lt;strong&gt;all subsequent calls were cached&lt;/strong&gt;, which means they didn’t hit the database and the N+1 situation was avoided.&lt;/p&gt;

&lt;p&gt;Keep in mind that relying on the query cache too much might have a &lt;strong&gt;potential impact on the amount of allocations&lt;/strong&gt; and consequently memory usage of your app, especially when triggering queries that have to initialize many ActiveRecord models. For this reason, prefer using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includes&lt;/code&gt; when possible or write your &lt;em&gt;aggregate&lt;/em&gt; queries in such a way that they resolve to simple structures (hashes or arrays of primitive values).&lt;/p&gt;

&lt;p&gt;If you’d like to enable the query cache outside of web requests or background jobs or if you’d like to try it out in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails console&lt;/code&gt;, you can call:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enable_query_cache!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Any queries triggered here might be cached&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;disable_query_cache!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;preventing-n1-regressions-with-tests&quot;&gt;Preventing N+1 regressions with tests&lt;/h2&gt;

&lt;p&gt;Given a large code base, introducing more N+1 queries is fairly easy – as easy as writing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user.posts&lt;/code&gt; inside a loop, somewhere deep inside a template, without remembering to also eager load the association in the controller. But you can write tests to prevent that…&lt;/p&gt;

&lt;p&gt;First, let’s settle on the behaviour we’d like to test: &lt;strong&gt;any request should trigger at most one SQL query per table&lt;/strong&gt;. In order to track and count all these queries, we could use ActiveSupport instrumentation to hook up to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sql.active_record&lt;/code&gt; event, the same way ActiveRecord is &lt;a href=&quot;https://github.com/rails/rails/blob/6-0-stable/activerecord/test/cases/test_case.rb&quot;&gt;tested&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I already packaged this in a tiny gem called &lt;a href=&quot;https://github.com/lipanski/sql-spy&quot;&gt;sql_spy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just add it to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sql_spy&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…and let’s write our first &lt;strong&gt;controller test&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sql_spy&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsControllerTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IntegrationTest&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GET /posts should not trigger N+1 queries&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Add some realistic test data here&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SqlSpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;track&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/posts&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;select_queries_by_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:select?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;group_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:model_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# We only want the SELECT queries and we'd like them grouped by model&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select_queries_by_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Our tolerance rate is 1 query per table&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# You can increase this value depending on your business logic&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some things are worth mentioning here. &lt;strong&gt;Your test is only as correct as the test data you provide it with&lt;/strong&gt;. Ideally try to keep a realistic set of fixtures around (3-4 examples of each core model) or create a realistic environment before the test run.&lt;/p&gt;

&lt;p&gt;Some requests might genuinely be triggering &lt;strong&gt;more than one query per table&lt;/strong&gt;. For example, paginated requests usually produce two queries: one to fetch the records, another one for the page count. In such cases, you can &lt;strong&gt;increase the tested tolerance rate, while also increasing the number of records per table&lt;/strong&gt; in your test setup, to make sure you’re still catching those N+1 queries.&lt;/p&gt;

&lt;p&gt;You can introduce these N+1 regression tests to &lt;strong&gt;every critical or data-intensive controller action&lt;/strong&gt;. Their setup is fairly cheap, while N+1 queries can come at a very high cost for your database and your response times.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The best results will come from applying a combination of the solutions above. Golidloader will get rid of some of your N+1 queries, but you’ll also need to start writing your associations with eager loading in mind. Testing for N+1 regressions and proper instrumentation will keep your hard-won performance improvements intact.&lt;/p&gt;

&lt;p&gt;What do we say to the God of N+1 Queries? &lt;em&gt;Not today.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations&quot;&gt;Rails Guides: Eager Loading Associations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/salsify/goldiloader&quot;&gt;Goldiloader&lt;/a&gt;: Automatic eager loading for ActiveRecord&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lipanski/sql-spy&quot;&gt;SqlSpy&lt;/a&gt;: Track SQL queries performed inside a block of code&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sequel.jeremyevans.net/rdoc-plugins/classes/Sequel/Plugins/TacticalEagerLoading.html&quot;&gt;Automatic eager loading for the Sequel ORM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/flyerhzm/bullet&quot;&gt;Bullet&lt;/a&gt;: N+1 monitoring on steroids&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nepalez/rspec-sqlimit&quot;&gt;rspec-sqlimit&lt;/a&gt;: An RSpec matcher to check the total number of performed SQL queries&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/46421504&quot;&gt;https://stackoverflow.com/a/46421504&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/blob/6-0-stable/activerecord/test/cases/test_case.rb&quot;&gt;https://github.com/rails/rails/blob/6-0-stable/activerecord/test/cases/test_case.rb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/5492207/801186&quot;&gt;https://stackoverflow.com/a/5492207/801186&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="ruby" /><summary type="html">Some things you should know about eager loading in ActiveRecord</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lipanski.com/assets/images/logo.jpg" /><media:content medium="image" url="https://lipanski.com/assets/images/logo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Serving ActiveStorage uploads through a CDN with Rails direct routes</title><link href="https://lipanski.com/posts/activestorage-cdn-rails-direct-route" rel="alternate" type="text/html" title="Serving ActiveStorage uploads through a CDN with Rails direct routes" /><published>2020-06-23T00:00:00+00:00</published><updated>2020-06-23T00:00:00+00:00</updated><id>https://lipanski.com/posts/activestorage-cdn-rails-direct-route</id><content type="html" xml:base="https://lipanski.com/posts/activestorage-cdn-rails-direct-route">&lt;h1 id=&quot;serving-activestorage-uploads-through-a-cdn-with-rails-direct-routes&quot;&gt;Serving ActiveStorage uploads through a CDN with Rails direct routes&lt;/h1&gt;

&lt;p&gt;ActiveStorage makes it really easy to upload files from Rails to an S3 bucket or an S3-compatible service, like DigitalOcean Spaces. Refer to the &lt;a href=&quot;https://edgeguides.rubyonrails.org/active_storage_overview.html&quot;&gt;official documentation&lt;/a&gt; if you’d like to know more about setting up ActiveStorage.&lt;/p&gt;

&lt;p&gt;If your uploads are meant to be public and you were thinking of serving them directly through the CDN sitting in front of your S3 bucket, you’ll soon notice a problem: ActiveStorage URLs are built to always go through your Rails app, mainly through &lt;a href=&quot;https://github.com/rails/rails/blob/bc9fb9cf8b5dbe8ecf399ffd5d48d84bdb96a9db/activestorage/app/controllers/active_storage/blobs_controller.rb#L10-L13&quot;&gt;ActiveStorage::BlobsController&lt;/a&gt;. This controller is responsible for setting the cache headers and redirecting to the bucket URL. Your Rails app will be the first point of contact even if it’s just to retrieve the bucket URL. On top of that, there’s no place to specify a CDN host to replace the bucket host.&lt;/p&gt;

&lt;p&gt;Fortunately, there is an easy way to go around this problem. In order to translate stored files into URLs, Rails provides the URL helper &lt;a href=&quot;https://edgeguides.rubyonrails.org/active_storage_overview.html#linking-to-files&quot;&gt;rails_blob_url&lt;/a&gt;, which basically resolves to this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveStorage::BlobsController&lt;/code&gt;. We’d like to introduce a new helper that points directly to our CDN host.&lt;/p&gt;

&lt;p&gt;Though there are different ways of solving this problem, I found using Rails direct routes an elegant solution. &lt;a href=&quot;https://guides.rubyonrails.org/routing.html#direct-routes&quot;&gt;Rails direct routes&lt;/a&gt; provide a way to create URL helpers directly from your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/routes.rb&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/routes.rb&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;direct&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rails_public_blob&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://cdn.example.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can call this route the same way you’d call the original Rails URL helper:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_one_attached&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:profile_picture&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rails_public_blob_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;profile_picture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; https://cdn.example.com/j8rte71tp8xpq5afr3uqxlcqtkzn&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# You can also use this outside views&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url_helpers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rails_public_blob_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;profile_picture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s refactor our route a bit:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/routes.rb&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;direct&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rails_public_blob&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Preserve the behaviour of `rails_blob_url` inside these environments&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# where S3 or the CDN might not be configured&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;development?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;route_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rails_blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Use an environment variable instead of hard-coding the CDN host&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# You could also use the Rails.configuration to achieve the same&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CDN_HOST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;proxy-mode&quot;&gt;Proxy mode&lt;/h2&gt;

&lt;p&gt;Rails &lt;a href=&quot;https://github.com/rails/rails/pull/42305&quot;&gt;recently&lt;/a&gt; introduced a way to configure a CDN host for your ActiveStorage assets. This requires a &lt;em&gt;proxy-enabled&lt;/em&gt; CDN (Cloudflare, CloudFront, nginx etc.) - so using &lt;em&gt;only&lt;/em&gt; S3 or DigitalOcean Spaces as public file servers is excluded. On top of that, the CDN will fall back to the Rails backend once per uncached file (and again every time the CDN cache is invalidated). Yes, the backend request is fairly cheap (it’s just a redirect), but it can get delayed by other slower requests to your backend during peak times.&lt;/p&gt;

&lt;p&gt;The solution proposed in my article can serve assets directly from S3 or DigitalOcean Spaces, using these services as public static file servers. At the end of the day, it all depends what kind of CDN you are using, how much you are willing to add to your infrastructure and at which level you’d like to optimize. For your average website I think serving assets directly from S3 or DigitalOcean Spaces is perfectly fine.&lt;/p&gt;

&lt;p&gt;You can read more about proxy mode &lt;a href=&quot;https://edgeguides.rubyonrails.org/active_storage_overview.html#proxy-mode&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;variants&quot;&gt;Variants&lt;/h2&gt;

&lt;p&gt;If you’re using variants, things will look a bit different in your development environment. Running the following code:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;profile_picture&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rails_blob_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;resize_to_limit: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…will produce an error: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NoMethodError (undefined method 'signed_id' for #&amp;lt;ActiveStorage::Variant&amp;gt;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;https://github.com/rails/rails/issues/32500#issuecomment-380004250&quot;&gt;this comment&lt;/a&gt;, the recommended way for accessing variants directly is by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails_representation_url&lt;/code&gt; helper. The following call should work:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;profile_picture&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rails_representation_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;resize_to_limit: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;processed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s update our direct route to accomodate the logic for variants:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/routes.rb&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;direct&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rails_public_blob&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Preserve the behaviour of `rails_blob_url` inside these environments&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# where S3 or the CDN might not be configured&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;development?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
      &lt;span class=&quot;c1&quot;&gt;# ActiveStorage::VariantWithRecord was introduced in Rails 6.1&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Remove the second check if you're using an older version&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Variant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VariantWithRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:rails_representation&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
       &lt;span class=&quot;ss&quot;&gt;:rails_blob&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;route_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Use an environment variable instead of hard-coding the CDN host&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CDN_HOST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the &lt;em&gt;production&lt;/em&gt; version using the CDN works the same for both the original attachment as well as the variants.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;You can use this new URL helper whenever your ActiveStorage files should be served directly through a CDN without having to deploy this setup to your development environment.&lt;/p&gt;

&lt;p&gt;Rails 6.1 will allow defining multiple storage services for the same environment, which means you’ll be able to use both public and private buckets from your code. This makes using public buckets and CDNs an even more viable option than before. See this &lt;a href=&quot;https://github.com/rails/rails/pull/34935&quot;&gt;PR&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Thanks to Eduardo  Álvarez for raising the variants issue in the comments.&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><summary type="html">Serving ActiveStorage uploads through a CDN with Rails direct routes</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lipanski.com/assets/images/logo.jpg" /><media:content medium="image" url="https://lipanski.com/assets/images/logo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Speed up your Docker builds with –cache-from</title><link href="https://lipanski.com/posts/speed-up-your-docker-builds-with-cache-from" rel="alternate" type="text/html" title="Speed up your Docker builds with –cache-from" /><published>2020-04-24T00:00:00+00:00</published><updated>2020-04-24T00:00:00+00:00</updated><id>https://lipanski.com/posts/speed-up-your-docker-builds-with-cache-from</id><content type="html" xml:base="https://lipanski.com/posts/speed-up-your-docker-builds-with-cache-from">&lt;h1 id=&quot;speed-up-your-docker-builds-with-cache-from&quot;&gt;Speed up your Docker builds with –cache-from&lt;/h1&gt;

&lt;p&gt;Using the Docker cache efficiently can result in significantly faster build times. In some environments though, like CI/CD systems, individual builds happen independent of each other and the build cache is never preserved. Every build starts from zero which can be slow and wasteful. This article will try to provide some solutions for these cases.&lt;/p&gt;

&lt;p&gt;As long as you’re pushing images to a remote registry, you can always use a previously built image as a cache layer for a new build. You can achieve this by setting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--cache-from&lt;/code&gt; option on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build&lt;/code&gt; call. For versions of Docker that don’t include BuildKit, you’ll have to pull the image yourself before running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build&lt;/code&gt;. Assuming the latter, here’s how things would look like:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# This is the full image name, including the registry&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-docker-registry.example.com/my-docker-image&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Pull an older, existing version from the registry&lt;/span&gt;
docker pull &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:0.1.0

&lt;span class=&quot;c&quot;&gt;# Build a new version by using the older version as a cache&lt;/span&gt;
docker build &lt;span class=&quot;nt&quot;&gt;--cache-from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:0.1.0 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:0.2.0 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Push the new version to the registry so that we can use it as a cache for future builds&lt;/span&gt;
docker push &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:0.2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;maximize-your-chances-of-hitting-the-cache&quot;&gt;Maximize your chances of hitting the cache&lt;/h2&gt;

&lt;p&gt;You can pass the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--cache-from&lt;/code&gt; option &lt;strong&gt;several times&lt;/strong&gt;, to provide different images to use as a cache. Let’s assume your remote registry contains version builds (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.0.0&lt;/code&gt;), which you build once a month, and branch builds, which are built whenever you push code to a branch. Ideally you’d use the branch build images, because those are fresher, but if no branch was built yet you’d like to fall back to a version build image. You can call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--cache-from&lt;/code&gt; several times to fetch the most suitable image:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-docker-registry.example.com/my-docker-image&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Between `current-branch`, `master` and a tagged version `1.0.0`, we prefer current-branch&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# If there was no previously built `current-branch` image, we fetch `master`&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# If there's no `master` image, we fall back to the tagged version&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# We don't need all 3 images, just the most suitable one, hence the `||`&lt;/span&gt;
docker pull &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:current-branch &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  docker pull &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:master &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  docker pull &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:1.0.0 &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Build a new version while mentioning all possible cache sources&lt;/span&gt;
docker build &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--cache-from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:current-branch &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--cache-from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:master &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--cache-from&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:1.0.0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:current-branch &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Push the new version to the registry so that we can use it as a cache for future builds&lt;/span&gt;
docker push &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:current-branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point you’ll have to do the math: depending on your build infrastructure, if the time to fetch the remote images and build with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--cache-from&lt;/code&gt; is less than the time it takes to build without using the cache, then this was worth it. If you’re build is fast anyway or downloading the images comes at a high cost, then it might not be something for you.&lt;/p&gt;

&lt;h2 id=&quot;multi-stage-builds&quot;&gt;Multi-stage builds&lt;/h2&gt;

&lt;p&gt;With multi-stage builds things get a little more complicated. The intermediate build stages are never pushed to the remote registry so you can’t use them as cache.&lt;/p&gt;

&lt;p&gt;Consider the following &lt;em&gt;Dockerfile&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# The builder stage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5-alpine AS builder&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk add &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; libxml2-dev

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Gemfile ./&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The final stage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5-alpine&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=builder /usr/local/bundle/ /usr/local/bundle/&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; app ./&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;rackup&quot;] &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Any change to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; will require a full build, including the line that installs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libxml2-dev&lt;/code&gt;. Only a change restricted to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/&lt;/code&gt; directory will be able to use the cache.&lt;/p&gt;

&lt;p&gt;One possible solution is &lt;strong&gt;storing intermediate build stages in the registry&lt;/strong&gt;. Your new build process could look something like this:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;my-image

&lt;span class=&quot;c&quot;&gt;# Build the builder image&lt;/span&gt;
docker build &lt;span class=&quot;nt&quot;&gt;--target&lt;/span&gt; builder &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:builder &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Build the final image&lt;/span&gt;
docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:final &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Push both builder and final images to the remote registry&lt;/span&gt;
docker push &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:builder
docker push &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:final
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The build itself will be just as fast as if you’d make only one call, because the second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build&lt;/code&gt; can use the local build cache for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;builder&lt;/code&gt; stage. The potential bandwidth/speed penalty comes from having to push the additional image to the registry.&lt;/p&gt;

&lt;p&gt;The full multi-stage build including the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--cache-from&lt;/code&gt; usage would end up looking something like this:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-docker-registry.example.com/my-docker-image&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Pull older versions of the builder and final images from the registry (if any)&lt;/span&gt;
docker pull &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:builder &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;docker pull &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:final &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Build the builder image by using the older builder image as a cache&lt;/span&gt;
docker build &lt;span class=&quot;nt&quot;&gt;--cache-from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:builder &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:builder &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Build the final image by using the older final image as a cache&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...but also the local cache from the previous builder build&lt;/span&gt;
docker build &lt;span class=&quot;nt&quot;&gt;--cache-from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:final &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:final &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Push both images so that we can use them as a cache for future builds&lt;/span&gt;
docker push &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:builder
docker push &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:final
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On top of that, as explained in the previous section you can call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--cache-from&lt;/code&gt; several times, in order to identify the best image pair (builder/final) to use as cache.&lt;/p&gt;

&lt;p&gt;This is where you have to do the math again: is the bandwidth/speed penalty incurring from pushing and pulling these intermediate images worth it? Should you optimize for build time or for deployment/scaling time? Would you trade multi-stage builds against simplifying the build process?&lt;/p&gt;

&lt;h2 id=&quot;same-but-different-docker-loadsave&quot;&gt;Same but different: docker load/save&lt;/h2&gt;

&lt;p&gt;If your build environment has access to some shared storage (e.g. S3, EBS or just a shared directory), you can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker save&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker load&lt;/code&gt; commands to store and retrieve images. You can later reuse these images in order to enhance your local build cache. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker save&lt;/code&gt; command saves one or more images as a tar file, which can be placed inside your shared storage. Before your next build, you can retrieve this file and unpack the images back into the local registry by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker load&lt;/code&gt;. During the build, point the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--cache-from&lt;/code&gt; option to the loaded image. Here’s how it goes:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Before running the build, unpack and load images from my-image.tar into the local registry&lt;/span&gt;
docker load &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; /some/shared/directory/my-image.tar &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Run the build with the --cache-from option pointing to the saved image&lt;/span&gt;
docker build &lt;span class=&quot;nt&quot;&gt;--cache-from&lt;/span&gt; my-image:latest &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; my-image:latest &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Pack and save the freshly built image inside the shared directory &lt;/span&gt;
docker save &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /some/shared/directory/my-image.tar my-image:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This approach can be a bit more flexible in environments where it’s hard to access the remote registry.&lt;/p&gt;

&lt;h2 id=&quot;buildkit&quot;&gt;BuildKit&lt;/h2&gt;

&lt;p&gt;If your Docker version has access to &lt;a href=&quot;https://docs.docker.com/develop/develop-images/build_enhancements/&quot;&gt;BuildKit&lt;/a&gt;, check out the improvements around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILDKIT_INLINE_CACHE&lt;/code&gt;, which can save you an expensive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker pull&lt;/code&gt; operation.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt;

&lt;p&gt;Check out my other article on &lt;a href=&quot;/posts/dockerfile-ruby-best-practices&quot;&gt;Best practices when writing a Dockerfile&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="devops" /><summary type="html">Speed up your Docker builds with –cache-from</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lipanski.com/assets/images/logo.jpg" /><media:content medium="image" url="https://lipanski.com/assets/images/logo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Persistence in (AWS ElastiCache) Redis</title><link href="https://lipanski.com/posts/persistence-in-elasticache-redis" rel="alternate" type="text/html" title="Persistence in (AWS ElastiCache) Redis" /><published>2020-04-01T00:00:00+00:00</published><updated>2020-04-01T00:00:00+00:00</updated><id>https://lipanski.com/posts/persistence-in-elasticache-redis</id><content type="html" xml:base="https://lipanski.com/posts/persistence-in-elasticache-redis">&lt;h1 id=&quot;persistence-in-aws-elasticache-redis&quot;&gt;Persistence in (AWS ElastiCache) Redis&lt;/h1&gt;

&lt;p&gt;If you restart your Redis server and expect your data to still be there when the server comes back, you might be in for a surprise.&lt;/p&gt;

&lt;p&gt;This article will give you a brief overview of how to ensure data persistence across restarts in Redis. Then it will focus on how to achieve the same in AWS ElastiCache Redis clusters, while discussing some of the limitations.&lt;/p&gt;

&lt;p&gt;Before we start, it’s worth stating that Redis &lt;em&gt;can&lt;/em&gt; be used as a persistent data store and it &lt;em&gt;can&lt;/em&gt; provide you with strong persistence guarantees, if you chose to enable them.&lt;/p&gt;

&lt;p&gt;If you’re using Redis solely as a cache and can afford losing the data between restarts or crashes, then this article might not be for you.&lt;/p&gt;

&lt;p&gt;On the other hand, if you’re using Sidekiq or other similar tools backed by Redis, this article might help protect your data on the long run.&lt;/p&gt;

&lt;h2 id=&quot;persistence-in-redis&quot;&gt;Persistence in Redis&lt;/h2&gt;

&lt;p&gt;There are two ways to ensure data persistence in Redis across restarts: through regular database snapshots (RDB) or by enabling the &lt;em&gt;append-only file&lt;/em&gt; (AOF), a log capturing all the performed operations. Both methods, if enabled, will be replayed automatically when your Redis server starts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regular snapshots (RDB)&lt;/strong&gt; can be enabled by configuring save points inside your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis.conf&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# after 900 sec (15 min) if at least 1 key changed
save 900 1

# after 300 sec (5 min) if at least 10 keys changed
save 300 10

# after 60 sec if at least 10000 keys changed
save 60 10000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will have to restart the server in order to apply these changes. To verify your configuration, call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;info persistence&lt;/code&gt; inside Redis and look for the lines starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdb&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rdb_changes_since_last_save:2
rdb_bgsave_in_progress:0
rdb_last_save_time:1582116473
rdb_last_bgsave_status:ok
rdb_last_bgsave_time_sec:-1
rdb_current_bgsave_time_sec:-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Depending on the frequency of your configured save points, you might have to account with some data loss if your Redis server crashes before it gets to save your most recent data to disk.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Append-only file (AOF)&lt;/strong&gt; persistence can be enabled from within your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis.conf&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;appendonly yes
appendfsync always|everysec|no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appendfsync&lt;/code&gt; option tells Redis how often it should flush the log file to disk. If you set it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no&lt;/code&gt;, it will leave this up to your operating system. If you set it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always&lt;/code&gt;, every new entry (basically every performed operation), will be flushed to disk immediately. This is definitely the safest option but it almost invalidates Redis as an in-memory data store, as it has to write to disk on every call.&lt;/p&gt;

&lt;p&gt;A good middle ground is using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;everysec&lt;/code&gt; option, which flushes the log entries to disk every second. This means that, during a crash, you can lose at most one second of data.&lt;/p&gt;

&lt;p&gt;You will have to restart the server in order to apply this configuration and you can validate it by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;info persistence&lt;/code&gt; and looking for the lines starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aof&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aof_enabled:1
aof_rewrite_in_progress:0
aof_rewrite_scheduled:0
aof_last_rewrite_time_sec:-1
aof_current_rewrite_time_sec:-1
aof_last_bgrewrite_status:ok
aof_last_write_status:ok
aof_last_cow_size:0
aof_current_size:88
aof_base_size:88
aof_pending_rewrite:0
aof_buffer_length:0
aof_rewrite_buffer_length:0
aof_pending_bio_fsync:0
aof_delayed_fsync:0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can &lt;strong&gt;combine the RDB and AOF methods&lt;/strong&gt;. The &lt;a href=&quot;https://redis.io/topics/persistence&quot;&gt;Redis documentation&lt;/a&gt; makes following recommendations:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The general indication is that you should use both persistence methods if you want a degree of data safety comparable to what PostgreSQL can provide you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you care a lot about your data, but still can live with a few minutes of data loss in case of disasters, you can simply use RDB alone.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-happens-when-redis-runs-out-of-memory&quot;&gt;What happens when Redis runs out of memory?&lt;/h2&gt;

&lt;p&gt;When discussing persistence and data integrity, it’s good to understand what happens when you’re trying to push a new value to Redis and your server is out of memory.&lt;/p&gt;

&lt;p&gt;The answer to this question resides in the value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxmemory-policy&lt;/code&gt; setting. When set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noeviction&lt;/code&gt;, Redis will raise an error when the memory limit was reached. This is &lt;strong&gt;the safest choice&lt;/strong&gt; if you care about the data inside your Redis cluster.&lt;/p&gt;

&lt;p&gt;Other options include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allkeys-lru&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile-lru&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allkeys-random&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile-random&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile-ttl&lt;/code&gt; and they will all make room for the new key by evicting older, existing ones and thus causing data loss.&lt;/p&gt;

&lt;p&gt;You can check your current configuration by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;info memory&lt;/code&gt; inside Redis. You can update the directive from within your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis.conf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Last but not least, you can control the amount of memory Redis has access to by making use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxmemory&lt;/code&gt; configuration directive.&lt;/p&gt;

&lt;h2 id=&quot;persistence-in-aws-elasticache-redis-1&quot;&gt;Persistence in AWS ElastiCache Redis&lt;/h2&gt;

&lt;p&gt;Persistence in AWS ElastiCache Redis clusters is a more complicated story. They really live by that &lt;em&gt;Cache&lt;/em&gt; in &lt;em&gt;ElastiCache&lt;/em&gt;. For the most basic, single node deployment using the default parameter group, persistence is not guaranteed: after a restart or a crash, your data is gone.&lt;/p&gt;

&lt;p&gt;Then again, the &lt;a href=&quot;https://aws.amazon.com/elasticache/redis/faqs/&quot;&gt;AWS ElastiCache FAQ&lt;/a&gt; hint at achieving persistence is not very helpful:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Does Amazon ElastiCache for Redis support Redis persistence? Yes, you can achieve persistence by snapshotting your Redis data using the Backup and Restore feature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Enabling &lt;strong&gt;daily backups&lt;/strong&gt; is a good start, especially when you’ve got one daily snapshot per cluster free of charge. The general price is pretty low and you can go up to 35 days retention. The problem with these backups is that &lt;strong&gt;you can not replay them automatically after a restart or a crash&lt;/strong&gt;. Furthermore you can’t replay a backup manually on top of an &lt;em&gt;existing&lt;/em&gt; cluster either. You may only restore a backup manually and to a new cluster.&lt;/p&gt;

&lt;p&gt;On top of daily backups, you can enable &lt;strong&gt;append-only file (AOF)&lt;/strong&gt; persistence but with some severe limitations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AOF is not supported on Redis 2.8.22 and later&lt;/li&gt;
  &lt;li&gt;AOF is not supported for &lt;em&gt;cache.t1&lt;/em&gt;, &lt;em&gt;cache.t2&lt;/em&gt; or &lt;em&gt;cache.t3&lt;/em&gt; instances&lt;/li&gt;
  &lt;li&gt;AOF is not supported on Multi-AZ replication groups&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;…and depending on your use case, these restrictions might speak strongly against using AOF.&lt;/p&gt;

&lt;p&gt;The last option is probably also the most attractive one: &lt;strong&gt;Multi-AZ with auto-failover&lt;/strong&gt;. This is basically a primary/replica system across availability zones with automatic failover (replica promotion). When the primary crashes or requires an upgrade, the replica is promoted in its place. You can also decide to promote a replica manually. Multi-AZ with auto-failover has its own limitations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Not supported for Redis 2.8.5 or earlier&lt;/li&gt;
  &lt;li&gt;Not supported for &lt;em&gt;cache.t1&lt;/em&gt; instances&lt;/li&gt;
  &lt;li&gt;The failover comes with a little downtime – I assume due to DNS propagation&lt;/li&gt;
  &lt;li&gt;When failing over, a small amount of data might be lost due to replication lag&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then again, these limitations are less of a burden than the AOF restrictions and having your Redis cluster running across different availability zone is definitely a plus.&lt;/p&gt;

&lt;p&gt;The price for the &lt;strong&gt;cheapest instance that can enable AOF&lt;/strong&gt; is $74.16 per month for a previous generation &lt;em&gt;cache.m3.medium&lt;/em&gt; instance or $133.92 per month for a current generation &lt;em&gt;cache.m5.large&lt;/em&gt; instance.&lt;/p&gt;

&lt;p&gt;The price for the &lt;strong&gt;cheapest instance that you can hook up into a Multi-AZ auto-failover system&lt;/strong&gt; is $13.68 per month for a &lt;em&gt;cache.t3.micro&lt;/em&gt; instance, which makes the cheapest Multi-AZ auto-failover cluster cost $27.36 per month.&lt;/p&gt;

&lt;p&gt;If you’re looking for cheap/small but persistent, then Multi-AZ is the way to go.&lt;/p&gt;

&lt;p&gt;Last but not least, the default parameter groups in ElastiCache are tailored for &lt;strong&gt;volatile caches&lt;/strong&gt;, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxmemory-policy&lt;/code&gt; is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile-lru&lt;/code&gt;. You might want to change this to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noeviction&lt;/code&gt; if you’d like to control when your data gets deleted.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;conclusion&lt;/strong&gt;, the solution I’d recommend in order to keep your AWS ElastiCache Redis data as persistent as possible would be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Opting for a Multi-AZ auto-failover system with at least 2 nodes.&lt;/li&gt;
  &lt;li&gt;Enabling daily backups with as much retention as needed.&lt;/li&gt;
  &lt;li&gt;Setting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxmemory-policy&lt;/code&gt; directive to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noeviction&lt;/code&gt; inside your ElastiCache parameter group.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;The information describe above was collected around February 2020. You should consult the official AWS documentation for any changes beyond this date. All prices correspond to the Frankfurt region.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://redis.io/topics/persistence&quot;&gt;https://redis.io/topics/persistence&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://redis.io/topics/lru-cache&quot;&gt;https://redis.io/topics/lru-cache&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/elasticache/redis/faqs/&quot;&gt;https://aws.amazon.com/elasticache/redis/faqs/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/awsdocs/amazon-elasticache-docs/blob/master/doc_source/redis/AutoFailover.md&quot;&gt;https://github.com/awsdocs/amazon-elasticache-docs/blob/master/doc_source/redis/AutoFailover.md&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/premiumsupport/knowledge-center/fault-tolerance-elasticache/&quot;&gt;https://aws.amazon.com/premiumsupport/knowledge-center/fault-tolerance-elasticache/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/RedisAOF.html&quot;&gt;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/RedisAOF.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="devops" /><summary type="html">Persistence in (AWS ElastiCache) Redis</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lipanski.com/assets/images/logo.jpg" /><media:content medium="image" url="https://lipanski.com/assets/images/logo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Best practices when writing a Dockerfile for a Ruby application</title><link href="https://lipanski.com/posts/dockerfile-ruby-best-practices" rel="alternate" type="text/html" title="Best practices when writing a Dockerfile for a Ruby application" /><published>2019-09-20T00:00:00+00:00</published><updated>2019-09-20T00:00:00+00:00</updated><id>https://lipanski.com/posts/dockerfile-ruby-best-practices</id><content type="html" xml:base="https://lipanski.com/posts/dockerfile-ruby-best-practices">&lt;h1 class=&quot;no_toc&quot; id=&quot;best-practices-when-writing-a-dockerfile-for-a-ruby-application&quot;&gt;Best practices when writing a Dockerfile for a Ruby application&lt;/h1&gt;

&lt;p&gt;The simplicity of the &lt;em&gt;Dockerfile&lt;/em&gt; format is one of the reasons why Docker managed to become so popular in the first place. Getting something working is fairly easy. Producing a clean, small, secure image that will not leak secrets might not be as straight-forward though.&lt;/p&gt;

&lt;p&gt;This post will try to share some best practices when writing a &lt;em&gt;Dockerfile&lt;/em&gt; for a Ruby app, though most of these points should apply to any other runtime as well. Towards the end, I will provide full examples for three different use cases.&lt;/p&gt;

&lt;p&gt;Here’s a summary of what’s coming:&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-pin-your-base-image-version&quot; id=&quot;markdown-toc-1-pin-your-base-image-version&quot;&gt;1. Pin your base image version&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-use-only-trusted-or-official-base-images&quot; id=&quot;markdown-toc-2-use-only-trusted-or-official-base-images&quot;&gt;2. Use only trusted or official base images&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-pin-your-application-dependencies&quot; id=&quot;markdown-toc-3-pin-your-application-dependencies&quot;&gt;3. Pin your application dependencies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-add-a-dockerignore-file-to-your-repository&quot; id=&quot;markdown-toc-4-add-a-dockerignore-file-to-your-repository&quot;&gt;4. Add a .dockerignore file to your repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-group-commands-by-how-likely-they-are-to-change-individually&quot; id=&quot;markdown-toc-5-group-commands-by-how-likely-they-are-to-change-individually&quot;&gt;5. Group commands by how likely they are to change individually&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#6-place-the-least-likely-to-change-commands-at-the-top&quot; id=&quot;markdown-toc-6-place-the-least-likely-to-change-commands-at-the-top&quot;&gt;6. Place the least likely to change commands at the top&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#7-avoid-running-your-application-as-root&quot; id=&quot;markdown-toc-7-avoid-running-your-application-as-root&quot;&gt;7. Avoid running your application as root&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#8-when-running-copy-or-add-as-a-different-user-use-chown&quot; id=&quot;markdown-toc-8-when-running-copy-or-add-as-a-different-user-use-chown&quot;&gt;8. When running COPY or ADD (as a different user) use –chown&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#9-avoid-leaking-secrets-inside-your-image&quot; id=&quot;markdown-toc-9-avoid-leaking-secrets-inside-your-image&quot;&gt;9. Avoid leaking secrets inside your image&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#10-always-clean-up-injected-secrets-within-the-same-build-step&quot; id=&quot;markdown-toc-10-always-clean-up-injected-secrets-within-the-same-build-step&quot;&gt;10. Always clean up injected secrets within the same build step&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#11-fetching-private-dependencies-via-a-github-token-injected-through-the-gitconfig&quot; id=&quot;markdown-toc-11-fetching-private-dependencies-via-a-github-token-injected-through-the-gitconfig&quot;&gt;11. Fetching private dependencies via a Github token injected through the gitconfig&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#12-minimize-image-size-by-opting-for-small-base-images-when-possible&quot; id=&quot;markdown-toc-12-minimize-image-size-by-opting-for-small-base-images-when-possible&quot;&gt;12. Minimize image size by opting for small base images when possible&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#13-use-multi-stage-builds-to-reduce-the-size-of-your-image&quot; id=&quot;markdown-toc-13-use-multi-stage-builds-to-reduce-the-size-of-your-image&quot;&gt;13. Use multi-stage builds to reduce the size of your image&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#14-use-multi-stage-builds-to-avoid-leaking-secrets-inside-your-docker-history&quot; id=&quot;markdown-toc-14-use-multi-stage-builds-to-avoid-leaking-secrets-inside-your-docker-history&quot;&gt;14. Use multi-stage builds to avoid leaking secrets inside your docker history&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#15-when-setting-the-cmd-instruction-prefer-the-exec-format-over-the-shell-format&quot; id=&quot;markdown-toc-15-when-setting-the-cmd-instruction-prefer-the-exec-format-over-the-shell-format&quot;&gt;15. When setting the CMD instruction, prefer the exec format over the shell format&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#16-avoid-installing-development-or-test-dependencies-in-your-production-builds&quot; id=&quot;markdown-toc-16-avoid-installing-development-or-test-dependencies-in-your-production-builds&quot;&gt;16. Avoid installing development or test dependencies in your production builds&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#17-optional-combine-production-test-and-development-build-processes-into-a-single-dockerfile-by-using-multi-stage-builds&quot; id=&quot;markdown-toc-17-optional-combine-production-test-and-development-build-processes-into-a-single-dockerfile-by-using-multi-stage-builds&quot;&gt;17. Optional: Combine production, test and development build processes into a single Dockerfile by using multi-stage builds&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#18-bonus-running-migrations&quot; id=&quot;markdown-toc-18-bonus-running-migrations&quot;&gt;18. Bonus: Running migrations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#putting-it-all-together&quot; id=&quot;markdown-toc-putting-it-all-together&quot;&gt;Putting it all together…&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#dockerfile-for-a-plain-ruby-app-or-a-rails-app-without-assets&quot; id=&quot;markdown-toc-dockerfile-for-a-plain-ruby-app-or-a-rails-app-without-assets&quot;&gt;Dockerfile for a plain Ruby app or a Rails app without assets&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#dockerfile-for-a-rails-app-with-assets&quot; id=&quot;markdown-toc-dockerfile-for-a-rails-app-with-assets&quot;&gt;Dockerfile for a Rails app with assets&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#dockerfile-for-a-rails-app-with-assets-and-private-dependencies&quot; id=&quot;markdown-toc-dockerfile-for-a-rails-app-with-assets-and-private-dependencies&quot;&gt;Dockerfile for a Rails app with assets and private dependencies&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code presented here can also be found at &lt;a href=&quot;https://github.com/lipanski/ruby-dockerfile-example&quot;&gt;https://github.com/lipanski/ruby-dockerfile-example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s begin:&lt;/p&gt;

&lt;h2 id=&quot;1-pin-your-base-image-version&quot;&gt;1. Pin your base image version&lt;/h2&gt;

&lt;p&gt;Bad:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby -e &quot;puts 1 + 2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby -e &quot;puts 1 + 2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want &lt;strong&gt;reproducible builds&lt;/strong&gt; (and trust me, you want them), make sure to pin down the version of your base image. Try to be as accurate as possible by specifying every digit, including the patch version.&lt;/p&gt;

&lt;p&gt;If you want to update your base image, do it in a &lt;strong&gt;controlled, explicit&lt;/strong&gt; manner which can also be reverted easily (e.g. via a pull request). It will save you a lot of debugging pain in the future.&lt;/p&gt;

&lt;h2 id=&quot;2-use-only-trusted-or-official-base-images&quot;&gt;2. Use only trusted or official base images&lt;/h2&gt;

&lt;p&gt;Bad:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; random-dude-on-the-internet/ruby:2.5.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also good:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Assuming that is your own image registry, which you control entirely&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; your-own-registry.com/ruby:2.5.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When using images from &lt;a href=&quot;https://hub.docker.com&quot;&gt;https://hub.docker.com&lt;/a&gt;, prefer &lt;strong&gt;official images&lt;/strong&gt; and/or try to checksum their contents. All &lt;em&gt;official&lt;/em&gt; images are marked with the phrase &lt;em&gt;Docker Official Images&lt;/em&gt; next to their title - like the &lt;a href=&quot;https://hub.docker.com/_/ruby&quot;&gt;official Ruby image&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For anything that’s not available as an official image, build and host the base image yourself - ideally by starting from a trusted/official one.&lt;/p&gt;

&lt;p&gt;Keep in mind that Docker Hub does not prevent modifying images or tags by their authors over time, which is why you probably shouldn’t trust everything in there.&lt;/p&gt;

&lt;h2 id=&quot;3-pin-your-application-dependencies&quot;&gt;3. Pin your application dependencies&lt;/h2&gt;

&lt;p&gt;Bad:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;sinatra
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;sinatra &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 2.0.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similary to the base image version, if you don’t pin your application dependencies you might be in for surprises the next time you build your image. This doesn’t mean you should never update your dependencies but that you should do it in a controlled manner.&lt;/p&gt;

&lt;p&gt;Most package managers have a way to pin dependencies, be it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn.lock&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pipfile.lock&lt;/code&gt; - use it to guarantee &lt;strong&gt;reproducible builds&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;4-add-a-dockerignore-file-to-your-repository&quot;&gt;4. Add a .dockerignore file to your repository&lt;/h2&gt;

&lt;p&gt;The Docker &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COPY&lt;/code&gt; instruction doesn’t honour the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file. This means that whenever you call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COPY .&lt;/code&gt; with a wildcard argument, you could be leaking unwanted files inside your Docker image.&lt;/p&gt;

&lt;p&gt;Fortunately you can add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dockerignore&lt;/code&gt; file to your code base, which works pretty much the same way the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file does. In addition to copying over the contents of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file, you might want to include the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git/&lt;/code&gt; directory as well to the list of files ignored by Docker.&lt;/p&gt;

&lt;h2 id=&quot;5-group-commands-by-how-likely-they-are-to-change-individually&quot;&gt;5. Group commands by how likely they are to change individually&lt;/h2&gt;

&lt;p&gt;Bad:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt update
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; mysql-client
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; postgresql-client
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; nginx
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby -e &quot;puts 1 + 2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# We usually only need to run this once&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; mysql-client postgresql-client nginx

&lt;span class=&quot;c&quot;&gt;# We usually run this every time we add a new dependency&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby -e &quot;puts 1 + 2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Less build steps means less intermediary images that Docker needs to keep in storage. On the other hand, you need to be careful not to group tasks together that don’t change at the same time - otherwise you might be running all tasks when only one requires changes, which results in a slower build process.&lt;/p&gt;

&lt;h2 id=&quot;6-place-the-least-likely-to-change-commands-at-the-top&quot;&gt;6. Place the least likely to change commands at the top&lt;/h2&gt;

&lt;p&gt;Bad:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Source code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; my-code/ /srv/&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Application dependencies&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Gemfile Gemfile.lock ./&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Operating system dependencies&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; mysql-client postgresql-client nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Operating system dependencies&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; mysql-client postgresql-client nginx

&lt;span class=&quot;c&quot;&gt;# Application dependencies&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Gemfile Gemfile.lock ./&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Source code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; my-source-code /srv/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Docker will rebuild all steps top to bottom, starting from the one where &lt;em&gt;changes&lt;/em&gt; were detected. A &lt;em&gt;change&lt;/em&gt; means usually that a line inside your &lt;em&gt;Dockerfile&lt;/em&gt; changed with the exception of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COPY&lt;/code&gt; command, which also checks whether the files provided as argument were modified.&lt;/p&gt;

&lt;p&gt;Placing the least likely to change commands at the top ensures an efficient usage of the Docker cache and results in shorter build times.&lt;/p&gt;

&lt;h2 id=&quot;7-avoid-running-your-application-as-root&quot;&gt;7. Avoid running your application as root&lt;/h2&gt;

&lt;p&gt;Bad:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5-alpine&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;sinatra &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 2.0.5

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'require &quot;sinatra&quot;; run Sinatra::Application.run!'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; config.ru

&lt;span class=&quot;c&quot;&gt;# By default this is run as root&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; rackup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5-alpine&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;sinatra &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 2.0.5

&lt;span class=&quot;c&quot;&gt;# Create a dedicated user for running the application&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;adduser &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; my-sinatra-user

&lt;span class=&quot;c&quot;&gt;# Set the user for RUN, CMD or ENTRYPOINT calls from now on&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Note that this doesn't apply to COPY or ADD, which use a --chown argument instead&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; my-sinatra-user&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Set the base directory that will be used from now on&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /home/my-sinatra-user&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'require &quot;sinatra&quot;; run Sinatra::Application.run!'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; config.ru

&lt;span class=&quot;c&quot;&gt;# This is run under the my-sinatra-user user&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; rackup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running your application as root introduces an &lt;strong&gt;additional vector of attack&lt;/strong&gt;. If an attacker gains remote code execution through an application vulnerability, there are ways to escape the container environment. Much more damage can be inflicted by the root user than when running your application as an unprivileged user.&lt;/p&gt;

&lt;h2 id=&quot;8-when-running-copy-or-add-as-a-different-user-use-chown&quot;&gt;8. When running COPY or ADD (as a different user) use –chown&lt;/h2&gt;

&lt;p&gt;Bad:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5-alpine&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;adduser &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; my-sinatra-user

&lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; my-sinatra-user&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /home/my-sinatra-user&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The files will be owned by the root user!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Gemfile Gemfile.lock ./&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; rackup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5-alpine&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;adduser &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; my-sinatra-user

&lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; my-sinatra-user&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /home/my-sinatra-user&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The files will be owned by my-sinatra-user&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --chown=my-sinatra-user Gemfile Gemfile.lock ./&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; rackup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;USER&lt;/code&gt; directive described in the previous step only applies to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;. For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COPY&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ADD&lt;/code&gt; you have to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--chown&lt;/code&gt; argument.&lt;/p&gt;

&lt;h2 id=&quot;9-avoid-leaking-secrets-inside-your-image&quot;&gt;9. Avoid leaking secrets inside your image&lt;/h2&gt;

&lt;p&gt;Bad:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; DB_PASSWORD &quot;secret stuff&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Secrets should never appear inside your &lt;em&gt;Dockerfile&lt;/em&gt; in plain text. Instead, they should be injected via:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Build-time arguments: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARG&lt;/code&gt; command and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--build-arg&lt;/code&gt; Docker argument.&lt;/li&gt;
  &lt;li&gt;Environment variables: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--env-file&lt;/code&gt; Docker arguments.&lt;/li&gt;
  &lt;li&gt;Kubernetes secrets or similar methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Whenever you use one of these &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build&lt;/code&gt; arguments, be it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--build-arg&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt;, the full command (including the secret values) will show up in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker history&lt;/code&gt;. Depending on the environment where the build happens, you might want to avoid this. A solution to this problem is detailed in step 14.&lt;/p&gt;

&lt;h2 id=&quot;10-always-clean-up-injected-secrets-within-the-same-build-step&quot;&gt;10. Always clean up injected secrets within the same build step&lt;/h2&gt;

&lt;p&gt;Bad:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ARG&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; PRIVATE_SSH_KEY&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This build step will retain the private SSH key&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PRIVATE_SSH_KEY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /root/.ssh/id_rsa

&lt;span class=&quot;c&quot;&gt;# This build step will retain the private SSH key&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; /root/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ARG&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; PRIVATE_SSH_KEY&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PRIVATE_SSH_KEY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /root/.ssh/id_rsa &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; /root/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first example produces two build steps that retain the injected secret. If anyone has access to your build history, they will be able to retrieve your secret. The suggested solution groups together the actions that inject and require the secret with the one that cleans it up. This produces a clean build history.&lt;/p&gt;

&lt;h2 id=&quot;11-fetching-private-dependencies-via-a-github-token-injected-through-the-gitconfig&quot;&gt;11. Fetching private dependencies via a Github token injected through the gitconfig&lt;/h2&gt;

&lt;p&gt;Quite often your application will require private dependencies, usually hosted inside private repositories, be it Ruby gems or NPM packages.&lt;/p&gt;

&lt;p&gt;There are various ways to fetch them during the build process but as long as you are using Github, I recommend the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set up a machine user on Github.&lt;/li&gt;
  &lt;li&gt;Allow your machine user read-only access to your private dependencies.&lt;/li&gt;
  &lt;li&gt;Generate &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;a personal Github access token&lt;/a&gt; for this user.&lt;/li&gt;
  &lt;li&gt;Use the Github token to pull dependencies during &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Clean up the Github token from the build.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By default, your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; files probably use the SSH protocol because it’s the most convenient one for development mode. If your private dependencies are referenced via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git@github.com&lt;/code&gt; then this is the case.&lt;/p&gt;

&lt;p&gt;Once you produced a working Github token, we can use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitconfig&lt;/code&gt; URL rewrite to tell Git to authenticate via your Github token instead of the default SSH protocol (which we still want in development). This is accomplished via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insteadOf&lt;/code&gt; Git option, which basically rewrites the repository URL to inject the token.&lt;/p&gt;

&lt;p&gt;After we’ve successfully installed dependencies, it’s important to remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitconfig&lt;/code&gt; file &lt;em&gt;within the same step&lt;/em&gt;, to avoid leaking the Github token inside the built image.&lt;/p&gt;

&lt;p&gt;Last but not least, we’ll be injecting the Github token into the build process via a build argument.&lt;/p&gt;

&lt;p&gt;Let’s put it all together:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ARG&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; GITHUB_TOKEN&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This is a private gem that GITHUB_TOKEN has access to&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'source &quot;https://rubygems.org&quot;; gem &quot;some-private-gem&quot;, git: &quot;git@github.com:some-user/some-private-gem&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Gemfile

&lt;span class=&quot;c&quot;&gt;# First rewrite is for Gemfile, second is for package.json&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This should cover most other package managers as well&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Note the usage of --add (which avoids overwriting the option)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Also note that we're cleaning up the .gitconfig file within the same build step&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; url.&lt;span class=&quot;s2&quot;&gt;&quot;https://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:x-oauth-basic@github.com/some-user&quot;&lt;/span&gt;.insteadOf git@github.com:some-user &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add&lt;/span&gt; url.&lt;span class=&quot;s2&quot;&gt;&quot;https://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:x-oauth-basic@github.com/some-user&quot;&lt;/span&gt;.insteadOf ssh://git@github &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; ~/.gitconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can build this image by calling: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build --build-arg GITHUB_TOKEN=xxx .&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Another way of achieving the same is by using SSH keys. It saves you the hassle of rewriting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; URLs but you still need to clean up the private key at the end.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;12-minimize-image-size-by-opting-for-small-base-images-when-possible&quot;&gt;12. Minimize image size by opting for small base images when possible&lt;/h2&gt;

&lt;p&gt;Bad:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby -e &quot;puts 1 + 2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5-alpine&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby -e &quot;puts 1 + 2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What’s the difference?&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; docker images &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;base-image
normal-base-image   869MB
small-base-image    45.3MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some base images are larger than others. A small base image produces a small final image which ultimately speeds up your deployments and saves you the additional storage costs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://alpinelinux.org/&quot;&gt;Alpine Linux&lt;/a&gt; is usally a safe bet when looking for small-footprint operating systems.&lt;/p&gt;

&lt;p&gt;When opting for a compact operating system, pay special attention to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;package manager&lt;/strong&gt; and the available packages. Building things from source is tedious, use the package manager to your benefit.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;choice of shell&lt;/strong&gt; - some base images might not even provide a shell!&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;security&lt;/strong&gt; implications and the &lt;strong&gt;stability&lt;/strong&gt; of the underlying operating systems: avoid environments that are experimental or not battle-tested.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;13-use-multi-stage-builds-to-reduce-the-size-of-your-image&quot;&gt;13. Use multi-stage builds to reduce the size of your image&lt;/h2&gt;

&lt;p&gt;Bad:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5-alpine&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Nokogiri's build dependencies&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk add &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  build-base &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  libxml2-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  libxslt-dev

&lt;span class=&quot;c&quot;&gt;# Nokogiri, yikes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'source &quot;https://rubygems.org&quot;; gem &quot;nokogiri&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Gemfile

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /bin/sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# The &quot;builder&quot; image will build nokogiri&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5-alpine AS builder&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Nokogiri's build dependencies&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk add &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  build-base &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  libxml2-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  libxslt-dev

&lt;span class=&quot;c&quot;&gt;# Nokogiri, yikes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'source &quot;https://rubygems.org&quot;; gem &quot;nokogiri&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Gemfile

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The final image: we start clean&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5-alpine&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# We copy over the entire gems directory for our builder image, containing the already built artifact&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=builder /usr/local/bundle/ /usr/local/bundle/&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /bin/sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Multi-stage builds are builds where the final image is composed of parts of different builds, which can potentially be based on completely different base images. You can use multi-stage builds to significantly reduce the size of your final images. Smaller artifacts ultimately means faster deployments and rollbacks.&lt;/p&gt;

&lt;p&gt;In the current example we require the infamous &lt;em&gt;nokogiri&lt;/em&gt; gem. In order to install this gem you usually need some relatively heavy OS dependencies (&lt;em&gt;libxml&lt;/em&gt; and &lt;em&gt;libxslt&lt;/em&gt;), though they are only useful at build time. The gem also needs to be built natively, which might produce additional build time garbage.&lt;/p&gt;

&lt;p&gt;So what’s the difference?&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; docker images | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;nokogiri
nokogiri-simple   251MB
nokogiri-multi    70.1MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the difference can be quite signficant…&lt;/p&gt;

&lt;h2 id=&quot;14-use-multi-stage-builds-to-avoid-leaking-secrets-inside-your-docker-history&quot;&gt;14. Use multi-stage builds to avoid leaking secrets inside your docker history&lt;/h2&gt;

&lt;p&gt;Bad:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5-alpine&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This is a secret&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ARG&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; PRIVATE_SSH_KEY&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Just a basic Gemfile to make bundle install happy&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'source &quot;https://rubygems.org&quot;; gem &quot;sinatra&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Gemfile

&lt;span class=&quot;c&quot;&gt;# We require the secret for installing dependencies&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /root/.ssh/ &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PRIVATE_SSH_KEY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /root/.ssh/id_rsa &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; /root/.ssh/id_rsa

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby -e &quot;puts 1 + 2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5-alpine AS builder&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This is a secret&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ARG&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; PRIVATE_SSH_KEY&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Just a basic Gemfile to make bundle install happy&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'source &quot;https://rubygems.org&quot;; gem &quot;sinatra&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Gemfile

&lt;span class=&quot;c&quot;&gt;# We require the secret for installing dependencies&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /root/.ssh/ &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PRIVATE_SSH_KEY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /root/.ssh/id_rsa &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; /root/.ssh/id_rsa

&lt;span class=&quot;c&quot;&gt;# The final image doesn't need the secret&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5-alpine&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=builder /usr/local/bundle/ /usr/local/bundle/&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby -e &quot;puts 1 + 2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can build both examples by passing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PRIVATE_SSH_KEY&lt;/code&gt; as a build argument:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; my-fancy-image &lt;span class=&quot;nt&quot;&gt;--build-arg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PRIVATE_SSH_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As explained in step 9, you can use &lt;em&gt;Docker build arguments&lt;/em&gt; to avoid leaking secrets inside your image. By default, however, this will still leak the secret inside your &lt;em&gt;Docker history&lt;/em&gt;. Depending on your build environment, you might want to avoid this.&lt;/p&gt;

&lt;p&gt;Let’s see what this means for our bad example:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Lines 3-4 contain your secret PRIVATE_SSH_KEY in clear text&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; docker &lt;span class=&quot;nb&quot;&gt;history &lt;/span&gt;my-fancy-image
IMAGE               CREATED              CREATED BY                                      SIZE                COMMENT
67e60c0853ab        19 seconds ago       /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;ruby…   0B&lt;/span&gt;
94dd778c4b5d        20 seconds ago       |1 &lt;span class=&quot;nv&quot;&gt;PRIVATE_SSH_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /…   30.9MB
32a993af7bfb        About a minute ago   |1 &lt;span class=&quot;nv&quot;&gt;PRIVATE_SSH_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sour…   45B
2be964ad91c7        About a minute ago   /bin/sh -c #(nop)  ARG PRIVATE_SSH_KEY          0B
44723f3ab2bd        4 months ago         /bin/sh -c #(nop)  CMD [&quot;irb&quot;]                  0B
&amp;lt;missing&amp;gt;           4 months ago         /bin/sh -c mkdir -p &quot;$GEM_HOME&quot; &amp;amp;&amp;amp; chmod 777…   0B
&amp;lt;missing&amp;gt;           4 months ago         /bin/sh -c #(nop)  ENV PATH=/usr/local/bundl…   0B
&amp;lt;missing&amp;gt;           4 months ago         /bin/sh -c #(nop)  ENV BUNDLE_PATH=/usr/loca…   0B
&amp;lt;missing&amp;gt;           4 months ago         /bin/sh -c #(nop)  ENV GEM_HOME=/usr/local/b…   0B
&amp;lt;missing&amp;gt;           4 months ago         /bin/sh -c set -ex   &amp;amp;&amp;amp; apk add --no-cache -…   45.5MB
&amp;lt;missing&amp;gt;           4 months ago         /bin/sh -c #(nop)  ENV RUBYGEMS_VERSION=3.0.3   0B
&amp;lt;missing&amp;gt;           4 months ago         /bin/sh -c #(nop)  ENV RUBY_DOWNLOAD_SHA256=…   0B
&amp;lt;missing&amp;gt;           4 months ago         /bin/sh -c #(nop)  ENV RUBY_VERSION=2.5.5       0B
&amp;lt;missing&amp;gt;           4 months ago         /bin/sh -c #(nop)  ENV RUBY_MAJOR=2.5           0B
&amp;lt;missing&amp;gt;           4 months ago         /bin/sh -c mkdir -p /usr/local/etc  &amp;amp;&amp;amp; {   e…   45B
&amp;lt;missing&amp;gt;           4 months ago         /bin/sh -c apk add --no-cache   gmp-dev         3.4MB
&amp;lt;missing&amp;gt;           4 months ago         /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot;]              0B
&amp;lt;missing&amp;gt;           4 months ago         /bin/sh -c #(nop) ADD file:a86aea1f3a7d68f6a…   5.53MB
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s see what happens with the multi-stage build:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; docker &lt;span class=&quot;nb&quot;&gt;history &lt;/span&gt;my-fancy-image
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
2706a2f47816        8 seconds ago       /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;ruby…   0B&lt;/span&gt;
86509dba3bd9        9 seconds ago       /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#(nop) COPY dir:e110956912ddb292a…   3.16MB&lt;/span&gt;
44723f3ab2bd        4 months ago        /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#(nop)  CMD [&quot;irb&quot;]                  0B&lt;/span&gt;
&amp;lt;missing&amp;gt;           4 months ago        /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GEM_HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;777…   0B
&amp;lt;missing&amp;gt;           4 months ago        /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#(nop)  ENV PATH=/usr/local/bundl…   0B&lt;/span&gt;
&amp;lt;missing&amp;gt;           4 months ago        /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#(nop)  ENV BUNDLE_PATH=/usr/loca…   0B&lt;/span&gt;
&amp;lt;missing&amp;gt;           4 months ago        /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#(nop)  ENV GEM_HOME=/usr/local/b…   0B&lt;/span&gt;
&amp;lt;missing&amp;gt;           4 months ago        /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ex&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt; -…   45.5MB
&amp;lt;missing&amp;gt;           4 months ago        /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#(nop)  ENV RUBYGEMS_VERSION=3.0.3   0B&lt;/span&gt;
&amp;lt;missing&amp;gt;           4 months ago        /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#(nop)  ENV RUBY_DOWNLOAD_SHA256=…   0B&lt;/span&gt;
&amp;lt;missing&amp;gt;           4 months ago        /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#(nop)  ENV RUBY_VERSION=2.5.5       0B&lt;/span&gt;
&amp;lt;missing&amp;gt;           4 months ago        /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#(nop)  ENV RUBY_MAJOR=2.5           0B&lt;/span&gt;
&amp;lt;missing&amp;gt;           4 months ago        /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /usr/local/etc  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   e…   45B
&amp;lt;missing&amp;gt;           4 months ago        /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; apk add &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt;   gmp-dev         3.4MB
&amp;lt;missing&amp;gt;           4 months ago        /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#(nop)  CMD [&quot;/bin/sh&quot;]              0B&lt;/span&gt;
&amp;lt;missing&amp;gt;           4 months ago        /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#(nop) ADD file:a86aea1f3a7d68f6a…   5.53MB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The multi-stage build only retains the history of the final image. The builder history is ignored and thus your secret is safe.&lt;/p&gt;

&lt;h2 id=&quot;15-when-setting-the-cmd-instruction-prefer-the-exec-format-over-the-shell-format&quot;&gt;15. When setting the CMD instruction, prefer the exec format over the shell format&lt;/h2&gt;

&lt;p&gt;Bad:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'source &quot;https://rubygems.org&quot;; gem &quot;sinatra&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Gemfile
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# A simple Sinatra app which prints out HUUUUUP when the process receives the HUP signal.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'require &quot;sinatra&quot;; set bind: &quot;0.0.0.0&quot;; Signal.trap(&quot;HUP&quot;) { puts &quot;HUUUUUP&quot; }; run Sinatra::Application.run!'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; config.ru

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; bundle exec rackup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'source &quot;https://rubygems.org&quot;; gem &quot;sinatra&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Gemfile
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# A simple Sinatra app which prints out HUUUUUP when the process receives the HUP signal.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'require &quot;sinatra&quot;; set bind: &quot;0.0.0.0&quot;; Signal.trap(&quot;HUP&quot;) { puts &quot;HUUUUUP&quot; }; run Sinatra::Application.run!'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; config.ru

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;bundle&quot;, &quot;exec&quot;, &quot;rackup&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are two ways of using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD&lt;/code&gt;, as explained &lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#cmd&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;em&gt;shell format&lt;/em&gt;, which invokes the command from within a shell - e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD bundle exec rackup&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;exec format&lt;/em&gt;, which doesn’t invoke a command shell and takes the form of a JSON array - e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD [&quot;bundle&quot;, &quot;exec&quot;, &quot;rackup&quot;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The recommended way of using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD&lt;/code&gt; is in &lt;em&gt;exec format&lt;/em&gt;. This ensures your process will run as PID 1 which in turn ensures that any received signals will also be handled properly.&lt;/p&gt;

&lt;p&gt;Let’s see how the process tree looks like for the container run in &lt;strong&gt;shell format&lt;/strong&gt; (the bad example):&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.7  0.0   2388   756 pts/0    Ss+  14:36   0:00 /bin/sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rackup
root         6  0.8  0.2  43948 25556 pts/0    Sl+  14:36   0:00 /usr/local/bundle/bin/rackup
root        13  0.0  0.0   7640  2588 ?        Rs   14:37   0:00 ps aux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec rackup&lt;/code&gt; command is wrapped inside a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; call. The actual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rackup&lt;/code&gt; call is not the PID 1 process. Sending a HUP signal to our container &lt;strong&gt;will not get propagated&lt;/strong&gt; to the actual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rackup&lt;/code&gt; process and will not print out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HUUUUUP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let’s see how the process tree looks like for the container run in &lt;strong&gt;exec format&lt;/strong&gt; (the good example):&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1 29.0  0.2  43988 25632 pts/0    Ssl+ 14:47   0:00 /usr/local/bundle/bin/rackup
root         8  0.0  0.0   7640  2668 ?        Rs   14:47   0:00 ps aux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rackup&lt;/code&gt; process is not wrapped inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; and is running as PID 1. Sending a HUP signal to our container will correctly print out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HUUUUUP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Why is this important? Some applications implement signals in order to exit gracefully or clean up resources. In the case of web servers, this usually means releasing connections from the database connection pool or finishing requests. If you want any of these you should care about signals.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/_y3ti&quot;&gt;Kamil Grabowski&lt;/a&gt; for pointing this out on Twitter.&lt;/p&gt;

&lt;h2 id=&quot;16-avoid-installing-development-or-test-dependencies-in-your-production-builds&quot;&gt;16. Avoid installing development or test dependencies in your production builds&lt;/h2&gt;

&lt;p&gt;Bad:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'source &quot;https://rubygems.org&quot;; gem &quot;sinatra&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Gemfile

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'source &quot;https://rubygems.org&quot;; gem &quot;sinatra&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Gemfile

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;without &lt;span class=&quot;s1&quot;&gt;'development test'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By default, calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn install&lt;/code&gt; will include development dependencies. Since these are usually not required in a typical production environment, excluding development and test dependencies from your production &lt;em&gt;Dockerfile&lt;/em&gt; will speed up your builds and reduce the size of your images.&lt;/p&gt;

&lt;p&gt;While we’re at it, when installing gems I recommend setting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--jobs&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--retry&lt;/code&gt; arguments, as it will speed up the process and make it more resilient to network issues:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--jobs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nt&quot;&gt;--retry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;17-optional-combine-production-test-and-development-build-processes-into-a-single-dockerfile-by-using-multi-stage-builds&quot;&gt;17. Optional: Combine production, test and development build processes into a single Dockerfile by using multi-stage builds&lt;/h2&gt;

&lt;p&gt;In many cases, your test, development and production build processes might slightly differ from each other. If you’re using Docker across all these environments, a common approach is to introduce one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; per environment. Keeping these files in sync can gradually become redundant, tedious or just easy to forget.&lt;/p&gt;

&lt;p&gt;A different approach to having multiple Dockerfiles is using multi-stage builds to map all your environments or build processes within the same Dockerfile. Here’s an example:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5-alpine AS builder&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# A Gemfile that contains a test dependency (minitest)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'source &quot;https://rubygems.org&quot;; gem &quot;sinatra&quot;; group(:test) { gem &quot;minitest&quot; }'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Gemfile
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'require &quot;sinatra&quot;; run Sinatra::Application.run!'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; config.ru

&lt;span class=&quot;c&quot;&gt;# By default we don't install development or test dependencies&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--without&lt;/span&gt; development &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# A separate build stage installs test dependencies and runs your tests&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; builder AS test&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The test stage installs the test dependencies&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Let's introduce a test that passes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'require &quot;minitest/spec&quot;; require &quot;minitest/autorun&quot;; class TestIndex &amp;lt; MiniTest::Test; def test_it_passes; assert(true); end; end'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; test.rb
&lt;span class=&quot;c&quot;&gt;# The actual test run&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;ruby test.rb

&lt;span class=&quot;c&quot;&gt;# The production artifact doesn't contain any test dependencies&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.5.5-alpine&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=builder /usr/local/bundle/ /usr/local/bundle/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=builder /config.ru ./&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;rackup&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can build the production artifact (without the test dependencies) by calling:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;DOCKER_BUILDKIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 docker build &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can run your tests by explicitly asking for the &lt;em&gt;test&lt;/em&gt; stage:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;DOCKER_BUILDKIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 docker build &lt;span class=&quot;nt&quot;&gt;--target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice the usage of the &lt;a href=&quot;https://docs.docker.com/develop/develop-images/build_enhancements/&quot;&gt;BuildKit&lt;/a&gt; feature flag. Prior to Docker 18.09 or without adding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DOCKER_BUILDKIT=1&lt;/code&gt; flag, a full build would still build all stages, including the test stage. The final artifact would still contain only the production dependencies but the build would take a little bit longer.&lt;/p&gt;

&lt;h2 id=&quot;18-bonus-running-migrations&quot;&gt;18. Bonus: Running migrations&lt;/h2&gt;

&lt;p&gt;There are various ways to run migrations in Docker, but the simplest one is by creating a &lt;em&gt;start script&lt;/em&gt; for your application:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;

bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake db:migrate
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rackup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I usually save this as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/start&lt;/code&gt; and use it as my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;bin/start&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that Rails prevents running migrations in parallel from different processes. Deploying two or more containers in parallel might cause all but one of these deployments to fail. Then again, if you deploy containers in parallel, you’re most likely using an automated solution (Kubernetes / Nomad / Docker Swarm), at which point your containers should get resurected and should eventually bypass the Rails migration lock.&lt;/p&gt;

&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting it all together…&lt;/h2&gt;

&lt;p&gt;Enough with the theory! Let’s apply these best practices. No app is the same, so I’ll provide you with &lt;em&gt;Dockerfiles&lt;/em&gt; for three different use cases, in order of their complexity.&lt;/p&gt;

&lt;p&gt;We’ll start with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dockerignore&lt;/code&gt; file, which is shared by all examples. The easiest way to produce a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dockerignore&lt;/code&gt; file is by mirroring your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file, then adding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git/&lt;/code&gt; directory to the list:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Start from your .gitignore file&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; .gitignore .dockerignore

&lt;span class=&quot;c&quot;&gt;# Exclude the .git/ directory from being copied over into your images&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.git/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; .dockerignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;dockerfile-for-a-plain-ruby-app-or-a-rails-app-without-assets&quot;&gt;Dockerfile for a plain Ruby app or a Rails app without assets&lt;/h3&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Start from a small, trusted base image with the version pinned down&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.7.1-alpine AS base&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install system dependencies required both at runtime and build time&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The image uses Postgres but you can swap it with mariadb-dev (for MySQL) or sqlite-dev&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk add &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  postgresql-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  tzdata

&lt;span class=&quot;c&quot;&gt;# This stage will be responsible for installing gems&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; base AS dependencies&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install system dependencies required to build some Ruby gems (pg)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk add &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; build-base

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Gemfile Gemfile.lock ./&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install gems (excluding development/test dependencies)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;without &lt;span class=&quot;s2&quot;&gt;&quot;development test&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--jobs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nt&quot;&gt;--retry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3

&lt;span class=&quot;c&quot;&gt;# We're back at the base stage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; base&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create a non-root user to run the app and own app-specific files&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;adduser &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; app

&lt;span class=&quot;c&quot;&gt;# Switch to this user&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; app&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# We'll install the app in this directory&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /home/app&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy over gems from the dependencies stage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=dependencies /usr/local/bundle/ /usr/local/bundle/&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Finally, copy over the code&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This is where the .dockerignore file comes into play&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Note that we have to use `--chown` here&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --chown=app . ./&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Launch the server (or run some other Ruby command)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;bundle&quot;, &quot;exec&quot;, &quot;rackup&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can build this by calling:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; my-rails-app &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;dockerfile-for-a-rails-app-with-assets&quot;&gt;Dockerfile for a Rails app with assets&lt;/h3&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Start from a small, trusted base image with the version pinned down&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.7.1-alpine AS base&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install system dependencies required both at runtime and build time&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The image uses Postgres but you can swap it with mariadb-dev (for MySQL) or sqlite-dev&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk add &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  postgresql-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  tzdata &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  nodejs &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  yarn

&lt;span class=&quot;c&quot;&gt;# This stage will be responsible for installing gems and npm packages&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; base AS dependencies&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install system dependencies required to build some Ruby gems (pg)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk add &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; build-base

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Gemfile Gemfile.lock ./&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install gems (excluding development/test dependencies)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;without &lt;span class=&quot;s2&quot;&gt;&quot;development test&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--jobs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nt&quot;&gt;--retry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; package.json yarn.lock ./&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install npm packages&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;yarn &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--frozen-lockfile&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# We're back at the base stage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; base&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create a non-root user to run the app and own app-specific files&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;adduser &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; app

&lt;span class=&quot;c&quot;&gt;# Switch to this user&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; app&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# We'll install the app in this directory&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /home/app&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy over gems from the dependencies stage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=dependencies /usr/local/bundle/ /usr/local/bundle/&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy over npm packages from the dependencies stage&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Note that we have to use `--chown` here&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --chown=app --from=dependencies /node_modules/ node_modules/&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Finally, copy over the code&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This is where the .dockerignore file comes into play&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Note that we have to use `--chown` here&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --chown=app . ./&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install assets&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production &lt;span class=&quot;nv&quot;&gt;SECRET_KEY_BASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;assets bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake assets:precompile

&lt;span class=&quot;c&quot;&gt;# Launch the server&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;bundle&quot;, &quot;exec&quot;, &quot;rackup&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can build this by calling:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; my-rails-app &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;dockerfile-for-a-rails-app-with-assets-and-private-dependencies&quot;&gt;Dockerfile for a Rails app with assets and private dependencies&lt;/h3&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Start from a small, trusted base image with the version pinned down&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2.7.1-alpine AS base&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install system dependencies required both at runtime and build time&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The image uses Postgres but you can swap it with mariadb-dev (for MySQL) or sqlite-dev&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk add &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  postgresql-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  tzdata &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  nodejs &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  yarn

&lt;span class=&quot;c&quot;&gt;# This stage will be responsible for installing gems and npm packages&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; base AS dependencies&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The argument is required later, when installing private gems or npm packages&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ARG&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; GITHUB_TOKEN&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install system dependencies required to build some Ruby gems (pg)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk add &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; build-base

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Gemfile Gemfile.lock ./&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Don't install development or test dependencies&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;bundle config &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;without &lt;span class=&quot;s2&quot;&gt;&quot;development test&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install gems (including private ones)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This uses the GITHUB_TOKEN argument, which is also cleaned up in the same step&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; url.&lt;span class=&quot;s2&quot;&gt;&quot;https://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:x-oauth-basic@github.com/some-user&quot;&lt;/span&gt;.insteadOf git@github.com:some-user &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add&lt;/span&gt; url.&lt;span class=&quot;s2&quot;&gt;&quot;https://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:x-oauth-basic@github.com/some-user&quot;&lt;/span&gt;.insteadOf ssh://git@github &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--jobs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nt&quot;&gt;--retry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; ~/.gitconfig

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; package.json yarn.lock ./&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install npm packages (including private ones)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This uses the GITHUB_TOKEN argument, which is also cleaned up in the same step&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; url.&lt;span class=&quot;s2&quot;&gt;&quot;https://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:x-oauth-basic@github.com/some-user&quot;&lt;/span&gt;.insteadOf git@github.com:some-user &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add&lt;/span&gt; url.&lt;span class=&quot;s2&quot;&gt;&quot;https://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:x-oauth-basic@github.com/some-user&quot;&lt;/span&gt;.insteadOf ssh://git@github &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  yarn &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--frozen-lockfile&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; ~/.gitconfig

&lt;span class=&quot;c&quot;&gt;# We're back at the base stage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; base&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create a non-root user to run the app and own app-specific files&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;adduser &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; app

&lt;span class=&quot;c&quot;&gt;# Switch to this user&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; app&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# We'll install the app in this directory&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /home/app&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy over gems from the dependencies stage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=dependencies /usr/local/bundle/ /usr/local/bundle/&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy over npm packages from the dependencies stage&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Note that we have to use `--chown` here&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --chown=app --from=dependencies /node_modules/ node_modules/&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Finally, copy over the code&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This is where the .dockerignore file comes into play&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Note that we have to use `--chown` here&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --chown=app . ./&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install assets&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production &lt;span class=&quot;nv&quot;&gt;SECRET_KEY_BASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;assets bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake assets:precompile

&lt;span class=&quot;c&quot;&gt;# Launch the server&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;bundle&quot;, &quot;exec&quot;, &quot;rackup&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can build this by calling:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nt&quot;&gt;--build-arg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxx &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; my-rails-app &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code presented here can also be found at &lt;a href=&quot;https://github.com/lipanski/ruby-dockerfile-example&quot;&gt;https://github.com/lipanski/ruby-dockerfile-example&lt;/a&gt;.&lt;/p&gt;

&lt;h2 class=&quot;no_toc&quot; id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pythonspeed.com/articles/dockerizing-python-is-hard/&quot;&gt;https://pythonspeed.com/articles/dockerizing-python-is-hard/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.docker.com/2019/07/intro-guide-to-dockerfile-best-practices/&quot;&gt;https://blog.docker.com/2019/07/intro-guide-to-dockerfile-best-practices/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vsupalov.com/build-docker-image-clone-private-repo-ssh-key/&quot;&gt;https://vsupalov.com/build-docker-image-clone-private-repo-ssh-key/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://evilmartians.com/chronicles/ruby-on-whales-docker-for-ruby-rails-development&quot;&gt;https://evilmartians.com/chronicles/ruby-on-whales-docker-for-ruby-rails-development&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pythonspeed.com/articles/docker-caching-model/&quot;&gt;https://pythonspeed.com/articles/docker-caching-model/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gmaslowski.com/docker-shell-vs-exec/&quot;&gt;https://gmaslowski.com/docker-shell-vs-exec/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/capital-one-tech/multi-stage-builds-and-dockerfile-b5866d9e2f84&quot;&gt;https://medium.com/capital-one-tech/multi-stage-builds-and-dockerfile-b5866d9e2f84&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="devops" /><category term="ruby" /><summary type="html">Best practices when writing a Dockerfile for a Ruby application</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lipanski.com/assets/images/logo.jpg" /><media:content medium="image" url="https://lipanski.com/assets/images/logo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">One Ruby file to rule them all: inline gems and inline ActiveRecord migrations</title><link href="https://lipanski.com/posts/one-ruby-file-to-rule-them-all" rel="alternate" type="text/html" title="One Ruby file to rule them all: inline gems and inline ActiveRecord migrations" /><published>2019-02-20T00:00:00+00:00</published><updated>2019-02-20T00:00:00+00:00</updated><id>https://lipanski.com/posts/one-ruby-file-to-rule-them-all</id><content type="html" xml:base="https://lipanski.com/posts/one-ruby-file-to-rule-them-all">&lt;h1 id=&quot;one-ruby-file-to-rule-them-all-inline-gems-and-inline-activerecord-migrations&quot;&gt;One Ruby file to rule them all: inline gems and inline ActiveRecord migrations&lt;/h1&gt;

&lt;p&gt;Ruby is my go-to language for scripting. It’s simple, concise and delivers the expected results without much hassle. Though definitely not a good idea for large applications, having everything in one file can be pretty neat when using Ruby for scripting. It makes sharing, installing and running your Ruby code easier.&lt;/p&gt;

&lt;p&gt;This post focuses on ways to build a self-contained single-file Ruby web app that uses a database and performs migrations at run time. This is not really what you’d call &lt;em&gt;scripting&lt;/em&gt;, but the techniques are pretty much the same. Some of them should be taken with a grain of salt, but they are at least interesting.&lt;/p&gt;

&lt;h2 id=&quot;inline-gems&quot;&gt;Inline gems&lt;/h2&gt;

&lt;p&gt;A while back, Bundler &lt;a href=&quot;https://bundler.io/v2.0/guides/bundler_in_a_single_file_ruby_script.html&quot;&gt;introduced&lt;/a&gt; the possibility to declare gems from within Ruby files. Running such a file would automatically install any missing gems.&lt;/p&gt;

&lt;p&gt;Here’s how it works:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundler/inline&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gemfile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sinatra&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2.0.5&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Sinatra was installed!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sinatra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can either make this script executable or call it via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby my-script.rb&lt;/code&gt;. In any case, it will make sure to install &lt;strong&gt;and require&lt;/strong&gt; the listed gems (in this case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sinatra&lt;/code&gt;), before running the rest of your Ruby code.&lt;/p&gt;

&lt;p&gt;Note that there is no concept of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; in the world of inline Bundler, so a good practice is being specific about the gem versions you want installed.&lt;/p&gt;

&lt;h2 id=&quot;inline-activerecord-migrations&quot;&gt;Inline ActiveRecord migrations&lt;/h2&gt;

&lt;p&gt;Let’s say your script or web app requires a database. ActiveRecord migrations can also be inlined, though it’s probably not very common. Here’s how:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Define a couple of migrations as part of the same file&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateEventTableMigration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Add the magic sauce&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:events&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AddEventCreatedMigration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;change_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:events&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Perform migrations&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;migrations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CreateEventTableMigration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AddEventCreatedMigration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migrator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;migrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;migrate&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Define your model(s)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The main difference from writing migrations as separate files is the need to define the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version&lt;/code&gt; class method. Under normal circumstances, this would point to the file name of the migration and this is how ActiveRecord keeps track of the performed migrations, but also their designated order. The method should therefore return something unique and sortable - like a number that you increase with every new migration.&lt;/p&gt;

&lt;p&gt;In your normal Rails or Sinatra app, you’d perform migrations by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rake db:migrate&lt;/code&gt;. For our self-contained single-file Ruby app, we will perform them automatically. We do this by calling:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# You can maintain this list yourself or use `ActiveRecord::Migration[5.2].subclasses`&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;migrations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CreateEventTableMigration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AddEventCreatedMigration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migrator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;migrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;migrate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This operation is idempotent.&lt;/p&gt;

&lt;p&gt;Last but not least, you might have noticed there’s no explicit database connection in our code, but we don’t want to add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;database.yml&lt;/code&gt; file, as it goes against our self-imposed single-file mantra. There’s a little ActiveRecord convention that can help us out here: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DATABASE_URL&lt;/code&gt; environment variable. You can use it to specify the database of your choice:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;DATABASE_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;postgres://dbuser:dbpass@locahost:5432/dbname ./my-script.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;inline-activerecord-roll-backs&quot;&gt;Inline ActiveRecord roll-backs&lt;/h2&gt;

&lt;p&gt;Rolling back the migrations can be achieved by changing the direction argument on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveRecord::Migrator&lt;/code&gt; call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:down&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;migrations_to_roll_back&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CreateEventTableMigration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AddEventCreatedMigration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migrator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;migrations_to_roll_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;migrate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;alternative-inline-activerecord-schema-loading&quot;&gt;Alternative: Inline ActiveRecord schema loading&lt;/h2&gt;

&lt;p&gt;As pointed out by Janko Marohnić in the comments, an alternative to the previously described database migration process would be to perform a schema loading, similar to what ActiveRecord does when you call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rake db:schema:load&lt;/code&gt;. The result looks simpler:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:events&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;change_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:events&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…but there’s a catch: &lt;strong&gt;the code is not idempotent&lt;/strong&gt; and will fail when run a second time.&lt;/p&gt;

&lt;p&gt;Fortunately ActiveRecord does provide us with &lt;a href=&quot;https://apidock.com/rails/v4.2.7/ActiveRecord/ConnectionAdapters/SchemaStatements/column_exists%3F&quot;&gt;the means&lt;/a&gt; to make this idempotent. You’ll only need to be a bit more explicit:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_exists?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:events&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column_exists?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;change_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:events&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, I’m using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;table_exists?&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;column_exists?&lt;/code&gt; methods to avoid running my migrations a second time. Note that I’ve also preserved the incremental nature of my migrations - new migrations can be added to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#define&lt;/code&gt; block without interfering with the old ones.&lt;/p&gt;

&lt;h2 id=&quot;inline-everything&quot;&gt;Inline everything!&lt;/h2&gt;

&lt;p&gt;Here’s how the final result looks like:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundler/inline&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gemfile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sinatra&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2.0.5&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sinatra-activerecord&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2.0.13&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.1.4&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateEventTableMigration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:events&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AddEventCreatedMigration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;change_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:events&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:created_at&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Perform migrations&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;migrations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CreateEventTableMigration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AddEventCreatedMigration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migrator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;migrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;migrate&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Define your model&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/events/last&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{}&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/events&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;unknown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;created_at: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Sinatra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Prerequisites:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Create the Postgres database&lt;/span&gt;
createdb single-file-example

&lt;span class=&quot;c&quot;&gt;# Make the script executable&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x my-script.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is how you’d run the script:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;DATABASE_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;postgres:///single-file-example ./my-script.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When executed, the script will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install any missing gems.&lt;/li&gt;
  &lt;li&gt;Require the listed gems.&lt;/li&gt;
  &lt;li&gt;Perform database migrations on the database specified via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DATABASE_URL&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Run a Sinatra application on your local port 3000 that responds to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET /events/last&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST /events&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bundler.io/v2.0/guides/bundler_in_a_single_file_ruby_script.html&quot;&gt;https://bundler.io/v2.0/guides/bundler_in_a_single_file_ruby_script.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bundler/bundler/blob/master/lib/bundler/inline.rb&quot;&gt;https://github.com/bundler/bundler/blob/master/lib/bundler/inline.rb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/blob/master/activerecord/lib/active_record/tasks/database_tasks.rb&quot;&gt;https://github.com/rails/rails/blob/master/activerecord/lib/active_record/tasks/database_tasks.rb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apidock.com/rails/v4.2.7/ActiveRecord/ConnectionAdapters/SchemaStatements/column_exists%3F&quot;&gt;https://apidock.com/rails/v4.2.7/ActiveRecord/ConnectionAdapters/SchemaStatements/column_exists%3F&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="ruby" /><summary type="html">One Ruby file to rule them all: inline gems and inline ActiveRecord migrations</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lipanski.com/assets/images/logo.jpg" /><media:content medium="image" url="https://lipanski.com/assets/images/logo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Crystal: Raising exceptions from Fibers, the parallel macro and invalid memory access</title><link href="https://lipanski.com/posts/crystal-parallel" rel="alternate" type="text/html" title="Crystal: Raising exceptions from Fibers, the parallel macro and invalid memory access" /><published>2018-02-17T00:00:00+00:00</published><updated>2018-02-17T00:00:00+00:00</updated><id>https://lipanski.com/posts/crystal-parallel</id><content type="html" xml:base="https://lipanski.com/posts/crystal-parallel">&lt;h1 id=&quot;crystal-raising-exceptions-from-fibers-the-parallel-macro-and-invalid-memory-access&quot;&gt;Crystal: Raising exceptions from Fibers, the parallel macro and invalid memory access&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;UPDATE 2:&lt;/strong&gt; My patch to the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel&lt;/code&gt; macro made it into &lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.25.0&quot;&gt;Crystal 0.25.0&lt;/a&gt;, which also provides &lt;a href=&quot;https://crystal-lang.org/api/0.25.0/toplevel.html#parallel%28%2Ajobs%29-macro&quot;&gt;proper documentation&lt;/a&gt; for this quite useful language feature.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE 1:&lt;/strong&gt; I openend a &lt;a href=&quot;https://github.com/crystal-lang/crystal/pull/5726&quot;&gt;PR&lt;/a&gt; to propose my changes to Crystal.&lt;/p&gt;

&lt;p&gt;Concurrency can be achieved in Crystal by using &lt;em&gt;Fibers&lt;/em&gt;. Communication between &lt;em&gt;Fibers&lt;/em&gt; is handled via &lt;em&gt;Channels&lt;/em&gt;. The &lt;a href=&quot;https://crystal-lang.org/docs/guides/concurrency.html&quot;&gt;documentation&lt;/a&gt; on these topics is quite comprehensive so I won’t go into detail here.&lt;/p&gt;

&lt;p&gt;This post will focus on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel&lt;/code&gt; macro, present one of its drawbacks when dealing with unhandled exceptions and introduce a solution: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel!&lt;/code&gt; macro.&lt;/p&gt;

&lt;h2 id=&quot;the-parallel-macro&quot;&gt;The parallel macro&lt;/h2&gt;

&lt;p&gt;One useful tool that didn’t make it into the Crystal Book is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel&lt;/code&gt; macro. It allows firing up and waiting for several concurrent jobs in a more succinct manner:&lt;/p&gt;

&lt;div class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The real beauty of this macro comes when you’re interested in capturing the return values of your concurrent jobs:&lt;/p&gt;

&lt;div class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;raising-exceptions-in-fibers-and-usage-of-uninitialized-in-parallel&quot;&gt;Raising exceptions in Fibers and usage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uninitialized&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Exceptions raised from &lt;em&gt;Fibers&lt;/em&gt; don’t propagate to the main thread. Though there are ways to re-raise these exceptions, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel&lt;/code&gt; macro doesn’t implement this.&lt;/p&gt;

&lt;p&gt;For the same reason, the following code will get you in trouble:&lt;/p&gt;

&lt;div class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;boom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This program will crash because of an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Invalid memory access (signal 11)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem here lies in the usage of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt; variables on the last line, after the &lt;em&gt;Fibers&lt;/em&gt; silently swallowed the exception. More specifically, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel&lt;/code&gt; macro implementation (which is &lt;a href=&quot;https://github.com/crystal-lang/crystal/blob/v0.24.1/src/concurrent.cr#L131&quot;&gt;quite easy to read&lt;/a&gt;) has to define these variables before actually evaluating them. This is achieved by initially marking them as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uninitialized&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uninitialized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yes - Crystal &lt;a href=&quot;https://crystal-lang.org/docs/syntax_and_semantics/declare_var.html&quot;&gt;allows declaring uninitialized variables&lt;/a&gt;, and no - it’s probably not the best idea to use this &lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/4544#issuecomment-307612363&quot;&gt;unless you know what you’re doing&lt;/a&gt;. This is &lt;em&gt;unsafe&lt;/em&gt; code.&lt;/p&gt;

&lt;p&gt;Also note that placing checks before using the variable:&lt;/p&gt;

&lt;div class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…will not solve the issue and &lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/4544#issuecomment-307635912&quot;&gt;there’s no way&lt;/a&gt; to tell if a variable is initialized or not.&lt;/p&gt;

&lt;p&gt;As long as your &lt;em&gt;Fibers&lt;/em&gt; don’t raise unhandled exceptions, you can safely use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel&lt;/code&gt; macro. The moment you start raising undhandled exceptions, you’ll want to replace the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel&lt;/code&gt; macro with some more explicit code:&lt;/p&gt;

&lt;div class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;boom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# In this case a nil-check is not needed, but for other method calls you might need it.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice how we had to compromise on the type of our variables here. Also, this solution is pretty verbose.&lt;/p&gt;

&lt;h2 id=&quot;re-raising-exceptions-and-the-parallel-macro&quot;&gt;Re-raising exceptions and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel!&lt;/code&gt; macro&lt;/h2&gt;

&lt;p&gt;I’m not a big fan of verbose (which is why I really enjoy Crystal and Ruby), so it was time for a macro to hide away all this code. Because I didn’t want to compromise on the variable type, I decided to re-raise the exceptions to the main thread.&lt;/p&gt;

&lt;p&gt;Make way for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel!&lt;/code&gt; macro:&lt;/p&gt;

&lt;div class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;macro&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parallel!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uninitialized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that prepending variable names with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt; inside macros will generate unique names for them, so that they won’t collide with your other variable names outside the macro implementation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The implementation is mostly based on the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallel&lt;/code&gt; implementation, the difference being that exceptions from &lt;em&gt;Fibers&lt;/em&gt; will be re-raised in the main thread.&lt;/p&gt;

&lt;p&gt;The following code will raise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exception.new(&quot;boom&quot;)&lt;/code&gt; even before the last line, instead of that nasty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Invalid memory access&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;boom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;parallel!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://crystal-lang.org/docs/guides/concurrency.html&quot;&gt;Concurrency in Crystal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/blob/v0.24.1/src/concurrent.cr#L131&quot;&gt;The parallel macro implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://crystal-lang.org/docs/syntax_and_semantics/declare_var.html&quot;&gt;Uninitialized variables in Crystal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/issues/4544&quot;&gt;Issue explaining invalid memory access&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/crystal-lang/crystal/releases/tag/0.7.0&quot;&gt;Crystal 0.7.0 release notes, which introduced the %var macro notation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="crystal" /><summary type="html">Crystal: Raising exceptions from Fibers, the parallel macro and invalid memory access</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lipanski.com/assets/images/logo.jpg" /><media:content medium="image" url="https://lipanski.com/assets/images/logo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Blocking malicious requests with nginx + ModSecurity</title><link href="https://lipanski.com/posts/modsecurity" rel="alternate" type="text/html" title="Blocking malicious requests with nginx + ModSecurity" /><published>2018-01-26T00:00:00+00:00</published><updated>2018-01-26T00:00:00+00:00</updated><id>https://lipanski.com/posts/modsecurity</id><content type="html" xml:base="https://lipanski.com/posts/modsecurity">&lt;h1 id=&quot;blocking-malicious-requests-with-nginx--modsecurity&quot;&gt;Blocking malicious requests with nginx + ModSecurity&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://modsecurity.org/&quot;&gt;ModSecurity&lt;/a&gt; is a &lt;strong&gt;web application firewall&lt;/strong&gt; integrated with Apache and nginx. It can match request information at various stages and throttle or allow/deny requests based on the rules you define. ModSecurity comes with the &lt;a href=&quot;https://github.com/SpiderLabs/owasp-modsecurity-crs&quot;&gt;OWASP core rule set&lt;/a&gt; but a &lt;a href=&quot;http://modsecurity.org/rules.html&quot;&gt;paid set of rules&lt;/a&gt; is also available. Integrating your own rules is quite easy.&lt;/p&gt;

&lt;p&gt;This post will try to give you an overview of how to &lt;strong&gt;install the ModSecurity nginx module&lt;/strong&gt;, how to &lt;strong&gt;configure the module&lt;/strong&gt; and, finally, how to &lt;strong&gt;create a rule for blocking a list of mailicous IPs&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;installing-modsecurity-nginx-bash&quot;&gt;Installing ModSecurity-nginx (Bash)&lt;/h2&gt;

&lt;p&gt;For the equivalent Ansible playbook, skip to the next chapter.&lt;/p&gt;

&lt;p&gt;In order to install the &lt;a href=&quot;https://github.com/SpiderLabs/ModSecurity-nginx&quot;&gt;ModSecurity-nginx module&lt;/a&gt; you’ll need to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;install the &lt;em&gt;libmodsecurity&lt;/em&gt; dependencies&lt;/li&gt;
  &lt;li&gt;build and install &lt;em&gt;libmodsecurity&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;pull the nginx source code for the nginx version that you’re currently running&lt;/li&gt;
  &lt;li&gt;build ModSecurity-nginx as a dynamic module by using the nginx source code&lt;/li&gt;
  &lt;li&gt;include the built module in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following commands were run on Ubuntu 14.04. Mileage may vary.&lt;/p&gt;

&lt;p&gt;First, you’ll want to install the dependencies required in order to build &lt;em&gt;libmodsecurity&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  git &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  g++ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  flex &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  bison &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  curl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  doxygen &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  libyajl-dev &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  libgeoip-dev &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  libtool &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  dh-autoreconf &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  libcurl4-gnutls-dev &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  libxml2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  libpcre++-dev &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  libxml2-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, you’ll want to pull the &lt;em&gt;libmodsecurity&lt;/em&gt; code, build and install it:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;opt/
git clone &lt;span class=&quot;nt&quot;&gt;--branch&lt;/span&gt; v3.0.0 &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt; 1 https://github.com/SpiderLabs/ModSecurity.git

&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ModSecurity/
./build.sh
git submodule init
git submodule update
./configure
make
make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As explained &lt;a href=&quot;/posts/nginx-dynamic-modules&quot;&gt;in my previous post&lt;/a&gt;, in order to build an nginx module you’ll need to pull in the source code of the nginx version that you’re currently running:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Identify your current nginx version&lt;/span&gt;
nginx &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Pull the source code&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;opt/
wget http://nginx.org/download/nginx-[INSERT NGINX VERSION HERE].tar.gz
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xzvf&lt;/span&gt; nginx-[INSERT NGINX VERSION HERE].tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Afterwards, download the &lt;a href=&quot;https://github.com/SpiderLabs/ModSecurity-nginx&quot;&gt;ModSecurity-nginx module&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /opt
git clone &lt;span class=&quot;nt&quot;&gt;--branch&lt;/span&gt; v1.0.0 &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt; 1 https://github.com/SpiderLabs/ModSecurity-nginx.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Enter the directory where you downloaded the nginx source code, build ModSecurity-nginx as a dynamic module and copy it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/nginx/modules&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /opt/nginx-[INSERT NGINX VERSION HERE]
./configure &lt;span class=&quot;nt&quot;&gt;--with-compat&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add-dynamic-module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/ModSecurity-nginx &lt;span class=&quot;nt&quot;&gt;--with-cc-opt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Wno-error&lt;/span&gt;
make modules
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;objs/ngx_http_modsecurity_module.so /etc/nginx/modules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, include the module somewhere towards the beginning of your nginx configuration:&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# /etc/nginx/nginx.conf&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;load_module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;modules/ngx&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;_http_modsecurity_module.so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;installing-modsecurity-nginx-ansible&quot;&gt;Installing ModSecurity-nginx (Ansible)&lt;/h2&gt;

&lt;p&gt;This is the equivalent of the previous Bash commands in Ansible. It assumes nginx is already installed. It’s been tested with Ubuntu 14.04.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;all&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nginx_modsecurity_branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v3.0.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nginx_modsecurity_nginx_branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1.0.0&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;install modsecurity dependencies&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name=&quot;{{ item }}&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;with_items&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;g++&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;flex&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bison&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curl&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;doxygen&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;libyajl-dev&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;libgeoip-dev&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;libtool&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dh-autoreconf&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;libcurl4-gnutls-dev&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;libxml2&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;libpcre++-dev&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;libxml2-dev&lt;/span&gt;

  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;clone the modsecurity repository&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;repo=&quot;https://github.com/SpiderLabs/ModSecurity.git&quot; version=&quot;{{ nginx_modsecurity_branch }}&quot; accept_hostkey=yes depth=1 force=yes dest=/opt/ModSecurity&lt;/span&gt;

  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build and install modsecurity&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/opt/ModSecurity&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;with_items&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./build.sh&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git submodule init&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git submodule update&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./configure&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;make&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;make install&lt;/span&gt;

  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;clone the modsecurity-nginx repository&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;repo=&quot;https://github.com/SpiderLabs/ModSecurity-nginx.git&quot; version=&quot;{{ nginx_modsecurity_nginx_branch }}&quot; accept_hostkey=yes depth=1 force=yes dest=/opt/ModSecurity-nginx&lt;/span&gt;

  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;read the nginx version&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx -v&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx_version_output&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# nginx writes the version to stderr&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;parse the installed nginx version&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;set_fact&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;installed_nginx_version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;nginx_version_output.stderr.split('/')[1]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;

  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;download and extract the nginx sources for building the module&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;unarchive&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src=&quot;http://nginx.org/download/nginx-{{ installed_nginx_version }}.tar.gz&quot; remote_src=yes dest=/opt creates=&quot;/opt/nginx-{{ installed_nginx_version }}&quot;&lt;/span&gt;

  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;configure the modsecurity-nginx module&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./configure --with-compat --add-dynamic-module=/opt/ModSecurity-nginx --with-cc-opt=-Wno-error&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/opt/nginx-{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;installed_nginx_version&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;

  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build the modsecurity-nginx module&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;make modules&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/opt/nginx-{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;installed_nginx_version&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;

  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;copy the module to /etc/nginx/modules&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cp /opt/nginx-{{ installed_nginx_version }}/objs/ngx_http_modsecurity_module.so /etc/nginx/modules&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;creates&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/nginx/modules/ngx_http_modsecurity_module.so&lt;/span&gt;

  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;load modsecurity inside nginx.conf&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;lineinfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/nginx/nginx.conf&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;insertbefore&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;BOF&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;load_module&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;modules/ngx_http_modsecurity_module.so;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;configuring-modsecurity-nginx&quot;&gt;Configuring ModSecurity-nginx&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual&quot;&gt;ModSecurity Reference Manual&lt;/a&gt; provides a good overview of all the options and rules that ship with ModSecurity. Likewise, the &lt;a href=&quot;https://github.com/SpiderLabs/ModSecurity-nginx&quot;&gt;ModSecurity-nginx README&lt;/a&gt; provides information about using the nginx module.&lt;/p&gt;

&lt;p&gt;This part discusses the basic configuration required in order to start writing your own rules.&lt;/p&gt;

&lt;p&gt;Inside your nginx site configuration, enable ModSecurity:&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;modsecurity&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, inside every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;location&lt;/code&gt; block that should apply the ModSecurity rules, enable the rule engine and some handy options, like logging:&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;modsecurity&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;modsecurity_rules&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;SecRuleEngine&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;On&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;SecDebugLog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/var/log/nginx/modsecurity-debug.log&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;SecDebugLogLevel&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;SecAuditEngine&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;On&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;SecAuditLog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/var/log/nginx/modsecurity-audit.log&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;SecAuditLogParts&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ABKZ&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;audit log&lt;/strong&gt; will record the requests that matched your rules, while the &lt;strong&gt;debug log&lt;/strong&gt; will contain ModSecurity related debug information, like a misconfigured setup.&lt;/p&gt;

&lt;p&gt;If you’d like the ModSecurity &lt;strong&gt;audit logs to use JSON&lt;/strong&gt;, add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecAuditLogFormat JSON&lt;/code&gt; to the mix.&lt;/p&gt;

&lt;p&gt;Note that ModSecurity &lt;strong&gt;rule sets can also be loaded from a file&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;modsecurity&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;modsecurity_rules_file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/etc/modsecurity/my_rules.conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/modsecurity/my_rules.conf&lt;/code&gt; would look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SecRuleEngine On
SecDebugLog /var/log/nginx/modsecurity-debug.log
SecDebugLogLevel 3
SecAuditEngine On
SecAuditLogParts ABKZ
SecAuditLog /var/log/nginx/modsecurity-audit.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;a-rule-to-block-ips-based-on-a-list&quot;&gt;A rule to block IPs based on a list&lt;/h2&gt;

&lt;p&gt;It’s time to write your first custom rule. Let’s introduce a blacklist - a file containing a list of IPs (masked or not) that should be denied any requests:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# /etc/modsecurity/blacklist.txt

1.2.3.4
5.6.7.8/24
9.10.11.12/16
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How to maintain this file is left up to the reader. There are &lt;a href=&quot;https://zeltser.com/malicious-ip-blocklists/&quot;&gt;plenty&lt;/a&gt; of &lt;a href=&quot;http://iplists.firehol.org/&quot;&gt;lists&lt;/a&gt; out there; pick the one that suits your needs and make sure you strip any additional information or markup, aside from the IPs and their masks.&lt;/p&gt;

&lt;p&gt;Once you have your list, add the follwing rule either to your nginx site configuration or to your dedicated ModSecurity configuration file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SecRule REMOTE_ADDR &quot;@ipMatchFromFile /etc/modsecurity/blacklist.txt&quot; id:1,phase:1,deny,status:403,msg:\'blacklist\'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A couple of things are worth mentioning here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipMatchFromFile&lt;/code&gt; call is one of the &lt;a href=&quot;https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#Transformation_functions&quot;&gt;many transformation functions&lt;/a&gt; that you can use to match ModSecurity variables.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Likewise, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REMOTE_ADDR&lt;/code&gt; is one of the &lt;a href=&quot;https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#Variables&quot;&gt;many variables&lt;/a&gt; that you can use to match request details, like the request IP in this case.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Every rule needs to have a unique &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phase&lt;/code&gt; refers to the &lt;a href=&quot;(https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#Processing_Phases)&quot;&gt;event of the request lifecycle&lt;/a&gt; when the rule can be applied: after parsing request headers, after parsing the request body, after parsing the response headers, after parsing the response body, after logging etc. In this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phase:1&lt;/code&gt; means we apply our rule when we already have the request headers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deny&lt;/code&gt; keyword is the &lt;strong&gt;action&lt;/strong&gt; that a matched requests will trigger. The opposite would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allow&lt;/code&gt; (if you’d be building a whitelist). Another interesting action is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drop&lt;/code&gt;, if you’d like to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drop&lt;/code&gt; the TCP connection instantly (like in the case of DDOS attacks), but this value didn’t really work in my tests.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status&lt;/code&gt; code that a matched request will receive. The response body will be the nginx template that coresponds to this status code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msg&lt;/code&gt; option can be used as an human readable identifier which will appear in the audit log.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you’ve added the rule, make sure to reload nginx:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service nginx reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s pretty much it. Requests by IPs on your list will now be blocked and clients will see a &lt;em&gt;403&lt;/em&gt; error.&lt;/p&gt;

&lt;p&gt;Note that any changes to your list of IPs or to your ModSecurity rules will require &lt;em&gt;reloading nginx&lt;/em&gt; in order for ModSecurity to pick up the changes.&lt;/p&gt;

&lt;h2 id=&quot;running-nginx-behind-a-reverse-proxy&quot;&gt;Running nginx behind a reverse proxy&lt;/h2&gt;

&lt;p&gt;If you’re running nginx behind a reverse proxy (e.g. a load balancer), which hides the client IP but sets the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X-Forwarded-For&lt;/code&gt; header correctly, I recommend setting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;real_ip_header&lt;/code&gt; option in your nginx configuration:&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# /etc/nginx/nginx.conf&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;real_ip_header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;X-Forwarded-For&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# The proxy address that you trust to set the X-Forwarded-For header correctly&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;set_real_ip_from&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.0.0.0/8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…which will ensure that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REMOTE_ADDR&lt;/code&gt; variable in ModSecurity points to the client IP and not the reverse proxy.&lt;/p&gt;

&lt;p&gt;Sometimes, you’ll also want to enable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;real_ip_recursive&lt;/code&gt; option - see the &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_realip_module.html#real_ip_recursive&quot;&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h2 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h2&gt;

&lt;p&gt;One alternative that works with nginx is &lt;a href=&quot;https://github.com/p0pr0ck5/lua-resty-waf&quot;&gt;lua-resty-waf&lt;/a&gt;. It requires &lt;a href=&quot;https://openresty.org/en/&quot;&gt;OpenResty&lt;/a&gt; though or recompiling nginx with OpenResty/Lua.&lt;/p&gt;

&lt;p&gt;Another one would be the cloud-based &lt;a href=&quot;https://aws.amazon.com/waf/&quot;&gt;AWS WAF&lt;/a&gt;, which comes with some annoying restrictions: IP lists are limited to 1000 entries and you can only use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/8&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/16&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/24&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/32&lt;/code&gt; CIDR masks. The suggested workaround is to create multiple lists of 1000 entries and convert other masks to the available ones. Another limitation on the AWS WAF is that some AWS regions don’t come with all its features (e.g. the load balancer integration), so make sure to check availability in your region before.&lt;/p&gt;

&lt;p&gt;If you only want to allow/deny a list of IPs, there’s the &lt;a href=&quot;https://github.com/Vasfed/nginx_ipset_blacklist&quot;&gt;nginx-ipset-blacklist module&lt;/a&gt;, but it looks quite outdated and won’t work with newer nginx versions. On the other hand, you could use plain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iptables&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iptables&lt;/code&gt; integrated with &lt;a href=&quot;http://ipset.netfilter.org/&quot;&gt;IpSet&lt;/a&gt; - a fast lookup store for IP addresses.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/posts/nginx-dynamic-modules&quot;&gt;Compiling and using dynamic nginx modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/SpiderLabs/ModSecurity/wiki/Compilation-recipes#ubuntu-1504&quot;&gt;ModSecurity Compilation Recipe for Ubuntu 15.04&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://modsecurity.org/&quot;&gt;https://modsecurity.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/SpiderLabs/ModSecurity&quot;&gt;https://github.com/SpiderLabs/ModSecurity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/SpiderLabs/ModSecurity-nginx&quot;&gt;https://github.com/SpiderLabs/ModSecurity-nginx&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual&quot;&gt;https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://danieljamesscott.org/all-articles/9-articles/34-whitelisting-ips-for-mod-security-when-behind-a-load-balancer.html&quot;&gt;https://danieljamesscott.org/all-articles/9-articles/34-whitelisting-ips-for-mod-security-when-behind-a-load-balancer.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="devops" /><summary type="html">Blocking malicious requests with nginx + ModSecurity</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lipanski.com/assets/images/logo.jpg" /><media:content medium="image" url="https://lipanski.com/assets/images/logo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Linux: How to make your own keyboard layout</title><link href="https://lipanski.com/posts/custom-keyboard-layout" rel="alternate" type="text/html" title="Linux: How to make your own keyboard layout" /><published>2017-12-27T00:00:00+00:00</published><updated>2017-12-27T00:00:00+00:00</updated><id>https://lipanski.com/posts/custom-keyboard-layout</id><content type="html" xml:base="https://lipanski.com/posts/custom-keyboard-layout">&lt;h1 id=&quot;linux-how-to-make-your-own-keyboard-layout&quot;&gt;Linux: How to make your own keyboard layout&lt;/h1&gt;

&lt;h2 id=&quot;history-time&quot;&gt;History time&lt;/h2&gt;

&lt;p&gt;Apart from the Latin alphabet, the Romanian language uses five special letters: &lt;em&gt;ă&lt;/em&gt;, &lt;em&gt;â&lt;/em&gt;, &lt;em&gt;î&lt;/em&gt;, &lt;em&gt;ș&lt;/em&gt;, &lt;em&gt;ț&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Due to the lack of Romanian hardware keyboards back in the day (which hasn’t changed much), one of the most popular Romanian keyboard mapping is fully compatible with US keyboards. The special letters are produced by pressing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AltGr&lt;/code&gt; and the corresponding Latin letter, with the exception of “ă”, which is attached to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AltGr + Q&lt;/code&gt;. This is called the &lt;em&gt;Romanian (Programmers)&lt;/em&gt; layout and is the de facto Romanian layout in the Linux world. Pairing the extra glyphs to the Latin keys is quite convenient, especially for programmers and people generally accustomed with the US layout.&lt;/p&gt;

&lt;p&gt;On the other hand, the German layouts expect a German hardware keyboard. When using a US keyboard, the default layout maps &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&lt;/code&gt; to produce &lt;em&gt;ä&lt;/em&gt;, &lt;em&gt;ö&lt;/em&gt;, &lt;em&gt;ü&lt;/em&gt;. This is definitely not something that plays well with US keyboards or with my brain.&lt;/p&gt;

&lt;p&gt;In my ideal world, I would trigger the German &lt;em&gt;umlauts&lt;/em&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AltGr&lt;/code&gt; key on top of the US layout and have the Romanian characters work side by side, the same way. There’s definitely no layout for that. Fortunately, creating your own custom layout is quite easy in Ubuntu.&lt;/p&gt;

&lt;h2 id=&quot;how-to-make-your-own-custom-layout&quot;&gt;How to make your own custom layout&lt;/h2&gt;

&lt;p&gt;Layouts are contained within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/X11/xkb/symbols&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Let’s start by copying the Romanian layout (feel free to choose any other layout as your starting point):&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;su
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/share/X11/xkb/symbols
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;ro fl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m calling my layout &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fl&lt;/code&gt;. If you open this file, you’ll see lots of lines that look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;key &amp;lt;AD01&amp;gt; { [ q, Q, acircumflex, Acircumflex ] };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These lines are the key bindings - they connect a particular key on your keyboard to the value that will be printed out.&lt;/p&gt;

&lt;p&gt;The first part &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key &amp;lt;AD01&amp;gt;&lt;/code&gt; represents &lt;strong&gt;the key&lt;/strong&gt; that we want to map. The code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;AD01&amp;gt;&lt;/code&gt; has the following meaning:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The first letter, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;, points to the &lt;em&gt;alphanumeric&lt;/em&gt; key block. Other options include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KP&lt;/code&gt; for the keypad and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FN&lt;/code&gt; for the function keys.&lt;/li&gt;
  &lt;li&gt;The second letter, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt;, points to the row. The count starts with the row containing the space bar, which would be row &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The last two digits represent the column of the key, starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;01&lt;/code&gt;, going from left to right and ignoring special keys (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TAB&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CapsLock&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key &amp;lt;AD01&amp;gt;&lt;/code&gt; would point to the &lt;em&gt;first key&lt;/em&gt; (ignoring the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TAB&lt;/code&gt;) of the &lt;em&gt;forth row&lt;/em&gt; of the &lt;em&gt;alphanumeric block&lt;/em&gt;, which on most keyboards is the letter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second part, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ q, Q, acircumflex, Acircumflex ]&lt;/code&gt;, points to the character that will be printed out, for the various combinations of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shift&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AltGr&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;No combination: q&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shift&lt;/code&gt;: Q&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AltGr&lt;/code&gt;: â (or &lt;em&gt;a circumflex&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shift + AltGr&lt;/code&gt;: Â (or &lt;em&gt;A circumflex&lt;/em&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If don’t intend to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shift&lt;/code&gt; and/or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AltGr&lt;/code&gt; combinations, you can simply leave those positions out.&lt;/p&gt;

&lt;p&gt;Note that for representing the printed value you can either use the entity name - like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;q&lt;/code&gt; for the letter &lt;em&gt;q&lt;/em&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acircumflex&lt;/code&gt; for the letter &lt;em&gt;â&lt;/em&gt; - or the &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_Unicode_characters#Control_codes&quot;&gt;Unicode control codes&lt;/a&gt; - like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U00E5&lt;/code&gt; for the letter &lt;em&gt;å&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Based on these conventions, it’s quite easy to either add new bindings or modify existing ones.&lt;/p&gt;

&lt;p&gt;In my case, I’ve added the following lines to the default block, in order to extend the Romanian layout with the German special letters:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Print ö when pressing o + AltGr
key &amp;lt;AD09&amp;gt; { [ o, O, odiaeresis, Odiaeresis ] };

// Print ü when pressing u + AltGr
key &amp;lt;AD07&amp;gt; { [ u, U, udiaeresis, Udiaeresis ] };

// Print ß when pressing z + AltGr
// Because there's no capital ß in the German language, I've left out the Shift + AltGr combination
key &amp;lt;AB01&amp;gt; { [ z, Z, ssharp ] };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve also edited the existing binding for the letter &lt;em&gt;w&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Print ä when pressing w + AltGr
key &amp;lt;AD02&amp;gt; { [ w, W,  adiaeresis, Adiaeresis ] };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One more thing before we’re done: Ubuntu keeps track of the installed keyboards in a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/X11/xkb/rules/evdev.xml&lt;/code&gt;. Open it with your favourite editor and, after the last &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/layout&amp;gt;&lt;/code&gt; tag, add your new layout:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;layout&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;configItem&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;fl&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;shortDescription&amp;gt;&lt;/span&gt;fl&lt;span class=&quot;nt&quot;&gt;&amp;lt;/shortDescription&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;My very own keyboard layout&lt;span class=&quot;nt&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;languageList&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;iso639Id&amp;gt;&lt;/span&gt;rum&lt;span class=&quot;nt&quot;&gt;&amp;lt;/iso639Id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;iso639Id&amp;gt;&lt;/span&gt;ger&lt;span class=&quot;nt&quot;&gt;&amp;lt;/iso639Id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;iso639Id&amp;gt;&lt;/span&gt;eng&lt;span class=&quot;nt&quot;&gt;&amp;lt;/iso639Id&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/languageList&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configItem&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/layout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it - you can switch to your new layout by calling:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setxkbmap fl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;links&quot;&gt;Links:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lipanski/dotfiles/blob/master/usr/share/X11/xkb/symbols/fl&quot;&gt;The keyboard layout file from my dotfiles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://askubuntu.com/questions/510024/what-are-the-steps-needed-to-create-new-keyboard-layout-on-ubuntu&quot;&gt;https://askubuntu.com/questions/510024/what-are-the-steps-needed-to-create-new-keyboard-layout-on-ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="linux" /><summary type="html">Linux: How to make your own keyboard layout</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://lipanski.com/assets/images/logo.jpg" /><media:content medium="image" url="https://lipanski.com/assets/images/logo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>