<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#" xmlns:media="http://search.yahoo.com/mrss/"
	>

<channel>
	<title>Surfing Complexity</title>
	<atom:link href="https://surfingcomplexity.blog/feed/" rel="self" type="application/rss+xml" />
	<link>https://surfingcomplexity.blog</link>
	<description>Lorin Hochstein&#039;s ramblings about software, complex systems, and incidents.</description>
	<lastBuildDate>Mon, 04 Nov 2024 04:59:38 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>http://wordpress.com/</generator>

<image>
	<url>https://surfingcomplexity.blog/wp-content/uploads/2020/05/surfer_1f3c4.png?w=32</url>
	<title>Surfing Complexity</title>
	<link>https://surfingcomplexity.blog</link>
	<width>32</width>
	<height>32</height>
</image> 
<cloud domain='surfingcomplexity.blog' port='80' path='/?rsscloud=notify' registerProcedure='' protocol='http-post' />
<atom:link rel="search" type="application/opensearchdescription+xml" href="https://surfingcomplexity.blog/osd.xml" title="Surfing Complexity" />
	<atom:link rel='hub' href='https://surfingcomplexity.blog/?pushpress=hub'/>
	<item>
		<title>Extending MVCC to be serializable, in TLA+</title>
		<link>https://surfingcomplexity.blog/2024/11/03/extending-mvcc-to-be-serializable-in-tla/</link>
					<comments>https://surfingcomplexity.blog/2024/11/03/extending-mvcc-to-be-serializable-in-tla/#respond</comments>
		
		<dc:creator><![CDATA[Lorin Hochstein]]></dc:creator>
		<pubDate>Mon, 04 Nov 2024 04:59:38 +0000</pubDate>
				<category><![CDATA[formal methods]]></category>
		<category><![CDATA[databases]]></category>
		<category><![CDATA[tlaplus]]></category>
		<guid isPermaLink="false">http://surfingcomplexity.blog/?p=5179</guid>

					<description><![CDATA[In the previous blog post, we saw how a transaction isolation strategy built on multi-version concurrency control (MVCC) does not implement the serializable isolation level. Instead, it implements a weaker isolation level called snapshot isolation. In this post, I&#8217;ll discuss how that MVCC model can be extended in order to achieve serializability, based on work &#8230; <a href="https://surfingcomplexity.blog/2024/11/03/extending-mvcc-to-be-serializable-in-tla/" class="more-link">Continue reading <span class="screen-reader-text">Extending MVCC to be serializable, in&#160;TLA+</span> <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[
<p>In the <a href="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/">previous blog post</a>, we saw how a transaction isolation strategy built on multi-version concurrency control (MVCC) does not implement the <em><a href="https://jepsen.io/consistency/models/serializable">serializable</a></em> isolation level. Instead, it implements a weaker isolation level called <em><a href="https://jepsen.io/consistency/models/snapshot-isolation">snapshot isolation</a></em>. In this post, I&#8217;ll discuss how that   MVCC model can be extended in order to achieve serializability, based on work published by <a href="https://www.linkedin.com/in/michaeljcahill/">Michael Cahill</a>, <a href="https://www.uweroehm.com/">Uwe Röhm</a>, and <a href="https://www.sydney.edu.au/engineering/about/our-people/academic-staff/alan-fekete.html">Alan Fekete</a>.</p>



<p>You can find the model I wrote in the <a href="https://github.com/lorin/snapshot-isolation-tla">https://github.com/lorin/snapshot-isolation-tla</a> repo, in the SSI module (<a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/SSI.tla">source</a>, <a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/SSI.pdf">pdf</a>).</p>



<h2 class="wp-block-heading">A quick note on conventions</h2>



<p>In this post, I denote read of x=1 as r[x,1]. This means a transaction read the object x which returned a value of 1. As I mentioned in the previous post, you can imagine a read as being the following SQL statement:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
SELECT v FROM obj WHERE k='x';
</pre></div>


<p>Similarly, I denote a write of y←2 as w[y,2]. This means a transaction wrote the object <em>y</em> with a value of 2. You can imagine this as:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
UPDATE obj SET v=2 WHERE k='y';
</pre></div>


<p>Finally, I&#8217;ll assume that there&#8217;s an initial transaction (T0) which sets the values of all of the objects to 0, and has committed before any other transaction starts.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image.png"><img width="799" height="105" data-attachment-id="5185" data-permalink="https://surfingcomplexity.blog/2024/11/03/extending-mvcc-to-be-serializable-in-tla/image-301/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image.png" data-orig-size="799,105" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image.png?w=799" src="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image.png?w=799" alt="" class="wp-image-5185" /></a><figcaption class="wp-element-caption">We assume this transaction always precedes all other transactions</figcaption></figure>



<h2 class="wp-block-heading">Background</h2>



<h3 class="wp-block-heading">The SQL isolation levels and phenomena</h3>



<p>The <a href="http://web.cecs.pdx.edu/~len/sql1999.pdf">ANSI/ISO SQL standard</a> defines four transaction isolation levels: read uncommitted, read committed, repeatable read, and serializable. The standard defines the isolation levels in terms of the <em>phenomena</em> they prevent. For example, the <em>dirty read</em> phenomenon is when one transaction reads a write done by a concurrent transaction that has not yet committed. Phenomena are dangerous because they may violate a software developer&#8217;s assumptions about how the database will behave, leading to software that behaves incorrectly.</p>



<h3 class="wp-block-heading">Problems with the standard and a new isolation level</h3>



<p><a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/tr-95-51.pdf">Berenson et al.</a> noted that the standard&#8217;s wording is ambiguous, and of the two possible interpretations of the definitions, one was incorrect (permitting invalid execution histories) and the other was overly strict (proscribing valid execution histories).</p>



<p>The overly strict definition implicitly assumed that concurrency control would be implemented using locking, and this ruled out valid implementations based on alternate schemes, in particular, multi-version concurrency control. They also proposed a new isolation level: <em>snapshot isolation</em>.</p>



<h3 class="wp-block-heading">Formalizing phenomena and anti-dependencies</h3>



<p>In his PhD dissertation work, <a href="http://pmg.csail.mit.edu/papers/adya-phd.pdf">Adya</a> introduced a new formalization for reasoning about transaction isolation. The formalism is based on a graph of direct dependencies between transactions. </p>



<p>One type of dependency Adya introduced is called an <em><strong>anti-dependency</strong></em>, which is critical to the difference between <em>snapshot isolation</em> and <em>serializable.</em></p>



<p>An anti-dependency between two concurrent transactions is when one read an object and the other writes the object with a different value, for example:</p>



<figure class="wp-block-image size-large is-resized"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-8.png"><img width="599" height="253" data-attachment-id="5198" data-permalink="https://surfingcomplexity.blog/2024/11/03/extending-mvcc-to-be-serializable-in-tla/image-309/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-8.png" data-orig-size="599,253" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-8.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-8.png?w=599" src="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-8.png?w=599" alt="" class="wp-image-5198" style="width:502px;height:auto" /></a></figure>



<p>T1 is said to have an <em>anti-dependency</em> on T2: T1 must come before T2 in a serialization:</p>



<figure class="wp-block-image size-large is-resized"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-9.png"><img width="747" height="404" data-attachment-id="5200" data-permalink="https://surfingcomplexity.blog/2024/11/03/extending-mvcc-to-be-serializable-in-tla/image-310/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-9.png" data-orig-size="747,404" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-9.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-9.png?w=747" src="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-9.png?w=747" alt="" class="wp-image-5200" style="width:619px;height:auto" /></a><figcaption class="wp-element-caption">If T2 is sequenced before T1, then the read will not match the most recent write. Therefore, T1 must come before T2.</figcaption></figure>



<p>In dependency graphs, anti-dependencies are labeled with <em><strong>rw</strong></em><strong> </strong>because the transaction which does the read must be sequenced before the transaction that does the write, as shown above.</p>



<p>Adya demonstrated that for an implementation that supports <em>snapshot isolation</em> to generate execution histories that are not <em>serializable</em>, there must be a cycle in the dependency graph that includes an anti-dependency.</p>



<h3 class="wp-block-heading">Non-serializable execution histories in snapshot isolation</h3>



<p>In the paper <em>Making Snapshot Isolation Serializable</em>, <a href="https://dsf.berkeley.edu/cs286/papers/ssi-tods2005.pdf">Fekete et al.</a> further narrowed the conditions under which snapshot isolation could lead to a non-serializable execution history, by proving the following theorem:</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>THEOREM 2.1. Suppose H is a multiversion history produced under Snapshot Isolation that is not serializable. Then there is at least one cycle in the serialization graph DSG(H), and we claim that in every cycle there are three consecutive transactions Ti.1, Ti.2, Ti.3 (where it is possible that Ti.1 and Ti.3 are the same transaction) such that Ti.1 and Ti.2 are concurrent, with an edge Ti.1 → Ti.2, and Ti.2 and Ti.3 are concurrent with an edge Ti.2 → Ti.3.</p>
</blockquote>



<p>They also note:</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>By Lemma 2.3, both concurrent edges whose existence is asserted must be anti-dependencies:Ti.1→ Ti.2 and Ti.2→ Ti.3.</p>
</blockquote>



<p>This means that one of the following two patterns must always be present in a snapshot isolation history that is not serializable:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-17.png"><img loading="lazy" width="1000" height="245" data-attachment-id="5227" data-permalink="https://surfingcomplexity.blog/2024/11/03/extending-mvcc-to-be-serializable-in-tla/image-318/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-17.png" data-orig-size="1000,245" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-17.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-17.png?w=1000" src="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-17.png?w=1000" alt="" class="wp-image-5227" /></a><figcaption class="wp-element-caption">Non-serializable snapshot isolation histories must contain one of these as subgraphs in the dependency graph</figcaption></figure>



<h3 class="wp-block-heading">Modifying MVCC to avoid non-serializable histories</h3>



<p><a href="https://courses.cs.washington.edu/courses/cse444/08au/544M/READING-LIST/fekete-sigmod2008.pdf">Cahill et al.</a> proposed a modification to MVCC that can dynamically identify potential problematic transactions that could lead to non-serializable histories, and abort them. By aborting these transactions, the resulting algorithm guarantees serializability. </p>



<p>As Fekete et al. proved, under snapshot isolation, cycles can only occur if there exists a transaction which contains an incoming anti-dependency edge and an outgoing anti-dependency edge, which they call <em>pivot transactions</em>.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-18.png"><img loading="lazy" width="1000" height="245" data-attachment-id="5228" data-permalink="https://surfingcomplexity.blog/2024/11/03/extending-mvcc-to-be-serializable-in-tla/image-319/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-18.png" data-orig-size="1000,245" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-18.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-18.png?w=1000" src="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-18.png?w=1000" alt="" class="wp-image-5228" /></a><figcaption class="wp-element-caption">Pivot transactions shown in red</figcaption></figure>



<p>Their approach is to identify and abort pivot transactions: if an active transaction contains both an outgoing and an incoming anti-dependency, the transaction is aborted. Note that this is a conservative algorithm: some of the transactions that it aborts may have still resulted in serializable execution histories. But it does guarantee serializability.</p>



<p>Their modification to MVCC involves some additional bookkeeping:</p>



<ol class="wp-block-list">
<li>Reads performed by each transaction</li>



<li>Which transactions have outgoing anti-dependencies</li>



<li>Which transactions have incoming anti-dependencies</li>
</ol>



<p>The tracking of reads is necessary to identify the presence of anti-dependencies, since an anti-dependency always involve a read (outgoing dependency edge) and a write (incoming dependency edge).</p>



<h2 class="wp-block-heading">Extending our MVCC TLA+ model for serializability</h2>



<h3 class="wp-block-heading">Adding variables</h3>



<p>I created a new module called <em>SSI</em>, which stands for <em>Serializable Snapshot Isolation</em>. I extended the MVCC model to add three variables to implement the additional bookkeeping required by the Cahill et al. algorithm. MVCC already tracks which objects are written by each transaction, but we need to now also track reads. </p>



<ul class="wp-block-list">
<li><em>rds </em>&#8211; which objects are read by which transactions</li>



<li><em>outc</em> &#8211; set of transactions that have outbound anti-dependencies</li>



<li><em>inc</em> &#8211; set of transactions that have inbound anti-dependencies</li>
</ul>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-19.png"><img loading="lazy" width="552" height="250" data-attachment-id="5231" data-permalink="https://surfingcomplexity.blog/2024/11/03/extending-mvcc-to-be-serializable-in-tla/image-320/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-19.png" data-orig-size="552,250" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-19.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-19.png?w=552" src="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-19.png?w=552" alt="" class="wp-image-5231" /></a></figure>



<p>TLA+ is untyped (unless you&#8217;re using <a href="https://apalache-mc.org/docs/adr/002adr-types.html">Apalache</a>), but we can represent type information by defining a type invariant (above, called <em>TypeOkS</em>). Defining this is useful both for the reader, and because we can check that this holds with the TLC model checker.</p>



<h3 class="wp-block-heading">Changes in behavior: new abort opportunities</h3>



<p>Here&#8217;s how the <em>Next</em> action in MVCC compares to the equivalent in SSI. </p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-21.png"><img loading="lazy" width="950" height="375" data-attachment-id="5235" data-permalink="https://surfingcomplexity.blog/2024/11/03/extending-mvcc-to-be-serializable-in-tla/image-322/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-21.png" data-orig-size="950,375" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-21.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-21.png?w=950" src="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-21.png?w=950" alt="" class="wp-image-5235" /></a></figure>



<p>Note: Because extending the MVCC module brings all of the MVCC names into scope, I had to create new names for each of the equivalent actions in SSI, I did this by appending an <strong>S</strong>  (e.g., StartTransaction<strong>S</strong>, DeadlockDetection<strong>S).</strong> </p>



<p>In our original MVCC implementation, reads and commits always succeeded. Now, it&#8217;s possible for an attempted read or an attempted to commit to result in aborts as well, so we needed an action for this, which I called <em>AbortRdS</em><strong><em>. </em></strong></p>



<p>Commits can now also fail, so instead of having a single-step <em>Commit</em> action, we now have a <em>BeginCommit</em> action, which will complete successfully by an EndCommit action, or fail with an abort by the <em>AbortCommit</em> action. Writes can also now abort due to the potential for introducing pivot transactions.</p>



<h3 class="wp-block-heading">Finding aborts with the model checker</h3>



<p>Here&#8217;s how I used the TLC model checker to generate witnesses of the new abort behaviors:</p>



<h3 class="wp-block-heading">Aborted reads</h3>



<p>To get the model checker to generate a trace for an aborted read, I defined the following invariant in the MCSSI.tla file:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-2.png"><img loading="lazy" width="382" height="121" data-attachment-id="5189" data-permalink="https://surfingcomplexity.blog/2024/11/03/extending-mvcc-to-be-serializable-in-tla/image-303/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-2.png" data-orig-size="382,121" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-2.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-2.png?w=382" src="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-2.png?w=382" alt="" class="wp-image-5189" /></a></figure>



<p>Then I specified it as an invariant to check in the model checker in the MCSSI.cfg file:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
INVARIANT 
    NeverAbortsRead
</pre></div>


<p>Because aborted reads can, indeed, happen, the model checker returned an error, with the  following error trace:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-26.png"><img loading="lazy" width="355" height="644" data-attachment-id="5243" data-permalink="https://surfingcomplexity.blog/2024/11/03/extending-mvcc-to-be-serializable-in-tla/image-327/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-26.png" data-orig-size="355,644" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-26.png?w=165" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-26.png?w=355" src="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-26.png?w=355" alt="" class="wp-image-5243" /></a></figure>



<p>The resulting trace looks like this, with the red arrows indicating the anti-dependencies.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-25.png"><img loading="lazy" width="893" height="245" data-attachment-id="5242" data-permalink="https://surfingcomplexity.blog/2024/11/03/extending-mvcc-to-be-serializable-in-tla/image-326/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-25.png" data-orig-size="893,245" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-25.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-25.png?w=893" src="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-25.png?w=893" alt="" class="wp-image-5242" /></a></figure>



<h3 class="wp-block-heading">Aborted commit</h3>



<p>Similarly, we can use the model checker to identify scenarios where it a commit would fail, by specifying the following invariant:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-24.png"><img loading="lazy" width="254" height="81" data-attachment-id="5240" data-permalink="https://surfingcomplexity.blog/2024/11/03/extending-mvcc-to-be-serializable-in-tla/image-325/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-24.png" data-orig-size="254,81" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-24.png?w=254" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-24.png?w=254" src="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-24.png?w=254" alt="" class="wp-image-5240" /></a></figure>



<p>The checker finds the following violation of that invariant:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-23.png"><img loading="lazy" width="332" height="596" data-attachment-id="5238" data-permalink="https://surfingcomplexity.blog/2024/11/03/extending-mvcc-to-be-serializable-in-tla/image-324/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-23.png" data-orig-size="332,596" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-23.png?w=167" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-23.png?w=332" src="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-23.png?w=332" alt="" class="wp-image-5238" /></a></figure>



<p>While T2 is in the process of committing, T1 performs a read which turns T2 into a pivot transaction. This results in T2 aborting. </p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-22.png"><img loading="lazy" width="720" height="237" data-attachment-id="5236" data-permalink="https://surfingcomplexity.blog/2024/11/03/extending-mvcc-to-be-serializable-in-tla/image-323/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-22.png" data-orig-size="720,237" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-22.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-22.png?w=720" src="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-22.png?w=720" alt="" class="wp-image-5236" /></a></figure>



<h3 class="wp-block-heading">Checking serializability using refinement mapping</h3>



<p>Just like we did previously with MVCC, we can define a refinement mapping from our SSI spec to our Serializability spec. You can find it in the SSIRefinement module (<a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/SSIRefinement.tla">source</a>, <a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/SSIRefinement.pdf">pdf</a>). It&#8217;s almost identical to the MVCCRefinement module (<a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/MVCCRefinement.tla">source</a>, <a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/MVCCRefinement.pdf">pdf</a>), with some minor modifications to handle the new abort scenarios. </p>



<p>The main difference is that now the refinement mapping should actually hold, because SSI  ensures serializability! I wasn&#8217;t able to find a counterexample when I ran the model checker against the refinement mapping, so that gave me some confidence in my model. Of course, that doesn&#8217;t <em>prove</em> that my implementation is correct. But it&#8217;s good enough for a learning exercise.</p>



<h2 class="wp-block-heading">Coda: on extending TLA+ specifications</h2>



<p>Serializable Snapshot Isolation provides us with a nice example of when we can extend an existing specification rather than create a new one from scratch. </p>



<p>Even so, it&#8217;s still a fair amount of work to extend an existing specification. I suspect it would have been less work to take a copy-paste-and-modify approach rather than extending it. Still, I found it a useful exercise in learning how to modify a specification by extending it. </p>
]]></content:encoded>
					
					<wfw:commentRss>https://surfingcomplexity.blog/2024/11/03/extending-mvcc-to-be-serializable-in-tla/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		
		<media:content url="https://0.gravatar.com/avatar/f2641f12e815a54896f8f2ac04660c52efb896e09131390ad2a6f2f5fca81432?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">lorinh</media:title>
		</media:content>

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image.png?w=799" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-8.png?w=599" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-9.png?w=747" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-17.png?w=1000" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-18.png?w=1000" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-19.png?w=552" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-21.png?w=950" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-2.png?w=382" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-26.png?w=355" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-25.png?w=893" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-24.png?w=254" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-23.png?w=332" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/11/image-22.png?w=720" medium="image" />
	</item>
		<item>
		<title>Multi-version concurrency control in TLA+</title>
		<link>https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/</link>
					<comments>https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/#comments</comments>
		
		<dc:creator><![CDATA[Lorin Hochstein]]></dc:creator>
		<pubDate>Fri, 01 Nov 2024 06:04:03 +0000</pubDate>
				<category><![CDATA[formal methods]]></category>
		<category><![CDATA[tlaplus]]></category>
		<guid isPermaLink="false">http://surfingcomplexity.blog/?p=5038</guid>

					<description><![CDATA[In a previous blog post, I talked about how we can use TLA+ to specify the serializability isolation level. In this post, we&#8217;ll see how we can use TLA+ to describe multi-version concurrency control (MVCC), which is a strategy for implementing transaction isolation. Postgres and MySQL both use MVCC to implement their repeatable read isolation &#8230; <a href="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/" class="more-link">Continue reading <span class="screen-reader-text">Multi-version concurrency control in&#160;TLA+</span> <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[
<p>In a previous blog post, I talked about how we can <a href="/2024/10/28/serializability-and-tla/">use TLA+ to specify the serializability isolation level</a>. In this post, we&#8217;ll see how we can use TLA+ to describe multi-version concurrency control (MVCC), which is a strategy for implementing transaction isolation. Postgres and MySQL both use MVCC to implement their <em>repeatable read</em> isolation levels, as well as <a href="https://en.wikipedia.org/wiki/List_of_databases_using_MVCC"> a host of other databases</a>. </p>



<p>MVCC is described as an <em>optimistic</em> strategy because it doesn&#8217;t require the use of locks, which reduces overhead. However, as we&#8217;ll see, MVCC implementations aren&#8217;t capable of achieving serializability.</p>



<p>All my specifications are in <a href="https://github.com/lorin/snapshot-isolation-tla">https://github.com/lorin/snapshot-isolation-tla</a>.</p>



<h2 class="wp-block-heading">Modeling MVCC in TLA+</h2>



<h3 class="wp-block-heading">Externally visible variables</h3>



<p>We use a similar scheme as we did previously for modeling the externally visible variables. The only difference now is that we are also going to model the &#8220;start transaction&#8221; operation:</p>



<figure class="wp-block-table"><table class="has-fixed-layout"><thead><tr><th>Variable name</th><th>Description</th></tr></thead><tbody><tr><td><em>op</em></td><td>the operation (start transaction, read, write, commit, abort), modeled as a single letter: {&#8220;s&#8221;, “r”, “w”, “c”, “a”} )</td></tr><tr><td><em>arg</em></td><td>the argument(s) to the operation</td></tr><tr><td><em>rval</em></td><td>the return value of the operation</td></tr><tr><td><em>tr</em></td><td>the transaction executing the operation</td></tr></tbody></table></figure>



<h3 class="wp-block-heading">The constant sets</h3>



<p>There are three constant sets in our model:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-78.png"><img loading="lazy" width="183" height="31" data-attachment-id="5118" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-275/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-78.png" data-orig-size="183,31" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-78.png?w=183" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-78.png?w=183" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-78.png?w=183" alt="" class="wp-image-5118" /></a></figure>



<ul class="wp-block-list">
<li>Obj &#8211; the set of objects (x, y,&#8230;)</li>



<li>Val &#8211; the set of values that the objects can take on (e.g., 0,1,2,&#8230;)</li>



<li>Tr &#8211; the set of transactions (T0, T1, T2, &#8230;)</li>
</ul>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-79.png"><img loading="lazy" width="1008" height="1024" data-attachment-id="5120" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-276/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-79.png" data-orig-size="1047,1064" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-79.png?w=295" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-79.png?w=1008" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-79.png?w=1008" alt="" class="wp-image-5120" /></a></figure>



<p>I associate the initial state of the database with a previously committed transaction T0 so that I don&#8217;t have to treat the initial values of the database as a special case.</p>



<h3 class="wp-block-heading">The multiversion database</h3>



<p>In MVCC, there can be multiple versions of each object, meaning that it stores multiple values associated with each object. Each of these versions is also has information on which transaction created it.</p>



<p>I modeled the database in TLA+ as a variable named <em>db</em>, here is an invariant that shows  the values that <em>db</em> can take on:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-76.png"><img loading="lazy" width="341" height="43" data-attachment-id="5114" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-273/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-76.png" data-orig-size="341,43" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-76.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-76.png?w=341" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-76.png?w=341" alt="" class="wp-image-5114" /></a></figure>



<p>It&#8217;s a function that maps objects to a set of version records. Each version record is associated with a value and a transaction. Here&#8217;s an example of a  valid value for <em>db</em>:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-81.png"><img loading="lazy" width="960" height="1024" data-attachment-id="5123" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-278/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-81.png" data-orig-size="1110,1184" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-81.png?w=281" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-81.png?w=960" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-81.png?w=960" alt="" class="wp-image-5123" /></a><figcaption class="wp-element-caption">Example <em>db</em> where Obj={x,y}</figcaption></figure>



<h2 class="wp-block-heading">Playing the home game with Postgres</h2>



<p>Postgres&#8217;s behavior when you specify <em>repeatable read</em> isolation level appears to be consistent with the MVCC TLA+ model I wrote so I&#8217;ll use it to illustrate some how these implementation details play out. As Peter Alvaro and Kyle Kingsbury note in their <a href="https://jepsen.io/analyses/mysql-8.0.34">Jepsen analysis of MySQL 8.0.34</a>, Postgres&#8217;s <em>repeatable read</em> isolation level actually implements <em>snapshot isolation</em>, while MySQL&#8217;s <em>repeatable read</em> isolation level actually implements &#8230;. um &#8230; well, I suggest you read the analysis. </p>



<p>I created a Postgres database named <em>tla</em>. Because  <a href="https://www.postgresql.org/docs/current/runtime-config-client.html#GUC-DEFAULT-TRANSACTION-ISOLATION">Postgres defaults to <em>read committed</em></a>, I changed the default to repeatable read on my database so that it would behave more like my model. </p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: sql; title: ; notranslate">
ALTER DATABASE tla SET default_transaction_isolation TO 'repeatable read';

create table obj (
    k char(1) primary key,
    v int
);

insert into obj (k,v) values ('x', 0), ('y', 0);
</pre></div>


<h2 class="wp-block-heading">Starting a transaction: id and visibility</h2>



<p>In MVCC, each transaction gets assigned a unique id, and ids increase monotonically. </p>



<h3 class="wp-block-heading">Transaction id: tid</h3>



<p>I modeled this with a function <em>tid</em> that maps transactions to natural numbers. I use a special value called <em>None</em> for the transaction id for transactions who have not started yet.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-82.png"><img loading="lazy" width="189" height="28" data-attachment-id="5125" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-279/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-82.png" data-orig-size="189,28" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-82.png?w=189" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-82.png?w=189" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-82.png?w=189" alt="" class="wp-image-5125" /></a></figure>



<p>When a transaction starts, I assign it an id by finding the largest transaction id assigned so far (<em>mxid)</em>, and then adding 1. This isn&#8217;t efficient, but for a TLA+ spec it works quite nicely:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-84.png"><img loading="lazy" width="294" height="102" data-attachment-id="5127" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-281/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-84.png" data-orig-size="294,102" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-84.png?w=294" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-84.png?w=294" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-84.png?w=294" alt="" class="wp-image-5127" /></a></figure>



<p>In Postgres, you can get the ID of the current transaction by using the <a href="https://www.postgresql.org/docs/current/functions-info.html#FUNCTIONS-INFO-SNAPSHOT">pg_current_xact_id</a> function. For examplle:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
$ psql tla
psql (17.0 (Homebrew))
Type "help" for help.

tla=# begin;
BEGIN
tla=*# select pg_current_xact_id();
 pg_current_xact_id
--------------------
                822
(1 row)

</pre></div>


<h3 class="wp-block-heading">Visible transactions: vis</h3>



<p>We want each transaction to behave as if it is acting against a <em>snapshot</em> of the database from when the transaction started.</p>



<p>We can implement this in MVCC by identifying the set of transactions that have previously committed, and ensuring that our queries only read from writes done by these transactions.</p>



<p>I modeled this with a function called <em>vis</em> which maps each transaction to a set of other transactions. We also want our own writes to be visible, so we include the transaction being started in the set of visible transactions:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-85.png"><img loading="lazy" width="315" height="175" data-attachment-id="5132" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-282/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-85.png" data-orig-size="315,175" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-85.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-85.png?w=315" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-85.png?w=315" alt="" class="wp-image-5132" /></a></figure>



<p>For each snapshot, Postgres tracks the set of committed transactions using <a href="https://github.com/postgres/postgres/blob/REL_17_0/src/include/utils/snapshot.h#L157-L168">three variables</a>:</p>



<ol class="wp-block-list">
<li>xmin &#8211; the lowest transaction id associated with an active transaction</li>



<li>xmax &#8211; (the highest transaction id associated with a committed transaction) + 1</li>



<li>xip_list &#8211; the list of active transactions whose ids are less than xmax</li>
</ol>



<p>In Postgres, you can use the <em><a href="https://www.postgresql.org/docs/current/functions-info.html#FUNCTIONS-INFO-SNAPSHOT">pg_current_snapshot</a></em> function, which returns xmin:xmax:xip_list:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
tla=# SELECT pg_current_snapshot();
 pg_current_snapshot
---------------------
 825:829:825,827
</pre></div>


<p>Here&#8217;s a visualization of this scenario:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-86.png"><img loading="lazy" width="1024" height="345" data-attachment-id="5134" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-283/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-86.png" data-orig-size="1264,427" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-86.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-86.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-86.png?w=1024" alt="" class="wp-image-5134" /></a></figure>



<p>These three variables are sufficient to determine whether a particular version is visible. For more on the output of pg_current_snapshot, check out the <a href="https://wiki.postgresql.org/wiki/Operations_cheat_sheet">Postgres operations cheat sheet wiki</a>. </p>



<h2 class="wp-block-heading">Performing reads</h2>



<p>A transaction does a read using the <em>Get(t, obj)</em> operator. This operator retrieves the visible version with the largest transaction id:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-89.png"><img loading="lazy" width="669" height="243" data-attachment-id="5139" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-286/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-89.png" data-orig-size="669,243" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-89.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-89.png?w=669" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-89.png?w=669" alt="" class="wp-image-5139" /></a></figure>



<h2 class="wp-block-heading">Performing writes</h2>



<p>Writes are straightforward, they simply add new versions to <em>db</em>. However, if a transaction did a previous write, that previous write has to be removed. Here&#8217;s part of the action that writes <em>obj</em> with value <em>val</em> for transaction <em>t</em>:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-90.png"><img loading="lazy" width="501" height="147" data-attachment-id="5143" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-287/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-90.png" data-orig-size="501,147" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-90.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-90.png?w=501" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-90.png?w=501" alt="" class="wp-image-5143" /></a></figure>



<h2 class="wp-block-heading">The lost update problem and how MVCC prevents it</h2>



<p>Consider the following pair of transactions. They each write the same value and then commit.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-67.png"><img loading="lazy" width="615" height="255" data-attachment-id="5090" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-264/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-67.png" data-orig-size="615,255" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-67.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-67.png?w=615" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-67.png?w=615" alt="" class="wp-image-5090" /></a><figcaption class="wp-element-caption">A serializable execution history</figcaption></figure>



<p>This is a serializable history. It actually has two possible serializations: T1,T2 or T2,T1</p>



<p>Now let&#8217;s consider another history where each transaction does a read first. </p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-68.png"><img loading="lazy" width="615" height="255" data-attachment-id="5093" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-265/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-68.png" data-orig-size="615,255" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-68.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-68.png?w=615" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-68.png?w=615" alt="" class="wp-image-5093" /></a><figcaption class="wp-element-caption">A non-serializable execution history</figcaption></figure>



<p>This execution history isn&#8217;t serializable anymore. If you try to sequence these, the second read will read <em>2</em> where it should read <em>3</em> due to the previous write.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-69.png"><img loading="lazy" width="796" height="193" data-attachment-id="5095" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-266/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-69.png" data-orig-size="796,193" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-69.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-69.png?w=796" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-69.png?w=796" alt="" class="wp-image-5095" /></a><figcaption class="wp-element-caption">Serializability is violated: the read returns 2 instead of 3</figcaption></figure>



<p>This is referred to as the <em>lost update</em> problem. </p>



<p>Here&#8217;s a concrete example of the lost update problem. Imagine you&#8217;re using a record as a counter: you read the value, increment the result by one, and then write it back.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: sql; title: ; notranslate">
SELECT v FROM obj WHERE k='x';
-- returns 3
UPDATE obj set v=4 WHERE k='x';
</pre></div>


<p>Now imagine these two transactions run concurrently. If neither sees the other&#8217;s write, then one of these increments will be lost: you will have missed a count!</p>



<p>MVCC can guard against this by preventing two concurrent transactions from writing to the same object. If transaction T1 has written to a record in an active transaction, and T2 tries to write to the same record, then the database will block T2 until T1 either commits or aborts. If the first transaction commits, the database will abort the second transaction. </p>



<p>You can confirm this behavior in Postgres, where you&#8217;ll get an error if you try to write to a record that has previously been written to by a transaction that was active and then committed:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
$ psql tla
psql (17.0 (Homebrew))
Type "help" for help.

tla=# begin;
BEGIN
tla=*# update obj set v=1 where k='x';
ERROR:  could not serialize access due to concurrent update
tla=!#

</pre></div>


<p>Interestingly, MySQL&#8217;s MVCC implementation <a href="https://jepsen.io/analyses/mysql-8.0.34">does not prevent lost updates</a>(!!!). You can confirm this yourself. </p>



<h3 class="wp-block-heading">Implementing this in our model</h3>



<p>In our model, a write is implemented by two actions:</p>



<ol class="wp-block-list">
<li>BeginWr(t, obj, val)  &#8211; the initial write request</li>



<li>EndWr(t, obj, val) &#8211; the successful completion of the write</li>
</ol>



<p>We do not allow the EndWr action to fire if:</p>



<ol class="wp-block-list">
<li>There is an active transaction that has written to the same object (here we want to wait until the other transaction commits or aborts)</li>



<li>There is a commit to the same object by a concurrent transaction (here we want to abort)</li>
</ol>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-92.png"><img loading="lazy" width="691" height="374" data-attachment-id="5151" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-289/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-92.png" data-orig-size="691,374" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-92.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-92.png?w=691" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-92.png?w=691" alt="" class="wp-image-5151" /></a></figure>



<p>We also have an action named <em>AbortWr</em> that aborts if a write conflict occurs.</p>



<h2 class="wp-block-heading">Deadlock!</h2>



<p>There&#8217;s one problem with the approach above where we block on a concurrent write: the risk of deadlock. Here&#8217;s what happens when we run our model with the TLC model checker:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-93.png"><img loading="lazy" width="408" height="546" data-attachment-id="5152" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-290/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-93.png" data-orig-size="408,546" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-93.png?w=224" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-93.png?w=408" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-93.png?w=408" alt="" class="wp-image-5152" /></a></figure>



<p>Here&#8217;s a diagram of this execution history:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-94.png"><img loading="lazy" width="952" height="423" data-attachment-id="5154" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-291/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-94.png" data-orig-size="952,423" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-94.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-94.png?w=952" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-94.png?w=952" alt="" class="wp-image-5154" /></a></figure>



<p>The problem is that T1 wrote x first and T2 wrote y first, and then T1 got blocked trying to write y and  T2 got blocked trying to write x.  (Note that even though T1 started to write y before T2, T2 completed the write first).</p>



<p>We can deal with this problem by detecting deadlocks and aborting the affected transactions when they happen. We can detect deadlock by creating a graph of dependencies between transactions (just like in the diagram above!) and then look for cycles:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-95.png"><img loading="lazy" width="610" height="324" data-attachment-id="5156" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-292/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-95.png" data-orig-size="610,324" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-95.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-95.png?w=610" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-95.png?w=610" alt="" class="wp-image-5156" /></a></figure>



<p>Here <em>TC</em> stands for transitive closure, which is a useful relation when you want to <a href="/2017/10/16/the-tortoise-and-the-hare-in-tla/">find cycles</a>. I used one of the transitive closure implementations in the <a href="https://github.com/tlaplus/Examples/blob/master/specifications/TransitiveClosure/TransitiveClosure.tla">TLA+ examples repo</a>.</p>



<h2 class="wp-block-heading">Top-level of the specification</h2>



<p>Here&#8217;s a top-level view of the specification, you can find the full MVCC specification in the repo (<a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/MVCC.tla">source</a>, <a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/MVCC.pdf">pdf</a>):</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-96.png"><img loading="lazy" width="386" height="377" data-attachment-id="5158" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-293/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-96.png" data-orig-size="386,377" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-96.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-96.png?w=386" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-96.png?w=386" alt="" class="wp-image-5158" /></a></figure>



<p>Note how reads and writes have begin/end pairs. In addition, a BeginWr can end in an AbortWr if there&#8217;s a conflict or deadlock as discussed earlier.</p>



<p>For liveness, we can use weak fairness to ensure that read/write operations complete, transactions start, and that deadlock is detected. But for commit and abort, we need strong fairness, because we can have infinite sequences of BeginRd/EndRd pairs or BeginWr/EndWr pairs and Commit and Abort are not enabled in the middle of reads or writes. </p>



<h2 class="wp-block-heading">My MVCC spec isn&#8217;t serializable</h2>



<p>Now that we have an MVCC spec, we can check to see if implements our Serializable spec. In order to do that check, we&#8217;ll need to do a refinement mapping from MVCC to Serializable.</p>



<p>One challenge is that the initial state of the Serializable specification establishes the fate of all of the transactions and what their environments are going to be in the future:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-97.png"><img loading="lazy" width="601" height="233" data-attachment-id="5161" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-294/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-97.png" data-orig-size="601,233" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-97.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-97.png?w=601" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-97.png?w=601" alt="" class="wp-image-5161" /></a><figcaption class="wp-element-caption">The Init state for the Serializable spec</figcaption></figure>



<h3 class="wp-block-heading">Adding a delay to the Serializability spec</h3>



<p>In our MVCC spec, we don&#8217;t know in advance if a transaction will commit or abort. We could use <a href="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/">prophecy variables</a> in our refinement mapping to predict these values, but I didn&#8217;t want to do that.</p>



<p>What I did instead was to create a new specification, SerializabilityD (<a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/SerializabilityD.tla">source</a>, <a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/SerializabilityD.pdf">pdf</a>), that delays these predictions until the second step of the behavior:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-98.png"><img loading="lazy" width="688" height="673" data-attachment-id="5165" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-295/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-98.png" data-orig-size="688,673" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-98.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-98.png?w=688" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-98.png?w=688" alt="" class="wp-image-5165" /></a></figure>



<p>I could then do a refinement mapping MVCC ⇒ SerializabilityD without having to use prophecy variables.</p>



<h3 class="wp-block-heading">Verifying that SerializabilityD actually implements Serializability</h3>



<p>Note that it&#8217;s straightforward to do the SerializabilityD ⇒ Serializability refinement mapping with prophecy variables. You can find it in SerializabilityDRefinement (<a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/SerializabilityDRefinement.tla">source</a>, <a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/SerializabilityDRefinement.pdf">pdf</a>):</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-99.png"><img loading="lazy" width="683" height="827" data-attachment-id="5167" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-296/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-99.png" data-orig-size="683,827" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-99.png?w=248" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-99.png?w=683" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-99.png?w=683" alt="" class="wp-image-5167" /></a></figure>



<h3 class="wp-block-heading">The MVCC ⇒ SerializabilityD mapping</h3>



<p>The MVCC ⇒ SerializabilityD refinement mapping is in the MVCCRefinement spec (<a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/MVCCRefinement.tla">source</a>, <a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/MVCCRefinement.pdf">pdf</a>).</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-101.png"><img loading="lazy" width="1024" height="496" data-attachment-id="5172" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-298/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-101.png" data-orig-size="2580,1251" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-101.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-101.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-101.png?w=1024" alt="" class="wp-image-5172" /></a></figure>



<p>The general strategy here is:</p>



<ol class="wp-block-list">
<li>Execute MVCC until all of the transactions complete, keeping an execution history. </li>



<li>Use the results of the MVCC execution to populate the SerializabilityD variables</li>



<li>Step through the recorded MVCC execution history one operation at a time</li>
</ol>



<p>The tricky part is step 2, because we need to find a serialization.</p>



<h3 class="wp-block-heading">Attempting to find a serialization</h3>



<p>Once we have an MVCC execution history, we can try to find a serialization. Here&#8217;s the relevant part of the <em>SetFate</em> action that attempts to select the <em>to</em> and <em>benv</em> variables from Serializability that will satisfy serializability:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-102.png"><img loading="lazy" width="607" height="260" data-attachment-id="5174" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-299/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-102.png" data-orig-size="607,260" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-102.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-102.png?w=607" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-102.png?w=607" alt="" class="wp-image-5174" /></a></figure>



<h3 class="wp-block-heading">Checking the refinement mapping</h3>



<p>The problem with the refinement mapping is that we cannot always find a serialization. If we try to model check the refinement mapping, TLC will error because it is trying to CHOOSE from an empty set. </p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/error-trace-1.png"><img loading="lazy" width="410" height="585" data-attachment-id="5100" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/error-trace-3/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/error-trace-1.png" data-orig-size="410,585" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="error-trace" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/error-trace-1.png?w=210" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/error-trace-1.png?w=410" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/error-trace-1.png?w=410" alt="" class="wp-image-5100" /></a></figure>



<p>This MVCC execution history is a classic example of what&#8217;s called <em>write skew</em>. Here&#8217;s a visual depiction of this behavior:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-71.png"><img loading="lazy" width="1024" height="245" data-attachment-id="5098" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-268/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-71.png" data-orig-size="1259,302" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-71.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-71.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-71.png?w=1024" alt="" class="wp-image-5098" /></a><figcaption class="wp-element-caption">A non-serializable execution history that is permitted by MVCC</figcaption></figure>



<p>Neither T1,T2 nor T2,t1 is a valid serialization of this execution history:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-74.png"><img loading="lazy" width="1024" height="556" data-attachment-id="5103" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-271/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-74.png" data-orig-size="1039,565" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-74.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-74.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-74.png?w=1024" alt="" class="wp-image-5103" /></a><figcaption class="wp-element-caption">If we sequence T1 first, then the r[y,0] read violates the serialization. If we sequence T2 first, then the r[x,0] read violates it.</figcaption></figure>



<p>These constraints are what Adya calls anti-dependencies. He uses the abbreviation <em>rw</em> for short, because the dependency is created by a write from one transaction clobbering a read done by the other transaction, so the write has to be sequenced after the read. </p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-88.png"><img loading="lazy" width="1024" height="381" data-attachment-id="5138" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-285/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-88.png" data-orig-size="1259,469" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-88.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-88.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-88.png?w=1024" alt="" class="wp-image-5138" /></a></figure>



<p>Because snapshot isolation does not enforce anti-dependencies, it generates histories that are not serializable, which means that MVCC does not implement the Serializability spec.</p>



<h2 class="wp-block-heading">Coda</h2>



<p>I found this exercise very useful in learning more about how MVCC works. I had a hard time finding a good source to explain the concepts in enough detail for me to implement it, without having to read through actual implementations like Postgres, which has way too much detail. One useful resource I found was <a href="https://faculty.cc.gatech.edu/~jarulraj/courses/8803-s21/slides/16-multi-version-concurrency-control.pdf">these slides on MVCC</a> by <a href="https://faculty.cc.gatech.edu/~jarulraj/">Joy Arulraj</a> at Georgia Tech. But even here, they didn&#8217;t have quite enough detail, and my model isn&#8217;t quite identical. But it was enough to help me get started.</p>



<p>I also enjoyed using refinement mapping to do validation. In the end, these were the refinement mappings I defined:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-103.png"><img loading="lazy" width="1024" height="457" data-attachment-id="5175" data-permalink="https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/image-300/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-103.png" data-orig-size="2139,955" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-103.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-103.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-103.png?w=1024" alt="" class="wp-image-5175" /></a></figure>



<p>I&#8217;d encourage you to try out TLA+, but it really helps if you have some explicit system in mind you want to model. I&#8217;ve found it very useful for deepening my understanding of <a href="https://jepsen.io/consistency">consistency models</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://surfingcomplexity.blog/2024/10/31/multi-version-concurrency-control-in-tla/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
		
		<media:content url="https://0.gravatar.com/avatar/f2641f12e815a54896f8f2ac04660c52efb896e09131390ad2a6f2f5fca81432?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">lorinh</media:title>
		</media:content>

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-78.png?w=183" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-79.png?w=1008" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-76.png?w=341" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-81.png?w=960" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-82.png?w=189" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-84.png?w=294" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-85.png?w=315" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-86.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-89.png?w=669" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-90.png?w=501" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-67.png?w=615" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-68.png?w=615" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-69.png?w=796" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-92.png?w=691" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-93.png?w=408" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-94.png?w=952" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-95.png?w=610" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-96.png?w=386" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-97.png?w=601" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-98.png?w=688" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-99.png?w=683" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-101.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-102.png?w=607" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/error-trace-1.png?w=410" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-71.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-74.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-88.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-103.png?w=1024" medium="image" />
	</item>
		<item>
		<title>The carefulness knob</title>
		<link>https://surfingcomplexity.blog/2024/10/29/the-carefulness-knob/</link>
					<comments>https://surfingcomplexity.blog/2024/10/29/the-carefulness-knob/#comments</comments>
		
		<dc:creator><![CDATA[Lorin Hochstein]]></dc:creator>
		<pubDate>Wed, 30 Oct 2024 03:58:11 +0000</pubDate>
				<category><![CDATA[incidents]]></category>
		<category><![CDATA[systems]]></category>
		<category><![CDATA[work]]></category>
		<guid isPermaLink="false">http://surfingcomplexity.blog/?p=5059</guid>

					<description><![CDATA[A play in one act Dramatis personae Scene 1: A meeting room in an office. The walls are adorned with whiteboards with boxes and arrows. EM: So, do you think the team will be able to finish all of these features by end of the Q2? TL: Well, it might be a bit tight, but &#8230; <a href="https://surfingcomplexity.blog/2024/10/29/the-carefulness-knob/" class="more-link">Continue reading <span class="screen-reader-text">The carefulness knob</span> <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading">A play in one act</h2>



<p><strong>Dramatis personae</strong></p>



<figure class="wp-block-image size-large is-resized"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-66.png"><img loading="lazy" width="1024" height="450" data-attachment-id="5080" data-permalink="https://surfingcomplexity.blog/2024/10/29/the-carefulness-knob/image-263/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-66.png" data-orig-size="1240,546" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-66.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-66.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-66.png?w=1024" alt="" class="wp-image-5080" style="width:488px;height:auto" /></a></figure>



<ul class="wp-block-list">
<li>EM, an engineering manager</li>



<li>TL, the tech lead for the team</li>



<li>X, an engineering manager from a different team</li>
</ul>



<p><strong>Scene 1: </strong>A meeting room in an office. The walls are adorned with whiteboards with boxes and arrows.</p>



<p>EM: So, do you think the team will be able to finish all of these features by end of the Q2?</p>



<p>TL: Well, it might be a bit tight, but I think it should be possible, depending on where we set the carefulness knob.</p>



<p>EM: What&#8217;s the carefulness knob?</p>



<p>TL: You know, the carefulness knob! This thing. </p>



<p><em>TL leans over and picks a small box off of the floor and places it on the table. The box has a knob on it with numerical markings.</em></p>



<figure class="wp-block-image size-large is-resized"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-60.png"><img loading="lazy" width="835" height="792" data-attachment-id="5067" data-permalink="https://surfingcomplexity.blog/2024/10/29/the-carefulness-knob/image-257/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-60.png" data-orig-size="835,792" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-60.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-60.png?w=835" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-60.png?w=835" alt="" class="wp-image-5067" style="width:482px;height:auto" /></a></figure>



<p>EM: I&#8217;ve never seen that before. I have no idea what it is.</p>



<p>TL: As the team does development, we have to make decisions about how much effort to spend on testing, how closely to hew to explicitly documented processes, that sort of thing. </p>



<p>EM: Wait, aren&#8217;t you, like, careful all of the time? You&#8217;re responsible professionals, aren&#8217;t you? </p>



<p>TL: Well, we try our best to allocate our effort based on what we estimate the risk to be. I mean, we&#8217;re a lot more careful when we do a database migration than we do when we fix a typo in the readme file! </p>



<p>EM: So&#8230; um&#8230; how good are you at actually estimating risk? Wasn&#8217;t that incident that happened a few weeks ago related to a change that was considered a low risk at the time?</p>



<p>TL: I mean, we&#8217;re pretty good. But we&#8217;re definitely not perfect. It certainly happens that we misjudge the risk sometimes. I mean, in some sense, isn&#8217;t every incident in some sense a misjudgment of risk? How many times do we really say, &#8220;Hoo boy, this thing I&#8217;m doing is really risky, we&#8217;re probably going to have an incident!&#8221; Not many.</p>



<p>EM: OK, so let&#8217;s turn that carefulness knob up to the max, to make sure that the team is careful as possible. I don&#8217;t want any incidents!</p>



<p>LM: Sounds good to me! Of course, this means that we almost certainly won&#8217;t have these features done by the end of Q2, but I&#8217;m sure that the team will be happy to hear&#8230;</p>



<p>EM: What, why???</p>



<p><em>TL picks up a marker off of the table and walks up to the whiteboard</em>.<em> She draws an x axis and y-axis</em>. <em>She labels the x-axis &#8220;carefulness&#8221; and the y-axis &#8220;estimated completion time&#8221;.</em> </p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-62.png"><img loading="lazy" width="1024" height="759" data-attachment-id="5071" data-permalink="https://surfingcomplexity.blog/2024/10/29/the-carefulness-knob/image-259/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-62.png" data-orig-size="1505,1116" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-62.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-62.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-62.png?w=1024" alt="" class="wp-image-5071" /></a></figure>



<p>TL: Here&#8217;s our starting point: the carefulness knob is currently set at 5, and we can properly hit end of Q2 if we keep it at this setting.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-63.png"><img loading="lazy" width="1024" height="669" data-attachment-id="5073" data-permalink="https://surfingcomplexity.blog/2024/10/29/the-carefulness-knob/image-260/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-63.png" data-orig-size="1632,1067" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-63.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-63.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-63.png?w=1024" alt="" class="wp-image-5073" /></a></figure>



<p>EM: What happens if we turn up the knob?</p>



<p><em>TL draws an exponential curve</em>.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-64.png"><img loading="lazy" width="1024" height="746" data-attachment-id="5075" data-permalink="https://surfingcomplexity.blog/2024/10/29/the-carefulness-knob/image-261/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-64.png" data-orig-size="1617,1179" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-64.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-64.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-64.png?w=1024" alt="" class="wp-image-5075" /></a></figure>



<p>EM: Woah! That&#8217;s no good. Wait, if we turn the carefulness knob down, does that mean that we can go even faster?</p>



<p>TL: If we did that, we&#8217;d just be YOLO&#8217;ing our changes, not doing validation. Which means we&#8217;d increase the probability of incidents significantly, which end up taking a lot of time to deal with. I don&#8217;t think we&#8217;d actually end up delivering any faster if we chose to be less careful than we normally are.</p>



<p>EM: But won&#8217;t we also have more incidents at a carefulness setting of 5 than at higher carefulness settings?</p>



<p>TL: Yes, there&#8217;s definitely more of a risk that a change that we incorrectly assess as low risk ends up biting us at our default carefulness level. It&#8217;s a tradeoff we have to make.</p>



<p>EM: OK, let&#8217;s just leave the carefulness knob at the default setting.</p>



<hr class="wp-block-separator has-alpha-channel-opacity" />



<p><strong>Scene 2: </strong>An incident review meeting, two and a half months later.</p>



<p>X: We need to be <em>more careful</em> when we make these sorts of changes in the future!</p>



<p class="has-text-align-center">Fin</p>



<hr class="wp-block-separator has-alpha-channel-opacity" />



<h2 class="wp-block-heading">Coda</h2>



<p>It&#8217;s easy to forget that there is a fundamental tradeoff between how careful we can be and how much time it will take us to perform a task. This is known as the <em>efficiency-thoroughness trade-off</em>, or <a href="https://erikhollnagel.com/ideas/etto-principle/index.html">ETTO principle</a>.</p>



<p>You&#8217;ve probably hit a situation where it&#8217;s particularly difficult to automate the test for something, and doing the manual testing is time-intensive, and you developed the feature and tested it, but then there was a small issue that you needed to resolve, and then do you go through all of the manual testing again? We make these sort of time tradeoffs in the small, they&#8217;re individual decisions, but they add up, and we&#8217;re always under schedule pressure to deliver. </p>



<p>As a result, we try our best to adapt to the perceived level of risk in our work. The Human and Organizational Performance folks are fond of the visual image of the <a href="https://www.saif.com/safety-and-health/human-and-organizational-performance-(hop)-another-way-to-think-about-safety.html">black line versus the blue line</a> to depict the difference between how the work is <em>supposed to be done</em> with how workers adapt to get their work done. </p>



<p>But sometimes these adaptations fail. And when this happens, inevitably someone says &#8220;we need to be more careful&#8221;. But imagine if you explicitly asked that person at the beginning of a project about where they wanted to set that carefulness knob, and they had to accept that increasing the setting would increase the schedule significantly. If an incident happened, you could then say to <em>them</em>, &#8220;well, clearly you set the carefulness knob too low at the beginning of this project&#8221;. Nobody wants to explicitly make the tradeoff between less careful and having a time estimate that&#8217;s seen as excessive. And so the tradeoff gets made implicitly. We adapt as best we can to the risk. And we do a pretty good job at that&#8230; most of the time.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://surfingcomplexity.blog/2024/10/29/the-carefulness-knob/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
		
		<media:content url="https://0.gravatar.com/avatar/f2641f12e815a54896f8f2ac04660c52efb896e09131390ad2a6f2f5fca81432?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">lorinh</media:title>
		</media:content>

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-66.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-60.png?w=835" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-62.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-63.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-64.png?w=1024" medium="image" />
	</item>
		<item>
		<title>Specifying serializability in TLA+</title>
		<link>https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/</link>
					<comments>https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/#respond</comments>
		
		<dc:creator><![CDATA[Lorin Hochstein]]></dc:creator>
		<pubDate>Tue, 29 Oct 2024 05:28:15 +0000</pubDate>
				<category><![CDATA[formal methods]]></category>
		<category><![CDATA[systems]]></category>
		<category><![CDATA[tlaplus]]></category>
		<guid isPermaLink="false">http://surfingcomplexity.blog/?p=4899</guid>

					<description><![CDATA[Concurrency is really, really difficult for humans to reason about. TLA+ itself was borne out of Leslie Lamport&#8217;s frustration with the difficulty of write error-free concurrent algorithms: When I first learned about the mutual exclusion problem, it seemed easy and the published algorithms seemed needlessly complicated.&#160; So, I dashed off a simple algorithm and submitted &#8230; <a href="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/" class="more-link">Continue reading <span class="screen-reader-text">Specifying serializability in&#160;TLA+</span> <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[
<p>Concurrency is really, really difficult for humans to reason about. TLA+ itself was borne out of Leslie Lamport&#8217;s frustration with <a href="https://lamport.azurewebsites.net/pubs/pubs.html#proving">the difficulty of write error-free concurrent algorithms</a>:</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>When I first learned about the mutual exclusion problem, it seemed easy and the published algorithms seemed needlessly complicated.&nbsp; So, I dashed off a simple algorithm and submitted it to&nbsp;<em>CACM</em>.&nbsp; I soon received a referee&#8217;s report pointing out the error.&nbsp; This had two effects.&nbsp; First, it made me mad enough at myself to sit down and come up with a real solution.&nbsp; The result was the bakery algorithm described in&nbsp;<a href="https://lamport.azurewebsites.net/pubs/pubs.html#bakery">[12]</a>.&nbsp; The second effect was to arouse my interest in verifying concurrent algorithms.&nbsp;</p>
</blockquote>



<p>Modeling concurrency control in database systems is a great use case for TLA+, so I decided to learn use TLA+ to learn more about database isolation. This post is about modeling <a href="https://jepsen.io/consistency/models/serializable"><em>serializability</em></a>.</p>



<p>You can find all of the the TLA+ models referenced in this post in my <a href="https://github.com/lorin/snapshot-isolation-tla">snapshot-isolation-tla repo</a>. This post isn&#8217;t about snapshot isolation at all, so think of the name as a bit of foreshadowing of a future blog post, which we&#8217;ll discuss at the end.</p>



<h2 class="wp-block-heading">Modeling a database for reasoning about transaction isolation</h2>



<p>In relational databases, data is modeled as rows in different tables, where each table has a defined set of named columns, and there are foreign key relationships between the tables.</p>



<p>However, when modeling transaction isolation, we don&#8217;t need to worry about those details. For the purpose of a transaction, all we care about is if <em>any</em> of the columns of a particular row are read or modified. This means we can ignore details about tables, columns, and relations. All we care about are the rows.</p>



<p>The transaction isolation literature talks about <em>objects</em> instead of <em>rows</em>, and that&#8217;s the convention I&#8217;m going to use. Think of an object like a variable that is assigned a value, and that assignment can change over time. A SQL select statement is a read, and a SQL update statement is a write.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-11.png"><img loading="lazy" width="302" height="233" data-attachment-id="4904" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-208/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-11.png" data-orig-size="302,233" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-11.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-11.png?w=302" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-11.png?w=302" alt="" class="wp-image-4904" /></a><figcaption class="wp-element-caption">An example of how we&#8217;re modeling the database</figcaption></figure>



<p>Note that the set of objects is fixed during the lifetime of the model, it&#8217;s only the values that change over time. I&#8217;m only going to model reads and writes, but it&#8217;s simple enough to extend this model to support creation and deletion by writing a tombstone value to model deletion, and having a not-yet-created-stone value to model an object that has not yet been created in the database.</p>



<p>I&#8217;ll use the notation <em>r[obj, val]</em> to refer to a read operation where we read the object <em>obj</em> and get the value <em>val</em> and <em>w[obj, val]</em> to mean where we write the value <em>val</em> to obj. So, for example, setting x=1 would be: <em>w[x, 1]</em>, and reading the value of x as 1 would be <em>r[x, 1]</em>.</p>



<p>I&#8217;m going to use <em>Obj</em> to model the set of objects, and <em>Val</em> to model the set of possible values that objects can take on.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-15.png"><img loading="lazy" width="1024" height="451" data-attachment-id="4926" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-212/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-15.png" data-orig-size="1100,485" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-15.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-15.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-15.png?w=1024" alt="" class="wp-image-4926" /></a><figcaption class="wp-element-caption"><em>Obj</em> is the set of objects, <em>Val</em> is the set of values that can be assigned to objects</figcaption></figure>



<p>We can model the values of the objects at any point in time as a function that maps objects to values. I&#8217;ll call these sorts of functions <em>environments</em> (<em>env</em> for short) since that&#8217;s what people who write interpreters call them. </p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-16.png"><img loading="lazy" width="165" height="216" data-attachment-id="4928" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-213/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-16.png" data-orig-size="165,216" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-16.png?w=165" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-16.png?w=165" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-16.png?w=165" alt="" class="wp-image-4928" /></a><figcaption class="wp-element-caption">Example of an environment</figcaption></figure>



<p>As an example of syntax, here&#8217;s how we would assert in TLA+ that the variable <em>env</em> is a function that maps element of the set Obj to elements of the set Val:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-40.png"><img loading="lazy" width="130" height="21" data-attachment-id="5004" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-237/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-40.png" data-orig-size="130,21" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-40.png?w=130" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-40.png?w=130" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-40.png?w=130" alt="" class="wp-image-5004" /></a></figure>



<h2 class="wp-block-heading">What is serializability?</h2>



<p>Here&#8217;s how the <a href="http://web.cecs.pdx.edu/~len/sql1999.pdf">SQL:1999 standard</a> describes serializability (via the <a href="https://jepsen.io/consistency/models/serializable">Jepsen serializability page</a>):</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>The execution of concurrent SQL-transactions at isolation level SERIALIZABLE is guaranteed to be serializable. A serializable execution is defined to be an execution of the operations of concurrently executing SQL-transactions that produces the same effect as some serial execution of those same SQL-transactions. A serial execution is one in which each SQL-transaction executes to completion before the next SQL-transaction begins.</p>
</blockquote>



<p>An execution history of reads and writes is <em>serializable</em> if it is equivalent to some other execution history where the committed transactions are scheduled serially (i.e., they don&#8217;t overlap in time). Here&#8217;s an example of a serializable execution history. </p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-19.png"><img loading="lazy" width="1024" height="347" data-attachment-id="4946" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-216/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-19.png" data-orig-size="2874,976" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-19.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-19.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-19.png?w=1024" alt="" class="wp-image-4946" /></a></figure>



<p><a href="https://www.linkedin.com/in/atuladya/">Atul Adya</a> famously came up with a formalism for database isolation levels (including serializability) in his <a href="http://pmg.csail.mit.edu/papers/adya-phd.pdf">PhD dissertation work</a>, and published this in a paper co-authored by <a href="https://pmg.csail.mit.edu/~liskov/">Barbara Liskov</a> (his PhD advisor) and Patrick O&#8217;Neil (an author of the <a href="https://www.cs.umb.edu/~poneil/lsmtree.pdf">original log-structured merge-tree paper</a> and  one of the co-authors of the paper <a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/tr-95-51.pdf">A Critique of ANSI SQL Isolation Levels</a>, which pointed out problems in the SQL specification&#8217;s definitions of the isolation levels ).</p>



<h2 class="wp-block-heading">Specifying serializability</h2>



<p>Adya formalized database isolation levels by specifying dependencies between transactions. However, I&#8217;m not going to use Adya&#8217;s approach for my specification. Instead, I&#8217;m going to use a state-based approach, like the one used by <a href="https://nacrooks.github.io/">Natacha Crooks</a>, <a href="https://www.cs.cornell.edu/~youerpu/">Youer Pu</a>, <a href="https://www.cs.cornell.edu/lorenzo/">Lorenzo Alvisi</a> and <a href="https://www.cs.utexas.edu/lasr/profile.php?uid=4">Allen Clement </a>in their paper <a href="https://apps.cs.utexas.edu/apps/sites/default/files/tech_reports/paper_extendedtr.pdf">Seeing is Believing: A Client-Centric Specification of Database Isolation</a>. </p>



<p>It&#8217;s important to remember that a <em>specification</em> is just a set of behaviors (series of state transitions). We&#8217;re going to use TLA+ to define the set of all of the behaviors that we consider valid for serializability. Another way to put that is that our specification is <em>the set of all serializable executions</em>.</p>



<p>We want to make sure that if we build an implementation, all of the behaviors permitted by the implementation are a subset of our serializability specification.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-41.png"><img loading="lazy" width="1024" height="866" data-attachment-id="5005" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-238/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-41.png" data-orig-size="1154,977" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-41.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-41.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-41.png?w=1024" alt="" class="wp-image-5005" /></a></figure>



<h3 class="wp-block-heading">Note: Causality is not required</h3>



<p>Here&#8217;s an example of an execution history that is <em>serializable</em> according to the definition:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-24.png"><img loading="lazy" width="1024" height="250" data-attachment-id="4956" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-221/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-24.png" data-orig-size="1042,255" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-24.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-24.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-24.png?w=1024" alt="" class="wp-image-4956" /></a></figure>



<p>This looks weird to us because the write happens after the read: T1 is reading data from the future! </p>



<p>But the definition of serializability places no constraints on the ordering of the transaction, for that you need a different isolation level: <a href="https://jepsen.io/consistency/models/strict-serializable">strict serializability</a>. But we&#8217;re modeling serializability, not strict serializability, so we allow histories like the one above in our specification.</p>



<p>(I&#8217;d say &#8220;good luck actually implementing a system that can read events from the future&#8221;, but in distributed databases when you&#8217;re receiving updates from different nodes at different times, some pretty weird stuff can happen&#8230;)</p>



<p>If you&#8217;d like to follow along as we go, my Serializable TLA+ model is in the github repo (<a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/Serializability.tla">source</a>, <a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/Serializability.pdf">pdf</a>).</p>



<h3 class="wp-block-heading">Externally visible variables</h3>



<p>My specification will generate operations (e.g., reads, writes, commits, aborts). The four externally visible variables in the specification are:</p>



<figure class="wp-block-table"><table class="has-fixed-layout"><thead><tr><th>Variable name</th><th>Description</th></tr></thead><tbody><tr><td><em>op</em></td><td>the operation (read, write, commit, abort), modeled as a single letter: {&#8220;r&#8221;, &#8220;w&#8221;, &#8220;c&#8221;, &#8220;a&#8221;} )</td></tr><tr><td><em>arg</em></td><td>the argument(s) to the operation</td></tr><tr><td><em>rval</em></td><td>the return value of the operation</td></tr><tr><td><em>tr</em></td><td>the transaction executing the operation</td></tr></tbody></table></figure>



<p>Here&#8217;s the serializable example from earlier:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-57.png"><img loading="lazy" width="1024" height="498" data-attachment-id="5050" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-254/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-57.png" data-orig-size="1286,626" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-57.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-57.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-57.png?w=1024" alt="" class="wp-image-5050" /></a></figure>



<p>The execution history shown above can be modeled as a TLA+ behavior like this:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-58.png"><img loading="lazy" width="1024" height="93" data-attachment-id="5057" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-255/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-58.png" data-orig-size="3321,302" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-58.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-58.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-58.png?w=1024" alt="" class="wp-image-5057" /></a></figure>



<h3 class="wp-block-heading">Initial state of the specification</h3>



<p>We need to specify the set of valid initial states. In the initial state of our spec, before any operations are issued, we determine:</p>



<ol class="wp-block-list">
<li>which transactions will commit and which will abort</li>



<li>the order in which the transactions will occur</li>



<li>the value of the environment for each committed transaction at the beginning and at the end of its lifetime</li>
</ol>



<p>This is determined by using three <em>internal </em>variables whose values are set in the initial state:</p>



<figure class="wp-block-table"><table class="has-fixed-layout"><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><em>fate</em></td><td>function which encodes which transactions commit and which abort</td></tr><tr><td><em>to</em></td><td>transaction order</td></tr><tr><td><em>benv</em></td><td>the value of the environments at the beginning/end of each transaction</td></tr></tbody></table></figure>



<p>We couldn&#8217;t actually implement a system that could predict in advance whether a transaction will commit or abort, but it&#8217;s perfectly fine to use these for defining our specification.</p>



<p>The values of these variables are specified like this:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-56.png"><img loading="lazy" width="261" height="60" data-attachment-id="5042" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-253/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-56.png" data-orig-size="261,60" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-56.png?w=261" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-56.png?w=261" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-56.png?w=261" alt="" class="wp-image-5042" /></a></figure>



<p>In our initial state, our specification chooses a fate, ordering, and begin/end environments for each transaction. Where <em>Orderings</em> is a helper operator:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-26.png"><img loading="lazy" width="733" height="66" data-attachment-id="4961" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-223/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-26.png" data-orig-size="733,66" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-26.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-26.png?w=733" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-26.png?w=733" alt="" class="wp-image-4961" /></a></figure>



<p>As an example, consider a behavior with three transactions fated to commit, where the fated transaction order is: </p>



<ol class="wp-block-list">
<li>T2</li>



<li>T3</li>



<li>T1</li>
</ol>



<p>Furthermore, assume the following starting environments for each transaction:</p>



<p>T1: [x=2, y=5, z=3]<br>T2: [x=0, y=0, z=0]<br>T3: [x=0, y=1, z=0]<br>Finally, assume that the final environment state (once T1 completes) is [x=2,y=5,z=1].</p>



<p>We can visually depict the committed transactions like like this:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-17.png"><img loading="lazy" width="1024" height="169" data-attachment-id="4938" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-214/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-17.png" data-orig-size="1363,225" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-17.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-17.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-17.png?w=1024" alt="" class="wp-image-4938" /></a></figure>



<h3 class="wp-block-heading">Reads and writes</h3>



<p>You can imagine each transaction running in parallel. As long as each transaction&#8217;s behavior is consistent with its initial environment, and it ends up with its final environment the resulting behavior will be serializable. Here&#8217;s an example.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-37.png"><img loading="lazy" width="1024" height="1024" data-attachment-id="4997" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-234/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-37.png" data-orig-size="1466,1466" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-37.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-37.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-37.png?w=1024" alt="" class="wp-image-4997" /></a></figure>



<p>Each transaction has a local environment, <em>tenv</em>. If the transaction is fated to commit, its <em>tenv </em>is initialized to its <em>benv</em> at the beginning:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-29.png"><img loading="lazy" width="503" height="25" data-attachment-id="4970" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-226/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-29.png" data-orig-size="503,25" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-29.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-29.png?w=503" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-29.png?w=503" alt="" class="wp-image-4970" /></a></figure>



<p>where:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-30.png"><img loading="lazy" width="297" height="51" data-attachment-id="4971" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-227/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-30.png" data-orig-size="297,51" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-30.png?w=297" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-30.png?w=297" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-30.png?w=297" alt="" class="wp-image-4971" /></a></figure>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-31.png"><img loading="lazy" width="372" height="54" data-attachment-id="4972" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-228/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-31.png" data-orig-size="372,54" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-31.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-31.png?w=372" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-31.png?w=372" alt="" class="wp-image-4972" /></a></figure>



<p>Here&#8217;s an example that shows how <em>tenv</em> for transaction T3 varies over time:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-38.png"><img loading="lazy" width="1024" height="351" data-attachment-id="4999" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-235/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-38.png" data-orig-size="1862,639" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-38.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-38.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-38.png?w=1024" alt="" class="wp-image-4999" /></a><figcaption class="wp-element-caption">benv is fixed, but tenv for each transaction varies over time based on the writes</figcaption></figure>



<p>If the transaction is fated to abort, then we don&#8217;t track its environment in <em>tenv</em>, since any read or write is valid.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-39.png"><img loading="lazy" width="977" height="95" data-attachment-id="5001" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-236/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-39.png" data-orig-size="977,95" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-39.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-39.png?w=977" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-39.png?w=977" alt="" class="wp-image-5001" /></a><figcaption class="wp-element-caption">A valid behavior, as the definition of serializability places no constraints on the reads of an aborted transaction</figcaption></figure>



<h3 class="wp-block-heading">Actions permitted by the specification</h3>



<p>The specification permits the following actions:</p>



<ol class="wp-block-list">
<li>commit transaction</li>



<li>abort transaction</li>



<li>read a value</li>



<li>write a value</li>
</ol>



<p>I&#8217;m not modeling the start of a transaction, because it&#8217;s not relevant to the definition of serializability. We just assume that all of the transactions have already started. </p>



<p>In TLA+, we specify it like this:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-27.png"><img loading="lazy" width="319" height="154" data-attachment-id="4963" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-224/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-27.png" data-orig-size="319,154" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-27.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-27.png?w=319" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-27.png?w=319" alt="" class="wp-image-4963" /></a></figure>



<p>Note that there are no restrictions here on the order in which operations happen. Even if the transaction order is [T2, T3, T1], that doesn&#8217;t require that the operations from T2 have to be issued before the other two transactions.</p>



<p>Rather, the only constraints for each transaction that will commit is that:</p>



<ol class="wp-block-list">
<li>Its reads must be consistent with its initial environment, as specified by <em>benv</em>.</li>



<li>Its local environment must match the <em>benv</em> of the next transaction in the order when it finally commits.</li>
</ol>



<p>We enforce (1) in our specification by using a transaction-level environment, <em>tenv</em>, for the reads. This environment gets initialized to <em>benv</em> for each transaction, and is updated if the transaction does any writes. This enables each transaction to see its own writes. </p>



<p>We enforce (2) by setting a precondition on the Commit action that it can only fire when <em>tenv</em> for that transaction is equal to <em>benv</em> of the next transaction:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-49.png"><img loading="lazy" width="628" height="190" data-attachment-id="5021" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-246/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-49.png" data-orig-size="628,190" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-49.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-49.png?w=628" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-49.png?w=628" alt="" class="wp-image-5021" /></a></figure>



<h3 class="wp-block-heading">Termination</h3>



<p>If all of the transactions have committed or aborted, then the behavior is complete, which is modeled by the Termination sub-action, which just keeps firing and doesn&#8217;t change any of the variables:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-28.png"><img loading="lazy" width="485" height="51" data-attachment-id="4965" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-225/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-28.png" data-orig-size="485,51" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-28.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-28.png?w=485" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-28.png?w=485" alt="" class="wp-image-4965" /></a></figure>



<h2 class="wp-block-heading">Liveness</h2>



<p>In our specification, we want to ensure that every behavior eventually satisfies the <em>Termination</em> action. This means that all transactions either eventually commit or abort in every valid behavior of the spec. In TLA+, we can describe this desired property like this:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-33.png"><img loading="lazy" width="407" height="31" data-attachment-id="4979" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-230/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-33.png" data-orig-size="407,31" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-33.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-33.png?w=407" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-33.png?w=407" alt="" class="wp-image-4979" /></a></figure>



<p>The diamond is a temporal operator that means &#8220;eventually&#8221;. </p>



<p>To achieve this property, we need to specify a <em>liveness</em> condition in our specification. This is a condition of the type &#8220;something we want to happen eventually happens&#8221;. </p>



<p>We don&#8217;t want our transactions to stay open forever.</p>



<ol class="wp-block-list">
<li>For transactions that are fated to abort, they must eventually abort</li>



<li>For transactions that are fated to commit, they must eventually commit</li>
</ol>



<p>We&#8217;re going to use weak and strong fairness to specify our liveness conditions; for more details on liveness and fairness, see my post <a href="/2024/10/16/a-liveness-example-in-tla/">a liveness example in TLA+</a>.</p>



<h3 class="wp-block-heading">Liveness for aborts</h3>



<p>We want to specify that everyone transaction that is fated to abort eventually aborts. To do this, we can use <em>weak fairness.</em> </p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-43.png"><img loading="lazy" width="169" height="23" data-attachment-id="5010" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-240/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-43.png" data-orig-size="169,23" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-43.png?w=169" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-43.png?w=169" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-43.png?w=169" alt="" class="wp-image-5010" /></a></figure>



<p>This says that &#8220;the Abort action cannot be forever enabled without the Abort action happening&#8221;.</p>



<p>Here&#8217;s the Abort action. </p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-45.png"><img loading="lazy" width="554" height="170" data-attachment-id="5013" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-242/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-45.png" data-orig-size="554,170" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-45.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-45.png?w=554" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-45.png?w=554" alt="" class="wp-image-5013" /></a></figure>



<p>The abort action is enabled for a transaction <em>t</em> if the transaction is in the open state, and its fate is Aborted. </p>



<h3 class="wp-block-heading">Liveness for commits</h3>



<p>The liveness condition for commit is more subtle. A transaction can only commit if its local environment (tenv) matches the starting environment of the transaction that follows it in transaction order (benv).</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-46.png"><img loading="lazy" width="628" height="190" data-attachment-id="5015" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-243/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-46.png" data-orig-size="628,190" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-46.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-46.png?w=628" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-46.png?w=628" alt="" class="wp-image-5015" /></a></figure>



<p>Consider two scenarios: one where tenv matches the next benv, and one where it doesn&#8217;t:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-47.png"><img loading="lazy" width="888" height="1024" data-attachment-id="5017" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-244/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-47.png" data-orig-size="1141,1316" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-47.png?w=260" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-47.png?w=888" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-47.png?w=888" alt="" class="wp-image-5017" /></a></figure>



<p>We want to use fairness to specify that every transaction fated to commit eventually reaches the state of scenario 1 above. Note that scenario 2 is a valid state in a behavior, it&#8217;s just not a state from which a commit can happen.</p>



<p>Consider the following diagram:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-48.png"><img loading="lazy" width="1024" height="585" data-attachment-id="5019" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-245/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-48.png" data-orig-size="1217,696" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-48.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-48.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-48.png?w=1024" alt="" class="wp-image-5019" /></a></figure>



<p>For every value of tenv[Ti], the number of variables that match the values in benv[i+1] is somewhere between 0 and 5. In the example above, there are two variables that match, x and z.</p>



<p>Note that the Commit action is always enabled when a transaction is open, so with every step of the specification, tenv can move left or right in the diagram above, with a min of 0 and a max of 5.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-50.png"><img loading="lazy" width="697" height="171" data-attachment-id="5022" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-247/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-50.png" data-orig-size="697,171" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-50.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-50.png?w=697" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-50.png?w=697" alt="" class="wp-image-5022" /></a></figure>



<p>We need to specify &#8220;tenv always eventually moves to the right&#8221;. When tenv is at zero, we can use weak fairness to specify that it eventually moves from 0 to 1. </p>



<p>To specify this, I defined a function W(0, 1) which is true when tenv moves from 0 to 1:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-51.png"><img loading="lazy" width="486" height="130" data-attachment-id="5024" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-248/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-51.png" data-orig-size="486,130" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-51.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-51.png?w=486" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-51.png?w=486" alt="" class="wp-image-5024" /></a></figure>



<p>Where M(env1, env2) is a count of the number of variables that have the same value:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-52.png"><img loading="lazy" width="410" height="50" data-attachment-id="5026" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-249/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-52.png" data-orig-size="410,50" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-52.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-52.png?w=410" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-52.png?w=410" alt="" class="wp-image-5026" /></a></figure>



<p>This means we can specify &#8220;tenv cannot forever stay at 0&#8221; using weak fairness, like this:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-53.png"><img loading="lazy" width="116" height="29" data-attachment-id="5028" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-250/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-53.png" data-orig-size="116,29" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-53.png?w=116" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-53.png?w=116" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-53.png?w=116" alt="" class="wp-image-5028" /></a></figure>



<p>We also want to specify that tenv eventually moves from 1 matches to 2, and then from 2 to 3, and so on, all of the way from 4 to all 5. And then we also want to say that it eventually goes from all matches to commit.</p>



<p>We can&#8217;t use weak fairness for this, because if tenv is at 1, it can also change to 0. However, the weak fairness of W(0,1) ensures that it if it goes from 1 down to 0, it will always eventually go back to 1.</p>



<p>Instead, we need to use <em>strong fairness</em>, which says that &#8220;if the action is enabled <em>infinitely often</em>, then the action must be taken&#8221;. We can specify strong fairness for each of the steps like this:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-54.png"><img loading="lazy" width="324" height="29" data-attachment-id="5032" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-251/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-54.png" data-orig-size="324,29" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-54.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-54.png?w=324" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-54.png?w=324" alt="" class="wp-image-5032" /></a></figure>



<p>Recall that <em>Obj</em> is the set of objects {x, y, z, &#8230;}, and Cardinality refres to the size of the set. We also need to specify strong fairness on the commit action, to ensure that we eventually commit if all variables matching is enabled <em>infinitely often:</em></p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-55.png"><img loading="lazy" width="192" height="29" data-attachment-id="5035" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-252/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-55.png" data-orig-size="192,29" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-55.png?w=192" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-55.png?w=192" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-55.png?w=192" alt="" class="wp-image-5035" /></a></figure>



<p>Now putting it all together, here&#8217;s one way to specify the liveness condition, which is conventionally called <em>L</em>.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-34.png"><img loading="lazy" width="493" height="299" data-attachment-id="4984" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-231/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-34.png" data-orig-size="493,299" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-34.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-34.png?w=493" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-34.png?w=493" alt="" class="wp-image-4984" /></a></figure>



<p>Once again, the complete model is in the github repo (<a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/Serializability.tla">source</a>, <a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/Serializability.pdf">pdf</a>).</p>



<h2 class="wp-block-heading">How do we know our spec is correct?</h2>



<p>We can validate our serializable specification by creating a <a href="/2024/09/22/linearizability-refinement-prophecy/">refinement mapping</a> to a sequential specification. Here&#8217;s a simple sequential specification for a key-value store, <a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/Sequential.tla">Sequential.tla</a>:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-14.png"><img loading="lazy" width="639" height="747" data-attachment-id="4919" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-211/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-14.png" data-orig-size="639,747" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-14.png?w=257" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-14.png?w=639" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-14.png?w=639" alt="" class="wp-image-4919" /></a></figure>



<p>I&#8217;m not going to get into the details of the refinement mapping in this post, but you can find it at in the SerializabilityRefinement model (<a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/SerializabilityRefinement.tla">source</a>, <a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/SerializabilityRefinement.pdf">pdf</a>).</p>



<h3 class="wp-block-heading">OK, but how do you know that <em>this</em> spec is correct?</h3>



<p>It&#8217;s turtles all of the way down! This is really the bottom in terms of refinement, I can&#8217;t think of an even simpler spec that we can use to validate this one.</p>



<p>However, one thing we can do is specify invariants that we can use to validate the specification, either with the model checker or by proof.</p>



<p>For example, here&#8217;s an invariant that checks whether each write has an associated read that happened before:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-35.png"><img loading="lazy" width="509" height="113" data-attachment-id="4987" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-232/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-35.png" data-orig-size="509,113" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-35.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-35.png?w=509" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-35.png?w=509" alt="" class="wp-image-4987" /></a></figure>



<p>where:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-36.png"><img loading="lazy" width="376" height="238" data-attachment-id="4989" data-permalink="https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/image-233/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-36.png" data-orig-size="376,238" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-36.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-36.png?w=376" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-36.png?w=376" alt="" class="wp-image-4989" /></a></figure>



<p>But what happens if there&#8217;s no initial write? In that case, we don&#8217;t know what the read should be. But we do know that we don&#8217;t want to allow two successive reads to read different values, for example:</p>



<p>r[x,3], r[x,4]</p>



<p>So we can also specify this check as an invariant. I called that <em>SuccessiveReads</em>, you can find it in the MCSequential model (<a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/MCSequential.tla">source</a>, <a href="https://github.com/lorin/snapshot-isolation-tla/blob/main/MCSequential.pdf">pdf</a>).</p>



<h2 class="wp-block-heading">The value of formalizing the specification</h2>



<p>Now that we have a specification for Serializability, we can use it to check if a potential concurrency control implementation actually satisfies this specification.</p>



<p>That was my original plan for this blog post, but it got so long that I&#8217;m going to save that for a future blog post. In that future post, I&#8217;m going to model multi-version concurrency control (MVCC) and show how it fails to satisfy our serializability spec by having the model checker find a counterexample. </p>



<p>However, in my opinion, the advantage of formalizing a specification is that it forces you to think deeply about what it is that you&#8217;re specifying. Finding counter-examples with the model checker is neat, but the real value is the deeper understanding you&#8217;ll get.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://surfingcomplexity.blog/2024/10/28/serializability-and-tla/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		
		<media:content url="https://0.gravatar.com/avatar/f2641f12e815a54896f8f2ac04660c52efb896e09131390ad2a6f2f5fca81432?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">lorinh</media:title>
		</media:content>

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-11.png?w=302" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-15.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-16.png?w=165" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-40.png?w=130" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-19.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-41.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-24.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-57.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-58.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-56.png?w=261" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-26.png?w=733" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-17.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-37.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-29.png?w=503" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-30.png?w=297" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-31.png?w=372" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-38.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-39.png?w=977" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-27.png?w=319" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-49.png?w=628" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-28.png?w=485" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-33.png?w=407" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-43.png?w=169" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-45.png?w=554" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-46.png?w=628" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-47.png?w=888" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-48.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-50.png?w=697" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-51.png?w=486" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-52.png?w=410" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-53.png?w=116" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-54.png?w=324" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-55.png?w=192" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-34.png?w=493" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-14.png?w=639" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-35.png?w=509" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-36.png?w=376" medium="image" />
	</item>
		<item>
		<title>If you don&#8217;t examine what worked, how will you know what works?</title>
		<link>https://surfingcomplexity.blog/2024/10/17/if-you-dont-examine-what-worked-how-will-you-know-what-works/</link>
					<comments>https://surfingcomplexity.blog/2024/10/17/if-you-dont-examine-what-worked-how-will-you-know-what-works/#comments</comments>
		
		<dc:creator><![CDATA[Lorin Hochstein]]></dc:creator>
		<pubDate>Fri, 18 Oct 2024 01:52:31 +0000</pubDate>
				<category><![CDATA[incidents]]></category>
		<category><![CDATA[resilience]]></category>
		<category><![CDATA[systems]]></category>
		<guid isPermaLink="false">http://surfingcomplexity.blog/?p=4800</guid>

					<description><![CDATA[This is one of my favorite bits from fellow anglophone Québécois Norm McDonald: One of the goals I believe that we all share for post-incident work is to improve the system. For example, when I wrote the post Why I don&#8217;t like discussing action items during incident reviews, I understood why people would want to &#8230; <a href="https://surfingcomplexity.blog/2024/10/17/if-you-dont-examine-what-worked-how-will-you-know-what-works/" class="more-link">Continue reading <span class="screen-reader-text">If you don&#8217;t examine what worked, how will you know what&#160;works?</span> <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[
<p>This is one of my favorite bits from fellow anglophone Québécois Norm McDonald:</p>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-4-3 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<div class="embed-youtube"><iframe title="Norm MacDonald smoker&#039;s lung" width="1100" height="825" src="https://www.youtube.com/embed/6wDendRefm0?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe></div>
</div><figcaption class="wp-element-caption">Norm: not a lung expert</figcaption></figure>



<p>One of the goals I believe that we all share for post-incident work is to <em>improve</em> the system. For example, when I wrote the post <a href="/2024/09/28/why-i-dont-like-discussing-action-items-during-incident-reviews/">Why I don&#8217;t like discussing action items during incident reviews</a>, I understood why people would want to focus on action items: precisely because they share this goal of wanting to improve the system (As a side note, Chris Evans of <a href="https://incident.io/">incident.io</a> wrote a response: <a href="https://incident.io/blog/why-i-like-discussing-actions-items-in-incident-reviews">Why I like discussing actions items in incident reviews</a>). However, what I want to write about here is not the discussion of action items, but focusing on what went wrong versus what went right.</p>



<h3 class="wp-block-heading">&#8220;How did things go right?&#8221;</h3>



<p><em>How did things go right</em> is a question originally posed by the safety researcher Erik Hollnagel, in his the safety paradigm that he calls Safety-II. The central idea is that things <em>actually go right</em> most of the time, and if you want to actually improve the system, you need to get a better understanding of how the system functions, which means you need to broaden your focus beyond the things that broke. </p>



<p>You can find an approachable introduction to Safety-II concepts in the <a href="https://www.eurocontrol.int/">EUROCONTROL</a> white paper <a href="https://www.skybrary.aero/bookshelf/books/2437.pdf">From Safety-I to Safety-II</a>.  Hollnagel&#8217;s ideas have been very influential in the resilience engineering community. As an example, check out my my former colleague Ryan Kitchens&#8217;s talk at SREcon Americas 2019: <a href="https://www.usenix.org/conference/srecon19americas/presentation/kitchens">How Did Things Go Right? Learning More from Incidents</a>.</p>



<p>It&#8217;s with this <em>how did things go right</em> lens that I want to talk a little bit about incident review.</p>



<h3 class="wp-block-heading">Beyond &#8220;what went well&#8221;</h3>



<p>Now, in most incident writeups that I&#8217;ve read, there is a &#8220;what went well&#8221; section. However, it&#8217;s typically the smallest section in the writeup, with maybe a few bullet points: there&#8217;s never any real detail there. </p>



<p>Personally, I&#8217;m looking for details like how an experienced engineer recognized the symptoms enough to get a hunch about where to look next, reducing the diagnostic time by hours. Or how engineers leveraged an operational knob that was originally designed for a different purpose. I want to understand how experts are able to do the work of effectively diagnosing problems, mitigating impact, and remediating the problem. </p>



<p>Narrowly, I want to learn this because I want to get this sort of working knowledge into other people&#8217;s heads. More broadly, I want to bring to light the actual work that gets done.</p>



<h3 class="wp-block-heading">We don&#8217;t know how the system works</h3>



<figure class="wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter"><div class="wp-block-embed__wrapper">
<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">Humans adapt to the constraints they face in order to get their work done. Look for these adaptations if you want to understand the work better.</p>&mdash; @norootcause@hachyderm.io on mastodon (@norootcause) <a href="https://twitter.com/norootcause/status/1845495552483762451?ref_src=twsrc%5Etfw">October 13, 2024</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>
</div></figure>



<p>Safety researchers make a distinction between <a href="https://humanisticsystems.com/2020/10/28/proxies-for-work-as-done-1-work-as-imagined/"><em>work-as-imagined</em> and <em>work-as-done</em></a>. We <em>think</em> we understand how the day-to-day work gets done, but we actually don&#8217;t. Not really. To take an example from software, we don&#8217;t actually know how people really use the tooling to get their work done, and I can confirm this by being on-call for internal support for development tools in previous jobs. (&#8220;You&#8217;re using our tool to do <em>what?&#8221;</em> is not an uncommon reaction from the on-call person). People do things we never imagined, in both wonderful and horrifying ways (sometimes at the same time!). </p>



<p>We also don&#8217;t see all of the ways that people coordinate to get their work done. There are the meetings, the slack messages, the comments on the pull requests, but there&#8217;s also the shared understanding, the <em>common knowledge</em>, the stuff that everybody knows that everybody else knows, that enables people to get this work done, while reducing the amount of explicit communication that has to happen.</p>



<p>What&#8217;s remarkable is that these work patterns, well, they work. These people in your org are able to get their stuff done, almost all of the time. Some of them may exhibit mastery of the tooling, and others may use the tooling in ways even it was never intended that are fundamentally unsafe. But we&#8217;re never going to actually know unless we actually look at how they&#8217;re doing their work.</p>



<p>Because how people do their work is <em>how the system works</em>. And if we&#8217;re going to propose and implement interventions, it&#8217;s very likely that the outcomes of the interventions will surprise us, because these changes might disrupt effective ways of doing work, and people will adapt to those interventions in ways we never anticipated, and in ways we may never even know if we don&#8217;t take a look. </p>



<h3 class="wp-block-heading">Then why use incidents to look at things that go right?</h3>



<p>At first glance, it does seem odd to use incidents as the place to examine where work goes well: given that incidents are times where something unquestionably went wrong. It would be wonderful if we could study how work happens when things are going well. Heck, I&#8217;d love to see companies have sociologists or anthropologists on staff to study how the work happens at the company. Regrettably, though, incidents are one of the only times when the organization is actually willing to devote resources (specifically, time) on examining work in fine-grained detail.</p>



<p>We can use incidents to study how things go well, but we have to keep a couple of things in mind. One, we need to recognize that adaptations that fail led to an incident are <em>usually successful</em>, which is why people developed those adaptations. Note that because an adaptation usually works, doesn&#8217;t mean that it&#8217;s a good thing to keep doing: an adaptation could be a dangerous workaround to a constraint like a third-party system that can&#8217;t be changed directly and so must be awkwardly worked around. </p>



<p>Second, we need to look in more detail, to <em>remark</em>, at incident response that is remarkable. When incident response goes well, there is impressive diagnostic, coordination, and improvisation work to get the system back to healthy. These are the kinds of skills you want to foster across your organization. If you want to build tools to make this work even better, you should take the time to understand just how this work is done today. Keep this in mind when you&#8217;re proposing new interventions. After all, if you don&#8217;t examine what worked, how will you know what works?</p>
]]></content:encoded>
					
					<wfw:commentRss>https://surfingcomplexity.blog/2024/10/17/if-you-dont-examine-what-worked-how-will-you-know-what-works/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
		
		<media:content url="https://0.gravatar.com/avatar/f2641f12e815a54896f8f2ac04660c52efb896e09131390ad2a6f2f5fca81432?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">lorinh</media:title>
		</media:content>
	</item>
		<item>
		<title>A liveness example in TLA+</title>
		<link>https://surfingcomplexity.blog/2024/10/16/a-liveness-example-in-tla/</link>
					<comments>https://surfingcomplexity.blog/2024/10/16/a-liveness-example-in-tla/#respond</comments>
		
		<dc:creator><![CDATA[Lorin Hochstein]]></dc:creator>
		<pubDate>Thu, 17 Oct 2024 05:31:29 +0000</pubDate>
				<category><![CDATA[formal methods]]></category>
		<category><![CDATA[tlaplus]]></category>
		<guid isPermaLink="false">http://surfingcomplexity.blog/?p=4819</guid>

					<description><![CDATA[If you&#8217;ve ever sat at a stop light that was just stuck on red, where there was clearly a problem with the light where it wasn&#8217;t ever switching green, you&#8217;ve encountered a liveness problem with a system. A liveness property of a specification is an assertion that some good thing eventually happens. In the case &#8230; <a href="https://surfingcomplexity.blog/2024/10/16/a-liveness-example-in-tla/" class="more-link">Continue reading <span class="screen-reader-text">A liveness example in&#160;TLA+</span> <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[
<p>If you&#8217;ve ever sat at a stop light that was just stuck on red, where there was clearly a problem with the light where it wasn&#8217;t ever switching green, you&#8217;ve encountered a <em>liveness</em> problem with a system.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/turning-1.jpg"><img loading="lazy" width="523" height="500" data-attachment-id="4870" data-permalink="https://surfingcomplexity.blog/2024/10/16/a-liveness-example-in-tla/turning-2/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/turning-1.jpg" data-orig-size="523,500" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="turning" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/turning-1.jpg?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/turning-1.jpg?w=523" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/turning-1.jpg?w=523" alt="" class="wp-image-4870" /></a><figcaption class="wp-element-caption">Is the turning light just taking a long time? Or is it broken?</figcaption></figure>



<p>A liveness property of a specification is an assertion that some good thing eventually happens. In the case above, the something good is the light changing from red to green. If the light never turns green, then the system&#8217;s behavior violates the liveness property.</p>



<p>On the other hand, a <em>safety</em> property is an assertion that some bad thing never happens. To continue with the stop light example, you never want both the north-south and east-west traffic lights to be green at the same time. If those lights are both ever green simultaneously, then the system&#8217;s behavior violates the safety property. But this post is about liveness, not safety. I</p>



<p>I&#8217;m going to walk through a simple TLA+ example that demonstrates why and how to specify liveness properties. Instead of using stop lights as my example, I&#8217;m going to use elevators.</p>



<h2 class="wp-block-heading">A simple elevator specification</h2>



<p>I&#8217;m going to build a minimalist TLA+ model of an elevator system. I&#8217;m going to model a building with <em>N</em> floors, and a single elevator, where the elevator is always either:</p>



<ul class="wp-block-list">
<li>at a floor</li>



<li>between two floors</li>
</ul>



<p>To keep things very simple, I&#8217;m not going to model things like passengers, doors, or call buttons. I&#8217;m just going to assume the elevator moves up and down in the building on its own.</p>



<p>To start with, the only constraint I&#8217;m going to put on the way the elevator moves is that it can&#8217;t change directions when it&#8217;s between two floors. For example, if the elevator is on floor 2, and then starts moving up, and is between floors 2 and 3, it can&#8217;t change direction and go back to floor 2: it has to continue on to floor 3. Once it&#8217;s on floor 3, it can go up or down.  (Note: this is an example of a <em>safety</em> property).</p>



<p>My model is going to have two variables:</p>



<ul class="wp-block-list">
<li><em>i</em> &#8211; a natural number between 1 and 2*(# of floors) &#8211; 1</li>



<li><em>dir</em> &#8211; the direction that the elevator is moving in (Up or Dn)</li>
</ul>



<p>Assume we are modeling a building with 3 floors, then <em>i</em> would range from 1 to 5, and here&#8217;s how we would determine the floor that the elevator was on based on i.</p>



<figure class="wp-block-table"><table class="has-fixed-layout"><thead><tr><th>i</th><th>floor</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>between 1 and 2</td></tr><tr><td>3</td><td>2</td></tr><tr><td>4</td><td>between 2 and 3</td></tr><tr><td>5</td><td>3</td></tr></tbody></table></figure>



<p>Note that when <em>i</em> is odd, the elevator is at a floor, and when even, the elevator is between floors. I use a hyphen (-) to indicate when the elevator is between floors.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-10.png"><img loading="lazy" width="358" height="458" data-attachment-id="4872" data-permalink="https://surfingcomplexity.blog/2024/10/16/a-liveness-example-in-tla/image-207/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-10.png" data-orig-size="358,458" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-10.png?w=234" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-10.png?w=358" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-10.png?w=358" alt="" class="wp-image-4872" /></a></figure>



<p>Here&#8217;s a TLA+ specification that describes how this elevator moves. There are four actions:</p>



<ul class="wp-block-list">
<li>UpFlr &#8211; move up when at a floor</li>



<li>UpBetween &#8211; move up when between floors</li>



<li>DnFlr &#8211; move down when at a floor</li>



<li>DnBetween &#8211; move down when between floors</li>
</ul>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
---- MODULE elevator ----
EXTENDS Naturals

CONSTANTS N, Up, Dn
ASSUME N \in Nat

VARIABLES i, dir

(* True when elevator is at floor f *)
At(f) == i+1 = 2*f

(* True when elevator is between floors *)
IsBetween == i % 2 = 0

Init == /\ i = 1
        /\ dir \in {Up, Dn}

(* move up when at a floor *)
UpFlr == /\ \E f \in 1..N-1 : At(f)
         /\ i&#039; = i + 1
         /\ dir&#039; = Up

(* move up when between floors *)
UpBetween == /\ IsBetween
             /\ dir = Up
             /\ i&#039; = i + 1
             /\ UNCHANGED dir

(* move down when at a floor *)
DnFlr == /\ \E f \in 2..N : At(f)
         /\ i&#039; = i-1
         /\ dir&#039; = Dn

(* move down when between floors *)
DnBetween == /\ IsBetween
             /\ dir = Dn
             /\ i&#039; = i - 1
             /\ UNCHANGED dir

Next == \/ UpFlr
        \/ UpBetween
        \/ DnFlr
        \/ DnBetween

v == &lt;&lt;i, dir&gt;&gt;
Spec == Init /\ &#91;]&#91;Next]_v

====
</pre></div>


<h2 class="wp-block-heading">Avoiding getting stuck</h2>



<p>One thing we don&#8217;t want to happen is for the elevator to get stuck forever between two floors.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/stuck-1.jpg"><img loading="lazy" width="446" height="547" data-attachment-id="4876" data-permalink="https://surfingcomplexity.blog/2024/10/16/a-liveness-example-in-tla/stuck-2/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/stuck-1.jpg" data-orig-size="446,547" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="stuck" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/stuck-1.jpg?w=245" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/stuck-1.jpg?w=446" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/stuck-1.jpg?w=446" alt="" class="wp-image-4876" /></a><figcaption class="wp-element-caption">We&#8217;re trying to avoid this happening forever</figcaption></figure>



<p>Getting stuck is an example of a liveness condition. It&#8217;s fine for the elevator to <em>sometimes</em> be in the state i=2. we just want to ensure that it never stays in that state <em>forever</em>.</p>



<p>We can express this desired property using temporal logic. I&#8217;m going to use the diamond &lt;&gt; operator, which means &#8220;eventually&#8221;, and the box [] operator, which means &#8220;always&#8221;. Here&#8217;s how I expressed the desired property that the elevator doesn&#8217;t get stuck:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
GetsStuckBetweenFloors == &lt;&gt;&#91;]IsBetween
DoesntGetsStuckBetweenFloors == ~GetsStuckBetweenFloors
</pre></div>


<p>In English, <em>GetsStuckBetweenFloors</em> states: <em>eventually, the elevator is always between floors. </em>And then we define <em>DoesntGetsStuckBetweenFloors</em> as the negation of that.</p>



<p>We can check this property in the TLC model checker, by specifying it as a property in the config file:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
PROPERTY 
    DoesntGetsStuckBetweenFloors
</pre></div>


<p>If we check this with the spec from above, the model checker will find a behavior that is permitted by our specification, but that violates this property.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-4.png"><img loading="lazy" width="420" height="431" data-attachment-id="4833" data-permalink="https://surfingcomplexity.blog/2024/10/16/a-liveness-example-in-tla/image-201/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-4.png" data-orig-size="420,431" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-4.png?w=292" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-4.png?w=420" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-4.png?w=420" alt="" class="wp-image-4833" /></a></figure>



<p>The behavior looks like this, floor: [1, -, -, -, &#8230;]. The elevator moves up between floors and then gets stuck there, exactly what we don&#8217;t want to happen.</p>



<p>Our specification as initially written does not prevent this kind of behavior. We need to add additional constraints to our specification to prevent the elevator from getting stuck.</p>



<h2 class="wp-block-heading">Specifying liveness with fairness properties</h2>



<p>One thing we could do is simply conjoin the <em>DoesntGetsStuckBetweenFloors</em> property to our specification. </p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
Spec == Init /\ &#91;]&#91;Next]_v /\ ~&lt;&gt;&#91;]IsBetween
</pre></div>


<p>This would achieve the desired effect, our spec would no longer permit behaviors where the elevator gets stuck between floors.</p>



<p>The problem with adding liveness constraints by adding an arbitrary temporal property to your spec is that you can end up unintentionally adding additional safety constraints to your spec. That makes your spec harder to reason about. Lamport provides a detailed example of how this can happen in chapter 4 of his book <a href="https://lamport.azurewebsites.net/tla/science.pdf">A Science of Concurrent Programs</a>.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/lamport.jpg"><img loading="lazy" width="283" height="314" data-attachment-id="4879" data-permalink="https://surfingcomplexity.blog/2024/10/16/a-liveness-example-in-tla/lamport/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/lamport.jpg" data-orig-size="283,314" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="lamport" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/lamport.jpg?w=270" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/lamport.jpg?w=283" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/lamport.jpg?w=283" alt="" class="wp-image-4879" /></a><figcaption class="wp-element-caption">Conjoining arbitrary temporal logic expressions to your specification to specify liveness properties makes Leslie Lamport sad</figcaption></figure>



<p>In order to make it easier for a human to reason about a specification, we always want to keep our safety properties and our liveness properties separate. This means that when we add liveness properties to our spec, we want to guarantee that we don&#8217;t do it in such a way that we end up adding new safety properties as well.</p>



<p>We can ensure that we don&#8217;t accidentally sneak in any new safety properties by using what are called <em>fairness</em> properties to achieves our desired liveness property. </p>



<h3 class="wp-block-heading">Using weak fairness to avoid getting stuck</h3>



<p>Weak fairness of an action says that if the action A is forever enabled, then eventually there is an A step. That&#8217;s not a very intuitive concept, so I find the contrapositive more useful. If WF_i(A) is true, then it cannot be that the system gets &#8220;stuck&#8221; forever in a state where it could take an A step, but doesn&#8217;t. We write it as:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
WF_v(A)
</pre></div>


<p>This means that it can&#8217;t happen that A eventually becomes forever enabled without eventually taking an A step that changes the variable expression <em>v</em>.</p>



<p>We have two actions that fire when the elevator is between floors: <em>UpBetween</em> (when it&#8217;s between floors, going up), and <em>DnBetween</em> (when it&#8217;s between floors going down).</p>



<p>We can define our liveness condition like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
L == WF_v(UpBetween) /\ WF_v(DnBetween)

Spec == Init /\ &#91;]&#91;Next]_v /\ L
</pre></div>


<p>This says that if the model cannot be in a state forever where UpBetween is enabled but the UpBetween action never happens, and similarly for DnBetween.</p>



<p>And now the model checker returns success!</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-5.png"><img loading="lazy" width="487" height="305" data-attachment-id="4843" data-permalink="https://surfingcomplexity.blog/2024/10/16/a-liveness-example-in-tla/image-202/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-5.png" data-orig-size="487,305" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-5.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-5.png?w=487" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-5.png?w=487" alt="" class="wp-image-4843" /></a></figure>



<h2 class="wp-block-heading">Visiting every floor</h2>



<p>In our specification, we&#8217;d also like to guarantee that the elevator always eventually visits every floor, so that nobody is ever eternally stranded waiting for an elevator to arrive. </p>



<p>Here&#8217;s how I wrote this property: it&#8217;s always that true that, for every floor, the elevator eventually visits that floor:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
VisitsEveryFloor == &#91;] \A f \in 1..N : &lt;&gt;At(f)
</pre></div>


<p>If we check this property against our spec with TLC, it quickly finds a counterexample, the scenario where the elevator just sits on the ground floor forever! It looks like this: floor [1, 1, 1, 1, 1, &#8230;.]</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-6.png"><img loading="lazy" width="437" height="328" data-attachment-id="4847" data-permalink="https://surfingcomplexity.blog/2024/10/16/a-liveness-example-in-tla/image-203/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-6.png" data-orig-size="437,328" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-6.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-6.png?w=437" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-6.png?w=437" alt="" class="wp-image-4847" /></a></figure>



<p>We previously added weak fairness constraints for when the elevator is between floors. We can add additional fairness constraints so that the elevator can&#8217;t get stuck on any floors, that if it can move up or down, it has to eventually do so. Our liveness condition would look like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
L == /\ WF_v(UpBetween)
     /\ WF_v(DnBetween)
     /\ WF_v(UpFlr)
     /\ WF_v(DnFlr)
</pre></div>


<p>But adding these fairness conditions don&#8217;t satisfy the VisitsEveryFloor property either! Here&#8217;s the counterexample:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-7.png"><img loading="lazy" width="447" height="744" data-attachment-id="4851" data-permalink="https://surfingcomplexity.blog/2024/10/16/a-liveness-example-in-tla/image-204/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-7.png" data-orig-size="447,744" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-7.png?w=180" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-7.png?w=447" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-7.png?w=447" alt="" class="wp-image-4851" /></a></figure>



<p>In this counter-example, the behavior looks like this: floor [1, -, 2, -, 1, -, 2, -, &#8230;]. The elevator is cycling back and forth between floor 1 and floor 2. In particular, it never goes up past floor 2. We need to specify fairness conditions to prohibit a behavior like this.</p>



<p>Weak fairness doesn&#8217;t work here because the problem isn&#8217;t that the elevator is getting stuck forever on floor 2. Instead, it&#8217;s forever going back and forth between floors 1 and 2.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/cycle.jpg"><img loading="lazy" width="1024" height="640" data-attachment-id="4881" data-permalink="https://surfingcomplexity.blog/2024/10/16/a-liveness-example-in-tla/cycle/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/cycle.jpg" data-orig-size="1192,745" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;1&quot;}" data-image-title="cycle" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/cycle.jpg?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/cycle.jpg?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/cycle.jpg?w=1024" alt="" class="wp-image-4881" /></a><figcaption class="wp-element-caption">The elevator isn&#8217;t getting stuck, but it also is never going to floor 3</figcaption></figure>



<p>There&#8217;s a different fairness property, called strong fairness, which is similar to weak fairness, except that it also applies not just if the system gets stuck forever in a state, but also if a system goes in and out of that state, as long as it enters that state &#8220;infinitely often&#8221;. Basically, if it toggles forever in and out of that state, then you can use strong fairness to enforce an action in that state.</p>



<p>Which is exactly what the case is with our elevator, we want to assert that if the elevator reaches floor 2 infinitely often, it should eventually keep going up. We could express that using strong fairness like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
SF_v(UpFlr /\ At(2))
</pre></div>


<p>Except that we don&#8217;t want this fairness condition to only apply at floor 2: we want it to apply for every floor (except the top floor). We can write it like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
\A f \in 1..N-1: SF_v(UpFlr /\ At(f))
</pre></div>


<p>If we run the model checker again (where N=3), it <em>still</em> finds a counter-example(!):</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-8.png"><img loading="lazy" width="447" height="744" data-attachment-id="4857" data-permalink="https://surfingcomplexity.blog/2024/10/16/a-liveness-example-in-tla/image-205/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-8.png" data-orig-size="447,744" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-8.png?w=180" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-8.png?w=447" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-8.png?w=447" alt="" class="wp-image-4857" /></a></figure>



<p>Now the elevator does this: [1, -, 2, -, 3, 3, 3, 3, &#8230;]. It goes to the top floor and just stays there. It hits every floor once, but that&#8217;s not good enough for us: we want it to <em>always eventually</em> hit every floor.</p>



<p>We need to add some additional fairness conditions so that it the elevator also always eventually goes back down. Our  liveness condition now looks like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
L == /\ WF_v(UpBetween)
     /\ WF_v(DnBetween)
     /\ \A f \in 1..N-1: SF_v(UpFlr /\ At(f))
     /\ \A f \in 2..N: SF_v(DnFlr /\ At(f))
</pre></div>


<p>And this works!</p>



<p>Weak fairness on UpFlr and DnFlr is actually sufficient to prevent the elevators from getting stuck at the bottom or top floor, but we need strong fairness in the middle floors to ensure that the elevators always eventually visit every single floor. </p>



<p>The final liveness condition I used was this: </p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
L == /\ WF_v(UpBetween)
     /\ WF_v(DnBetween)
     /\ WF_v(UpFlr /\ At(1))
     /\ WF_v(DnFlr /\ At(N))
     /\ \A f \in 2..N-1 :
        /\ SF_v(UpFlr /\ At(f))
        /\ SF_v(DnFlr /\ At(f))
</pre></div>


<p>You can find my <a href="https://github.com/lorin/elevator-tla">elevator-tla repo</a> on GitHub, including the config files for checking the model using TLC.</p>



<h2 class="wp-block-heading">Why we need to specify fairness for each floor</h2>



<p>You might be wondering why we need to specify the (strong) fairness condition for every floor. Instead of doing:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
L == /\ WF_v(UpBetween)
     /\ WF_v(DnBetween)
     /\ WF_v(UpFlr)
     /\ WF_v(DnFlr)
     /\ \A f \in 2..N-1 :
        /\ SF_i(UpFlr /\ At(f))
        /\ SF_i(DnFlr /\ At(f))
</pre></div>


<p>Why can&#8217;t we just specify strong fairness of the UpFlr and DnFlr actions?</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
L == /\ WF_v(UpBetween)
     /\ WF_v(DnBetween)
     /\ SF_v(UpFlr)
     /\ SF_v(DnFlr)
</pre></div>


<p>The model checker can provide us with a counterexample to help explain why this liveness property doesn&#8217;t guarantee that the elevator always eventually visits all floors:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-9.png"><img loading="lazy" width="447" height="744" data-attachment-id="4864" data-permalink="https://surfingcomplexity.blog/2024/10/16/a-liveness-example-in-tla/image-206/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-9.png" data-orig-size="447,744" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-9.png?w=180" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-9.png?w=447" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-9.png?w=447" alt="" class="wp-image-4864" /></a></figure>



<p>Here&#8217;s the pattern: [1,-,2,-,1,-,2,-,1,&#8230;]. We saw this behavior earlier, where the elevator just moves back and forth between floor 1 and floor 2.</p>



<p>The problem is that both SF_v(UpFlr) and SF_v(DnFlr) are satisfied by this behavior, because the elevator always eventually goes up (from floor 1) and always eventually goes down (from floor 2). </p>



<p>If we want the elevator to eventually visit every floor, then we need to specify the fairness conditions separately for each floor.</p>



<h2 class="wp-block-heading">Further reading</h2>



<p>Hillel Wayne&#8217;s blog posts are always a great introduction to TLA+ concepts:</p>



<ul class="wp-block-list">
<li><a href="https://www.hillelwayne.com/post/safety-and-liveness/">Safety and liveness properties</a></li>



<li><a href="https://www.hillelwayne.com/post/fairness/">Weak and strong fairness</a></li>
</ul>



<p>For more details on implementing liveness properties in TLA+, I recommend Leslie Lamport&#8217;s book <a href="https://lamport.azurewebsites.net/tla/science.pdf">A Science of Concurrent Programs</a>. </p>



<p>Finally, if you are interested in what a more realistic elevator model looks like in TLA+ , check out Andrew Helwer&#8217;s <a href="https://github.com/tlaplus/Examples/blob/master/specifications/MultiCarElevator/Elevator.tla">MultiCarElevator</a> example. </p>
]]></content:encoded>
					
					<wfw:commentRss>https://surfingcomplexity.blog/2024/10/16/a-liveness-example-in-tla/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		
		<media:content url="https://0.gravatar.com/avatar/f2641f12e815a54896f8f2ac04660c52efb896e09131390ad2a6f2f5fca81432?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">lorinh</media:title>
		</media:content>

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/turning-1.jpg?w=523" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-10.png?w=358" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/stuck-1.jpg?w=446" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-4.png?w=420" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/lamport.jpg?w=283" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-5.png?w=487" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-6.png?w=437" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-7.png?w=447" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/cycle.jpg?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-8.png?w=447" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-9.png?w=447" medium="image" />
	</item>
		<item>
		<title>Futexes in TLA+</title>
		<link>https://surfingcomplexity.blog/2024/10/05/futexes-in-tla/</link>
					<comments>https://surfingcomplexity.blog/2024/10/05/futexes-in-tla/#respond</comments>
		
		<dc:creator><![CDATA[Lorin Hochstein]]></dc:creator>
		<pubDate>Sun, 06 Oct 2024 00:51:39 +0000</pubDate>
				<category><![CDATA[formal methods]]></category>
		<category><![CDATA[tlaplus]]></category>
		<guid isPermaLink="false">http://surfingcomplexity.blog/?p=4723</guid>

					<description><![CDATA[Justine Tunney recently wrote a blog post titled The Fastest Mutexes where she describes how she implemented mutexes in Cosmopolitan Libc. The post discusses how her implementation uses futexes by way of Mike Burrows&#8217;s nsync library. From her post nsync enlists the help of the operating system by using futexes. This is a great abstraction &#8230; <a href="https://surfingcomplexity.blog/2024/10/05/futexes-in-tla/" class="more-link">Continue reading <span class="screen-reader-text">Futexes in TLA+</span> <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[
<p>Justine Tunney recently wrote a blog post titled <a href="https://justine.lol/mutex/">The Fastest Mutexes</a> where she describes how she implemented mutexes in <a href="https://justine.lol/cosmopolitan/index.html">Cosmopolitan Libc</a>. The post discusses how her implementation uses <em>futexes</em> by way of Mike Burrows&#8217;s <a href="https://github.com/google/nsync">nsync</a> library. From her post</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>nsync enlists the help of the operating system by using futexes. This is a great abstraction invented by Linux some years ago, that quickly found its way into other OSes. On MacOS, futexes are called ulock. On Windows, futexes are called WaitOnAddress(). The only OS Cosmo supports that doesn&#8217;t have futexes is NetBSD, which implements POSIX semaphores in kernelspace, and each semaphore sadly requires creating a new file descriptor. But the important thing about futexes and semaphores is they allow the OS to put a thread to sleep. That&#8217;s what lets nsync avoid consuming CPU time when there&#8217;s nothing to do.</p>
</blockquote>



<p>Before I read this post, I had no idea what futexes were or how they worked. I figured a good way to learn would be to model them in TLA+.</p>



<p>Note: I&#8217;m going to give a simplified account of how futexes work. In addition, I&#8217;m not an expert on this topic. In particular, I&#8217;m not a kernel programmer, so there may be important details I get wrong here. </p>



<h2 class="wp-block-heading">Mutexes</h2>



<p>Readers who have done multithreaded programming before are undoubtedly familiar with <em>mutexes</em>: they are a type of lock that allows the programmer to enforce mutual exclusion, so that we can guarantee that at most one thread accesses a resource, such as a shared variable.</p>



<p>The locking mechanism is implemented by the operating system: locking and unlock the mutex ultimately involves a system call. If you were programming in C on a Unix-y system like Linux, you&#8217;d use the pthreads API to access the mutex objects. Which pthreads implementation you use (e.g., <a href="https://sourceware.org/glibc/">glibc</a>, <a href="https://musl.libc.org/">musl</a>) will make the relevant system calls for you.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; title: ; notranslate">
#include &lt;pthread.h&gt;
...
// create a mutex
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

pthread_mutex_lock(&amp;mutex);
// mutex is now locked

pthread_mutex_unlock(&amp;mutex);
// mutex is now unlocked
</pre></div>


<h2 class="wp-block-heading">Modeling a mutex in TLA+</h2>



<p>Before we get into futexes, let&#8217;s start off by modeling desired behavior of a mutex in TLA+. I&#8217;ll use the <a href="https://lamport.azurewebsites.net/tla/tutorial/intro.html">PlusCal</a> algorithm language for my model, which can be translated directly to a TLA+ model (see my <a href="https://github.com/lorin/futex-tla/blob/main/mutex.tla">mutex.tla</a> file)</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
---- MODULE mutex ----
CONSTANT Processes

(*--algorithm MutualExclusion

variables lock = {};

process proc \in Processes 
begin

ncs:  skip;
acq:  await lock = {};
      lock := {self};
cs:   skip;
rel:  lock := lock \ {self};
      goto ncs;
end process;

end algorithm;
*)
</pre></div>


<h3 class="wp-block-heading">Modeling threads (Processes)</h3>



<p>This model defines a fixed set of <em>Processes</em>. You should really think of these as threads, but there&#8217;s a convention in academia to refer to them as processes, so I used that convention. You can think of <em>Processes </em>in this model as a set of threads ids. </p>



<h3 class="wp-block-heading">Modeling the lock</h3>



<p>This model has only explicit variable, named <em>lock</em>, which is my model for the mutex lock. I&#8217;ve modeled it as a set. When the lock is free, the set is empty, and when the lock is held by a process, the set contains a single element, the process id. </p>



<h3 class="wp-block-heading">Process states</h3>



<p>PlusCal models also have an implicit variable, <em>pc</em> for program counter. The program counter indicates which state each process is in.</p>



<p>Each process can be in one of four states. We need to give a label to each of these states in our model.</p>



<figure class="wp-block-table"><table class="has-fixed-layout"><thead><tr><th>Label</th><th>Description</th></tr></thead><tbody><tr><td>ncs</td><td>in the non-critical section (lock is not held)</td></tr><tr><td>acq</td><td>waiting to acquire the lock</td></tr><tr><td>cs</td><td>in the <em>critical section</em> (lock is held)</td></tr><tr><td>rel</td><td>releasing the lock</td></tr></tbody></table></figure>



<p>We want to make sure that two processes are never in the critical section at the same time. We can express this desired property in TLA+ like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
InCriticalSection(p) == pc&#91;p] = &quot;cs&quot;
MutualExclusion == \A p1,p2 \in Processes : InCriticalSection(p1) /\ InCriticalSection(p2) =&gt; p1 = p2
</pre></div>


<p>We can specify<em> MutualExclusion</em> as an invariant and use the TLC model checker to verify that our specification satisfies this property. Check out <a href="https://github.com/lorin/futex-tla/blob/main/mutex.cfg">mutex.cfg</a> for how to configure TLC to check the invariant.</p>



<h2 class="wp-block-heading">Overhead of traditional mutexes</h2>



<p>With a traditional mutex, the application make a system call every time the mutex is locked or unlocked. If the common usage pattern for an application is that there&#8217;s only one thread that tries to take the mutex, then you&#8217;re paying a performance penalty for having to execute those system calls. If the mutex is being acquired and released in a tight loop, then the time that goes to servicing the system calls could presumably be a substantial fraction of the execution time of the loop. </p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
for(...) {
  pthread_mutex_lock(&mutex);
  // do work here
  pthread_mutex_unlock(&mutex);
}
</pre></div>


<p>I don&#8217;t know how high these overheads are in practice, but Justine Tunney provides some numbers in her blog post as well as a link to <a href="https://github.com/markwaterman/MutexShootout">Mark Waterman&#8217;s mutex shootout</a> with more performance numbers.</p>



<p>Ideally, we would only pay the performance penalty for system calls when the mutex was under <em>contention</em>, when there were multiple threads that were trying to acquire the lock. </p>



<h2 class="wp-block-heading">Futexes: avoid the syscalls where possible</h2>



<p>Futexes provide a mechanism for avoiding system calls for taking a mutex lock in cases where the lock is not under contention.</p>



<p>More specifically, futexes provide a set of low-level synchronization primitives. These primitives allow library authors to implement mutexes in such a way that they avoid making system calls when possible. Application programmers don&#8217;t interact with futexes directly, they&#8217;re hidden behind APIs like <em>pthread_mutex_lock</em>.</p>



<h3 class="wp-block-heading">Primitives: wait and wake</h3>



<p>The primary two futex primitives are a <em>wait</em> system call and a <em>wake</em> system call. Each of them take an integer pointer as an argument, which I call <em>futex</em>. Here&#8217;s a simplified C function prototype for each of them.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
void futex_wait(int *futex); 
void futex_wake(int *futex);
</pre></div>


<p>(Actual versions of these return status codes, but I won&#8217;t be using those return codes in this blog post). </p>



<p>Note that the futex_wait prototype shown above is incomplete: it needs to take an additional argument to guarantee correctness, but we&#8217;ll get to that later. I want to start off by providing some intuition on how to use futexes.</p>



<p>When a thread calls the <em>futex_wait</em> system call, the kernel puts the thread to sleep until another thread calls <em>futex_wake</em> with the same futex argument.</p>



<h3 class="wp-block-heading">Using primitives to build mutexes that avoid system calls</h3>



<p>OK, so how do we actually use these things to create mutexes?</p>



<p>Here&#8217;s a naive (i.e., incorrect) implementation of <em>lock</em> and <em>unlock</em> functions that implement mutual exclusion using the futex calls. The <em>lock</em> function checks if the lock is free. If it is, it takes the lock, otherwise it waits to be woken up and then tries again. </p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; title: ; notranslate">
#define FREE 0
#define ACQUIRED 1
#define CONTENDED 2

void futex_wait(int *futex);
void futex_wake(int *futex);

/**
 * Try to acquire the lock. On failure, wait and then try again.
 */
void lock(int *futex) {
    bool acquired = false;
    while (!acquired) {
        if (*futex == FREE) {
            *futex = ACQUIRED;
            acquired = true;
        }
        else {
            *futex = CONTENDED;
            futex_wait(futex, CONTENDED);
        }
    }
}

/**
 * Release lock, wake threads that are waiting on lock
 */
void unlock(int *futex) {
    int prev = *futex;
    *futex = FREE;

    if(prev == CONTENDED) {
        futex_wake(futex);
    }
}
</pre></div>


<p>Note that <em>futex</em> is just an ordinary pointer. In the fast path, the lock function just sets the futex to <em>ACQUIRED</em>, no system call is necessary. It&#8217;s only when the futex is not free that it has to make the <em>futex_wait</em> system call.</p>



<p>Similarly, on the <em>unlock</em> side, it&#8217;s only when the futex is in the CONTENDED state that the <em>futex_wake</em> system call happens. </p>



<p>Now&#8217;s a good time to point out that futex is short for <em>fast userspace mutex</em>. The reason it&#8217;s fast is because we can (sometimes) avoid system calls. And the reason we are able to avoid system calls is that, in the fast path, the threads coordinate by modifying a memory location that is accessible in <em>userspace</em>. By <em>userspace</em>, we mean that our futex variable is just an ordinary pointer that the threads all have direct access to: no system call is required to modify it. </p>



<p>By contrast, when we call futex_wait and futex_wake, the kernel needs to read and modify kernel data structures, hence a system call is required.</p>



<p>The code above should provide you with an intuition of how futexes are supposed to work. The tricky part is writing the algorithm in such a way as to guarantee correctness for all possible thread schedules. There&#8217;s a reason that Ulrich Drepper wrote a paper titled <a href="https://cis.temple.edu/~giorgio/cis307/readings/futex.pdf">Futexes are Tricky</a>: it&#8217;s easy to get the lock/unlock methods wrong.</p>



<h2 class="wp-block-heading">Why futex_wait needs another agument</h2>



<p>There are many potential race conditions in our initial lock/unlock implementation, but let&#8217;s focus on one in particular: if the futex gets freed <em>after</em> the lock checks if it&#8217;s free, but <em>before</em> calling futex_wait.</p>



<p>Here&#8217;s what the scenario looks like (think of the red arrows as being like breakpoints):</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-1.png"><img loading="lazy" width="1024" height="794" data-attachment-id="4745" data-permalink="https://surfingcomplexity.blog/2024/10/05/futexes-in-tla/image-198/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-1.png" data-orig-size="2209,1713" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-1.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-1.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-1.png?w=1024" alt="" class="wp-image-4745" /></a></figure>



<p>We need to prevent the situation where the unlock thread completes after the *futex == FREE check but before the futex_wait system call.</p>



<p>We can prevent this by modifying the futex_wait function prototype to pass the value we expect the futex to have, it looks like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
void futex_wait(int *futex, int val);
</pre></div>


<p>The lock code then looks like this instead:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
void lock(int *futex) {
    if(*futex == FREE) {
        *futex = ACQUIRED;
    } else {
        *futex = CONTENDED;
        futex_wait(futex, CONTENDED);
        // try again after waking up
        lock(futex); 
    }
}
</pre></div>


<p>The futex_wait system call will check to ensure that *futex == val. So, if the *futex gets changed, the function will return immediately rather than sleeping. </p>



<p>Here&#8217;s the FUTEX_WAIT section of the Linux <a href="https://www.man7.org/linux/man-pages/man2/futex.2.html">futex man page</a>, which hopefully should be clear now.</p>



<p><em>FUTEX_WAIT (since Linux 2.6.0)<br>This operation tests that the value at the futex word pointed to by the address uaddr still contains the expected value val, and if so, then sleeps waiting for a FUTEX_WAKE operation on the futex word. The load of the value of the futex word is an atomic memory access (i.e., using atomic machine instructions of the respective architecture). This load, the comparison with the expected value, and starting to sleep are performed atomically and totally ordered with respect to other futex operations on the same futex word. If the thread starts to sleep, it is considered a waiter on this futex word. If the futex value does not match val, then the call fails immediately with the error EAGAIN.</em></p>



<h2 class="wp-block-heading">Atomic operations</h2>



<p>In order for the lock/unlock implementations to guarantee correctness, we need to rely on what are called <em>atomic operations</em> when reading and modifying the futex across multiple threads. These are operations that the hardware guarantees can be performed atomically, so that there are no possible race conditions.</p>



<p>In my futex model, I assumed the existence of three atomic operations:</p>



<ol class="wp-block-list">
<li>atomic store</li>



<li>atomic exchange</li>



<li>atomic compare and exchange</li>
</ol>



<p><em>Atomic store</em> isn&#8217;t very interesting, it just says that we can atomically set the value of a variable, i.e., that when we do something like this, it happens atomically.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
*futex = FREE
</pre></div>


<p>In PlusCal, atomic stores are just modeled as assigning a value to a variable, so there&#8217;s not much else to sta</p>



<h3 class="wp-block-heading">Atomic exchange</h3>



<p>Atomic exchange looks like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
oldval = atomic_exchange(x, newval)
</pre></div>


<p>You give atomic exchange two arguments: a variable (x) you want to modify, and the new value (newval) you want it to have. The atomic_exchange function will atomically set x=newval and return the value x had before the assignment.</p>



<p>In PlusCal, I modeled it as a macro. Macros can&#8217;t return values, so we need to pass in oldval as an argument. </p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
macro atomic_exchange(x, oldval, newval) begin
    oldval := x;
    x := newval;
end macro;
</pre></div>


<p>Then I can invoke it like this in my PlusCal model:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
atomic_exchange(mem&#91;a], uprev, Free);
</pre></div>


<p>And the resulting behavior is:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
uprev := mem&#91;a];
mem&#91;a] := Free;
</pre></div>


<h3 class="wp-block-heading">Atomic compare and exchange</h3>



<p>Atomic compare and exchange is sometimes called <em>test-and-set</em>. It looks like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
oldval = atomic_compare_exchange(x, expecting, newval)
</pre></div>


<p>It&#8217;s similar to atomic exchange, except that it only performs the exchange if the variable <em>x</em> contains the value <em>expecting</em>. Basically, it&#8217;s an atomic version of this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
if (x == expecting) 
  oldval = atomic_compare_exchange(x, newval)
else 
  oldval = x
</pre></div>


<p>In my PlusCal model, I also implemented it as a macro:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
macro atomic_compare_exchange(x, oldval, expecting, newval) begin
    oldval := x;
    if x = expecting then 
        x := newval;
    end if;
end macro;
</pre></div>


<h2 class="wp-block-heading">Futex modeling basics</h2>



<p>Here are the basics constants and variables in my model:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
CONSTANTS Processes, Addresses, Free, Acquired, Contended

(*--algorithm futex

variables
    mem = &#91;x \in Addresses |-&gt; Free],
    a \in Addresses,
    ...
</pre></div>


<p>In addition to modeling <em>Processes</em>, my futex model also models a set of memory address as <em>Addresses</em>. I also defined three constants: <em>Free, Acquired, Contended</em> which have the same role as FREE, ACQUIRED, and CONTENDED in the example C code above.</p>



<p>I model memory as a function (<em>mem</em>) that maps addresses to values, as well as a specific memory address<em> (a)</em>. I use <em>a</em> as my futex.</p>



<p>At the top-level, the algorithm should look familiar, it&#8217;s basically the same as the <a href="https://github.com/lorin/futex-tla/blob/main/mutex.tla">mutex.tla</a> one, except that it&#8217;s calling <em>acquire_lock</em> and <em>release_lock</em> procedures.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
process proc \in Processes
begin
    ncs: skip;
    acq: call acquire_lock();
    cs:  skip;
    rel: call release_lock();
         goto ncs;
end process;
</pre></div>


<h2 class="wp-block-heading">acquire_lock: implementing  lock</h2>



<p>I based my implementation of the lock on a simplified version of the one in Ulrich Drupper&#8217;s <a href="https://cis.temple.edu/~giorgio/cis307/readings/futex.pdf">Futexes are Tricky</a> paper. </p>



<p>Here&#8217;s the model for acquiring the lock. It doesn&#8217;t render particularly well in WordPress, so you may want to view the <a href="https://github.com/lorin/futex-tla/blob/main/futex.tla">futex.tla</a> file on GitHub directly.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
procedure acquire_lock()
variable lprev;
begin
           \* Attempt to acquire the lock
Lcmpx1:    atomic_compare_exchange(mem&#91;a], lprev, Free, Acquired);
Ltest:     while lprev # Free do
              \* Mark the lock as contended, assuming it's in the acquired state
Lcmpx2:       atomic_compare_exchange(mem&#91;a], lprev, Acquired, Contended);
              if lprev # Free then
call_wait:        call futex_wait(a, Contended);
              end if;
              \* Attempt to acquire the lock again
Lcmpx3:       atomic_compare_exchange(mem&#91;a], lprev, Free, Contended);
           end while;
            \* if we reach here, we have the lock
Lret:      return;
end procedure;

</pre></div>


<p>Note that we need three separate atomic_compare_exchange calls to implement this (each with different arguments!). Yipe!</p>



<h2 class="wp-block-heading">release_lock: implementing unlock</h2>



<p>The unlock implementation is much simpler. We just set the futex to Free and then wake the waiters.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
procedure release_lock()
variable uprev;
begin
u_xch:  atomic_exchange(mem&#91;a], uprev, Free);
u_wake: if uprev = Contended then
           call futex_wake(a);
        end if;
u_ret:  return;
end procedure;
</pre></div>


<h2 class="wp-block-heading">Modeling the futex_wait/futex_wake calls</h2>



<p>Finally, it&#8217;s not enough in our model to just invoke futex_wait and futex_wake, we need to model the behavior of these as well! I&#8217;ll say a little bit about the relevant kernel data structures in the Linux kernel and how I modeled them</p>



<h3 class="wp-block-heading">Kernel data structures</h3>



<p>The Linux kernel hashes futexes into buckets, and each of these bucket is associated with a <a href="https://github.com/torvalds/linux/blob/v6.11/kernel/futex/futex.h#L115-L119">futex_hash_bucket</a> structure. For the purposes of our TLA+ model, the fields we care about are:</p>



<ul class="wp-block-list">
<li>queue of threads (tasks) that are waiting on the futex</li>



<li>lock for protecting the structure</li>
</ul>



<p>The kernel also uses a structure called a <a href="https://github.com/torvalds/linux/blob/v6.11/kernel/futex/waitwake.c#L160">wake-queue</a> (<a href="https://github.com/torvalds/linux/blob/v6.11/include/linux/sched/wake_q.h">see here for more details</a>) to keep a list of the tasks that have been selected to be woken up.  I modeled this list of threads-to-be-woken as a set.</p>



<p>Here are the variables:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
variables
...
    waitq = &#91;x \in Addresses |-&gt; &lt;&lt;&gt;&gt;], \* a map of addresses to wait queues
    qlock = {},  \* traditional mutex lock used by the kernel on the wait queue.
    wake = {}; \* processes that have been sent a signal to wake up
</pre></div>


<p>I made the following assumptions to simplify my model</p>



<ul class="wp-block-list">
<li>every futex (address) is associated with one queue, rather than hashing and bucketing</li>



<li>I used a global lock instead of having a per-queue lock</li>
</ul>



<h3 class="wp-block-heading">futex_wait</h3>



<p>Here&#8217;s the basic futex_wait algorithm (links go to Linux source code)</p>



<ol class="wp-block-list">
<li><a href="https://github.com/torvalds/linux/blob/v6.11/kernel/futex/waitwake.c#L622">Take the lock</a></li>



<li><a href="https://github.com/torvalds/linux/blob/v6.11/kernel/futex/waitwake.c#L456">Retrieve the current value of the futex.</a></li>



<li><a href="https://github.com/torvalds/linux/blob/v6.11/kernel/futex/waitwake.c#L639-L642">Check if the passed value matches the futex value. If not, return.</a></li>



<li><a href="https://github.com/torvalds/linux/blob/v6.11/kernel/futex/futex.h#L251">Add the thread to the wait queue</a></li>



<li><a href="https://github.com/torvalds/linux/blob/v6.11/kernel/futex/futex.h#L252">Release the lock</a></li>



<li><a href="https://github.com/torvalds/linux/blob/v6.11/kernel/futex/waitwake.c#L370">Wait to be woken up</a></li>
</ol>



<p>Note: I assume that calling <em>schedule()</em> inside of the kernel at this point has the effect of putting the thread to sleep, but as I said earlier, I&#8217;m not a kernel programmer so I&#8217;m not familiar with this code at all. </p>



<p>Here&#8217;s my PlusCal model:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
procedure futex_wait(addr, val)
begin
wt_acq:       await qlock = {};
              qlock := {self};
wt_valcheck:  if val /= mem&#91;addr] then
                qlock := {};
                return;
              end if;
              \* Add the process to the wait queue for this address
wt_enq:       waitq&#91;addr] := Append(waitq&#91;addr], self);
              qlock := {};
wt_wait:      await self \in wake;
              wake := wake \ {self};
              return;
end procedure;

</pre></div>


<h3 class="wp-block-heading">futex_wake</h3>



<p>Here&#8217;s what the futex_wake algorithm looks like:</p>



<ol class="wp-block-list">
<li><a href="https://github.com/torvalds/linux/blob/v6.11/kernel/futex/waitwake.c#L179">Take the lock</a></li>



<li><a href="https://github.com/torvalds/linux/blob/v6.11/kernel/futex/waitwake.c#L192">Add the tasks to be woken up to the wake queue</a></li>



<li><a href="https://github.com/torvalds/linux/blob/v6.11/kernel/futex/waitwake.c#L198">Release the lock</a></li>



<li><a href="https://github.com/torvalds/linux/blob/v6.11/kernel/futex/waitwake.c#L199">Wake the tasks on the wake queue</a></li>
</ol>



<p>Here&#8217;s my PlusCal model of it. I chose to wake only one process in my model, but we could have have woken all of the waiting processes.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
procedure futex_wake(addr)
variables nxt = {}
begin
wk_acq:   await qlock = {};
          qlock := {self};
wk_deq:   if waitq&#91;addr] /= &lt;&lt;&gt;&gt; then
              nxt := {Head(waitq&#91;addr])};
              waitq&#91;addr] := Tail(waitq&#91;addr]);
          end if;
wk_rel:   qlock := {};
wk_wake:  wake := wake \union nxt;
          return;
end procedure;
</pre></div>


<p>You can see the full model on GitHub at <a href="https://github.com/lorin/futex-tla/blob/main/futex.tla">futex.tla</a>.</p>



<h2 class="wp-block-heading">Checking for properties</h2>



<p>One of the reasons to model in TLA+ is to check properties of the specification. I care about three things with this specification:</p>



<ol class="wp-block-list">
<li>It implements mutual exclusion </li>



<li>It doesn&#8217;t make system calls when there&#8217;s no contention </li>



<li>Processes can&#8217;t get stuck waiting on the queue forever</li>
</ol>



<h3 class="wp-block-heading">Mutual exclusion</h3>



<p>We check mutual exclusion the same way we did in our mutex.tla specification, by asserting that there are never two different processes in the critical section at the same time. This is our <em>invariant</em>.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
MutualExclusion == \A p1,p2 \in Processes : pc&#91;p1]=&quot;cs&quot; /\ pc&#91;p2]=&quot;cs&quot; =&gt; p1=p2
</pre></div>


<h3 class="wp-block-heading">No contention means no system calls</h3>



<p>The whole point of using futexes to implement locks was to avoid system calls in the cases where there&#8217;s no contention. Even if our algorithm satisfies mutual exclusion, that doesn&#8217;t mean that it avoids these system calls.</p>



<p>I wrote an invariant for the <em>futex_wait</em> system call, that asserts that we only make the system call when there&#8217;s contention. I called the invariant <em>OnlyWaitUnderContention</em>, and here&#8217;s how I defined it. I created several helper definitions as well.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
LockIsHeld == mem&#91;a] /= Free
ProcessAttemptingToAcquireLock(p) == pc&#91;p] \in {&quot;Lcmpx1&quot;, &quot;Ltest&quot;, &quot;Lcmpx2&quot;, &quot;call_wait&quot;, &quot;Lcmpx3&quot;, &quot;wt_acq&quot;, &quot;wt_valcheck&quot;, &quot;wt_enq&quot;, &quot;wt_wait&quot;}
Contention == LockIsHeld /\ \E p \in Processes : ProcessAttemptingToAcquireLock(p)
OnlyWaitUnderContention == \E p \in Processes : pc&#91;p]=&quot;call_wait&quot; =&gt; Contention
</pre></div>


<h3 class="wp-block-heading">Nobody gets stuck waiting</h3>



<p>Recall earlier in the blog post how we had to modify the prototype of the <em>futex_wait</em> system call to take an additional argument, in order to prevent a race condition that could leave a process waiting forever on the queue.</p>



<p>We want to make sure that we have actually addressed that risk. Note that the <a href="https://github.com/torvalds/linux/blob/v6.11/kernel/futex/waitwake.c#L50-L52">comments in the Linux source code</a> specifically call out this risk.</p>



<p>I checked this by defining an invariant that stated that it never can happen that a process is waiting and all of the other processes are past the point where they could wake up the waiter.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
Stuck(x) == /\ pc&#91;x] = "wt_wait"
            /\ x \notin wake
            /\ \A p \in Processes \ {x} : \/ pc&#91;p] \in {"ncs", "u_ret"}
                                          \/ /\ pc&#91;p] \in {"wk_rel", "wk_wake"}
                                             /\ x \notin nxt&#91;p]

NoneStuck == ~ \E x \in Processes : Stuck(x)

</pre></div>


<h2 class="wp-block-heading">Final check: refinement</h2>



<p>In addition to checking mutual exclusion, we can check that our futex-based lock model (<a href="https://github.com/lorin/futex-tla/blob/main/futex.tla">futex.tla</a>) implements our original high-level mutex model (<a href="https://github.com/lorin/futex-tla/blob/main/mutex.tla">mutex.tla</a>) by means of a <em><a href="/2024/09/22/linearizability-refinement-prophecy/">refinement mapping</a>.</em></p>



<p>To do that, we need to define mappings between the futex model variables and the mutex model variables. The mutex model has two variables:</p>



<ul class="wp-block-list">
<li>lock &#8211; the model of the lock</li>



<li>pc &#8211; the program counters for the processes</li>
</ul>



<p>I called my mappings <em>lockBar</em> and <em>pcBar</em>.  Here&#8217;s what the mapping looks like:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
InAcquireLock(p) == pc&#91;p] \in {&quot;Lcmpx1&quot;, &quot;Ltest&quot;, &quot;Lcmpx2&quot;, &quot;call_wait&quot;, &quot;Lcmpx3&quot;, &quot;Lret&quot;}
InFutexWait(p) == pc&#91;p] \in {&quot;wt_acq&quot;, &quot;wt_valcheck&quot;, &quot;wt_enq&quot;, &quot;wt_wait&quot;}
InReleaseLockBeforeRelease(p) == pc&#91;p] \in {&quot;u_xch&quot;}
InReleaseLockAfterRelease(p) == pc&#91;p] \in {&quot;u_wake&quot;, &quot;u_ret&quot;}
InFutexWake(p) == pc&#91;p] \in {&quot;wk_acq&quot;, &quot;wk_deq&quot;, &quot;wk_rel&quot;, &quot;wk_wake&quot;}

lockBar == {p \in Processes: \/ pc&#91;p] \in {&quot;cs&quot;, &quot;rel&quot;}
                             \/ InReleaseLockBeforeRelease(p)}


pcBar == &#91;p \in Processes |-&gt;
            CASE pc&#91;p] = &quot;ncs&quot;                 -&gt; &quot;ncs&quot;
              &#91;] pc&#91;p] = &quot;cs&quot;                  -&gt; &quot;cs&quot;
              &#91;] pc&#91;p] = &quot;acq&quot;                 -&gt; &quot;acq&quot;
              &#91;] InAcquireLock(p)              -&gt; &quot;acq&quot;
              &#91;] InFutexWait(p)                -&gt; &quot;acq&quot;
              &#91;] pc&#91;p] = &quot;rel&quot;                 -&gt; &quot;rel&quot;
              &#91;] InReleaseLockBeforeRelease(p) -&gt; &quot;rel&quot;
              &#91;] InReleaseLockAfterRelease(p)  -&gt; &quot;ncs&quot;
              &#91;] InFutexWake(p)                -&gt; &quot;ncs&quot;
]

mutex == INSTANCE mutex WITH lock &lt;- lockBar, pc &lt;- pcBar
</pre></div>


<p>We can then define a property that says that our futex specification implements the mutex specification:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
ImplementsMutex == mutex!Spec
</pre></div>


<p>Finally, in our <a href="https://github.com/lorin/futex-tla/blob/main/futex.cfg">futex.cfg</a> file, we can specify that we want to check the invariants, as well as this behavioral property. The relevant config lines look like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
INVARIANT
    MutualExclusion
    OnlyWaitUnderContention
    NoneStuck

PROPERTY 
    ImplementsMutex
</pre></div>


<p>You can find my repo with these models at  <a href="https://github.com/lorin/futex-tla">https://github.com/lorin/futex-tla</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://surfingcomplexity.blog/2024/10/05/futexes-in-tla/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		
		<media:content url="https://0.gravatar.com/avatar/f2641f12e815a54896f8f2ac04660c52efb896e09131390ad2a6f2f5fca81432?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">lorinh</media:title>
		</media:content>

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/10/image-1.png?w=1024" medium="image" />
	</item>
		<item>
		<title>Why I don&#8217;t like discussing action items during incident reviews</title>
		<link>https://surfingcomplexity.blog/2024/09/28/why-i-dont-like-discussing-action-items-during-incident-reviews/</link>
					<comments>https://surfingcomplexity.blog/2024/09/28/why-i-dont-like-discussing-action-items-during-incident-reviews/#comments</comments>
		
		<dc:creator><![CDATA[Lorin Hochstein]]></dc:creator>
		<pubDate>Sat, 28 Sep 2024 19:24:40 +0000</pubDate>
				<category><![CDATA[incidents]]></category>
		<category><![CDATA[systems]]></category>
		<guid isPermaLink="false">http://surfingcomplexity.blog/?p=4694</guid>

					<description><![CDATA[I&#8217;m not a fan of talking about action items during incident reviews. Judging from the incident review meetings I&#8217;ve attended throughout my career, this is a minority view, and I wanted to elaborate here on why I think this way. For more on this topic, I encourage readers to check out John Allspaw&#8217;s 2016 blog &#8230; <a href="https://surfingcomplexity.blog/2024/09/28/why-i-dont-like-discussing-action-items-during-incident-reviews/" class="more-link">Continue reading <span class="screen-reader-text">Why I don&#8217;t like discussing action items during incident&#160;reviews</span> <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[
<p>I&#8217;m not a fan of talking about action items during incident reviews.</p>



<figure class="wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter"><div class="wp-block-embed__wrapper">
<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">My whole shtick is that I believe  updating people&#39;s mental models will have a more significant positive impact on the system than discussing action items, but boy is that a tough sell.</p>&mdash; @norootcause@hachyderm.io on mastodon (@norootcause) <a href="https://twitter.com/norootcause/status/1839438553597825249?ref_src=twsrc%5Etfw">September 26, 2024</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>
</div></figure>



<p>Judging from the incident review meetings I&#8217;ve attended throughout my career, this is a minority view, and I wanted to elaborate here on why I think this way. For more on this topic, I encourage readers to check out John Allspaw&#8217;s 2016 blog post entitled <a href="https://www.etsy.com/codeascraft/debriefing-facilitation-guide/">Etsy&#8217;s Debriefing Facilitation Guide for Blameless Postmortems</a>, as well as the <a href="https://extfiles.etsy.com/DebriefingFacilitationGuide.pdf">Etsy Debrief Facilitation Guide</a> itself. Another starting point I will shamelessly recommend is <a href="https://github.com/lorin/resilience-engineering/blob/master/intro.md">Resilience engineering: where do I start?</a></p>



<h2 class="wp-block-heading">Incident reviews</h2>



<p>First, let&#8217;s talk about what an incident review is. It&#8217;s a meeting that takes place not too long after an incident has occurred, to discuss the incident. In many organizations, these meetings are open to any employee interested in attending, which means that these can have potentially large and varied audiences.</p>



<p>I was going to write &#8220;the goal of an incident review is&#8230;&#8221; in the paragraph above, but the whole purpose of this post is to articulate how my goals differ from other people&#8217;s goals.</p>



<h2 class="wp-block-heading">My claims</h2>



<p><strong>Nobody fully understands how the system works.</strong> Once a company reaches a certain size, the software needs to get broken up across different teams. Ideally, the division is such that the teams are able to work relatively independent of each other. These are <em>well-defined abstractions</em> that lead to <em>low coupling</em> that we all prize in large-scale systems. As a consequence, there&#8217;s no single person who actually fully understands how the whole system works. It&#8217;s just too large and complex. And this actually understates the problem, given the complexity of the platforms we build on top of. Even if I&#8217;m the sole developer of a Java application, there&#8217;s a good chance that I don&#8217;t understand the details of the garbage collection behavior of the JVM I&#8217;m using. </p>



<p><strong>The gaps in our understanding of how the system works contributes to incidents. </strong>Because we don&#8217;t have a full understanding of how the system works, we can&#8217;t ever fully reason about the impact of every single change that we make. I&#8217;d go so far as to say that, in <em>every single incident</em>, there&#8217;s something important that somebody didn&#8217;t know. That means that gaps in our understanding are dangerous in addition to being omnipresent.</p>



<p><strong>The way that work is done profoundly affects incidents, both positively and negatively</strong>, <strong>but</strong> <strong>that work is mostly invisible</strong>. Software systems are <em>socio-technical systems,</em> and the work that the people in your organization do every day is part of how the system works. This day-to-day work enables, trigger, exacerbate, prevent, lessen, and remediate incidents. And sometimes the exact same work in one context will prevent an incident and in another context will enable an incident!  However, we generally don&#8217;t see what the real work is like. I&#8217;m lucky if my teammates have any sense of what my day-to-day work looks like, including how I use the internal tools to accomplish this work. The likelihood that people on other teams know how I do this work is close to zero. Even the teams that maintain the internal tooling have few opportunities to see this work directly.</p>



<p><strong>Incident reviews are an opportunity for many people to gain insight into how the system works.</strong> An incident review is an opportunity to examine an aspect of the <em>socio-technical system</em> in detail. It&#8217;s really the only meeting of its kind where you can potentially have such a varied cross-section of the company getting into the nitty-gritty details of how things work. Incident reviews give us a flashlight that we get to shine on a dark corner of the system. </p>



<p><strong>The best way to get a better understanding of how the system behaves is to look at how the system actually behaved</strong>. This phrasing should sound obvious, but it&#8217;s the most provocative of these claims. Every minute you spend discussing action items is a minute you are not spending learning more about how the system behaved. I feel similarly about discussing counterfactuals (if there had been an alert&#8230;). These discussions take the focus away from how the system actually behaved, and enter a speculative world about how the system might behave under a different set of circumstances.</p>



<p><strong>We don&#8217;t know what other people don&#8217;t know </strong> We all have incomplete, out-of-date models of how the system works, that includes our models of other people&#8217;s models! That means that, in general, we don&#8217;t know what other people don&#8217;t know about the system. We don&#8217;t know in advance what people are going to learn that they didn&#8217;t know before!</p>



<p><strong>There are tight constraints on incident review meetings.</strong> There is a fixed amount of time in an incident review meeting, which means that every minute spend on topic X means one less minute to spend discussing topic Y. Once that meeting is over, the opportunity of bringing in this group of people together to update their mental models is now gone.</p>



<p><strong>Action item discussions are likely to be of interest to a smaller fraction of the audience.</strong> This is a very subjective observation, but my theory is that people tend to find that incident reviews don&#8217;t have a lot of value precisely because they focus too much of the time on discussing action items, and the details of the proposed action items are of potential interest to only a very small subset of the audience. </p>



<p><strong>Teams are already highly incentivized to implement action items that prevent recurrence.</strong> Often I&#8217;ll go to an incident review, and there will be mention of multiple action items that have already been completed. As an observer, I&#8217;ve never learned anything from hearing about these.  </p>



<p><strong>A learning meeting will never happen later, but action items discussion will</strong>. There&#8217;s no harm in having an action item discussion in a future meeting. In fact, teams are likely to have to do this when they do their planning work for the next quarter. However, once the incident review meeting is over, the opportunity for having a learning-style meeting is gone, because the org&#8217;s attention is gone and off to the next thing. </p>



<p><strong>More learning up-front will improve the quality of action items. </strong>The more you learn about the system, the better your proposed action items are likely to be. But the reverse isn&#8217;t true. </p>



<h2 class="wp-block-heading"><strong>Why not do both learning and action items during an incident review? </strong></h2>



<p>Hopefully the claims above address the question of why not do both activities.  There&#8217;s a finite amount of time in an incident review meeting, which means there&#8217;s a fundamental tradeoff between time spent learning and time spent discussing action items, and I believe that devoting the entire time to learning will maximize the return-on-investment of the meeting. I also believe that additional action item discussions are much more likely to be able to happen after the incident review meeting, but that learning discussions won’t.</p>



<h2 class="wp-block-heading">Why I think people emphasize action items</h2>



<p>Here&#8217;s my mental model as to why I think people are so keen on emphasizing action items as the outcome of a meeting.</p>



<p><strong>Learning is fuzzy, actions are concrete</strong>. An incident review meeting is an expensive meeting for an organization. Action items are a <em><a href="https://www.usenix.org/publications/loginonline/seeing-sre-site-reliability-engineering-high-modernism">legible</a></em> outcome of a meeting, they are an indicator to the organization that the meeting had value. The value of learning, of updated mental models, is invisible. </p>



<p><strong>Incidents make orgs uncomfortable and action items reassure them.</strong> Incidents are evidence that we are not fully in control of our system, and action items make us feel like this uncomfortable uncertainty has been addressed.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://surfingcomplexity.blog/2024/09/28/why-i-dont-like-discussing-action-items-during-incident-reviews/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
		
		<media:content url="https://0.gravatar.com/avatar/f2641f12e815a54896f8f2ac04660c52efb896e09131390ad2a6f2f5fca81432?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">lorinh</media:title>
		</media:content>
	</item>
		<item>
		<title>Linearizability! Refinement! Prophecy!</title>
		<link>https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/</link>
					<comments>https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/#comments</comments>
		
		<dc:creator><![CDATA[Lorin Hochstein]]></dc:creator>
		<pubDate>Sun, 22 Sep 2024 17:37:21 +0000</pubDate>
				<category><![CDATA[software]]></category>
		<category><![CDATA[systems]]></category>
		<category><![CDATA[tlaplus]]></category>
		<guid isPermaLink="false">http://surfingcomplexity.blog/?p=4136</guid>

					<description><![CDATA[Back in August, Murat Derimbas published a blog post about the paper by Herlihy and Wing that first introduced the concept of linearizability. When we move from sequential programs to concurrent ones, we need to extend our concept of what &#8220;correct&#8221; means to account for the fact that operations from different threads can overlap in &#8230; <a href="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/" class="more-link">Continue reading <span class="screen-reader-text">Linearizability! Refinement! Prophecy!</span> <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[
<p>Back in August, Murat Derimbas published a <a href="https://muratbuffalo.blogspot.com/2024/08/linearizability-correctness-condition.html">blog post</a> about the <a href="https://dl.acm.org/doi/10.1145/78969.78972">paper by Herlihy and Wing</a> that first introduced the concept of <em>linearizability</em>. When we move from sequential programs to concurrent ones, we need to <a href="/2023/12/31/consistency/">extend our concept of what &#8220;correct&#8221; means</a> to account for the fact that operations from different threads can overlap in time. Linearizability is the strongest consistency model for single-object systems, which means that it&#8217;s the one that aligns closest to our intuitions. Other models are <a href="/2023/12/29/the-inherent-weirdness-of-system-behavior/">weaker</a> and, hence, will permit anomalies that violate human intuition about how systems should behave.</p>



<p>Beyond introducing linearizability, one of the things that Herlihy and Wing do in this paper is provide an implementation of a linearizable queue whose correctness cannot be demonstrated using an approach known as <em>refinement mapping</em>. At the time the paper was published, it was believed that it was always possible to use refinement mapping to prove that one specification implemented another, and this paper motivated <a href="https://lamport.org/">Leslie Lamport</a> and <a href="https://research.google/people/abadi/">Martín Abadi</a> to propose the concept of <em>prophecy</em> <em>variables</em>.</p>



<p>I have long been fascinated by the concept of prophecy variables, but when I learned about them, I still couldn&#8217;t figure out how to use them to prove that the queue implementation in the Herlihy and Wing paper is linearizable. (I even <a href="https://www.youtube.com/watch?v=8nNJw-k8Ma0&amp;t=15m">asked Leslie Lamport about it</a> at the  <a href="https://conf.tlapl.us/2021/">2021 TLA+ conference</a>).</p>



<p>Recently, Lamport published a book called <a href="https://lamport.azurewebsites.net/tla/science.pdf">The Science of Concurrent Programs</a> that describes in detail how to use prophecy variables to do the refinement mapping for the queue in the Herlihy and Wing paper. Because the best way to learn something is to explain it, I wanted to write a blog post about this.</p>



<p>In this post, I&#8217;m going to assume that readers have no prior knowledge about TLA+ or linearizability. What I want to do here is provide the reader with some intuition about the important concepts, enough to interest people to read further. There&#8217;s a lot of conceptual ground to cover: to understand prophecy variables and why they&#8217;re needed for the queue implementation in the Herlihy and Wing paper requires an understanding of <em>refinement mapping</em>. Understanding refinement mapping requires understanding the state-machine model that <a href="https://lamport.azurewebsites.net/tla/tla.html">TLA+</a> uses for modeling programs and systems. We&#8217;ll also need to cover what <em>linearizability</em> actually is. </p>



<p>We&#8217;ll going to start all of the way at the beginning: describing what it is that a program should do.</p>



<h2 class="wp-block-heading">What does it mean for a program to be correct?</h2>



<p>Think of an abstract data type (ADT) such as a stack, queue, or map. Each ADT defines a set of operations. For a stack, it&#8217;s <em>push</em> and <em>pop</em> , for a queue, it&#8217;s <em>enqueue</em> and <em>dequeue</em>, and for a map, it&#8217;s <em>get</em>, <em>set</em>, and <em>delete</em>. </p>



<p>Let&#8217;s focus on the queue, which will be a running example throughout this blog post, and is the ADT that is the primary example in the linearizability paper. Informally, we can say that <em>dequeue</em> returns the oldest enqueued value that has not been dequeued yet. It&#8217;s sometimes called a &#8220;FIFO&#8221; because it exhibits first-in-first-out behavior. But how do we describe this formally?</p>



<p>Think about how we would test that a given queue implementation behaves the way we expect. One approach is write a test that consists of a history of enqueue and dequeue operations, and check if our queue returns the expected values.</p>



<p>Here&#8217;s an example of an execution history, where <em>enq</em> is the enqueue operation and <em>deq</em> is the dequeue operation. Here I assume that <em>enq</em> does not return a value. </p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
enq("A")
enq("B")
deq() → "A"
enq("C")
deq() → "B"
deq() → "C"
</pre></div>


<p>If we have a queue implementation, we can make these calls against our implementation and check that, at each step in the history, the operation returns the expected value, something like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: java; title: ; notranslate">
Queue q = new Queue();
q.enq("A");
q.enq("B");
assertEquals("A", q.deq());
q.enq("C");
assertEquals("B", q.deq());
assertEquals("C", q.deq());
</pre></div>


<p>Of course, a single execution history is not sufficient to determine the correctness of our queue implementation. But we can describe the set of <em>every possible valid execution history for a queue. </em>The size of this set is infinite, so we can&#8217;t explicitly specify each history like we did above. But we can come up with a mathematical description of the set of every possible valid execution history, even though it&#8217;s an infinite set. </p>



<h2 class="wp-block-heading">Specifying valid execution histories: the transition-axiom method</h2>



<p>In order to specify how our system should behave, we need a way of describing all of its valid execution histories. We are particularly interested in a specification approach that works for concurrent and distributed systems, since those systems have historically proven to be notoriously difficult for humans to reason about.</p>



<p>In the 1980s, Leslie Lamport introduced a specification approach that he called the <em>transition-axiom</em> method. He later designed <a href="https://lamport.azurewebsites.net/tla/tla.html">TLA+</a> as a language to support specifying systems using the transition-axiom method.</p>



<p>The transition-axiom method uses a state-machine model to describe a system. You describe a system by describing:</p>



<ol class="wp-block-list">
<li>The set of valid initial states</li>



<li>The set of valid state transitions</li>
</ol>



<p>(Aside: I&#8217;m not covering the more advanced topic of <em><a href="https://www.learntla.com/core/temporal-logic.html">liveness</a> </em>in this post).</p>



<p>A set of related state transitions is referred to as an <em>action</em>. We use <em>actions</em> in TLA+ to model the events we care about (e.g., calling a function, sending a message).</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-17.png"><img loading="lazy" width="1024" height="764" data-attachment-id="4471" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-139/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-17.png" data-orig-size="1414,1056" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-17.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-17.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-17.png?w=1024" alt="" class="wp-image-4471" /></a></figure>



<p>With a state-machine description, we can generate all sequences that start at one of the initial states and transition according to the allowed transitions. A sequence of states is called a <strong><em>behavior</em></strong>. A pair of successive states is called a <strong><em>step</em></strong>. </p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-67.png"><img loading="lazy" width="1024" height="403" data-attachment-id="4648" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-189/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-67.png" data-orig-size="4278,1687" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-67.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-67.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-67.png?w=1024" alt="" class="wp-image-4648" /></a></figure>



<p>Each step in a behavior must be a member of one of the <strong><em>actions</em></strong>. In the diagram above, we would call the first step an <em>A-step</em> because it is a step that is a member of the A action.</p>



<p>We refer to the set that includes all of the actions as the <em>next-state</em> action, which is typically called <em>Next</em> in TLA+ specifications.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-71.png"><img loading="lazy" width="973" height="1023" data-attachment-id="4658" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-193/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-71.png" data-orig-size="1670,1757" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-71.png?w=285" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-71.png?w=973" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-71.png?w=973" alt="" class="wp-image-4658" /></a></figure>



<p>In the example above, we would say that A, B, C are <em>sub-actions</em> of the Next action.</p>



<p>We call the entire state-machine description a <strong><em>specification</em></strong>: it defines the set of all allowed behaviors.</p>



<p><img width="974" height="1023" src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXeGLj2lXqKI6GHDBIU8NpCF7dke-IXv7Yl_BGhM3b7kjqPn33aGN-V8gH6KTSr4q6eRYXlgJArbayMc4yt7NvYvKRzxXIlzGRcKCo1c62uYJA8wSXeulDHyLR4Xab4JIJCEBbxPY-0QXKOn7_pkpJrV69jA?key=N-j1F6NxFoahvLjm49EZug"><br>To make things concrete, let&#8217;s start with a simple example: a counter.</p>



<figure class="wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter"><div class="wp-block-embed__wrapper">
<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">You think distributed systems is about trying to accomplish complex tasks, and then you read the literature and it&#39;s like &quot;consider the problem of incrementing a counter&quot;, and it turns out that distributed systems is about how the simplest tasks become mind-bogglingly complex. <a href="https://t.co/4O2jfgfGQV">https://t.co/4O2jfgfGQV</a></p>&mdash; @norootcause@hachyderm.io on mastodon (@norootcause) <a href="https://twitter.com/norootcause/status/1263591890517032966?ref_src=twsrc%5Etfw">May 21, 2020</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>
</div></figure>



<h2 class="wp-block-heading">Modeling a counter with TLA+</h2>



<p>Consider a counter abstract data type, that has only two operations:</p>



<ul class="wp-block-list">
<li>inc &#8211; increment the counter</li>



<li>get &#8211; return the current value of the counter</li>



<li>reset &#8211; return the value of the counter to zero</li>
</ul>



<p>Here&#8217;s an example execution history.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
inc()
inc()
get() → 2
get() → 2
reset()
get() → 0
</pre></div>


<p>To model this counter in TLA+, we need to model the different operation types (inc, get, reset). We also need to model the return value for the get operation. I&#8217;ll model the operation with a state variable named <em>op</em>, and the return value with a state variable named <em>rval</em>.</p>



<p>But there&#8217;s one more thing we need to add to our model. In a state-machine model, we model an operation using one or more state transitions (steps) <strong><em>where at least one variable in the state changes</em></strong>. This is because all TLA+ models must allow what are called <em>stuttering steps</em>, where you have a state transition where none of the variables change. </p>



<p>This means we need to distinguish between two consecutive <em>inc</em> operations versus an <em>inc</em> operation followed by a stuttering step where nothing happens.</p>



<p>To do that, I&#8217;ll add a third variable to my model, which I&#8217;ll unimaginatively call <em>flag</em>. It&#8217;s a boolean variable, which I will toggle every time an operation happens. To sum up, my three state variables are:</p>



<ul class="wp-block-list">
<li><em>op</em> &#8211; the operation (&#8220;inc&#8221;, &#8220;get&#8221;, &#8220;reset&#8221;), which I&#8217;ll initialize to &#8220;&#8221; (empty string) in the first state</li>



<li><em>rval</em> &#8211; the return value for a get operation. It will be a special value called <em>none</em> for all of the other operations</li>



<li><em>flag</em> &#8211; a boolean that toggles on every (non-stuttering) state transition.</li>
</ul>



<p>Below is a depiction of an execution history and how this would be modeled as a behavior at TLA+. The text in red indicated which variable changed in the transition. As mentioned above, <strong><em>every transition associated with an operation must have at least one variable that changes value.</em></strong></p>



<p>Here&#8217;s a visual depiction of an execution history. Note how each event in the history is modeled as a step (pair of states) where at least one variable changes.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image.png"><img loading="lazy" width="1024" height="336" data-attachment-id="4401" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-122/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image.png" data-orig-size="2312,759" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image.png?w=1024" alt="" class="wp-image-4401" /></a></figure>



<p>To illustrate why we need the extra variables, consider the following three behaviors.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-1.png"><img loading="lazy" width="1024" height="369" data-attachment-id="4408" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-123/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-1.png" data-orig-size="2574,928" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-1.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-1.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-1.png?w=1024" alt="" class="wp-image-4408" /></a></figure>



<p>In behavior 1, there are no stuttering steps. In behavior 2, the last step is a stuttering step, so there is only one &#8220;get&#8221; invocation. In behavior 3, there are two stuttering steps. </p>



<h3 class="wp-block-heading">The internal variables</h3>



<p>Our model of a counter so far has defined the <em>external</em> variables, which are the only variables that we really care about as the <em>consumer </em>of a specification. If you gave me a set of all of the valid behaviors for a queue, where behaviors were described using only these external behaviors, that&#8217;s all I need to understand how a queue behaves.</p>



<p>However, the external variables aren&#8217;t sufficient for the <em>producer</em> of a specification to actually generate the set of valid behaviors. This is because we need to keep track of some additional state information: how many increments there have been since the last reset. This type of variable is known as an <em>internal</em> state variable. I&#8217;m going to call this particular internal state variable c.</p>



<p>Here&#8217;s behavior 1, with different color codings for the external and internal variables.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-2.png"><img loading="lazy" width="1024" height="222" data-attachment-id="4410" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-124/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-2.png" data-orig-size="2144,465" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-2.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-2.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-2.png?w=1024" alt="" class="wp-image-4410" /></a></figure>



<h3 class="wp-block-heading">The actions</h3>



<p>Here is a visual depiction of the permitted state transitions. Recall the set of permitted state transitions is called an <em>action</em>. For our counter, there are three actions, which corresponds to the three different operations we model: <em>inc</em>, <em>get,</em> and <em>reset</em>.</p>



<figure class="wp-block-image size-large is-resized"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-3.png"><img loading="lazy" width="772" height="1016" data-attachment-id="4412" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-125/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-3.png" data-orig-size="772,1016" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-3.png?w=228" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-3.png?w=772" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-3.png?w=772" alt="" class="wp-image-4412" style="width:372px;height:auto" /></a></figure>



<p>Each transition is depicted as two boxes with variables in it. The left-hand box shows the values of the variables before the state transition, and the right-hand box shows the values of the variables after the state transition. By convention we add a prime (&#8216;) to the variables to refer to their values after the state transition.</p>



<p>While the diagram depicts three actions, each action describes a <em>set of allowed state transitions</em>. As an example, here are two different state transitions that are both members of the <em>inc</em> set of permitted transitions.</p>



<ol class="wp-block-list">
<li>[flag=TRUE, c=5] → [flag=FALSE, c=6]</li>



<li>[flag=TRUE, c=8]→ [flag=FALSE, c=9]</li>
</ol>



<p>In TLA+ terminology, we call these two steps <em>inc </em>steps. Remember: in TLA+, <strong><em>all of the action is in the actions</em></strong>. We use <em>actions </em>(sets of permitted state transitions) to model the events that we care about.</p>



<h2 class="wp-block-heading">Modeling a queue with TLA+</h2>



<p>We&#8217;ll move on to our second example, which will form the basis for the rest of this post: a queue. A queue supports two operations, which I&#8217;ll call <em>enq</em> (for enqueue) and <em>deq</em> (for dequeue).</p>



<h3 class="wp-block-heading">Modeling execution histories as behaviors</h3>



<p>Recall our example of a valid execution history for a queue:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
enq("A")
enq("B")
deq() → "A"
enq("C")
deq() → "B"
</pre></div>


<p>We now have to model argument passing, since the enq operation takes an argument.</p>



<p>Here&#8217;s one way to model this execution history as a TLA+ behavior. </p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-88.png"><img loading="lazy" width="1024" height="139" data-attachment-id="4349" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-100/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-88.png" data-orig-size="1397,190" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-88.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-88.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-88.png?w=1024" alt="" class="wp-image-4349" /></a></figure>



<p>My model uses three state variables:</p>



<ul class="wp-block-list">
<li><em>op</em> &#8211; identifies which operation is being invoked (enq or deq)</li>



<li>arg &#8211; the argument being passed in the case of the enq operation</li>



<li>rval &#8211; the return value in the case of the deq operatoin</li>
</ul>



<p>TLA+ requires that we specify a value for every variable in every state, which means we need to specify a value for <em>arg</em> even for the deq operation, which doesn&#8217;t have an argument, and a value for <em>rval</em> for the enq operation, which doesn&#8217;t return a value. I defined a special value called <em>none</em> for this case.</p>



<p>In the first state, when the queue is empty, I chose to set op to the empty string (&#8220;&#8221;) and arg and rval to <em>none</em>.</p>



<h3 class="wp-block-heading">The internal variables</h3>



<p>For a queue, we need to keep track all of the values that have previously been enqueued, as well as the order in which they were enqueued.</p>



<p>TLA+ has a type called a <a href="https://www.learntla.com/core/operators.html#sequence">sequence</a> which I&#8217;ll use to encode this information: a sequence is like a list in Python.</p>



<p>I&#8217;ll add a new variable which I&#8217;ll unimaginatively call <em>d</em>, for data. Here&#8217;s what that behavior looks like with the internal variable.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-90.png"><img loading="lazy" width="1024" height="263" data-attachment-id="4351" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-102/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-90.png" data-orig-size="1436,369" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-90.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-90.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-90.png?w=1024" alt="" class="wp-image-4351" /></a></figure>



<h3 class="wp-block-heading">Modeling dequeues</h3>



<p>Recall that our queue supports two operations: <em>enqueue </em>and <em>dequeue</em>. We&#8217;ll start with the dequeue operation. I modeled it with an action called <em>Deq</em>. </p>



<figure class="wp-block-image size-large is-resized"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-59.png"><img loading="lazy" width="486" height="341" data-attachment-id="4266" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-71/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-59.png" data-orig-size="486,341" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-59.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-59.png?w=486" src="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-59.png?w=486" alt="" class="wp-image-4266" style="width:362px;height:auto" /></a></figure>



<p>Here are some examples of state transitions that are permitted by the <em>Deq</em> action. We call these <em>Deq</em> steps.</p>



<figure class="wp-block-image size-large is-resized"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-72.png"><img loading="lazy" width="444" height="1023" data-attachment-id="4665" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-194/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-72.png" data-orig-size="490,1130" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-72.png?w=130" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-72.png?w=444" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-72.png?w=444" alt="" class="wp-image-4665" style="width:425px;height:auto" /></a></figure>



<p>I&#8217;m not going to write much TLA+ code in this post, but to give you a feel for it, here is how you would write the Deq action in TLA+ syntax:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
Deq == /\ d # &lt;&lt;&gt;&gt;
       /\ op&#039; = &quot;deq&quot;
       /\ arg&#039; = none
       /\ rval&#039; = Head(d)
       /\ d&#039; = Tail(d)
</pre></div>


<p>The syntax of the first line might be a bit confusing if you&#8217;re not familiar with TLA+:</p>



<ul class="wp-block-list">
<li><code><em>#</em></code> is TLA+ for ≠</li>



<li><code>&lt;&lt;&gt;&gt;</code> is TLA+ for the empty sequence.</li>
</ul>



<h3 class="wp-block-heading">Modeling dequeues</h3>



<p>Here&#8217;s what the Enq action looks like:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-65.png"><img loading="lazy" width="486" height="313" data-attachment-id="4278" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-77/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-65.png" data-orig-size="486,313" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-65.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-65.png?w=486" src="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-65.png?w=486" alt="" class="wp-image-4278" /></a></figure>



<p>There&#8217;s non-determinism in this action: the value of <em>arg&#8217;</em> can be any valid value that we are allowed to put onto the queue. </p>



<p>I&#8217;ll spend just a little time in this section to give you a sense of how you would use TLA+ to represent the simple queue model.</p>



<p>To describe the queue in TLA+, we define a set called <em>Values</em> that contains all of the valid values that could be enqueued, as well as a special constant named <em>none</em> that means &#8220;not a value&#8221;.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
CONSTANTS Values, none
ASSUME none \notin Values
</pre></div>


<p>Then we would encode the Enq action like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
Enq == /\ op' = "enq"
       /\ arg' \in Values
       /\ rval' = none
       /\ d' = Append(d, arg')
</pre></div>


<p>The complete description of our queue, its <em>specification</em> that describes all permitted behaviors, looks like this:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-70.png"><img loading="lazy" width="1024" height="950" data-attachment-id="4654" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-192/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-70.png" data-orig-size="1182,1097" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-70.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-70.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-70.png?w=1024" alt="" class="wp-image-4654" /></a></figure>



<p>For completeness, here&#8217;s what the TLA+ specification looks like: (source in <a href="https://github.com/lorin/tla-prophecy/blob/master/Queue.tla">Queue.tla</a>).</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-69.png"><img loading="lazy" width="600" height="472" data-attachment-id="4651" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-191/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-69.png" data-orig-size="600,472" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-69.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-69.png?w=600" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-69.png?w=600" alt="" class="wp-image-4651" /></a></figure>



<p><em>Init</em> corresponds to our set of initial states, and <em>Next</em> corresponds to the next-state action, where the two sub-actions are <em>Enq</em> and <em>Deq</em>.</p>



<p>The last line, <em>Spec</em>, is the full specification. You can read this as: The initial state is chosen from the <em>Init</em> set of states, and every step is a <em>Next</em> step (every allowed state transition is a member of the set of state transitions defined by the <em>Next</em> action).</p>



<h2 class="wp-block-heading">Modeling concurrency</h2>



<p>In our queue model above, an enqueue or dequeue operation happens in one step (state transition). That&#8217;s fine for modeling sequential programs, but it&#8217;s not sufficient for modeling concurrent programs. In concurrent programs, the operations from two different threads can overlap in time.</p>



<p>To illustrate, imagine a scenario where there are three threads, t1, t2, t3. First, t1 enqueues &#8220;A&#8221;, and &#8220;B&#8221;. Then, t2 and t3 both call dequeue, and those queries overlap in time.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-94.png"><img loading="lazy" width="1024" height="436" data-attachment-id="4360" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-106/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-94.png" data-orig-size="1317,562" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-94.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-94.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-94.png?w=1024" alt="" class="wp-image-4360" /></a></figure>



<p>We want to model concurrent executions using a state-machine model. The diagram above, shows the start and end time for each operation. But to model this behavior, we don&#8217;t actually care about the exact start and end times: rather, we only care about the relative order of the start and events. </p>



<p>Below shows the threads in different columns. </p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
       t1                t2                t3
---------------   ----------------  ----------------
enq("A") &#91;start]
enq("A") &#91;end]
enq("B") &#91;start]
enq("B") &#91;end]
                  deq() &#91;start]
                                    deq() &#91;start]
                  deq() → "B" &#91;end]
                                    deq() → "A" &#91;end]
</pre></div>


<p>Here&#8217;s the same execution history, shown in a single column:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
t1: enq("A") &#91;start]
t1: enq()    &#91;end]
t1: enq("B") &#91;start]
t1: enq("B") &#91;end]
t2: deq() &#91;start]
t3: deq() &#91;start]
t2: deq() → "B" &#91;end]
t3: deq() → "A" &#91;end]
</pre></div>


<p>We can model execution histories like the one above using state machines. We were previously modeling an operation in a single state transition (step). Now we will need to use two steps to model an operation: one to indicate when the operation starts and the other to indicate when the operate ends.</p>



<p>Because each thread acts independently, we need to model variables that are local to threads. And, in fact, all externally visible variables are scoped to threads, because each operation always happens in the context of a particular thread. We do this by changing the variables to be functions where the domain is a thread id. For example, where we previously had <em>op=&#8221;enq&#8221;</em> where <em>op</em> was always a string, now <em>op</em> is a function that takes a thread id as an argument. Now we would have <em>op[t1]=&#8221;enq&#8221;</em> where <em>t1</em> is a thread id. (Functions in TLA+ use square brackets instead of round ones. you can think of these function variables as acting like dictionaries)</p>



<p>Here&#8217;s an example of a behavior that models the above execution history, showing only the external variables. Note that this behavior only shows the values that change in a state.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-100.png"><img loading="lazy" width="1024" height="507" data-attachment-id="4374" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-112/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-100.png" data-orig-size="1430,709" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-100.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-100.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-100.png?w=1024" alt="" class="wp-image-4374" /></a></figure>



<p>Note the following changes from the previous behaviors.</p>



<ul class="wp-block-list">
<li>There is a boolean flag, <em>done</em>, which indicates when the operation is complete.</li>



<li>The variables are all scoped to a specific thread.</li>
</ul>



<p>But what about the internal variable <em>d</em>?  </p>



<h2 class="wp-block-heading">Linearizability as correctness condition for concurrency</h2>



<p>We know what it means for a sequential queue to be correct. But <a href="/2023/12/31/consistency/">what do we want to consider correct when operations can overlap</a>? We need to decide what it means for an execution history of a queue to be correct in the face of overlapping operations. This is where linearizability comes in. From the abstract of the Herlihy and Wing paper:</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>Linearizability provides the illusion that each operation applied by concurrent processes takes effect instantaneously at some point between its invocation and its response, implying that the meaning of a concurrent object’s operations can be given by pre- and post-conditions.</p>
</blockquote>



<p>For our queue example, we say our queue is <em>linearizable</em> if, for every history where there are overlapping operations, we can identify a point in time between the start and end of the operation where the operation instantaneously &#8220;takes effect&#8221;, giving us a sequential execution history that is a correct execution history for a serial queue. This is a called a <em>linearization</em>. If every execution history for our queue has a linearization, then we say that our queue is linearizable.</p>



<p>To make this concrete, consider the following four observed execution histories of a queue, labeled (a), (b), (c), (d), adapted  from Fig. 1 of the Herlihy and Wing linearizable paper. Two of these histories are linearizable (they are labeled &#8220;OK&#8221;), and two are not (labeled &#8220;NOT OK&#8221;).</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-95.png"><img loading="lazy" width="851" height="1023" data-attachment-id="4361" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-107/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-95.png" data-orig-size="1511,1818" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-95.png?w=249" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-95.png?w=851" src="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-95.png?w=851" alt="" class="wp-image-4361" /></a></figure>



<p>For (a) and (c), we can identify points in time during the operation where it appears as if the operation has instantaneously taken effect.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-98.png"><img loading="lazy" width="1024" height="982" data-attachment-id="4369" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-110/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-98.png" data-orig-size="1532,1470" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-98.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-98.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-98.png?w=1024" alt="" class="wp-image-4369" /></a></figure>



<p>We now have a strict ordering of operations because there is no overlap, so we can write it as a sequential execution history. When the resulting sequential execution history is valid, it is called a <em>linearization</em>:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
(a)
t1: enq("X")
t2: enq("Y")
t2: deq() → "X"
t1: deq() → "Y"
t2: enq("Y")

(b)
t1: enq("X")
t2: deq() → "X"
</pre></div>


<h2 class="wp-block-heading">Modeling a linearizable queue in TLA+</h2>



<p>To repeat from the last section, a data structure is <em>linearizable</em> if, for every operation that executes on the data structure, we can identify a point in time between the start and the end of the operation where the operation <em>takes effect</em>.</p>



<p>We can model a linearizable queue by modeling each operation (enqueue/dequeue) as three actions:</p>



<ol class="wp-block-list">
<li>Start (invocation) of operation</li>



<li>When the operation takes effect</li>



<li>End (return) of operation</li>
</ol>



<p>Our model needs to permit all possible linearizations. For example, consider the following two linearizable histories. Note how the start/end timings of the operations are identical in both cases, but the return values are different.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-99.png"><img loading="lazy" width="1024" height="648" data-attachment-id="4371" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-111/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-99.png" data-orig-size="1407,891" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-99.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-99.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-99.png?w=1024" alt="" class="wp-image-4371" /></a></figure>



<p>In (1) the first deq operation returns &#8220;X&#8221;, and in (2) the first deq operation &#8220;returns Y&#8221;. Yet they are both valid histories. The difference between the two is the order in which the enq operations take effect. In (1), enq(&#8220;X&#8221;) takes effect before enq(&#8220;Y&#8221;), and in (2), enq(&#8220;Y&#8221;) takes effect before enq(&#8220;X&#8221;). Here are the two linearizations:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
(1)
enq("X")
enq("Y")
deq()→"X"
deq()→"Y"

(2)
enq("Y")
enq("X")
deq()→"X"
deq()→"Y"
</pre></div>


<p>Our TLA+ model of a linearizable queue will need to be able to model the relative order of when these operations take effect. This is where the internal variables come into play in our model: &#8220;taking effect&#8221; will mean updating internal variables of our model.</p>



<p>We need an additional variable to indicate whether the internal state has been updated or not for the current operation. I will call this variable <em>up</em> (for &#8220;updated&#8221;). It starts off as false when the operation starts, and is set to true when the internal state variable (d) has been updated. </p>



<p>Here&#8217;s a visual representation of the permitted state transitions (actions). As before, the left bubble shows the values that must be true in the first state for the transition to happen, and the second bubble shows which variables change.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-22.png"><img loading="lazy" width="1024" height="562" data-attachment-id="4495" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-144/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-22.png" data-orig-size="2416,1327" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-22.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-22.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-22.png?w=1024" alt="" class="wp-image-4495" /></a></figure>



<p>Since we now have to deal with multiple threads, we parameterize our action by thread id (t). You can see the TLA+ model here: <a href="https://github.com/lorin/tla-prophecy/blob/master/LinearizableQueue.tla">LinearizableQueue.tla</a>.</p>



<p>We now have a specification for a linearizable queue, which is a description of all valid behaviors. We can use this to verify that a specific queue implementation is linearizable. To demonstrate, let&#8217;s shift gears and talk about an example of an implementation.</p>



<h2 class="wp-block-heading">An example queue implementation</h2>



<p>Let&#8217;s consider an implementation of a queue that:</p>



<ol class="wp-block-list">
<li>Stores the data in a doubly-linked list</li>



<li>Uses a lock to protect the list</li>
</ol>



<p>A queue with four entries looks like this:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-87.png"><img loading="lazy" width="840" height="268" data-attachment-id="4326" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-99/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-87.png" data-orig-size="840,268" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-87.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-87.png?w=840" src="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-87.png?w=840" alt="" class="wp-image-4326" /></a></figure>



<p><a href="https://github.com/lorin/tla-prophecy/blob/master/queue.py">Here&#8217;s an implementation of this queue in Python</a> that I whipped up. I call it an &#8220;LLLQueue&#8221; for &#8220;locked-linked-list queue&#8221;. I believe that my LLLQueue is linearizable, and I&#8217;d like to verify this.</p>



<p>One way is to use TLA+ to build a specification of my LLLQueue, and then prove that every behavior of my LLLQueue is also a behavior of the LinearizableQueue specification. The way we do this is in TLA+ is by a technique called refinement mappings.</p>



<p>But, first, let&#8217;s model the LLLQueue in TLA+. </p>



<h2 class="wp-block-heading">Modeling the LLLQueue in TLA+ (PlusCal)</h2>



<p>In a traditional program, a node would be associated with a pointer or reference. I&#8217;m going to use numerical IDs for each node, starting with 1. I&#8217;ll use the value of 0 as a sentinel value meaning <em>null</em>.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-4.png"><img loading="lazy" width="840" height="310" data-attachment-id="4415" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-126/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-4.png" data-orig-size="840,310" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-4.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-4.png?w=840" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-4.png?w=840" alt="" class="wp-image-4415" /></a></figure>



<p>We&#8217;ll model this with three functions:</p>



<ul class="wp-block-list">
<li><em>vals</em> &#8211; maps node id to the value stored in the node</li>



<li><em>prev</em> &#8211; maps node id to the previous node id in the list</li>



<li><em>next</em> &#8211; maps node id to the next node id in the list</li>
</ul>



<p>Here are these functions in table form for the queue shown above:</p>



<figure class="wp-block-table"><table class="has-fixed-layout"><thead><tr><th>node id</th><th>vals</th></tr></thead><tbody><tr><td>1</td><td>A</td></tr><tr><td>2</td><td>B</td></tr><tr><td>3</td><td>C</td></tr><tr><td>4</td><td>D</td></tr></tbody></table><figcaption class="wp-element-caption">The <em>vals</em> function</figcaption></figure>



<figure class="wp-block-table"><table><thead><tr><th>node id</th><th>prev</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>3</td></tr><tr><td>3</td><td>4</td></tr><tr><td>4</td><td>0 (null)</td></tr></tbody></table><figcaption class="wp-element-caption">The <em>prev</em> function</figcaption></figure>



<figure class="wp-block-table"><table class="has-fixed-layout"><thead><tr><th>node id</th><th>next</th></tr></thead><tbody><tr><td>1</td><td>0 (null)</td></tr><tr><td>2</td><td>1</td></tr><tr><td>3</td><td>2</td></tr><tr><td>4</td><td>3</td></tr></tbody></table><figcaption class="wp-element-caption">The <em>next</em> function</figcaption></figure>



<p>It&#8217;s easier for me to use <a href="https://www.learntla.com/core/pluscal.html">PlusCal</a> to model an LLLQueue than to do it directly in TLA+. PlusCal is a language for specifying algorithms that can be automatically translated to a TLA+ specification.</p>



<p>It would take too much space to describe the full PlusCal model and how it translates, but I&#8217;ll try to give a flavor of it. As a reminder, here&#8217;s the implementation of the enqueue method in my <a href="https://github.com/lorin/tla-prophecy/blob/master/queue.py">Python implementation</a>.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: python; title: ; notranslate">
    def enqueue(self, val):
        self.lock.acquire()
        new_tail = Node(val=val, next=self.tail)
        if self.is_empty():
            self.head = new_tail
        else:
            self.tail.prev = new_tail
        self.tail = new_tail
        self.lock.release()
</pre></div>


<p>Here&#8217;s what <a href="https://github.com/lorin/tla-prophecy/blob/master/LLLQueue.tla">my PlusCal model</a> looks like for the enqueue operation:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
procedure enqueue(val)
variable new_tail;
begin
E1: acquire(lock);
E2: with n \in AllPossibleNodes \ nodes do
        Node(n, val, tail);
        new_tail := n;
    end with;
E3: if IsEmpty then
        head := new_tail;
    else
        prev&#91;tail] := new_tail;
    end if;
    tail := new_tail;
E4: release(lock);
E5: return;
end procedure;
</pre></div>


<p>Note the labels (E1, E2, E3, E4, E5) here. The translator turns those labels into TLA+ actions (state transitions permitted by the spec). In my model, an enqueue operation is implemented by five actions.</p>



<h2 class="wp-block-heading">Refinement mappings</h2>



<p>One of the use cases for formal methods is to verify that a (low-level) implementation conforms to a (higher-level) specification. In TLA+, all specs are sets of behaviors, so the way we do this is that we:</p>



<ul class="wp-block-list">
<li>create a high-level specification that models the desired behavior of the system</li>



<li>create a lower-level specification that captures some implementation details of interest</li>



<li>show that every behavior of the low-level specification is among the set of behaviors of the higher-level specification, <em><strong>considering only the externally visible variables</strong></em></li>
</ul>



<p>In the diagram below, <em>Abs</em> (for abstract) represents the set of valid (externally visible) behaviors of a high-level specification, and <em>Impl</em> (for implementation) represents the set of valid (externally visible) behaviors for a low-level specification. For Impl to implement Abs, the Impl behaviors must be a subset of the Abs behaviors.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-23.png"><img loading="lazy" width="830" height="972" data-attachment-id="4183" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-35/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-23.png" data-orig-size="830,972" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-23.png?w=256" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-23.png?w=830" src="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-23.png?w=830" alt="" class="wp-image-4183" /></a></figure>



<p>We want to be able to prove that <em>Impl</em> implements <em>Abs</em>. In other words, we want to be able to prove that every externally visible behavior in <em>Impl</em> is also an externally visible behavior in <em>Abs</em>.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-19.png"><img loading="lazy" width="1024" height="462" data-attachment-id="4486" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-141/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-19.png" data-orig-size="2154,972" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-19.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-19.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-19.png?w=1024" alt="" class="wp-image-4486" /></a><figcaption class="wp-element-caption">We want to be able to find a corresponding Abs behavior for every Impl behavior</figcaption></figure>



<p>One approach is to do this by construction: if we can take any behavior in Impl and construct a behavior in Abs with the same externally visible values, then we have proved that Impl implements Abs.</p>



<p>As Lamport and Abadi put it in their paper <a href="https://lamport.azurewebsites.net/pubs/pubs.html#abadi-existence">The Existence of Refinement Mappings</a> back in 1991:</p>



<p><em>To prove that S1 implements S2, it suffices to prove that if S1 allows the behavior<br>&lt;&lt;(e0,z0), (e1, z1), (e2, z2), &#8230;&gt;&gt;<br></em><br><em>where [ei is a state of the externally visible component and] the zi are internal states, then there exists internal states yi such that S2 allows<br>&lt;&lt;(e0,y0), (e1, y1), (e2, y2), &#8230; &gt;&gt;</em></p>



<p>For each behavior B1  in <em>Impl</em>, if we can find values for internal variables in a behavior of Abs, B2, where the external variables of B2 match the external variables of B1, then that&#8217;s sufficient to prove that <em>Impl</em> implements <em>Abs</em>.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-24.png"><img loading="lazy" width="1024" height="537" data-attachment-id="4187" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-36/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-24.png" data-orig-size="1851,972" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-24.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-24.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-24.png?w=1024" alt="" class="wp-image-4187" /></a></figure>



<p>To show that <em>Impl</em> implements <em>Abs</em>, we need to find a <em>refinement mapping</em>, which is a function that will map every behavior in Impl to a behavior in Abs. </p>



<p>A refinement mapping takes a state in an <em>Impl </em>behavior as input and maps to an Abs state, such that:</p>



<ol class="wp-block-list">
<li>the external variables are the same in both the Impl state and the Abs state</li>



<li>if a pair of states is a permitted <em>Impl</em> state transition, then the corresponding mapped pair of states must be a permitted <em>Abs</em> state transition</li>
</ol>



<p>Or, to reword statement 2: if <em>NextImpl</em> is the next-state action for Impl (i.e., the set of allowed state transitions for Impl), and <em>NextAbs</em> is the next-state action for Abs, then under the refinement mapping, every <em>NextImpl</em>-step must map to a <em>NextAbs</em> step.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-20.png"><img loading="lazy" width="1024" height="476" data-attachment-id="4490" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-142/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-20.png" data-orig-size="1275,593" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-20.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-20.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-20.png?w=1024" alt="" class="wp-image-4490" /></a></figure>



<p>(Note: this technically isn&#8217;t completely correct, we&#8217;ll see why in the next section).</p>



<h3 class="wp-block-heading">Example: our LLLQueue</h3>



<p>We want to verify that our <a href="https://github.com/lorin/tla-prophecy/blob/master/queue.py">Python queue implementation</a> is linearizable.  We&#8217;ve modeled our Python queue in TLA+ as <a href="https://github.com/lorin/tla-prophecy/blob/master/LLLQueue.tla">LLLQueue</a>, and to prove that it&#8217;s linearizable, we need to show that a refinement mapping exists between the LLLQueue spec and the <a href="https://github.com/lorin/tla-prophecy/blob/master/LinearizableQueue.tla">LinearizableQueue</a> spec. This means we need to show that there&#8217;s a mapping from LLLQueue&#8217;s internal variables to LinearizableQueue&#8217;s internal variables. </p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-23.png"><img loading="lazy" width="656" height="1024" data-attachment-id="4497" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-145/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-23.png" data-orig-size="760,1187" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-23.png?w=192" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-23.png?w=656" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-23.png?w=656" alt="" class="wp-image-4497" /></a></figure>



<p>We need to define the internal variables in LinearizableQueue (up, d) in terms of the variables in LLLQueue (nodes, vals, next, prev, head, tail, lock, new_tail, empty, pc, stack) in such a way that all LLLQueue behaviors are also LinearizableQueue behaviors under the mapping.</p>



<h3 class="wp-block-heading">Internal variable: d</h3>



<p>The internal variable <em>d</em> in LinearizableQueue is a sequence which contains the values of the queue, where the first element of the sequence is the head of the queue.</p>



<p>Looking back at our example LLLQueue queue:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-4.png"><img loading="lazy" width="840" height="310" data-attachment-id="4415" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-126/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-4.png" data-orig-size="840,310" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-4.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-4.png?w=840" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-4.png?w=840" alt="" class="wp-image-4415" /></a></figure>



<p>We need a mapping that, for this example, results in: d =〈A,B,C,D 〉</p>



<p>I defined a recursive operator that I named <em>Data</em> such that when you call <em>Data(head)</em>, it evaluates to a sequence with the values of the queue. </p>



<h3 class="wp-block-heading">Internal variable: up</h3>



<p>The variable <em>up</em> is a boolean flag that flips from false to true after the value has been added to the queue.</p>



<p>In our LLLQueue model, the new node gets added to the tail by the action <em>E3</em>. In PlusCal models, there&#8217;s a variable named <em>pc</em> (program counter) that records the current execution state of the program. You can think of <em>pc</em> like a breakpoint that points to the action that will be executed on the next step of the program. We want <em>up</em> to be true after action E3. You can see how the <em>up</em> mapping is defined at the bottom of the <a href="https://github.com/lorin/tla-prophecy/blob/master/LLLQueue.tla">LLLQueue.tla</a> file.</p>



<h3 class="wp-block-heading">Refinement mapping and stuttering</h3>



<p>Let&#8217;s consider a behavior of the LLLQueue spec that enqueues a single value onto the queue, with a refinement mapping to the LinearizableQueue spec:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-24.png"><img loading="lazy" width="1024" height="391" data-attachment-id="4507" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-146/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-24.png" data-orig-size="2320,887" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-24.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-24.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-24.png?w=1024" alt="" class="wp-image-4507" /></a></figure>



<p>In the LinearizableQueue spec, an enqueue operation is implemented by three actions:</p>



<ol class="wp-block-list">
<li>EnqStart</li>



<li>EnqTakesEffect</li>



<li>EnqEnd</li>
</ol>



<p>In the LLLQueue spec, an enqueue operation is implemented by seven actions: enq, e1, &#8230;, e5, enqdone. That means that the LLLQueue enqueue behavior involves eight distinct states, where the corresponding LinearizableQueue behavior involves only four distinct states. Sometimes, different LLLQueue states map to the same LinearizableQueue state. In the figure above, SI2,SI3,SI4 all map to SA2, and SI5,SI6,SI7 all map to SA3. I&#8217;ve color-coded the states in the LinearizableQueue behavior such that states that have the same color are identical. </p>



<p>As a result, some state transitions in the refinement mapping are not LinearizableQueue actions, but are instead transitions where none of the variables change at all.  These are called <em>stuttering steps</em>. In TLA+, stuttering steps are always permitted in all behaviors. </p>



<h2 class="wp-block-heading">A problem with refinement mappings: the Herlihy and Wing queue</h2>



<p>The last section of the Herlihy and Wing paper describes how to prove that a concurrent data structure&#8217;s operations are linearizable. In the process, the authors also point out a problem with refinement mappings. They illustrate the problem using a particular queue implementation, which we&#8217;ll call the &#8220;Herlihy &amp; Wing queue&#8221;, or H&amp;W Queue for short.</p>



<p>Imagine an array of infinite length, where all of the values are initially <em>null</em>. There&#8217;s a variable named <em>back</em> which points to the next available free spot in the queue.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-5.png"><img loading="lazy" width="495" height="223" data-attachment-id="4424" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-127/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-5.png" data-orig-size="495,223" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-5.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-5.png?w=495" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-5.png?w=495" alt="" class="wp-image-4424" /></a></figure>



<h3 class="wp-block-heading">Enqueueing</h3>



<p>To enqueue a value onto the Herlihy &amp; Wing queue involves two steps:</p>



<ol class="wp-block-list">
<li>Increment the <em>back </em>variable</li>



<li>Write the value into the spot where the <em>back</em> variable pointed before being incremented .</li>
</ol>



<p>Here&#8217;s what the queue looks like after three values (A,B,C) have been enqueued:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-6.png"><img loading="lazy" width="481" height="232" data-attachment-id="4427" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-128/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-6.png" data-orig-size="481,232" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-6.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-6.png?w=481" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-6.png?w=481" alt="" class="wp-image-4427" /></a></figure>



<p>Note how <em>back</em> always points to the next free spot. </p>



<h3 class="wp-block-heading">Dequeueing</h3>



<p>To dequeue, you start at index 0, and then you sweep through the array, looking for the first non-null value. Then you atomically copy that value out of the array and set the array element to null.</p>



<p>Here&#8217;s what a dequeue operation on the queue above would look like:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-7.png"><img loading="lazy" width="612" height="232" data-attachment-id="4429" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-129/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-7.png" data-orig-size="612,232" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-7.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-7.png?w=612" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-7.png?w=612" alt="" class="wp-image-4429" /></a></figure>



<p>The Deq operation returned A, and the first element in the array has been set to null.</p>



<p>If you were to enqueue another value (say, <em>D</em>), the array would now look like this:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-8.png"><img loading="lazy" width="481" height="230" data-attachment-id="4432" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-130/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-8.png" data-orig-size="481,230" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-8.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-8.png?w=481" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-8.png?w=481" alt="" class="wp-image-4432" /></a></figure>



<p>Note: the elements at the beginning of the queue that get set to <em>null</em> after a dequeue don&#8217;t get reclaimed. The authors note that this is inefficient, but the purpose of this queue is to illustrate a particular issue with refinement mappings, not to be a practical queue implementation.</p>



<h3 class="wp-block-heading">H&amp;W Queue pseudocode</h3>



<p>Here&#8217;s the pseudocode for Herlihy &amp; Wing queue, which I copied directly from the paper. The two operations are <em>Enq</em> (enqueue) and <em>Deq </em>(dequeue).</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate">
rep = record {back: int, items: array &#91;item]}

Enq = proc (q: queue, x: item)
  i: int := INC(q.back) % Allocate a new slot
  STORE (q.items&#91;i], x) % Fill it.
  end Enq

Deq = proc (q: queue) returns (item)
  while true do
    range: int := READ(q.back) - 1
    for i: int in 1 .. range do
      x: item := SWAP(q.items&#91;i], null)
      if x ~= null then return(x) end
      end
    end
end Deq
</pre></div>


<p>This algorithm relies on the following atomic operations on shared variables:</p>



<ul class="wp-block-list">
<li>INC &#8211; atomically increment a variable and return the pre-incremented value</li>



<li>STORE &#8211; atomically write an element into the array</li>



<li>READ &#8211; atomically read an element in the array (copy the value to a local variable)</li>



<li>SWAP &#8211; atomically write an element of an array and return the previous array value</li>
</ul>



<h3 class="wp-block-heading">H&amp;W Queue implementation in C++</h3>



<p>Here&#8217;s my attempt at implementing this queue using C++. I chose C++ because of its support for <a href="https://en.cppreference.com/w/cpp/atomic/atomic">atomic types</a>. C++&#8217;s atomic types support all four of the atomic operations required of the H&amp;W queue.</p>



<figure class="wp-block-table"><table class="has-fixed-layout"><thead><tr><th>Atomic operation</th><th>Description</th><th>C++ equivalent</th></tr></thead><tbody><tr><td>INC</td><td>atomically increment a variable and return the pre-incremented value</td><td><a href="https://en.cppreference.com/w/cpp/atomic/atomic/fetch_add">std::atomic&lt;T&gt;::fetch_add</a></td></tr><tr><td>STORE</td><td>atomically write an element into the array</td><td><a href="https://en.cppreference.com/w/cpp/atomic/atomic_store">std::atomic_store</a></td></tr><tr><td>READ </td><td>atomically read an element in the array (copy the value to a local variable)</td><td><a href="https://en.cppreference.com/w/cpp/atomic/atomic_load">std::atomic_load</a></td></tr><tr><td>SWAP</td><td>atomically write an element of an array and return the previous array value</td><td><a href="atomic_exchange">std::atomic_exchange</a></td></tr></tbody></table></figure>



<p>My queue implementation stores pointers to objects of parameterized type <em>T</em>. Note the atomic types of the member variables. The <em>back</em> variable and elements of the <em>items</em> array need to be atomics because we will be invoking atomic operations on them.</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; title: ; notranslate">
template &lt;typename T&gt;
class Queue {
    atomic&lt;int&gt; back;
    atomic&lt;T *&gt; *items;

public:
    Queue(int sz) : back(0), items(new atomic&lt;T *&gt;&#91;sz]) {}
    ~Queue() { delete&#91;] items; }

    void enq(T *x);
    T *deq();
};

template&lt;typename T&gt;
void Queue&lt;T&gt;::enq(T *x) {
    int i = back.fetch_add(1);
    std::atomic_store(&amp;items&#91;i], x);
}

template&lt;typename T&gt;
T *Queue&lt;T&gt;::deq() {
    while (true) {
        int range = std::atomic_load(&amp;back);
        for (int i = 0; i &lt; range; ++i) {
            T *x = std::atomic_exchange(&amp;items&#91;i], nullptr);
            if (x != nullptr) return x;
        }
    }
}
</pre></div>


<p>We can write <em>enq</em> and <em>deq</em> to look more like idiomatic C++ by using the following atomic operators:</p>



<ul class="wp-block-list">
<li><a href="https://en.cppreference.com/w/cpp/atomic/atomic/operator_arith">T operator++( int )</a> instead of <em>fetch_add</em></li>



<li><a href="https://en.cppreference.com/w/cpp/atomic/atomic/operator%3D">std::atomic::operator=</a> instead of <em>atomic_store</em></li>



<li><a href="https://en.cppreference.com/w/cpp/atomic/atomic/operator_T">std::atomic::operator T</a> instead of <em>atomic_load</em></li>
</ul>



<p>Using these operators, enq and deq look like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; title: ; notranslate">
template&lt;typename T&gt;
void Queue&lt;T&gt;::enq(T *x) {
    int i = back++;
    items&#91;i] = x;
}

template&lt;typename T&gt;
T *Queue&lt;T&gt;::deq() {
    while (true) {
        int range = back;
        for (int i = 0; i &lt; range; ++i) {
            T *x = std::atomic_exchange(&amp;items&#91;i], nullptr);
            if (x != nullptr) return x;
        }
    }
}
</pre></div>


<p>Note that this is, indeed, a linearizable queue, even though it does not use mutual exclusion: tthere are no critical sections in the algorithm.</p>



<h3 class="wp-block-heading">Modeling the H&amp;W queue in TLA+ with PlusCal</h3>



<p>The H&amp;W queue is straightforward to model in PlusCal. If you&#8217;re interested in learning PlusCal, it&#8217;s actually a great example to use. See <a href="https://github.com/lorin/tla-prophecy/blob/master/HWQueue.tla">HWQueue.tla</a> for my implementation.</p>



<h3 class="wp-block-heading">Refinement mapping challenge: what&#8217;s the state of the queue?</h3>



<p>Note how the enq method isn&#8217;t an atomic operation. Rather, it&#8217;s made up of two atomic operations:</p>



<ol class="wp-block-list">
<li>Increment <em>back </em></li>



<li>Store the element in the array</li>
</ol>



<p>Now, imagine that a thread, <em>t1</em>, comes along, to enqueue a value to the queue. It starts off by incrementing <em>back</em>.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-12.png"><img loading="lazy" width="576" height="362" data-attachment-id="4447" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-134/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-12.png" data-orig-size="576,362" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-12.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-12.png?w=576" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-12.png?w=576" alt="" class="wp-image-4447" /></a></figure>



<p>But before it can continue, a new thread, t2, gets scheduled, which also increments <em>back</em>:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-13.png"><img loading="lazy" width="576" height="433" data-attachment-id="4448" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-135/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-13.png" data-orig-size="576,433" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-13.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-13.png?w=576" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-13.png?w=576" alt="" class="wp-image-4448" /></a></figure>



<p>t2 then completes the operation:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-14.png"><img loading="lazy" width="576" height="368" data-attachment-id="4450" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-136/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-14.png" data-orig-size="576,368" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-14.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-14.png?w=576" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-14.png?w=576" alt="" class="wp-image-4450" /></a></figure>



<p>Finally, a new thread, t3, comes along that executes the dequeue operation:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-16.png"><img loading="lazy" width="576" height="452" data-attachment-id="4453" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-138/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-16.png" data-orig-size="576,452" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-16.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-16.png?w=576" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-16.png?w=576" alt="" class="wp-image-4453" /></a><figcaption class="wp-element-caption">Example state of the H&amp;W queue</figcaption></figure>



<p>Now, here&#8217;s the question: <em>What value will the pending Deq() operation return: A or B?</em></p>



<p>The answer: <strong><em>it depends on how the threads t1 and t3 will be scheduled</em></strong>. If t1 is scheduled first, it will write A to position 0, and then t3 will read it. On the other hand, if t3 is scheduled first, it will advance its <em>i</em> pointer to the next non-null value, which is position 1, and return <em>B</em>.</p>



<p>Recall back in the section &#8220;Modeling a queue with TLA+ &gt; The internal variables&#8221; that our model for a linearizable queue had an internal variable, named <em>d</em>, that contained the elements of the queue in the order in which they had been enqueued.</p>



<p>If we were to write a refinement mapping of this implementation to our linearizable specification,  for the state above, we&#8217;d have to decide whether the mapping for the above state should be. The problem is that no such refinement mapping exists. </p>



<p>Here are the only options that make sense for the example above:</p>



<ol class="wp-block-list">
<li>d =〈B〉</li>



<li>d =〈A,B〉</li>



<li>d =〈B,A〉</li>
</ol>



<p>As a reminder, here are the valid state transitions for the LinearizableQueue spec.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-29.png"><img loading="lazy" width="1024" height="562" data-attachment-id="4533" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-151/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-29.png" data-orig-size="2416,1327" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-29.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-29.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-29.png?w=1024" alt="" class="wp-image-4533" /></a></figure>



<h3 class="wp-block-heading">Option 1: d =〈B〉</h3>



<p>Let&#8217;s say we define our refinement mapping by using the populated elements of the queue. That would result in a mapping of d =〈B〉. </p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-30.png"><img loading="lazy" width="1024" height="685" data-attachment-id="4535" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-152/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-30.png" data-orig-size="1895,1268" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-30.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-30.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-30.png?w=1024" alt="" class="wp-image-4535" /></a></figure>



<p>The problem is that if t1 gets scheduled first and adds value <em>A</em> to array position 0, then an element will be added to the head of <em>d</em>. But the only LinearizableQueue action that adds an element to <em>d</em> is <em>EnqTakeEffect, </em>which adds a value to the to the end of d. There is no LinearizableQueue action that allows prepending to <em>d</em>, so this cannot be a valid refinement mapping.</p>



<h3 class="wp-block-heading">Option 2: d =〈A,B〉</h3>



<p>Let&#8217;s say we had chosen instead a refinement mapping of <em>d =〈A,B〉</em>for the state above. In that case, if t3 gets scheduled first, then it will result in a value being removed from the end of <em>d</em>, which is not one of the actions of the LinearizableQueueSpec, which means that this can&#8217;t be a valid refinement mapping either.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-32.png"><img loading="lazy" width="1024" height="434" data-attachment-id="4540" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-154/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-32.png" data-orig-size="2985,1268" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-32.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-32.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-32.png?w=1024" alt="" class="wp-image-4540" /></a></figure>



<h3 class="wp-block-heading">Option 3: d =〈B,A〉</h3>



<p>Finally, assume we had chosen d =〈B,A〉as our refinement mapping. Then, if t1 gets scheduled first, and then t3, we will end up with a state transition that removes an element from the end of <em>d</em>, which is not a LinearizableQueue action. </p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-33.png"><img loading="lazy" width="1024" height="434" data-attachment-id="4541" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-155/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-33.png" data-orig-size="2985,1268" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-33.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-33.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-33.png?w=1024" alt="" class="wp-image-4541" /></a></figure>



<p>Whichever refinement mapping we choose, it is possible that the resulting behavior will violate the LinearizableQueue spec. This means that we can&#8217;t come up with a refinement mapping where every behavior of <em>Impl </em>maps to a valid behavior of <em>Abs</em>, even though <em>Impl</em> implements a  linearizable queue!</p>



<p>What Lamport and others believed at the time was that this type of refinement mapping always existed if <em>Impl</em> did indeed implement <em>Abs</em>. With this counterexample, Herlihy &amp; Wing demonstrated that this was not always the case. </p>



<h2 class="wp-block-heading">Elements in H&amp;W queue aren&#8217;t totally ordered</h2>



<p>In a typical queue implementation, there is a total ordering of elements that have been enqueued. The odd thing about the Herlihy &amp; Wing queue is that this isn&#8217;t the case.</p>



<p>If we look back at our example above:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-34.png"><img loading="lazy" width="589" height="455" data-attachment-id="4546" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-156/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-34.png" data-orig-size="589,455" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-34.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-34.png?w=589" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-34.png?w=589" alt="" class="wp-image-4546" /></a><figcaption class="wp-element-caption">If t1 is scheduled first, A is dequeued next. If t3 is scheduled first, B is dequeued next.</figcaption></figure>



<p>Either A or B might be dequeued next, depending on the ordering of t1 and t3. Here&#8217;s another example where the value dequeued next depends on the ordering of the threads t1 and t3.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-38.png"><img loading="lazy" width="580" height="451" data-attachment-id="4553" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-160/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-38.png" data-orig-size="580,451" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-38.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-38.png?w=580" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-38.png?w=580" alt="" class="wp-image-4553" /></a><figcaption class="wp-element-caption">If t2 is scheduled first, B is dequeued next. If t3 is scheduled first, A is dequeued next.</figcaption></figure>



<p>However, there are also scenarios where there is a clear ordering among values that have been added to the queue. Consider a case similar to the one above, except that t2 has not yet incremented the <em>back</em> variable:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-39.png"><img loading="lazy" width="580" height="449" data-attachment-id="4555" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-161/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-39.png" data-orig-size="580,449" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-39.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-39.png?w=580" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-39.png?w=580" alt="" class="wp-image-4555" /></a></figure>



<p>In this configuration, A is guaranteed to be dequeued before B. More generally, if t1 writes A to the array before t2 increments the <em>back</em> variable, then A is guaranteed to be dequeued before B.</p>



<p>In the linearizability paper, Herlihy &amp; Wing use a mapping approach where they identify a set of <em>possible mappings </em>rather than a single mapping.</p>



<p>Let&#8217;s think back to this scenario:</p>



<figure class="wp-block-image size-large is-resized"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-34.png"><img loading="lazy" width="589" height="455" data-attachment-id="4546" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-156/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-34.png" data-orig-size="589,455" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-34.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-34.png?w=589" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-34.png?w=589" alt="" class="wp-image-4546" style="width:472px;height:auto" /></a><figcaption class="wp-element-caption">If t1 is scheduled first, A is dequeued next. If t3 is scheduled first, B is dequeued next.</figcaption></figure>



<p> In the scenario above, in the Herlihy and Wing approach, the mapping would be to the set of all possible values of <em>queue</em>. </p>



<ul class="wp-block-list">
<li>queue ∈ {〈B〉,〈A,B〉, 〈B,A〉}</li>
</ul>



<p>Lamport took a different approach to resolving this issue. He rescued the idea of refinement mappings by introducing a concept called <em>prophecy variables</em></p>



<h2 class="wp-block-heading">Prophecy</h2>



<p>The Herlihy &amp; Wing queue&#8217;s behavior is non-deterministic: we don&#8217;t know the order in which values will be dequeued, because it depends on the scheduling of the threads. But imagine if we know in advance the order in which the values were dequeued.</p>



<p>It turns out that if we can <em>predict</em> the order in which the values would be dequeued, then we can do a refinement mapping to the our LinearizableQueue model.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-46.png"><img loading="lazy" width="647" height="655" data-attachment-id="4578" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-168/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-46.png" data-orig-size="647,655" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-46.png?w=296" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-46.png?w=647" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-46.png?w=647" alt="" class="wp-image-4578" /></a></figure>



<p>This is the idea behind <em>prophecy variables</em>: we predict certain values that we need for refinement mapping. </p>



<p>Adding a prophecy variable gives us another specification (one which has a new variable), and this is the specification where we can define a refinement mapping. For example, we add a prophecy to our <a href="https://github.com/lorin/tla-prophecy/blob/master/HWQueue.tla">HWQueue</a> model and call the new model <a href="https://github.com/lorin/tla-prophecy/blob/master/HWQueueProphecy.tla">HWQueueProphecy</a>.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-47.png"><img loading="lazy" width="1024" height="567" data-attachment-id="4580" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-169/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-47.png" data-orig-size="1356,752" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-47.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-47.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-47.png?w=1024" alt="" class="wp-image-4580" /></a></figure>



<p>In HWQueueProphecy, we maintain a sequence of the predicted order in which values will be dequeued. Every time a thread invokes the enqueue operation, we add a new value to our sequence of predicted dequeue operations.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-50.png"><img loading="lazy" width="1024" height="993" data-attachment-id="4598" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-172/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-50.png" data-orig-size="1165,1130" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-50.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-50.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-50.png?w=1024" alt="" class="wp-image-4598" /></a></figure>



<p>The predicted value is chosen at random from the set of all possible values: it is not necessarily related to either the value currently being enqueued or the current state of the queue.</p>



<p>Now, these predictions might not actually come true. In fact, they almost certainly won&#8217;t come true, because we&#8217;re much more likely to predict at least one value incorrectly. In the example above, the actual dequeueing order will be〈A,B,C〉, which is different from the predicted dequeueing order of〈Q,W,E〉</p>



<p> However, the refinement mapping will still work, even though the predictions will often be wrong, if we set things up correctly. We&#8217;ll tackle that next.</p>



<h3 class="wp-block-heading">Prophecy requirements</h3>



<p>We want to show that <em>HWQueue</em> implements <em>LinearizableQueue</em>. But it&#8217;s only HWQueueProphecy that we can show implements LinearizableQueue using a refinement mapping.</p>



<h4 class="wp-block-heading">1. <strong><em>A correct prophecy must exist for every HWQueue behavior</em></strong></h4>



<p>Every behavior in HWQueue must have a corresponding behavior in HWQueueProphecy. That correspondence happens when the prophecy accurately predicts the dequeueing order.</p>



<p>This means that, for each behavior in HWQueue, there must be a behavior in HWQueueProphecy which is identical except that the HWQueueProphecy behaviors have an additional <em>p</em> variable with the prophecy.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-48.png"><img loading="lazy" width="1024" height="438" data-attachment-id="4591" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-170/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-48.png" data-orig-size="2149,921" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-48.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-48.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-48.png?w=1024" alt="" class="wp-image-4591" /></a></figure>



<p>To ensure that a correct prophecy always exists, we just make sure that we always predict from the set of all possible values. </p>



<p>In the case of HWQueueProphecy, we are always enqueueing values from the set {A,&#8230;,Z}, and so as long as we draw predictions from the set {A,&#8230;,Z}, we are guaranteed that the correct prediction is among the set we are predicting from. </p>



<h4 class="wp-block-heading">2. <em>Every HWQueueProphecy</em> <em>behavior</em> <em>with an incorrect prophecy must correspond to at least one HWQueue behavior</em></h4>



<p>Most of the time, our predictions will be incorrect. We need to ensure that, when we prophesize incorrectly, the resulting behavior is still a valid HWQueue behavior, and is also still a valid LinearizableQueue behavior under refinement.</p>



<p>We do this by writing our HWQueueProphecy specification such that, if our prediction turns out to be incorrect (e.g., we predict <em>A</em> as the next value to be dequeued, and the next value that will actually be dequeued is <em>B</em>), we disallow the dequeue from happening.</p>



<p>In other words, <strong><em>we disallow state transitions that would violate our predictions.</em></strong></p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-52.png"><img loading="lazy" width="1024" height="775" data-attachment-id="4604" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-174/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-52.png" data-orig-size="1032,782" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-52.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-52.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-52.png?w=1024" alt="" class="wp-image-4604" /></a></figure>



<p>This means we add a new enabling condition to one of the dequeue actions. Now, for the dequeueing thread to remove the value from the array, it has to match the next value in the predicted sequence. In <a href="https://github.com/lorin/tla-prophecy/blob/master/HWQueueProphecy.tla">HWQueueProphecy</a>, the name of the action that does this is D5, where <em>t</em> is id of the thread doing the dequeueing.</p>



<figure class="wp-block-image size-large is-resized"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-53.png"><img loading="lazy" width="1024" height="291" data-attachment-id="4605" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-175/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-53.png" data-orig-size="1596,455" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-53.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-53.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-53.png?w=1024" alt="" class="wp-image-4605" style="width:770px;height:auto" /></a></figure>



<p>An incorrect prophecy blocks the dequeueing from actually happening. In the case of HWQueueProphecy, we can still enqueue values (since we don&#8217;t make any predictions on enqueue order, only dequeue order, so there&#8217;s nothing to block). </p>



<p>But let&#8217;s consider the more interesting case where an incorrect prophecy results in <em>deadlock</em>, where no actions are enabled anymore. This means that the only possible future steps in the behavior are <em>stuttering</em> steps, where the values never change.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-55.png"><img loading="lazy" width="1024" height="455" data-attachment-id="4609" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-177/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-55.png" data-orig-size="2304,1025" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-55.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-55.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-55.png?w=1024" alt="" class="wp-image-4609" /></a><figcaption class="wp-element-caption">When a prophecy is incorrect, it can result in <em>deadlock</em>, where all future steps are stuttering steps. These are still valid behaviors. </figcaption></figure>



<p>However, if we take a valid behavior of a specification, and we add stuttering steps, the resulting behavior is always also a valid behavior of the specification. So, the resulting behaviors are guaranteed to be in the set of valid HWQueue behaviors.</p>



<h3 class="wp-block-heading">Using the prophecy to do the refinement mapping</h3>



<p>Let&#8217;s review what we were trying to accomplish here. We want to figure out a refinement mapping from HWQueueProphecy to LinearizableQueue such that every state transition satisfies the LinearizableQueue specification.</p>



<p>Here&#8217;s an example, where the value B has been enqueued, the value A is in the process of being enqueued, and no values have been dequeued yet.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-59.png"><img loading="lazy" width="1024" height="759" data-attachment-id="4619" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-181/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-59.png" data-orig-size="1988,1475" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-59.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-59.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-59.png?w=1024" alt="" class="wp-image-4619" /></a></figure>



<p>Defining how to do this mapping is not obvious, and I&#8217;m not going to explain it here, as it would take up way too much space, and this post is already much too long. Instead, I will defer interested readers to section 6.5 of Lamport&#8217;s book <a href="https://lamport.azurewebsites.net/tla/science.pdf">A Science of Concurrent Programs</a>, which describes how to do the mapping. See also my <a href="https://github.com/lorin/tla-prophecy/blob/master/POFifopq.tla">POFifopq.tla</a> spec, which is my complete implementation of his description.</p>



<p>But I do want to show you <em>something</em> about it. </p>



<h3 class="wp-block-heading">Enqueue example</h3>



<p>Let&#8217;s consider this HWQueue behavior, where we are concurrently enqueueing three values (A,B,C):</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-61.png"><img loading="lazy" width="1024" height="359" data-attachment-id="4625" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-183/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-61.png" data-orig-size="3846,1351" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-61.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-61.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-61.png?w=1024" alt="" class="wp-image-4625" /></a></figure>



<p>These enqueue operations all overlap each other, like this:</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-63.png"><img loading="lazy" width="1024" height="307" data-attachment-id="4628" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-185/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-63.png" data-orig-size="1124,338" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-63.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-63.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-63.png?w=1024" alt="" class="wp-image-4628" /></a></figure>



<p>The refinement mapping will depend on the predictions. </p>



<p>Here&#8217;s an example where the predictions are consistent with the values being enqueued. Note how the state of the mapping ends up matching the predicted values.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-64.png"><img loading="lazy" width="1024" height="629" data-attachment-id="4629" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-186/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-64.png" data-orig-size="5190,3190" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-64.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-64.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-64.png?w=1024" alt="" class="wp-image-4629" /></a></figure>



<p>Notice how in the final state (S10), the refinement mapping d=〈C,A,B〉is identical to the predicted dequeue ordering: p=〈C,A,B〉.</p>



<figure class="wp-block-image size-large"><a href="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-65.png"><img loading="lazy" width="1024" height="565" data-attachment-id="4631" data-permalink="https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/image-187/" data-orig-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-65.png" data-orig-size="5124,2828" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-65.png?w=300" data-large-file="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-65.png?w=1024" src="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-65.png?w=1024" alt="" class="wp-image-4631" /></a></figure>



<p>Here the predicted dequeue values  p=〈Q,W,E〉can never be fulfilled, and the refinement mapping in this case, d=〈A,C,B〉matches the order in which overlapping enqueue operations complete.</p>



<p>The logic for determining the mapping varies depending on whether it is possible for the predictions to be fulfilled. For more details on this, see <a href="https://lamport.azurewebsites.net/tla/science.pdf">A Science of Concurrent Programs</a>.</p>



<p>For the dequeueing case, if the value to be dequeued matches the first prediction in <em>p</em>, then we execute the dequeue and we remove the prediction from <em>p</em>. (We&#8217;ve already discussed the behavior if the value to be dequeued doesn&#8217;t match the prediction). </p>



<h2 class="wp-block-heading">Coda</h2>



<p>Phew! There was a lot of content in this post, including definitions and worked out examples. It took me a long time to grok a lot of this material, so I suspect that even an interested reader won&#8217;t fully absorb it on the first read. But if you got all of the way here, you&#8217;re probably interested enough in TLA+ that you&#8217;ll continue to read further on it. I personally find that it helps to have multiple explanations and examples, and I&#8217;ve tried to make an effort to present these concepts a little differently than other sources, so hopefully you&#8217;ll find it useful to come back here after reading elsewhere. </p>



<p>The TLA+ models and Python and C++ code are all available in my <a href="https://github.com/lorin/tla-prophecy">GitHub tla-prophecy repo</a>.</p>



<h2 class="wp-block-heading">References</h2>



<p>There&#8217;s a ton of material out there, much of it papers. </p>



<h3 class="wp-block-heading">Blog posts</h3>



<p><a href="https://muratbuffalo.blogspot.com/2024/08/linearizability-correctness-condition.html">Linearizability: A Correctness Condition for Concurrent Objects</a>, Murat Demirbas, August 9, 2024. This was the post that originally inspired this blog post.</p>



<p><a href="https://www.hillelwayne.com/post/refinement/">Specification Refinement</a>, Hillel Wayne, July 13, 2021. An explanation of refinement mapping.</p>



<h3 class="wp-block-heading">Papers</h3>



<p><a href="https://doi.org/10.1145/78969.78972">Linearizability: a correctness condition for concurrent objects. Maurice P. Herlihy, Jeannette M. Wing. ACM Transactions on Programming Languages and Systems (TOPLAS), Volume 12, Issue 3, July 1990</a>. This is the paper that introduced linearizability.</p>



<p>Leslie Lamport has a <a href="https://lamport.azurewebsites.net/pubs/pubs.html">complete list of his papers</a> on his website. But here are a few that are most directly relevant to this post.</p>



<p><a href="https://lamport.azurewebsites.net/pubs/pubs.html#simple-approach">A Simple Approach to Specifying Concurrent Systems. Leslie Lamport. Communications of the ACM, Volume 32, Issue 1, January 1989. </a>This paper is a gentle introduction to the <em>transition-axiom method</em>: Lamport&#8217;s state-machine method of specifications.</p>



<p><a href="https://www.microsoft.com/en-us/research/publication/the-existence-of-refinement-mappings/">Existence of refinement mappings. Martin Abadi, Leslie Lamport. Proceedings of the 3rd Annual Symposium on Logic in Computer Science. July 1988.</a> This is the paper that introduced the idea of of refinement mapping.</p>



<p><a href="https://dl.acm.org/doi/10.1145/3492545">Prophecy Made Simple. Leslie Lamport, Stephan Merz. ACM Transactions on Programming Languages and Systems (TOPLAS), Volume 44, Issue 2, April 2022.</a> This paper is an introduction to the idea of prophecy variables.</p>



<h3 class="wp-block-heading">Books (PDFs)</h3>



<p><a href="https://lamport.azurewebsites.net/tla/science.pdf">A Science of Concurrent Programs. Leslie Lamport</a>. This is a self-published book on how to use TLA to model concurrent algorithms. This book documents how to use prophecy variables to implement the refinement mapping for the linearizable queue in the Herlihy and Wing paper. </p>



<p><a href="https://lamport.azurewebsites.net/tla/p-manual.pdf">A PlusCal User&#8217;s Manual. P-Syntax. Version 1.8. Leslie Lamport. 11 March 2024.</a> This is a good general reference for the PlusCal language.</p>



<h3 class="wp-block-heading">Websites</h3>



<p><a href="https://learntla.com/">Learn TLA+. Hillel Wayne</a>. Website with TLA+ learning materials. A good place to start learning TLA+.</p>



<p><a href="https://lamport.azurewebsites.net/tla/tla.html">The TLA+ Home Page</a>. The official TLA+ website</p>



<p><a href="https://jepsen.io/consistency">Consistency Models</a>. Linearizability is a consistency models, but there are multiple other ones. <a href="https://aphyr.com/about">Kyle Kingsbury</a> provides a good overview of the different models on his <a href="https://jepsen.io/">Jepsen</a> site.</p>



<h3 class="wp-block-heading">GitHub repositories</h3>



<p><a href="https://github.com/lorin/tla-prophecy">https://github.com/lorin/tla-prophecy</a> &#8211; This repo contains the actual refinement mappings for the Herlihy &amp; Wing queue. Much of it is transcribed from <a href="https://lamport.azurewebsites.net/tla/science.pdf">A Science of Concurrent Programs.</a></p>



<p><a href="https://github.com/lorin/tla-linearizability - This repo conti">https://github.com/lorin/tla-linearizability</a> &#8211; This repo contains my TLA+ models the  formal  definition of linearizability from the Herlihy &amp; Wing paper. </p>



<p><em>Edits: </em></p>



<ul class="wp-block-list">
<li><em>fixed errors in counter execution history and &#8220;Example of Deq steps&#8221;</em> <em>diagram</em></li>



<li><em>Fixed typo: transition-axiom not transition-axion</em></li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://surfingcomplexity.blog/2024/09/22/linearizability-refinement-prophecy/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
		
		<media:content url="https://0.gravatar.com/avatar/f2641f12e815a54896f8f2ac04660c52efb896e09131390ad2a6f2f5fca81432?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">lorinh</media:title>
		</media:content>

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-17.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-67.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-71.png?w=973" medium="image" />

		<media:content url="https://lh7-rt.googleusercontent.com/docsz/AD_4nXeGLj2lXqKI6GHDBIU8NpCF7dke-IXv7Yl_BGhM3b7kjqPn33aGN-V8gH6KTSr4q6eRYXlgJArbayMc4yt7NvYvKRzxXIlzGRcKCo1c62uYJA8wSXeulDHyLR4Xab4JIJCEBbxPY-0QXKOn7_pkpJrV69jA?key=N-j1F6NxFoahvLjm49EZug" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-1.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-2.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-3.png?w=772" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-88.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-90.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-59.png?w=486" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-72.png?w=444" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-65.png?w=486" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-70.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-69.png?w=600" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-94.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-100.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-95.png?w=851" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-98.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-99.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-22.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-87.png?w=840" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-4.png?w=840" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-23.png?w=830" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-19.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/08/image-24.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-20.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-23.png?w=656" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-4.png?w=840" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-24.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-5.png?w=495" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-6.png?w=481" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-7.png?w=612" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-8.png?w=481" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-12.png?w=576" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-13.png?w=576" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-14.png?w=576" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-16.png?w=576" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-29.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-30.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-32.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-33.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-34.png?w=589" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-38.png?w=580" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-39.png?w=580" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-34.png?w=589" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-46.png?w=647" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-47.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-50.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-48.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-52.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-53.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-55.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-59.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-61.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-63.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-64.png?w=1024" medium="image" />

		<media:content url="https://surfingcomplexity.blog/wp-content/uploads/2024/09/image-65.png?w=1024" medium="image" />
	</item>
		<item>
		<title>Safety first!</title>
		<link>https://surfingcomplexity.blog/2024/08/31/safety-first/</link>
					<comments>https://surfingcomplexity.blog/2024/08/31/safety-first/#comments</comments>
		
		<dc:creator><![CDATA[Lorin Hochstein]]></dc:creator>
		<pubDate>Sat, 31 Aug 2024 18:24:04 +0000</pubDate>
				<category><![CDATA[incidents]]></category>
		<category><![CDATA[resilience]]></category>
		<category><![CDATA[systems]]></category>
		<category><![CDATA[work]]></category>
		<guid isPermaLink="false">http://surfingcomplexity.blog/?p=4337</guid>

					<description><![CDATA[I&#8217;m sure you&#8217;ve heard the slogan &#8220;safety first&#8221;. It is a statement of values for an organization, but let&#8217;s think about how to define what it should mean explicitly. Here&#8217;s how I propose to define safety first, in the context of a company. I&#8217;ll assume the company is in the tech (software) industry, since that&#8217;s &#8230; <a href="https://surfingcomplexity.blog/2024/08/31/safety-first/" class="more-link">Continue reading <span class="screen-reader-text">Safety first!</span> <span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[
<p>I&#8217;m sure you&#8217;ve heard the slogan &#8220;safety first&#8221;. It is a statement of values for an organization, but let&#8217;s think about how to define what it should mean explicitly. Here&#8217;s how I propose to define <em>safety first</em>, in the context of a company. I&#8217;ll assume the company is in the tech (software) industry, since that&#8217;s the one I know best. So, in this context, you can think of &#8220;safety&#8221; as being about avoiding system outages, rather than about, say, avoiding injuries on a work site. </p>



<p>Here we go:</p>



<hr class="wp-block-separator has-alpha-channel-opacity" />



<p>A tech company is a <em>safety first</em> company if any engineer has the ability to extend a project deadline, provided that the engineer judges in the moment that they need additional time in order to accomplish the work more safely (e.g., by following an onerous procedure for making a change, or doing additional validation work that is particular time-intensive).</p>



<p>This ability to extend the deadline must be:</p>



<ol class="wp-block-list">
<li>automatic</li>



<li>unquestioned</li>



<li>consequence-free</li>
</ol>



<p><strong>Automatic</strong>. The engineer does not to explicitly ask someone else for permission before extending the deadline.</p>



<p><strong>Unquestioned</strong>. Nobody is permitted to ask the engineer &#8220;why did you extend the deadline?&#8221; after-the-fact.</p>



<p><strong>Consequence-free</strong>. This action cannot be held against the engineer. For example, it cannot be a factor in a performance review. </p>



<hr class="wp-block-separator has-alpha-channel-opacity" />



<p>Now, anyone who has worked in management would say to me, &#8220;Lorin, this is ridiculous. If you give people the ability to extend deadlines without consequence, then they&#8217;re just going to use this constantly, even if there isn&#8217;t any benefit to safety. It&#8217;s going to drastically harm the organization&#8217;s ability to actually get anything done&#8221;.</p>



<p>And, the truth is, they&#8217;re absolutely right. We all work under deadlines, and we all know that if there was a magical &#8220;extend deadline&#8221; button that anyone could press, that button would be pressed <em>a lot</em>, and not always for the purpose of improving safety. Organizations need to execute, and if anybody could introduce delays, this would cripple execution.</p>



<p>But this response is exactly the reason why <em>safety first</em> will always be a lie. Production pressure is an unavoidable reality for all organizations. Because of this, the system will always push back against delays, and that includes delays for the benefit of safety. This means engineers will always face <em>double binds</em>, where they will feel pressure to execute on schedule, but will be punished if they make decisions that facilitate execution but reduce safety. </p>



<p>Safety is<em> never</em> first in organization: it&#8217;s always one of a number of factors that trade off against each other. And those sorts of tradeoff decisions happen day-to-day and moment-to-moment. </p>



<p>Remember that the next time someone is criticized for &#8220;not being careful enough&#8221; after a change brings down production. </p>



<p> </p>
]]></content:encoded>
					
					<wfw:commentRss>https://surfingcomplexity.blog/2024/08/31/safety-first/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
		
		<media:content url="https://0.gravatar.com/avatar/f2641f12e815a54896f8f2ac04660c52efb896e09131390ad2a6f2f5fca81432?s=96&#38;d=identicon&#38;r=G" medium="image">
			<media:title type="html">lorinh</media:title>
		</media:content>
	</item>
	</channel>
</rss>
