<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Daniel Lemire&#039;s blog</title>
	<atom:link href="https://lemire.me/blog/feed/" rel="self" type="application/rss+xml" />
	<link>https://lemire.me/blog</link>
	<description>Daniel Lemire is a computer science professor at the Data Science Laboratory of the Université du Québec (TÉLUQ) in Montreal. His research is focused on software performance.</description>
	<lastBuildDate>Sat, 02 Nov 2024 01:04:08 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.6.2</generator>

<image>
	<url>https://lemire.me/blog/wp-content/uploads/2015/10/profile2011_152-150x150.jpg</url>
	<title>Daniel Lemire&#039;s blog</title>
	<link>https://lemire.me/blog</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Having fun with modern C++</title>
		<link>https://lemire.me/blog/2024/11/02/having-fun-with-modern-c/</link>
					<comments>https://lemire.me/blog/2024/11/02/having-fun-with-modern-c/#respond</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Sat, 02 Nov 2024 00:24:09 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21753</guid>

					<description><![CDATA[Recent versions of the C++ language (C++20 and C++23) may allow you to change drastically how you program in C++. I want to provide some fun examples. Thanks to the integration of the features from the popular fmt library, it is much easier to format strings elegantly in C++. In turn the fmt library was &#8230; <a href="https://lemire.me/blog/2024/11/02/having-fun-with-modern-c/" class="more-link">Continue reading <span class="screen-reader-text">Having fun with modern C++</span></a>]]></description>
										<content:encoded><![CDATA[<p>Recent versions of the C++ language (C++20 and C++23) may allow you to change drastically how you program in C++. I want to provide some fun examples.</p>
<p>Thanks to the integration of the features from the popular fmt library, it is much easier to format strings elegantly in C++. In turn the fmt library was inspired by the work done in languages like Python.</p>
<p>Suppose that you have a vector of integers and you want to print its content:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">    std::vector&lt;int&gt; v = <span style="color: #800080;">{</span><span style="color: #008c00;">1</span><span style="color: #808030;">,</span> <span style="color: #008c00;">2</span><span style="color: #808030;">,</span> <span style="color: #008c00;">3</span><span style="color: #808030;">,</span> <span style="color: #008c00;">4</span><span style="color: #808030;">,</span> <span style="color: #008c00;">5</span><span style="color: #800080;">}</span><span style="color: #808030;">;</span></span>
<span class="line_wrapper">    std::println("<span style="color: #800080;">{</span><span style="color: #800080;">}</span>", v)<span style="color: #808030;">;</span></span></pre>
<p>Suppose you want it to be centered in a line of 40 characters, with underscore characters around it:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">    std::vector&lt;int&gt; v = <span style="color: #800080;">{</span><span style="color: #008c00;">1</span><span style="color: #808030;">,</span> <span style="color: #008c00;">2</span><span style="color: #808030;">,</span> <span style="color: #008c00;">3</span><span style="color: #808030;">,</span> <span style="color: #008c00;">4</span><span style="color: #808030;">,</span> <span style="color: #008c00;">5</span><span style="color: #800080;">}</span><span style="color: #808030;">;</span></span>
<span class="line_wrapper">    std::println("<span style="color: #800080;">{</span><span style="color: #808030;">:</span>_<span style="color: #808030;">^</span><span style="color: #008c00;">40</span><span style="color: #800080;">}</span>", v)<span style="color: #808030;">;</span></span>
<span class="line_wrapper">    <span style="color: #696969;">// ____________[1, 2, 3, 4, 5]_____________</span></span></pre>
<p>Maybe you want to print it in reverse order?</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">    std::println("<span style="color: #800080;">{</span><span style="color: #800080;">}</span>", v | std::views::reverse)<span style="color: #808030;">;</span></span></pre>
<p>Want to print its maximum?</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">    std::println("<span style="color: #800080;">{</span><span style="color: #800080;">}</span>", std::ranges::max(v))<span style="color: #808030;">;</span></span>
</pre>
<p>What about printing my name and the current time, and my name again? We do not want to repeat the name twice in the parameters, so let us use indexed printing parameters:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">  std::string_view name = "Daniel"sv<span style="color: #808030;">;</span></span>
<span class="line_wrapper">  std::println("Hello, <span style="color: #800080;">{</span><span style="color: #008c00;">0</span><span style="color: #800080;">}</span> today is <span style="color: #800080;">{</span><span style="color: #008c00;">1</span><span style="color: #808030;">:</span><span style="color: #808030;">%</span>Y<span style="color: #808030;">-</span><span style="color: #808030;">%</span>m<span style="color: #808030;">-</span><span style="color: #808030;">%</span>d <span style="color: #808030;">%</span>X<span style="color: #800080;">}</span>, good day <span style="color: #800080;">{</span><span style="color: #008c00;">0</span><span style="color: #800080;">}</span>!", name,</span>
<span class="line_wrapper">               std::chrono::system_clock::now())<span style="color: #808030;">;</span></span>
<span class="line_wrapper">   <span style="color: #696969;">// Hello, Daniel today is 2024-11-02 00:02:17, good day Daniel!</span></span>
</pre>
<p>Let say you want to print different values, each on their own line, justified to the right, with hyphens padding the left. For this purpose, we want to have template function which can take as many parameters as you want, and we want to do the same operation on each parameter. We can achieve this result with a fold, like so:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">void print(auto ...args) <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #808030;">(</span>std<span style="color: #808030;">:</span><span style="color: #808030;">:</span>println<span style="color: #808030;">(</span><span style="color: #0000e6;">"{:-&gt;50}"</span><span style="color: #808030;">,</span> args<span style="color: #808030;">)</span><span style="color: #808030;">,</span> <span style="color: #808030;">.</span><span style="color: #808030;">.</span><span style="color: #808030;">.</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>

<span class="line_wrapper">void prints() <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  print<span style="color: #808030;">(</span><span style="color: #0000e6;">"a"</span><span style="color: #808030;">,</span> <span style="color: #008c00;">1</span><span style="color: #808030;">,</span> <span style="color: #0000e6;">"b"</span><span style="color: #808030;">,</span> <span style="color: #008c00;">2</span><span style="color: #808030;">,</span> <span style="color: #0000e6;">"c"</span><span style="color: #808030;">,</span> <span style="color: #008c00;">3</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>

<span class="line_wrapper"><span style="color: #696969;">//-------------------------------------------------a</span></span>
<span class="line_wrapper"><span style="color: #696969;">//-------------------------------------------------1</span></span>
<span class="line_wrapper"><span style="color: #696969;">//-------------------------------------------------b</span></span>
<span class="line_wrapper"><span style="color: #696969;">//-------------------------------------------------2</span></span>
<span class="line_wrapper"><span style="color: #696969;">//-------------------------------------------------c</span></span>
<span class="line_wrapper"><span style="color: #696969;">//-------------------------------------------------3</span></span></pre>
<p>It looks a bit mysterious, but folds are great if you want to have functions that elegantly take several parameters.</p>
<p>Suppose you want a function which takes two integer-like values, and returns their quotient&#8230; with the added trick that if the divisor is zero, you return a string as an error. We want it to work with any integer type (but only integer types). We would rather avoid exceptions. Then `std::expected is perfect for the task. It is effectively a value/error pair conveniently packaged. The following code illustrates the idea&#8230; and I have added a &#8216;test&#8217; function to show you how it might used.</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">template &lt;std::integral number&gt;</span>
<span class="line_wrapper">std::expected&lt;number, std::string&gt; divide(number a, number b) <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>b <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">return</span> std<span style="color: #808030;">:</span><span style="color: #808030;">:</span>unexpected<span style="color: #808030;">(</span><span style="color: #0000e6;">"Division by zero"</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> a <span style="color: #808030;">/</span> b<span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>

<span class="line_wrapper">void test(auto x, auto y) <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>auto result <span style="color: #808030;">=</span> divide<span style="color: #808030;">(</span>x<span style="color: #808030;">,</span> y<span style="color: #808030;">)</span><span style="color: #800080;">;</span> result<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    std<span style="color: #808030;">:</span><span style="color: #808030;">:</span>println<span style="color: #808030;">(</span><span style="color: #0000e6;">"Result: {}"</span><span style="color: #808030;">,</span> result<span style="color: #808030;">.</span>value<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span> <span style="color: #800000; font-weight: bold;">else</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    std<span style="color: #808030;">:</span><span style="color: #808030;">:</span>println<span style="color: #808030;">(</span>stderr<span style="color: #808030;">,</span> <span style="color: #0000e6;">"Error: {}"</span><span style="color: #808030;">,</span> result<span style="color: #808030;">.</span>error<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>We wrote a fast URL parser called ada, and it returns parsed URL in an std::expected structure. This allows us to avoid the complexity of exceptions. The fast JSON library simdjson has a custom return type that follows the same idea.</p>
<p>Let us say that you want to print the integer 4 in binary (100) and know how many trailing 0 bits there are (the answer is 2):</p>
<pre class="code_syntax"><span class="line_wrapper">  std::println("{:b} {}", 4u, std::countr_zero(4u));</span>
<span class="line_wrapper">  // 100 2</span>
</pre>
<p>Suppose you want to rotate left the bits in an integer by 4:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">  std::println("<span style="color: #800080;">{</span><span style="color: #808030;">:</span>x<span style="color: #800080;">}</span>", std::rotl(0xf0f0f0f0u, 4))<span style="color: #808030;">;</span></span>
<span class="line_wrapper">  <span style="color: #696969;">// f0f0f0f</span></span>
</pre>
<p>Suppose you want to know what the floating point number 1.0 looks like as a 64-bit word:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">  std::println("<span style="color: #800080;">{</span><span style="color: #808030;">:</span>b<span style="color: #800080;">}</span>", std::bit_cast&lt;uint64_t&gt;(1.0))<span style="color: #808030;">;</span></span>
<span class="line_wrapper">  <span style="color: #696969;">// 11111111110000000000000000000000000000000000000000000000000000</span></span></pre>
<p>Suppose you want to print the size of a file in bytes?</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">  std::println("<span style="color: #800080;">{</span><span style="color: #800080;">}</span> bytes", std::filesystem::file_size("demo.cpp"))<span style="color: #808030;">;</span></span></pre>
<p>Suppose you want to write to a log while including the exact position in the source code where the log was called?</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">  auto log = [](std::string_view message, std::source_location loc) <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    std<span style="color: #808030;">:</span><span style="color: #808030;">:</span>println<span style="color: #808030;">(</span><span style="color: #0000e6;">"{} {}:{} function name: {}"</span><span style="color: #808030;">,</span> message<span style="color: #808030;">,</span> loc<span style="color: #808030;">.</span>file_name<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">,</span></span>
<span class="line_wrapper">                 loc<span style="color: #808030;">.</span>line<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">,</span> loc<span style="color: #808030;">.</span>function_name<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span><span style="color: #808030;">;</span></span>

<span class="line_wrapper">  log("problem", std::source_location::current())<span style="color: #808030;">;</span></span></pre>
<p>There are many more cool features in recent version of C++. If you want to learn more, I recommend recent books by Marius Bancila. He is a great technical writer.</p>
<p><a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/blob/master/2024/11/01/demo.cpp">I make a complete example available on GitHub</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/11/02/having-fun-with-modern-c/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>How fast can you parse a CSV file in C#?</title>
		<link>https://lemire.me/blog/2024/10/17/how-fast-can-you-parse-a-csv-file-in-c/</link>
					<comments>https://lemire.me/blog/2024/10/17/how-fast-can-you-parse-a-csv-file-in-c/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Thu, 17 Oct 2024 23:03:05 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21726</guid>

					<description><![CDATA[We often store large datasets using comma-separated-value (CSV) files. The format is simple enough, each line of a text file is made of several values separated by commas, like so: "Willett, Walter C.",Harvard T.H. Chan School of Public Health,usa Given an excel spreadsheet, you can easily get a CSV file, and vice versa. CSV files &#8230; <a href="https://lemire.me/blog/2024/10/17/how-fast-can-you-parse-a-csv-file-in-c/" class="more-link">Continue reading <span class="screen-reader-text">How fast can you parse a CSV file in C#?</span></a>]]></description>
										<content:encoded><![CDATA[<p>We often store large datasets using comma-separated-value (CSV) files. The format is simple enough, each line of a text file is made of several values separated by commas, like so:</p>
<pre>"Willett, Walter C.",Harvard T.H. Chan School of Public Health,usa
</pre>
<p>Given an excel spreadsheet, you can easily get a CSV file, and vice versa. CSV files can easily be consumed or produced by your own software.</p>
<p>My interest in software performance entered a turning point when I had to parse large CSV files for a project.</p>
<p>So how fast can we go in C#? I am going to use .NET 9 on an Apple M2 system. I am using an 11 MB CSV file containing the name and affiliations of highly cited researchers. There are 217096 entries and I am going to look for researchers who have the string &#8216;Harvard&#8217; in their affiliation. There are 1960 of those: Harvard University has many highly cited researchers. The file is encoded using UTF-8. You can find all my code on GitHub, look for the <a href="https://github.com/lemire/CsharpCSVBench">lemire/CsharpCSVBench</a> repository.</p>
<p>Before we start actually parsing, let us load all lines one by one and count them:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;font-size:0.7em;"><span class="line_wrapper">    public <span style="color: #800000; font-weight: bold;">int</span> ScanFile<span style="color: #808030;">(</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">    <span style="color: #800080;">{</span></span>
<span class="line_wrapper">        <span style="color: #800000; font-weight: bold;">int</span> count <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        <span style="color: #800000; font-weight: bold;">using</span> <span style="color: #808030;">(</span>var reader <span style="color: #808030;">=</span> new StreamReader<span style="color: #808030;">(</span>filename<span style="color: #808030;">,</span> System<span style="color: #808030;">.</span>Text<span style="color: #808030;">.</span>Encoding<span style="color: #808030;">.</span>UTF8<span style="color: #808030;">)</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">        <span style="color: #800080;">{</span></span>
<span class="line_wrapper">            <span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span>reader<span style="color: #808030;">.</span>ReadLine<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #808030;">!</span><span style="color: #808030;">=</span> null<span style="color: #808030;">)</span></span>
<span class="line_wrapper">            <span style="color: #800080;">{</span></span>
<span class="line_wrapper">                count<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">            <span style="color: #800080;">}</span></span>
<span class="line_wrapper">        <span style="color: #800080;">}</span></span>
<span class="line_wrapper">        <span style="color: #800000; font-weight: bold;">return</span> count<span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span></pre>
<p>On my system, this takes 10 ms. Thus, we can scan it at about 1.2 GB/s. I am loading the file from disk. However, my disk has bandwidth higher than 1.2 GB/s, and the file is small enough to end up in cache. Thus we are already limited by the processor. And we are not yet doing any parsing!</p>
<p>As far as I know, the most popular library to parse CSV file in C# is the CsvHelper library. It is quite a good library as far as I can tell.</p>
<p>We can try locating the matching records like so:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;font-size:0.7em;"><span class="line_wrapper">var matchingLines <span style="color: #808030;">=</span> new List<span style="color: #808030;">&lt;</span>string<span style="color: #808030;">&gt;</span><span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>

<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">using</span> <span style="color: #808030;">(</span>var reader <span style="color: #808030;">=</span> new StreamReader<span style="color: #808030;">(</span>filename<span style="color: #808030;">,</span> System<span style="color: #808030;">.</span>Text<span style="color: #808030;">.</span>Encoding<span style="color: #808030;">.</span>UTF8<span style="color: #808030;">)</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">using</span> <span style="color: #808030;">(</span>var csv <span style="color: #808030;">=</span> new CsvHelper<span style="color: #808030;">.</span>CsvReader<span style="color: #808030;">(</span>reader<span style="color: #808030;">,</span> new CsvConfiguration<span style="color: #808030;">(</span>CultureInfo<span style="color: #808030;">.</span>InvariantCulture<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper"><span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span>csv<span style="color: #808030;">.</span>Read<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">    <span style="color: #800080;">{</span></span>
<span class="line_wrapper">        <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>csv<span style="color: #808030;">[</span><span style="color: #008c00;">1</span><span style="color: #808030;">]</span><span style="color: #808030;">.</span>IndexOf<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">Harvard</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> StringComparison<span style="color: #808030;">.</span>OrdinalIgnoreCase<span style="color: #808030;">)</span> <span style="color: #808030;">&gt;</span><span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">        <span style="color: #800080;">{</span></span>
<span class="line_wrapper">            matchingLines<span style="color: #808030;">.</span>Add<span style="color: #808030;">(</span>string<span style="color: #808030;">.</span>Join<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">,</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> csv<span style="color: #808030;">.</span>Parser<span style="color: #808030;">.</span>RawRecord<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        <span style="color: #800080;">}</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>
</pre>
<p>You can write nicer code, but I am only interested in measuring the performance.</p>
<p>This time it takes 42 ms. That is, I can parse the CSV at .28 GB/s. We are clearly bounded by our processor in this instance.</p>
<p>Can we go faster? Let us consider the NReco.Csv library which claims to be faster. I am skipping the code as it is more or less the same. It is indeed faster, I get the job done in 36 ms, or .33 GB/s.</p>
<p>These are not great speeds.</p>
<p>There is a faster library called Sep.</p>
<pre class="code_syntax" style="color:#000000;background:#ffffff;font-size:0.7em;"><span class="line_wrapper">var matchingLines <span style="color:#808030; ">=</span> new List<span style="color:#808030; ">&lt;</span>string<span style="color:#808030; ">&gt;</span><span style="color:#808030; ">(</span><span style="color:#808030; ">)</span><span style="color:#800080; ">;</span></span>
<span class="line_wrapper"><span style="color:#800000; font-weight:bold; ">using</span> var reader <span style="color:#808030; ">=</span> Sep<span style="color:#808030; ">.</span>Reader<span style="color:#808030; ">(</span><span style="color:#808030; ">)</span><span style="color:#808030; ">.</span>FromFile<span style="color:#808030; ">(</span>filename<span style="color:#808030; ">)</span><span style="color:#800080; ">;</span></span>
<span class="line_wrapper">var colIndex <span style="color:#808030; ">=</span> reader<span style="color:#808030; ">.</span>Header<span style="color:#808030; ">.</span>IndexOf<span style="color:#808030; ">(</span><span style="color:#800000; ">"</span><span style="color:#0000e6; ">inst_name</span><span style="color:#800000; ">"</span><span style="color:#808030; ">)</span><span style="color:#800080; ">;</span></span>
<span class="line_wrapper">foreach <span style="color:#808030; ">(</span>var row in reader<span style="color:#808030; ">)</span></span>
<span class="line_wrapper"><span style="color:#800080; ">{</span></span>
<span class="line_wrapper">    <span style="color:#800000; font-weight:bold; ">if</span> <span style="color:#808030; ">(</span>row<span style="color:#808030; ">[</span>colIndex<span style="color:#808030; ">]</span><span style="color:#808030; ">.</span>Span<span style="color:#808030; ">.</span>Contains<span style="color:#808030; ">(</span>university<span style="color:#808030; ">,</span> StringComparison<span style="color:#808030; ">.</span>OrdinalIgnoreCase<span style="color:#808030; ">)</span><span style="color:#808030; ">)</span></span>
<span class="line_wrapper">    <span style="color:#800080; ">{</span></span>
<span class="line_wrapper">        matchingLines<span style="color:#808030; ">.</span>Add<span style="color:#808030; ">(</span>row<span style="color:#808030; ">.</span>Span<span style="color:#808030; ">.</span>ToString<span style="color:#808030; ">(</span><span style="color:#808030; ">)</span><span style="color:#808030; ">)</span><span style="color:#800080; ">;</span></span>
<span class="line_wrapper">    <span style="color:#800080; ">}</span></span>
<span class="line_wrapper"><span style="color:#800080; ">}</span></span></pre>
<p>Sep is much faster, it requires only 18 ms or 0.64 GB/s.</p>
<p>What else might we do? We could go lower level. Let us load blocks of bytes, look for the &#8216;H&#8217; of Harvard, then when we find such as byte, check that we have &#8216;Harvard&#8217;. Since we prefer not to load the whole file in memory, we need to check at the end of the blocks that we are not in the middle of the word Harvard.</p>
<p>It gets a bit hairy, but it is only for benchmarking purposes:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;font-size:0.7em;"><span class="line_wrapper">var matchingLines <span style="color: #808030;">=</span> new List<span style="color: #808030;">&lt;</span>string<span style="color: #808030;">&gt;</span><span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>


<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">using</span> <span style="color: #808030;">(</span>FileStream fileStream <span style="color: #808030;">=</span> new FileStream<span style="color: #808030;">(</span>filename<span style="color: #808030;">,</span> FileMode<span style="color: #808030;">.</span>Open<span style="color: #808030;">,</span> FileAccess<span style="color: #808030;">.</span>Read<span style="color: #808030;">)</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper"><span style="color: #800080;">{</span></span>
<span class="line_wrapper">    byte<span style="color: #808030;">[</span><span style="color: #808030;">]</span> buffer <span style="color: #808030;">=</span> new byte<span style="color: #808030;">[</span><span style="color: #008c00;">4</span> <span style="color: #808030;">*</span> <span style="color: #008c00;">1024</span><span style="color: #808030;">]</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    Span<span style="color: #808030;">&lt;</span>byte<span style="color: #808030;">&gt;</span> harvardBytes <span style="color: #808030;">=</span> Encoding<span style="color: #808030;">.</span>UTF8<span style="color: #808030;">.</span>GetBytes<span style="color: #808030;">(</span>"Harvard"<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    var tailbytes <span style="color: #808030;">=</span> harvardBytes<span style="color: #808030;">.</span>Slice<span style="color: #808030;">(</span><span style="color: #008c00;">1</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">int</span> bytesRead<span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #696969;">// Read the file in blocks</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">int</span> offset <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span><span style="color: #808030;">(</span>bytesRead <span style="color: #808030;">=</span> fileStream<span style="color: #808030;">.</span>Read<span style="color: #808030;">(</span>buffer<span style="color: #808030;">,</span> offset<span style="color: #808030;">,</span> buffer<span style="color: #808030;">.</span>Length <span style="color: #808030;">-</span> offset<span style="color: #808030;">)</span><span style="color: #808030;">)</span> <span style="color: #808030;">&gt;</span> <span style="color: #008c00;">0</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">    <span style="color: #800080;">{</span></span>
<span class="line_wrapper">        bytesRead <span style="color: #808030;">+</span><span style="color: #808030;">=</span> offset<span style="color: #800080;">;</span></span>
<span class="line_wrapper">        offset <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">int</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&lt;</span><span style="color: #808030;">=</span> bytesRead <span style="color: #808030;">-</span> harvardBytes<span style="color: #808030;">.</span>Length<span style="color: #800080;">;</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">        <span style="color: #800080;">{</span></span>
<span class="line_wrapper">            i <span style="color: #808030;">=</span> Array<span style="color: #808030;">.</span>IndexOf<span style="color: #808030;">(</span>buffer<span style="color: #808030;">,</span> <span style="color: #808030;">(</span>byte<span style="color: #808030;">)</span>harvardBytes<span style="color: #808030;">[</span><span style="color: #008c00;">0</span><span style="color: #808030;">]</span><span style="color: #808030;">,</span> i<span style="color: #808030;">,</span> bytesRead <span style="color: #808030;">-</span> harvardBytes<span style="color: #808030;">.</span>Length <span style="color: #808030;">-</span> i<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">            <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>i <span style="color: #808030;">&lt;</span> <span style="color: #008c00;">0</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">            <span style="color: #800080;">{</span></span>
<span class="line_wrapper">                <span style="color: #800000; font-weight: bold;">break</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">            <span style="color: #800080;">}</span></span>
<span class="line_wrapper">            Span<span style="color: #808030;">&lt;</span>byte<span style="color: #808030;">&gt;</span> region <span style="color: #808030;">=</span> buffer<span style="color: #808030;">.</span>AsSpan<span style="color: #808030;">(</span>i <span style="color: #808030;">+</span> <span style="color: #008c00;">1</span><span style="color: #808030;">,</span> harvardBytes<span style="color: #808030;">.</span>Length <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">            <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>region<span style="color: #808030;">.</span>SequenceEqual<span style="color: #808030;">(</span>tailbytes<span style="color: #808030;">)</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">            <span style="color: #800080;">{</span></span>
<span class="line_wrapper">                var start <span style="color: #808030;">=</span> i<span style="color: #800080;">;</span></span>
<span class="line_wrapper">                var end <span style="color: #808030;">=</span> i <span style="color: #808030;">+</span> harvardBytes<span style="color: #808030;">.</span>Length<span style="color: #800080;">;</span></span>
<span class="line_wrapper">                <span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span>start <span style="color: #808030;">&gt;</span> <span style="color: #008c00;">0</span> <span style="color: #808030;">&amp;</span><span style="color: #808030;">&amp;</span> buffer<span style="color: #808030;">[</span>start <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">]</span> <span style="color: #808030;">!</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\n'</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span> start<span style="color: #808030;">-</span><span style="color: #808030;">-</span><span style="color: #800080;">;</span> <span style="color: #800080;">}</span></span>
<span class="line_wrapper">                <span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span>end <span style="color: #808030;">+</span> <span style="color: #008c00;">1</span> <span style="color: #808030;">&lt;</span> bytesRead <span style="color: #808030;">&amp;</span><span style="color: #808030;">&amp;</span> buffer<span style="color: #808030;">[</span>end <span style="color: #808030;">+</span> <span style="color: #008c00;">1</span><span style="color: #808030;">]</span> <span style="color: #808030;">!</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\n'</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span> end<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #800080;">;</span> <span style="color: #800080;">}</span></span>
<span class="line_wrapper">                string line <span style="color: #808030;">=</span> Encoding<span style="color: #808030;">.</span>UTF8<span style="color: #808030;">.</span>GetString<span style="color: #808030;">(</span>buffer<span style="color: #808030;">,</span> start<span style="color: #808030;">,</span> end <span style="color: #808030;">-</span> start <span style="color: #808030;">+</span> <span style="color: #008c00;">1</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">                matchingLines<span style="color: #808030;">.</span>Add<span style="color: #808030;">(</span>line<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">                i <span style="color: #808030;">+</span><span style="color: #808030;">=</span> harvardBytes<span style="color: #808030;">.</span>Length<span style="color: #800080;">;</span></span>
<span class="line_wrapper">            <span style="color: #800080;">}</span></span>
<span class="line_wrapper">            <span style="color: #800000; font-weight: bold;">else</span></span>
<span class="line_wrapper">            <span style="color: #800080;">{</span></span>
<span class="line_wrapper">                i<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">            <span style="color: #800080;">}</span></span>
<span class="line_wrapper">        <span style="color: #800080;">}</span></span>

<span class="line_wrapper">        <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">int</span> i <span style="color: #808030;">=</span> bytesRead <span style="color: #808030;">-</span> harvardBytes<span style="color: #808030;">.</span>Length <span style="color: #808030;">+</span> <span style="color: #008c00;">1</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&lt;</span><span style="color: #808030;">=</span> bytesRead<span style="color: #800080;">;</span> i<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">        <span style="color: #800080;">{</span></span>
<span class="line_wrapper">            Span<span style="color: #808030;">&lt;</span>byte<span style="color: #808030;">&gt;</span> region <span style="color: #808030;">=</span> buffer<span style="color: #808030;">.</span>AsSpan<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> bytesRead <span style="color: #808030;">-</span> i<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">            <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>harvardBytes<span style="color: #808030;">.</span>StartsWith<span style="color: #808030;">(</span>region<span style="color: #808030;">)</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">            <span style="color: #800080;">{</span></span>
<span class="line_wrapper">                Array<span style="color: #808030;">.</span>Copy<span style="color: #808030;">(</span>buffer<span style="color: #808030;">,</span> i<span style="color: #808030;">,</span> buffer<span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> region<span style="color: #808030;">.</span>Length<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">                offset <span style="color: #808030;">=</span> region<span style="color: #808030;">.</span>Length<span style="color: #800080;">;</span></span>
<span class="line_wrapper">                <span style="color: #800000; font-weight: bold;">break</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">            <span style="color: #800080;">}</span></span>
<span class="line_wrapper">        <span style="color: #800080;">}</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>
</pre>
<p>I could simplify it slightly. Further, it is possibly slightly wrong: if someone is called &#8216;Harvard&#8217;, then they will be matched by my code, so a few cheap checks should be added. </p>
<p>Further, you want to make sure that you do not have quoted fields with unescaped line endings. I am implicitly assuming that records are separated by line endings (i.g., the newline character \n). This assumption can be violated in some cases, although not in the cases I care about. In the general case, you should use a well tested CSV library.</p>
<p>The string search could be further optimized. I use a naive approach.</p>
<p>This time, I can scan the whole file in 3.3 ms. If I need to, I can do it hundreds of times a second. It might be fast enough that you may not need an actual database engine and its indexes. C# can be fast.</p>
<table>
<tbody>
<tr>
<td>couning lines</td>
<td>1.1 GB/s</td>
</tr>
<tr>
<td>CsvHelper</td>
<td>.28 GB/s</td>
</tr>
<tr>
<td>NReco.Csv</td>
<td>.33 GB/s</td>
</tr>
<tr>
<td>Sep</td>
<td>.64 GB/s</td>
</tr>
<tr>
<td>low-level</td>
<td>3.5 GB/s</td>
</tr>
</tbody>
</table>
<p><strong>Further reading</strong>: <a href="https://www.joelverhagen.com/blog/2020/12/fastest-net-csv-parsers">The fastest CSV parser in .NET</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/10/17/how-fast-can-you-parse-a-csv-file-in-c/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>Table lookups are efficient</title>
		<link>https://lemire.me/blog/2024/10/14/table-lookups-are-efficient/</link>
					<comments>https://lemire.me/blog/2024/10/14/table-lookups-are-efficient/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Mon, 14 Oct 2024 22:15:42 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21718</guid>

					<description><![CDATA[When optimizing small functions, I often rely on a table lookup: I replace the actual computation with table of precomputed values. It is often surprisingly efficient. Let us consider an example. Suppose that you are given an array of characters and you want to replace all instances of the character &#8216;\&#8217; with the two-character string &#8230; <a href="https://lemire.me/blog/2024/10/14/table-lookups-are-efficient/" class="more-link">Continue reading <span class="screen-reader-text">Table lookups are efficient</span></a>]]></description>
										<content:encoded><![CDATA[<p>When optimizing small functions, I often rely on a table lookup: I replace the actual computation with table of precomputed values. It is often surprisingly efficient.</p>
<p>Let us consider an example. Suppose that you are given an array of characters and you want to replace all instances of the character &#8216;\&#8217; with the two-character string &#8220;\\&#8221;, all instances of the character &#8216;\n&#8217; with the two-character string &#8220;\n&#8221;, and all instances of the character &#8216;\r&#8217; with the two-character string &#8220;\r&#8221;. You might do it with a sequence of branches, like so:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">int index = 0<span style="color: #808030;">;</span></span>
<span class="line_wrapper">for (char c : original) <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>c <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\\'</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    newArray<span style="color: #808030;">[</span>index<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #0000e6;">'\\'</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    newArray<span style="color: #808030;">[</span>index<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #0000e6;">'\\'</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span> <span style="color: #800000; font-weight: bold;">else</span> <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>c <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\n'</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    newArray<span style="color: #808030;">[</span>index<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #0000e6;">'\\'</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    newArray<span style="color: #808030;">[</span>index<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #0000e6;">'n'</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span> <span style="color: #800000; font-weight: bold;">else</span> <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>c <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\r'</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    newArray<span style="color: #808030;">[</span>index<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #0000e6;">'\\'</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    newArray<span style="color: #808030;">[</span>index<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #0000e6;">'r'</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span> <span style="color: #800000; font-weight: bold;">else</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    newArray<span style="color: #808030;">[</span>index<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> c<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>Instead, we could store the escape sequences in a table, and load it from the table. In Java, it might look as follows&#8230;</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">private</span> <span style="color: #800000; font-weight: bold;">static</span> <span style="color: #800000; font-weight: bold;">final</span> byte[] silly_table3<span style="color: #808030;">;</span></span>

<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">static</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">        silly_table3 <span style="color: #808030;">=</span> <span style="color: #800000; font-weight: bold;">new</span> <span style="color: #bb7977;">byte</span><span style="color: #808030;">[</span><span style="color: #008c00;">256</span><span style="color: #808030;">]</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        silly_table3<span style="color: #808030;">[</span><span style="color: #0000e6;">'\\'</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #0000e6;">'\\'</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        silly_table3<span style="color: #808030;">[</span><span style="color: #0000e6;">'\n'</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #0000e6;">'n'</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        silly_table3<span style="color: #808030;">[</span><span style="color: #0000e6;">'\t'</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #0000e6;">'t'</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>

<span class="line_wrapper"><span style="color: #696969;">//...</span></span>

<span class="line_wrapper">int index = 0<span style="color: #808030;">;</span></span>
<span class="line_wrapper">for (char c : original) <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #bb7977;">byte</span> b <span style="color: #808030;">=</span> silly_table3<span style="color: #808030;">[</span>c<span style="color: #808030;">%</span><span style="color: #008c00;">256</span><span style="color: #808030;">]</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>c <span style="color: #808030;">&lt;</span> <span style="color: #008c00;">256</span> <span style="color: #808030;">&amp;</span><span style="color: #808030;">&amp;</span>  b <span style="color: #808030;">&gt;</span> <span style="color: #008c00;">0</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    newArray<span style="color: #808030;">[</span>index<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #0000e6;">'\\'</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    newArray<span style="color: #808030;">[</span>index<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #bb7977;">char</span><span style="color: #808030;">)</span>b<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span> <span style="color: #800000; font-weight: bold;">else</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    newArray<span style="color: #808030;">[</span>index<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> c<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>My table is unnecessarily large: I leave it as an exercise to the reader to optimize the code so that a much smaller table could be used.</p>
<p>When processing inputs sequentially, we often have some data loading. In this case, we must load each character from the input array. The table lookups also require some load operations, but modern processors can typically execute two loads per cycle or more. Thus we are often not severely limited by the number of loads. The loads have some latency, but a table lookup in a hot function is often cached closed to the CPU. Thus we may have a relatively short latency (e.g., 5 cycles). If there is not too much dependency between how we process successive characters, this latency is not too harmful. On the plus side, table lookups reduce the number of instructions issued, and they often keep branch mispredictions to a minimum. Though processors become better at predicting branches, mispredicted branches remain quite expensive.</p>
<p>You might be concerned that tables can make your binary code larger. However, that may not be true. One of the most important optimization that compiler make is &#8216;inlining&#8217;. That is, your small functions are often replicated several times to avoid the overhead of a function call and to allow for more advanced optimizations. A hot function implemented with tables is made of few instructions. These instructions can be reproduced at little cost all over your code base. In contrast, an implementation made of many instructions can be costly to inline.</p>
<p><a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/blob/master/2024/10/14/src/main/java/me/lemire/MyBenchmark.java">I wrote a little Java benchmark to test out the idea</a>. I provide random ASCII inputs. In my tests, the table approach is over 20% faster.</p>
<table>
<tbody>
<tr>
<th>system</th>
<th>conventional</th>
<th>table</th>
</tr>
<tr>
<td>Apple M2 + Java 21</td>
<td>1 GB/s</td>
<td>1.2 GB/s</td>
</tr>
<tr>
<td>Intel Ice Lake + Java 20</td>
<td>0.8 GB/s</td>
<td>1.1 GB/s</td>
</tr>
<tr>
<td>AMD Zen 4 (7940HS) + Java 21</td>
<td>0.7 GB/s</td>
<td>1.0 GB/s</td>
</tr>
</tbody>
</table>
<p>The results will vary depending on your system and processor.</p>
<p>The table approach is not very sensitive to the complexity of the problem. In my case, I needed to replace 3 distinct characters. I could extend it to 5 distinct characters or more by updating the table. The conventional approach becomes increasingly more complex and expensive as I add characters. Thus the benefits of the table approach grow as the problem gets more complex. Conversely, there is a limit to the value of the table approach: it is inefficient to use a table when you need to identify just one character.</p>
<p>Optimizing compilers may turn your conventional code into a table lookup. For example, a switch-case is sometimes compiled to a small table. Further, what appears like a branch (if-else) might be compiled to conditional move instructions or even to a table. When in doubt, you should examine the assembly output. Unfortunately, Java makes it a bit difficult to do.</p>
<p>These speeds (1 GB/s) are not impressive. But Java makes it difficult to use more advanced low-level optimizations. Java Vector, when it becomes more mature, could help.</p>
<p><strong>Credit:</strong> The blog post was motivated by an email by Lucas Sloan.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/10/14/table-lookups-are-efficient/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>From software to reality?</title>
		<link>https://lemire.me/blog/2024/10/09/from-software-to-reality/</link>
					<comments>https://lemire.me/blog/2024/10/09/from-software-to-reality/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Wed, 09 Oct 2024 13:21:37 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21713</guid>

					<description><![CDATA[Both the Physics and Chemistry Nobel prizes were awarded to computer scientists in 2024. Computer scientists are emerging as leading figures in the natural sciences. In turn, these sciences are increasingly dominated by theorists and modelers. There has a noticeable shift in some scientific fields where theoretical models and simulations often not only precede experimental &#8230; <a href="https://lemire.me/blog/2024/10/09/from-software-to-reality/" class="more-link">Continue reading <span class="screen-reader-text">From software to reality?</span></a>]]></description>
										<content:encoded><![CDATA[<p>Both the Physics and Chemistry Nobel prizes were awarded to computer scientists in 2024. Computer scientists are emerging as leading figures in the natural sciences. In turn, these sciences are increasingly dominated by theorists and modelers.</p>
<p>There has a noticeable shift in some scientific fields where theoretical models and simulations often not only precede experimental work, but replaces it. Fields like physics, biology, and environmental science now heavily rely on computational methods for data analysis, simulations, and modeling. This development is not new.  The integration of computer science with other disciplines has created new hybrid fields. Computational biology, computational physics, and similar areas are not just applying computational techniques but are fundamentally changing how these sciences are approached. Microscopes have been replaced by computers.</p>
<p>Yet, this reliance on models and simulations brings challenges. There is a risk of over-reliance on theoretical models without sufficient empirical validation, potentially skewing scientific inquiry towards what can be modeled rather than what might be fundamentally true or observable. This shift towards computational and theoretical sciences might skew scientific inquiry away from empirical observation towards what can be efficiently modeled or simulated. This might lead to a disconnect from physical realities, focusing on model validation over real-world application.</p>
<p>While the ascendancy of computer scientists in natural sciences might herald a new era of discovery and efficiency, we have yet to see this era in concrete terms. Hinton might have won the Physics Nobel prize, but did Physics see many new breakthroughs? Hassabis might have won the Chemistry Nobel prize, but did Chemistry see actual advances?</p>
<p>We have been promised extraordinary medical cures. I am sure that better software can improve medical care, but we should not assume that we can magically go from software to reality.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/10/09/from-software-to-reality/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>Geoffrey Hinton, the Godfather of Deep Learning, wins Nobel Prize in Physics!</title>
		<link>https://lemire.me/blog/2024/10/08/geoffrey-hinton-the-godfather-of-deep-learning-wins-nobel-prize-in-physics/</link>
					<comments>https://lemire.me/blog/2024/10/08/geoffrey-hinton-the-godfather-of-deep-learning-wins-nobel-prize-in-physics/#respond</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Tue, 08 Oct 2024 13:29:44 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21710</guid>

					<description><![CDATA[So&#8230; in 2024, the Physics Nobel prize was awarded to a Computer Scientist. Is Physics out of ideas? The Nobel Committee just gave a Physics award to a COMPUTER SCIENTIST! What does this say about the state of modern Physics?  Though the first half of the XXth century was filled with breakthrough in Physics, it &#8230; <a href="https://lemire.me/blog/2024/10/08/geoffrey-hinton-the-godfather-of-deep-learning-wins-nobel-prize-in-physics/" class="more-link">Continue reading <span class="screen-reader-text">Geoffrey Hinton, the Godfather of Deep Learning, wins Nobel Prize in Physics!</span></a>]]></description>
										<content:encoded><![CDATA[<p>So&#8230; in 2024, the Physics Nobel prize was awarded to a Computer Scientist.</p>
<p>Is Physics out of ideas? The Nobel Committee just gave a Physics award to a COMPUTER SCIENTIST! What does this say about the state of modern Physics?  Though the first half of the XXth century was filled with breakthrough in Physics, it is clear that contemporary Physics is significantly less fruitful.</p>
<p>Is Computer Science the New Frontier of Science? This prize might just prove that Computer Science isn&#8217;t just about coding; it&#8217;s the new science playground where groundbreaking theories are tested and innovations are born. Computer Science is now the epicenter of scientific discovery.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/10/08/geoffrey-hinton-the-godfather-of-deep-learning-wins-nobel-prize-in-physics/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Iterating through matched characters in modern C++</title>
		<link>https://lemire.me/blog/2024/10/06/iterating-through-matched-characters-in-modern-c-viewsfilter-and-coroutine/</link>
					<comments>https://lemire.me/blog/2024/10/06/iterating-through-matched-characters-in-modern-c-viewsfilter-and-coroutine/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Sun, 06 Oct 2024 21:52:13 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21702</guid>

					<description><![CDATA[Consider the following problem. You want to iterate through the characters of a strings and find only those matching some criteria. For example, you might want scan an HTML string looking for the characters &#8216;&#60;&#8216;, &#8216;&#38;&#8217;, &#8216;\0&#8217;, &#8216;\n&#8217;. We might do it in C++ using the find_first_of function. It is a generic function that is &#8230; <a href="https://lemire.me/blog/2024/10/06/iterating-through-matched-characters-in-modern-c-viewsfilter-and-coroutine/" class="more-link">Continue reading <span class="screen-reader-text">Iterating through matched characters in modern C++</span></a>]]></description>
										<content:encoded><![CDATA[<p>Consider the following problem. You want to iterate through the characters of a strings and find only those matching some criteria. For example, you might want scan an HTML string looking for the characters &#8216;&lt;&#8216;, &#8216;&amp;&#8217;, &#8216;\0&#8217;, &#8216;\n&#8217;. We might do it in C++ using the <tt>find_first_of</tt> function. It is a generic function that is meant to work with a wide range of containers.</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper" style="color: #000000;"><span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">string</span> data <span style="color: #808030;">=</span> load_file_content<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">data.html</span><span style="color: #800000;">"</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper" style="color: #000000;"><span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">string_view</span> targets <span style="color: #808030;">=</span> <span style="color: #800000;">"</span><span style="color: #0000e6;">&lt;&amp;</span><span style="color: #0f69ff;">\r</span><span style="color: #0f69ff;">\0</span><span style="color: #800000;">"</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800000;"><span style="caret-color: #800000;"><b>auto </b></span></span><span style="color: #000000;">start </span><span style="color: #808030;">=</span><span style="color: #000000;"> data.begin</span><span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper" style="caret-color: #800000;"><span style="color: #800000;"><b>auto </b></span></span><span class="line_wrapper" style="color: #000000;">end <span style="color: #808030;">=</span> data.end<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper" style="color: #000000;"><span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span>start != end<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper" style="color: #000000;">  start <span style="color: #808030;">=</span> <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">find_first_of</span><span style="color: #808030;">(</span>start<span style="color: #808030;">,</span> end<span style="color: #808030;">,</span> targets.begin()<span style="color: #808030;">,</span></span>
<span class="line_wrapper" style="color: #000000;">       targets.end()<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper" style="color: #000000;">  <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>start != end<span style="color: #808030;">)</span> <span style="color: #800080;">{</span> </span>
<span class="line_wrapper" style="color: #000000;">    <span style="color: #696969;">/* you are pointing at start */</span></span>
<span class="line_wrapper" style="color: #000000;">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper" style="color: #000000;"><span style="color: #800080;">}</span></span></pre>
<p>Unfortunately, the code is somewhat difficult to read.</p>
<p>Because our input is a regular C++ string, we can do slightly better by using one of the methods of the std::string instance. We lose in generality, but gain in simplicity:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #603000;">size_t</span> location <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span><span style="color: #808030;">(</span>location <span style="color: #808030;">=</span> data<span style="color: #808030;">.</span><span style="color: #603000;">find_first_of</span><span style="color: #808030;">(</span>targets<span style="color: #808030;">,</span> location<span style="color: #808030;">)</span><span style="color: #808030;">)</span> <span style="color: #808030;">!</span><span style="color: #808030;">=</span></span>
<span class="line_wrapper">  <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">string</span><span style="color: #800080;">::</span><span style="color: #7d0045;">npos</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #696969;">// matched character at data[location]</span></span>
<span class="line_wrapper">  location<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>It is still somewhat awkward, with the <tt>std::string::npos</tt> special value. We can do better using the ranges library introduced in C++20. <span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">The</span> <span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-1sw30gj r-z2wwpe r-mtzec0 r-1471scf r-1aiqnjv r-1hq4qhi r-16dba41 r-ilng1c r-trst2h r-1noe1sz r-njp1lv r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">std::ranges</span></span> <span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">library</span></span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">in</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">C++</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">is</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">part</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">of</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">the</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">C++20</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">standard.</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">It</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">introduces</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">a</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">range-based</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">approach</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">to</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">algorithms,</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">which</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">aims</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">to</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">make</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">working</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">with</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">sequences</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">of</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">data</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">more</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">intuitive</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">and</span> </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3 r-1ay1djp r-clrlgt r-6dt33c"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">flexible.</span>  In our case, </span>we can apply a filter to the string:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">auto</span> matched_characters <span style="color: #808030;">=</span></span>
<span class="line_wrapper">  data <span style="color: #808030;">|</span> <span style="color: #666616;">std</span><span style="color: #800080;">::</span>views<span style="color: #800080;">::</span>filter<span style="color: #808030;">(</span><span style="color: #808030;">[</span><span style="color: #808030;">]</span><span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">char</span> c<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">return</span> c <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'&lt;'</span> <span style="color: #808030;">|</span> c <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'&amp;'</span> <span style="color: #808030;">|</span> c <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\r'</span> <span style="color: #808030;">|</span> c <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\0'</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">&amp;</span>c <span style="color: #800080;">:</span> matched_characters<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #696969;">/* you hold a reference to a matched character */</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span></pre>
<p>I feel that it is easy to read, and it is still quite general. We are not assuming that the input is an actual std::string.</p>
<p>With C++23, we can easily create a coroutine instead. A coroutine in C++ is a generalization of functions that allow computation to be paused and resumed at specific points in the code. Unlike traditional functions which execute from start to finish, coroutines can suspend execution in the middle, return control back to the caller, and later resume from where they left off. Languages like Python have had coroutines for many years.</p>
<p>We can call a C++ function which creates such a coroutine:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">auto</span> target_finder <span style="color: #808030;">=</span> <span style="color: #808030;">[</span><span style="color: #808030;">]</span><span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">auto</span><span style="color: #808030;">&amp;</span> data<span style="color: #808030;">,</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">auto</span><span style="color: #808030;">&amp;</span> targets<span style="color: #808030;">)</span> <span style="color: #808030;">-</span><span style="color: #808030;">&gt;</span> <span style="color: #666616;">std</span><span style="color: #800080;">::</span>generator<span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span><span style="color: #800080;">&gt;</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">auto</span> start <span style="color: #808030;">=</span> data<span style="color: #808030;">.</span>begin<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">auto</span> end <span style="color: #808030;">=</span> data<span style="color: #808030;">.</span>end<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span>start <span style="color: #808030;">!</span><span style="color: #808030;">=</span> end<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    start <span style="color: #808030;">=</span> <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">find_first_of</span><span style="color: #808030;">(</span>start<span style="color: #808030;">,</span> end<span style="color: #808030;">,</span> targets<span style="color: #808030;">.</span>begin<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">,</span></span>
<span class="line_wrapper">                               targets<span style="color: #808030;">.</span>end<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> end<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">        <span style="color: #800000; font-weight: bold;">co_return</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800080;">}</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">co_yield</span> start<span style="color: #800080;">;</span></span>
<span class="line_wrapper">      start<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span></pre>
<p>We can then call the coroutine like so:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">auto</span> match <span style="color: #800080;">:</span> target_finder<span style="color: #808030;">(</span>data<span style="color: #808030;">,</span> targets<span style="color: #808030;">)</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">   <span style="color: #696969;">/* match is a matched character*/</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span></pre>
<p>It is evidently quite nice.</p>
<p>What about performance? <a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/tree/master/2024/10/06">I decided to see how fast I could iterate through some characters using an HTML file</a>. I use an Apple M2 processor for benchmarking. Unfortunately, Apple LLVM does not  yet support C++23 generators, but I can run GCC 14.</p>
<table>
<tbody>
<tr>
<th>method</th>
<th>Apple LLVM 15</th>
<th>GCC 14</th>
</tr>
<tr>
<td>std::find_first_of</td>
<td>2.3 GB/s</td>
<td>1.8 GB/s</td>
</tr>
<tr>
<td>std::string::find_first_of</td>
<td>2.3 GB/s</td>
<td>2.2 GB/s</td>
</tr>
<tr>
<td>std::views::filter</td>
<td>2.3 GB/s</td>
<td>2.2 GB/s</td>
</tr>
<tr>
<td>std::generator</td>
<td>N/A</td>
<td>0.4 GB/s</td>
</tr>
</tbody>
</table>
<p>My results suggest that the new std::ranges library produces competitive results. However, a coroutine should probably not be used in a performance critical scenario.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/10/06/iterating-through-matched-characters-in-modern-c-viewsfilter-and-coroutine/feed/</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
			</item>
		<item>
		<title>It is never too late to write your own C/C++ command-line utilities</title>
		<link>https://lemire.me/blog/2024/09/28/it-is-never-too-later-to-write-your-own-c-c-command-line-utilities/</link>
					<comments>https://lemire.me/blog/2024/09/28/it-is-never-too-later-to-write-your-own-c-c-command-line-utilities/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Sat, 28 Sep 2024 04:06:18 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21694</guid>

					<description><![CDATA[Recently, I received an email from an engineer at a prominent company who shared how he managed to save his employer tens of thousands of dollars annually by developing a custom command-line utility in C++. Without delving into specifics (which remain confidential), the company&#8217;s servers were tasked with querying a JSON file for a specific &#8230; <a href="https://lemire.me/blog/2024/09/28/it-is-never-too-later-to-write-your-own-c-c-command-line-utilities/" class="more-link">Continue reading <span class="screen-reader-text">It is never too late to write your own C/C++ command-line utilities</span></a>]]></description>
										<content:encoded><![CDATA[<div class="css-146c3p1 r-bcqeeo r-1ttztb7 r-qvutc0 r-37j5jr r-a023e6 r-rjixqe r-16dba41" dir="ltr"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">Recently, I received an email from an engineer at a prominent company who shared how he managed to save his employer tens of thousands of dollars annually by developing a custom command-line utility in C++.</span></div>
<div dir="ltr"></div>
<div class="css-146c3p1 r-bcqeeo r-1ttztb7 r-qvutc0 r-37j5jr r-a023e6 r-rjixqe r-16dba41" dir="ltr"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">Without delving into specifics (which remain confidential), the company&#8217;s servers were tasked with querying a JSON file for a specific value multiple times each second. This process was initially managed by a continuously running Python script.</span></div>
<div dir="ltr"></div>
<div class="css-146c3p1 r-bcqeeo r-1ttztb7 r-qvutc0 r-37j5jr r-a023e6 r-rjixqe r-16dba41" dir="ltr"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">The engineer explained that this Python solution was inefficient, monopolizing an entire CPU core on each server. The script&#8217;s basic structure was something like this:</span></div>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">with</span> <span style="color: #400000;">open</span><span style="color: #808030;">(</span>file_path<span style="color: #808030;">,</span> <span style="color: #800000;">'</span><span style="color: #0000e6;">r</span><span style="color: #800000;">'</span><span style="color: #808030;">)</span> <span style="color: #800000; font-weight: bold;">as</span> <span style="color: #400000;">file</span><span style="color: #808030;">:</span></span>
<span class="line_wrapper">  data <span style="color: #808030;">=</span> json<span style="color: #808030;">.</span>load<span style="color: #808030;">(</span><span style="color: #400000;">file</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">wealth_str <span style="color: #808030;">=</span> data<span style="color: #808030;">[</span><span style="color: #800000;">'</span><span style="color: #0000e6;">user</span><span style="color: #800000;">'</span><span style="color: #808030;">]</span><span style="color: #808030;">[</span><span style="color: #800000;">'</span><span style="color: #0000e6;">wealth</span><span style="color: #800000;">'</span><span style="color: #808030;">]</span></span>
<span class="line_wrapper">wealth <span style="color: #808030;">=</span> <span style="color: #400000;">float</span><span style="color: #808030;">(</span>wealth_str<span style="color: #808030;">)</span></span></pre>
<p>He replaced the Python code by the following C++ routine embedded in a small console application:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">simdjson<span style="color: #800080;">::</span>ondemand<span style="color: #800080;">::</span>parser parser<span style="color: #800080;">;</span></span>
<span class="line_wrapper">simdjson<span style="color: #800080;">::</span>padded_string json <span style="color: #808030;">=</span> simdjson<span style="color: #800080;">::</span>padded_string<span style="color: #800080;">::</span>load<span style="color: #808030;">(</span>myfile<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">simdjson<span style="color: #800080;">::</span>ondemand<span style="color: #800080;">::</span>document doc <span style="color: #808030;">=</span> parser<span style="color: #808030;">.</span>iterate<span style="color: #808030;">(</span>json<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #666616;">std</span><span style="color: #800080;">::</span>string_view url_string <span style="color: #808030;">=</span> doc<span style="color: #808030;">[</span><span style="color: #800000;">"</span><span style="color: #0000e6;">user</span><span style="color: #800000;">"</span><span style="color: #808030;">]</span><span style="color: #808030;">[</span><span style="color: #800000;">"</span><span style="color: #0000e6;">wealth</span><span style="color: #800000;">"</span><span style="color: #808030;">]</span><span style="color: #808030;">.</span>get_string<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">double</span> result<span style="color: #800080;">;</span></span>
<span class="line_wrapper">fast_float<span style="color: #800080;">::</span>from_chars<span style="color: #808030;">(</span>url_string<span style="color: #808030;">.</span>data<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">,</span> url_string<span style="color: #808030;">.</span>data<span style="color: #808030;">(</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">    <span style="color: #808030;">+</span>url_string<span style="color: #808030;">.</span>size<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">,</span> result<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
</pre>
<p>Naturally, I assumed that a C++ solution would outperform Python in this scenario. However, I questioned whether the difference justified the development effort. The engineer was adamant that it did. Intrigued, <a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/tree/master/2024/09/27">I chose to conduct a small benchmark to test this claim</a>. If the application was sophisticated, I would have used a command-line argument parser such as cxxopts, but I just went bare metal.</p>
<p>I measure how many times a second each solution can query the content of a small JSON file. Importantly, I record the entire time required, from the launch of the process. I use hyperfine (an open source tool) to get accurate measurements.  I use my macBook (M2) with Apple LLVM 15 and Python 3.12.</p>
<table>
<tbody>
<tr>
<th>solution</th>
<th>times/second</th>
</tr>
<tr>
<td>C++</td>
<td>270</td>
</tr>
<tr>
<td>Python</td>
<td>22</td>
</tr>
</tbody>
</table>
<div class="css-146c3p1 r-bcqeeo r-1ttztb7 r-qvutc0 r-37j5jr r-a023e6 r-rjixqe r-16dba41" dir="ltr"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3"> The C++ console app is  not just faster; it&#8217;s a lightning bolt compared to the Python script—clocking in at over ten times the speed. If your favorite video game was powered by this C++ app, it could seamlessly update every frame without breaking a sweat. But swap that out for the Python script? You&#8217;d be stuck in a sluggish 22 frames per second world—hardly the smooth gameplay anyone dreams of.</span></div>
<div dir="ltr"></div>
<div class="css-146c3p1 r-bcqeeo r-1ttztb7 r-qvutc0 r-37j5jr r-a023e6 r-rjixqe r-16dba41" dir="ltr"><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">Migrating a Python script to C++ could well be worthwhile in some instances. </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">However, it&#8217;s not all sunshine and rainbows with C++. Diving into C++ requires more mental effort. Plus, there&#8217;s the compilation time—nobody likes to wait for the code to build, even if it only takes a few seconds.</span></div>
<div dir="ltr"></div>
<div dir="ltr">Python comes with a lot of bundled functionality whereas C++ requires you to give more thought to dependencies. Thankfully CMake with CPM make recovering the dependencies painless:</div>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #004a43;">include</span><span style="color: #808030;">(</span>cmake<span style="color: #808030;">/</span>CPM.cmake<span style="color: #808030;">)</span></span>
<span class="line_wrapper">CPMAddPackage<span style="color: #808030;">(</span><span style="color: #0000e6;">"gh:fmtlib/fmt#11.0.2"</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">CPMAddPackage<span style="color: #808030;">(</span><span style="color: #0000e6;">"gh:simdjson/simdjson@3.10.1"</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">CPMAddPackage<span style="color: #808030;">(</span><span style="color: #0000e6;">"gh:fastfloat/fast_float@6.1.6"</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">add_executable<span style="color: #808030;">(</span>main main.<span style="color: #004a43;">cpp</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">target_link_libraries<span style="color: #808030;">(</span>main fmt<span style="color: #808030;">:</span><span style="color: #808030;">:</span>fmt simdjson<span style="color: #808030;">:</span><span style="color: #808030;">:</span>simdjson FastFloat<span style="color: #808030;">:</span><span style="color: #808030;">:</span>fast_float<span style="color: #808030;">)</span></span></pre>
<div dir="ltr">Of course, artificial intelligence might soon rewrite your Python scripts into finely tuned C++. Maybe.</div>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/09/28/it-is-never-too-later-to-write-your-own-c-c-command-line-utilities/feed/</wfw:commentRss>
			<slash:comments>13</slash:comments>
		
		
			</item>
		<item>
		<title>The PhD Paradox: A Journey into Academia&#8217;s Upside-Down World</title>
		<link>https://lemire.me/blog/2024/09/11/the-phd-paradox-a-journey-into-academias-upside-down-world/</link>
					<comments>https://lemire.me/blog/2024/09/11/the-phd-paradox-a-journey-into-academias-upside-down-world/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Wed, 11 Sep 2024 20:33:28 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21688</guid>

					<description><![CDATA[Imagine a world where becoming a doctor isn&#8217;t about years of rigorous study, but about showcasing your life&#8217;s work. That&#8217;s how doctorates used to roll. You&#8217;d write a book, make a groundbreaking discovery, and voila, a doctorate was yours. Fast forward to today, and we&#8217;ve flipped the script. Now, a PhD is less about what &#8230; <a href="https://lemire.me/blog/2024/09/11/the-phd-paradox-a-journey-into-academias-upside-down-world/" class="more-link">Continue reading <span class="screen-reader-text">The PhD Paradox: A Journey into Academia&#8217;s Upside-Down World</span></a>]]></description>
										<content:encoded><![CDATA[<p><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">Imagine a world where becoming a doctor isn&#8217;t about years of rigorous study, but about showcasing your life&#8217;s work. That&#8217;s how doctorates used to roll. You&#8217;d write a book, make a groundbreaking discovery, and voila, a doctorate was yours. Fast forward to today, and we&#8217;ve flipped the script. Now, a PhD is less about what you&#8217;ve done and more about preparing you for a career in academia, often at a subsidized cost. Sounds great, right? </span></p>
<p><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">Here&#8217;s the catch: this system works like a charm as long as universities are expanding. But what happens when they hit the brakes? You guessed it &#8211; a PhD glut. With more PhDs than professorships, the job market turns into a gladiatorial arena where only the most politically savvy survive. This isn&#8217;t just about competition; it&#8217;s about who can navigate the labyrinthine politics of academia. </span></p>
<p><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">Universities, with their pristine campuses and lofty ideals, market themselves as bastions of brilliance and nurturing. But peel back the curtain, and you might find a different story. Professors, often out of touch with the real world, teach subjects they&#8217;ve never truly experienced. Take entrepreneurship, for example. You&#8217;d think those teaching it would have started a business, right? Nope. Many haven&#8217;t even stepped into a startup, let alone run one.</span></p>
<p><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">Then there&#8217;s the publishing game. Tenured professors, the supposed engines of new knowledge, might not even produce a paper a year when you account for co-authorships. And when they do publish, well, let&#8217;s just say the quality can be&#8230;variable. Even at the pinnacle of academia, like Harvard, the standards can slip, as seen with its former president&#8217;s less-than-stellar publication record. </span></p>
<p><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">So why do we keep pushing our youth into this system? It&#8217;s all about signaling. A degree, especially a PhD, is like a badge, a shiny sticker that says, &#8220;I&#8217;m educated.&#8221; But here&#8217;s the kicker &#8211; this badge might not make you more productive or happier. In fact, less time in school and more time in the real world could be the real recipe for success. </span></p>
<p><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">Imagine if we recruited professors not just for their academic credentials but for their real-world achievements. People </span><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">who&#8217;ve actually built things that work, could revolutionize how we teach software engineering or entrepreneurship. But we&#8217;re not there yet. We&#8217;re still caught in a system that values form over function, prestige over practicality. </span></p>
<p><span class="css-1jxf684 r-bcqeeo r-1ttztb7 r-qvutc0 r-poiln3">Our love affair with academia might be making us less productive and more miserable. Maybe it&#8217;s time we rethought this whole PhD business, not as a rite of passage into an elite club, but as a tool for real-world impact. After all, isn&#8217;t education supposed to prepare us for life, not just for more education?</span></p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/09/11/the-phd-paradox-a-journey-into-academias-upside-down-world/feed/</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
			</item>
		<item>
		<title>Replace strings by views when you can</title>
		<link>https://lemire.me/blog/2024/09/09/replace-stdstring-by-stdstring_view-when-you-can/</link>
					<comments>https://lemire.me/blog/2024/09/09/replace-stdstring-by-stdstring_view-when-you-can/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Mon, 09 Sep 2024 20:26:36 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21677</guid>

					<description><![CDATA[C++ programmers tend to represent strings using the std::string class. Though the implementation might vary, each instance of an std::string might use 32 bytes. Though it is not a large amount of memory, it can add up. In the Node.js runtime, as part of the build tools, there is a function which precomputes the string &#8230; <a href="https://lemire.me/blog/2024/09/09/replace-stdstring-by-stdstring_view-when-you-can/" class="more-link">Continue reading <span class="screen-reader-text">Replace strings by views when you can</span></a>]]></description>
										<content:encoded><![CDATA[<p>C++ programmers tend to represent strings using the std::string class. Though the implementation might vary, each instance of an std::string might use 32 bytes. Though it is not a large amount of memory, it can add up.</p>
<p>In the Node.js runtime, as part of the build tools, there is a function which precomputes the string representation of all 16-bit integers, followed by a comma.</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">vector</span><span style="color: #800080;">&lt;</span><span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">string</span><span style="color: #800080;">&gt;</span> precompute_string<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #603000;">size_t</span> size <span style="color: #808030;">=</span> <span style="color: #008c00;">1</span> <span style="color: #808030;">&lt;</span><span style="color: #808030;">&lt;</span> <span style="color: #008c00;">16</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">vector</span><span style="color: #800080;">&lt;</span><span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">string</span><span style="color: #800080;">&gt;</span> code_table<span style="color: #808030;">(</span>size<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&lt;</span> size<span style="color: #800080;">;</span> <span style="color: #808030;">+</span><span style="color: #808030;">+</span>i<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    code_table<span style="color: #808030;">[</span>i<span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #666616;">std</span><span style="color: #800080;">::</span>to_string<span style="color: #808030;">(</span>i<span style="color: #808030;">)</span> <span style="color: #808030;">+</span> <span style="color: #0000e6;">','</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> code_table<span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>Creating 65536 strings uses 2 megabytes on most systems.</p>
<p>What could we do instead?</p>
<p>We could create a single string buffer made of the string &#8216;0,1,2,&#8230;,65535,&#8217;, and record the offsets within the string so that we can locate quickly where a given value is. That is, given the integer 500, I want to get immediately the location of the substring &#8216;500,&#8217;. I need two offsets: the offset of the current value and the offset of the next value.</p>
<p>The unique string requires only 382106 bytes, which is quite a bit, but several times less than the 2 megabytes needed by the array of std::string instances.</p>
<p>In C++, you might code it as follows. For simplicity, we can roll our own integer-to-string routine.</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">pair</span><span style="color: #808030;">&lt;</span><span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">array</span><span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">char</span><span style="color: #808030;">,</span> <span style="color: #008c00;">382106</span><span style="color: #800080;">&gt;</span><span style="color: #808030;">,</span> </span>
<span class="line_wrapper">  <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">array</span><span style="color: #808030;">&lt;</span><span style="color: #603000;">uint32_t</span><span style="color: #808030;">,</span> <span style="color: #008c00;">65537</span><span style="color: #808030;">&gt;</span><span style="color: #808030;">&gt;</span> precompute_string_fast<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">array</span><span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">char</span><span style="color: #808030;">,</span> <span style="color: #008c00;">382106</span><span style="color: #800080;">&gt;</span> str<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">array</span><span style="color: #800080;">&lt;</span><span style="color: #603000;">uint32_t</span><span style="color: #808030;">,</span> <span style="color: #008c00;">65537</span><span style="color: #800080;">&gt;</span> off<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  off<span style="color: #808030;">[</span><span style="color: #008c00;">0</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>p <span style="color: #808030;">=</span> <span style="color: #808030;">&amp;</span>str<span style="color: #808030;">[</span><span style="color: #008c00;">0</span><span style="color: #808030;">]</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">constexpr</span> <span style="color: #800000; font-weight: bold;">auto</span> const_int_to_str <span style="color: #808030;">=</span> </span>
<span class="line_wrapper">        <span style="color: #808030;">[</span><span style="color: #808030;">]</span><span style="color: #808030;">(</span><span style="color: #603000;">uint16_t</span> value<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>s<span style="color: #808030;">)</span> <span style="color: #808030;">-</span><span style="color: #808030;">&gt;</span> <span style="color: #603000;">uint32_t</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #603000;">uint32_t</span> index <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">do</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      s<span style="color: #808030;">[</span>index<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #0000e6;">'0'</span> <span style="color: #808030;">+</span> <span style="color: #808030;">(</span>value <span style="color: #808030;">%</span> <span style="color: #008c00;">10</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      value <span style="color: #808030;">/</span><span style="color: #808030;">=</span> <span style="color: #008c00;">10</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span> <span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span>value <span style="color: #808030;">!</span><span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>

<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint32_t</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&lt;</span> index <span style="color: #808030;">/</span> <span style="color: #008c00;">2</span><span style="color: #800080;">;</span> <span style="color: #808030;">+</span><span style="color: #808030;">+</span>i<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">char</span> temp <span style="color: #808030;">=</span> s<span style="color: #808030;">[</span>i<span style="color: #808030;">]</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      s<span style="color: #808030;">[</span>i<span style="color: #808030;">]</span> <span style="color: #808030;">=</span> s<span style="color: #808030;">[</span>index <span style="color: #808030;">-</span> i <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">]</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      s<span style="color: #808030;">[</span>index <span style="color: #808030;">-</span> i <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> temp<span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">    s<span style="color: #808030;">[</span>index<span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #0000e6;">','</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">return</span> index <span style="color: #808030;">+</span> <span style="color: #008c00;">1</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">int</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&lt;</span> <span style="color: #008c00;">65536</span><span style="color: #800080;">;</span> <span style="color: #808030;">+</span><span style="color: #808030;">+</span>i<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #603000;">size_t</span> offset <span style="color: #808030;">=</span> const_int_to_str<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> p<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    p <span style="color: #808030;">+</span><span style="color: #808030;">=</span> offset<span style="color: #800080;">;</span></span>
<span class="line_wrapper">    off<span style="color: #808030;">[</span>i <span style="color: #808030;">+</span> <span style="color: #008c00;">1</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> off<span style="color: #808030;">[</span>i<span style="color: #808030;">]</span> <span style="color: #808030;">+</span> offset<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> <span style="color: #800080;">{</span>str<span style="color: #808030;">,</span> off<span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>We do not actually need to store the offsets. We can compute them on the fly instead quite economically. However, it takes some effort and unless you are stressed for memory, it is likely better to compute the offsets as they require only 256 KB.</p>
<p><a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/tree/master/2024/09/09">I wrote a benchmark</a> to see how long it takes to precompute the data. On my M2 macBook, I get the following numbers:</p>
<p>&nbsp;</p>
<table>
<tbody>
<tr>
<td>array of std::string</td>
<td>0.57 ms</td>
</tr>
<tr>
<td>one big string + offsets</td>
<td>0.26 ms</td>
</tr>
</tbody>
</table>
<p>So constructing just one string might be twice as fast.</p>
<p>What about query time? Retrieving a reference to an std::string instance is trivial in the case of the array of std::string instances. For the big string case, we return a compute std::string_view instance.</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">auto</span> GetCodeFast <span style="color: #808030;">=</span> <span style="color: #808030;">[</span><span style="color: #808030;">&amp;</span>fast_table<span style="color: #808030;">,</span> <span style="color: #808030;">&amp;</span>offsets<span style="color: #808030;">]</span><span style="color: #808030;">(</span><span style="color: #603000;">uint16_t</span> index<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">return</span> <span style="color: #666616;">std</span><span style="color: #800080;">::</span>string_view<span style="color: #808030;">(</span><span style="color: #808030;">&amp;</span>fast_table<span style="color: #808030;">[</span>offsets<span style="color: #808030;">[</span>index<span style="color: #808030;">]</span><span style="color: #808030;">]</span><span style="color: #808030;">,</span></span>
<span class="line_wrapper">                            offsets<span style="color: #808030;">[</span>index <span style="color: #808030;">+</span> <span style="color: #008c00;">1</span><span style="color: #808030;">]</span> <span style="color: #808030;">-</span> offsets<span style="color: #808030;">[</span>index<span style="color: #808030;">]</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span><span style="color: #800080;">;</span></span></pre>
<p>Though it looks like a fair amount of work, I find that processing 65536 randomly generated values is significantly faster with the one-big-string approach.</p>
<table>
<tbody>
<tr>
<td>array of std::string (query)</td>
<td>0.12 ms</td>
</tr>
<tr>
<td>one big string + offsets (query)</td>
<td>0.08 ms</td>
</tr>
</tbody>
</table>
<p>There are other ways to solve this problem. For example, instead of recomputing or computing offsets, we can use a fixed number of bytes per element (say 6 or 8 bytes) and either store the number of digits or compute it on the fly. You can also try to use even less memory by not storing a string like &#8217;66,&#8217; multiple times. All these variations have different trade offs and which is best depends on your application.</p>
<p>Generating many non-trivial objects is a performance anti-pattern. Put all your data together when you can.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/09/09/replace-stdstring-by-stdstring_view-when-you-can/feed/</wfw:commentRss>
			<slash:comments>12</slash:comments>
		
		
			</item>
		<item>
		<title>Compressing floating-point numbers quickly by converting them to brain floats</title>
		<link>https://lemire.me/blog/2024/09/02/compressing-floating-point-numbers-quickly-by-converting-them-to-brain-floats/</link>
					<comments>https://lemire.me/blog/2024/09/02/compressing-floating-point-numbers-quickly-by-converting-them-to-brain-floats/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Mon, 02 Sep 2024 22:52:28 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21588</guid>

					<description><![CDATA[We sometimes have to work a large quantity of floating-point numbers. This volume can be detrimental to performance. Thus we often want to compress these numbers. Large-language models routinely do so. A sensible approach is to convert them to brain floating point numbers. These are 16-bit numbers that are often capable of representing accurately a &#8230; <a href="https://lemire.me/blog/2024/09/02/compressing-floating-point-numbers-quickly-by-converting-them-to-brain-floats/" class="more-link">Continue reading <span class="screen-reader-text">Compressing floating-point numbers quickly by converting them to brain floats</span></a>]]></description>
										<content:encoded><![CDATA[<p>We sometimes have to work a large quantity of floating-point numbers. This volume can be detrimental to performance. Thus we often want to compress these numbers. Large-language models routinely do so.</p>
<p>A sensible approach is to convert them to brain floating point numbers. These are 16-bit numbers that are often capable of representing accurately a wide range of numbers. Compared to the common 64-bit floating-point numbers, it is a net saving of 4×. You can do quite better than a 4× factor by using statistical analysis over your dataset. However, brain floats have the benefit of being standard and they are supported at the CPU level.</p>
<p>If you have a recent AMD processor (Zen 4 or better) or a recent Intel server processor (Sapphire Rapids), you have fast instructions to convert 32-bit floating-point numbers to and from 16-bit brain float numbers. Specifically, you have access to Single Instruction, Multiple Data (SIMD) instructions that can convert several numbers at once (with one instruction).</p>
<p>We have had instructions to go from 64-bit numbers to 32-bit numbers and back for some time. So we can go from 64-bit to 32-bit and then to 16-bit, and similarly in reverse.</p>
<p>Using Intel intrinsic functions, in C, you might compress 8 numbers with this code:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #696969;">// Load 8 double-precision floats</span></span>
<span class="line_wrapper">__m512d src_vec <span style="color: #808030;">=</span> _mm512_loadu_pd<span style="color: #808030;">(</span><span style="color: #808030;">&amp;</span>src<span style="color: #808030;">[</span>i<span style="color: #808030;">]</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>

<span class="line_wrapper"><span style="color: #696969;">// Convert to 16-bit floats with rounding</span></span>
<span class="line_wrapper">__m128bh dst_vec <span style="color: #808030;">=</span> _mm256_cvtneps_pbh<span style="color: #808030;">(</span>_mm512_cvt_roundpd_ps<span style="color: #808030;">(</span>src_vec<span style="color: #808030;">,</span> </span>
<span class="line_wrapper">      _MM_FROUND_TO_NEAREST_INT <span style="color: #808030;">|</span>_MM_FROUND_NO_EXC<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>

<span class="line_wrapper"><span style="color: #696969;">// Store the result</span></span>
<span class="line_wrapper">_mm_storeu_si128<span style="color: #808030;">(</span><span style="color: #808030;">(</span>__m128i<span style="color: #808030;">*</span><span style="color: #808030;">)</span><span style="color: #808030;">&amp;</span>dst<span style="color: #808030;">[</span>i<span style="color: #808030;">]</span><span style="color: #808030;">,</span> <span style="color: #808030;">*</span><span style="color: #808030;">(</span>__m128i<span style="color: #808030;">*</span><span style="color: #808030;">)</span><span style="color: #808030;">&amp;</span>dst_vec<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span></pre>
<p>Going the other way and converting eight 16-bit numbers to eight 64-bit numbers is similar:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #696969;">// Load 8 half-precision floats</span></span>
<span class="line_wrapper">__m128i src_vec <span style="color: #808030;">=</span> _mm_loadu_si128<span style="color: #808030;">(</span><span style="color: #808030;">(</span>__m128i<span style="color: #808030;">*</span><span style="color: #808030;">)</span><span style="color: #808030;">&amp;</span>src<span style="color: #808030;">[</span>i<span style="color: #808030;">]</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>

<span class="line_wrapper"><span style="color: #696969;">// Convert to double-precision floats</span></span>
<span class="line_wrapper">__m512d dst_vec <span style="color: #808030;">=</span> _mm512_cvtps_pd<span style="color: #808030;">(</span>_mm256_cvtpbh_ps<span style="color: #808030;">(</span><span style="color: #808030;">*</span><span style="color: #808030;">(</span>__m128bh<span style="color: #808030;">*</span><span style="color: #808030;">)</span><span style="color: #808030;">&amp;</span>src_vec<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>

<span class="line_wrapper"><span style="color: #696969;">// Store the result</span></span>
<span class="line_wrapper">_mm512_storeu_pd<span style="color: #808030;">(</span><span style="color: #808030;">&amp;</span>dst<span style="color: #808030;">[</span>i<span style="color: #808030;">]</span><span style="color: #808030;">,</span> dst_vec<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span></pre>
<p>How precise is it? It tried it on a geojson file representing the border of Canada: it is a collection of coordinates. The worst absolute error happens when the number -135.500305 is approximated by -136. The brain float format will not distinguish between the numbers -65.613617 and -66.282776, they both get represented as -66.5. Whether that&#8217;s acceptable depends on your application.</p>
<p>Is it fast? I wrote a <a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/blob/master/2024/09/02/">benchmark</a> where I convert all the numbers in the coordinates of the Canadian border. I use a Zen 4 processor (AMD EPYC 9R14 @ 2.6GHz) with GCC 13.</p>
<table>
<tbody>
<tr>
<td>compression</td>
<td>16 GB/s</td>
<td>2 billion floats/s</td>
</tr>
<tr>
<td>decompression</td>
<td>7.4 GB/s</td>
<td>0.9 billion floats/s</td>
</tr>
</tbody>
</table>
<p>It is likely that better code can get even better performance, but it is already quite fast.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/09/02/compressing-floating-point-numbers-quickly-by-converting-them-to-brain-floats/feed/</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
			</item>
		<item>
		<title>Parsing tiny and very large floating-point values: a programming-language comparison</title>
		<link>https://lemire.me/blog/2024/08/26/parsing-tiny-and-very-large-floating-point-values-a-programming-language-comparison/</link>
					<comments>https://lemire.me/blog/2024/08/26/parsing-tiny-and-very-large-floating-point-values-a-programming-language-comparison/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Mon, 26 Aug 2024 15:34:55 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21582</guid>

					<description><![CDATA[Most programming languages support floating-point numbers. You typically have the ability to turn a string into a floating-point number. E.g., &#8220;3.1416&#8221; could be parsed as a number close to pi. However strings typically cannot be represented exactly or at all. For example, &#8220;1e-1000&#8221; is too small and &#8220;1e1000&#8221; is too large for even 64-bit floating-point &#8230; <a href="https://lemire.me/blog/2024/08/26/parsing-tiny-and-very-large-floating-point-values-a-programming-language-comparison/" class="more-link">Continue reading <span class="screen-reader-text">Parsing tiny and very large floating-point values: a programming-language comparison</span></a>]]></description>
										<content:encoded><![CDATA[<p>Most programming languages support floating-point numbers. You typically have the ability to turn a string into a floating-point number. E.g., &#8220;3.1416&#8221; could be parsed as a number close to pi. However strings typically cannot be represented exactly or at all. For example, &#8220;1e-1000&#8221; is too small and &#8220;1e1000&#8221; is too large for even 64-bit floating-point types.</p>
<p>Most languages represent these strings as the number zero and the value &#8216;infinity&#8217;. Let us consider Python as an example:</p>
<pre>&gt;&gt;&gt; float("1e-1000")
0.0
&gt;&gt;&gt; float("1e1000")
inf
</pre>
<p>The Go language gives the same result with the caveat that <tt>1e1000</tt> triggers an error (which you can ignore). Consider the following Go code:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">package</span> main</span>

<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">import</span> <span style="color: #808030;">(</span></span>
<span class="line_wrapper">    <span style="color: #800000;">"</span><span style="color: #0000e6;">fmt</span><span style="color: #800000;">"</span></span>
<span class="line_wrapper">    <span style="color: #800000;">"</span><span style="color: #0000e6;">strconv</span><span style="color: #800000;">"</span></span>
<span class="line_wrapper"><span style="color: #808030;">)</span></span>

<span class="line_wrapper"><span style="color: #400000;">func</span> main<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #808030;">{</span></span>
<span class="line_wrapper">    f<span style="color: #808030;">,</span> err <span style="color: #808030;">:</span><span style="color: #808030;">=</span> strconv<span style="color: #808030;">.</span>ParseFloat<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">1e-1000</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> <span style="color: #008c00;">64</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">    fmt<span style="color: #808030;">.</span>Println<span style="color: #808030;">(</span>f<span style="color: #808030;">,</span> err<span style="color: #808030;">)</span></span>
<span class="line_wrapper">    f<span style="color: #808030;">,</span> err <span style="color: #808030;">=</span> strconv<span style="color: #808030;">.</span>ParseFloat<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">1e1000</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> <span style="color: #008c00;">64</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">    fmt<span style="color: #808030;">.</span>Println<span style="color: #808030;">(</span>f<span style="color: #808030;">,</span> err<span style="color: #808030;">)</span></span>
<span class="line_wrapper"><span style="color: #808030;">}</span></span>
</pre>
<p>It prints out:</p>
<pre>0 
+Inf strconv.ParseFloat: parsing "1e1000": value out of range
</pre>
<p>The C language also gives you 0 and infinity, but both are consider out of range. Let us consider the following C code&#8230;</p>
<pre><span style="color: #004a43;">#</span><span style="color: #004a43;">include </span><span style="color: #800000;">&lt;</span><span style="color: #40015a;">stdio.h</span><span style="color: #800000;">&gt;</span>
<span style="color: #004a43;">#</span><span style="color: #004a43;">include </span><span style="color: #800000;">&lt;</span><span style="color: #40015a;">errno.h</span><span style="color: #800000;">&gt;</span>
<span style="color: #004a43;">#</span><span style="color: #004a43;">include </span><span style="color: #800000;">&lt;</span><span style="color: #40015a;">stdlib.h</span><span style="color: #800000;">&gt;</span>
<span style="color: #800000; font-weight: bold;">int</span> <span style="color: #400000;">main</span><span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">void</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span>
<span style="color: #800000; font-weight: bold;">  const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>p <span style="color: #808030;">=</span> <span style="color: #800000;">"</span><span style="color: #0000e6;">1e-1000 1e1000</span><span style="color: #800000;">"</span><span style="color: #800080;">;</span>
<span style="color: #603000;">  printf</span><span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">Parsing '</span><span style="color: #007997;">%s</span><span style="color: #0000e6;">':</span><span style="color: #0f69ff;">\n</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> p<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<span style="color: #800000; font-weight: bold;">  char</span> <span style="color: #808030;">*</span>end<span style="color: #800080;">;</span>
<span style="color: #800000; font-weight: bold;">  for</span> <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">double</span> f <span style="color: #808030;">=</span> <span style="color: #603000;">strtod</span><span style="color: #808030;">(</span>p<span style="color: #808030;">,</span> <span style="color: #808030;">&amp;</span>end<span style="color: #808030;">)</span><span style="color: #800080;">;</span> p <span style="color: #808030;">!</span><span style="color: #808030;">=</span> end<span style="color: #800080;">;</span> f <span style="color: #808030;">=</span> <span style="color: #603000;">strtod</span><span style="color: #808030;">(</span>p<span style="color: #808030;">,</span> <span style="color: #808030;">&amp;</span>end<span style="color: #808030;">)</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span>
<span style="color: #603000;">    printf</span><span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">'</span><span style="color: #007997;">%.*s</span><span style="color: #0000e6;">' -&gt; </span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">int</span><span style="color: #808030;">)</span><span style="color: #808030;">(</span>end<span style="color: #808030;">-</span>p<span style="color: #808030;">)</span><span style="color: #808030;">,</span> p<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
    p <span style="color: #808030;">=</span> end<span style="color: #800080;">;</span>
<span style="color: #800000; font-weight: bold;">    if</span> <span style="color: #808030;">(</span>errno <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #7d0045;">ERANGE</span><span style="color: #808030;">)</span><span style="color: #800080;">{</span>
<span style="color: #603000;">      printf</span><span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">range error, got </span><span style="color: #800000;">"</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>
      errno <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span>
<span style="color: #800080;">   }</span>
<span style="color: #603000;">   printf</span><span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #007997;">%f</span><span style="color: #0f69ff;">\n</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> f<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<span style="color: #800080;"> }</span>
<span style="color: #800080;">}</span></pre>
<p><!--Created using ToHTML.com on 2024-08-26 15:09:37 UTC --></p>
<p>It prints out</p>
<pre>Parsing '1e-1000 1e1000':
'1e-1000' -&gt; range error, got 0.000000
' 1e1000' -&gt; range error, got inf
</pre>
<p>What about C++? Let us consider the following code.</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">#include <span style="color: #808030;">&lt;</span>cstdio<span style="color: #808030;">&gt;</span></span>
<span class="line_wrapper">#include <span style="color: #808030;">&lt;</span>charconv<span style="color: #808030;">&gt;</span></span>
<span class="line_wrapper">#include <span style="color: #808030;">&lt;</span>string<span style="color: #808030;">&gt;</span></span>
<span class="line_wrapper">int main<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #808030;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span><span style="color: #808030;">(</span>std<span style="color: #808030;">:</span><span style="color: #808030;">:</span>string str <span style="color: #808030;">:</span> <span style="color: #808030;">{</span><span style="color: #800000;">"</span><span style="color: #0000e6;">1e-1000</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> <span style="color: #800000;">"</span><span style="color: #0000e6;">1e1000</span><span style="color: #800000;">"</span><span style="color: #808030;">}</span><span style="color: #808030;">)</span> <span style="color: #808030;">{</span></span>
<span class="line_wrapper">   double value = -1<span style="color: #808030;">;</span></span>
<span class="line_wrapper">   printf<span style="color: #808030;">(</span><span style="color: #800000;">"parsing </span><span style="color: #007997;">%s</span><span style="color: #0f69ff;">\n</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> str<span style="color: #808030;">.</span>c_str<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #808030;">;</span></span>
<span class="line_wrapper">   auto r <span style="color: #808030;">=</span> std<span style="color: #808030;">:</span><span style="color: #808030;">:</span>from_chars<span style="color: #808030;">(</span>str<span style="color: #808030;">.</span>data<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">,</span> str<span style="color: #808030;">.</span>data<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #808030;">+</span> str<span style="color: #808030;">.</span>size<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">,</span> value<span style="color: #808030;">)</span><span style="color: #808030;">;</span></span>
<span class="line_wrapper">   <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span>r<span style="color: #808030;">.</span>ec <span style="color: #808030;">=</span><span style="color: #808030;">=</span> std<span style="color: #808030;">:</span><span style="color: #808030;">:</span>errc<span style="color: #808030;">:</span><span style="color: #808030;">:</span>result_out_of_range<span style="color: #808030;">)</span> <span style="color: #808030;">{</span> printf<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">out of range </span><span style="color: #800000;">"</span><span style="color: #808030;">)</span><span style="color: #808030;">;</span> <span style="color: #808030;">}</span></span>
<span class="line_wrapper">   printf<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #007997;">%f</span><span style="color: #0f69ff;">\n</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> value<span style="color: #808030;">)</span><span style="color: #808030;">;</span></span>
<span class="line_wrapper">  <span style="color: #808030;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> EXIT_SUCCESS<span style="color: #808030;">;</span></span>
<span class="line_wrapper"><span style="color: #808030;">}</span></span></pre>
<p>What does this output?</p>
<p>The answer is: &#8220;it depends&#8221;.</p>
<p>Under LLVM/libc++, the code does not build because it is still lacking support for floating parsing. (You are expected to use the C function strtod.)</p>
<p>Under Visual Studio, you get the same result as C:</p>
<pre>parsing 1e-1000
out of range 0.000000
parsing 1e1000
out of range inf
</pre>
<p>GCC/glibc++ relies on the <a href="https://github.com/fastfloat/fast_float">fast_float library</a> which follows the same behavior. However, the GCC folks added a special case handling, and they discard the parsed value before returning, thus you cannot distinguish 1e1000 and 1e-1000 when parsing strings with GCC/glibc++: both are unknown values &#8216;out of range&#8217;. You get the following with GCC:</p>
<pre>parsing 1e-1000
out of range -1.000000
parsing 1e1000
out of range -1.00000
</pre>
<p>The -1 value is just the bogus value that I had used to initialize the variable. The C++ language architects are aware of this issue, search for <em>Floating point from_chars API does not distinguish between overflow and underflow</em>.</p>
<p>Interestingly, both GCC/glibc++ and Microsoft Visual Studio will happily return infinity when parsing the string <tt>"inf"</tt> and not trigger an out of range error.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/08/26/parsing-tiny-and-very-large-floating-point-values-a-programming-language-comparison/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>Faster random integer generation with batching</title>
		<link>https://lemire.me/blog/2024/08/17/faster-random-integer-generation-with-batching/</link>
					<comments>https://lemire.me/blog/2024/08/17/faster-random-integer-generation-with-batching/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Sat, 17 Aug 2024 02:11:30 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21566</guid>

					<description><![CDATA[We often generate random integers. Quite often these numbers must be within an interval: e.g., an integer between 0 and 100. One application is a random shuffle. A standard algorithm for a fair random shuffle is the Knuth algorithm: void shuffle(mytype *storage, uint64_t size) { for (uint64_t i = size; i &#62; 1; i--) { &#8230; <a href="https://lemire.me/blog/2024/08/17/faster-random-integer-generation-with-batching/" class="more-link">Continue reading <span class="screen-reader-text">Faster random integer generation with batching</span></a>]]></description>
										<content:encoded><![CDATA[<p>We often generate random integers. Quite often these numbers must be within an interval: e.g., an integer between 0 and 100. One application is a random shuffle. A standard algorithm for a fair random shuffle is the Knuth algorithm:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> shuffle<span style="color: #808030;">(</span>mytype <span style="color: #808030;">*</span>storage<span style="color: #808030;">,</span> <span style="color: #603000;">uint64_t</span> size<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span> i <span style="color: #808030;">=</span> size<span style="color: #800080;">;</span> i <span style="color: #808030;">&gt;</span> <span style="color: #008c00;">1</span><span style="color: #800080;">;</span> i<span style="color: #808030;">-</span><span style="color: #808030;">-</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #603000;">uint64_t</span> nextpos <span style="color: #808030;">=</span> random<span style="color: #808030;">(</span>i<span style="color: #808030;">)</span><span style="color: #800080;">;</span> <span style="color: #696969;">// random value in [0,i)</span></span>
<span class="line_wrapper">    <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">swap</span><span style="color: #808030;">(</span>storage<span style="color: #808030;">[</span>i <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">]</span><span style="color: #808030;">,</span> storage<span style="color: #808030;">[</span>nextpos<span style="color: #808030;">]</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>It is how the C++ function <tt>std::shuffle</tt> is implemented, as well as any similar standard shuffle function. Notice how it requires you to generate random integers in even changing intervals.</p>
<p>Meanwhile, most modern (pseudo) random integer functions generate 64-bit integers. Indeed, our processors are 64-bit bits running on 64-bit operating systems. Thus we must convert these 64-bit integers to whatever else we need, whether they are integers in an interval or a floating-point number.</p>
<p>You might be tempted to using a modulo operation (<tt>random() % 100</tt>). While it generates a random number between 0 and 100, it also uses a statistical bias. Further, if the value 100 is not know at compile-time (i.e., it is a changing value), it may compile down to a division instruction, which is relatively expensive. <a href="https://arxiv.org/abs/1805.10941">There is a better approach that requires no division most of the time</a> and is used by many programming language standard libraries:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #603000;">uint64_t</span> random_bounded<span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span> range<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  __uint128_t random64bit<span style="color: #808030;">,</span> multiresult<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint64_t</span> leftover<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint64_t</span> threshold<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  random64bit <span style="color: #808030;">=</span> rng<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">; // 64-bit random integer</span></span>
<span class="line_wrapper">  multiresult <span style="color: #808030;">=</span> random64bit <span style="color: #808030;">*</span> range<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  leftover <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span>multiresult<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>leftover <span style="color: #808030;">&lt;</span> range<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    threshold <span style="color: #808030;">=</span> <span style="color: #808030;">-</span>range <span style="color: #808030;">%</span> range<span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span>leftover <span style="color: #808030;">&lt;</span> threshold<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      random64bit <span style="color: #808030;">=</span> rng<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      multiresult <span style="color: #808030;">=</span> random64bit <span style="color: #808030;">*</span> range<span style="color: #800080;">;</span></span>
<span class="line_wrapper">      leftover <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span>multiresult<span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span><span style="color: #808030;">(</span>multiresult <span style="color: #808030;">&gt;</span><span style="color: #808030;">&gt;</span> <span style="color: #008c00;">64</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span> <span style="color: #696969;">// [0, range)</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>If you are using GCC for C++ programming under Linux (glibc++), you are already using this trick. If you are a macOS user with LLVM and libc++, you are probably  relying on a slower approach.</p>
<p>Is that the best we can do?</p>
<p>Think about the scenario where you must generate an integer in the interval [0,100) and then an integer in the interval [0,99). Could you generate both such integers form a single 64-bit random integer?</p>
<p>Indeed, you can, and you can avoid the division instructions once more. The code is somewhat similar although a bit more complicated. In theory, the algorithm needs to compute the product of the two ranges, but we only compute it if needed.</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #696969;">// product_bound can be any integer &gt;= range1*range2</span></span>
<span class="line_wrapper"><span style="color: #696969;">// it may be updated to become range1*range2</span></span>
<span class="line_wrapper"><span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">pair</span><span style="color: #800080;">&lt;</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">,</span> <span style="color: #603000;">uint64_t</span><span style="color: #800080;">&gt;</span> </span>
<span class="line_wrapper"> random_bounded_2<span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span> range1<span style="color: #808030;">,</span> <span style="color: #603000;">uint64_t</span> range2<span style="color: #808030;">,</span></span>
<span class="line_wrapper">                   <span style="color: #603000;">uint64_t</span> <span style="color: #808030;">&amp;</span>product_bound<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  __uint128_t random64bit<span style="color: #808030;">,</span> multiresult<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint64_t</span> leftover<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint64_t</span> threshold<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  random64bit <span style="color: #808030;">=</span> rng<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">; // 64-bit random integer</span></span>
<span class="line_wrapper">  multiresult <span style="color: #808030;">=</span> random64bit <span style="color: #808030;">*</span> range1<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  leftover <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span>multiresult<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint64_t</span> result1 <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span><span style="color: #808030;">(</span>multiresult <span style="color: #808030;">&gt;</span><span style="color: #808030;">&gt;</span> <span style="color: #008c00;">64</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span> <span style="color: #696969;">// [0, range1)</span></span>
<span class="line_wrapper">  multiresult <span style="color: #808030;">=</span> leftover <span style="color: #808030;">*</span> range2<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  leftover <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span>multiresult<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint64_t</span> result2 <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span><span style="color: #808030;">(</span>multiresult <span style="color: #808030;">&gt;</span><span style="color: #808030;">&gt;</span> <span style="color: #008c00;">64</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span> <span style="color: #696969;">// [0, range2)</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>leftover <span style="color: #808030;">&lt;</span> product_bound<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    product_bound <span style="color: #808030;">=</span> range2 <span style="color: #808030;">*</span> range1<span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>leftover <span style="color: #808030;">&lt;</span> product_bound<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      threshold <span style="color: #808030;">=</span> <span style="color: #808030;">-</span>product_bound <span style="color: #808030;">%</span> product_bound<span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span>leftover <span style="color: #808030;">&lt;</span> threshold<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">        random64bit <span style="color: #808030;">=</span> rng<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        multiresult <span style="color: #808030;">=</span> random64bit <span style="color: #808030;">*</span> range1<span style="color: #800080;">;</span></span>
<span class="line_wrapper">        leftover <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span>multiresult<span style="color: #800080;">;</span></span>
<span class="line_wrapper">        result1 <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span><span style="color: #808030;">(</span>multiresult <span style="color: #808030;">&gt;</span><span style="color: #808030;">&gt;</span> <span style="color: #008c00;">64</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span> <span style="color: #696969;">// [0, range1)</span></span>
<span class="line_wrapper">        multiresult <span style="color: #808030;">=</span> leftover <span style="color: #808030;">*</span> range2<span style="color: #800080;">;</span></span>
<span class="line_wrapper">        leftover <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span>multiresult<span style="color: #800080;">;</span></span>
<span class="line_wrapper">        result2 <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span><span style="color: #808030;">(</span>multiresult <span style="color: #808030;">&gt;</span><span style="color: #808030;">&gt;</span> <span style="color: #008c00;">64</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span> <span style="color: #696969;">// [0, range2)</span></span>
<span class="line_wrapper">      <span style="color: #800080;">}</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> <span style="color: #666616;">std</span><span style="color: #800080;">::</span>make_pair<span style="color: #808030;">(</span>result1<span style="color: #808030;">,</span> result2<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>It has one limitation: the product of the two ranges must fit in a 64-bit word. Still, it be used to shuffle arrays, as long as they don&#8217;t exceed too much 1 billion elements:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> shuffle_2<span style="color: #808030;">(</span>mytype <span style="color: #808030;">*</span>storage<span style="color: #808030;">,</span> <span style="color: #603000;">uint64_t</span> size<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint64_t</span> i <span style="color: #808030;">=</span> size<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&gt;</span> <span style="color: #008c00;">1</span> <span style="color: #808030;">&lt;</span><span style="color: #808030;">&lt;</span> <span style="color: #008c00;">30</span><span style="color: #800080;">;</span> i<span style="color: #808030;">-</span><span style="color: #808030;">-</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #603000;">uint64_t</span> index <span style="color: #808030;">=</span> random_bounded<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> g<span style="color: #808030;">)</span><span style="color: #800080;">;</span> </span>
<span class="line_wrapper">    <span style="color: #696969;">// index is in [0, i-1]</span></span>
<span class="line_wrapper">    <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">swap</span><span style="color: #808030;">(</span>storage<span style="color: #808030;">[</span>i <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">]</span><span style="color: #808030;">,</span> storage<span style="color: #808030;">[</span>index<span style="color: #808030;">]</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>

<span class="line_wrapper">  <span style="color: #696969;">// Batches of 2 for sizes up to 2^30 elements</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint64_t</span> product_bound <span style="color: #808030;">=</span> i <span style="color: #808030;">*</span> <span style="color: #808030;">(</span>i <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&gt;</span> <span style="color: #008c00;">1</span><span style="color: #800080;">;</span> i <span style="color: #808030;">-</span><span style="color: #808030;">=</span> <span style="color: #008c00;">2</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">auto</span> <span style="color: #808030;">[</span>index1<span style="color: #808030;">,</span> index2<span style="color: #808030;">]</span> <span style="color: #808030;">=</span> random_bounded_2<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> i <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">,</span> </span>
<span class="line_wrapper">         product_bound<span style="color: #808030;">,</span> g<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #696969;">// index1 is in [0, i-1]</span></span>
<span class="line_wrapper">    <span style="color: #696969;">// index2 is in [0, i-2]</span></span>
<span class="line_wrapper">    <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">swap</span><span style="color: #808030;">(</span>storage<span style="color: #808030;">[</span>i <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">]</span><span style="color: #808030;">,</span> storage<span style="color: #808030;">[</span>index1<span style="color: #808030;">]</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">swap</span><span style="color: #808030;">(</span>storage<span style="color: #808030;">[</span>i <span style="color: #808030;">-</span> <span style="color: #008c00;">2</span><span style="color: #808030;">]</span><span style="color: #808030;">,</span> storage<span style="color: #808030;">[</span>index2<span style="color: #808030;">]</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>Of course, you can extend this trick to 3, 4, 5, 6&#8230; elements, but it gets more complicated.</p>
<p>Is it fast? Let us test with a standard random number generator is C++ (<tt>std::mt19937_64</tt>). <a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/tree/master/2024/08/16">I wrote a C++ benchmark</a>.</p>
<p>Let us first consider an M2 macBook with Apple/LLVM 15:</p>
<table>
<tbody>
<tr>
<th>number of elements</th>
<th>standard shuffle (ns/element)</th>
<th>batched shuffle (ns/element)</th>
</tr>
<tr>
<td>10000</td>
<td>12.4</td>
<td>2.4</td>
</tr>
<tr>
<td>1000000</td>
<td>12.0</td>
<td>2.5</td>
</tr>
</tbody>
</table>
<p>So we are four to five times faster than the standard library. Not bad.</p>
<p>What about Linux with an Intel processor and GCC 12? Then our batched approach is about 30% faster than the standard library. Notice how the Linux/GCC base results are much better: that&#8217;s because it is already using a well optimized routine. Still: 30% is not a bad gain.</p>
<table>
<tbody>
<tr>
<th>number of elements</th>
<th>standard shuffle (ns/element)</th>
<th>batched shuffle (ns/element)</th>
</tr>
<tr>
<td>10000</td>
<td>2.2</td>
<td>1.7</td>
</tr>
<tr>
<td>1000000</td>
<td>3.5</td>
<td>2.7</td>
</tr>
</tbody>
</table>
<p>Of course, the batched generation of random numbers applies to other important operations. Shuffling is just the most obvious one.</p>
<p>This is joint work with Nevin Brackett-Rozinsky.</p>
<p><strong>References</strong>:</p>
<ul>
<li>Nevin Brackett-Rozinsky, Daniel Lemire, <a href="https://arxiv.org/abs/2408.06213">Batched Ranged Random Integer Generation</a>, Software: Practice and Experience (to appear)</li>
<li>Daniel Lemire, <a href="https://arxiv.org/abs/1805.10941" rel="nofollow">Fast Random Integer Generation in an Interval</a>, ACM Transactions on Modeling and Computer Simulation, Volume 29 Issue 1, February 2019</li>
</ul>
<p>&nbsp;</p>
<p><strong>Appendix: Code</strong></p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #004a43;">#</span><span style="color: #004a43;">ifndef</span><span style="color: #004a43;"> TEMPLATE_SHUFFLE_H</span></span>
<span class="line_wrapper"><span style="color: #004a43;">#</span><span style="color: #004a43;">define</span><span style="color: #004a43;"> TEMPLATE_SHUFFLE_H</span></span>

<span class="line_wrapper"><span style="color: #004a43;">#</span><span style="color: #004a43;">include </span><span style="color: #800000;">&lt;</span><span style="color: #40015a;">cstdint</span><span style="color: #800000;">&gt;</span></span>
<span class="line_wrapper"><span style="color: #3f5fbf;">/**</span></span>
<span class="line_wrapper"><span style="color: #3f5fbf;"> * Nevin Brackett-Rozinsky, Daniel Lemire, Batched Ranged Random Integer Generation, Software: Practice and Experience (to appear)</span></span>
<span class="line_wrapper"><span style="color: #3f5fbf;"> * Daniel Lemire, Fast Random Integer Generation in an Interval, ACM Transactions on Modeling and Computer Simulation, Volume 29 Issue 1, February 2019</span></span>
<span class="line_wrapper"><span style="color: #3f5fbf;"> */</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">namespace</span> batched_random <span style="color: #800080;">{</span></span>

<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">template</span> <span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">class</span> URBG<span style="color: #800080;">&gt;</span> <span style="color: #603000;">uint64_t</span> random_bounded<span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span> range<span style="color: #808030;">,</span> URBG <span style="color: #808030;">&amp;</span><span style="color: #808030;">&amp;</span>rng<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  __uint128_t random64bit<span style="color: #808030;">,</span> multiresult<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint64_t</span> leftover<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint64_t</span> threshold<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  random64bit <span style="color: #808030;">=</span> rng<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  multiresult <span style="color: #808030;">=</span> random64bit <span style="color: #808030;">*</span> range<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  leftover <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span>multiresult<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>leftover <span style="color: #808030;">&lt;</span> range<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    threshold <span style="color: #808030;">=</span> <span style="color: #808030;">-</span>range <span style="color: #808030;">%</span> range<span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span>leftover <span style="color: #808030;">&lt;</span> threshold<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      random64bit <span style="color: #808030;">=</span> rng<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      multiresult <span style="color: #808030;">=</span> random64bit <span style="color: #808030;">*</span> range<span style="color: #800080;">;</span></span>
<span class="line_wrapper">      leftover <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span>multiresult<span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span><span style="color: #808030;">(</span>multiresult <span style="color: #808030;">&gt;</span><span style="color: #808030;">&gt;</span> <span style="color: #008c00;">64</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span> <span style="color: #696969;">// [0, range)</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>


<span class="line_wrapper"><span style="color: #696969;">// product_bound can be any integer &gt;= range1*range2</span></span>
<span class="line_wrapper"><span style="color: #696969;">// it may be updated to become range1*range2</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">template</span> <span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">class</span> URBG<span style="color: #800080;">&gt;</span></span>
<span class="line_wrapper"><span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">pair</span><span style="color: #800080;">&lt;</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">,</span> <span style="color: #603000;">uint64_t</span><span style="color: #800080;">&gt;</span> random_bounded_2<span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span> range1<span style="color: #808030;">,</span> <span style="color: #603000;">uint64_t</span> range2<span style="color: #808030;">,</span></span>
<span class="line_wrapper">                                               <span style="color: #603000;">uint64_t</span> <span style="color: #808030;">&amp;</span>product_bound<span style="color: #808030;">,</span></span>
<span class="line_wrapper">                                               URBG <span style="color: #808030;">&amp;</span><span style="color: #808030;">&amp;</span>rng<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  __uint128_t random64bit<span style="color: #808030;">,</span> multiresult<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint64_t</span> leftover<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint64_t</span> threshold<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  random64bit <span style="color: #808030;">=</span> rng<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  multiresult <span style="color: #808030;">=</span> random64bit <span style="color: #808030;">*</span> range1<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  leftover <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span>multiresult<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint64_t</span> result1 <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span><span style="color: #808030;">(</span>multiresult <span style="color: #808030;">&gt;</span><span style="color: #808030;">&gt;</span> <span style="color: #008c00;">64</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span> <span style="color: #696969;">// [0, range1)</span></span>
<span class="line_wrapper">  multiresult <span style="color: #808030;">=</span> leftover <span style="color: #808030;">*</span> range2<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  leftover <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span>multiresult<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint64_t</span> result2 <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span><span style="color: #808030;">(</span>multiresult <span style="color: #808030;">&gt;</span><span style="color: #808030;">&gt;</span> <span style="color: #008c00;">64</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span> <span style="color: #696969;">// [0, range2)</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>leftover <span style="color: #808030;">&lt;</span> product_bound<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    product_bound <span style="color: #808030;">=</span> range2 <span style="color: #808030;">*</span> range1<span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>leftover <span style="color: #808030;">&lt;</span> product_bound<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      threshold <span style="color: #808030;">=</span> <span style="color: #808030;">-</span>product_bound <span style="color: #808030;">%</span> product_bound<span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span>leftover <span style="color: #808030;">&lt;</span> threshold<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">        random64bit <span style="color: #808030;">=</span> rng<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        multiresult <span style="color: #808030;">=</span> random64bit <span style="color: #808030;">*</span> range1<span style="color: #800080;">;</span></span>
<span class="line_wrapper">        leftover <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span>multiresult<span style="color: #800080;">;</span></span>
<span class="line_wrapper">        result1 <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span><span style="color: #808030;">(</span>multiresult <span style="color: #808030;">&gt;</span><span style="color: #808030;">&gt;</span> <span style="color: #008c00;">64</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span> <span style="color: #696969;">// [0, range1)</span></span>
<span class="line_wrapper">        multiresult <span style="color: #808030;">=</span> leftover <span style="color: #808030;">*</span> range2<span style="color: #800080;">;</span></span>
<span class="line_wrapper">        leftover <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span>multiresult<span style="color: #800080;">;</span></span>
<span class="line_wrapper">        result2 <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint64_t</span><span style="color: #808030;">)</span><span style="color: #808030;">(</span>multiresult <span style="color: #808030;">&gt;</span><span style="color: #808030;">&gt;</span> <span style="color: #008c00;">64</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span> <span style="color: #696969;">// [0, range2)</span></span>
<span class="line_wrapper">      <span style="color: #800080;">}</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> <span style="color: #666616;">std</span><span style="color: #800080;">::</span>make_pair<span style="color: #808030;">(</span>result1<span style="color: #808030;">,</span> result2<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>

<span class="line_wrapper"><span style="color: #696969;">// This is a template function that shuffles the elements in the range [first,</span></span>
<span class="line_wrapper"><span style="color: #696969;">// last).</span></span>
<span class="line_wrapper"><span style="color: #696969;">//</span></span>
<span class="line_wrapper"><span style="color: #696969;">// It is similar to std::shuffle, but it uses a different algorithm.</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">template</span> <span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">class</span> RandomIt<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">class</span> URBG<span style="color: #800080;">&gt;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">extern</span> <span style="color: #800000; font-weight: bold;">void</span> shuffle_2<span style="color: #808030;">(</span>RandomIt first<span style="color: #808030;">,</span> RandomIt last<span style="color: #808030;">,</span> URBG <span style="color: #808030;">&amp;</span><span style="color: #808030;">&amp;</span>g<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint64_t</span> i <span style="color: #808030;">=</span> <span style="color: #666616;">std</span><span style="color: #800080;">::</span>distance<span style="color: #808030;">(</span>first<span style="color: #808030;">,</span> last<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&gt;</span> <span style="color: #008c00;">1</span> <span style="color: #808030;">&lt;</span><span style="color: #808030;">&lt;</span> <span style="color: #008c00;">30</span><span style="color: #800080;">;</span> i<span style="color: #808030;">-</span><span style="color: #808030;">-</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #603000;">uint64_t</span> index <span style="color: #808030;">=</span> random_bounded<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> g<span style="color: #808030;">)</span><span style="color: #800080;">;</span> <span style="color: #696969;">// index is in [0, i-1]</span></span>
<span class="line_wrapper">    <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">iter_swap</span><span style="color: #808030;">(</span>first <span style="color: #808030;">+</span> i <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">,</span> first <span style="color: #808030;">+</span> index<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>

<span class="line_wrapper">  <span style="color: #696969;">// Batches of 2 for sizes up to 2^30 elements</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint64_t</span> product_bound <span style="color: #808030;">=</span> i <span style="color: #808030;">*</span> <span style="color: #808030;">(</span>i <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&gt;</span> <span style="color: #008c00;">1</span><span style="color: #800080;">;</span> i <span style="color: #808030;">-</span><span style="color: #808030;">=</span> <span style="color: #008c00;">2</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">auto</span> <span style="color: #808030;">[</span>index1<span style="color: #808030;">,</span> index2<span style="color: #808030;">]</span> <span style="color: #808030;">=</span> random_bounded_2<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> i <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">,</span> product_bound<span style="color: #808030;">,</span> g<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #696969;">// index1 is in [0, i-1]</span></span>
<span class="line_wrapper">    <span style="color: #696969;">// index2 is in [0, i-2]</span></span>
<span class="line_wrapper">    <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">iter_swap</span><span style="color: #808030;">(</span>first <span style="color: #808030;">+</span> i <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">,</span> first <span style="color: #808030;">+</span> index1<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">iter_swap</span><span style="color: #808030;">(</span>first <span style="color: #808030;">+</span> i <span style="color: #808030;">-</span> <span style="color: #008c00;">2</span><span style="color: #808030;">,</span> first <span style="color: #808030;">+</span> index2<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>

<span class="line_wrapper"><span style="color: #800080;">}</span> <span style="color: #696969;">// namespace batched_random</span></span>

<span class="line_wrapper"><span style="color: #004a43;">#</span><span style="color: #004a43;">endif</span> <span style="color: #696969;">// TEMPLATE_SHUFFLE_H</span></span></pre>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/08/17/faster-random-integer-generation-with-batching/feed/</wfw:commentRss>
			<slash:comments>15</slash:comments>
		
		
			</item>
		<item>
		<title>Reflection-based JSON in C++ at Gigabytes per Second</title>
		<link>https://lemire.me/blog/2024/08/13/reflection-based-json-in-c-at-gigabytes-per-second/</link>
					<comments>https://lemire.me/blog/2024/08/13/reflection-based-json-in-c-at-gigabytes-per-second/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Tue, 13 Aug 2024 16:12:46 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21555</guid>

					<description><![CDATA[JSON (JavaScript Object Notation) is a popular format for storing and transmitting data. It uses human-readable text to represent structured data in the form of attribute–value pairs and arrays. E.g., {"age":5, "name":"Daniel", toys:["wooden dog", "little car"]}. Ingesting and producing JSON documents can be a performance bottleneck. Thankfully, a few JSON parsers such as simdjson have &#8230; <a href="https://lemire.me/blog/2024/08/13/reflection-based-json-in-c-at-gigabytes-per-second/" class="more-link">Continue reading <span class="screen-reader-text">Reflection-based JSON in C++ at Gigabytes per Second</span></a>]]></description>
										<content:encoded><![CDATA[<p>JSON (JavaScript Object Notation) is a popular format for storing and transmitting data. It uses human-readable text to represent structured data in the form of attribute–value pairs and arrays. E.g., <tt>{"age":5, "name":"Daniel", toys:["wooden dog", "little car"]}</tt>. Ingesting and producing JSON documents can be a performance bottleneck. Thankfully, a few JSON parsers such as simdjson have shown that we can process JSON at high speeds, reaching gigabytes per second.</p>
<p>However, producing and ingesting JSON data can remain a chore in C++. The programmer often needs to address potential errors such as unexpected content.</p>
<p>Yet, often, the programmer only needs to map the content to and from a native C/C++ data structure. E.g., our JSON example might correspond to the following C++ structure:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">struct</span> kid <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">int</span> age<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">string</span> name<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">vector</span><span style="color: #800080;">&lt;</span><span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">string</span><span style="color: #800080;">&gt;</span> toys<span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span></pre>
<p>Hence, we would often like to write simple code such as</p>
<pre class="code_syntax"><span class="line_wrapper">kid k; store_json(k, out)</span></pre>
<p>or</p>
<pre class="code_syntax"><span class="line_wrapper">kid k; load_json(k, in)</span></pre>
<p>Ideally, we would like this code to be fast and safe. That is, we would like to write and read our data structures at gigabytes per second. Further, we want proper validation especially since the JSON data might come from the Internet.</p>
<p>A library such as simdjson already allows elegant deserialization, e.g., we can make the following example work:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">struct</span> kid <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">int</span> age<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">string</span> name<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">vector</span><span style="color: #800080;">&lt;</span><span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">string</span><span style="color: #800080;">&gt;</span> toys<span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>


<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> demo<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">auto</span> json_str <span style="color: #808030;">=</span> </span>
<span class="line_wrapper"><span style="color: #800000;">R"(</span><span style="color: #0000e6;">{"age": 12, "name": "John", "toys": ["car", "ball"]}</span><span style="color: #800000;">)"</span>_padded<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  simdjson<span style="color: #800080;">::</span>ondemand<span style="color: #800080;">::</span>parser parser<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">auto</span> doc <span style="color: #808030;">=</span> parser<span style="color: #808030;">.</span>iterate<span style="color: #808030;">(</span>json_str<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  kid k <span style="color: #808030;">=</span> doc<span style="color: #808030;">.</span>get<span style="color: #800080;">&lt;</span>kid<span style="color: #800080;">&gt;</span><span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>However, for the time being, it requires a <a href="https://github.com/simdjson/simdjson/blob/master/doc/basics.md#adding-support-for-custom-types">bit of effort</a> on the part of the programmer, as they need to write a custom function.</p>
<p>Similarly, going from the C++ structures to JSON can be made convenient, but typically only after the programmer has done a bit of work, writing custom code. E.g., in the popular JSON for Modern C++ (nlohmann/json) library, we need to provide glue functions:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">void to_json<span style="color: #808030;">(</span>json<span style="color: #808030;">&amp;</span>j<span style="color: #808030;">,</span> const person<span style="color: #808030;">&amp;</span>p<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  j <span style="color: #808030;">=</span> json<span style="color: #800080;">{</span><span style="color: #800080;">{</span><span style="color: #800000;">"</span><span style="color: #0000e6;">name</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> p<span style="color: #808030;">.</span>name<span style="color: #800080;">}</span><span style="color: #808030;">,</span> <span style="color: #800080;">{</span><span style="color: #800000;">"</span><span style="color: #0000e6;">address</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> p<span style="color: #808030;">.</span>address<span style="color: #800080;">}</span><span style="color: #808030;">,</span> 
<span style="color: #800080;">    {</span><span style="color: #800000;">"</span><span style="color: #0000e6;">age</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> p<span style="color: #808030;">.</span>age<span style="color: #800080;">}</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>


<span class="line_wrapper">void from_json<span style="color: #808030;">(</span>const json<span style="color: #808030;">&amp;</span>j<span style="color: #808030;">,</span> person<span style="color: #808030;">&amp;</span>p<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  j<span style="color: #808030;">.</span>at<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">name</span><span style="color: #800000;">"</span><span style="color: #808030;">)</span><span style="color: #808030;">.</span>get_to<span style="color: #808030;">(</span>p<span style="color: #808030;">.</span>name<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  j<span style="color: #808030;">.</span>at<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">address</span><span style="color: #800000;">"</span><span style="color: #808030;">)</span><span style="color: #808030;">.</span>get_to<span style="color: #808030;">(</span>p<span style="color: #808030;">.</span>address<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  j<span style="color: #808030;">.</span>at<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">age</span><span style="color: #800000;">"</span><span style="color: #808030;">)</span><span style="color: #808030;">.</span>get_to<span style="color: #808030;">(</span>p<span style="color: #808030;">.</span>age<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>We know that this extra effort (writing data-structure aware code) is unnecessary because other programming languages (Java, C#, Zig, Rust, Python, etc.) allow us to &#8216;magically&#8217; serialize and deserialize with almost no specialized code.</p>
<p>One key missing feature in <a href="https://stackoverflow.com/questions/8948087/is-there-any-major-programming-language-that-doesnt-support-any-form-of-reflect">C++ is sufficiently powerful <em>reflection</em></a>. Reflection in programming languages refers to a mechanism that allows code to introspect its own structure. That is, if you cannot conveniently tell C++ that if a class has a <tt>std::string name</tt> attribute, then you should automatically search for a string value matching the key <tt>name</tt> in the JSON.</p>
<p>Thankfully, C++ is soon getting reflection in C++26. And it is getting powerful reflection: reflective metaprogramming. That is, future versions of C++ will allow us to solve the serialization and deserialization problem we described at compile time: a software library can automate the production and consumption of JSON to and from a native data structure. Such a feature will simplify the life of the C++ programmer. Furthermore, because it can be done automatically as part of well tested library at compile time, it can generate fast and safe code.</p>
<div>
<p><a href="https://herbsutter.com/2024/07/02/trip-report-summer-iso-c-standards-meeting-st-louis-mo-usa/">Herb Sutter wrote about this exiciting development</a>:</p>
<blockquote>
<div>This is huge, because reflection (including generation) will be by far the most impactful feature C++ has ever added since C++98, and it will dominate the next decade and more of C++ usage.</div>
</blockquote>
<p>Though many programming languages have reflection, the reflective metaprogramming provided by the upcoming C++ standard is unique to our knowledge. Some programming languages have long had powerful reflection capabilities, but they are mostly a runtime feature: they do not allow the equivalent of generating code. Other programming languages allow compile-time logic generation but they do not always allow optimal performance. We expect that the C++ approach might be especially appropriate for high performance.</p>
<div>
<p>Though current C++ compilers do not yet support reflection, we have access to prototypical compilers. In particular, engineers from Bloomberg maintain a <a href="https://github.com/bloomberg/clang-p2996/tree/p2996">fork of LLVM</a>, the popular compiler framework. Though such an implementation should not be used in production and is subject to bugs and other limitations, it should be sufficient to test the performance: how fast can serialization-based JSON processing be in C++? Importantly, we are not immediately concerned with compilation speed: the <a href="https://www.reddit.com/r/cpp/comments/1c7ugyg/metaprogramming_benchmark_p2996_vs_p1858_vs/?rdt=55615">Bloomberg fork is deliberately suboptimal in this respect</a>.</p>
<p>To test out this new C++ feature, <a href="https://github.com/simdjson/experimental_json_builder">we wrote a prototype</a> that can serialize and deserialize data structures to and from JSON strings automatically. Given an an instance of kid, we can convert it to a JSON string without any effort, the compile-time reflection does the work:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">kid k<span style="color: #800080;">{</span><span style="color: #008c00;">12</span><span style="color: #808030;">,</span> <span style="color: #800000;">"</span><span style="color: #0000e6;">John</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> <span style="color: #800080;">{</span><span style="color: #800000;">"</span><span style="color: #0000e6;">car</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> <span style="color: #800000;">"</span><span style="color: #0000e6;">ball</span><span style="color: #800000;">"</span><span style="color: #800080;">}</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #666616;">std</span><span style="color: #800080;">::</span>print<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">My JSON is {}</span><span style="color: #0f69ff;">\n</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> simdjson<span style="color: #800080;">::</span>json_builder<span style="color: #800080;">::</span>to_json_string<span style="color: #808030;">(</span>k<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span></pre>
<p><strong>Benchmark Results with Speed-up</strong></p>
<p>Automatically converting your C++ data types into JSON strings is convenient. But is it fast? To find out, we have used 2 instances for benchmarking, an &#8220;Artificial instance&#8221; that was obtained using the <a href="https://json-generator.com/">JSON Generator</a> Website and the other one is the <a href="https://github.com/simdjson/simdjson/blob/master/jsonexamples/twitter.json">twitter.json</a> file that is used by many other serialization libraries for benchmarking.</p>
<p>We test on two systems (Apple and Intel/Linux) with the experimental LLVM Bloomberg compiler.</p>
<p>M3 MAX Macbook Pro:</p>
<table>
<tbody>
<tr>
<th>Test Instance</th>
<th>Library</th>
<th>Speed (MB/s)</th>
<th>speedup</th>
</tr>
<tr>
<td>Twitter Serialization</td>
<td>nlohmann/json</td>
<td>100</td>
<td></td>
</tr>
<tr>
<td></td>
<td>our C++26 serializer</td>
<td>1900</td>
<td>19×</td>
</tr>
<tr>
<td>Artificial Serialization</td>
<td>nlohmann/json</td>
<td>50</td>
<td></td>
</tr>
<tr>
<td></td>
<td>our C++26 serializer</td>
<td>1800</td>
<td>36×</td>
</tr>
</tbody>
</table>
<p>Intel Ice Lake:</p>
<table>
<tbody>
<tr>
<th>Test Instance</th>
<th>Library</th>
<th>Speed (MB/s)</th>
<th>speedup</th>
</tr>
<tr>
<td>Twitter Serialization</td>
<td>nlohmann/json</td>
<td>110</td>
<td></td>
</tr>
<tr>
<td></td>
<td>our C++26 serializer</td>
<td>1800</td>
<td>16×</td>
</tr>
<tr>
<td>Artificial Serialization</td>
<td>nlohmann/json</td>
<td>50</td>
<td></td>
</tr>
<tr>
<td></td>
<td>our C++26 serializer</td>
<td>1400</td>
<td>28×</td>
</tr>
</tbody>
</table>
<p>Our benchmark showed that we are roughly 20× faster than nlohmann/json. This was achieved by combining the new reflection capabilities with <a href="https://lemire.me/blog/2024/05/31/quickly-checking-whether-a-string-needs-escaping/">some bit twiddling tricks</a> and a string_builder class to help minimize the overhead of memory allocations. Importantly, our implementation requires little code. The C++26 reflection capabilities do all the hard work. In our benchmarks, we further compare against hand-written functions as well as an existing C++ reflection library (reflect-cpp). Hand-written code can be slightly faster than our reflection-based code, but the difference is small (10% to 20%). We can be twice as fast as reflect-cpp although it is also a very fast library.</p>
<p><strong>Conclusion</strong></p>
<p>Our results suggest that C++26 with reflection is a powerful tool that should allow C++ programmers to easily serialize and deserialize data structures at gigabytes per second. In the near future, the simdjson library will adopt reflection for both serialization and deserialization. Indeed, we expect that this will help users get high performance in some important cases with little effort.</p>
<p><strong>Credit</strong></p>
<p>Joint work with Francisco Geiman Thiesen.</p>
<p>We are grateful to @the-moisrex for teaching us about tag dispatching and initiating its adoption in the simdson library.</p>
<p>The simdjson library is a community-based effort.</p>
<p><strong>Appendix: complete code example</strong></p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">struct</span> kid <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">int</span> age<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">string</span> name<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">vector</span><span style="color: #800080;">&lt;</span><span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">string</span><span style="color: #800080;">&gt;</span> toys<span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>


<span class="line_wrapper"><span style="color: #3f5fbf;">/**</span></span>
<span class="line_wrapper"><span style="color: #3f5fbf;"> * The following function would print:</span></span>
<span class="line_wrapper"><span style="color: #3f5fbf;"> *</span></span>
<span class="line_wrapper"><span style="color: #3f5fbf;"> * I am 12 years old</span></span>
<span class="line_wrapper"><span style="color: #3f5fbf;"> * I have a car</span></span>
<span class="line_wrapper"><span style="color: #3f5fbf;"> * I have a ball</span></span>
<span class="line_wrapper"><span style="color: #3f5fbf;"> * My name is John</span></span>
<span class="line_wrapper"><span style="color: #3f5fbf;"> * My JSON is {"age":12,"name":"John","toys":["car","ball"]}</span></span>
<span class="line_wrapper"><span style="color: #3f5fbf;"> *</span></span>
<span class="line_wrapper"><span style="color: #3f5fbf;"> */</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> demo<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">auto</span> json_str <span style="color: #808030;">=</span> <span style="color: #800000;">R"(</span><span style="color: #0000e6;">{"age": 12, "name": "John", "toys": ["car", "ball"]}</span><span style="color: #800000;">)"</span>_padded<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  simdjson<span style="color: #800080;">::</span>ondemand<span style="color: #800080;">::</span>parser parser<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">auto</span> doc <span style="color: #808030;">=</span> parser<span style="color: #808030;">.</span>iterate<span style="color: #808030;">(</span>json_str<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  kid k <span style="color: #808030;">=</span> doc<span style="color: #808030;">.</span>get<span style="color: #800080;">&lt;</span>kid<span style="color: #800080;">&gt;</span><span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #666616;">std</span><span style="color: #800080;">::</span>print<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">I am {} years old</span><span style="color: #0f69ff;">\n</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> k<span style="color: #808030;">.</span>age<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span>constauto <span style="color: #808030;">&amp;</span>toy <span style="color: #800080;">:</span> k<span style="color: #808030;">.</span>toys<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #666616;">std</span><span style="color: #800080;">::</span>print<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">I have a {}</span><span style="color: #0f69ff;">\n</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> toy<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #666616;">std</span><span style="color: #800080;">::</span>print<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">My name is {}</span><span style="color: #0f69ff;">\n</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span> k<span style="color: #808030;">.</span>name<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #666616;">std</span><span style="color: #800080;">::</span>print<span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">My JSON is {}</span><span style="color: #0f69ff;">\n</span><span style="color: #800000;">"</span><span style="color: #808030;">,</span>    simdjson<span style="color: #800080;">::</span>json_builder<span style="color: #800080;">::</span>to_json_string<span style="color: #808030;">(</span>k<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>
</pre>
<p><strong>References</strong>:</p>
<ol>
<li>Langdale, Geoff, and Daniel Lemire. <a href="https://arxiv.org/abs/1902.08318">Parsing gigabytes of JSON per second</a>, The VLDB Journal 28.6 (2019): 941-960.</li>
<li>Keiser, John, and Daniel Lemire. <a href="https://arxiv.org/abs/2312.17149">On‐demand JSON: A better way to parse documents?</a>, Software: Practice and Experience 54.6 (2024): 1074-1086.</li>
<li>Wyatt Childers, Peter Dimov, Dan Katz, Barry Revzin, Andrew Sutton, Faisal Vali, Daveed Vandevoorde, <a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2996r5.html">Reflection for C++26</a>, WG21 P2996R5, 2024-08-14</li>
</ol>
</div>
</div>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/08/13/reflection-based-json-in-c-at-gigabytes-per-second/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>Converting ASCII strings to lower case at crazy speeds with AVX-512</title>
		<link>https://lemire.me/blog/2024/08/03/converting-ascii-strings-to-lower-case-at-crazy-speeds-with-avx-512/</link>
					<comments>https://lemire.me/blog/2024/08/03/converting-ascii-strings-to-lower-case-at-crazy-speeds-with-avx-512/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Sat, 03 Aug 2024 23:26:22 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21539</guid>

					<description><![CDATA[AMD Zen 4 and Zen 5, as well as server-side recent Intel processors, support an advanced set of instructions called AVX-512. They are powerful SIMD (Single Instruction, Multiple Data) instructions. Importantly, they allow &#8216;masked&#8217; operations. That is, you can compute a mask and only do an operation on bytes indicated by the mask. Thus you &#8230; <a href="https://lemire.me/blog/2024/08/03/converting-ascii-strings-to-lower-case-at-crazy-speeds-with-avx-512/" class="more-link">Continue reading <span class="screen-reader-text">Converting ASCII strings to lower case at crazy speeds with AVX-512</span></a>]]></description>
										<content:encoded><![CDATA[<p>AMD Zen 4 and Zen 5, as well as server-side recent Intel processors, support an advanced set of instructions called AVX-512. They are powerful SIMD (Single Instruction, Multiple Data) instructions. Importantly, they allow &#8216;masked&#8217; operations. That is, you can compute a mask and only do an operation on bytes indicated by the mask. Thus you can easily store only the first k bytes of a block of 64 bytes of memory as one instruction.</p>
<p><a href="https://dotat.at/@/2024-07-28-tolower-avx512.html">Tony Finch recently described how you can take an ASCII string of arbitrary length and convert them to lower case quickly using AVX-512</a>. Finch&#8217;s results is that for both tiny and large strings, the AVX-512 approach is faster. In his work, Finch assumes that the length of the string is known up front. However, C strings are stored as a pointer to the beginning of the string with a null character (\0) indicating its end. Thus the string <tt>love</tt> is stored in memory as <tt>love\0</tt>.</p>
<p>Can we extend his work to C strings?</p>
<p>With AVX-512 is that you can load 64 bytes at a time, instead of loading individual bytes. In general, it is unsafe to read beyond the scope of allocated memory. It may crash your application if you are loading into a memory page that does not belong to your process. How do you know when to stop reading blocks of 64 bytes?</p>
<p>The trick is that it is always safe to do aligned loads. That is, if you load at an address that is divisible by 64 bytes, you will never cross a memory page because memory pages are always divisible by 64 on Intel and AMD systems.</p>
<p>To convert ASCII letters to lower case, we use the fact that the letters from A to Z in ASCII are in a continuous range as code point values (values stored in memory), and so are the letters from a to z. Thus if you can identify the upper case letters, it suffices to add a constant to them to make them lower case.</p>
<p>Finch wrote a function which converts 64 ASCII bytes to lower case when a block of 64 bytes (c) has been loaded:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">static</span> <span style="color: #800000; font-weight: bold;">inline</span> __m512i tolower64<span style="color: #808030;">(</span>__m512i c<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  __m512i A <span style="color: #808030;">=</span> _mm512_set1_epi8<span style="color: #808030;">(</span><span style="color: #0000e6;">'A'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  __m512i Z <span style="color: #808030;">=</span> _mm512_set1_epi8<span style="color: #808030;">(</span><span style="color: #0000e6;">'Z'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  __m512i to_lower <span style="color: #808030;">=</span> _mm512_set1_epi8<span style="color: #808030;">(</span><span style="color: #0000e6;">'a'</span> <span style="color: #808030;">-</span> <span style="color: #0000e6;">'A'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  __mmask64 ge_A <span style="color: #808030;">=</span> _mm512_cmpge_epi8_mask<span style="color: #808030;">(</span>c<span style="color: #808030;">,</span> A<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  __mmask64 le_Z <span style="color: #808030;">=</span> _mm512_cmple_epi8_mask<span style="color: #808030;">(</span>c<span style="color: #808030;">,</span> Z<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  __mmask64 is_upper <span style="color: #808030;">=</span> _kand_mask64<span style="color: #808030;">(</span>ge_A<span style="color: #808030;">,</span> le_Z<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> <span style="color: #808030;">(</span>_mm512_mask_add_epi8<span style="color: #808030;">(</span>c<span style="color: #808030;">,</span> is_upper<span style="color: #808030;">,</span> c<span style="color: #808030;">,</span> to_lower<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>This function efficiently converts a 64-byte block of characters (represented as a __m512i vector) to lowercase using SIMD instructions. The variables A and Z are vectors filled with the characters &#8216;A&#8217; and &#8216;Z&#8217; respectively. The variable to_lower contains the difference between &#8216;a&#8217; and &#8216;A&#8217; which is 32. The variable ge_A is a mask where bits are set to 1 if the corresponding element is greater than or equal to &#8216;A&#8217;. The variable le_Z is a mask where bits are set to 1 if the corresponding element is less than or equal to &#8216;Z&#8217;. The variable is_upper combines the two masks to identify characters that are both greater than or equal to &#8216;A&#8217; and less than or equal to &#8216;Z&#8217;, indicating uppercase letters. In the final step, we add the value to_lower only for the values identified by the mask <span class="line_wrapper">is_upper. </span>This effectively converts uppercase letters to lowercase.</p>
<p>LLVM might compile it to three instructions: vpaddb, vpcmpltub  and vpaddb. Depending on the compiler, you might get better results with this equivalent alternative:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">__m512i tolower64<span style="color: #808030;">(</span>__m512i c<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  __m512i ca <span style="color: #808030;">=</span> _mm512_sub_epi8<span style="color: #808030;">(</span>c<span style="color: #808030;">,</span> _mm512_set1_epi8<span style="color: #808030;">(</span><span style="color: #0000e6;">'A'</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  __mmask64 is_upper <span style="color: #808030;">=</span> _mm512_cmple_epu8_mask<span style="color: #808030;">(</span>ca<span style="color: #808030;">,</span> _mm512_set1_epi8<span style="color: #808030;">(</span><span style="color: #0000e6;">'Z'</span> <span style="color: #808030;">-</span> <span style="color: #0000e6;">'A'</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  __m512i to_lower <span style="color: #808030;">=</span> _mm512_set1_epi8<span style="color: #808030;">(</span><span style="color: #0000e6;">'a'</span> <span style="color: #808030;">-</span> <span style="color: #0000e6;">'A'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> <span style="color: #808030;">(</span>_mm512_mask_add_epi8<span style="color: #808030;">(</span>c<span style="color: #808030;">,</span> is_upper<span style="color: #808030;">,</span> c<span style="color: #808030;">,</span> to_lower<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<div class="longform-unstyled" data-block="true" data-editor="3flcp" data-offset-key="690c8-0-0">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr" data-offset-key="690c8-0-0"><span data-offset-key="690c8-0-0">You may even use a generalized version based on table lookups:</span></div>
</div>
<pre class="code_syntax" style="color: #000000; background: #ffffff; overflow-x: scroll;"><span class="line_wrapper">__m512i tolower64<span style="color: #808030;">(</span>__m512i c<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  __mmask64 le_7t <span style="color: #808030;">=</span> _mm512_cmple_epu8_mask<span style="color: #808030;">(</span>c<span style="color: #808030;">,</span> _mm512_set1_epi8 <span style="color: #808030;">(</span><span style="color: #008000;">0x7f</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">   __m512i byteconst_00_3f <span style="color: #808030;">=</span> _mm512_set_epi64 <span style="color: #808030;">(</span><span style="color: #008000;">0x3f3e3d3c3b3a3938</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x3736353433323130</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x2f2e2d2c2b2a2928</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x2726252423222120</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x1f1e1d1c1b1a1918</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x1716151413121110</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x0f0e0d0c0b0a0908</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x0706050403020100</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">   __m512i byteconst_40_7f <span style="color: #808030;">=</span> _mm512_set_epi64 <span style="color: #808030;">(</span><span style="color: #008000;">0x7f7e7d7c7b7a7978</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x7776757473727170</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x6f6e6d6c6b6a6968</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x6766656463626160</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x5f55d5c5b7a7978</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x7776757473727170</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x6f6e6d6c6b6a6968</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x6766656463626140</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> _mm512_mask2_permutex2var_epi8 <span style="color: #808030;">(</span>byteconst_00_3f<span style="color: #808030;">,</span> c<span style="color: #808030;">,</span> le_7t<span style="color: #808030;">,</span> byteconst_40_7f<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<section class="" contenteditable="false" data-block="true" data-editor="3flcp" data-offset-key="47rko-0-0">
<div class="css-175oi2r r-1nxhmzv r-13qz1uu">
<div class="css-175oi2r" data-testid="markdown-code-block">
<div class="css-175oi2r r-1awozwy r-x572qd r-ne48ov r-1nna3df r-6413gk r-43g30s r-l4nmg1 r-1u658rm r-1mbrv82 r-vmopo1 r-13qz1uu"></div>
</div>
</div>
</section>
<p>Of course, we still need to use this function to process an actual string, not a block of 64 bytes. Let us first consider a naive function that does the same task, character by character:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #603000;">size_t</span> lower<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>srcorig<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>p <span style="color: #808030;">=</span> srcorig<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span> <span style="color: #808030;">*</span>p<span style="color: #800080;">;</span> <span style="color: #808030;">+</span><span style="color: #808030;">+</span>p<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #808030;">*</span>p <span style="color: #808030;">=</span> <span style="color: #808030;">*</span>p <span style="color: #808030;">&gt;</span> <span style="color: #008000;">0x40</span> <span style="color: #808030;">&amp;</span><span style="color: #808030;">&amp;</span> <span style="color: #808030;">*</span>p <span style="color: #808030;">&lt;</span> <span style="color: #008000;">0x5b</span> <span style="color: #800080;">?</span> <span style="color: #808030;">*</span>p <span style="color: #808030;">|</span> <span style="color: #008000;">0x20</span> <span style="color: #800080;">:</span> <span style="color: #808030;">*</span>p<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> p <span style="color: #808030;">-</span> srcorig<span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}

</span></span></pre>
<p>This function uses the fact that instead of an addition, we can just do a bitwise OR to change the case of an ASCII letter. In this particular case, we do not null terminated the result but we return the length of the string.</p>
<p>Let us now consider a possible AVX-512 implementation.</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #603000;">size_t</span> lower64<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>srcorig<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>dstorig<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uintptr_t</span> address <span style="color: #808030;">=</span> <span style="color: #800000; font-weight: bold;">reinterpret_cast</span><span style="color: #800080;">&lt;</span><span style="color: #603000;">uintptr_t</span><span style="color: #800080;">&gt;</span><span style="color: #808030;">(</span>srcorig<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uintptr_t</span> aligned_address <span style="color: #808030;">=</span> address <span style="color: #808030;">/</span> <span style="color: #008c00;">64</span> <span style="color: #808030;">*</span> <span style="color: #008c00;">64</span><span style="color: #800080;">;</span>     <span style="color: #696969;">// round down</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uintptr_t</span> notincluded <span style="color: #808030;">=</span> address <span style="color: #808030;">-</span> aligned_address<span style="color: #800080;">;</span> <span style="color: #696969;">// [0,64)</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>src<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span>notincluded<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    src <span style="color: #808030;">=</span> <span style="color: #800000; font-weight: bold;">reinterpret_cast</span><span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span><span style="color: #800080;">&gt;</span><span style="color: #808030;">(</span>aligned_address<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    __mmask64 init_mask <span style="color: #808030;">=</span> _cvtu64_mask64<span style="color: #808030;">(</span><span style="color: #808030;">(</span><span style="color: #808030;">~</span>UINT64_C<span style="color: #808030;">(</span><span style="color: #008c00;">0</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span> <span style="color: #808030;">&lt;</span><span style="color: #808030;">&lt;</span> notincluded<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    __m512i src_v <span style="color: #808030;">=</span> _mm512_maskz_loadu_epi8<span style="color: #808030;">(</span>init_mask<span style="color: #808030;">,</span> src<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    __mmask64 is_zero <span style="color: #808030;">=</span></span>
<span class="line_wrapper">        _mm512_mask_cmpeq_epu8_mask<span style="color: #808030;">(</span>init_mask<span style="color: #808030;">,</span> src_v<span style="color: #808030;">,</span> _mm512_setzero_si512<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    __m512i dst_v <span style="color: #808030;">=</span> tolower64<span style="color: #808030;">(</span>src_v<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>is_zero<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      __mmask64 zero_mask <span style="color: #808030;">=</span> <span style="color: #808030;">(</span>is_zero <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">)</span> <span style="color: #808030;">^</span> is_zero<span style="color: #800080;">;</span></span>
<span class="line_wrapper">      _mm512_mask_storeu_epi8<span style="color: #808030;">(</span>dstorig <span style="color: #808030;">-</span> notincluded<span style="color: #808030;">,</span> zero_mask &amp; unit_mask<span style="color: #808030;">,</span> dst_v<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">return</span> __tzcnt_u64<span style="color: #808030;">(</span>is_zero<span style="color: #808030;">)</span> <span style="color: #808030;">+</span> <span style="color: #808030;">(</span>src <span style="color: #808030;">-</span> srcorig<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">    _mm512_mask_storeu_epi8<span style="color: #808030;">(</span>dstorig <span style="color: #808030;">-</span> notincluded<span style="color: #808030;">,</span> init_mask<span style="color: #808030;">,</span> dst_v<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    src <span style="color: #808030;">+</span><span style="color: #808030;">=</span> <span style="color: #008c00;">64</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    dstorig <span style="color: #808030;">+</span><span style="color: #808030;">=</span> <span style="color: #008c00;">64</span> <span style="color: #808030;">-</span> notincluded<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span> <span style="color: #800000; font-weight: bold;">else</span> <span style="color: #800080;">{</span> <span style="color: #696969;">// fast path</span></span>
<span class="line_wrapper">    src <span style="color: #808030;">=</span> <span style="color: #800000; font-weight: bold;">reinterpret_cast</span><span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span><span style="color: #800080;">&gt;</span><span style="color: #808030;">(</span>srcorig<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    __m512i src_v <span style="color: #808030;">=</span> _mm512_loadu_epi8<span style="color: #808030;">(</span>src<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    __mmask64 is_zero <span style="color: #808030;">=</span></span>
<span class="line_wrapper">        _mm512_cmpeq_epu8_mask<span style="color: #808030;">(</span>src_v<span style="color: #808030;">,</span> _mm512_setzero_si512<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    __m512i dst_v <span style="color: #808030;">=</span> tolower64<span style="color: #808030;">(</span>src_v<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>is_zero<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      __mmask64 zero_mask <span style="color: #808030;">=</span> <span style="color: #808030;">(</span>is_zero <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">)</span> <span style="color: #808030;">^</span> is_zero<span style="color: #800080;">;</span></span>
<span class="line_wrapper">      _mm512_mask_storeu_epi8<span style="color: #808030;">(</span>dstorig<span style="color: #808030;">,</span> zero_mask<span style="color: #808030;">,</span> dst_v<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">return</span> __tzcnt_u64<span style="color: #808030;">(</span>is_zero<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">    _mm512_storeu_epi8<span style="color: #808030;">(</span>dstorig<span style="color: #808030;">,</span> dst_v<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    src <span style="color: #808030;">+</span><span style="color: #808030;">=</span> <span style="color: #008c00;">64</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    dstorig <span style="color: #808030;">+</span><span style="color: #808030;">=</span> <span style="color: #008c00;">64</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>

<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">true</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    __m512i src_v <span style="color: #808030;">=</span> _mm512_loadu_epi8<span style="color: #808030;">(</span>src<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    __m512i dst_v <span style="color: #808030;">=</span> tolower64<span style="color: #808030;">(</span>src_v<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    __mmask64 is_zero <span style="color: #808030;">=</span> _mm512_cmpeq_epu8_mask<span style="color: #808030;">(</span>src_v<span style="color: #808030;">,</span> _mm512_setzero_si512<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>is_zero<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      __mmask64 zero_mask <span style="color: #808030;">=</span> <span style="color: #808030;">(</span>is_zero <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">)</span> <span style="color: #808030;">^</span> is_zero<span style="color: #800080;">;</span></span>
<span class="line_wrapper">      _mm512_mask_storeu_epi8<span style="color: #808030;">(</span>dstorig<span style="color: #808030;">,</span> zero_mask<span style="color: #808030;">,</span> dst_v<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">return</span> __tzcnt_u64<span style="color: #808030;">(</span>is_zero<span style="color: #808030;">)</span> <span style="color: #808030;">+</span> <span style="color: #808030;">(</span>src <span style="color: #808030;">-</span> srcorig<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">    _mm512_storeu_epi8<span style="color: #808030;">(</span>dstorig<span style="color: #808030;">,</span> dst_v<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    src <span style="color: #808030;">+</span><span style="color: #808030;">=</span> <span style="color: #008c00;">64</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    dstorig <span style="color: #808030;">+</span><span style="color: #808030;">=</span> <span style="color: #008c00;">64</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>The code converts a string of characters to lowercase using AVX-512 instructions. It works in 64-byte chunks for efficiency. We have two pointers are parameters, srcorig is a pointer to the original source string, dstorig is a pointer to the destination buffer for the lowercase string. Initially we calculates the alignment offset of srcorig to a 64-byte boundary. We initialize pointers and masks based on the alignment offset. We have a fast path for the case where the string is already aligned on a 64-byte boundary. Initially, we load a 64-byte chunk into a __m512i vector, possibly reading prior to the beginning of the string. We converts the chunk to lowercase using tolower64.  We also check if an element is null, if that is the case, we will store and return a string of length smaller than 64 bytes. In the main loop, we process process 64-byte chunks in a loop until a null character is encountered. That is, we load a 64-byte chunk into an __m512i vector, we convert the chunk to lowercase using tolower64. We check if the loaded chunk contains a null character and ends the process if that is the case, calculating and returning the number of processed characters. If not, we store the converted chunk to the destination buffer.</p>
<p>The gotcha with this approach is that you will read before the beginning of the string if it is not already aligned on a 64-byte boundary and some tools might warn you. However, the code remains safe. You just have to tell your tool that the warnings should be omitted.</p>
<p>How fast is the AVX-512 code? I am using an Intel Ice Lake processor and LLVM 16. In my benchmark, <a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/tree/master/2024/08/03">I use fixed strings of various size</a>. My benchmark repeatedly processes the same string which omits the branch mispredictions that would occur in practice, so the real speed might be lower. I report the speed in GB/s.</p>
<table>
<tbody>
<tr>
<th>N</th>
<th>naive</th>
<th>AVX-512</th>
</tr>
<tr>
<td>4</td>
<td>0.9</td>
<td>1.6</td>
</tr>
<tr>
<td>18</td>
<td>0.9</td>
<td>4</td>
</tr>
<tr>
<td>145</td>
<td>1.3</td>
<td>20</td>
</tr>
<tr>
<td>970</td>
<td>1.3</td>
<td>34</td>
</tr>
</tbody>
</table>
<p>Thus, as you can see, the AVX-512 can be 20 times faster than the conventional approach on small strings while remaining competitive on tiny strings.</p>
<p>To my knowledge, only the AVX-512 instruction set allows this magical performance. It is significant advantage for recent AMD and Intel processors. Sadly, Intel no longer include AVX-512 in its non-server processors.</p>
<p><strong>Credit</strong>: I chatted with Robert Clausecker about these issues about a year ago.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/08/03/converting-ascii-strings-to-lower-case-at-crazy-speeds-with-avx-512/feed/</wfw:commentRss>
			<slash:comments>14</slash:comments>
		
		
			</item>
		<item>
		<title>Evolution of iPhone storage capacity</title>
		<link>https://lemire.me/blog/2024/07/28/evolution-of-iphone-storage-capacity/</link>
					<comments>https://lemire.me/blog/2024/07/28/evolution-of-iphone-storage-capacity/#respond</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Sun, 28 Jul 2024 15:39:06 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21530</guid>

					<description><![CDATA[People who should know better often underestimate how fast our storage capacity has grown. We have been able to get 1 TB of storage on iPhones for the last three generations. 2010 iPhone 4 32 GB 2012 iPhone 5 64 GB 2014 iPhone 6 128 GB 2016 iPhone 7 256 GB 2018 iPhone XS 512 &#8230; <a href="https://lemire.me/blog/2024/07/28/evolution-of-iphone-storage-capacity/" class="more-link">Continue reading <span class="screen-reader-text">Evolution of iPhone storage capacity</span></a>]]></description>
										<content:encoded><![CDATA[<p>People who should know better often underestimate how fast our storage capacity has grown. We have been able to get 1 TB of storage on iPhones for the last three generations.</p>
<table>
<tbody>
<tr>
<td>2010</td>
<td>iPhone 4</td>
<td>32 GB</td>
</tr>
<tr>
<td>2012</td>
<td>iPhone 5</td>
<td>64 GB</td>
</tr>
<tr>
<td>2014</td>
<td>iPhone 6</td>
<td>128 GB</td>
</tr>
<tr>
<td>2016</td>
<td>iPhone 7</td>
<td>256 GB</td>
</tr>
<tr>
<td>2018</td>
<td>iPhone XS</td>
<td>512 GB</td>
</tr>
<tr>
<td>2019</td>
<td>iPhone 11 Pro</td>
<td>512 GB</td>
</tr>
<tr>
<td>2020</td>
<td>iPhone 12 Pro</td>
<td>512 GB</td>
</tr>
<tr>
<td>2021</td>
<td>iPhone 13 Pro</td>
<td>1 TB</td>
</tr>
<tr>
<td>2022</td>
<td>iPhone 14 Pro</td>
<td>1 TB</td>
</tr>
<tr>
<td>2023</td>
<td>iPhone 15 Pro</td>
<td>1 TB</td>
</tr>
</tbody>
</table>
<p><strong>Further reading</strong>: <a href="https://lemire.me/blog/2020/12/22/in-2011-i-predicted-that-the-iphone-would-have-1tb-of-storage-in-2020/">In 2011, I predicted that the iPhone would have 1TB of storage in 2020</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/07/28/evolution-of-iphone-storage-capacity/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Storage costs are plummeting</title>
		<link>https://lemire.me/blog/2024/07/27/storage-costs-are-plummeting/</link>
					<comments>https://lemire.me/blog/2024/07/27/storage-costs-are-plummeting/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Sat, 27 Jul 2024 21:35:42 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21523</guid>

					<description><![CDATA[Storage costs are plummeting like a skydiver in freefall—between 10 and 100 times cheaper with each passing decade. Meanwhile, the programmer population is growing at a leisurely pace, like a tortoise in a marathon, increasing by about 50% per decade. And the Linux kernel? It is maybe doubling in size every ten years. The net &#8230; <a href="https://lemire.me/blog/2024/07/27/storage-costs-are-plummeting/" class="more-link">Continue reading <span class="screen-reader-text">Storage costs are plummeting</span></a>]]></description>
										<content:encoded><![CDATA[<p>Storage costs are plummeting like a skydiver in freefall—between 10 and 100 times cheaper with each passing decade. Meanwhile, the programmer population is growing at a leisurely pace, like a tortoise in a marathon, increasing by about 50% per decade. And the Linux kernel? It is maybe doubling in size every ten years. The net result: we are using storage of data (videos, images, model weights) while code is taking a backseat, fading into the background.</p>
<p>We just cannot code fast enough to fill our increasingly large disks.</p>
<p><a href="http://lemire.me/blog/wp-content/uploads/2024/07/time1.png"><img fetchpriority="high" decoding="async" class="alignnone size-large wp-image-21526" src="http://lemire.me/blog/wp-content/uploads/2024/07/time1-1024x386.png" alt="" width="660" height="249" srcset="https://lemire.me/blog/wp-content/uploads/2024/07/time1-1024x386.png 1024w, https://lemire.me/blog/wp-content/uploads/2024/07/time1-300x113.png 300w, https://lemire.me/blog/wp-content/uploads/2024/07/time1-768x289.png 768w, https://lemire.me/blog/wp-content/uploads/2024/07/time1.png 1498w" sizes="(max-width: 660px) 100vw, 660px" /></a></p>
<p><a href="http://lemire.me/blog/wp-content/uploads/2024/07/time2.png"><img decoding="async" class="alignnone size-large wp-image-21527" src="http://lemire.me/blog/wp-content/uploads/2024/07/time2-1024x373.png" alt="" width="660" height="240" srcset="https://lemire.me/blog/wp-content/uploads/2024/07/time2-1024x373.png 1024w, https://lemire.me/blog/wp-content/uploads/2024/07/time2-300x109.png 300w, https://lemire.me/blog/wp-content/uploads/2024/07/time2-768x280.png 768w, https://lemire.me/blog/wp-content/uploads/2024/07/time2-1536x559.png 1536w, https://lemire.me/blog/wp-content/uploads/2024/07/time2.png 1544w" sizes="(max-width: 660px) 100vw, 660px" /></a></p>
<p>Source: World in Data.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/07/27/storage-costs-are-plummeting/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>How big are your docker images?</title>
		<link>https://lemire.me/blog/2024/07/27/how-big-are-your-docker-images/</link>
					<comments>https://lemire.me/blog/2024/07/27/how-big-are-your-docker-images/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Sat, 27 Jul 2024 17:31:23 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21520</guid>

					<description><![CDATA[Docker is a standard to deploy software on the cloud. Developers start with an existing image and add their own code before deploying their systems. How big are typical uncompressed images? python:alpine (latest, aarch64) 58 MiB chainguard/bun (latest, aarch64) 90 MiB node:alpine (latest, aarch64) 141 MiB golang:alpine (latest, aarch64) 219 MiB Method: docker inspect -f &#8230; <a href="https://lemire.me/blog/2024/07/27/how-big-are-your-docker-images/" class="more-link">Continue reading <span class="screen-reader-text">How big are your docker images?</span></a>]]></description>
										<content:encoded><![CDATA[<p>Docker is a standard to deploy software on the cloud. Developers start with an existing image and add their own code before deploying their systems. How big are typical uncompressed images?</p>
<table>
<tbody>
<tr>
<td>python:alpine (latest, aarch64)</td>
<td>58 MiB</td>
</tr>
<tr>
<td>chainguard/bun (latest, aarch64)</td>
<td>90 MiB</td>
</tr>
<tr>
<td>node:alpine (latest, aarch64)</td>
<td>141 MiB</td>
</tr>
<tr>
<td>golang:alpine (latest, aarch64)</td>
<td>219 MiB</td>
</tr>
</tbody>
</table>
<p>Method: <tt>docker inspect -f "{{ .Size }}" docker.io/library/myimage</tt></p>
<p>Note:</p>
<ul>
<li>When you use Go, the resulting binary can be put into a new tiny image.</li>
<li>I have used alpine images in this table because they are smaller but many developers report problems with alpine images.</li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/07/27/how-big-are-your-docker-images/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>How much of your binary executable is just ASCII text?</title>
		<link>https://lemire.me/blog/2024/07/27/how-much-of-your-binary-executable-is-just-ascii-text/</link>
					<comments>https://lemire.me/blog/2024/07/27/how-much-of-your-binary-executable-is-just-ascii-text/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Sat, 27 Jul 2024 00:10:07 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21509</guid>

					<description><![CDATA[We sometimes use binary executable which can span megabytes. I wondered: how much text is contained in these binary files? To find out, I wrote a Python script which adds up the size of all sequences of at least 16 ASCII characters in the file. My heuristic is simple but is not quite perfect: some &#8230; <a href="https://lemire.me/blog/2024/07/27/how-much-of-your-binary-executable-is-just-ascii-text/" class="more-link">Continue reading <span class="screen-reader-text">How much of your binary executable is just ASCII text?</span></a>]]></description>
										<content:encoded><![CDATA[<p>We sometimes use binary executable which can span megabytes. I wondered: how much text is contained in these binary files? To find out, I wrote a Python script which adds up the size of all sequences of at least 16 ASCII characters in the file.</p>
<p>My heuristic is simple but is not quite perfect: some long sequences might not be actual text and some short ASCII strings might be missed. Nevertheless, it should be good enough to get some insight.</p>
<p>I downloaded macOS binaries for some popular JavaScript runtimes. I find that tens of megabytes are used for what is likely ASCII strings. About a third of the Node 22 binary is ASCII text. It is likely that much of this content is made of debug symbols and unminified JavaScript code.</p>
<table>
<tbody>
<tr>
<td>Node 22</td>
<td>33 MB</td>
</tr>
<tr>
<td>Node 20</td>
<td>24 MB</td>
</tr>
<tr>
<td>Node 18</td>
<td>18 MB</td>
</tr>
<tr>
<td>Deno 1.32</td>
<td>22 MB</td>
</tr>
<tr>
<td>Bun 1.1</td>
<td>5 MB</td>
</tr>
</tbody>
</table>
<p>An alternative method is to use the <tt>strings</tt> command as in <tt>strings - node | wc</tt>. It is a different metric but gives similar numbers.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/07/27/how-much-of-your-binary-executable-is-just-ascii-text/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Safer code in C++ with lifetime bounds</title>
		<link>https://lemire.me/blog/2024/07/26/safer-code-in-c-with-lifetime-bounds/</link>
					<comments>https://lemire.me/blog/2024/07/26/safer-code-in-c-with-lifetime-bounds/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Fri, 26 Jul 2024 15:25:13 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21500</guid>

					<description><![CDATA[For better performance in software, we avoid unnecessary copies. To do so, we introduce references (or pointers). An example of this ideas in C++ is the std::string_view class. As the name suggests, a std::string_view instance is merely a &#8216;view&#8217;: it points at some string, but it does not own or otherwise manage the underlying memory. &#8230; <a href="https://lemire.me/blog/2024/07/26/safer-code-in-c-with-lifetime-bounds/" class="more-link">Continue reading <span class="screen-reader-text">Safer code in C++ with lifetime bounds</span></a>]]></description>
										<content:encoded><![CDATA[<p>For better performance in software, we avoid unnecessary copies. To do so, we introduce references (or pointers). An example of this ideas in C++ is the <tt>std::string_view</tt> class. As the name suggests, a <tt>std::string_view</tt> instance is merely a &#8216;view&#8217;: it points at some string, but it does not own or otherwise manage the underlying memory.</p>
<p>The downside is that we must track ownership: when the owner of the memory is gone, we should not be left holding the <tt>std::string_view</tt> instance. With modern tools, it is trivial to detect such bugs (e.g., using a sanitizer). However, it would be nicer if the compiler could tell us right away.</p>
<p>A few C++ compilers (Visual Studio and LLVM) support lifetime-bound annotation to help us. Let us consider an example. Suppose you would like to parse a URL (e.g., &#8216;https://www.google.com/path&#8217;), but you are only interested in the host (e.g. &#8216;www.google.com&#8217;). You might write code like so using the ada-url/ada parsing library:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #666616;">std</span><span style="color: #800080;">::</span>string_view my_get_host<span style="color: #808030;">(</span><span style="color: #666616;">std</span><span style="color: #800080;">::</span>string_view url_string<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">auto</span> url <span style="color: #808030;">=</span> ada<span style="color: #800080;">::</span>parse<span style="color: #808030;">(</span>url_string<span style="color: #808030;">)</span><span style="color: #808030;">.</span>value<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> url.get_host<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>This code is not generally safe. The parser will store the result of the parse inside a temporary object but you are returning an <tt>std::string_view</tt> which points at it. You have a dangling reference.</p>
<p>To get a recent version of LLVM/clang (18+) to warn us, we just need to annotate the function get_host like so:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #004a43;">#</span><span style="color: #004a43;">ifndef</span><span style="color: #004a43;"> __has_cpp_attribute</span></span>
<span class="line_wrapper">    <span style="color: #004a43;">#</span><span style="color: #004a43;">define</span><span style="color: #004a43;"> ada_lifetime_bound</span></span>
<span class="line_wrapper"><span style="color: #004a43;">#</span><span style="color: #004a43;">elif</span><span style="color: #004a43;"> __has_cpp_attribute</span><span style="color: #808030;">(</span><span style="color: #004a43;">msvc</span><span style="color: #808030;">:</span><span style="color: #808030;">:</span><span style="color: #004a43;">lifetimebound</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">    <span style="color: #004a43;">#</span><span style="color: #004a43;">define</span><span style="color: #004a43;"> ada_lifetime_bound </span><span style="color: #808030;">[</span><span style="color: #808030;">[</span><span style="color: #004a43;">msvc</span><span style="color: #808030;">:</span><span style="color: #808030;">:</span><span style="color: #004a43;">lifetimebound</span><span style="color: #808030;">]</span><span style="color: #808030;">]</span></span>
<span class="line_wrapper"><span style="color: #004a43;">#</span><span style="color: #004a43;">elif</span><span style="color: #004a43;"> __has_cpp_attribute</span><span style="color: #808030;">(</span><span style="color: #004a43;">clang</span><span style="color: #808030;">:</span><span style="color: #808030;">:</span><span style="color: #004a43;">lifetimebound</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">    <span style="color: #004a43;">#</span><span style="color: #004a43;">define</span><span style="color: #004a43;"> ada_lifetime_bound </span><span style="color: #808030;">[</span><span style="color: #808030;">[</span><span style="color: #004a43;">clang</span><span style="color: #808030;">:</span><span style="color: #808030;">:</span><span style="color: #004a43;">lifetimebound</span><span style="color: #808030;">]</span><span style="color: #808030;">]</span></span>
<span class="line_wrapper"><span style="color: #004a43;">#</span><span style="color: #004a43;">elif</span><span style="color: #004a43;"> __has_cpp_attribute</span><span style="color: #808030;">(</span><span style="color: #004a43;">lifetimebound</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">    <span style="color: #004a43;">#</span><span style="color: #004a43;">define</span><span style="color: #004a43;"> ada_lifetime_bound </span><span style="color: #808030;">[</span><span style="color: #808030;">[</span><span style="color: #004a43;">lifetimebound</span><span style="color: #808030;">]</span><span style="color: #808030;">]</span></span>
<span class="line_wrapper"><span style="color: #004a43;">#</span><span style="color: #004a43;">else</span></span>
<span class="line_wrapper">    <span style="color: #004a43;">#</span><span style="color: #004a43;">define</span><span style="color: #004a43;"> ada_lifetime_bound</span></span>
<span class="line_wrapper"><span style="color: #004a43;">#</span><span style="color: #004a43;">endif</span></span>

<span class="line_wrapper"><span style="color: #808030;">.</span><span style="color: #808030;">.</span><span style="color: #808030;">.</span></span>

<span class="line_wrapper"><span style="color: #666616;">std</span><span style="color: #800080;">::</span>string_view get_host<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">noexcept</span> ada_lifetime_bound<span style="color: #800080;">;</span></span></pre>
<p><a href="https://github.com/ada-url/ada/pull/705">You can review the complete code update on GitHub</a>.</p>
<p>And then we get a warning at compile time:</p>
<pre>fun.cpp:8:10: warning: address of stack memory associated with local variable 'url' returned [-Wreturn-stack-address]
    8 |   return url.get_host();
</pre>
<p>It is hardly perfect at this point in time. It does not always warn you, but progress is being made. This feature and others will help us catch errors sooner.</p>
<p><strong>Credit</strong>: Thanks to Denis Yaroshevskiy for making me aware of this new compiler feature.</p>
<p><strong>Further reading</strong>: <a href="https://clang.llvm.org/docs/AttributeReference.html#lifetimebound">LLVM documentation</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/07/26/safer-code-in-c-with-lifetime-bounds/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
		<item>
		<title>Does C++ allow template specialization by concepts?</title>
		<link>https://lemire.me/blog/2024/07/22/does-c-allow-template-specialization-by-concepts/</link>
					<comments>https://lemire.me/blog/2024/07/22/does-c-allow-template-specialization-by-concepts/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Mon, 22 Jul 2024 15:13:24 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21488</guid>

					<description><![CDATA[Recent versions of C++ (C++20) have a new feature: concepts. A concept in C++ is a named set of requirements that a type must satisfy. E.g., &#8216;act like a string&#8217; or &#8216;act like a number&#8217;. In C++, we have two closely related terms: traits and concepts. For example, std::is_floating_point is a type trait that checks &#8230; <a href="https://lemire.me/blog/2024/07/22/does-c-allow-template-specialization-by-concepts/" class="more-link">Continue reading <span class="screen-reader-text">Does C++ allow template specialization by concepts?</span></a>]]></description>
										<content:encoded><![CDATA[<p>Recent versions of C++ (C++20) have a new feature: concepts. A concept in C++ is a named set of requirements that a type must satisfy. E.g., &#8216;act like a string&#8217; or &#8216;act like a number&#8217;. In C++, we have two closely related terms: traits and concepts. For example, <tt>std::is_floating_point</tt> is a type trait that checks if a type is a floating-point type. A concept in C++ is used to specify requirements for template parameters. So <tt>std::floating_point</tt> is the concept corresponding to the trait <tt>std::is_floating_point</tt>.</p>
<p>When used in conjunction with templates, concepts can be quite nice. Let us look at an example. Suppose that you want to define a generic function &#8216;clear&#8217; which behaves some way on strings and some other way on other types. You might use the following code:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">template</span> <span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">typename</span> T<span style="color: #800080;">&gt;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> clear<span style="color: #808030;">(</span>T <span style="color: #808030;">&amp;</span> t<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>


<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">template</span> <span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">typename</span> T<span style="color: #800080;">&gt;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">concept</span> not_string <span style="color: #808030;">=</span></span>
<span class="line_wrapper"><span style="color: #808030;">!</span><span style="color: #666616;">std</span><span style="color: #800080;">::</span>is_same_v<span style="color: #800080;">&lt;</span>T<span style="color: #808030;">,</span> <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">string</span><span style="color: #800080;">&gt;</span><span style="color: #800080;">;</span></span>


<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">template</span> <span style="color: #800080;">&lt;</span><span style="color: #800080;">&gt;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> clear<span style="color: #808030;">(</span><span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">string</span> <span style="color: #808030;">&amp;</span> t<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  t<span style="color: #808030;">.</span>clear<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>


<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">template</span> <span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">class</span> T<span style="color: #800080;">&gt;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> clear<span style="color: #808030;">(</span>T<span style="color: #808030;">&amp;</span> container<span style="color: #808030;">)</span> <span style="color: #800000; font-weight: bold;">requires</span> not_string<span style="color: #800080;">&lt;</span>T<span style="color: #800080;">&gt;</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span><span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">auto</span><span style="color: #808030;">&amp;</span> i <span style="color: #800080;">:</span> container<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    i <span style="color: #808030;">=</span> <span style="color: #800000; font-weight: bold;">typename</span> T<span style="color: #800080;">::</span>value_type<span style="color: #800080;">{</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>

</pre>
<p>We have a generic clear function that takes a reference to any type T as an argument. We define a concept <tt>not_string</tt> which applies to any type expect <tt>std::string</tt>. We specialize for the <tt>std::string</tt> case: <tt>template &lt;&gt; void clear(std::string &amp; t) { t.clear(); }</tt>: It directly calls the clear() member function of the string to empty its contents. Next we define <tt>template void clear(T&amp; container) requires not_string { ... }</tt>: it is a generic implementation of clear for any type T that satisfies the <tt>not_string concept</tt>. It iterates over the container and sets each element to its default value. When you call clear with a std::string, the specialized version is used, directly calling std::string::clear(). For any other type that satisfies the not_string concept (i.e., is not a <tt>std::string</tt>), the generic implementation is used. It iterates over the container and sets each element to its default value. This assumes that T is a container-like type with a value_type and iterator support.</p>
<p>There are easier ways to achieve this result, but it illustrates the idea.</p>
<p>Up until recently, I thought that the template with the &#8216;requires&#8217; keyword was a <em>template specialization</em>, just like when you specialize the template for the <tt>std::string</tt> type.</p>
<p>Unfortunately, it may be more complicated. Let us repeat exactly the same code but we put the clear function in a class &#8216;A&#8217;:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">struct</span> A <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">template</span> <span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">typename</span> T<span style="color: #800080;">&gt;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">void</span> clear<span style="color: #808030;">(</span>T <span style="color: #808030;">&amp;</span> t<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>

<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">template</span> <span style="color: #800080;">&lt;</span><span style="color: #800080;">&gt;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> A<span style="color: #800080;">::</span>clear<span style="color: #808030;">(</span><span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">string</span> <span style="color: #808030;">&amp;</span> t<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  t<span style="color: #808030;">.</span>clear<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>



<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">template</span> <span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">class</span> T<span style="color: #800080;">&gt;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> A<span style="color: #800080;">::</span>clear<span style="color: #808030;">(</span>T<span style="color: #808030;">&amp;</span> container<span style="color: #808030;">)</span> <span style="color: #800000; font-weight: bold;">requires</span> not_string<span style="color: #800080;">&lt;</span>T<span style="color: #800080;">&gt;</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span><span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">auto</span><span style="color: #808030;">&amp;</span> i <span style="color: #800080;">:</span> container<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    i <span style="color: #808030;">=</span> <span style="color: #800000; font-weight: bold;">typename</span> T<span style="color: #800080;">::</span>value_type<span style="color: #800080;">{</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>

</pre>
<p>This time, your compiler might fail with the following or the equivalent:</p>
<pre>out-of-line definition of 'clear' does not match any declaration in 'A'
</pre>
<p>You might fix the issue by adding the template with the constraint to the class definition.</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">struct</span> A <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">template</span> <span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">typename</span> T<span style="color: #800080;">&gt;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">void</span> clear<span style="color: #808030;">(</span>T <span style="color: #808030;">&amp;</span> t<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">template</span> <span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">class</span> T<span style="color: #800080;">&gt;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">void</span> clear<span style="color: #808030;">(</span>T<span style="color: #808030;">&amp;</span> container<span style="color: #808030;">)</span> <span style="color: #800000; font-weight: bold;">requires</span> not_string<span style="color: #800080;">&lt;</span>T<span style="color: #800080;">&gt;</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
</pre>
<p>I find this unpleasant and inconvenient because you must put in your class declaration all of the concepts you plan on supporting. And if someone wants to support another concept, they need to change your class declaration to add it.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/07/22/does-c-allow-template-specialization-by-concepts/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Scan HTML even faster with SIMD instructions (C++ and C#)</title>
		<link>https://lemire.me/blog/2024/07/20/scan-html-even-faster-with-simd-instructions-c-and-c/</link>
					<comments>https://lemire.me/blog/2024/07/20/scan-html-even-faster-with-simd-instructions-c-and-c/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Sat, 20 Jul 2024 21:30:43 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21470</guid>

					<description><![CDATA[Earlier this year, both major Web engines (WebKit/Safari and Chromium/Chrome/Edge/Brave) accelerated HTML parsing using SIMD instructions. These &#8216;SIMD&#8217; instructions are special instructions that are present in all our processors that can process multiple bytes at once (e.g., 16 bytes). The problem that WebKit and Chromium solve is to jump to the next target character as &#8230; <a href="https://lemire.me/blog/2024/07/20/scan-html-even-faster-with-simd-instructions-c-and-c/" class="more-link">Continue reading <span class="screen-reader-text">Scan HTML even faster with SIMD instructions (C++ and C#)</span></a>]]></description>
										<content:encoded><![CDATA[<p>Earlier this year, both major Web engines (WebKit/Safari and Chromium/Chrome/Edge/Brave) accelerated HTML parsing using SIMD instructions. These &#8216;SIMD&#8217; instructions are special instructions that are present in all our processors that can process multiple bytes at once (e.g., 16 bytes).</p>
<p>The problem that WebKit and Chromium solve is to jump to the next target character as fast as possible: one of &lt;, &amp;, \r and \0. In C++, you can use <tt>std::find_first_of</tt> for this problem whereas in C#, you might use the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.buffers.searchvalues-1?view=net-8.0">SearchValues class</a>. But we can do better with a bit of extra work.</p>
<p>The WebKit and Chromium engineers use <em>vectorized classification</em> (<a href="https://arxiv.org/pdf/1902.08318">Langdale and Lemire, 2019</a>): we load blocks of bytes and identify the characters you seek using a few instructions. Then we identify the first such character loaded, if any. If no target character is found, we just move forward and load another block of characters. I reviewed the new methods used by the Web engines in <a href="https://lemire.me/blog/2024/06/08/scan-html-faster-with-simd-instructions-chrome-edition/">C++</a> and <a href="https://lemire.me/blog/2024/07/05/scan-html-faster-with-simd-instructions-net-c-edition/">C#</a> in earlier posts along with minor optimizations. The results are good, and it suggests that WebKit and Chromium engineers were right to adopt this optimization.</p>
<p>But can we do better?</p>
<p>Let us consider an example to see how the WebKit/Chromium approach works. Suppose that my HTML file is as follows:</p>
<pre>&lt;!doctype html&gt;&lt;html itemscope="" itemtype="http://schema.o'...
</pre>
<p>We load the first 16 bytes&#8230;</p>
<pre>&lt;!doctype html&gt;&lt;
</pre>
<p>We find the target characters: the first character and the 16th character (<span style="color: red;">&lt;</span>!doctype html&gt;<span style="color: red;">&lt;</span>). We move to the first index. Later we start again from this point, this time loading slightly more data&#8230;</p>
<pre>!doctype html&gt;&lt;h
</pre>
<p>And this time, we will identify the 15th character as a target character, and move there.</p>
<p>Can you see why it is potentially wasteful? We have loaded the same data twice, and identified the same character again as a target character.</p>
<p>Instead, we can adopt an approach similar to that used by systems like simdjson. We load non-overlapping blocks of 64 bytes. Each block of 64 bytes is turned into a 64-bit register where each bit in the word correspond to a loaded character. If the character is a match, then the corresponding bit is set to 1. The computed 64-bit word serves as an index for the 64 characters. Once we have used it up, we can load another block and so forth.</p>
<p>Let us build a small C++ structure to solve this problem. We focus on ARM NEON, but the concept is general. ARM NEON is available on your mobile phone, on some servers and on your macBook.</p>
<p>Our constructor initializes the <code>neon_match64</code> object with a character range defined by <code>start</code> and <code>end</code>. We define three public methods:</p>
<ul>
<li><code>get()</code>: Returns a pointer to the current position within the character range.</li>
<li><code>consume()</code>: Increments the offset and shifts the <code>matches</code> value right by 1.</li>
<li><code>advance()</code>: Advances the position within the range</li>
</ul>
<p>To iterate over the target characters, we might use the class as follows:</p>
<pre class="code_syntax" style="font-size: 0.8em; color: #000000; background: #ffffff;"><span class="line_wrapper">neon_match64 m<span style="color: #808030;">(</span>start<span style="color: #808030;">,</span> end<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span>m<span style="color: #808030;">.</span>advance<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span> match <span style="color: #808030;">=</span> m<span style="color: #808030;">.</span>get<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span> m<span style="color: #808030;">.</span>consume<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>The class code might look like the following:</p>
<pre class="code_syntax" style="font-size: 0.8em; color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">struct</span> neon_match64 <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  neon_match64<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>start<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>end<span style="color: #808030;">)</span> </span>
<span class="line_wrapper">       <span style="color: #800080;">:</span> start<span style="color: #808030;">(</span>start<span style="color: #808030;">)</span><span style="color: #808030;">,</span> end<span style="color: #808030;">(</span>end<span style="color: #808030;">)</span><span style="color: #808030;">,</span> offset<span style="color: #808030;">(</span><span style="color: #008c00;">0</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    low_nibble_mask <span style="color: #808030;">=</span> <span style="color: #800080;">{</span><span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x26</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> </span>
<span class="line_wrapper">        <span style="color: #008000;">0x3c</span><span style="color: #808030;">,</span> <span style="color: #008000;">0xd</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    bit_mask <span style="color: #808030;">=</span> <span style="color: #800080;">{</span><span style="color: #008000;">0x01</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x02</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x4</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x8</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x10</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x20</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x40</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x80</span><span style="color: #808030;">,</span></span>
<span class="line_wrapper">                <span style="color: #008000;">0x01</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x02</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x4</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x8</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x10</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x20</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x40</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x80</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    v0f <span style="color: #808030;">=</span> vmovq_n_u8<span style="color: #808030;">(</span><span style="color: #008000;">0xf</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    update<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>get<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800080;">{</span> <span style="color: #800000; font-weight: bold;">return</span> start <span style="color: #808030;">+</span> offset<span style="color: #800080;">;</span> <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">void</span> consume<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    offset<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    matches <span style="color: #808030;">&gt;</span><span style="color: #808030;">&gt;</span><span style="color: #808030;">=</span> <span style="color: #008c00;">1</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">bool</span> advance<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span>matches <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      start <span style="color: #808030;">+</span><span style="color: #808030;">=</span> <span style="color: #008c00;">64</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      update<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">int</span> off <span style="color: #808030;">=</span> __builtin_ctzll<span style="color: #808030;">(</span>matches<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    matches <span style="color: #808030;">&gt;</span><span style="color: #808030;">&gt;</span><span style="color: #808030;">=</span> off<span style="color: #800080;">;</span></span>
<span class="line_wrapper">    offset <span style="color: #808030;">+</span><span style="color: #808030;">=</span> off<span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">return</span> <span style="color: #800000; font-weight: bold;">true</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>

<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">private</span><span style="color: #e34adc;">:</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">inline</span> <span style="color: #800000; font-weight: bold;">void</span> update<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span> update<span style="color: #808030;">(</span><span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #603000;">uint8_t</span><span style="color: #808030;">*</span><span style="color: #808030;">)</span>start<span style="color: #808030;">)</span><span style="color: #800080;">;</span> <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">inline</span> <span style="color: #800000; font-weight: bold;">void</span> update<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #603000;">uint8_t</span> <span style="color: #808030;">*</span>buffer<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    uint8x16_t data1 <span style="color: #808030;">=</span> vld1q_u8<span style="color: #808030;">(</span>buffer<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t data2 <span style="color: #808030;">=</span> vld1q_u8<span style="color: #808030;">(</span>buffer <span style="color: #808030;">+</span> <span style="color: #008c00;">16</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t data3 <span style="color: #808030;">=</span> vld1q_u8<span style="color: #808030;">(</span>buffer <span style="color: #808030;">+</span> <span style="color: #008c00;">32</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t data4 <span style="color: #808030;">=</span> vld1q_u8<span style="color: #808030;">(</span>buffer <span style="color: #808030;">+</span> <span style="color: #008c00;">48</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>

<span class="line_wrapper">    uint8x16_t lowpart1 <span style="color: #808030;">=</span> vqtbl1q_u8<span style="color: #808030;">(</span>low_nibble_mask<span style="color: #808030;">,</span> </span>
<span class="line_wrapper">      vandq_u8<span style="color: #808030;">(</span>data1<span style="color: #808030;">,</span> v0f<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;...</span></span>
<span class="line_wrapper">    uint8x16_t lowpart4 <span style="color: #808030;">=</span> vqtbl1q_u8<span style="color: #808030;">(</span>low_nibble_mask<span style="color: #808030;">,</span> </span>
<span class="line_wrapper">       vandq_u8<span style="color: #808030;">(</span>data4<span style="color: #808030;">,</span> v0f<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>

<span class="line_wrapper">    uint8x16_t matchesones1 <span style="color: #808030;">=</span> vceqq_u8<span style="color: #808030;">(</span>lowpart1<span style="color: #808030;">,</span> data1<span style="color: #808030;">)</span><span style="color: #800080;">;...</span></span>

<span class="line_wrapper">    uint8x16_t matchesones4 <span style="color: #808030;">=</span> vceqq_u8<span style="color: #808030;">(</span>lowpart4<span style="color: #808030;">,</span> data4<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>

<span class="line_wrapper">    uint8x16_t sum0 <span style="color: #808030;">=</span></span>
<span class="line_wrapper">        vpaddq_u8<span style="color: #808030;">(</span>matchesones1 <span style="color: #808030;">&amp;</span> bit_mask<span style="color: #808030;">,</span> matchesones2 <span style="color: #808030;">&amp;</span> bit_mask<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t sum1 <span style="color: #808030;">=</span></span>
<span class="line_wrapper">        vpaddq_u8<span style="color: #808030;">(</span>matchesones3 <span style="color: #808030;">&amp;</span> bit_mask<span style="color: #808030;">,</span> matchesones4 <span style="color: #808030;">&amp;</span> bit_mask<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    sum0 <span style="color: #808030;">=</span> vpaddq_u8<span style="color: #808030;">(</span>sum0<span style="color: #808030;">,</span> sum1<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    sum0 <span style="color: #808030;">=</span> vpaddq_u8<span style="color: #808030;">(</span>sum0<span style="color: #808030;">,</span> sum0<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    matches <span style="color: #808030;">=</span> vgetq_lane_u64<span style="color: #808030;">(</span>vreinterpretq_u64_u8<span style="color: #808030;">(</span>sum0<span style="color: #808030;">)</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    offset <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>

<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>start<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>end<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #603000;">size_t</span> offset<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint64_t</span> matches<span style="color: #800080;">{</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  uint8x16_t low_nibble_mask<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  uint8x16_t v0f<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  uint8x16_t bit_mask<span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span></pre>
<p>The most complicated function is the update function because ARM NEON makes it a bit difficult. We use use <code>vld1q_u8(buffer)</code> loads 16 bytes (128 bits) of data from the memory location pointed to by <code>buffer</code> into the <code>data1</code> variable. Similarly, <code>data2</code>, <code>data3</code>, and <code>data4</code> load subsequent 16-byte chunks from <code>buffer + 16</code>, <code>buffer + 32</code>, and <code>buffer + 48</code>, respectively. The expression <code>vandq_u8(data1, v0f)</code> performs a bitwise AND operation between <code>data1</code> and a vector <code>v0f</code> (which contains the value 0xF in each lane). The expression <code>vqtbl1q_u8(low_nibble_mask, ...)</code> uses the <code>low_nibble_mask</code> vector to permute the low nibbles of the result of the AND operation. The result is stored in <code>lowpart1</code>, <code>lowpart2</code>, <code>lowpart3</code>, and <code>lowpart4</code>. The expression<code>vceqq_u8(lowpart1, data1)</code>: Compares each lane of <code>lowpart1</code> with <code>data1</code>. If equal, the corresponding lane in the result is set to all ones (0xFF). They correspond to target characters. You repeat the same computation four times. We then use bitwise AND with <code>bit_mask(...)</code>  followed by several applications of pairwise sums <code>vpaddq_u8(...)</code> to compute the 64-bit word.</p>
<p><a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/blob/920413d9f4d3ab82f8c34d57d4617a07aaed241a/2024/06/08/benchmarks/benchmark.cpp#L49">I have added this C++ structure to an existing benchmark</a>. Furthermore, I have ported it to <a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/tree/master/2024/07/05/src/SimdHTML.cs">C# for good measure</a> with a lot of help from Arseniy Zlobintsev.</p>
<p>How well does it do?</p>
<p>I use a C++ small benchmark <a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/tree/master/2024/06/08">where I scan the HTML of the Google home page</a>. I run the benchmark on my Apple M2 laptop (LLVM 15).</p>
<table>
<tbody>
<tr>
<th>method</th>
<th>speed</th>
<th>instructions/byte</th>
<th>instructions/cycle</th>
</tr>
<tr>
<td><tt>find_first_of</tt></td>
<td>2.0 GB/s</td>
<td>9.8 instructions/byte</td>
<td>5.1 instructions/cycle</td>
</tr>
<tr>
<td>vectorized classification</td>
<td>6.8 GB/s</td>
<td>1.9 instructions/byte</td>
<td>2.8 instructions/cycle</td>
</tr>
<tr>
<td>64-bit vectorized classification</td>
<td>33 GB/s</td>
<td>0.7 instructions/byte</td>
<td>6.6 instructions/cycle</td>
</tr>
</tbody>
</table>
<p>The number speaks for themselves: the 64-bit vectorized classification approach is the clear winner. It requires few instructions and it allows retiring many instructions per cycle on average.</p>
<p>What about C#?</p>
<table>
<tbody>
<tr>
<th>method</th>
<th>speed</th>
</tr>
<tr>
<td>Conventional</td>
<td>1.4 GB/s</td>
</tr>
<tr>
<td>SearchValues</td>
<td>4.2 GB/s</td>
</tr>
<tr>
<td>vectorized classification</td>
<td>6.3 GB/s</td>
</tr>
<tr>
<td>64-bit vectorized classification</td>
<td>29 GB/s</td>
</tr>
</tbody>
</table>
<p>Again, the 64-bit vectorized-classification approach is the clear winner. The SearchValues class provided by .NET gets an honorable mention for its good performance.</p>
<p>I have not yet ported the code for x64 processors, but I expect equally good results.</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/07/20/scan-html-even-faster-with-simd-instructions-c-and-c/feed/</wfw:commentRss>
			<slash:comments>9</slash:comments>
		
		
			</item>
		<item>
		<title>Benchmarking ARM processors: Graviton 4, Graviton 3 and Apple M2</title>
		<link>https://lemire.me/blog/2024/07/10/benchmarking-arm-processors-graviton-4-graviton-3-and-apple-m2/</link>
					<comments>https://lemire.me/blog/2024/07/10/benchmarking-arm-processors-graviton-4-graviton-3-and-apple-m2/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Wed, 10 Jul 2024 20:43:45 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21457</guid>

					<description><![CDATA[The world of commodity processor is roughly divided in two: x64 chips for servers and PCs, and ARM processors for mobile devices. However, ARM chips increasingly common on servers and laptop. My own favorite laptop is an Apple macBook with an M2 chip. Amazon has been producing its own ARM processors (Graviton) and it recently &#8230; <a href="https://lemire.me/blog/2024/07/10/benchmarking-arm-processors-graviton-4-graviton-3-and-apple-m2/" class="more-link">Continue reading <span class="screen-reader-text">Benchmarking ARM processors: Graviton 4, Graviton 3 and Apple M2</span></a>]]></description>
										<content:encoded><![CDATA[<p>The world of commodity processor is roughly divided in two: x64 chips for servers and PCs, and ARM processors for mobile devices. However, ARM chips increasingly common on servers and laptop. My own favorite laptop is an Apple macBook with an M2 chip. Amazon has been producing its own ARM processors (Graviton) and it recently made available the latest of such chips, the Graviton 4. It is reportedly based on a Neoverse V2 design from ARM while its previous design was a Neoverse V1 (Graviton 3). Qualcomm has also released high performance ARM chips for Windows laptops, the <a href="https://www.qualcomm.com/snapdragon/laptops">Snapdragon Elite X</a>.</p>
<p>I decided to quickly test Amazon&#8217;s new Graviton 4 processor. I am deliberately not comparing against x64 processors. It is far easier to compare ARM against ARM given that you can run exactly the same instructions.</p>
<p>In a previous benchmark, I found that, at least for the type of work that I do, the Graviton 3 processor ran slower than an Apple M2, even after correcting for its lower frequency. The Graviton 3 runs at up to 2.6 GHz, while Apple M2 can run at up to 3.5 GHz.  <a href="https://www.nextplatform.com/2024/07/09/aws-charges-a-hefty-premium-for-graviton-4-instances/">The Graviton 4 runs at 2.8 GHz</a>. Going from the clock speed alone, you would not expect much of a performance gain going from the Graviton 3 to the Graviton 4 (at most 10%)</p>
<p>Let us run benchmarks. Under AWS, I am going to use Ubuntu 24 with GCC 13. Under macOS, I am using the latest Apple LLVM (15).</p>
<p><strong>URL parsing (C++)</strong></p>
<p>Let us start with a URL parsing benchmark. We use the <a href="https://github.com/ada-url/ada">Ada URL parser</a> to parse thousands of URLs, as fast as possible. To reproduce, do the following:</p>
<pre>git clone https://github.com/ada-url/ada.git
cd ada
cmake -B build -DADA_BENCHMARKS=ON
sudo ./build/benchmarks/benchdata
</pre>
<p>We focus on the <tt>BasicBench_AdaURL_aggregator_href</tt> results.</p>
<p>I am getting that the AWS Graviton 4, though it runs at a lower frequency, can match the Apple M2 performance.</p>
<table>
<tbody>
<tr>
<th>system</th>
<th>ns/url</th>
<th>GHz</th>
<th>instructions/cycle</th>
</tr>
<tr>
<td>AWS Graviton 3</td>
<td>260</td>
<td>2.6</td>
<td>3.4</td>
</tr>
<tr>
<td>AWS Graviton 4</td>
<td>168</td>
<td>2.8</td>
<td>4.7</td>
</tr>
<tr>
<td>Apple M2</td>
<td>160</td>
<td>3.4</td>
<td>4.4</td>
</tr>
</tbody>
</table>
<p><strong>Unicode Validation (C#)</strong></p>
<p>We recently published <a href="https://github.com/simdutf/SimdUnicode">a fast Unicode validation library for .NET 8/C#.</a> It contains many benchmarks, but let me consider the validation of a JSON file.</p>
<p>To reproduce:</p>
<pre>sudo apt-get install -y dotnet-sdk-8.0
git clone https://github.com/simdutf/SimdUnicode.git
cd SimdUnicode/
cd benchmark/
dotnet run --configuration Release --filter "*Twitter*"
</pre>
<p>This time I am getting that the AWS Graviton 4 is significantly slower than the Apple M2, though it is much faster than the Graviton 3. Even adjusting for CPU frequency, the AWS Graviton 4 is slower: the frequency is 20% lower, but the speed is 30% lower.</p>
<table>
<tbody>
<tr>
<th>system</th>
<th>GB/s (SimdUnicode)</th>
<th>GB/s (.NET Runtime Library)</th>
</tr>
<tr>
<td>AWS Graviton 3</td>
<td>14</td>
<td>9</td>
</tr>
<tr>
<td>AWS Graviton 4</td>
<td>19</td>
<td>11</td>
</tr>
<tr>
<td>Apple M2</td>
<td>25</td>
<td>14</td>
</tr>
</tbody>
</table>
<p><strong>JSON parsing (C++)</strong></p>
<p>Let us try the <a href="https://github.com/simdjson/simdjson">simdjson library</a>. To reproduce, do the following:</p>
<pre>git clone https://github.com/simdjson/simdjson.git
cd simdjson
cmake --build build -j
./build/benchmark/bench_ondemand --benchmark_filter="find_tweet"
</pre>
<p>On this benchmark, we find agan that the AWS Graviton 4 is significantly better than the AWS Graviton 3, but somewhat behind the Apple M2, even after adjusting for its lower frequency.</p>
<table>
<tbody>
<tr>
<th>system</th>
<th>GB/s</th>
<th>instructions/cycle</th>
</tr>
<tr>
<td>AWS Graviton 3</td>
<td>3.6</td>
<td>4.4</td>
</tr>
<tr>
<td>AWS Graviton 4</td>
<td>4.6</td>
<td>5.1</td>
</tr>
<tr>
<td>Apple M2</td>
<td>6.4</td>
<td>5.7</td>
</tr>
</tbody>
</table>
<p><strong>Base64 encoding and decoding (C++)</strong></p>
<p>This time we are going to use the <a href="https://github.com/simdutf/simdutf">simdutf library</a> and its fast base64 encoding and decoding functions. To reproduce:</p>
<pre>git clone https://github.com/simdutf/simdutf.git
cd simdutf
cmake -B build -D SIMDUTF_BENCHMARKS=ON
cmake --build build
./build/benchmarks/base64/benchmark_base64 -r README.md
</pre>
<p>We focus on the <tt>simdutf::arm64</tt> results. Again, the AWS Graviton 4 is faster than the AWS Graviton 3, but slower than the Apple M2, even after adjusting for CPU frequency.</p>
<table>
<tbody>
<tr>
<th>system</th>
<th>GB/s</th>
<th>instructions/cycle</th>
</tr>
<tr>
<td>AWS Graviton 3</td>
<td>2.8</td>
<td>2.2</td>
</tr>
<tr>
<td>AWS Graviton 4</td>
<td>3.5</td>
<td>2.6</td>
</tr>
<tr>
<td>Apple M2</td>
<td>6.7</td>
<td>3.7</td>
</tr>
</tbody>
</table>
<p><strong>Number Parsing (C++)</strong></p>
<p>We can use a number-parsing benchmark used to assess the <a href="https://github.com/fastfloat/fast_float">fast_float library</a>. To reproduce:</p>
<pre>git clone https://github.com/lemire/simple_fastfloat_benchmark.git
cd simple_fastfloat_benchmark
cmake -B build
cmake --build build
./build/benchmarks/benchmark
</pre>
<p>We care about the <tt>fast_float</tt> results. We get similar results, again.</p>
<table>
<tbody>
<tr>
<th>system</th>
<th>GB/s</th>
</tr>
<tr>
<td>AWS Graviton 3</td>
<td>1.0</td>
</tr>
<tr>
<td>AWS Graviton 4</td>
<td>1.3</td>
</tr>
<tr>
<td>Apple M2</td>
<td>1.7</td>
</tr>
</tbody>
</table>
<p><strong>Bandwidth</strong></p>
<p>I ran the <a href="https://github.com/lemire/testingmlp">memory-level paralellism benchmark</a>. I find that the Graviton 4 is slightly better than the Graviton 3. However, the difference is small and you might not notice it in practice. This is a point-chasing benchmark and you do several at once. As you get to over 10 &#8216;lanes&#8217; it becomes sensitive to noise. The Graviton 3 &#8216;noise&#8217; visible in the graph is likely measurement error.</p>
<p><a href="http://lemire.me/blog/wp-content/uploads/2024/07/graviton.png"><img decoding="async" class="alignnone size-full wp-image-21458" src="http://lemire.me/blog/wp-content/uploads/2024/07/graviton.png" alt="" width="60%" srcset="https://lemire.me/blog/wp-content/uploads/2024/07/graviton.png 800w, https://lemire.me/blog/wp-content/uploads/2024/07/graviton-300x225.png 300w, https://lemire.me/blog/wp-content/uploads/2024/07/graviton-768x576.png 768w" sizes="(max-width: 800px) 100vw, 800px" /></a></p>
<p><strong>Conclusion</strong></p>
<p>These few tests suggest that the Graviton 4 processor is not quite a match for Apple Silicon on a per-core basis. However, it is significant step up from the Graviton 3. Even though both Gravitons have nearly the same clock speed, the Graviton 4 is much faster (e.g., by 30%). The Graviton 4 can retire many more instructions per cycle than the Graviton 3.</p>
<pre>graviton 3 ▏ 2.6 GHz ███████████████████████▏
graviton 4 ▏ 2.8 GHz █████████████████████████

URL parsing
graviton 3 ▏ 3.8 Murl/s ████████████████
graviton 4 ▏ 5.9 Murl/s █████████████████████████

Unicode Validation
graviton 3 ▏ 14 GB/s ██████████████████▍
graviton 4 ▏ 19 GB/s █████████████████████████

simdjson
graviton 3 ▏ 3.6 GB/s ███████████████████▌
graviton 4 ▏ 4.6 GB/s █████████████████████████

base64
graviton 3 ▏ 2.8 GB/s ███████████████████▉
graviton 4 ▏ 3.5 GB/s ████████████████████████▉

number parsing
graviton 3 ▏ 1.0 GB/s ███████████████████▏
graviton 4 ▏ 1.3 GB/s █████████████████████████
</pre>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/07/10/benchmarking-arm-processors-graviton-4-graviton-3-and-apple-m2/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Scan HTML faster with SIMD instructions: .NET/C# Edition</title>
		<link>https://lemire.me/blog/2024/07/05/scan-html-faster-with-simd-instructions-net-c-edition/</link>
					<comments>https://lemire.me/blog/2024/07/05/scan-html-faster-with-simd-instructions-net-c-edition/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Fri, 05 Jul 2024 19:44:50 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21437</guid>

					<description><![CDATA[Recently, the two major Web engines (WebKit and Chromium) adopted fast SIMD routines to scan HTML content. The key insight is to use vectorized classification (Langdale and Lemire, 2019): you load blocks of characters and identify the characters you seek using a few instructions. In particular, we use &#8216;SIMD instructions&#8217;, special instructions that are available &#8230; <a href="https://lemire.me/blog/2024/07/05/scan-html-faster-with-simd-instructions-net-c-edition/" class="more-link">Continue reading <span class="screen-reader-text">Scan HTML faster with SIMD instructions: .NET/C# Edition</span></a>]]></description>
										<content:encoded><![CDATA[<p>Recently, the two major Web engines (WebKit and Chromium) adopted fast SIMD routines to scan HTML content. The key insight is to use <em>vectorized classification</em> (<a href="https://arxiv.org/pdf/1902.08318">Langdale and Lemire, 2019</a>): you load blocks of characters and identify the characters you seek using a few instructions. In particular, we use &#8216;SIMD instructions&#8217;, special instructions that are available on practically all modern processors and can process 16 bytes or more at once.</p>
<p>The problem that WebKit and Chromium solve is to jump to the next relevant characters: one of &lt;, &amp;, \r and \0. Thus we must identify quickly whether we have found one of these characters in a block. On my Apple macbook, a <a href="https://lemire.me/blog/2024/06/08/scan-html-faster-with-simd-instructions-chrome-edition/">fast SIMD-based approach can scan an HTML page at about 7 GB/s, with code written in C/C++</a>.</p>
<p>But what about C#? The recent C# runtime (.NET8) supports fast SIMD instructions.</p>
<p>Let us first consider a simple version of the function:</p>
<pre class="code_syntax" style="font-size: 0.8em; color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">public</span> <span style="color: #800000; font-weight: bold;">unsafe</span> <span style="color: #800000; font-weight: bold;">static</span> <span style="color: #800000; font-weight: bold;">void</span> <span style="color: #005fd2;">NaiveAdvanceString</span><span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">ref</span> <span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">*</span> start<span style="color: #808030;">,</span> </span>
<span class="line_wrapper">                                             <span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">*</span> end<span style="color: #808030;">)</span></span>
<span class="line_wrapper"><span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span>start <span style="color: #808030;">&lt;</span> end<span style="color: #808030;">)</span></span>
<span class="line_wrapper">  <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span><span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #800000;">'</span><span style="color: #0000e6;">&lt;</span><span style="color: #800000;">'</span> || <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #800000;">'</span><span style="color: #0000e6;">&amp;</span><span style="color: #800000;">'</span> </span>
<span class="line_wrapper">         || <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> '\r' || <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #800000;">'</span><span style="color: #0f69ff;">\0</span><span style="color: #800000;">'</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">    <span style="color: #800080;">{</span></span>
<span class="line_wrapper">       <span style="color: #800000; font-weight: bold;">return</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">    start<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>This function just visits each character, one by one, and it compares it against the target characters. If one target character is found, we return.</p>
<p>Let us consider a SIMD version of the same function. It is slightly more complicated.</p>
<pre class="code_syntax" style="font-size: 0.8em; color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">public</span> <span style="color: #800000; font-weight: bold;">unsafe</span> <span style="color: #800000; font-weight: bold;">static</span> <span style="color: #800000; font-weight: bold;">void</span> <span style="color: #005fd2;">SIMDAdvanceString</span><span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">ref</span> <span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">*</span> start<span style="color: #808030;">,</span> </span>
<span class="line_wrapper">                                          <span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">*</span> end<span style="color: #808030;">)</span></span>
<span class="line_wrapper"><span style="color: #800080;">{</span></span>

<span class="line_wrapper">    Vector128<span style="color: #808030;">&lt;</span><span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">&gt;</span> low_nibble_mask <span style="color: #808030;">=</span> Vector128<span style="color: #808030;">.</span>Create<span style="color: #808030;">(</span><span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> </span>
<span class="line_wrapper">                  <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">)</span><span style="color: #008000;">0x26</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">)</span><span style="color: #008000;">0x3c</span><span style="color: #808030;">,</span> </span>
<span class="line_wrapper">                 <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">)</span><span style="color: #008000;">0xd</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    Vector128<span style="color: #808030;">&lt;</span><span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">&gt;</span> v0f <span style="color: #808030;">=</span> Vector128<span style="color: #808030;">.</span>Create<span style="color: #808030;">(</span><span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">)</span><span style="color: #008000;">0x0F</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    Vector128<span style="color: #808030;">&lt;</span><span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">&gt;</span> bit_mask <span style="color: #808030;">=</span> Vector128<span style="color: #808030;">.</span>Create<span style="color: #808030;">(</span><span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">)</span><span style="color: #008c00;">16</span><span style="color: #808030;">,</span> <span style="color: #008c00;">15</span><span style="color: #808030;">,</span> <span style="color: #008c00;">14</span><span style="color: #808030;">,</span> <span style="color: #008c00;">13</span><span style="color: #808030;">,</span> </span>
<span class="line_wrapper">                        <span style="color: #008c00;">12</span><span style="color: #808030;">,</span> <span style="color: #008c00;">11</span><span style="color: #808030;">,</span> <span style="color: #008c00;">10</span><span style="color: #808030;">,</span> <span style="color: #008c00;">9</span><span style="color: #808030;">,</span> <span style="color: #008c00;">8</span><span style="color: #808030;">,</span></span>
<span class="line_wrapper">                        <span style="color: #008c00;">7</span><span style="color: #808030;">,</span> <span style="color: #008c00;">6</span><span style="color: #808030;">,</span> <span style="color: #008c00;">5</span><span style="color: #808030;">,</span> <span style="color: #008c00;">4</span><span style="color: #808030;">,</span> <span style="color: #008c00;">3</span><span style="color: #808030;">,</span> <span style="color: #008c00;">2</span><span style="color: #808030;">,</span> <span style="color: #008c00;">1</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>

<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">int</span> stride <span style="color: #808030;">=</span> <span style="color: #008c00;">16</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span>start <span style="color: #808030;">+</span> <span style="color: #808030;">(</span>stride <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">)</span> <span style="color: #808030;">&lt;</span> end<span style="color: #808030;">)</span></span>
<span class="line_wrapper">    <span style="color: #800080;">{</span></span>
<span class="line_wrapper">        Vector128<span style="color: #808030;">&lt;</span><span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">&gt;</span> data <span style="color: #808030;">=</span> AdvSimd<span style="color: #808030;">.</span>LoadVector128<span style="color: #808030;">(</span><span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">*</span><span style="color: #808030;">)</span>start<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        Vector128<span style="color: #808030;">&lt;</span><span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">&gt;</span> lowpart </span>
<span class="line_wrapper">           <span style="color: #808030;">=</span> AdvSimd<span style="color: #808030;">.</span>Arm64<span style="color: #808030;">.</span>VectorTableLookup<span style="color: #808030;">(</span>low_nibble_mask<span style="color: #808030;">,</span> data &amp; v0f<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        Vector128<span style="color: #808030;">&lt;</span><span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">&gt;</span> matchesones <span style="color: #808030;">=</span> AdvSimd<span style="color: #808030;">.</span>CompareEqual<span style="color: #808030;">(</span>lowpart<span style="color: #808030;">,</span> </span>
<span class="line_wrapper">                                            data<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>matchesones <span style="color: #808030;">!</span><span style="color: #808030;">=</span> Vector128<span style="color: #808030;">&lt;</span><span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">&gt;</span><span style="color: #808030;">.</span>Zero<span style="color: #808030;">)</span></span>
<span class="line_wrapper">        <span style="color: #800080;">{</span></span>
<span class="line_wrapper">            Vector128<span style="color: #808030;">&lt;</span><span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">&gt;</span> matches <span style="color: #808030;">=</span> AdvSimd<span style="color: #808030;">.</span>And<span style="color: #808030;">(</span>bit_mask<span style="color: #808030;">,</span> </span>
<span class="line_wrapper">                                          matchesones<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">            <span style="color: #800000; font-weight: bold;">int</span> m <span style="color: #808030;">=</span> AdvSimd<span style="color: #808030;">.</span>Arm64<span style="color: #808030;">.</span>MaxAcross<span style="color: #808030;">(</span>matches<span style="color: #808030;">)</span><span style="color: #808030;">.</span>ToScalar<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">            start <span style="color: #808030;">+</span><span style="color: #808030;">=</span> <span style="color: #008c00;">16</span> <span style="color: #808030;">-</span> m<span style="color: #800080;">;</span></span>
<span class="line_wrapper">            <span style="color: #800000; font-weight: bold;">return</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        <span style="color: #800080;">}</span></span>
<span class="line_wrapper">        start <span style="color: #808030;">+</span><span style="color: #808030;">=</span> stride<span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>


<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span>start <span style="color: #808030;">&lt;</span> end<span style="color: #808030;">)</span></span>
<span class="line_wrapper">    <span style="color: #800080;">{</span></span>
<span class="line_wrapper">        <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span><span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #800000;">'</span><span style="color: #0000e6;">&lt;</span><span style="color: #800000;">'</span> || <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #800000;">'</span><span style="color: #0000e6;">&amp;</span><span style="color: #800000;">'</span> || <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> '\r' </span>
<span class="line_wrapper">                || <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #800000;">'</span><span style="color: #0f69ff;">\0</span><span style="color: #800000;">'</span><span style="color: #808030;">)</span></span>
<span class="line_wrapper">        <span style="color: #800080;">{</span></span>
<span class="line_wrapper">            <span style="color: #800000; font-weight: bold;">return</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        <span style="color: #800080;">}</span></span>
<span class="line_wrapper">        start<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>The function takes two pointers (ref byte* start and byte* end) that mark the beginning and end of the byte array.  The main loop continues  as long as start is at least 16 bytes away from end. This ensures there&#8217;s enough data for vectorized operations. We load in the variable &#8216;data&#8217; 16 bytes from the memory pointed to by start. We use a vectorized lookup table and a comparison to quickly identify the target characters.The code checks if any element in matchesones is not zero. If there&#8217;s a match, then we locate the first one (out of 16 characters), we advance start and return. If no match is found, we advance by 16 characters and repeat. We conclude with a fallback look that processes the leftover data (less than 16 bytes).</p>
<p>As an optimization, it is helpful to use a local variable for the reference to the first pointer. Doing so improves the perfomance substantially: C# is not happy when we repeatedly modify a reference. Thus, at the start of the function, you may set <tt>byte* mystart = start</tt>, use <tt>mystart</tt> throughout, and then, just before a return, you set <tt> start = mystart</tt>.</p>
<p>The .NET runtime library has also a fast SearchValues class to help search characters.</p>
<pre class="code_syntax" style="font-size: 0.8em; color: #000000; background: #ffffff;"><span class="line_wrapper">SearchValues<span style="color: #808030;">&lt;</span><span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">&gt;</span> searchValues <span style="color: #808030;">=</span> SearchValues<span style="color: #808030;">.</span>Create<span style="color: #808030;">(</span></span>
<span class="line_wrapper">   <span style="color: #800000; font-weight: bold;">stackalloc</span> <span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">[</span><span style="color: #808030;">]</span> <span style="color: #800080;">{</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">13</span><span style="color: #808030;">,</span> <span style="color: #008c00;">38</span><span style="color: #808030;">,</span> <span style="color: #008c00;">60</span> <span style="color: #800080;">}</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>

<span class="line_wrapper">ReadOnlySpan<span style="color: #808030;">&lt;</span><span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">&gt;</span> data <span style="color: #808030;">=</span> allLinesUtf8<span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span><span style="color: #808030;">!</span>data<span style="color: #808030;">.</span>IsEmpty<span style="color: #808030;">)</span></span>
<span class="line_wrapper"><span style="color: #800080;">{</span></span>
<span class="line_wrapper">          <span style="color: #800000; font-weight: bold;">int</span> first <span style="color: #808030;">=</span> data<span style="color: #808030;">.</span>IndexOfAny<span style="color: #808030;">(</span>searchValues<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">          data <span style="color: #808030;">=</span> data<span style="color: #808030;">.</span>Slice<span style="color: #808030;">(</span>first <span style="color: #808030;">&gt;</span><span style="color: #808030;">=</span> <span style="color: #008c00;">0</span> ? first <span style="color: #808030;">+</span> <span style="color: #008c00;">1</span> <span style="color: #808030;">:</span> <span style="color: #008c00;">1</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>
</pre>
<p><a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/tree/master/2024/07/05">I wrote a benchmark (in C#) that you can run if you have an ARM-based processor</a>.</p>
<table>
<tbody>
<tr>
<td>Conventional</td>
<td>1.4 GB/s</td>
</tr>
<tr>
<td>SearchValues</td>
<td>4.2 GB/s</td>
</tr>
<tr>
<td>SIMD (ARM NEON)</td>
<td>6.3 GB/s</td>
</tr>
</tbody>
</table>
<p>Incredibly, the SIMD-based function is over 4 times faster than the conventional function in these tests, and the accelerated C# function about 15% slower than  the C++ version. The non-SIMD C# version is also slightly slower than the C++ version.</p>
<div>
<div>
<p>Harold Aptroot provided support for x64 processor (up to AVX2) so I extended my benchmark to an Intel Ice Lake system:</p>
<table>
<tbody>
<tr>
<td>Conventional</td>
<td>1.0 GB/s</td>
</tr>
<tr>
<td>SearchValues</td>
<td>3.8 GB/s</td>
</tr>
<tr>
<td>SIMD (x64 AVX2)</td>
<td>7.6 GB/s</td>
</tr>
</tbody>
</table>
<p>This time, the SIMD version is over 7 times faster than the scalar. In fact, it matches the performance numbers that I get with C/C++.</p>
<p>It is also important for performance to write the code in such a way that the C# compiler tends to inline the scanning function, since it is called repeatedly. Initially, I had written the benchmark with some abstraction, using a delegate function, but it limited the best possible speed.</p>
</div>
</div>
<p>In other words, .NET/C# allows you to write fast code using SIMD instructions. It may be well worth the effort.</p>
<p><strong>Further reading</strong>: <a href="https://github.com/dotnet/runtime/pull/106900">Miha Zupan opened a pull request</a> in the Microsoft .NET runtime to improve the performance of SearchValues in cases like the one I considered.</p>
<p><strong>Suggested reading</strong>. I have a <a href="https://lemire.me/blog/2024/07/20/scan-html-even-faster-with-simd-instructions-c-and-c/">follow-up blog</a> post where I explain how we can go much faster (29 GB/s).</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/07/05/scan-html-faster-with-simd-instructions-net-c-edition/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
		<item>
		<title>How much memory does a call to &#8216;malloc&#8217;  allocate?</title>
		<link>https://lemire.me/blog/2024/06/27/how-much-memory-does-a-call-to-malloc-allocates/</link>
					<comments>https://lemire.me/blog/2024/06/27/how-much-memory-does-a-call-to-malloc-allocates/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Thu, 27 Jun 2024 20:41:51 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21423</guid>

					<description><![CDATA[In C, we allocate memory on the heap using the malloc function. Other programming languages like C++ or zig (e.g., std.heap.c_allocator) may call on malloc underneath so it is important to understand how malloc works. Furthermore, the same concepts apply broadly to other memory allocators. In theory, you could allocate just one byte like so: &#8230; <a href="https://lemire.me/blog/2024/06/27/how-much-memory-does-a-call-to-malloc-allocates/" class="more-link">Continue reading <span class="screen-reader-text">How much memory does a call to &#8216;malloc&#8217;  allocate?</span></a>]]></description>
										<content:encoded><![CDATA[<p>In C, we allocate memory on the heap using the <tt>malloc</tt> function. Other programming languages like C++ or zig (e.g., <tt>std.heap.c_allocator</tt>) may call on <tt>malloc</tt> underneath so it is important to understand how <tt>malloc</tt> works. Furthermore, the same concepts apply broadly to other memory allocators.</p>
<p>In theory, you could allocate just one byte like so:</p>
<pre><span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span> buffer <span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">char</span><span style="color: #808030;">*</span><span style="color: #808030;">)</span> malloc<span style="color: #808030;">(</span><span style="color: #008c00;">1</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>
</pre>
<p>How much memory does this actually allocate?</p>
<p>On modern systems, the request allocates virtual memory which may or may not be actual (physical) memory. On many systems (e.g., Linux), the physical memory tends to be allocated lazily, as late as possible. Other systems such as Windows are more eager to allocate physical memory. It is also common and easy to provide your own memory allocators, so the behavior varies quite a bit.</p>
<p>But how much virtual memory does my call to <tt>malloc(1)</tt> typically?</p>
<p>There is likely some fixed overhead per allocation: you can expect 8 bytes of metadata per allocation although it could be less or more depending on the allocator. You cannot use this overhead in your own program: it is consumed by the system to keep track of the memory allocations. Even if you have a highly efficient allocator with little overhead per allocation, the pointer itself must typically be tracked and,  on a 64-bit system, that represents 8 bytes of data. </p>
<p>If you asked for 1 bytes, you are probably getting a large chunk of usable memory: maybe between 16 bytes and 24 bytes. Indeed, most memory allocations are aligned (rounded up) so that the address is divisible by <tt>max_align_t</tt> (typically 16 bytes) and there is a minimum size that you may get. And, indeed, the C language has a function called <tt>realloc</tt> which can be used to extend a memory allocation, often for free because the memory is already available.</p>
<p>You can ask how much memory is available. Under Linux, you can use the <tt>malloc_usable_size</tt> while under FreeBSD and macOS, you can use <tt>malloc_size</tt>. So I can write a small programs that asks how much (virtual) memory was actually granted given a request. For one byte, my macOS laptop gives out 16 bytes while my x64 Linux server seemingly gives 24 bytes.  If I plot the memory actually granted versus the memory requested, you see a staircase where, on average, you get 8 extra bytes of memory. That is to be expected if the pointer returned must by at an address divisible by 16 (<tt>max_align_t</tt>). Overall, you should avoid broad generalizations about how Linux or macOS work or compare, and simply keep in mind the broad picture. </p>
<p>What do we conclude? You probably should avoid allocating on the heap tiny blocks of memory (i.e., smaller than 16 bytes). Furthermore, you may not want to optimize the allocation size down to a few bytes since it gets rounded up in any case. Finally, you should make use of <tt>realloc</tt> if you can as you can often extend a memory region, at least by a few bytes, for free. </p>
<p><a href="http://lemire.me/blog/wp-content/uploads/2024/06/memory_sizes_comparison.png"><img decoding="async" src="http://lemire.me/blog/wp-content/uploads/2024/06/memory_sizes_comparison-1024x576.png" alt="" width="660" height="371" class="alignnone size-large wp-image-21424" srcset="https://lemire.me/blog/wp-content/uploads/2024/06/memory_sizes_comparison-1024x576.png 1024w, https://lemire.me/blog/wp-content/uploads/2024/06/memory_sizes_comparison-300x169.png 300w, https://lemire.me/blog/wp-content/uploads/2024/06/memory_sizes_comparison-768x432.png 768w, https://lemire.me/blog/wp-content/uploads/2024/06/memory_sizes_comparison-1536x864.png 1536w, https://lemire.me/blog/wp-content/uploads/2024/06/memory_sizes_comparison.png 1920w" sizes="(max-width: 660px) 100vw, 660px" /></a></p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/06/27/how-much-memory-does-a-call-to-malloc-allocates/feed/</wfw:commentRss>
			<slash:comments>7</slash:comments>
		
		
			</item>
		<item>
		<title>Performance tip: avoid unnecessary copies</title>
		<link>https://lemire.me/blog/2024/06/22/performance-tip-avoid-unnecessary-copies/</link>
					<comments>https://lemire.me/blog/2024/06/22/performance-tip-avoid-unnecessary-copies/#respond</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Sat, 22 Jun 2024 19:14:18 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21410</guid>

					<description><![CDATA[Copying data in software is cheap, but it is not at all free. As you start optimizing your code, you might find that copies become a performance bottleneck. Let me be clear that copies really are cheap. It is often more performant to copy that data than to track the same memory across different threads. &#8230; <a href="https://lemire.me/blog/2024/06/22/performance-tip-avoid-unnecessary-copies/" class="more-link">Continue reading <span class="screen-reader-text">Performance tip: avoid unnecessary copies</span></a>]]></description>
										<content:encoded><![CDATA[<p>Copying data in software is cheap, but it is not at all free. As you start optimizing your code, you might find that copies become a performance bottleneck.</p>
<p>Let me be clear that copies really are cheap. It is often more performant to copy that data than to track the same memory across different threads. The case I am interested in is when copies turn a trivial operation into one that is relatively expensive.</p>
<p>Recently, the fast JavaScript runtime (Bun) optimized its base64 decoding routines.Base64 is a technique used to represent binary data, like images or files, as ASCII text. It is ubiquitous on the Internet (email formats, XML, JSON, HTML and so forth). In Node.js and in Bun, you can decode a base64 string <tt>Buffer.from(s, "base64")</tt>.</p>
<p>Importantly, when decoding base64 strings, you can be almost certain that you are dealing with a simple ASCII string. And systems like Node.js and Bun have optimized string representations for the ASCII case, using one byte per character.</p>
<p>We had optimized base64 decoding in Node.js some time ago (credit to Yagiz Nizipli for his work)&#8230; but I was surprised to learn that Bun was able to beat Node.js by a factor of three. Because both Node.js and Bun use the same base64 decoding, I was confused.</p>
<p>I mistakenly thought, based on quick profiling, that Node.js would copy the base64 data from an ASCII format (one byte per character) to a UTF-16 format (two bytes per character) despite our best attempt at avoiding copies. <a href="https://x.com/lemire/status/1803598132334436415">You can review my technically incorrect analysis on X</a>. What I like is the second half of my analysis:</p>
<blockquote><p>The story illustrates why our software is slower than it should be. We have layers of abstractions to fight against. Sometimes you win, sometimes you lose.</p>
<p>These layers are there for a reason, but they are not free.</p>
<p>To make matters worse&#8230; these abstraction layers often thicken over time&#8230; and the friction goes up.</p>
<p>To be clear, I do not claim that the Node.js code is optimal. In fact, I know it can be better. But it is not trivial to make it go fast.</p>
<p>I sometimes hear people say&#8230; &#8220;well, it is C++ and C++ is hard&#8221;. No. The C++ part is easy relatively speaking. The difficulty is at a higher level. It is not a matter of syntax. It is a matter of architecture.</p></blockquote>
<p>I say that I was technically incorrect. Why was I incorrect?</p>
<p>It turns out that the copy was not happening as part of base64 decoding but in a completely separate function. There is an innocuous function in Node.js called  <tt>StringBytes::Size</tt> which basically must provide an upper on the memory needed by the Buffer.from function. I went back in time and looked at how this function looked in the original Node.js (0.10):</p>
<pre><span style="color: #800000; font-weight: bold;">case</span> BASE64<span style="color: #800080;">:</span> <span style="color: #800080;">{</span>
<span style="color: #797997;">  String</span><span style="color: #800080;">:</span><span style="color: #800080;">:</span>AsciiValue value<span style="color: #808030;">(</span>str<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
  data_size <span style="color: #808030;">=</span> base64_decoded_size<span style="color: #808030;">(</span><span style="color: #808030;">*</span>value<span style="color: #808030;">,</span> value<span style="color: #808030;">.</span><span style="color: #800000; font-weight: bold;">length</span><span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<span style="color: #800000; font-weight: bold;">  break</span><span style="color: #800080;">;</span>
<span style="color: #800080;">}</span>
<!--Created using ToHTML.com on 2024-06-22 18:15:32 UTC -->
</pre>
<p>Can you see what it does? It takes the string it receives, it makes a copy, and from the copy, it computes how many bytes the decoded version will need.</p>
<p>That original code tried to make an &#8216;ASCII&#8217; copy so I presume it created a copy using one byte per character. It still was a shame, but not terribly so.</p>
<p>But very soon after (Node.js 0.11), it was changed to a version that converted to 16-byte strings, for increased safety:</p>
<pre><span style="color: #800000; font-weight: bold;">case</span> BASE64<span style="color: #800080;">:</span> <span style="color: #800080;">{</span>
<span style="color: #797997;">  String</span><span style="color: #800080;">:</span><span style="color: #800080;">:</span>Value value<span style="color: #808030;">(</span>str<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
  data_size <span style="color: #808030;">=</span> base64_decoded_size<span style="color: #808030;">(</span><span style="color: #808030;">*</span>value<span style="color: #808030;">,</span> value<span style="color: #808030;">.</span><span style="color: #800000; font-weight: bold;">length</span><span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<span style="color: #800000; font-weight: bold;">  break</span><span style="color: #800080;">;</span>
<span style="color: #800080;">}</span>
<!--Created using ToHTML.com on 2024-06-22 18:22:28 UTC -->
</pre>
<p>This new version is potentially much more expensive because it may copy an ASCII string to a temporary UTF-16 (2-byte per character) string. It uses more memory, but it is also a more complicated function. Internally, the JavaScript engine implements this with the C++ template <tt>std::copy_n</tt>. The generated code is probably fine, but it is hardly &#8220;down to the metal&#8221;.</p>
<p>As long as everything was not too optimized, it ran just fine&#8230; but as you optimized the base64 decoding, you found that this simple length computation took up more than half of the running time.</p>
<p>So, in concrete terms, what are we talking about as far as performance goes? Let me consider a JavaScript benchmark:</p>
<pre><span style="color: #800000; font-weight: bold;">import</span> <span style="color: #800080;">{</span> bench<span style="color: #808030;">,</span> run <span style="color: #800080;">}</span> from <span style="color: #800000;">"</span><span style="color: #0000e6;">mitata</span><span style="color: #800000;">"</span><span style="color: #800080;">;</span>
<span style="color: #800000; font-weight: bold;">function</span> makeBenchmark<span style="color: #808030;">(</span>size<span style="color: #808030;">,</span> isToString<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>
<span style="color: #800000; font-weight: bold;">  const</span> base64Input <span style="color: #808030;">=</span> Buffer<span style="color: #808030;">.</span>alloc<span style="color: #808030;">(</span>size<span style="color: #808030;">,</span> <span style="color: #800000;">"</span><span style="color: #0000e6;">latin1</span><span style="color: #800000;">"</span><span style="color: #808030;">)</span><span style="color: #808030;">.</span><span style="color: #800000; font-weight: bold;">toString</span><span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">base64</span><span style="color: #800000;">"</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<span style="color: #800000; font-weight: bold;">  const</span> base64From <span style="color: #808030;">=</span> Buffer<span style="color: #808030;">.</span>from <span style="color: #808030;">(</span>base64Input<span style="color: #808030;">,</span> <span style="color: #800000;">"</span><span style="color: #0000e6;">base64</span><span style="color: #800000;">"</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>
  bench<span style="color: #808030;">(</span><span style="color: #800000;">`</span><span style="color: #0000e6;">Buffer. from(</span><span style="color: #800000;">${</span><span style="color: #797997;">size</span><span style="color: #800000;">}</span><span style="color: #0000e6;"> bytes, 'base64')</span><span style="color: #800000;">`</span><span style="color: #808030;">,</span> <span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #808030;">=</span><span style="color: #808030;">&gt;</span> <span style="color: #800080;">{</span>
   Buffer<span style="color: #808030;">.</span>from<span style="color: #808030;">(</span>base64Input<span style="color: #808030;">,</span> <span style="color: #800000;">"</span><span style="color: #0000e6;">base64</span><span style="color: #800000;">"</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<span style="color: #800080;">  }</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<span style="color: #800080;">}</span>
<span style="color: #808030;">[</span><span style="color: #008c00;">1024</span> <span style="color: #808030;">*</span> <span style="color: #008c00;">1024</span> <span style="color: #808030;">*</span> <span style="color: #008c00;">8</span><span style="color: #808030;">]</span><span style="color: #808030;">.</span> <span style="color: #800000; font-weight: bold;">forEach</span> <span style="color: #808030;">(</span>s <span style="color: #808030;">=</span><span style="color: #808030;">&gt;</span> makeBenchmark<span style="color: #808030;">(</span>s<span style="color: #808030;">,</span> <span style="color: #0f4d75;">false</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span> <span style="color: #800080;">;</span>
await run<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<!--Created using ToHTML.com on 2024-06-22 18:53:22 UTC -->
</pre>
<p>I install the latest version of Bun (<tt>bun upgrade --canary</tt>). I compare Node.js 22 with a <a href="https://github.com/nodejs/node/pull/53550">patched version</a>. I use my Apple MacBook for testing (ARM-based M2 processor). You can see that by simply avoiding the unnecessary copy, I boosted the base64 decoding from 2.5 GB/s to 6.0 GB/s. Not bad for removing a single line of code.</p>
<table>
<tbody>
<tr>
<th>function</th>
<th>time</th>
<th>speed</th>
</tr>
<tr>
<td>Node.js 18</td>
<td>6&#8217;400 µs</td>
<td>1.3 GB/s</td>
</tr>
<tr>
<td>Node.js 22</td>
<td>3&#8217;300 µs</td>
<td>2.5 GB/s</td>
</tr>
<tr>
<td>Node.js with fix</td>
<td>1&#8217;200 µs</td>
<td>7.0 GB/s</td>
</tr>
<tr>
<td>Bun</td>
<td>950 µs</td>
<td>8.8 GB/s</td>
</tr>
</tbody>
</table>
<p>Sometimes people observe at this point that the performance of Node.js 18 was already fine: 1.3 GB/s is plenty fast. It might be fast enough, but you must take into account that we are measuring a single operation that is likely part of a string of operations. In practice, you do not just ingest base64 data. You do some work before and some work after. Maybe you decoded a JPEG image that was stored in base64, and next you might need to decode the JPEG and push it to the screen. And so forth. To have an overall fast system, every component should be fast.</p>
<p>You may observe that Bun is still faster than Node.js, even after I claim to have patched this issue. But there are likely other architecture issues that Bun does not have. Remember that both Node.js and Bun are using the same library in this instance: <a href="https://github.com/simdutf/simdutf">simdutf</a>.</p>
<p>It is maybe interesting to review Bun&#8217;s code (in Zig):</p>
<pre style="font-size: 0.8em;"><span style="color: #800000; font-weight: bold;">const</span> outlen <span style="color: #808030;">=</span> bun<span style="color: #808030;">.</span>base64<span style="color: #808030;">.</span>decodeLen<span style="color: #808030;">(</span>slice<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<span style="color: #800000; font-weight: bold;">const</span> to <span style="color: #808030;">=</span> allocator<span style="color: #808030;">.</span>alloc<span style="color: #808030;">(</span>u8<span style="color: #808030;">,</span> outlen<span style="color: #808030;">)</span> catch <span style="color: #800000; font-weight: bold;">return</span> <span style="color: #808030;">&amp;</span><span style="color: #808030;">[</span>_<span style="color: #808030;">]</span>u8<span style="color: #800080;">{</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span>
<span style="color: #800000; font-weight: bold;">const</span> wrote <span style="color: #808030;">=</span> bun<span style="color: #808030;">.</span>base64<span style="color: #808030;">.</span>decode<span style="color: #808030;">(</span>to<span style="color: #808030;">[</span><span style="color: #008c00;">0</span><span style="color: #808030;">.</span><span style="color: #808030;">.</span>outlen<span style="color: #808030;">]</span><span style="color: #808030;">,</span> slice<span style="color: #808030;">)</span><span style="color: #808030;">.</span>count<span style="color: #800080;">;</span>
<span style="color: #800000; font-weight: bold;">return</span> to<span style="color: #808030;">[</span><span style="color: #008c00;">0</span><span style="color: #808030;">.</span><span style="color: #808030;">.</span>wrote<span style="color: #808030;">]</span><span style="color: #800080;">;</span>
<!--Created using ToHTML.com on 2024-06-22 19:33:06 UTC -->
</pre>
<p>It is far simpler than the equivalent in Node where memory is allocated in one function, and then the resulting buffer is passed to another function where the decoding finally happens. It is likely that Bun is faster because it has a simpler architecture where it is easier to see where the unnecessary work happens.</p>
<p><strong>Update</strong>. After the publication of this blog post,<br />
<a href="https://chromium-review.googlesource.com/c/v8/v8/+/5667299">Leszek Swirski added v8::String::ValueView to v8</a> which should reduce the need for copies.</p>
<p><strong>Update 2</strong>. <a href="https://github.com/nodejs/node/pull/54876">I contributed a fix to Node.js for this issue</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/06/22/performance-tip-avoid-unnecessary-copies/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Validating gigabytes of Unicode strings per second&#8230; in C#?</title>
		<link>https://lemire.me/blog/2024/06/20/validating-gigabytes-of-unicode-strings-per-second-in-c/</link>
					<comments>https://lemire.me/blog/2024/06/20/validating-gigabytes-of-unicode-strings-per-second-in-c/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Thu, 20 Jun 2024 17:25:02 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21400</guid>

					<description><![CDATA[We have been working on a fast library to validate and transcode Unicode and other formats such as base64 in C++: simdutf. We wondered: could we achieve the same good results in C#? Microsoft’s .NET framework has made great strides in leveraging advanced instructions. For instance, if your processor supports AVX-512, you can instantiate 512-bit &#8230; <a href="https://lemire.me/blog/2024/06/20/validating-gigabytes-of-unicode-strings-per-second-in-c/" class="more-link">Continue reading <span class="screen-reader-text">Validating gigabytes of Unicode strings per second&#8230; in C#?</span></a>]]></description>
										<content:encoded><![CDATA[<p>We have been working on a fast library to validate and transcode Unicode and other formats such as base64 in C++: <a href="https://github.com/simdutf/simdutf">simdutf</a>. We wondered: could we achieve the same good results in C#?</p>
<p>Microsoft’s .NET framework has made great strides in leveraging advanced instructions. For instance, if your processor supports AVX-512, you can instantiate 512-bit registers right in C#! The standard .NET runtime library effectively utilizes these features, demonstrating that they practice what they preach.</p>
<p>Most strings on the Internet are Unicode strings stored in UTF-8. When you ingest such strings (from disk or from the network), you need to validate them. To test the waters, we set our eyes on UTF-8 validation. With John Keiser, <a href="https://arxiv.org/abs/2010.03090">I helped designed a fast UTF-8 validation algorithm designed for modern-day CPUs</a>. We call the algorithm &#8216;lookup&#8217;. It may require less than one instruction per byte to validate even challenging input. The lookup validation algorithm is part of Oracle GraalVM, Google <a href="https://fuchsia-review.googlesource.com/c/fuchsia/+/695830">Fuchsia</a>, the Node.js and Bun JavaScript runtimes and so forth.</p>
<p>The .NET library has its own fast UTF-8 validation function: <tt>Utf8Utility.GetPointerToFirstInvalidByte</tt>. It is highly optimized. As the name implies, it finds the location of the first byte where an error might occur. It also computes some parameters from which you can tell how the input could be transcoded. The function is an internal function, but we can expose it by copying and pasting it.</p>
<p>Could we beat the .NET runtime, at least some of the time? It seems that we can!</p>
<p>Maybe you want to know what our code looks like? Here is a simplified example where we load 64 bytes, check whether they are ASCII.</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">Vector512<span style="color: #808030;">&lt;</span><span style="color: #800000; font-weight: bold;">byte</span><span style="color: #808030;">&gt;</span> currentBlock <span style="color: #808030;">=</span> Avx512F<span style="color: #808030;">.</span>LoadVector512<span style="color: #808030;">(</span>pInputBuffer <span style="color: #808030;">+</span> processedLength<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">ulong</span> mask <span style="color: #808030;">=</span> currentBlock<span style="color: #808030;">.</span>ExtractMostSignificantBits<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>mask <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #696969;">// got 64 ASCII bytes</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span> <span style="color: #800000; font-weight: bold;">else</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #696969;">// oh oh, got non-ASCII bytes</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>Of course, the whole algorithm is more complicated, but not that much more&#8230; It is maybe 30 lines of code. We implement various versions of the algorithm, one for ARM processors, one for older x64 processors, and so forth.</p>
<p>For benchmarking, we use valid strings. The first one we check is twitter.json, a JSON file that is mostly ASCII with some non-trivial Unicode content within strings. We also use various synthetic strings representative of various languages.</p>
<p>On an Intel Ice Lake system, our validation function is up to 13 times faster than the standard library. On twitter.json, we are 2.4 times faster.</p>
<table>
<thead>
<tr>
<th style="text-align: left;">data set</th>
<th style="text-align: left;">SimdUnicode AVX-512 (GB/s)</th>
<th style="text-align: left;">.NET speed (GB/s)</th>
<th style="text-align: left;">speed up</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">Twitter.json</td>
<td style="text-align: left;">29</td>
<td style="text-align: left;">12</td>
<td style="text-align: left;">2.4 x</td>
</tr>
<tr>
<td style="text-align: left;">Arabic-Lipsum</td>
<td style="text-align: left;">12</td>
<td style="text-align: left;">2.3</td>
<td style="text-align: left;">5.2 x</td>
</tr>
<tr>
<td style="text-align: left;">Chinese-Lipsum</td>
<td style="text-align: left;">12</td>
<td style="text-align: left;">3.9</td>
<td style="text-align: left;">3.0 x</td>
</tr>
<tr>
<td style="text-align: left;">Emoji-Lipsum</td>
<td style="text-align: left;">12</td>
<td style="text-align: left;">0.9</td>
<td style="text-align: left;">13 x</td>
</tr>
<tr>
<td style="text-align: left;">Hebrew-Lipsum</td>
<td style="text-align: left;">12</td>
<td style="text-align: left;">2.3</td>
<td style="text-align: left;">5.2 x</td>
</tr>
<tr>
<td style="text-align: left;">Hindi-Lipsum</td>
<td style="text-align: left;">12</td>
<td style="text-align: left;">2.1</td>
<td style="text-align: left;">5.7 x</td>
</tr>
<tr>
<td style="text-align: left;">Japanese-Lipsum</td>
<td style="text-align: left;">10</td>
<td style="text-align: left;">3.5</td>
<td style="text-align: left;">2.9 x</td>
</tr>
<tr>
<td style="text-align: left;">Korean-Lipsum</td>
<td style="text-align: left;">10</td>
<td style="text-align: left;">1.3</td>
<td style="text-align: left;">7.7 x</td>
</tr>
<tr>
<td style="text-align: left;">Latin-Lipsum</td>
<td style="text-align: left;">76</td>
<td style="text-align: left;">76</td>
<td style="text-align: left;">&#8212;</td>
</tr>
<tr>
<td style="text-align: left;">Russian-Lipsum</td>
<td style="text-align: left;">12</td>
<td style="text-align: left;">1.2</td>
<td style="text-align: left;">10 x</td>
</tr>
</tbody>
</table>
<p>On an Apple M2 system, our validation function is 1.5 to four times faster than the standard library.</p>
<table>
<thead>
<tr>
<th style="text-align: left;">data set</th>
<th style="text-align: left;">SimdUnicode speed (GB/s)</th>
<th style="text-align: left;">.NET speed (GB/s)</th>
<th style="text-align: left;">speed up</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">Twitter.json</td>
<td style="text-align: left;">25</td>
<td style="text-align: left;">14</td>
<td style="text-align: left;">1.8 x</td>
</tr>
<tr>
<td style="text-align: left;">Arabic-Lipsum</td>
<td style="text-align: left;">7.4</td>
<td style="text-align: left;">3.5</td>
<td style="text-align: left;">2.1 x</td>
</tr>
<tr>
<td style="text-align: left;">Chinese-Lipsum</td>
<td style="text-align: left;">7.4</td>
<td style="text-align: left;">4.8</td>
<td style="text-align: left;">1.5 x</td>
</tr>
<tr>
<td style="text-align: left;">Emoji-Lipsum</td>
<td style="text-align: left;">7.4</td>
<td style="text-align: left;">2.5</td>
<td style="text-align: left;">3.0 x</td>
</tr>
<tr>
<td style="text-align: left;">Hebrew-Lipsum</td>
<td style="text-align: left;">7.4</td>
<td style="text-align: left;">3.5</td>
<td style="text-align: left;">2.1 x</td>
</tr>
<tr>
<td style="text-align: left;">Hindi-Lipsum</td>
<td style="text-align: left;">7.3</td>
<td style="text-align: left;">3.0</td>
<td style="text-align: left;">2.4 x</td>
</tr>
<tr>
<td style="text-align: left;">Japanese-Lipsum</td>
<td style="text-align: left;">7.3</td>
<td style="text-align: left;">4.6</td>
<td style="text-align: left;">1.6 x</td>
</tr>
<tr>
<td style="text-align: left;">Korean-Lipsum</td>
<td style="text-align: left;">7.4</td>
<td style="text-align: left;">1.8</td>
<td style="text-align: left;">4.1 x</td>
</tr>
<tr>
<td style="text-align: left;">Latin-Lipsum</td>
<td style="text-align: left;">87</td>
<td style="text-align: left;">38</td>
<td style="text-align: left;">2.3 x</td>
</tr>
<tr>
<td style="text-align: left;">Russian-Lipsum</td>
<td style="text-align: left;">7.4</td>
<td style="text-align: left;">2.7</td>
<td style="text-align: left;">2.7 x</td>
</tr>
</tbody>
</table>
<p>Observe how the standard library provides a function that is already quite fast: it can run at gigabytes per second. We are several times faster, but evidently, C# makes it possible to write highly optimized functions.</p>
<p>You can run your own benchmarks by grabbing our code from <a href="https://github.com/simdutf/SimdUnicode/">https://github.com/simdutf/SimdUnicode/</a>.</p>
<p>It is a pleasure doing this performance-oriented work in C#. It is definitively one of my favorite programming languages right now.</p>
<p>One difficulty with ARM processors is that they have varied SIMD/NEON performance. For example, Neoverse N1 processors, not to be confused with the Neoverse V1 design used by AWS Graviton 3, have weak SIMD performance. Of course, one can pick and choose which approach is best and it is not necessary to apply SimdUnicode is all cases. I expect good performance on recent ARM-based Qualcomm processors.</p>
<p>The SimdUnicode library is joint work with Nick Nuon.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/06/20/validating-gigabytes-of-unicode-strings-per-second-in-c/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>Rolling your own fast matrix multiplication: loop order and vectorization</title>
		<link>https://lemire.me/blog/2024/06/13/rolling-your-own-fast-matrix-multiplication-loop-order-and-vectorization/</link>
					<comments>https://lemire.me/blog/2024/06/13/rolling-your-own-fast-matrix-multiplication-loop-order-and-vectorization/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Thu, 13 Jun 2024 21:11:26 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21386</guid>

					<description><![CDATA[If you must multiply matrices, you should use dedicated libraries. However, we sometimes need to roll our own code. In C++, you can quickly write your own Matrix template: template &#60;typename T&#62; struct Matrix { Matrix(size_t rows, size_t cols) : data(new T[rows * cols]), rows(rows), cols(cols) {} T &#38;operator()(size_t i, size_t j) { return data.get()[i &#8230; <a href="https://lemire.me/blog/2024/06/13/rolling-your-own-fast-matrix-multiplication-loop-order-and-vectorization/" class="more-link">Continue reading <span class="screen-reader-text">Rolling your own fast matrix multiplication: loop order and vectorization</span></a>]]></description>
										<content:encoded><![CDATA[<p>If you must multiply matrices, you should use <a href="https://github.com/flame/blislab">dedicated libraries</a>. However, we sometimes need to roll our own code. In C++, you can quickly write your own Matrix template:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">template <span style="color: #808030;">&lt;</span>typename T<span style="color: #808030;">&gt;</span> </span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">struct</span> Matrix <span style="color: #800080;">{</span> Matrix<span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> rows<span style="color: #808030;">,</span> <span style="color: #603000;">size_t</span> cols<span style="color: #808030;">)</span> <span style="color: #800080;">:</span> </span>
<span class="line_wrapper">  data<span style="color: #808030;">(</span>new T<span style="color: #808030;">[</span>rows <span style="color: #808030;">*</span> cols<span style="color: #808030;">]</span><span style="color: #808030;">)</span><span style="color: #808030;">,</span> rows<span style="color: #808030;">(</span>rows<span style="color: #808030;">)</span><span style="color: #808030;">,</span> cols<span style="color: #808030;">(</span>cols<span style="color: #808030;">)</span> <span style="color: #800080;">{</span><span style="color: #800080;">}</span> </span>

<span class="line_wrapper">  T <span style="color: #808030;">&amp;</span>operator<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> i<span style="color: #808030;">,</span> <span style="color: #603000;">size_t</span> j<span style="color: #808030;">)</span> <span style="color: #800080;">{</span> 
<span style="color: #800000; font-weight: bold;">      return</span> data<span style="color: #808030;">.</span>get<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">[</span>i <span style="color: #808030;">*</span> cols <span style="color: #808030;">+</span> j<span style="color: #808030;">]</span><span style="color: #800080;">;</span> 
<span style="color: #800080;">  }</span> </span>
  
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">const</span> T <span style="color: #808030;">&amp;</span>operator<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> i<span style="color: #808030;">,</span> <span style="color: #603000;">size_t</span> j<span style="color: #808030;">)</span> <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800080;">{</span> 
<span style="color: #800000; font-weight: bold;">      return</span> data<span style="color: #808030;">.</span>get<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">[</span>i <span style="color: #808030;">*</span> cols <span style="color: #808030;">+</span> j<span style="color: #808030;">]</span><span style="color: #800080;">;</span> 
<span style="color: #800080;">  }</span></span>

<span class="line_wrapper">  std<span style="color: #800080;">::</span>unique_ptr<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">[</span><span style="color: #808030;">]</span><span style="color: #808030;">&gt;</span> data<span style="color: #800080;">;</span> <span style="color: #603000;">size_t</span> rows<span style="color: #800080;">;</span> <span style="color: #603000;">size_t</span> cols<span style="color: #800080;">;</span> </span>
<span class="line_wrapper"><span style="color: #800080;">}</span><span style="color: #800080;">;
</span></span></pre>
<p>How do you implement a matrix multiplication? A matrix multiplication is a sequence of three loops. If you do not want to get fancy, you have therefore six possibilities:</p>
<pre class="code_syntax" style="color: #000000; background: #ffffff;"><span class="line_wrapper">template <span style="color: #808030;">&lt;</span>typename T<span style="color: #808030;">&gt;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> multiply_ikj<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>a<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">const</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>b<span style="color: #808030;">,</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>c<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&lt;</span> a<span style="color: #808030;">.</span>rows<span style="color: #800080;">;</span> i<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> k <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> k <span style="color: #808030;">&lt;</span> a<span style="color: #808030;">.</span>cols<span style="color: #800080;">;</span> k<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> j <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> j <span style="color: #808030;">&lt;</span> b<span style="color: #808030;">.</span>cols<span style="color: #800080;">;</span> j<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">        c<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> j<span style="color: #808030;">)</span> <span style="color: #808030;">+</span><span style="color: #808030;">=</span> a<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> k<span style="color: #808030;">)</span> <span style="color: #808030;">*</span> b<span style="color: #808030;">(</span>k<span style="color: #808030;">,</span> j<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800080;">}</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>

<span class="line_wrapper">template <span style="color: #808030;">&lt;</span>typename T<span style="color: #808030;">&gt;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> multiply_ijk<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>a<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">const</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>b<span style="color: #808030;">,</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>c<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&lt;</span> a<span style="color: #808030;">.</span>rows<span style="color: #800080;">;</span> i<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> j <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> j <span style="color: #808030;">&lt;</span> b<span style="color: #808030;">.</span>cols<span style="color: #800080;">;</span> j<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> k <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> k <span style="color: #808030;">&lt;</span> a<span style="color: #808030;">.</span>cols<span style="color: #800080;">;</span> k<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">        c<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> j<span style="color: #808030;">)</span> <span style="color: #808030;">+</span><span style="color: #808030;">=</span> a<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> k<span style="color: #808030;">)</span> <span style="color: #808030;">*</span> b<span style="color: #808030;">(</span>k<span style="color: #808030;">,</span> j<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800080;">}</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>

<span class="line_wrapper">template <span style="color: #808030;">&lt;</span>typename T<span style="color: #808030;">&gt;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> multiply_kij<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>a<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">const</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>b<span style="color: #808030;">,</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>c<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> k <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> k <span style="color: #808030;">&lt;</span> a<span style="color: #808030;">.</span>cols<span style="color: #800080;">;</span> k<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&lt;</span> a<span style="color: #808030;">.</span>rows<span style="color: #800080;">;</span> i<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> j <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> j <span style="color: #808030;">&lt;</span> b<span style="color: #808030;">.</span>cols<span style="color: #800080;">;</span> j<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">        c<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> j<span style="color: #808030;">)</span> <span style="color: #808030;">+</span><span style="color: #808030;">=</span> a<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> k<span style="color: #808030;">)</span> <span style="color: #808030;">*</span> b<span style="color: #808030;">(</span>k<span style="color: #808030;">,</span> j<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800080;">}</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>

<span class="line_wrapper">template <span style="color: #808030;">&lt;</span>typename T<span style="color: #808030;">&gt;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> multiply_kji<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>a<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">const</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>b<span style="color: #808030;">,</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>c<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> k <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> k <span style="color: #808030;">&lt;</span> a<span style="color: #808030;">.</span>cols<span style="color: #800080;">;</span> k<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> j <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> j <span style="color: #808030;">&lt;</span> b<span style="color: #808030;">.</span>cols<span style="color: #800080;">;</span> j<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&lt;</span> a<span style="color: #808030;">.</span>rows<span style="color: #800080;">;</span> i<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">        c<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> j<span style="color: #808030;">)</span> <span style="color: #808030;">+</span><span style="color: #808030;">=</span> a<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> k<span style="color: #808030;">)</span> <span style="color: #808030;">*</span> b<span style="color: #808030;">(</span>k<span style="color: #808030;">,</span> j<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800080;">}</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>

<span class="line_wrapper">template <span style="color: #808030;">&lt;</span>typename T<span style="color: #808030;">&gt;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> multiply_jki<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>a<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">const</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>b<span style="color: #808030;">,</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>c<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> j <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> j <span style="color: #808030;">&lt;</span> b<span style="color: #808030;">.</span>cols<span style="color: #800080;">;</span> j<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> k <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> k <span style="color: #808030;">&lt;</span> a<span style="color: #808030;">.</span>cols<span style="color: #800080;">;</span> k<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&lt;</span> a<span style="color: #808030;">.</span>rows<span style="color: #800080;">;</span> i<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">        c<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> j<span style="color: #808030;">)</span> <span style="color: #808030;">+</span><span style="color: #808030;">=</span> a<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> k<span style="color: #808030;">)</span> <span style="color: #808030;">*</span> b<span style="color: #808030;">(</span>k<span style="color: #808030;">,</span> j<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800080;">}</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>

<span class="line_wrapper">template <span style="color: #808030;">&lt;</span>typename T<span style="color: #808030;">&gt;</span></span>
<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> multiply_jik<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>a<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">const</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>b<span style="color: #808030;">,</span> Matrix<span style="color: #808030;">&lt;</span>T<span style="color: #808030;">&gt;</span> <span style="color: #808030;">&amp;</span>c<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> j <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> j <span style="color: #808030;">&lt;</span> b<span style="color: #808030;">.</span>cols<span style="color: #800080;">;</span> j<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&lt;</span> a<span style="color: #808030;">.</span>rows<span style="color: #800080;">;</span> i<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> k <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> k <span style="color: #808030;">&lt;</span> a<span style="color: #808030;">.</span>cols<span style="color: #800080;">;</span> k<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">        c<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> j<span style="color: #808030;">)</span> <span style="color: #808030;">+</span><span style="color: #808030;">=</span> a<span style="color: #808030;">(</span>i<span style="color: #808030;">,</span> k<span style="color: #808030;">)</span> <span style="color: #808030;">*</span> b<span style="color: #808030;">(</span>k<span style="color: #808030;">,</span> j<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800080;">}</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>If you use an optimizing compiler and you tell it to compile specifically for your processor, you should get some fast code, at least in some instances. Which order is best?</p>
<p>The exact result depends on your data type (double, float, int), on the size of the matrices, on your compiler and your hardware. <a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/tree/master/2024/06/13">I wrote a benchmark where I use 100 by 100 matrices containing double values.</a> I use GCC 12 (with full optimization -O3) and an Intel Ice Lake processor. I tell the compiler to optimize for the exact processor I have thus I expect that it will use advanced AVX-512 instructions when possible.</p>
<p>The net result in my experiment is that the best ordering is ikj. The worst ordering is jik.</p>
<p>If you were to compute manually and naively the matrix multiplications, you would need to do 100 times 100 times 100 multiplications, so 1 million multiplications and 1 million additions. Interestingly, the best ordering (ikj) uses roughly  a million of instructions to load the data, do the multiplications, the additions and storing the data.</p>
<table>
<tbody>
<tr>
<td>order</td>
<td>speed</td>
<td>frequency</td>
<td>instructions per cycle</td>
<td>instructions/mult.</td>
</tr>
<tr>
<td>ikj</td>
<td>7240 mult/s</td>
<td>2 GHz</td>
<td>3.3</td>
<td>916k</td>
</tr>
<tr>
<td>ijk</td>
<td>3190 mult/s</td>
<td>2 GHz</td>
<td>2.4</td>
<td>1526k</td>
</tr>
<tr>
<td>kij</td>
<td>3160 mult/s</td>
<td>2 GHz</td>
<td>2.5</td>
<td>1561k</td>
</tr>
<tr>
<td>kji</td>
<td>3090 mult/s</td>
<td>2 GHz</td>
<td>2.4</td>
<td>1519k</td>
</tr>
<tr>
<td>jki</td>
<td>3120 mult/s</td>
<td>3.2 GHz</td>
<td>3.5</td>
<td>3526k</td>
</tr>
<tr>
<td>jik</td>
<td>1280 mult/s</td>
<td>3.2 GHz</td>
<td>1.7</td>
<td>4331k</td>
</tr>
</tbody>
</table>
<p>The resulting assembly shows that for <tt>ikj</tt>, the instruction <tt>vfmadd213pd</tt> is generated by the compiler. There are fancier routines that the compiler could use so the result is likely far from optimal.</p>
<p><strong>Further work</strong>. Justine Tunney <a href="https://x.com/justinetunney/status/1801469044983533803">suggests</a> manually unrolling the outer loops. One might also use an OpenMP to get good parallelism (e.g., <tt>#pragma omp pararallel for collapse(2) if (m*n*k &gt; 300000</tt>)).</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/06/13/rolling-your-own-fast-matrix-multiplication-loop-order-and-vectorization/feed/</wfw:commentRss>
			<slash:comments>10</slash:comments>
		
		
			</item>
		<item>
		<title>Scan HTML faster with SIMD instructions: Chrome edition</title>
		<link>https://lemire.me/blog/2024/06/08/scan-html-faster-with-simd-instructions-chrome-edition/</link>
					<comments>https://lemire.me/blog/2024/06/08/scan-html-faster-with-simd-instructions-chrome-edition/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Sat, 08 Jun 2024 04:55:42 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21382</guid>

					<description><![CDATA[Modern processors have instructions to process several bytes at once. Effectively all processors have the capability of processing 16 bytes at once. These instructions are called SIMD, for single instruction, multiple data. It was once an open question whether these instructions could be useful to accelerate common tasks such as parsing HTML or JSON. However, &#8230; <a href="https://lemire.me/blog/2024/06/08/scan-html-faster-with-simd-instructions-chrome-edition/" class="more-link">Continue reading <span class="screen-reader-text">Scan HTML faster with SIMD instructions: Chrome edition</span></a>]]></description>
										<content:encoded><![CDATA[<p>Modern processors have instructions to process several bytes at once. Effectively all processors have the capability of processing 16 bytes at once. These instructions are called SIMD, for single instruction, multiple data.</p>
<p>It was once an open question whether these instructions could be useful to accelerate common tasks such as parsing HTML or JSON. However, the work on JSON parsing, as <a href="https://github.com/simdjson/simdjson">in the simdjson parser</a>, has shown rather decisively that SIMD instructions could, indeed, be helpful in breaking speed records.</p>
<p>Inspired by such work, the engine under the Google Chrome browser (Chromium) <a href="https://chromium-review.googlesource.com/c/chromium/src/+/5538407">has adopted SIMD parsing of the HTML inputs</a>. It is the result of the excellent work by a Google engineer, Anton Bikineev.</p>
<p>The approach is used to quickly jump to four specific characters: &lt;, &amp;, \r and \0. You can implement something that looks a lot like it using regular C++ code as follows:</p>
<pre class="code_syntax" style="font-size: 0.8em; color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> NaiveAdvanceString<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span><span style="color: #808030;">&amp;</span>start<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>end<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span>start <span style="color: #808030;">&lt;</span> end<span style="color: #800080;">;</span> start<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span><span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'&lt;'</span> <span style="color: #808030;">|</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'&amp;'</span> </span>
<span class="line_wrapper">        <span style="color: #808030;">|</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\r'</span> <span style="color: #808030;">|</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\0'</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">return</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>A &#8216;naive&#8217; approach using the SIMD instructions available on ARM processors looks as follows. Basically, you just do more or less the same thing as the naive regular/scalar approach, except that instead of taking one character at a time, you take 16 characters at a time.</p>
<pre class="code_syntax" style="font-size: 0.8em; color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> AdvanceString<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span><span style="color: #808030;">&amp;</span>start<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>end<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  uint8x16_t quote_mask <span style="color: #808030;">=</span> vmovq_n_u8<span style="color: #808030;">(</span><span style="color: #0000e6;">'&lt;'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  uint8x16_t escape_mask <span style="color: #808030;">=</span> vmovq_n_u8<span style="color: #808030;">(</span><span style="color: #0000e6;">'&amp;'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  uint8x16_t newline_mask <span style="color: #808030;">=</span> vmovq_n_u8<span style="color: #808030;">(</span><span style="color: #0000e6;">'\r'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  uint8x16_t zero_mask <span style="color: #808030;">=</span> vmovq_n_u8<span style="color: #808030;">(</span><span style="color: #0000e6;">'\0'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  uint8x16_t bit_mask <span style="color: #808030;">=</span> <span style="color: #800080;">{</span><span style="color: #008c00;">16</span><span style="color: #808030;">,</span> <span style="color: #008c00;">15</span><span style="color: #808030;">,</span> <span style="color: #008c00;">14</span><span style="color: #808030;">,</span> <span style="color: #008c00;">13</span><span style="color: #808030;">,</span> <span style="color: #008c00;">12</span><span style="color: #808030;">,</span> <span style="color: #008c00;">11</span><span style="color: #808030;">,</span> <span style="color: #008c00;">10</span><span style="color: #808030;">,</span> <span style="color: #008c00;">9</span><span style="color: #808030;">,</span> <span style="color: #008c00;">8</span><span style="color: #808030;">,</span></span>
<span class="line_wrapper">                            <span style="color: #008c00;">7</span><span style="color: #808030;">,</span> <span style="color: #008c00;">6</span><span style="color: #808030;">,</span> <span style="color: #008c00;">5</span><span style="color: #808030;">,</span> <span style="color: #008c00;">4</span><span style="color: #808030;">,</span> <span style="color: #008c00;">3</span><span style="color: #808030;">,</span> <span style="color: #008c00;">2</span><span style="color: #808030;">,</span> <span style="color: #008c00;">1</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">static</span> <span style="color: #800000; font-weight: bold;">constexpr</span> <span style="color: #800000; font-weight: bold;">auto</span> stride <span style="color: #808030;">=</span> <span style="color: #008c00;">16</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span> start <span style="color: #808030;">+</span> <span style="color: #808030;">(</span>stride <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">)</span> <span style="color: #808030;">&lt;</span> end<span style="color: #800080;">;</span> start <span style="color: #808030;">+</span><span style="color: #808030;">=</span> stride<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    uint8x16_t data <span style="color: #808030;">=</span> vld1q_u8<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">reinterpret_cast</span><span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #603000;">uint8_t</span> <span style="color: #808030;">*</span><span style="color: #800080;">&gt;</span><span style="color: #808030;">(</span>start<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t quotes <span style="color: #808030;">=</span> vceqq_u8<span style="color: #808030;">(</span>data<span style="color: #808030;">,</span> quote_mask<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t escapes <span style="color: #808030;">=</span> vceqq_u8<span style="color: #808030;">(</span>data<span style="color: #808030;">,</span> escape_mask<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t newlines <span style="color: #808030;">=</span> vceqq_u8<span style="color: #808030;">(</span>data<span style="color: #808030;">,</span> newline_mask<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t zeros <span style="color: #808030;">=</span> vceqq_u8<span style="color: #808030;">(</span>data<span style="color: #808030;">,</span> zero_mask<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t mask <span style="color: #808030;">=</span> vorrq_u8<span style="color: #808030;">(</span>vorrq_u8<span style="color: #808030;">(</span>quotes<span style="color: #808030;">,</span>zeros<span style="color: #808030;">)</span><span style="color: #808030;">,</span> 
           vorrq_u8<span style="color: #808030;">(</span>escapes<span style="color: #808030;">,</span> newlines<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t matches <span style="color: #808030;">=</span> vandq_u8<span style="color: #808030;">(</span>bit_mask<span style="color: #808030;">,</span> mask<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">int</span> m <span style="color: #808030;">=</span> vmaxvq_u8<span style="color: #808030;">(</span>matches<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span>m <span style="color: #808030;">!</span><span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      start <span style="color: #808030;">+</span><span style="color: #808030;">=</span> <span style="color: #008c00;">16</span> <span style="color: #808030;">-</span> m<span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">return</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span>  </span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span>start <span style="color: #808030;">&lt;</span> end<span style="color: #800080;">;</span> start<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span><span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'&lt;'</span> <span style="color: #808030;">|</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'&amp;'</span> 
<span style="color: #808030;">       |</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\r'</span> <span style="color: #808030;">|</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\0'</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">return</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>If you have a PC with an Intel or AMD processor, you can do the equivalent using SSE2 instructions:</p>
<pre class="code_syntax" style="font-size: 0.8em; color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> AdvanceString<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span><span style="color: #808030;">*</span><span style="color: #808030;">&amp;</span> start<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span><span style="color: #808030;">*</span> end<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">const</span> __m128i quote_mask <span style="color: #808030;">=</span> _mm_set1_epi8<span style="color: #808030;">(</span><span style="color: #0000e6;">'&lt;'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">const</span> __m128i escape_mask <span style="color: #808030;">=</span> _mm_set1_epi8<span style="color: #808030;">(</span><span style="color: #0000e6;">'&amp;'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">const</span> __m128i newline_mask <span style="color: #808030;">=</span> _mm_set1_epi8<span style="color: #808030;">(</span><span style="color: #0000e6;">'\r'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">const</span> __m128i zero_mask <span style="color: #808030;">=</span> _mm_set1_epi8<span style="color: #808030;">(</span><span style="color: #0000e6;">'\0'</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>

<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">static</span> <span style="color: #800000; font-weight: bold;">constexpr</span> <span style="color: #800000; font-weight: bold;">auto</span> stride <span style="color: #808030;">=</span> <span style="color: #008c00;">16</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span> start <span style="color: #808030;">+</span> <span style="color: #808030;">(</span>stride <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">)</span> <span style="color: #808030;">&lt;</span> end<span style="color: #800080;">;</span> start <span style="color: #808030;">+</span><span style="color: #808030;">=</span> stride<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">        __m128i data <span style="color: #808030;">=</span> _mm_loadu_si128<span style="color: #808030;">(
</span><span style="color: #800000; font-weight: bold;">           reinterpret_cast</span><span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">const</span> __m128i<span style="color: #808030;">*</span><span style="color: #800080;">&gt;</span><span style="color: #808030;">(</span>start<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        __m128i quotes <span style="color: #808030;">=</span> _mm_cmpeq_epi8<span style="color: #808030;">(</span>data<span style="color: #808030;">,</span> quote_mask<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        __m128i escapes <span style="color: #808030;">=</span> _mm_cmpeq_epi8<span style="color: #808030;">(</span>data<span style="color: #808030;">,</span> escape_mask<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        __m128i newlines <span style="color: #808030;">=</span> _mm_cmpeq_epi8<span style="color: #808030;">(</span>data<span style="color: #808030;">,</span> newline_mask<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        __m128i zeros <span style="color: #808030;">=</span> _mm_cmpeq_epi8<span style="color: #808030;">(</span>data<span style="color: #808030;">,</span> zero_mask<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        __m128i mask <span style="color: #808030;">=</span> _mm_or_si128<span style="color: #808030;">(</span>_mm_or_si128<span style="color: #808030;">(</span>quotes<span style="color: #808030;">,</span> zeros<span style="color: #808030;">)</span><span style="color: #808030;">,                   
</span>             _mm_or_si128<span style="color: #808030;">(</span>escapes<span style="color: #808030;">,</span> newlines<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        <span style="color: #800000; font-weight: bold;">int</span> m <span style="color: #808030;">=</span> _mm_movemask_epi8<span style="color: #808030;">(</span>mask<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>m <span style="color: #808030;">!</span><span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">            start <span style="color: #808030;">+</span><span style="color: #808030;">=</span> __builtin_ctz<span style="color: #808030;">(</span>m<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">            <span style="color: #800000; font-weight: bold;">return</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        <span style="color: #800080;">}</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>

<span class="line_wrapper">    <span style="color: #696969;">// Process any remaining bytes (less than 16)</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">while</span> <span style="color: #808030;">(</span>start <span style="color: #808030;">&lt;</span> end<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">        <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span><span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'&lt;'</span> <span style="color: #808030;">|</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'&amp;'</span> 
<span style="color: #808030;">             |</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\r'</span> <span style="color: #808030;">|</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\0'</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">            <span style="color: #800000; font-weight: bold;">return</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">        <span style="color: #800080;">}</span></span>
<span class="line_wrapper">        start<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>You can do slightly better if you use an approach we call <em>vectorized classification</em> (see <a href="https://arxiv.org/pdf/1902.08318">Langdale and Lemire</a>, 2019). Basically, you combine a SIMD approach with vectorized table lookups to classify the characters. The ARM NEON version using two table lookups looks as follows:</p>
<pre class="code_syntax" style="font-size: 0.8em; color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> AdvanceStringTable<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span><span style="color: #808030;">&amp;</span>start<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>end<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  uint8x16_t low_nibble_mask <span style="color: #808030;">=</span> <span style="color: #800080;">{</span><span style="color: #005b00;">0</span><span style="color: #006600;">b</span><span style="color: #005b00;">0001</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #005b00;">0</span><span style="color: #006600;">b</span><span style="color: #005b00;">0100</span><span style="color: #808030;">,</span> 
<span style="color: #008c00;">          0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #005b00;">0</span><span style="color: #006600;">b</span><span style="color: #005b00;">0010</span><span style="color: #808030;">,</span> <span style="color: #005b00;">0</span><span style="color: #006600;">b</span><span style="color: #005b00;">1000</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  uint8x16_t high_nibble_mask <span style="color: #808030;">=</span> <span style="color: #800080;">{</span><span style="color: #005b00;">0</span><span style="color: #006600;">b</span><span style="color: #005b00;">1001</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #005b00;">0</span><span style="color: #006600;">b</span><span style="color: #005b00;">0100</span><span style="color: #808030;">,</span> <span style="color: #005b00;">0</span><span style="color: #006600;">b</span><span style="color: #005b00;">0010</span><span style="color: #808030;">,</span> 
<span style="color: #008c00;">          0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  uint8x16_t v0f <span style="color: #808030;">=</span> vmovq_n_u8<span style="color: #808030;">(</span><span style="color: #008000;">0xf</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  uint8x16_t bit_mask <span style="color: #808030;">=</span> <span style="color: #800080;">{</span><span style="color: #008c00;">16</span><span style="color: #808030;">,</span> <span style="color: #008c00;">15</span><span style="color: #808030;">,</span> <span style="color: #008c00;">14</span><span style="color: #808030;">,</span> <span style="color: #008c00;">13</span><span style="color: #808030;">,</span> <span style="color: #008c00;">12</span><span style="color: #808030;">,</span> <span style="color: #008c00;">11</span><span style="color: #808030;">,</span> <span style="color: #008c00;">10</span><span style="color: #808030;">,</span> <span style="color: #008c00;">9</span><span style="color: #808030;">,</span> <span style="color: #008c00;">8</span><span style="color: #808030;">,</span></span>
<span class="line_wrapper">                            <span style="color: #008c00;">7</span><span style="color: #808030;">,</span> <span style="color: #008c00;">6</span><span style="color: #808030;">,</span> <span style="color: #008c00;">5</span><span style="color: #808030;">,</span> <span style="color: #008c00;">4</span><span style="color: #808030;">,</span> <span style="color: #008c00;">3</span><span style="color: #808030;">,</span> <span style="color: #008c00;">2</span><span style="color: #808030;">,</span> <span style="color: #008c00;">1</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">static</span> <span style="color: #800000; font-weight: bold;">constexpr</span> <span style="color: #800000; font-weight: bold;">auto</span> stride <span style="color: #808030;">=</span> <span style="color: #008c00;">16</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span> start <span style="color: #808030;">+</span> <span style="color: #808030;">(</span>stride <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">)</span> <span style="color: #808030;">&lt;</span> end<span style="color: #800080;">;</span> start <span style="color: #808030;">+</span><span style="color: #808030;">=</span> stride<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    uint8x16_t data <span style="color: #808030;">=</span> vld1q_u8<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">reinterpret_cast</span><span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #603000;">uint8_t</span> <span style="color: #808030;">*</span><span style="color: #800080;">&gt;</span><span style="color: #808030;">(</span>start<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t lowpart <span style="color: #808030;">=</span> vqtbl1q_u8<span style="color: #808030;">(</span>low_nibble_mask<span style="color: #808030;">,</span> vandq_u8<span style="color: #808030;">(</span>data<span style="color: #808030;">,</span> v0f<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t highpart <span style="color: #808030;">=</span> vqtbl1q_u8<span style="color: #808030;">(</span>high_nibble_mask<span style="color: #808030;">,  
</span>           vshrq_n_u8<span style="color: #808030;">(</span>data<span style="color: #808030;">,</span> <span style="color: #008c00;">4</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t classify <span style="color: #808030;">=</span> vandq_u8<span style="color: #808030;">(</span>lowpart<span style="color: #808030;">,</span> highpart<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t matchesones <span style="color: #808030;">=</span> vtstq_u8<span style="color: #808030;">(</span>classify<span style="color: #808030;">,</span> vdupq_n_u8<span style="color: #808030;">(</span><span style="color: #008000;">0xFF</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t matches <span style="color: #808030;">=</span> vandq_u8<span style="color: #808030;">(</span>bit_mask<span style="color: #808030;">,</span> matchesones<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">int</span> m <span style="color: #808030;">=</span> vmaxvq_u8<span style="color: #808030;">(</span>matches<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span>m <span style="color: #808030;">!</span><span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      start <span style="color: #808030;">+</span><span style="color: #808030;">=</span> <span style="color: #008c00;">16</span> <span style="color: #808030;">-</span> m<span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">return</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span>  </span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span>start <span style="color: #808030;">&lt;</span> end<span style="color: #800080;">;</span> start<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span><span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'&lt;'</span> <span style="color: #808030;">|</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'&amp;'</span> <span style="color: #808030;">|</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\r'</span> 
<span style="color: #808030;">     |</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\0'</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">return</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>This version is close to Bikineev&#8217;s code as it appears in the Google Chrome engine, except that I use standard instrinsics while Google engineers prefer to use the excellent <a href="https://github.com/google/highway">highway SIMD library</a> by Jan Wassenberg.</p>
<p>We can do slightly better in this instance because Bikineev only needs to distinguish between four characters. A single table lookup is needed. We did not elaborate in <a href="https://arxiv.org/pdf/1902.08318">Langdale and Lemire</a> (2019) but vectorized classification works using one, two, three or more table lookups, depending on the complexity of the target set. The simpler version might look as follows:</p>
<pre class="code_syntax" style="font-size: 0.8em; color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> AdvanceStringTableSimpler<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span><span style="color: #808030;">&amp;</span>start<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>end<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  uint8x16_t low_nibble_mask <span style="color: #808030;">=</span> <span style="color: #800080;">{</span><span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x26</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> 
<span style="color: #008c00;">                            0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x3c</span><span style="color: #808030;">,</span> <span style="color: #008000;">0xd</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  uint8x16_t v0f <span style="color: #808030;">=</span> vmovq_n_u8<span style="color: #808030;">(</span><span style="color: #008000;">0xf</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  uint8x16_t bit_mask <span style="color: #808030;">=</span> <span style="color: #800080;">{</span><span style="color: #008c00;">16</span><span style="color: #808030;">,</span> <span style="color: #008c00;">15</span><span style="color: #808030;">,</span> <span style="color: #008c00;">14</span><span style="color: #808030;">,</span> <span style="color: #008c00;">13</span><span style="color: #808030;">,</span> <span style="color: #008c00;">12</span><span style="color: #808030;">,</span> <span style="color: #008c00;">11</span><span style="color: #808030;">,</span> <span style="color: #008c00;">10</span><span style="color: #808030;">,</span> <span style="color: #008c00;">9</span><span style="color: #808030;">,</span> <span style="color: #008c00;">8</span><span style="color: #808030;">,</span></span>
<span class="line_wrapper">                            <span style="color: #008c00;">7</span><span style="color: #808030;">,</span> <span style="color: #008c00;">6</span><span style="color: #808030;">,</span> <span style="color: #008c00;">5</span><span style="color: #808030;">,</span> <span style="color: #008c00;">4</span><span style="color: #808030;">,</span> <span style="color: #008c00;">3</span><span style="color: #808030;">,</span> <span style="color: #008c00;">2</span><span style="color: #808030;">,</span> <span style="color: #008c00;">1</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">static</span> <span style="color: #800000; font-weight: bold;">constexpr</span> <span style="color: #800000; font-weight: bold;">auto</span> stride <span style="color: #808030;">=</span> <span style="color: #008c00;">16</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span> start <span style="color: #808030;">+</span> <span style="color: #808030;">(</span>stride <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">)</span> <span style="color: #808030;">&lt;</span> end<span style="color: #800080;">;</span> start <span style="color: #808030;">+</span><span style="color: #808030;">=</span> stride<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    uint8x16_t data <span style="color: #808030;">=</span> vld1q_u8<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">reinterpret_cast</span><span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #603000;">uint8_t</span> <span style="color: #808030;">*</span><span style="color: #800080;">&gt;</span><span style="color: #808030;">(</span>start<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t lowpart <span style="color: #808030;">=</span> vqtbl1q_u8<span style="color: #808030;">(</span>low_nibble_mask<span style="color: #808030;">,</span> vandq_u8<span style="color: #808030;">(</span>data<span style="color: #808030;">,</span> v0f<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t matchesones <span style="color: #808030;">=</span> vceqq_u8<span style="color: #808030;">(</span>lowpart<span style="color: #808030;">,</span> data<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t matches <span style="color: #808030;">=</span> vandq_u8<span style="color: #808030;">(</span>bit_mask<span style="color: #808030;">,</span> matchesones<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">int</span> m <span style="color: #808030;">=</span> vmaxvq_u8<span style="color: #808030;">(</span>matches<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span>m <span style="color: #808030;">!</span><span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      start <span style="color: #808030;">+</span><span style="color: #808030;">=</span> <span style="color: #008c00;">16</span> <span style="color: #808030;">-</span> m<span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">return</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span>  </span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span>start <span style="color: #808030;">&lt;</span> end<span style="color: #800080;">;</span> start<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span><span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'&lt;'</span> <span style="color: #808030;">|</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'&amp;'</span> 
<span style="color: #808030;">     |</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\r'</span> <span style="color: #808030;">|</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\0'</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">return</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>On a processor with slower NEON instructions (e.g., Neoverse N1, Graviton 2), the following variation might be slightly faster:</p>
<pre class="code_syntax" style="font-size: 0.8em; color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">void</span> AdvanceStringTableSimpler<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span><span style="color: #808030;">&amp;</span>start<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>end<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  uint8x16_t low_nibble_mask <span style="color: #808030;">=</span> <span style="color: #800080;">{</span><span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x26</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> </span>
<span class="line_wrapper">                              <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008000;">0x3c</span><span style="color: #808030;">,</span> <span style="color: #008000;">0xd</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  uint8x16_t v0f <span style="color: #808030;">=</span> vmovq_n_u8<span style="color: #808030;">(</span><span style="color: #008000;">0xf</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  uint8x16_t bit_mask <span style="color: #808030;">=</span> <span style="color: #800080;">{</span><span style="color: #008c00;">16</span><span style="color: #808030;">,</span> <span style="color: #008c00;">15</span><span style="color: #808030;">,</span> <span style="color: #008c00;">14</span><span style="color: #808030;">,</span> <span style="color: #008c00;">13</span><span style="color: #808030;">,</span> <span style="color: #008c00;">12</span><span style="color: #808030;">,</span> <span style="color: #008c00;">11</span><span style="color: #808030;">,</span> <span style="color: #008c00;">10</span><span style="color: #808030;">,</span> <span style="color: #008c00;">9</span><span style="color: #808030;">,</span> <span style="color: #008c00;">8</span><span style="color: #808030;">,</span></span>
<span class="line_wrapper">                            <span style="color: #008c00;">7</span><span style="color: #808030;">,</span> <span style="color: #008c00;">6</span><span style="color: #808030;">,</span> <span style="color: #008c00;">5</span><span style="color: #808030;">,</span> <span style="color: #008c00;">4</span><span style="color: #808030;">,</span> <span style="color: #008c00;">3</span><span style="color: #808030;">,</span> <span style="color: #008c00;">2</span><span style="color: #808030;">,</span> <span style="color: #008c00;">1</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">static</span> <span style="color: #800000; font-weight: bold;">constexpr</span> <span style="color: #800000; font-weight: bold;">auto</span> stride <span style="color: #808030;">=</span> <span style="color: #008c00;">16</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span> start <span style="color: #808030;">+</span> <span style="color: #808030;">(</span>stride <span style="color: #808030;">-</span> <span style="color: #008c00;">1</span><span style="color: #808030;">)</span> <span style="color: #808030;">&lt;</span> end<span style="color: #800080;">;</span> start <span style="color: #808030;">+</span><span style="color: #808030;">=</span> stride<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    uint8x16_t data <span style="color: #808030;">=</span> vld1q_u8<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">reinterpret_cast</span><span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #603000;">uint8_t</span> <span style="color: #808030;">*</span><span style="color: #800080;">&gt;</span><span style="color: #808030;">(</span>start<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t lowpart <span style="color: #808030;">=</span> vqtbl1q_u8<span style="color: #808030;">(</span>low_nibble_mask<span style="color: #808030;">,</span> vandq_u8<span style="color: #808030;">(</span>data<span style="color: #808030;">,</span> v0f<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    uint8x16_t matchesones <span style="color: #808030;">=</span> vceqq_u8<span style="color: #808030;">(</span>lowpart<span style="color: #808030;">,</span> data<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span>vmaxvq_u32<span style="color: #808030;">(</span>vreinterpretq_u32_u8<span style="color: #808030;">(</span>matchesones<span style="color: #808030;">)</span><span style="color: #808030;">)</span> <span style="color: #808030;">!</span><span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      uint8x16_t matches <span style="color: #808030;">=</span> vandq_u8<span style="color: #808030;">(</span>bit_mask<span style="color: #808030;">,</span> matchesones<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">int</span> m <span style="color: #808030;">=</span> vmaxvq_u8<span style="color: #808030;">(</span>matches<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">      start <span style="color: #808030;">+</span><span style="color: #808030;">=</span> <span style="color: #008c00;">16</span> <span style="color: #808030;">-</span> m<span style="color: #800080;">;</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">return</span><span style="color: #800080;">;</span>    </span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>

<span class="line_wrapper">  <span style="color: #800080;">}</span>  </span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span>start <span style="color: #808030;">&lt;</span> end<span style="color: #800080;">;</span> start<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">if</span><span style="color: #808030;">(</span><span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'&lt;'</span> <span style="color: #808030;">|</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'&amp;'</span> <span style="color: #808030;">|</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\r'</span> <span style="color: #808030;">|</span><span style="color: #808030;">|</span> <span style="color: #808030;">*</span>start <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\0'</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">return</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>How do these three techniques compare? I wrote a small benchmark <a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/tree/master/2024/06/08">where I scan the HTML of the Google home page</a>. I ran the benchmark on my Apple M2 laptop (LLVM 15).</p>
<table>
<tbody>
<tr>
<th>method</th>
<th>speed</th>
<th>instructions/byte</th>
</tr>
<tr>
<td>naive (scalar)</td>
<td>2.0 GB/s</td>
<td>9.8 instructions/byte</td>
</tr>
<tr>
<td>naive (SIMD)</td>
<td>5.8 GB/s</td>
<td>2.1 instructions/byte</td>
</tr>
<tr>
<td>vectorized classification (2 lookups)</td>
<td>6.0 GB/s</td>
<td>2.0 instructions/byte</td>
</tr>
<tr>
<td>vectorized classification (1 lookup)</td>
<td>6.8 GB/s</td>
<td>1.8 instructions/byte</td>
</tr>
</tbody>
</table>
<p>The results follow my expectations: the simplest vectorized classification routine has the best performance. However, you may observe that even a rather naive SIMD approach can be quite fast in this instance.</p>
<p>If you have an old SSE2 PC, only the simple SIMD approach is available. My results suggest that it might be good enough to get good results.</p>
<p><strong>Suggested reading</strong>. I have a <a href="https://lemire.me/blog/2024/07/20/scan-html-even-faster-with-simd-instructions-c-and-c/">follow-up blog</a> post where I explain how we might go much faster.</p>
<p><strong>Update</strong>. After the publication of this blog post, the <a href="https://github.com/WebKit/WebKit/pull/30478/files#diff-da5d9493e6f18c65533a810dc45f860c63f23f23f2d8da6645dbc20a2d6d1744R482">WebKit engine (used by Safari)</a> and Chromium adopted the optimization with a vectorized table lookup.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/06/08/scan-html-faster-with-simd-instructions-chrome-edition/feed/</wfw:commentRss>
			<slash:comments>9</slash:comments>
		
		
			</item>
		<item>
		<title>Quickly checking whether a string needs escaping</title>
		<link>https://lemire.me/blog/2024/05/31/quickly-checking-whether-a-string-needs-escaping/</link>
					<comments>https://lemire.me/blog/2024/05/31/quickly-checking-whether-a-string-needs-escaping/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Fri, 31 May 2024 03:48:21 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21364</guid>

					<description><![CDATA[In software, we often represent strings by surrounding them with quotes ("). What happens if the string itself contains quotes? We then need to escape the string. For example, the quote character (") or the backslash character (\) should be replaced by \" or \\. Most programmers are familiar with this process. Most strings do &#8230; <a href="https://lemire.me/blog/2024/05/31/quickly-checking-whether-a-string-needs-escaping/" class="more-link">Continue reading <span class="screen-reader-text">Quickly checking whether a string needs escaping</span></a>]]></description>
										<content:encoded><![CDATA[<p>In software, we often represent strings by surrounding them with quotes (<tt>"</tt>). What happens if the string itself contains quotes? We then need to <em>escape the string</em>. For example, the quote character (<tt>"</tt>) or the backslash character (<tt>\</tt>) should be replaced by <tt>\"</tt> or <tt>\\</tt>. Most programmers are familiar with this process.</p>
<p>Most strings do not need to be escaped. It is thus useful to quickly check whether a string requires escaping.</p>
<p>In the popular interchange format JSON, strings must be escaped if they contain the quote character, the backslash character or any ASCII control character (i.e., with a code point less than 32).</p>
<p>How might we check such a string? Let us assume that we are using C++. A reasonable function might look as follows.</p>
<pre class="code_syntax" style="font-size: 0.8em; color: #000000; background: #ffffff;"><span class="line_wrapper">bool simple_needs_escaping<span style="color: #808030;">(</span>std<span style="color: #800080;">::</span>string_view v<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">char</span> c <span style="color: #800080;">:</span> v<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span><span style="color: #808030;">(</span><span style="color: #603000;">uint8_t</span><span style="color: #808030;">(</span>c<span style="color: #808030;">)</span> <span style="color: #808030;">&lt;</span> <span style="color: #008c00;">32</span><span style="color: #808030;">)</span> <span style="color: #808030;">|</span> <span style="color: #808030;">(</span>c <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'"'</span><span style="color: #808030;">)</span> <span style="color: #808030;">|</span> <span style="color: #808030;">(</span>c <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\\'</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">      <span style="color: #800000; font-weight: bold;">return</span> true<span style="color: #800080;">;</span></span>
<span class="line_wrapper">    <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> false<span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>The function takes a <tt>std::string_view</tt> named <tt>v</tt> as its argument. It iterates over each character <tt>c</tt> in the input string <tt>v</tt>. Inside the loop, we first use the comparison<br />
<tt>(uint8_t(c) &lt; 32)</tt> which checks if the ASCII value of the character is less than 32. This condition covers control characters (such as newline, tab, etc.). Then the comparison <tt>(c == '"')</tt> checks if the character is a double quote (<tt>"</tt>) and <tt>(c == '\\')</tt> checks if the character is a backslash (<tt>\</tt>). If any of the above conditions are true for a character, the function returns true, indicating that the character needs escaping. If none of the conditions are met for any character, the function returns false, indicating that no escaping is needed.</p>
<p>Importantly, this function should exit as soon as a character needing escaping is found. If we expect that no such character will be found, we might try a different approach where we always scan the whole input. This allows the compiler to try other optimizations. In particular, the compiler is more likely to use autovectorization: the ability of our optimizing compiler to compile our code using fancy instructions like Single Instruction, Multiple Data (SIMD) instructions. I call such a function &#8220;branchless&#8221; as a reference to the fact that it does not branch out. The result might look as follows:</p>
<pre class="code_syntax" style="font-size: 0.8em; color: #000000; background: #ffffff;"><span class="line_wrapper">bool branchless_needs_escaping<span style="color: #808030;">(</span>std<span style="color: #800080;">::</span>string_view v<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  bool b <span style="color: #808030;">=</span> false<span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">char</span> c <span style="color: #800080;">:</span> v<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    b <span style="color: #808030;">|</span><span style="color: #808030;">=</span> <span style="color: #808030;">(</span><span style="color: #808030;">(</span><span style="color: #603000;">uint8_t</span><span style="color: #808030;">(</span>c<span style="color: #808030;">)</span> <span style="color: #808030;">&lt;</span> <span style="color: #008c00;">32</span><span style="color: #808030;">)</span> <span style="color: #808030;">|</span> <span style="color: #808030;">(</span>c <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'"'</span><span style="color: #808030;">)</span> <span style="color: #808030;">|</span> <span style="color: #808030;">(</span>c <span style="color: #808030;">=</span><span style="color: #808030;">=</span> <span style="color: #0000e6;">'\\'</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> b<span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>We might also try a variation with table lookups. Instead of doing arithmetic and comparisons, we build a single table containing for all possible byte value whether it requires escaping or not.</p>
<p>It takes bit more effort but the result can be quite fast because each character is checked with a single load from a table, along with maybe or two additional instructions.</p>
<pre class="code_syntax" style="font-size: 0.8em; color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">static</span> <span style="color: #800000; font-weight: bold;">constexpr</span> <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">array</span><span style="color: #800080;">&lt;</span><span style="color: #603000;">uint8_t</span><span style="color: #808030;">,</span> <span style="color: #008c00;">256</span><span style="color: #800080;">&gt;</span> json_quotable_character <span style="color: #808030;">=</span></span>
<span class="line_wrapper">    <span style="color: #808030;">[</span><span style="color: #808030;">]</span><span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #800000; font-weight: bold;">constexpr</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #666616;">std</span><span style="color: #800080;">::</span><span style="color: #603000;">array</span><span style="color: #800080;">&lt;</span><span style="color: #603000;">uint8_t</span><span style="color: #808030;">,</span> <span style="color: #008c00;">256</span><span style="color: #800080;">&gt;</span> result<span style="color: #800080;">{</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">int</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&lt;</span> <span style="color: #008c00;">32</span><span style="color: #800080;">;</span> i<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    result<span style="color: #808030;">[</span>i<span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #008c00;">1</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">int</span> i <span style="color: #800080;">:</span> <span style="color: #800080;">{</span><span style="color: #0000e6;">'"'</span><span style="color: #808030;">,</span> <span style="color: #0000e6;">'\\'</span><span style="color: #800080;">}</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    result<span style="color: #808030;">[</span>i<span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #008c00;">1</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> result<span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>
<span class="line_wrapper"><span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>

<span class="line_wrapper"><span style="color: #800000; font-weight: bold;">bool</span> table_needs_escaping<span style="color: #808030;">(</span><span style="color: #666616;">std</span><span style="color: #800080;">::</span>string_view view<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #603000;">uint8_t</span> needs <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #603000;">uint8_t</span> c <span style="color: #800080;">:</span> view<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    needs <span style="color: #808030;">|</span><span style="color: #808030;">=</span> json_quotable_character<span style="color: #808030;">[</span>c<span style="color: #808030;">]</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> needs<span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>Can we do better? We might if we use SIMD instructions deliberately such as NEON or SSE2. For the most part, your computer is likely either an ARM machine, supporting at least NEON instructions or an x64 machine supporting at least SSE2 instructions. It is easy to distinguish at compile time between these two scenarios. Of course, your processor might support even fancier instructions, but NEON and SSE2 should be good enough to get a good speedup, especially if the strings are not very long.</p>
<p>A good general strategy is to load the data in blocks of 16 bytes and do a few comparisons over these 16 bytes. The magic of SIMD instructions is that it can do 16 comparisons at once, so it can be much faster than character by character processing. What about the case where we have fewer than 16 characters? If you do not want to read past the string, you can simply fall back on one of our more conventional functions.</p>
<p>The NEON code might look as follows:</p>
<pre class="code_syntax" style="font-size: 0.8em; color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">bool</span> simd_needs_escaping<span style="color: #808030;">(</span><span style="color: #666616;">std</span><span style="color: #800080;">::</span>string_view view<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>view<span style="color: #808030;">.</span>size<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #808030;">&lt;</span> <span style="color: #008c00;">16</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">return</span> simple_needs_escaping<span style="color: #808030;">(</span>view<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #603000;">size_t</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">static</span> <span style="color: #603000;">uint8_t</span> rnt_array<span style="color: #808030;">[</span><span style="color: #008c00;">16</span><span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #800080;">{</span><span style="color: #008c00;">1</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">34</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span>  <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span></span>
<span class="line_wrapper">                                  <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span>  <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">92</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #808030;">,</span> <span style="color: #008c00;">0</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">const</span> uint8x16_t rnt <span style="color: #808030;">=</span> vld1q_u8<span style="color: #808030;">(</span>rnt_array<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  uint8x16_t running<span style="color: #800080;">{</span><span style="color: #008c00;">0</span><span style="color: #800080;">}</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span> i <span style="color: #808030;">+</span> <span style="color: #008c00;">15</span> <span style="color: #808030;">&lt;</span> view<span style="color: #808030;">.</span>size<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span> i <span style="color: #808030;">+</span><span style="color: #808030;">=</span> <span style="color: #008c00;">16</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    uint8x16_t word <span style="color: #808030;">=</span> vld1q_u8<span style="color: #808030;">(</span><span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #603000;">uint8_t</span> <span style="color: #808030;">*</span><span style="color: #808030;">)</span>view<span style="color: #808030;">.</span>data<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #808030;">+</span> i<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    running <span style="color: #808030;">=</span> vorrq_u8<span style="color: #808030;">(</span></span>
<span class="line_wrapper">        running<span style="color: #808030;">,</span></span>
<span class="line_wrapper">        vceqq_u8<span style="color: #808030;">(</span>vqtbl1q_u8<span style="color: #808030;">(</span>rnt<span style="color: #808030;">,</span> vandq_u8<span style="color: #808030;">(</span>word<span style="color: #808030;">,</span> vdupq_n_u8<span style="color: #808030;">(</span><span style="color: #008c00;">15</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #808030;">,</span> word<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    running <span style="color: #808030;">=</span> vorrq_u8<span style="color: #808030;">(</span>running<span style="color: #808030;">,</span> vcltq_u8<span style="color: #808030;">(</span>word<span style="color: #808030;">,</span> vdupq_n_u8<span style="color: #808030;">(</span><span style="color: #008c00;">32</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>i <span style="color: #808030;">&lt;</span> view<span style="color: #808030;">.</span>size<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    uint8x16_t word <span style="color: #808030;">=</span></span>
<span class="line_wrapper">        vld1q_u8<span style="color: #808030;">(</span><span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> <span style="color: #603000;">uint8_t</span> <span style="color: #808030;">*</span><span style="color: #808030;">)</span>view<span style="color: #808030;">.</span>data<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #808030;">+</span> view<span style="color: #808030;">.</span>length<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #808030;">-</span> <span style="color: #008c00;">16</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    running <span style="color: #808030;">=</span> vorrq_u8<span style="color: #808030;">(</span></span>
<span class="line_wrapper">        running<span style="color: #808030;">,</span></span>
<span class="line_wrapper">        vceqq_u8<span style="color: #808030;">(</span>vqtbl1q_u8<span style="color: #808030;">(</span>rnt<span style="color: #808030;">,</span> vandq_u8<span style="color: #808030;">(</span>word<span style="color: #808030;">,</span> vdupq_n_u8<span style="color: #808030;">(</span><span style="color: #008c00;">15</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #808030;">,</span> word<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    running <span style="color: #808030;">=</span> vorrq_u8<span style="color: #808030;">(</span>running<span style="color: #808030;">,</span> vcltq_u8<span style="color: #808030;">(</span>word<span style="color: #808030;">,</span> vdupq_n_u8<span style="color: #808030;">(</span><span style="color: #008c00;">32</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> vmaxvq_u32<span style="color: #808030;">(</span>vreinterpretq_u32_u8<span style="color: #808030;">(</span>running<span style="color: #808030;">)</span><span style="color: #808030;">)</span> <span style="color: #808030;">!</span><span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span></pre>
<p>The SSE2 code might look at follows:</p>
<pre class="code_syntax" style="font-size: 0.8em; color: #000000; background: #ffffff;"><span class="line_wrapper"><span style="color: #800000; font-weight: bold;">inline</span> <span style="color: #800000; font-weight: bold;">bool</span> simd_needs_escaping<span style="color: #808030;">(</span><span style="color: #666616;">std</span><span style="color: #800080;">::</span>string_view view<span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>view<span style="color: #808030;">.</span>size<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #808030;">&lt;</span> <span style="color: #008c00;">16</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    <span style="color: #800000; font-weight: bold;">return</span> simple_needs_escaping<span style="color: #808030;">(</span>view<span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #603000;">size_t</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  __m128i running <span style="color: #808030;">=</span> _mm_setzero_si128<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span> i <span style="color: #808030;">+</span> <span style="color: #008c00;">15</span> <span style="color: #808030;">&lt;</span> view<span style="color: #808030;">.</span>size<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span> i <span style="color: #808030;">+</span><span style="color: #808030;">=</span> <span style="color: #008c00;">16</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    __m128i word <span style="color: #808030;">=</span> _mm_loadu_si128<span style="color: #808030;">(</span><span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> __m128i <span style="color: #808030;">*</span><span style="color: #808030;">)</span><span style="color: #808030;">(</span>view<span style="color: #808030;">.</span>data<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #808030;">+</span> i<span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    running <span style="color: #808030;">=</span> _mm_or_si128<span style="color: #808030;">(</span>running<span style="color: #808030;">,</span> _mm_cmpeq_epi8<span style="color: #808030;">(</span>word<span style="color: #808030;">,</span> _mm_set1_epi8<span style="color: #808030;">(</span><span style="color: #008c00;">34</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    running <span style="color: #808030;">=</span> _mm_or_si128<span style="color: #808030;">(</span>running<span style="color: #808030;">,</span> _mm_cmpeq_epi8<span style="color: #808030;">(</span>word<span style="color: #808030;">,</span> _mm_set1_epi8<span style="color: #808030;">(</span><span style="color: #008c00;">92</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    running <span style="color: #808030;">=</span> _mm_or_si128<span style="color: #808030;">(</span></span>
<span class="line_wrapper">        running<span style="color: #808030;">,</span> _mm_cmpeq_epi8<span style="color: #808030;">(</span>_mm_subs_epu8<span style="color: #808030;">(</span>word<span style="color: #808030;">,</span> _mm_set1_epi8<span style="color: #808030;">(</span><span style="color: #008c00;">31</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #808030;">,</span></span>
<span class="line_wrapper">                                _mm_setzero_si128<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">if</span> <span style="color: #808030;">(</span>i <span style="color: #808030;">&lt;</span> view<span style="color: #808030;">.</span>size<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span></span>
<span class="line_wrapper">    __m128i word <span style="color: #808030;">=</span></span>
<span class="line_wrapper">        _mm_loadu_si128<span style="color: #808030;">(</span><span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">const</span> __m128i <span style="color: #808030;">*</span><span style="color: #808030;">)</span><span style="color: #808030;">(</span>view<span style="color: #808030;">.</span>data<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #808030;">+</span> view<span style="color: #808030;">.</span>length<span style="color: #808030;">(</span><span style="color: #808030;">)</span> <span style="color: #808030;">-</span> <span style="color: #008c00;">16</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    running <span style="color: #808030;">=</span> _mm_or_si128<span style="color: #808030;">(</span>running<span style="color: #808030;">,</span> _mm_cmpeq_epi8<span style="color: #808030;">(</span>word<span style="color: #808030;">,</span> _mm_set1_epi8<span style="color: #808030;">(</span><span style="color: #008c00;">34</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    running <span style="color: #808030;">=</span> _mm_or_si128<span style="color: #808030;">(</span>running<span style="color: #808030;">,</span> _mm_cmpeq_epi8<span style="color: #808030;">(</span>word<span style="color: #808030;">,</span> _mm_set1_epi8<span style="color: #808030;">(</span><span style="color: #008c00;">92</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">    running <span style="color: #808030;">=</span> _mm_or_si128<span style="color: #808030;">(</span></span>
<span class="line_wrapper">        running<span style="color: #808030;">,</span> _mm_cmpeq_epi8<span style="color: #808030;">(</span>_mm_subs_epu8<span style="color: #808030;">(</span>word<span style="color: #808030;">,</span> _mm_set1_epi8<span style="color: #808030;">(</span><span style="color: #008c00;">31</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #808030;">,</span></span>
<span class="line_wrapper">                                _mm_setzero_si128<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper">  <span style="color: #800080;">}</span></span>
<span class="line_wrapper">  <span style="color: #800000; font-weight: bold;">return</span> _mm_movemask_epi8<span style="color: #808030;">(</span>running<span style="color: #808030;">)</span> <span style="color: #808030;">!</span><span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span></span>
<span class="line_wrapper"><span style="color: #800080;">}</span></span>
</pre>
<p>You can optimize further the SIMD-based functions to reduce the number of instructions, but they already use far fewer when processing  blocks of 16 bytes than conventional functions.</p>
<p>It can be tricky to benchmark such functions. You will find much difference depending on your compiler and your processor. And the results are sensitive to the data, obviously. However my experience is that the SIMD approaches usually win, by a lot. To test it out, <a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/tree/master/2024/05/30">I wrote a small benchmark</a>. In my benchmark, I use a few strings, of different lengths. Some of my strings have only a handful of characters, and some are short sentences. I have dozens of strings. None of the strings require escaping: I believe that this is common scenario.</p>
<table>
<tbody>
<tr>
<th>system</th>
<th>simple</th>
<th>branchless</th>
<th>table</th>
<th>SIMD</th>
</tr>
<tr>
<td>Linux GCC 12, Intel Ice Lake (3.2 GHz)</td>
<td>0.65 GB/s</td>
<td>0.91 GB/s</td>
<td>1.9 GB/s</td>
<td>5.2 GB/s</td>
</tr>
<tr>
<td>Linux LLVM 16, Intel Ice Lake (3.2 GHz)</td>
<td>0.91 GB/s</td>
<td>2.6 GB/s</td>
<td>2.5 GB/s</td>
<td>5.7 GB/s</td>
</tr>
</tbody>
</table>
<p>In these results, the table-based approach is quite competitive.  However, it can be beaten by the branchless  approach when using LLVM/clang due to its good ability to autovectorize the code.</p>
<p>Yet, in all instances, the hand-coded SIMD functions are at least twice as fast. As usual, <a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/tree/master/2024/05/30">my source code is available</a> and I invite you to run your own benchmarks.</p>
<p><strong>Note</strong>: The character with code point value 127 is also a control character in ASCII. Furthermore, <a href="https://en.wikipedia.org/wiki/Unicode_control_characters">Unicode has many control characters</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/05/31/quickly-checking-whether-a-string-needs-escaping/feed/</wfw:commentRss>
			<slash:comments>11</slash:comments>
		
		
			</item>
		<item>
		<title>Never reason from the results of a sampling profiler</title>
		<link>https://lemire.me/blog/2024/05/30/never-reason-from-the-results-of-a-sampling-profiler/</link>
					<comments>https://lemire.me/blog/2024/05/30/never-reason-from-the-results-of-a-sampling-profiler/#respond</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Thu, 30 May 2024 19:33:28 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21360</guid>

					<description><![CDATA[In the quest for software optimization, a trusty companion is the sampling profiler, a tool available in most programming languages. These profilers work unobtrusively, taking snapshots of the program&#8217;s state and recording the currently executing function or instruction. While profilers sound like a silver bullet for identifying performance bottlenecks, their usefulness has limitations. They excel &#8230; <a href="https://lemire.me/blog/2024/05/30/never-reason-from-the-results-of-a-sampling-profiler/" class="more-link">Continue reading <span class="screen-reader-text">Never reason from the results of a sampling profiler</span></a>]]></description>
										<content:encoded><![CDATA[<p class="first-token" data-sourcepos="1:1-1:25">In the quest for software optimization, a trusty companion is the sampling profiler, a tool available in most programming languages. These profilers work unobtrusively, taking snapshots of the program&#8217;s state and recording the currently executing function or instruction.</p>
<p data-sourcepos="3:1-3:122">While profilers sound like a silver bullet for identifying performance bottlenecks, their usefulness has limitations. They excel at highlighting bottlenecks, but often lack the nuance to pinpoint the root cause. In simpler cases, a profiler&#8217;s report might be enough, but relying solely on this data can lead one astray. Misinterpretations of profiling results are a common pitfall I&#8217;ve observed amongst programmers.</p>
<p data-sourcepos="5:1-5:61">Imagine a store manager facing customer complaints about long lines. A frustrated customer like myself might be stuck due to a malfunctioning cash register. However, if the manager, instead of fixing the register, simply photographs the queue to identify the &#8220;culprit,&#8221; I, the innocent bystander, might be wrongly blamed for the delay. Profilers can be just as misleading, highlighting symptoms without revealing the underlying cause.</p>
<p data-sourcepos="5:1-5:61">You are taking a few simple screenshots of a complex system. Of course, you can take more screenshots, and make your screenshots richer, but then you start affecting the system, and falling prey to a software-equivalent Heinsenberg uncertainy principle: you can either know the state of your program very precisely at all times, but then you know little about its speed, or you can measure quite precisely the speed, but with little idea of the intermediate speeds.</p>
<p data-sourcepos="5:1-5:61">Do use sampling profilers. I find them useful. Just do not reason about your problems from them. They merely offer a starting point.</p>
<p data-sourcepos="5:1-5:61"><a href="http://lemire.me/blog/wp-content/uploads/2024/05/Screenshot-2024-05-30-at-3.21.53-PM.png"><img loading="lazy" decoding="async" class="alignnone size-large wp-image-21361" src="http://lemire.me/blog/wp-content/uploads/2024/05/Screenshot-2024-05-30-at-3.21.53-PM-1024x810.png" alt="" width="660" height="522" srcset="https://lemire.me/blog/wp-content/uploads/2024/05/Screenshot-2024-05-30-at-3.21.53-PM-1024x810.png 1024w, https://lemire.me/blog/wp-content/uploads/2024/05/Screenshot-2024-05-30-at-3.21.53-PM-300x237.png 300w, https://lemire.me/blog/wp-content/uploads/2024/05/Screenshot-2024-05-30-at-3.21.53-PM-768x607.png 768w, https://lemire.me/blog/wp-content/uploads/2024/05/Screenshot-2024-05-30-at-3.21.53-PM.png 1452w" sizes="(max-width: 660px) 100vw, 660px" /></a></p>
<p data-sourcepos="5:1-5:61"><strong>Further reading</strong>: <a href="https://www.jabperf.com/debunking-5-stubborn-systems-performance-myths/">Sampling profilers can mislead, and mastering any one tool (e.g., perf or VTune or uPerf) won&#8217;t magically confer analysis expertise</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/05/30/never-reason-from-the-results-of-a-sampling-profiler/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Science and Technology links (May 25 2024)</title>
		<link>https://lemire.me/blog/2024/05/26/science-and-technology-links-may-25-2024/</link>
					<comments>https://lemire.me/blog/2024/05/26/science-and-technology-links-may-25-2024/#respond</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Sun, 26 May 2024 01:09:54 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21351</guid>

					<description><![CDATA[Artificial intelligence is far more efficient at producing content than human beings, as far as carbon emissions go. Human brains got larger by over 5% between 1930 and 1970. Replacing plastics by &#8216;environment friendly&#8217; alternatives typically results in greater greenhouse gas emissions. Prostate-specific antigen screening has only a small effect on men&#8217;s risk of dying &#8230; <a href="https://lemire.me/blog/2024/05/26/science-and-technology-links-may-25-2024/" class="more-link">Continue reading <span class="screen-reader-text">Science and Technology links (May 25 2024)</span></a>]]></description>
										<content:encoded><![CDATA[<ol>
<li><a href="https://www.nature.com/articles/s41598-024-54271-x">Artificial intelligence is far more efficient at producing content than human beings, as far as carbon emissions go</a>.</li>
<li><a href="https://jamanetwork.com/journals/jamaneurology/fullarticle/2816798">Human brains got larger by over 5% between 1930 and 1970</a>.</li>
<li><a href="https://pubs.acs.org/doi/10.1021/acs.est.3c05191">Replacing plastics by &#8216;environment friendly&#8217; alternatives typically results in greater greenhouse gas emissions</a>.</li>
<li><a href="https://jamanetwork.com/journals/jama/fullarticle/2817322">Prostate-specific antigen screening has only a small effect on men&#8217;s risk of dying</a> in absolute terms.</li>
<li><a href="https://www.cambridge.org/core/journals/british-journal-of-political-science/article/unequal-and-unsupportive-exposure-to-poor-people-weakens-support-for-redistribution-among-the-rich/FC32FA59B3C5525A178C7012859F95D8">Local exposure to poor individuals reduces support for redistribution among the well-off</a>. In other words, wealthy people are more likely to favor government programs helping the poor if they never see poor people.</li>
<li><a href="https://journals.sagepub.com/doi/abs/10.1177/01461672241240160">Happier looking people are judged better</a>. If you want to be viewed as a good person, make sure you appear happy.</li>
<li>Females mount stronger immune responses to many pathogens, they awaken more frequently at night, they express greater concern about physically dangerous stimuli, they exert more effort to avoid social conflicts, they exhibit a personality style more focused on life&#8217;s dangers, they react to threats with greater fear, disgust and sadness and they develop more threat-based clinical conditions than males. (<a href="https://www.cambridge.org/core/journals/behavioral-and-brain-sciences/article/abs/selfprotection-as-an-adaptive-female-strategy/596ABFD521F358F1E8797C542084679B">Benenson et al.</a>).</li>
<li><a href="https://www.nature.com/articles/s43247-023-00720-w">The Lincoln sea, the sea North of Greenland, was ice free about 10,000 years ago</a>.</li>
<li><a href="https://www.telegraph.co.uk/news/2024/04/04/adhd-and-autism-referrals-up-fivefold-since-pandemic/">ADHD and autism referrals up fivefold in 2023 in the UK</a>. It is unclear why that is, but over diagnosis is a possibility.</li>
<li><a href="https://en.wikipedia.org/wiki/%C3%87atalh%C3%B6y%C3%BCk">We believe that one of the earliest city might have been in modern-day Turkey, about 9,000 years ago</a>.</li>
<li><a href="https://commons.wikimedia.org/wiki/File:Post-Glacial_Sea_Level.png">About 20,000 years ago, sea levels were over 100 meters lower</a>, as we were in the last glacial maximum.</li>
<li><a href="https://jamanetwork.com/journals/jama/article-abstract/384959">High-intensity strength training exercises are an effective means to preserve bone density while improving muscle mass, strength, and balance in postmenopausal women</a>.</li>
<li><a href="https://www.nber.org/papers/w32349">The average American is willing to pay over 500$ to get a 3-month exemption from a medical mask mandate</a>.</li>
<li><a href="https://www.nature.com/articles/s44271-024-00072-x">Experiencing nature leads to healthier food choices</a>.</li>
<li><a href="https://bg.copernicus.org/articles/19/491/2022/">Australia is getting greener, rapidly</a>.</li>
<li>When you lose weight, you spend less energy. However, <a href="https://onlinelibrary.wiley.com/doi/abs/10.1111/obr.13760">if you consume relatively more fat or protein during the weight loss, you tend to use more energy</a>.</li>
<li><a href="https://e360.yale.edu/digest/carbon-dioxide-climate-change-bigger-trees">Trees are getting bigger</a>.</li>
<li><a href="https://www.sciencedirect.com/science/article/pii/S0022202X2400280X">Sun exposure may improve your health</a>.</li>
<li><a href="https://mainichi.jp/english/articles/20240503/p2a/00m/0sc/012000c">They are conducting a clinical trial for tooth regrowth technology in Japan</a>.</li>
</ol>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/05/26/science-and-technology-links-may-25-2024/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Learning from the object-oriented mania</title>
		<link>https://lemire.me/blog/2024/05/14/learning-from-the-object-oriented-mania/</link>
					<comments>https://lemire.me/blog/2024/05/14/learning-from-the-object-oriented-mania/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Tue, 14 May 2024 14:17:42 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21333</guid>

					<description><![CDATA[Back when I started programming professionally, every expert and every software engineering professor would swear by object-oriented programming. Resistance was futile. History had spoken: the future was object-oriented. It is hard to understate how strong the mania was. In education, we started calling textbooks and videos &#8216;learning objects&#8216;. Educators would soon &#8216;combine learning objects and reuse them&#8216;. A competitor &#8230; <a href="https://lemire.me/blog/2024/05/14/learning-from-the-object-oriented-mania/" class="more-link">Continue reading <span class="screen-reader-text">Learning from the object-oriented mania</span></a>]]></description>
										<content:encoded><![CDATA[<p><span data-preserver-spaces="true">Back when I started programming professionally, every expert and</span><span data-preserver-spaces="true"> </span><span data-preserver-spaces="true">every software engineering professor would swear by object-oriented programming. Resistance was futile. History had spoken: the future was object-oriented.</span></p>
<p><span data-preserver-spaces="true">It is hard to understate how </span><span data-preserver-spaces="true">strong</span><span data-preserver-spaces="true"> the mania was. In education, we started calling textbooks and videos &#8216;learning objects</span><span data-preserver-spaces="true">&#8216;.</span><span data-preserver-spaces="true"> Educators would soon &#8216;combine learning objects and reuse them</span><span data-preserver-spaces="true">&#8216;.</span></p>
<p><span data-preserver-spaces="true">A competitor to a client I was working on </span><span data-preserver-spaces="true">at the time</span><span data-preserver-spaces="true"> had written a server in C. They had to pay lip service to object-oriented programming, so they said that their code was &#8216;object-oriented.</span></p>
<p><span data-preserver-spaces="true">I once led a project to build an image compression system. </span><span data-preserver-spaces="true">They</span><span data-preserver-spaces="true"> insisted that before we even wrote a single line of code, we planned it out using &#8216;UML&#8217;. It had to be object-oriented from the start, you see.</span></p>
<p><span data-preserver-spaces="true">You had to know your object-oriented design patterns, or </span><span data-preserver-spaces="true">you could not be taken</span><span data-preserver-spaces="true"> seriously.</span></p>
<p><span data-preserver-spaces="true">People rewrote their database engines so that they would be object-oriented.</span></p>
<p><span data-preserver-spaces="true">More than 25 years later, we can finally say, without </span><span data-preserver-spaces="true">needing</span><span data-preserver-spaces="true"> much courage, that it was </span><span data-preserver-spaces="true">insane</span><span data-preserver-spaces="true">, outrageous, and </span><span data-preserver-spaces="true">terribly</span><span data-preserver-spaces="true"> wasteful. </span></p>
<p><span data-preserver-spaces="true">Yet, even today, the pressure remains on. Students </span><span data-preserver-spaces="true">are compelled</span><span data-preserver-spaces="true"> to write simple projects using multiple classes. Not just learn the principles of object-oriented programming, which is fair enough, but we still demand that they embrace the ideology.</span></p>
<p><span data-preserver-spaces="true">To be fair,</span><span data-preserver-spaces="true"> some </span><span data-preserver-spaces="true">of the</span><span data-preserver-spaces="true"> basic principles behind object-oriented programming can be useful. At least, you should know about them.</span></p>
<p><span data-preserver-spaces="true">But the mania was unwarranted and harmful.</span></p>
<p><span data-preserver-spaces="true">The lesson you should draw is not that object-oriented is </span><span data-preserver-spaces="true">bad</span><span data-preserver-spaces="true">, but rather that whatever is the current trendy technique and trendy </span><span data-preserver-spaces="true">idea,</span><span data-preserver-spaces="true"> is likely grossly overrated.</span></p>
<p><span data-preserver-spaces="true">The social mechanism is constantly in action, though it is no longer acting for object-oriented programming. </span><span data-preserver-spaces="true">It takes many forms. Not long ago, you had to wear a mask to attend a conference.<a href="https://www.cochranelibrary.com/cdsr/doi/10.1002/14651858.CD006207.pub6/full"> Everyone &#8216;knew&#8217; that masks stopped viruses and had no side-effect</a>&#8230; just like everyone just knew that object-oriented programming makes better and more maintainable software, without negative side-effects. All experts agree. All figure of authorities agree. The written press agrees. The celebrities agree. The social pressure to conform is everywhere. It must be true, it has to be true. Anyone disagreeing is a bad person.</span></p>
<p><span data-preserver-spaces="true">You can recognize such a social contagion by its telltale signs.</span></p>
<ol>
<li><strong><span data-preserver-spaces="true">Rapid Spread</span></strong><span data-preserver-spaces="true">: A social contagion spreads quickly through a group or community, much like a wildfire. One day everyone is talking about the latest object-oriented pattern, and the next day, everyone is putting it into practice.</span></li>
<li><strong><span data-preserver-spaces="true">Amplification</span></strong><span data-preserver-spaces="true">: You often observe the emergence of &#8216;influencers&#8217;, people who gain high social status and use their newly found position to push further the hype. The object-oriented mania was driven by many key players who made a fortune in the process. They appeared in popular shows, magazines, and so forth.</span></li>
<li><strong><span data-preserver-spaces="true">Peer Influence</span></strong><span data-preserver-spaces="true">: Social contagion often relies on peer influence. E.g., everyone around you starts talking about object-oriented programming.</span></li>
<li><strong><span data-preserver-spaces="true">Conformity</span></strong><span data-preserver-spaces="true">: People often mimic the behaviors or attitudes of others in their group, leading to a conformity effect. People who do not conform are often excluded, either explicitly or implicitly. For example, object-oriented started to appear in job ads and was promoted by government agencies.</span></li>
<li><strong><span data-preserver-spaces="true">Aggressive Behavior</span></strong><span data-preserver-spaces="true">: You see a significant change from usual behavior as irrationality creeps in. If you criticize object-oriented programming, something is wrong with you!</span></li>
<li><strong><span data-preserver-spaces="true">Grandiose Beliefs or Delusions</span></strong><span data-preserver-spaces="true">: Claims that object-oriented programming would forever change the software industry for the better were everywhere. You could just easily reuse your objects and classes from one project to the other. Never mind that none of these claims could ever be sustained.</span></li>
<li><strong><span data-preserver-spaces="true">Risky Behavior</span></strong><span data-preserver-spaces="true">: Entire businesses bet their capital on projects trying to reinvent some established tool in an object-oriented manner. People kept throwing caution to the wind: let us rebuild everything the one true way, what is the </span><span data-preserver-spaces="true">worse</span><span data-preserver-spaces="true"> that can happen?</span></li>
</ol>
<hr />
<div style="font-size: 0.8em;">
<p><strong>Appendix</strong>. There is a very good reason why hardly any of us wears a mask today. If masks prevented the transmission of respiratory diseases, it would have been a medical breakthrough. But they do no such thing. There is no evidence that masks have benefits and they may well create net harm. The one European country that did not embrace general mask mandates (Sweden) ended up with effectively the lowest excess mortality in Europe.</p>
<p>Cochrane conducted a thorough review of all the strong evidence gathered during the covid era. Here is what the <a href="https://www.cochranelibrary.com/cdsr/doi/10.1002/14651858.CD006207.pub6/full">Cochrane review conclude:</a></p>
<blockquote style="font-size: 0.8em;"><p>We included 12 trials (10 cluster‐RCTs) comparing medical/surgical masks versus no masks to prevent the spread of viral respiratory illness (two trials with healthcare workers and 10 in the community). Wearing masks in the community probably makes little or no difference to the outcome of influenza‐like illness (ILI)/COVID‐19 like illness compared to not wearing masks. Wearing masks in the community probably makes little or no difference to the outcome of laboratory‐confirmed influenza/SARS‐CoV‐2 compared to not wearing masks. Harms were rarely measured and poorly reported.</p></blockquote>
<p>Here are the results <a href="https://www.cochrane.org/CD006207/ARI_do-physical-measures-such-hand-washing-or-wearing-masks-stop-or-slow-down-spread-respiratory-viruses">from an earlier </a><a href="https://www.cochranelibrary.com/cdsr/doi/10.1002/14651858.CD006207.pub6/full">Cochrane</a><a href="https://www.cochrane.org/CD006207/ARI_do-physical-measures-such-hand-washing-or-wearing-masks-stop-or-slow-down-spread-respiratory-viruses"> review</a>, based on pre-COVID studies:</p>
<blockquote style="font-size: 0.8em;"><p>Compared with wearing medical or surgical masks, wearing N95/P2 respirators probably makes little to no difference in how many people have confirmed flu; and may make little to no difference in how many people catch a flu-like illness.</p></blockquote>
<p>Ian Miller wrote a fantastic book on the topic: <a href="https://www.amazon.com/-/fr/Unmasked-Global-Failure-COVID-Mandates/dp/1637583761/">Unmasked: The Global Failure of COVID Mask Mandates</a>.</p>
<p><a href="https://ecchc.economics.uchicago.edu/project/covid-lessons-learned-a-retrospective-after-four-years-committee-to-unleash-prosperity-03-15-24/">Atlas et al. (2024</a>) included masks in their lessons to draw from the covid era: <em>Masks Were of Little or No Value and Possibly Harmful</em>.</p>
<p><a href="https://www.telegraph.co.uk/world-news/2024/03/25/german-health-agency-covid-lockdown-masks-legal-battle/">German officials admitted that evidence for making masks mandatory was lacking</a>, according to health agency’s deliberations released after long legal battle.</p>
<p><span class="name"><a href="https://adc.bmj.com/content/109/3/e1">Sandlund et al.</a> conclude: </span></p>
<blockquote style="font-size: 0.8em;"><p>Because benefits of masking for COVID-19 have not been identified, it should be recognised that <strong>mask recommendations for children are not supported by scientific evidence</strong>.</p></blockquote>
</div>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/05/14/learning-from-the-object-oriented-mania/feed/</wfw:commentRss>
			<slash:comments>11</slash:comments>
		
		
			</item>
		<item>
		<title>Forwarding references in C++</title>
		<link>https://lemire.me/blog/2024/05/13/forwarding-references-in-c/</link>
					<comments>https://lemire.me/blog/2024/05/13/forwarding-references-in-c/#respond</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Mon, 13 May 2024 15:51:51 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21331</guid>

					<description><![CDATA[In C++, there are different ways to pass a value to a function. Typically, at any given time, an object in C++ &#8216;belongs&#8217; to a single function. The various ways to call a function differ in who owns the object, the caller or the callee (the function being called). The simplest one is that we &#8230; <a href="https://lemire.me/blog/2024/05/13/forwarding-references-in-c/" class="more-link">Continue reading <span class="screen-reader-text">Forwarding references in C++</span></a>]]></description>
										<content:encoded><![CDATA[<p>In C++, there are different ways to pass a value to a function. Typically, at any given time, an object in C++ &#8216;belongs&#8217; to a single function. The various ways to call a function differ in who owns the object, the caller or the callee (the function being called).</p>
<p>The simplest one is that we pass by value. In such cases, a copy is typically made of the object and both the caller and the callee own a copy.</p>
<p><span style="color: #800000; font-weight: bold;">void</span> value<span style="color: #808030;">(</span>MyClass obj<span style="color: #808030;">)</span> <span style="color: #800080;">{</span><span style="color: #800080;">}</span></p>
<p>We can pass by reference. You recognize a reference by the single ampersand (&amp;). The caller owns the object, but the callee gets access to it.</p>
<p><span style="color: #800000; font-weight: bold;">void</span> reference<span style="color: #808030;">(</span>MyClass<span style="color: #808030;">&amp;</span> obj<span style="color: #808030;">)</span> <span style="color: #800080;">{</span><span style="color: #800080;">}</span><br />
<!--Created using ToHTML.com on 2024-05-13 15:34:33 UTC --></p>
<p>You can also pass by an &#8220;rvalue reference&#8221; which you recognize by the &#8216;&amp;&amp;&#8217; symbols. In such cases while the caller initially creates the object, but its ownership is passed to the callee. I personally dislike the expression &#8216;rvalue reference&#8217; and I would have preferred something less technical.</p>
<p><span style="color: #800000; font-weight: bold;">void</span> rvalue_reference<span style="color: #808030;">(</span>MyClass<span style="color: #808030;">&amp;</span><span style="color: #808030;">&amp;</span> obj<span style="color: #808030;">)</span> <span style="color: #800080;">{</span><span style="color: #800080;">}</span><br />
<!--Created using ToHTML.com on 2024-05-13 15:36:33 UTC --></p>
<p>However, in some instances, you do not care whether your function gets to own the value, or has merely a reference to it. Writing two functions duplicates the code. Instead, you can then use a <em>forwarding reference</em>:</p>
<p><span style="color: #800000; font-weight: bold;">template</span> <span style="color: #800080;">&lt;</span><span style="color: #800000; font-weight: bold;">typename</span> T<span style="color: #800080;">&gt;</span><br />
<span style="color: #800000; font-weight: bold;">void</span> forwarding_reference<span style="color: #808030;">(</span>T<span style="color: #808030;">&amp;</span><span style="color: #808030;">&amp;</span> obj<span style="color: #808030;">)</span> <span style="color: #800080;">{</span><span style="color: #800080;">}</span><br />
<!--Created using ToHTML.com on 2024-05-13 15:39:31 UTC --></p>
<p>It looks like an rvalue reference, but it is not: it can be either a normal reference or an rvalue reference depending on how you call it.</p>
<p>Here is how you might call these functions in practice:</p>
<pre>MyClass obj<span style="color: #800080;">;</span>
value<span style="color: #808030;">(</span>obj<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
reference<span style="color: #808030;">(</span>obj<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
rvalue_reference<span style="color: #808030;">(</span>MyClass<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>
forwarding_reference<span style="color: #808030;">(</span>obj<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
forwarding_reference<span style="color: #808030;">(</span>MyClass<span style="color: #808030;">(</span><span style="color: #808030;">)</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>
</pre>
<p>The following table is a summary. A forwarding reference might be either a regular reference or an rvalue reference depending on how it is called.<!--Created using ToHTML.com on 2024-05-13 15:44:19 UTC --></p>
<table>
<tbody>
<tr>
<td></td>
<td>caller owns?</td>
<td>callee owns?</td>
</tr>
<tr>
<td>by value</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>by reference (&amp;)</td>
<td>yes</td>
<td>no</td>
</tr>
<tr>
<td>by rvalue reference (&amp;&amp;)</td>
<td>no</td>
<td>yes</td>
</tr>
</tbody>
</table>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/05/13/forwarding-references-in-c/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Peer review is not the gold standard in science</title>
		<link>https://lemire.me/blog/2024/05/11/peer-review-is-not-the-gold-standard-in-science/</link>
					<comments>https://lemire.me/blog/2024/05/11/peer-review-is-not-the-gold-standard-in-science/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Sat, 11 May 2024 22:47:16 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21322</guid>

					<description><![CDATA[Peer review as we know it today was introduced very late, over a century after the scientific revolution. It happened after Einstein&#8217;s time&#8230; arguably the most productive era in science. Current scientists often equate a success with the publication in a selective peer-reviewed venue. But that was never the scientific paradigm. In fact, it is &#8230; <a href="https://lemire.me/blog/2024/05/11/peer-review-is-not-the-gold-standard-in-science/" class="more-link">Continue reading <span class="screen-reader-text">Peer review is not the gold standard in science</span></a>]]></description>
										<content:encoded><![CDATA[<p>Peer review as we know it today was introduced very late, over a century after the scientific revolution. It happened after Einstein&#8217;s time&#8230; arguably the most productive era in science. Current scientists often equate a success with the publication in a selective peer-reviewed venue. But that was never the scientific paradigm. In fact, it is pre-scientific thinking. Back in Einstein&#8217;s time, many scientists believed in the ether. It would have been difficult to dismiss the ether as a concept. The prudent approach would have been to pay lip service to the ether. Similarly, most scientists believed in eugenics. They believed in forced sterilization for the greater good. Many of the racist laws in the US followed straight from progressive science. Opposing eugenics would have been difficult in the context of peer review. It would have been difficult to challenge eugenics openly as a scientists.</p>
<p>Siler et al. (2014) looked at published manuscripts that were initially rejected. They find:</p>
<blockquote><p>Of the 808 eventually published articles in our dataset, our three focal journals rejected many highly cited manuscripts, including the 14 most popular; roughly the top 2 percent. Of those 14 articles, 12 were desk-rejected. This finding raises concerns regarding whether peer review is ill-suited to recognize and gestate the most impactful ideas and research.</p></blockquote>
<p>Recently, people like Matt Ridley challenged the idea that the SARS-Cov2 virus originated from nature. Back when <a href="https://www.amazon.ca/Viral-Search-COVID-19-Matt-Ridley-ebook/dp/B09794TRBB">he published his book on the topic</a>, it would have been difficult to pass peer review.</p>
<p>You may not remember, but early on, it would widely accepted that the lab origin of SARS-Cov2 was only for far-right conspiracy theorists. <a href="https://www.cbc.ca/news/science/coronavirus-wasnt-created-in-lab-no-signs-genetic-engineering-1.5508735">The Canadian State broadcaster (CBC) told us</a>, in its &#8216;science&#8217; section:</p>
<blockquote><p>One of the most persistent and widespread pieces of disinformation during the COVID-19 pandemic has been the conspiracy theory that the novel coronavirus that causes the disease was created in a lab — and was let loose either by accident or on purpose by some nefarious actor.</p></blockquote>
<p>In the US Senator Cotton suggested that thespread of a coronavirus is connected to research at the Wuhan institute of virology. In response, the <a href="https://www.washingtonpost.com/politics/2020/02/16/tom-cotton-coronavirus-conspiracy/">Washington Post wrote</a>:</p>
<blockquote><p>Sen. Tom Cotton (R-Ark.) keeps <strong>repeating a coronavirus conspiracy theory that was already debunked</strong>. (&#8230;) In response to Cotton’s remarks, as well as in previous interviews with The Washington Post, numerous experts dismissed the possibility the coronavirus may be man-made.</p></blockquote>
<p>Here is what one of the most reputed medical journal (The Lancet) <a href="https://www.thelancet.com/journals/lancet/article/PIIS0140-6736(21)02019-5/fulltext">published</a>:</p>
<blockquote><p>We stand together to strongly condemn conspiracy theories suggesting that COVID-19 does not have a natural origin.</p></blockquote>
<p>The article omits the fact that the authors have glaring conflicts of interest (undisclosed).</p>
<p><span class="name"><a href="https://www.bmj.com/content/374/bmj.n1774">Thacker describes some of the event in a piece for BMJ</a>:</span></p>
<blockquote>
<p id="p-9">But the effort to brand serious consideration of a lab leak a “conspiracy theory” only ramped up. Filippa Lentzos, codirector of the Centre for Science and Security Studies at King’s College, London, told the <em>Wall Street Journal</em>, “Some of the scientists in this area very quickly closed ranks.” She added, “<strong>There were people that did not talk about this, because they feared for their careers. They feared for their grants.</strong>”</p>
<p id="p-10">Daszak had support. After he wrote an essay for the <em>Guardian</em> in June 2020 attacking the former head of MI6 for saying that the pandemic could have “started as an accident,” Jeremy Farrar, director of the Wellcome Trust [a major funder] and co-signer of the <em>Lancet</em> letter, promoted Daszak’s essay on Twitter, saying that Daszak was “always worth reading.”</p>
<p id="p-11">Daszak’s behind-the-scenes role in orchestrating the statement in the <em>Lancet</em> came to light in November 2020 in emails obtained through freedom of information requests by the watchdog group US Right To Know.</p>
<p id="p-12">“Please note that this statement will not have EcoHealth Alliance logo on it and will not be identifiable as coming from any one organization or person,” wrote Daszak in a February email, while sending around a draft of the statement for signatories. In another email, Daszak considered removing his name from the statement “so it has some distance from us and therefore doesn’t work in a counterproductive way.”</p>
<p id="p-13">Several of the 27 scientists who signed the letter Daszak circulated did so using other professional affiliations and omitted reporting their ties to EcoHealth Alliance.</p>
<p id="p-14">For Richard Ebright, professor of molecular biology at Rutgers University in New Jersey and a biosafety expert, <strong>scientific journals were complicit in helping to shout down any mention of a lab leak</strong>. “That means <em>Nature</em>, <em>Science</em>, and the <em>Lancet</em>,” he says. In recent months he and dozens of academics have signed several open letters rejecting conspiracy theory accusations and calling for an open investigation of the pandemic’s origins.</p>
<p><strong>Efforts to characterise the lab leak scenario as unworthy of serious consideration were far reaching, sometimes affecting reporting that had first appeared well before the covid-19 pandemic</strong>. For example, in March 2020 Nature Medicine added an editor’s note (“Scientists believe that an animal is the most likely source of the coronavirus”) to a 2015 paper on the creation of a hybrid version of a SARS virus, co-written by Shi.</p></blockquote>
<p>Here are the facts as we knew them back then&#8230; as anyone could know&#8230;</p>
<ul>
<li>There was an outbreak caused by a bat sarbecovirus, in the one city in the world that had been collecting hundreds of bat sarbecoviruses and experimenting on them.</li>
<li>It happened one year after that lab proposed inserting the one feature that distinguishes SARS‑CoV‑2 from all other viruses.</li>
<li>The lab in question refuses to this day to release the database of the viruses it had been working on.</li>
<li>Virus leaks have been common.</li>
</ul>
<p>It was always sensible to ask whether SARS-CoV-2 came from the Wuhan lab. Yet this was openly censored. As is often the case, instead of reflecting on this failure, many people rewrite history. &#8220;We never denied it could have come from a lab&#8221;, they say. &#8220;We never denied that it could have been human-made,&#8221; they say. But they very explicitly and strongly did so. They specifically and repeatedly said that this virus could not have been made in a laboratory:  yet a funding application to do exactly that, a few years before, had been submitted to the US government by Daszak, the very man who insisted that the lab origin was a conspiracy theory.</p>
<p>Of course, knowledgeable scientists knew that the lab origin was a possibility. They did not dare to speak up. Would you speak up when it could mean the end of your career?</p>
<p>This was not at all an isolated incident. Dr. Scott Atlas was censored by Stanford for questioning the covid dogma. <a href="https://stanfordreview.org/stanfords-censorship-rescind-the/?ref=the-stanford-review-newsletter">The Stanford Review writes</a>:</p>
<blockquote><p>This censure, now a black mark on the University, was unquestionably motivated by political animosity. Atlas, a health policy expert who worked as a professor at Stanford Medical School for fourteen years, chose to serve his country by <a href="https://apnews.com/article/virus-outbreak-ap-top-news-ca-state-wire-health-politics-886b59d445a3d20739e2f77600976ea0?ref=stanfordreview.org"><u>taking </u></a>an advisory role in the Trump Administration’s White House Coronavirus Task Force. As an advisor, Atlas <a href="https://www.cato.org/regulation/spring-2022/atlass-case-against-covid-lockdowns?ref=stanfordreview.org#:~:text=Examining%20the%20early%20data%2C%20he,sense%20to%20close%20the%20schools."><u>suggested</u></a> reopening schools and businesses and pushed back against draconian lockdown policies.</p></blockquote>
<p>You might answer&#8230; « Attacking people for getting closer to the truth isn’t new » But science seeks to address this very point. In fact, it is the very essence of the epistemology of science: the recognition that truth is not arrived by social consensus or by following the powerful. There are many ways to describe science, but to a first approximation&#8230;  Science is the process whereas anyone can post ideas and results for others to replicate, and everyone get to fail in public, and, hopefully correct themselves. Science the opposite of a gatekeeping process, it is, by its very nature, a progressive and open process.</p>
<p>It does not mean you should not use peer review publication. But you need to recognize that it is not the reference in science. Evidence is evidence. Consensus is not evidence.</p>
<p>Remember: ‘The reasonable man adapts himself to the world; the unreasonable man persists in trying to adapt the world to himself. Therefore all progress depends on the unreasonable man.’</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/05/11/peer-review-is-not-the-gold-standard-in-science/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>How fast can you construct a small list of strings in C for Python?</title>
		<link>https://lemire.me/blog/2024/05/09/how-fast-can-construct-small-list-of-strings-in-c-for-python/</link>
					<comments>https://lemire.me/blog/2024/05/09/how-fast-can-construct-small-list-of-strings-in-c-for-python/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Thu, 09 May 2024 03:55:45 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21316</guid>

					<description><![CDATA[Python is probably the most popular programming language in the world right now. Python is easy to extend using C code. You may want to return from Python a small data structure. When crossing from C to Python, there is an overhead. Thus, if performance is a concern, you do not want to return lots &#8230; <a href="https://lemire.me/blog/2024/05/09/how-fast-can-construct-small-list-of-strings-in-c-for-python/" class="more-link">Continue reading <span class="screen-reader-text">How fast can you construct a small list of strings in C for Python?</span></a>]]></description>
										<content:encoded><![CDATA[<p>Python is probably the most popular programming language in the world right now. Python is easy to extend using C code.</p>
<p>You may want to return from Python a small data structure. When crossing from C to Python, there is an overhead. Thus, if performance is a concern, you do not want to return lots of small values such as hundreds of individual small strings.</p>
<p>However, you may want to return a list of strings such as</p>
<pre style="font-size: 0.7em;"><span style="color: #808030;">[</span><span style="color: #800000;">'</span><span style="color: #0000e6;">zero elephant</span><span style="color: #800000;">'</span><span style="color: #808030;">,</span> <span style="color: #800000;">'</span><span style="color: #0000e6;">one elephant is having fun</span><span style="color: #800000;">'</span><span style="color: #808030;">,</span> <span style="color: #800000;">'</span><span style="color: #0000e6;">two elephants are having fun</span><span style="color: #800000;">'</span><span style="color: #808030;">,</span>
<span style="color: #800000;">'</span><span style="color: #0000e6;">three elephants are meeting with the president</span><span style="color: #800000;">'</span><span style="color: #808030;">,</span> <span style="color: #800000;">'</span><span style="color: #0000e6;">four elephants</span><span style="color: #800000;">'</span><span style="color: #808030;">,</span>
<span style="color: #800000;">'</span><span style="color: #0000e6;">five elephants in an hexagon</span><span style="color: #800000;">'</span><span style="color: #808030;">,</span> <span style="color: #800000;">'</span><span style="color: #0000e6;">six elephants are playing the saxophone</span><span style="color: #800000;">'</span><span style="color: #808030;">,</span>
<span style="color: #800000;">'</span><span style="color: #0000e6;">seven elephants are visiting the school</span><span style="color: #800000;">'</span><span style="color: #808030;">,</span> <span style="color: #800000;">'</span><span style="color: #0000e6;">eight elephants are at Church</span><span style="color: #800000;">'</span><span style="color: #808030;">,</span>
<span style="color: #800000;">'</span><span style="color: #0000e6;">nine elephants are having a party</span><span style="color: #800000;">'</span><span style="color: #808030;">]</span>
</pre>
<p>I am going to assume that these strings are in an array called &#8216;numbers&#8217; in my C code. Of course, if the strings are known at compile time, I could just precompute the array and return it. However, I want to generate the content dynamically.</p>
<p>A reasonable C function which will return an list is as follows:</p>
<pre>PyObject<span style="color: #808030;">*</span> all_strings<span style="color: #808030;">(</span>PyObject<span style="color: #808030;">*</span> self<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>
<span style="color: #603000;">  size_t</span> len <span style="color: #808030;">=</span> <span style="color: #800000; font-weight: bold;">sizeof</span><span style="color: #808030;">(</span>numbers<span style="color: #808030;">)</span> <span style="color: #808030;">/</span> <span style="color: #800000; font-weight: bold;">sizeof</span><span style="color: #808030;">(</span>numbers<span style="color: #808030;">[</span><span style="color: #008c00;">0</span><span style="color: #808030;">]</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>
  PyObject<span style="color: #808030;">*</span> pyList <span style="color: #808030;">=</span> PyList_New<span style="color: #808030;">(</span>len<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<span style="color: #800000; font-weight: bold;">  for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&lt;</span> len<span style="color: #800080;">;</span> <span style="color: #808030;">+</span><span style="color: #808030;">+</span>i<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>
    PyObject<span style="color: #808030;">*</span> pyString <span style="color: #808030;">=</span> PyUnicode_FromString<span style="color: #808030;">(</span>numbers<span style="color: #808030;">[</span>i<span style="color: #808030;">]</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>
    PyList_SET_ITEM<span style="color: #808030;">(</span>pyList<span style="color: #808030;">,</span> i<span style="color: #808030;">,</span> pyString<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<span style="color: #800080;">  }</span>
<span style="color: #800000; font-weight: bold;">  return</span> pyList<span style="color: #800080;">;</span>
<span style="color: #800080;">}</span>
</pre>
<p>It looks a bit complicated, but it is not. It is just an application of the Python C functions. The key element is the <tt>PyUnicode_FromString</tt> function which automatically takes a pointer to an UTF-8 string, and converts it into a Python string. In our case, all our strings are ASCII, so the function does more work than needed. In this instance, I know ahead of time the size of the list (hence <tt>PyList_New(len)</tt>), but I could also have constructed an empty list (<tt>PyList_New(0)</tt>) and appended strings to it as needed.</p>
<p>Can we do better? We might. <a href="ttps://peps.python.org/pep-0393/">Python introduced</a> lower-level string construction functions. You start by constructing a string that cannot be resized, and you must tell it whether the string content fits in one byte (ASCII or Latin1), or whether it requires more storage per character (UTF-16 without surrogate pairs) or whether you need the full Unicode range. In my case, it is easy: my strings are pure ASCII. In the general case, you would need to ascertain the string type (a <a href="https://github.com/simdutf/simdutf/issues/423">functionality we plan to add to the simdutf library</a>).</p>
<p>The code becomes slightly more complicated, but barely so&#8230;</p>
<pre>PyObject<span style="color: #808030;">*</span> all_strings_new<span style="color: #808030;">(</span>PyObject<span style="color: #808030;">*</span> self<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>
<span style="color: #603000;">  size_t</span> len <span style="color: #808030;">=</span> <span style="color: #800000; font-weight: bold;">sizeof</span><span style="color: #808030;">(</span>numbers<span style="color: #808030;">)</span> <span style="color: #808030;">/</span> <span style="color: #800000; font-weight: bold;">sizeof</span><span style="color: #808030;">(</span>numbers<span style="color: #808030;">[</span><span style="color: #008c00;">0</span><span style="color: #808030;">]</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>
  PyObject<span style="color: #808030;">*</span> pyList <span style="color: #808030;">=</span> PyList_New<span style="color: #808030;">(</span>len<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<span style="color: #800000; font-weight: bold;">  for</span> <span style="color: #808030;">(</span><span style="color: #603000;">size_t</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&lt;</span> len<span style="color: #800080;">;</span> <span style="color: #808030;">+</span><span style="color: #808030;">+</span>i<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>
<span style="color: #800000; font-weight: bold;">    const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span> str <span style="color: #808030;">=</span> numbers<span style="color: #808030;">[</span>i<span style="color: #808030;">]</span><span style="color: #800080;">;</span>
<span style="color: #603000;">    size_t</span> len <span style="color: #808030;">=</span> <span style="color: #603000;">strlen</span><span style="color: #808030;">(</span>str<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
    PyObject<span style="color: #808030;">*</span> py_string <span style="color: #808030;">=</span> PyUnicode_New<span style="color: #808030;">(</span>len<span style="color: #808030;">,</span> <span style="color: #008c00;">127</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>
    Py_UCS1<span style="color: #808030;">*</span> data <span style="color: #808030;">=</span> PyUnicode_1BYTE_DATA<span style="color: #808030;">(</span>py_string<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<span style="color: #603000;">    memcpy</span><span style="color: #808030;">(</span>data<span style="color: #808030;">,</span> str<span style="color: #808030;">,</span> len<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
    PyList_SET_ITEM<span style="color: #808030;">(</span>pyList<span style="color: #808030;">,</span> i<span style="color: #808030;">,</span> py_string<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<span style="color: #800080;">  }</span>
<span style="color: #800000; font-weight: bold;">  return</span> pyList<span style="color: #800080;">;</span>
<span style="color: #800080;">}</span>
</pre>
<p>I wrote a <a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/tree/master/2024/05/08">small benchmark</a>. You need Python and a development environment to build it. I ran the benchmark on my Apple M2 laptop, using LLVM 15 and Python 3.12. Your results will vary.</p>
<p>In my case, I get a very significant boost (2x) from the lower-level approach.</p>
<table>
<tbody>
<tr>
<td>basic</td>
<td>270 ns/structure</td>
</tr>
<tr>
<td>lower-level</td>
<td>140 ns/structure</td>
</tr>
</tbody>
</table>
<p>My data structure contains 295 bytes of strings, so the lower-level approach generates strings at over 2 GB/s, whereas the conventional approach has half the speed.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/05/09/how-fast-can-construct-small-list-of-strings-in-c-for-python/feed/</wfw:commentRss>
			<slash:comments>9</slash:comments>
		
		
			</item>
		<item>
		<title>Should Node.js be built with ClangCL under Windows?</title>
		<link>https://lemire.me/blog/2024/05/02/should-node-js-be-built-with-clangcl-under-windows/</link>
					<comments>https://lemire.me/blog/2024/05/02/should-node-js-be-built-with-clangcl-under-windows/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Thu, 02 May 2024 19:23:11 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21309</guid>

					<description><![CDATA[Under Windows, when using Visual Studio to build C++ code, there are two possible compiler strategies. The Visual Studio compiler (often referred to as MSVC) is the default compiler provided by Microsoft for Windows development. In Debug mode, the regular Visual Studio compiler produces faster compilation times and more performant code compared to ClangCL. ClangCL &#8230; <a href="https://lemire.me/blog/2024/05/02/should-node-js-be-built-with-clangcl-under-windows/" class="more-link">Continue reading <span class="screen-reader-text">Should Node.js be built with ClangCL under Windows?</span></a>]]></description>
										<content:encoded><![CDATA[<p>Under Windows, when using Visual Studio to build C++ code, there are two possible compiler strategies. The Visual Studio compiler (often referred to as MSVC) is the default compiler provided by Microsoft for Windows development. In Debug mode, the regular Visual Studio compiler produces faster compilation times and more performant code compared to ClangCL. ClangCL is part of the Clang/LLVM project, which is an open-source compiler toolchain. ClangCL is compatible with the Visual Studio runtime and links with the Microsoft implementation of the Standard Library. It’s available as an optional component in Visual Studio 2019 and later versions.</p>
<p>In Debug mode, I find that <a href="https://lemire.me/blog/2023/02/27/visual-studio-versus-clangcl/">the regular Visual Studio compiler builds faster</a>. However, in release mode, I found empirically that ClangCL approach may provide more performant code. On some micro-benchmarks, the difference can be large (e.g., 40%) although I expect more modest gains on complex systems.</p>
<p>As of Chrome 64, Google Chrome for Windows is compiled with ClangCL. Thus Clang is now used to build Chrome for all platforms it runs on, including macOS, iOS, Linux, Chrome OS, Android, and Windows. <a href="https://groups.google.com/g/mozilla.dev.platform/c/wwO48xXFx0A">Firefox switched to ClangCL</a> in 2018. And at least some game developers have adopted ClangCL.</p>
<p>Node.js is an open-source, cross-platform JavaScript runtime environment. It allows developers to execute JavaScript code outside of a web browser. Unlike traditional JavaScript, which primarily runs in browsers, Node.js enables server-side execution of JavaScript. Node.js is part of popular web development stacks Node.js relies on the Google Chrome V8 JavaScript Engine: Node.js is built on the V8 JavaScript engine, the same engine used by Google Chrome.</p>
<p>Node.js is built under Windows using the regular Visual Studio compiler. Thanks in large part to Michaël Zasso, it is possible to build the Node.js under Windows with ClangCL. Could it improve the performance?</p>
<p>To start answering this question, I ran the standard V8 benchmarks from Node.js. These benchmarks mostly focus on V8 performance and are not affected by changes in other components. For my tests, I use Visual Studio 2022 on Microsoft Surface Laptop Studio.</p>
<p>All results point at improvements. That is, on average, the speed is greater with ClangCL than using the standard Visual Studio compiler. However, there is much noise in my numbers. Using the V8 benchmarks, only one test was statistically strong (serialize.js len=256).</p>
<table>
<tbody>
<tr>
<th>function</th>
<th>improvement</th>
</tr>
<tr>
<td>v8\get-stats getHeapSpaceStatistics</td>
<td>3% +/- 11%</td>
</tr>
<tr>
<td>v8\get-stats getHeapStatistics</td>
<td>10% +/- 11%</td>
</tr>
<tr>
<td><strong>v8\serialize.js len=256</strong></td>
<td><strong>6% +/- 2%</strong></td>
</tr>
<tr>
<td>v8\serialize.js len=16384</td>
<td>2% +/- 2%</td>
</tr>
<tr>
<td>v8\serialize.js len=524288</td>
<td>19% +/- 50%</td>
</tr>
</tbody>
</table>
<p>I should stress that compilers have strengths and weaknesses. The regular Visual Studio compiler is perfectly capable and you should expect it to do better in some instances. And Microsoft have some of the best compiler engineers in the world: each new version might bring in improvements.</p>
<p>Furthermore, some tasks and benchmarks are not necessarily affected by the choice of a compiler: e.g., a network access, a disk processing routine, or a memory allocation stress test.</p>
<p>Yet it appears that there might be benefits to a transition to ClangCL for Node.js.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/05/02/should-node-js-be-built-with-clangcl-under-windows/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>Careful with Pair-of-Registers instructions on Apple Silicon</title>
		<link>https://lemire.me/blog/2024/04/29/careful-with-pair-of-registers-instructions-on-apple-silicon/</link>
					<comments>https://lemire.me/blog/2024/04/29/careful-with-pair-of-registers-instructions-on-apple-silicon/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Mon, 29 Apr 2024 00:32:38 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21297</guid>

					<description><![CDATA[Egor Bogatov is an engineer working on C# compiler technology at Microsoft. He had an intriguing remark about a performance regression on Apple hardware following what appears to be an optimization. The .NET 9.0 runtime introduced the optimization where two loads (ldr) could be combined into a single load (ldp). It is a typical peephole &#8230; <a href="https://lemire.me/blog/2024/04/29/careful-with-pair-of-registers-instructions-on-apple-silicon/" class="more-link">Continue reading <span class="screen-reader-text">Careful with Pair-of-Registers instructions on Apple Silicon</span></a>]]></description>
										<content:encoded><![CDATA[<p>Egor Bogatov is an engineer working on C# compiler technology at Microsoft. He had an intriguing remark about a performance regression on Apple hardware following what appears to be an optimization. The .NET 9.0 runtime introduced the optimization where two loads (<code>ldr</code>) could be combined into a single load (<code>ldp</code>). It is a <a href="https://en.wikipedia.org/wiki/Peephole_optimization">typical peephole optimization</a>. Yet it made things much slower in some cases.</p>
<p><a href="http://lemire.me/blog/wp-content/uploads/2024/04/GMMFMvVXYAA1lJU-2.jpeg"><img decoding="async" class="alignnone size-full wp-image-21298" src="http://lemire.me/blog/wp-content/uploads/2024/04/GMMFMvVXYAA1lJU-2.jpeg" alt="" width="80%" srcset="https://lemire.me/blog/wp-content/uploads/2024/04/GMMFMvVXYAA1lJU-2.jpeg 978w, https://lemire.me/blog/wp-content/uploads/2024/04/GMMFMvVXYAA1lJU-2-300x75.jpeg 300w, https://lemire.me/blog/wp-content/uploads/2024/04/GMMFMvVXYAA1lJU-2-768x192.jpeg 768w" sizes="(max-width: 978px) 100vw, 978px" /></a><br />
Under ARM, the <code>ldr</code> instruction is used to load a single value from memory into a register. It operates on a single register at a time. Its assembly syntax is straightforward <code>ldr Rd, [Rn, #offset]</code>. The <code>ldp</code> instruction (Load Pair of Registers) loads two consecutive values from memory into two registers simultaneously. Its assembly syntax is similar but there are two destination registers: <code>ldp Rd1, Rd2, [Rn, #offset]</code>. The <code>ldp</code> instruction loads two 32-bit words or two 64-bit words from memory, and writes them to two registers.</p>
<p>Given a choice, it seems that you should prefer the <code>ldp</code> instruction. After all, it is a single instruction. But there is a catch on Apple silicon: if you are loading data from a memory that was just written to, there might be a significant penalty to <code>ldp</code>.</p>
<p>To illustrate, let us consider the case where we write and load two values repeatedly using two loads and two stores:</p>
<pre><span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">int</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&lt;</span> <span style="color: #008c00;">1000000000</span><span style="color: #800080;">;</span> i<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span>
<span style="color: #800000; font-weight: bold;">  int</span> tmp1<span style="color: #808030;">,</span> tmp2<span style="color: #800080;">;</span>
  __asm__ <span style="color: #800000; font-weight: bold;">volatile</span><span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">ldr %w0, [%2]</span><span style="color: #0f69ff;">\n</span><span style="color: #800000;">"</span>
<span style="color: #800000;">                   "</span><span style="color: #0000e6;">ldr %w1, [%2, #4]</span><span style="color: #0f69ff;">\n</span><span style="color: #800000;">"</span>
<span style="color: #800000;">                   "</span><span style="color: #0000e6;">str %w0, [%2]</span><span style="color: #0f69ff;">\n</span><span style="color: #800000;">"</span>
<span style="color: #800000;">                   "</span><span style="color: #0000e6;">str %w1, [%2, #4]</span><span style="color: #0f69ff;">\n</span><span style="color: #800000;">"</span>
<span style="color: #800080;">    :</span> <span style="color: #800000;">"</span><span style="color: #0000e6;">=&amp;r</span><span style="color: #800000;">"</span><span style="color: #808030;">(</span>tmp1<span style="color: #808030;">)</span><span style="color: #808030;">,</span> <span style="color: #800000;">"</span><span style="color: #0000e6;">=&amp;r</span><span style="color: #800000;">"</span><span style="color: #808030;">(</span>tmp2<span style="color: #808030;">)</span><span style="color: #800080;"> :</span> <span style="color: #800000;">"</span><span style="color: #0000e6;">r</span><span style="color: #800000;">"</span><span style="color: #808030;">(</span>ptr<span style="color: #808030;">)</span><span style="color: #800080;">:</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<span style="color: #800080;">}</span>
<!--Created using ToHTML.com on 2024-04-29 00:13:03 UTC -->
</pre>
<p>Next, let us consider an optimized approach where we combine the two loads into a single one:</p>
<pre><span style="color: #800000; font-weight: bold;">for</span> <span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">int</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span> i <span style="color: #808030;">&lt;</span> <span style="color: #008c00;">1000000000</span><span style="color: #800080;">;</span> i<span style="color: #808030;">+</span><span style="color: #808030;">+</span><span style="color: #808030;">)</span> <span style="color: #800080;">{</span>
<span style="color: #800000; font-weight: bold;">  int</span> tmp1<span style="color: #808030;">,</span> tmp2<span style="color: #800080;">;</span>
  __asm__ <span style="color: #800000; font-weight: bold;">volatile</span><span style="color: #808030;">(</span><span style="color: #800000;">"</span><span style="color: #0000e6;">ldp %w0, %w1, [%2]</span><span style="color: #0f69ff;">\n</span><span style="color: #800000;">"</span>
<span style="color: #800000;">                   "</span><span style="color: #0000e6;">str %w0, [%2]</span><span style="color: #0f69ff;">\n</span><span style="color: #800000;">"</span>
<span style="color: #800000;">                   "</span><span style="color: #0000e6;">str %w1, [%2, #4]</span><span style="color: #0f69ff;">\n</span><span style="color: #800000;">"</span>
<span style="color: #800080;">    :</span> <span style="color: #800000;">"</span><span style="color: #0000e6;">=&amp;r</span><span style="color: #800000;">"</span><span style="color: #808030;">(</span>tmp1<span style="color: #808030;">)</span><span style="color: #808030;">,</span> <span style="color: #800000;">"</span><span style="color: #0000e6;">=&amp;r</span><span style="color: #800000;">"</span><span style="color: #808030;">(</span>tmp2<span style="color: #808030;">)</span> <span style="color: #800080;">:</span> <span style="color: #800000;">"</span><span style="color: #0000e6;">r</span><span style="color: #800000;">"</span><span style="color: #808030;">(</span>ptr<span style="color: #808030;">)</span> <span style="color: #800080;">:</span><span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<span style="color: #800080;">}</span>
<!--Created using ToHTML.com on 2024-04-29 00:15:02 UTC -->
</pre>
<p>It would be surprising if this new version was slower, but it can be. <a href="https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/tree/master/2024/04/28">The code for the benchmark is available</a>. I benchmarked both on AWS using Amazon&#8217;s graviton 3 processors, and on Apple M2. Your results will vary.</p>
<table>
<tbody>
<tr>
<th>function</th>
<th>graviton 3</th>
<th>Apple M2</th>
</tr>
<tr>
<td>2 loads, 2 stores</td>
<td>2.2 ms/loop</td>
<td>0.68 ms/loop</td>
</tr>
<tr>
<td>1 load, 2 stores</td>
<td>1.6 ms/loop</td>
<td>1.6 ms/loop</td>
</tr>
</tbody>
</table>
<p>I have no particular insight as to why it might be, but my guess is that Apple Silicon has a Store-to-Load forwarding optimization that does not work with Pair-Of-Registers loads and stores.</p>
<p>There is an <a href="https://developer.apple.com/documentation/apple-silicon/cpu-optimization-guide">Apple Silicon CPU Optimization Guide</a> which might provide better insight.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/04/29/careful-with-pair-of-registers-instructions-on-apple-silicon/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>Large language models (e.g., ChatGPT) as research assistants</title>
		<link>https://lemire.me/blog/2024/04/27/large-language-models-e-g-chatgpt-as-research-assistants/</link>
					<comments>https://lemire.me/blog/2024/04/27/large-language-models-e-g-chatgpt-as-research-assistants/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Sat, 27 Apr 2024 00:05:24 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21288</guid>

					<description><![CDATA[Software can beat human beings at most games&#8230; from Chess to Go, and even poker. Large language models like GPT-4 offered through services such as ChatGPT allow us to solve a new breed of problems. GPT-4 can beat 90% of human beings at the bar exam. Artificial intelligence can match math Olympians. The primary skills &#8230; <a href="https://lemire.me/blog/2024/04/27/large-language-models-e-g-chatgpt-as-research-assistants/" class="more-link">Continue reading <span class="screen-reader-text">Large language models (e.g., ChatGPT) as research assistants</span></a>]]></description>
										<content:encoded><![CDATA[<p>Software can beat human beings at most games&#8230; from Chess to Go, and even poker. Large language models like GPT-4 offered through services such as ChatGPT allow us to solve a new breed of problems. <a href="https://www.cnbc.com/2023/03/14/openai-announces-gpt-4-says-beats-90percent-of-humans-on-sat.html">GPT-4 can beat 90% of human beings at the bar exam</a>. <a href="https://www.scientificamerican.com/article/ai-matches-the-abilities-of-the-best-math-olympians/">Artificial intelligence can match math Olympians</a>.</p>
<p>The primary skills of academics are language-related: synthesis, analogy, extrapolation, etc. Academics analyze the literature, identify gaps, and formulate research questions. They review and synthesize existing research. They write research papers, grant proposals, and reports. Being able to produce well-structured and grammatically correct prose is a vital skill for academics.</p>
<div style="float: right; width: 60%; margin: 2px;"><a href="http://lemire.me/blog/wp-content/uploads/2024/04/plot.png"><img decoding="async" class="alignnone size-large wp-image-21290" src="http://lemire.me/blog/wp-content/uploads/2024/04/plot-1024x471.png" alt="" width="100%" srcset="https://lemire.me/blog/wp-content/uploads/2024/04/plot-1024x471.png 1024w, https://lemire.me/blog/wp-content/uploads/2024/04/plot-300x138.png 300w, https://lemire.me/blog/wp-content/uploads/2024/04/plot-768x354.png 768w, https://lemire.me/blog/wp-content/uploads/2024/04/plot-1536x707.png 1536w, https://lemire.me/blog/wp-content/uploads/2024/04/plot.png 1972w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></div>
<p>Unsurprisingly, software and artificial intelligence can help academics, and maybe replace them in some cases. <a href="https://arxiv.org/pdf/2404.01268">Liang et al. found that</a> an increasing number of research papers are written with tools like GPT-4 (up to 18% in some fields). It is quite certain that in the near future, a majority of all research papers will be written with the help of artificial intelligence. I suspect that they will be reviewed with artificial intelligence as well. We might soon face a closed loop where software writes papers while other software reviews it.</p>
<p>I encourage scholars to apply artificial intelligence immediately for tasks such as&#8230;</p>
<ol>
<li><strong>Querying a document</strong>. A tool like BingChat from Microsoft allows you to open a PDF document and query it. You may ask &#8220;what are the main findings of this study?&#8221; or &#8220;are there any practical applications for this work?&#8221;.<br />
<a href="http://lemire.me/blog/wp-content/uploads/2024/04/bingchat.png"><img decoding="async" class="alignnone size-large wp-image-21289" src="http://lemire.me/blog/wp-content/uploads/2024/04/bingchat-1024x552.png" alt="" width="60%" srcset="https://lemire.me/blog/wp-content/uploads/2024/04/bingchat-1024x552.png 1024w, https://lemire.me/blog/wp-content/uploads/2024/04/bingchat-300x162.png 300w, https://lemire.me/blog/wp-content/uploads/2024/04/bingchat-768x414.png 768w, https://lemire.me/blog/wp-content/uploads/2024/04/bingchat-1536x828.png 1536w, https://lemire.me/blog/wp-content/uploads/2024/04/bingchat.png 1680w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></li>
<li><strong>Improve text</strong>. Many academics, like myself, use English as a second language. Of course, large language models can translate, but they can also improve your wording. It is more than a mere grammar checker: it can rewrite part of your text, correcting bad usages as it goes.</li>
<li><strong>Idea generation</strong>. I used to spend a lot of time chatting with colleagues about a vague idea I had. &#8220;How could we check whether X is true?&#8221; A tool like ChatGPT can help you get started. If you ask how to design an experiment to check a given hypothesis, it can often do a surprisingly good job.</li>
<li><strong>Grant applications</strong>. You can use tools like ChatGTP to help you with grant applications. Ask it to make up short-term and long-term objectives, sketch a methodology and discuss the impact of your work&#8230; it will come up with something credible right away. It is likely that thousands of grant applications have been written with artificial intelligence.</li>
<li><strong>Writing code</strong>. You are not much of a programmer, but you want an R script that will load data from your Excel spreadsheet and do some statistical analysis? ChatGPT will do it for you.</li>
<li><strong>Find reviewers and journals</strong>. Sometimes you have done some work and you would like help picking the right journal, a tool like ChatGPT can help. If a student of yours finished their thesis, ChatGPT can help you identify prospective referees.</li>
</ol>
<p>I suspect that much academic work will soon greatly benefit from artificial intelligence to the point where a few academics will be able to do the work that required an entire research institute in the past.</p>
<p>And this new technology should make mediocre academics even less useful, relatively speaking. If artificial intelligence can write credible papers and grant applications, what is the worth of someone who can barely do these things?</p>
<p>You would think that these technological advances should accelerate progress. But, <a href="https://www.theatlantic.com/science/archive/2018/11/diminishing-returns-science/575665/">as argued by Patrick Collison and Michael Nielsen</a>, science productivity has been falling despite all our technological progress. Physics is not advancing faster today than it did in the first half of the XXth century. It may even be stagnant in relative terms. I do not think that we should hastily conclude that ChatGPT will somehow accelerate the rate of progress in Physics. As Clusmann et al. point out:  <a href="https://www.nature.com/articles/s43856-023-00370-1">it may simply ease scientific misconduct</a>. We could soon be drowning in a sea of automatically generated documents. <a href="https://www.nature.com/articles/s41586-024-07146-0">Messeri and Crockett</a> put it elegantly:</p>
<blockquote><p>AI tools in science risks introducing a phase of scientific enquiry in which we produce more but understand less</p></blockquote>
<p>Yet there are reasons to be optimistic. By allowing a small group of researchers to be highly productive, by freeing them to explore further with less funding, we could be on the verge of entering into a new era of scientific progress. However, it may not be directly measurable using our conventional tools. It may not appear as more highly cited papers or through large grants. A good illustration is <a href="https://huggingface.co">Hugging Face</a>, a site where thousands of engineers from all over the world explore new artificial-intelligence models. This type of work is undeniably scientific research: we have metrics, hypotheses, testing, reproducibility, etc. However, it does not look like &#8216;academic work&#8217;.</p>
<p>In any case, conventional academics will be increasingly challenged. Ironically, plumbers and electricians won&#8217;t be so easily replaced, a fact sometimes attributed to the Moravec paradox. Steven Pinker wrote in 1994 that cooks and gardeners are secured in their jobs for decades to come, unlike stock market analysis and engineers. But I suspect that the principle even extends within the academy: some work, like conducting actual experiments, is harder to automate than producing and running models. The theoretical work is likely more impacted by intelligence artificial than more applied, concrete work.</p>
<div></div>
<p><strong>Note</strong>: This blog post was not written with artificial intelligence. Expect typos and grammatical mistakes.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/04/27/large-language-models-e-g-chatgpt-as-research-assistants/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>How do you recognize an expert?</title>
		<link>https://lemire.me/blog/2024/04/21/how-do-you-recognize-an-expert/</link>
					<comments>https://lemire.me/blog/2024/04/21/how-do-you-recognize-an-expert/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Sun, 21 Apr 2024 17:35:28 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21278</guid>

					<description><![CDATA[Go back to the roots: experience. An expert is someone who has repeatedly solved the concrete problem you are encountering. If your toilet leaks, an experienced plumber is an expert. An expert has a track record and has had to face the consequences of their work. Failing is part of what makes an expert: any &#8230; <a href="https://lemire.me/blog/2024/04/21/how-do-you-recognize-an-expert/" class="more-link">Continue reading <span class="screen-reader-text">How do you recognize an expert?</span></a>]]></description>
										<content:encoded><![CDATA[<p>Go back to the roots: experience. An expert is someone who has repeatedly solved the concrete problem you are encountering. If your toilet leaks, an experienced plumber is an expert. An expert has a track record and has had to face the consequences of their work. Failing is part of what makes an expert: any expert should have stories about how things went wrong.</p>
<p>I associate the word expert with ‘the problem’ because we know that expertise does not transfer well: a plumber does not necessarily make a good electrician. And within plumbing, there are problems that only some plumbers should solve. Furthermore, you cannot abstract a problem: you can study fluid mechanics all you want, but it won’t turn you into an expert plumber.</p>
<p>That’s one reason why employers ask for relevant experience: they seek expertise they can rely on. It is sometimes difficult to acquire expertise in an academic or bureaucratic setting because the problems are distant or abstract. Your experience may not translate well into practice. Sadly we live in a society where we often lose track of and undervalue genuine expertise… thus you may take software programming classes from people who never built software or civil engineering classes from people who never worked on infrastructure projects.</p>
<p>So… how do you become an expert? Work on real problems. Do not fall for reverse causation: if all experts dress in white, dressing in white won’t turn you into an expert. Listening to the expert is not going to turn you into an expert. Lectures and videos can be inspiring but they don’t build your expertise. Getting a job with a company that has real problems, or running your own business… that’s how you acquire experience and expertise.</p>
<p>Why would you want to when you can make a good living otherwise, without the hard work of solving real problems? Actual expertise is capital that can survive a market crash or a political crisis. After Germany’s defeat in 1945… many of the aerospace experts went to work for the American government. Relevant expertise is robust capital.</p>
<p>Why won’t everyone seek genuine expertise? Because there is a strong countervailing force: showing a total lack of practical skill is a status signal. Wearing a tie shows that you don’t need to work with your hands.</p>
<p>But again: don’t fall for reverse causality… broadcasting that you don’t have useful skills might be fun if you are already of high status… but if not, it may not grant you a higher status.</p>
<p>And status games without a solid foundation might lead to anxiety. If you can get stuff done, if you can fix problems, you don’t need to worry so much about what people say about you. You may not like the color of the shoes of your plumber, but you won’t snob him over it.</p>
<p>So get expertise and maintain it. You are likely to become more confident and happier.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/04/21/how-do-you-recognize-an-expert/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>How quickly can you break a long string into lines?</title>
		<link>https://lemire.me/blog/2024/04/19/how-quickly-can-you-break-a-long-string-into-lines/</link>
					<comments>https://lemire.me/blog/2024/04/19/how-quickly-can-you-break-a-long-string-into-lines/#comments</comments>
		
		<dc:creator><![CDATA[Daniel Lemire]]></dc:creator>
		<pubDate>Fri, 19 Apr 2024 21:25:21 +0000</pubDate>
				<category><![CDATA[]]></category>
		<guid isPermaLink="false">https://lemire.me/blog/?p=21272</guid>

					<description><![CDATA[Suppose that you receive a long string and you need to break it down into lines. Consider the simplified problems where you need to break the string into segments of (say) 72 characters. It is a relevant problem if your string is a base64 string or a Fortran formatted statement. The problem could be a &#8230; <a href="https://lemire.me/blog/2024/04/19/how-quickly-can-you-break-a-long-string-into-lines/" class="more-link">Continue reading <span class="screen-reader-text">How quickly can you break a long string into lines?</span></a>]]></description>
										<content:encoded><![CDATA[<p>Suppose that you receive a long string and you need to break it down into lines. Consider the simplified problems where you need to break the string into segments of (say) 72 characters. It is a relevant problem if your string is a <a href="https://en.wikipedia.org/wiki/Base64">base64 string</a> or a <a href="https://irix7.com/techpubs/007-0710-060.pdf">Fortran formatted statement</a>.</p>
<p>The problem could be a bit complicated because you might need consider the syntax. So the speed of breaking into a new line every 72 characters irrespective of the content provides an upper bound on the performance of breaking content into lines.</p>
<p>The most obvious algorithm could be to copy the content, line by line:</p>
<pre><span style="color: #800000; font-weight: bold;">void</span> break_lines<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>out<span style="color: #808030;">,</span> <span style="color: #800000; font-weight: bold;">const</span> <span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>in<span style="color: #808030;">,</span> <span style="color: #603000;">size_t</span> length<span style="color: #808030;">,</span>
<span style="color: #603000;">  size_t</span> line_length<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>
<span style="color: #603000;">  size_t</span> j <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span>
<span style="color: #603000;">  size_t</span> i <span style="color: #808030;">=</span> <span style="color: #008c00;">0</span><span style="color: #800080;">;</span>
<span style="color: #800000; font-weight: bold;">  for</span> <span style="color: #808030;">(</span><span style="color: #800080;">;</span> i <span style="color: #808030;">+</span> line_length <span style="color: #808030;">&lt;</span><span style="color: #808030;">=</span> length<span style="color: #800080;">;</span> i <span style="color: #808030;">+</span><span style="color: #808030;">=</span> line_length<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>
    <span style="color: #603000;">memcpy</span><span style="color: #808030;">(</span>out <span style="color: #808030;">+</span> j<span style="color: #808030;">,</span> in <span style="color: #808030;">+</span> i<span style="color: #808030;">,</span> line_length<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
    out<span style="color: #808030;">[</span>j<span style="color: #808030;">+</span>line_length<span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #0000e6;">'\n'</span><span style="color: #800080;">;</span>
    j <span style="color: #808030;">+</span><span style="color: #808030;">=</span> line_length <span style="color: #808030;">+</span> <span style="color: #008c00;">1</span><span style="color: #800080;">;</span>
<span style="color: #800080;">  }</span>
<span style="color: #800000; font-weight: bold;">  if</span> <span style="color: #808030;">(</span>i <span style="color: #808030;">&lt;</span> length<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>
    <span style="color: #603000;">memcpy</span><span style="color: #808030;">(</span>out <span style="color: #808030;">+</span> j<span style="color: #808030;">,</span> in <span style="color: #808030;">+</span> i<span style="color: #808030;">,</span> length <span style="color: #808030;">-</span> i<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<span style="color: #800080;">  }</span>
<span style="color: #800080;">}</span>
<!--Created using ToHTML.com on 2024-04-19 21:01:25 UTC -->
</pre>
<p>Copying data in blocks in usually quite fast unless you are unlucky and <a href="https://lemire.me/blog/2018/01/04/dont-make-it-appear-like-you-are-reading-your-own-recent-writes/">you trigger aliasing</a>. However, allocating a whole new buffer could be wasteful, especially if you only need to extend the current buffer by a few bytes.</p>
<p>A better option could thus be to do the work in-place. The difficulty is that if you load the data from the current array, and then write it a bit further away, you might be overwriting the data you need to load next. A solution is to proceed in reverse: start from the end&#8230; move what would be the last line off by a few bytes, then move the second last line and so forth. Your code might look like the following C function:</p>
<pre><span style="color: #800000; font-weight: bold;">void</span> break_lines_inplace<span style="color: #808030;">(</span><span style="color: #800000; font-weight: bold;">char</span> <span style="color: #808030;">*</span>in<span style="color: #808030;">,</span> <span style="color: #603000;">size_t</span> length<span style="color: #808030;">,</span> <span style="color: #603000;">size_t</span> line_length<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>
<span style="color: #603000;">  size_t</span> left <span style="color: #808030;">=</span> length <span style="color: #808030;">%</span> line_length<span style="color: #800080;">;</span>
<span style="color: #603000;">  size_t</span> i <span style="color: #808030;">=</span> length <span style="color: #808030;">-</span> left<span style="color: #800080;">;</span>
<span style="color: #603000;">  size_t</span> j <span style="color: #808030;">=</span> length <span style="color: #808030;">+</span> length <span style="color: #808030;">/</span> line_length <span style="color: #808030;">-</span> left<span style="color: #800080;">;</span>
  <span style="color: #603000;">memmove</span><span style="color: #808030;">(</span>in <span style="color: #808030;">+</span> j<span style="color: #808030;">,</span> in <span style="color: #808030;">+</span> i<span style="color: #808030;">,</span> left<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
<span style="color: #800000; font-weight: bold;">  while</span> <span style="color: #808030;">(</span>i <span style="color: #808030;">&gt;</span><span style="color: #808030;">=</span> line_length<span style="color: #808030;">)</span> <span style="color: #800080;">{</span>
    i <span style="color: #808030;">-</span><span style="color: #808030;">=</span> line_length<span style="color: #800080;">;</span>
    j <span style="color: #808030;">-</span><span style="color: #808030;">=</span> line_length <span style="color: #808030;">+</span> <span style="color: #008c00;">1</span><span style="color: #800080;">;</span>
    <span style="color: #603000;">memmove</span><span style="color: #808030;">(</span>in <span style="color: #808030;">+</span> j<span style="color: #808030;">,</span> in <span style="color: #808030;">+</span> i<span style="color: #808030;">,</span> line_length<span style="color: #808030;">)</span><span style="color: #800080;">;</span>
    in<span style="color: #808030;">[</span>j<span style="color: #808030;">+</span>line_length<span style="color: #808030;">]</span> <span style="color: #808030;">=</span> <span style="color: #0000e6;">'\n'</span><span style="color: #800080;">;</span>
<span style="color: #800080;">  }</span>
<span style="color: #800080;">}</span>
<!--Created using ToHTML.com on 2024-04-19 21:07:51 UTC -->
</pre>
<p>I wrote a benchmark. I report the results only for a 64KB input. Importantly, my numbers do not include memory allocation which is separate. </p>
<p>A potentially important factor is whether we allow function inlining: without inlining, the compiler does not know the line length at compile-time and cannot optimize accordingly.</p>
<p>Your results will vary, but here are my own results:</p>
<table>
<tbody>
<tr>
<th>method</th>
<th>Intel Ice Lake, GCC 12</th>
<th>Apple M2, LLVM 14</th>
</tr>
<tr>
<td>memcpy</td>
<td>43 GB/s</td>
<td>70 GB/s</td>
</tr>
<tr>
<td>copy</td>
<td>25 GB/s</td>
<td>40 GB/s</td>
</tr>
<tr>
<td>copy (no inline)</td>
<td>25 GB/s</td>
<td>37 GB/s</td>
</tr>
<tr>
<td>in-place</td>
<td>25 GB/s</td>
<td>38 GB/s</td>
</tr>
<tr>
<td>in-place  (no inline)</td>
<td>25 GB/s</td>
<td>38 GB/s</td>
</tr>
</tbody>
</table>
<p>In my case, it does not matter whether we do the computation in-place or not. The in-place approach generates more instructions but we are not limited by the number of instructions.</p>
<p>At least in my results, I do not see a large effect from inlining. In fact, for the in-place routine, there appears to be no effect whatsoever.</p>
<p>Roughly speaking, I achieve a bit more than half the speed as that of a memory copy. We might be limited by the number of loads and stores. There might be a clever way to close the gap.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://lemire.me/blog/2024/04/19/how-quickly-can-you-break-a-long-string-into-lines/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
	</channel>
</rss>
